
mpu6050SensorFusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e928  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0800eab8  0800eab8  0000fab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f088  0800f088  00011310  2**0
                  CONTENTS
  4 .ARM          00000008  0800f088  0800f088  00010088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f090  0800f090  00011310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f090  0800f090  00010090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f094  0800f094  00010094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000310  20000000  0800f098  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011310  2**0
                  CONTENTS
 10 .bss          00001ee4  20000310  20000310  00011310  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200021f4  200021f4  00011310  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011310  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012fa9  00000000  00000000  00011340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035e8  00000000  00000000  000242e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  000278d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c6c  00000000  00000000  00028948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020fec  00000000  00000000  000295b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000167df  00000000  00000000  0004a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000beabf  00000000  00000000  00060d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f83e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005778  00000000  00000000  0011f884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00124ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000310 	.word	0x20000310
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eaa0 	.word	0x0800eaa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000314 	.word	0x20000314
 80001cc:	0800eaa0 	.word	0x0800eaa0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <_mulmat>:
        const _float_t * b, 
        _float_t * c, 
        const int arows, 
        const int acols, 
        const int bcols)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	@ 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	603b      	str	r3, [r7, #0]
    for (int i=0; i<arows; ++i) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e052      	b.n	8000ff2 <_mulmat+0xba>
        for (int j=0; j<bcols; ++j) {
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	e048      	b.n	8000fe4 <_mulmat+0xac>
            c[i*bcols+j] = 0;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f56:	fb03 f202 	mul.w	r2, r3, r2
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
            for (int k=0; k<acols; ++k) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	e032      	b.n	8000fd6 <_mulmat+0x9e>
                c[i*bcols+j] += a[i*acols+k] * b[k*bcols+j];
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f74:	fb03 f202 	mul.w	r2, r3, r2
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	ed93 7a00 	vldr	s14, [r3]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f8a:	fb03 f202 	mul.w	r2, r3, r2
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	edd3 6a00 	vldr	s13, [r3]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fa0:	fb03 f202 	mul.w	r2, r3, r2
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	4413      	add	r3, r2
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fba:	fb03 f202 	mul.w	r2, r3, r2
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fcc:	edc3 7a00 	vstr	s15, [r3]
            for (int k=0; k<acols; ++k) {
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	dbc8      	blt.n	8000f70 <_mulmat+0x38>
        for (int j=0; j<bcols; ++j) {
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbb2      	blt.n	8000f52 <_mulmat+0x1a>
    for (int i=0; i<arows; ++i) {
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	dba8      	blt.n	8000f4c <_mulmat+0x14>
            }
        }
    }
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3724      	adds	r7, #36	@ 0x24
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_mulvec>:
        const _float_t * a, 
        const _float_t * x, 
        _float_t * y, 
        const int m, 
        const int n)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e034      	b.n	8001086 <_mulvec+0x7e>
        y[i] = 0;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j)
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	e023      	b.n	8001078 <_mulvec+0x70>
            y[i] += x[j] * a[i*n+j];
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	ed93 7a00 	vldr	s14, [r3]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	4413      	add	r3, r2
 8001044:	edd3 6a00 	vldr	s13, [r3]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	6a3a      	ldr	r2, [r7, #32]
 800104c:	fb03 f202 	mul.w	r2, r3, r2
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106e:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	3301      	adds	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbd7      	blt.n	8001030 <_mulvec+0x28>
    for (int i=0; i<m; ++i) {
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	dbc6      	blt.n	800101c <_mulvec+0x14>
    }
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	371c      	adds	r7, #28
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_transpose>:

/// @private
static void _transpose(
        const _float_t * a, _float_t * at, const int m, const int n)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i)
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	e020      	b.n	80010f2 <_transpose+0x56>
        for (int j=0; j<n; ++j) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	e016      	b.n	80010e4 <_transpose+0x48>
            at[j*m+i] = a[i*n+j];
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	fb03 f202 	mul.w	r2, r3, r2
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	441a      	add	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	fb03 f101 	mul.w	r1, r3, r1
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	440b      	add	r3, r1
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	440b      	add	r3, r1
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j) {
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	3301      	adds	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbe4      	blt.n	80010b6 <_transpose+0x1a>
    for (int i=0; i<m; ++i)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dbda      	blt.n	80010b0 <_transpose+0x14>
        }
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <_addmat>:

/// @private
static void _addmat(
        const _float_t * a, const _float_t * b, _float_t * c, 
        const int m, const int n)
{
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	e02f      	b.n	800117c <_addmat+0x74>
        for (int j=0; j<n; ++j) {
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	e025      	b.n	800116e <_addmat+0x66>
            c[i*n+j] = a[i*n+j] + b[i*n+j];
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	6a3a      	ldr	r2, [r7, #32]
 8001126:	fb03 f202 	mul.w	r2, r3, r2
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	ed93 7a00 	vldr	s14, [r3]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	6a3a      	ldr	r2, [r7, #32]
 800113c:	fb03 f202 	mul.w	r2, r3, r2
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4413      	add	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	4413      	add	r3, r2
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	6a3a      	ldr	r2, [r7, #32]
 8001152:	fb03 f202 	mul.w	r2, r3, r2
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001164:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	3301      	adds	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	429a      	cmp	r2, r3
 8001174:	dbd5      	blt.n	8001122 <_addmat+0x1a>
    for (int i=0; i<m; ++i) {
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	dbcb      	blt.n	800111c <_addmat+0x14>
        }
    }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <_negate>:

/// @private
static void _negate(_float_t * a, const int m, const int n)
{        
 8001192:	b480      	push	{r7}
 8001194:	b087      	sub	sp, #28
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
    for (int i=0; i<m; ++i) {
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	e024      	b.n	80011ee <_negate+0x5c>
        for (int j=0; j<n; ++j) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	e01a      	b.n	80011e0 <_negate+0x4e>
            a[i*n+j] = -a[i*n+j];
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	fb03 f202 	mul.w	r2, r3, r2
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	fb03 f202 	mul.w	r2, r3, r2
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4413      	add	r3, r2
 80011d2:	eef1 7a67 	vneg.f32	s15, s15
 80011d6:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	3301      	adds	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dbe0      	blt.n	80011aa <_negate+0x18>
    for (int i=0; i<m; ++i) {
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	dbd6      	blt.n	80011a4 <_negate+0x12>
        }
    }
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_addeye>:

/// @private
static void _addeye(_float_t * a, const int n)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
    for (int i=0; i<n; ++i) {
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	e01c      	b.n	800124e <_addeye+0x4a>
        a[i*n+i] += 1;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	fb03 f202 	mul.w	r2, r3, r2
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	fb03 f202 	mul.w	r2, r3, r2
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001240:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001244:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<n; ++i) {
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3301      	adds	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	dbde      	blt.n	8001214 <_addeye+0x10>
    }
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_choldc1>:
/* Cholesky-decomposition matrix-inversion code, adapated from
http://jean-pierre.moreau.pagesperso-orange.fr/Cplus/_choles_cpp.txt */

/// @private
static int _choldc1(_float_t * a, _float_t * p, const int n) 
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b089      	sub	sp, #36	@ 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < n; i++) {
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	e075      	b.n	8001362 <_choldc1+0xfe>
        for (int j = i; j < n; j++) {
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	e06b      	b.n	8001354 <_choldc1+0xf0>
            _float_t sum = a[i*n+j];
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	fb03 f202 	mul.w	r2, r3, r2
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4413      	add	r3, r2
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	617b      	str	r3, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b01      	subs	r3, #1
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	e020      	b.n	80012dc <_choldc1+0x78>
                sum -= a[i*n+k] * a[j*n+k];
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	fb03 f202 	mul.w	r2, r3, r2
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	ed93 7a00 	vldr	s14, [r3]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	fb03 f202 	mul.w	r2, r3, r2
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	4413      	add	r3, r2
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80012ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d2:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	3b01      	subs	r3, #1
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	dadb      	bge.n	800129a <_choldc1+0x36>
            }
            if (i == j) {
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d11c      	bne.n	8001324 <_choldc1+0xc0>
                if (sum <= 0) {
 80012ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f6:	d801      	bhi.n	80012fc <_choldc1+0x98>
                    return 1; /* error */
 80012f8:	2301      	movs	r3, #1
 80012fa:	e037      	b.n	800136c <_choldc1+0x108>
                }
                p[i] = sqrt(sum);
 80012fc:	6978      	ldr	r0, [r7, #20]
 80012fe:	f7ff f923 	bl	8000548 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	ec43 2b10 	vmov	d0, r2, r3
 800130a:	f00c fa3b 	bl	800d784 <sqrt>
 800130e:	ec51 0b10 	vmov	r0, r1, d0
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	18d4      	adds	r4, r2, r3
 800131a:	f7ff fc45 	bl	8000ba8 <__aeabi_d2f>
 800131e:	4603      	mov	r3, r0
 8001320:	6023      	str	r3, [r4, #0]
 8001322:	e014      	b.n	800134e <_choldc1+0xea>
            }
            else {
                a[j*n+i] = sum / p[i];
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	4413      	add	r3, r2
 800132c:	ed93 7a00 	vldr	s14, [r3]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	fb03 f202 	mul.w	r2, r3, r2
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4413      	add	r3, r2
 8001342:	edd7 6a05 	vldr	s13, [r7, #20]
 8001346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i; j < n; j++) {
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	3301      	adds	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	db8f      	blt.n	800127c <_choldc1+0x18>
    for (int i = 0; i < n; i++) {
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	3301      	adds	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	429a      	cmp	r2, r3
 8001368:	db85      	blt.n	8001276 <_choldc1+0x12>
            }
        }
    }

    return 0; // success:w
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3724      	adds	r7, #36	@ 0x24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd90      	pop	{r4, r7, pc}

08001374 <_choldcsl>:

/// @private
static int _choldcsl(const _float_t * A, _float_t * a, _float_t * p, const int n) 
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
 8001386:	e020      	b.n	80013ca <_choldcsl+0x56>
        for (int j = 0; j < n; j++) {
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
 800138c:	e016      	b.n	80013bc <_choldcsl+0x48>
            a[i*n+j] = A[i*n+j];
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	fb03 f202 	mul.w	r2, r3, r2
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	441a      	add	r2, r3
 80013a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	fb03 f101 	mul.w	r1, r3, r1
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	440b      	add	r3, r1
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	440b      	add	r3, r1
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < n; j++) {
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	3301      	adds	r3, #1
 80013ba:	623b      	str	r3, [r7, #32]
 80013bc:	6a3a      	ldr	r2, [r7, #32]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbe4      	blt.n	800138e <_choldcsl+0x1a>
    for (int i = 0; i < n; i++) {
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	3301      	adds	r3, #1
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dbda      	blt.n	8001388 <_choldcsl+0x14>
        }
    }
    if (_choldc1(a, p, n)) {
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	68b8      	ldr	r0, [r7, #8]
 80013d8:	f7ff ff44 	bl	8001264 <_choldc1>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <_choldcsl+0x72>
        return 1;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e06a      	b.n	80014bc <_choldcsl+0x148>
    }
    for (int i = 0; i < n; i++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	e062      	b.n	80014b2 <_choldcsl+0x13e>
        a[i*n+i] = 1 / p[i];
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	fb03 f202 	mul.w	r2, r3, r2
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	4413      	add	r3, r2
 800140a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800140e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001412:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	e042      	b.n	80014a4 <_choldcsl+0x130>
            _float_t sum = 0;
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
            for (int k = i; k < j; k++) {
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	e020      	b.n	800146c <_choldcsl+0xf8>
                sum -= a[j*n+k] * a[k*n+i];
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	fb03 f202 	mul.w	r2, r3, r2
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	4413      	add	r3, r2
 800143c:	ed93 7a00 	vldr	s14, [r3]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	fb03 f202 	mul.w	r2, r3, r2
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	4413      	add	r3, r2
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145a:	ed97 7a05 	vldr	s14, [r7, #20]
 800145e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001462:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i; k < j; k++) {
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	3301      	adds	r3, #1
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	429a      	cmp	r2, r3
 8001472:	dbda      	blt.n	800142a <_choldcsl+0xb6>
            }
            a[j*n+i] = sum / p[j];
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	ed93 7a00 	vldr	s14, [r3]
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	fb03 f202 	mul.w	r2, r3, r2
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	4413      	add	r3, r2
 8001492:	edd7 6a05 	vldr	s13, [r7, #20]
 8001496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	3301      	adds	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbb8      	blt.n	800141e <_choldcsl+0xaa>
    for (int i = 0; i < n; i++) {
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	3301      	adds	r3, #1
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	db98      	blt.n	80013ec <_choldcsl+0x78>
        }
    }

    return 0; // success
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3728      	adds	r7, #40	@ 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_cholsl>:

/// @private
static int _cholsl(const _float_t * A, _float_t * a, _float_t * p, const int n) 
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	@ 0x30
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
    if (_choldcsl(A,a,p,n)) {
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f7ff ff4b 	bl	8001374 <_choldcsl>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <_cholsl+0x24>
        return 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0f7      	b.n	80016d8 <_cholsl+0x214>
    }

    for (int i = 0; i < n; i++) {
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ec:	e019      	b.n	8001522 <_cholsl+0x5e>
        for (int j = i + 1; j < n; j++) {
 80014ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f0:	3301      	adds	r3, #1
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014f4:	e00e      	b.n	8001514 <_cholsl+0x50>
            a[i*n+j] = 0.0;
 80014f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	fb03 f202 	mul.w	r2, r3, r2
 80014fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	4413      	add	r3, r2
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
        for (int j = i + 1; j < n; j++) {
 800150e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001510:	3301      	adds	r3, #1
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001514:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbec      	blt.n	80014f6 <_cholsl+0x32>
    for (int i = 0; i < n; i++) {
 800151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151e:	3301      	adds	r3, #1
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	dbe1      	blt.n	80014ee <_cholsl+0x2a>
        }
    }
    for (int i = 0; i < n; i++) {
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
 800152e:	e0a5      	b.n	800167c <_cholsl+0x1b8>
        a[i*n+i] *= a[i*n+i];
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	fb03 f202 	mul.w	r2, r3, r2
 8001538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	4413      	add	r3, r2
 8001542:	ed93 7a00 	vldr	s14, [r3]
 8001546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	fb03 f202 	mul.w	r2, r3, r2
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	4413      	add	r3, r2
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	fb03 f202 	mul.w	r2, r3, r2
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	4413      	add	r3, r2
 800156e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001572:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	3301      	adds	r3, #1
 800157a:	623b      	str	r3, [r7, #32]
 800157c:	e032      	b.n	80015e4 <_cholsl+0x120>
            a[i*n+i] += a[k*n+i] * a[k*n+i];
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	fb03 f202 	mul.w	r2, r3, r2
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	4413      	add	r3, r2
 8001590:	ed93 7a00 	vldr	s14, [r3]
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	fb03 f202 	mul.w	r2, r3, r2
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	4413      	add	r3, r2
 80015a6:	edd3 6a00 	vldr	s13, [r3]
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	fb03 f202 	mul.w	r2, r3, r2
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	4413      	add	r3, r2
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	fb03 f202 	mul.w	r2, r3, r2
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	4413      	add	r3, r2
 80015d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015da:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	3301      	adds	r3, #1
 80015e2:	623b      	str	r3, [r7, #32]
 80015e4:	6a3a      	ldr	r2, [r7, #32]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbc8      	blt.n	800157e <_cholsl+0xba>
        }
        for (int j = i + 1; j < n; j++) {
 80015ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ee:	3301      	adds	r3, #1
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	e03c      	b.n	800166e <_cholsl+0x1aa>
            for (int k = j; k < n; k++) {
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	e032      	b.n	8001660 <_cholsl+0x19c>
                a[i*n+j] += a[k*n+i] * a[k*n+j];
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	fb03 f202 	mul.w	r2, r3, r2
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	4413      	add	r3, r2
 800160c:	ed93 7a00 	vldr	s14, [r3]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	fb03 f202 	mul.w	r2, r3, r2
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	4413      	add	r3, r2
 8001622:	edd3 6a00 	vldr	s13, [r3]
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	fb03 f202 	mul.w	r2, r3, r2
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	4413      	add	r3, r2
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	fb03 f202 	mul.w	r2, r3, r2
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	4413      	add	r3, r2
 8001652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001656:	edc3 7a00 	vstr	s15, [r3]
            for (int k = j; k < n; k++) {
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	3301      	adds	r3, #1
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbc8      	blt.n	80015fa <_cholsl+0x136>
        for (int j = i + 1; j < n; j++) {
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	3301      	adds	r3, #1
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	dbbe      	blt.n	80015f4 <_cholsl+0x130>
    for (int i = 0; i < n; i++) {
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	3301      	adds	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
 800167c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	f6ff af55 	blt.w	8001530 <_cholsl+0x6c>
            }
        }
    }
    for (int i = 0; i < n; i++) {
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e020      	b.n	80016ce <_cholsl+0x20a>
        for (int j = 0; j < i; j++) {
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	e016      	b.n	80016c0 <_cholsl+0x1fc>
            a[i*n+j] = a[j*n+i];
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	fb03 f202 	mul.w	r2, r3, r2
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	441a      	add	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	6839      	ldr	r1, [r7, #0]
 80016a8:	fb03 f101 	mul.w	r1, r3, r1
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	440b      	add	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	440b      	add	r3, r1
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < i; j++) {
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	3301      	adds	r3, #1
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbe4      	blt.n	8001692 <_cholsl+0x1ce>
    for (int i = 0; i < n; i++) {
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	dbda      	blt.n	800168c <_cholsl+0x1c8>
        }
    }

    return 0; // success
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3730      	adds	r7, #48	@ 0x30
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_addvec>:

/// @private
static void _addvec(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e016      	b.n	8001722 <_addvec+0x42>
        c[j] = a[j] + b[j];
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	ed93 7a00 	vldr	s14, [r3]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	4413      	add	r3, r2
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001718:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	dbe4      	blt.n	80016f4 <_addvec+0x14>
    }
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_sub>:

/// @private
static void _sub(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e016      	b.n	800177a <_sub+0x42>
        c[j] = a[j] - b[j];
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	ed93 7a00 	vldr	s14, [r3]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	4413      	add	r3, r2
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001770:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3301      	adds	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	dbe4      	blt.n	800174c <_sub+0x14>
    }
}
 8001782:	bf00      	nop
 8001784:	bf00      	nop
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <invert>:

/// @private
static bool invert(const _float_t * a, _float_t * ainv)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
    _float_t tmp[EKF_M];

    return _cholsl(a, ainv, tmp, EKF_M) == 0;
 800179a:	f107 020c 	add.w	r2, r7, #12
 800179e:	2303      	movs	r3, #3
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fe8e 	bl	80014c4 <_cholsl>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf0c      	ite	eq
 80017ae:	2301      	moveq	r3, #1
 80017b0:	2300      	movne	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <ekf_initialize>:
 * @param ekf pointer to an ekf_t structure
 * @param pdiag a vector of length EKF_N containing the initial values for the
 * covariance matrix diagonal
 */
static void ekf_initialize(ekf_t * ekf, const _float_t pdiag[EKF_N])
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
    for (int i=0; i<EKF_N; ++i) {
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	e027      	b.n	800181c <ekf_initialize+0x60>

        for (int j=0; j<EKF_N; ++j) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	e017      	b.n	8001802 <ekf_initialize+0x46>

            ekf->P[i*EKF_N+j] = i==j ? pdiag[i] : 0;
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d105      	bne.n	80017e6 <ekf_initialize+0x2a>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	4413      	add	r3, r2
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	e001      	b.n	80017ea <ekf_initialize+0x2e>
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	0051      	lsls	r1, r2, #1
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	440a      	add	r2, r1
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	3202      	adds	r2, #2
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	440a      	add	r2, r1
 80017fa:	6013      	str	r3, [r2, #0]
        for (int j=0; j<EKF_N; ++j) {
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	3301      	adds	r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b01      	cmp	r3, #1
 8001806:	dde4      	ble.n	80017d2 <ekf_initialize+0x16>
        }

        ekf->x[i] = 0;
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
    for (int i=0; i<EKF_N; ++i) {
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3301      	adds	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b01      	cmp	r3, #1
 8001820:	ddd4      	ble.n	80017cc <ekf_initialize+0x10>
    }
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <ekf_predict>:
  */static void ekf_predict(
        ekf_t * ekf, 
        const _float_t fx[EKF_N],
        const _float_t F[EKF_N*EKF_N],
        const _float_t Q[EKF_N*EKF_N])
{        
 8001830:	b580      	push	{r7, lr}
 8001832:	b092      	sub	sp, #72	@ 0x48
 8001834:	af02      	add	r7, sp, #8
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	603b      	str	r3, [r7, #0]
    // \hat{x}_k = f(\hat{x}_{k-1}, u_k)
    memcpy(ekf->x, fx, EKF_N*sizeof(_float_t));
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2208      	movs	r2, #8
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	4618      	mov	r0, r3
 8001846:	f009 ff52 	bl	800b6ee <memcpy>

    // P_k = F_{k-1} P_{k-1} F^T_{k-1} + Q_{k-1}

    _float_t FP[EKF_N*EKF_N] = {};
 800184a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
    _mulmat(F, ekf->P,  FP, EKF_N, EKF_N, EKF_N);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f103 0108 	add.w	r1, r3, #8
 800185e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001862:	2302      	movs	r3, #2
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	2302      	movs	r3, #2
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2302      	movs	r3, #2
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fb63 	bl	8000f38 <_mulmat>

    _float_t Ft[EKF_N*EKF_N] = {};
 8001872:	f107 0320 	add.w	r3, r7, #32
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
    _transpose(F, Ft, EKF_N, EKF_N);
 8001880:	f107 0120 	add.w	r1, r7, #32
 8001884:	2302      	movs	r3, #2
 8001886:	2202      	movs	r2, #2
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fc07 	bl	800109c <_transpose>

    _float_t FPFt[EKF_N*EKF_N] = {};
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
    _mulmat(FP, Ft, FPFt, EKF_N, EKF_N, EKF_N);
 800189c:	f107 0210 	add.w	r2, r7, #16
 80018a0:	f107 0120 	add.w	r1, r7, #32
 80018a4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80018a8:	2302      	movs	r3, #2
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	2302      	movs	r3, #2
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2302      	movs	r3, #2
 80018b2:	f7ff fb41 	bl	8000f38 <_mulmat>

    _addmat(FPFt, Q, ekf->P, EKF_N, EKF_N);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f103 0208 	add.w	r2, r3, #8
 80018bc:	f107 0010 	add.w	r0, r7, #16
 80018c0:	2302      	movs	r3, #2
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2302      	movs	r3, #2
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	f7ff fc1e 	bl	8001108 <_addmat>
}
 80018cc:	bf00      	nop
 80018ce:	3740      	adds	r7, #64	@ 0x40
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <ekf_update_step3>:

/// @private
static void ekf_update_step3(ekf_t * ekf, _float_t GH[EKF_N*EKF_N])
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af02      	add	r7, sp, #8
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
    _negate(GH, EKF_N, EKF_N);
 80018de:	2202      	movs	r2, #2
 80018e0:	2102      	movs	r1, #2
 80018e2:	6838      	ldr	r0, [r7, #0]
 80018e4:	f7ff fc55 	bl	8001192 <_negate>
    _addeye(GH, EKF_N);
 80018e8:	2102      	movs	r1, #2
 80018ea:	6838      	ldr	r0, [r7, #0]
 80018ec:	f7ff fc8a 	bl	8001204 <_addeye>
    _float_t GHP[EKF_N*EKF_N];
    _mulmat(GH, ekf->P, GHP, EKF_N, EKF_N, EKF_N);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f103 0108 	add.w	r1, r3, #8
 80018f6:	f107 0208 	add.w	r2, r7, #8
 80018fa:	2302      	movs	r3, #2
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	2302      	movs	r3, #2
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2302      	movs	r3, #2
 8001904:	6838      	ldr	r0, [r7, #0]
 8001906:	f7ff fb17 	bl	8000f38 <_mulmat>
    memcpy(ekf->P, GHP, EKF_N*EKF_N*sizeof(_float_t));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3308      	adds	r3, #8
 800190e:	f107 0108 	add.w	r1, r7, #8
 8001912:	2210      	movs	r2, #16
 8001914:	4618      	mov	r0, r3
 8001916:	f009 feea 	bl	800b6ee <memcpy>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <ekf_update>:
        ekf_t * ekf, 
        const _float_t z[EKF_M], 
        const _float_t hx[EKF_N],
        const _float_t H[EKF_M*EKF_N],
        const _float_t R[EKF_M*EKF_M])
{        
 8001922:	b590      	push	{r4, r7, lr}
 8001924:	b0c7      	sub	sp, #284	@ 0x11c
 8001926:	af02      	add	r7, sp, #8
 8001928:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800192c:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 8001930:	6020      	str	r0, [r4, #0]
 8001932:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8001936:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 800193a:	6001      	str	r1, [r0, #0]
 800193c:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001940:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8001944:	600a      	str	r2, [r1, #0]
 8001946:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800194a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800194e:	6013      	str	r3, [r2, #0]
    // G_k = P_k H^T_k (H_k P_k H^T_k + R)^{-1}
    _float_t G[EKF_N*EKF_M];
    _float_t Ht[EKF_N*EKF_M];
    _transpose(H, Ht, EKF_M, EKF_N);
 8001950:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001954:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001958:	f5a3 7088 	sub.w	r0, r3, #272	@ 0x110
 800195c:	2302      	movs	r3, #2
 800195e:	2203      	movs	r2, #3
 8001960:	6800      	ldr	r0, [r0, #0]
 8001962:	f7ff fb9b 	bl	800109c <_transpose>
    _float_t PHt[EKF_N*EKF_M];
    _mulmat(ekf->P, Ht, PHt, EKF_N, EKF_N, EKF_M);
 8001966:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800196a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f103 0008 	add.w	r0, r3, #8
 8001974:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8001978:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800197c:	2303      	movs	r3, #3
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	2302      	movs	r3, #2
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2302      	movs	r3, #2
 8001986:	f7ff fad7 	bl	8000f38 <_mulmat>
    _float_t HP[EKF_M*EKF_N];
    _mulmat(H, ekf->P, HP, EKF_M, EKF_N, EKF_N);
 800198a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800198e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f103 0108 	add.w	r1, r3, #8
 8001998:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800199c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019a0:	f5a3 7088 	sub.w	r0, r3, #272	@ 0x110
 80019a4:	2302      	movs	r3, #2
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	2302      	movs	r3, #2
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2303      	movs	r3, #3
 80019ae:	6800      	ldr	r0, [r0, #0]
 80019b0:	f7ff fac2 	bl	8000f38 <_mulmat>
    _float_t HpHt[EKF_M*EKF_M];
    _mulmat(HP, Ht, HpHt, EKF_M, EKF_N, EKF_M);
 80019b4:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80019b8:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 80019bc:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 80019c0:	2303      	movs	r3, #3
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2303      	movs	r3, #3
 80019ca:	f7ff fab5 	bl	8000f38 <_mulmat>
    _float_t HpHtR[EKF_M*EKF_M];
    _addmat(HpHt, R, HpHtR, EKF_M, EKF_M);
 80019ce:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80019d2:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 80019d6:	2303      	movs	r3, #3
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2303      	movs	r3, #3
 80019dc:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 80019e0:	f7ff fb92 	bl	8001108 <_addmat>
    _float_t HPHtRinv[EKF_M*EKF_M];
    if (!invert(HpHtR, HPHtRinv)) {
 80019e4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80019e8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fece 	bl	8001790 <invert>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f083 0301 	eor.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <ekf_update+0xe2>
        return false;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e050      	b.n	8001aa6 <ekf_update+0x184>
    }
    _mulmat(PHt, HPHtRinv, G, EKF_N, EKF_M, EKF_M);
 8001a04:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8001a08:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001a0c:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8001a10:	2303      	movs	r3, #3
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	2303      	movs	r3, #3
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2302      	movs	r3, #2
 8001a1a:	f7ff fa8d 	bl	8000f38 <_mulmat>

    // \hat{x}_k = \hat{x_k} + G_k(z_k - h(\hat{x}_k))
    _float_t z_hx[EKF_M];
    _sub(z, hx, z_hx, EKF_M);
 8001a1e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001a22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a26:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 8001a2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a2e:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8001a32:	2303      	movs	r3, #3
 8001a34:	6809      	ldr	r1, [r1, #0]
 8001a36:	6800      	ldr	r0, [r0, #0]
 8001a38:	f7ff fe7e 	bl	8001738 <_sub>
    _float_t Gz_hx[EKF_M*EKF_N];
    _mulvec(G, z_hx, Gz_hx, EKF_N, EKF_M);
 8001a3c:	f107 0220 	add.w	r2, r7, #32
 8001a40:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001a44:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8001a48:	2303      	movs	r3, #3
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	f7ff fadb 	bl	8001008 <_mulvec>
    _addvec(ekf->x, Gz_hx, ekf->x, EKF_N);
 8001a52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	f107 0120 	add.w	r1, r7, #32
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	f7ff fe38 	bl	80016e0 <_addvec>

    // P_k = (I - G_k H_k) P_k
    _float_t GH[EKF_N*EKF_N];
    _mulmat(G, H, GH, EKF_N, EKF_M, EKF_N);
 8001a70:	f107 0210 	add.w	r2, r7, #16
 8001a74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a78:	f5a3 7188 	sub.w	r1, r3, #272	@ 0x110
 8001a7c:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8001a80:	2302      	movs	r3, #2
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	2303      	movs	r3, #3
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2302      	movs	r3, #2
 8001a8a:	6809      	ldr	r1, [r1, #0]
 8001a8c:	f7ff fa54 	bl	8000f38 <_mulmat>
    ekf_update_step3(ekf, GH);
 8001a90:	f107 0210 	add.w	r2, r7, #16
 8001a94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	f7ff ff18 	bl	80018d4 <ekf_update_step3>

    // success
    return true;
 8001aa4:	2301      	movs	r3, #1
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}

08001ab0 <sensor_model>:
 * @param ekf Pointer to the current EKF state.
 * @param hx  Output predicted measurement vector (length EKF_M).
 * @param H   Output Jacobian matrix (EKF_M x EKF_N).
 */
static void sensor_model(const ekf_t * ekf, _float_t hx[EKF_M], _float_t H[EKF_M * EKF_N])
{
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
    // Extract current state estimates (roll and pitch in radians)
    _float_t phi   = ekf->x[0];  // roll
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61fb      	str	r3, [r7, #28]
    _float_t theta = ekf->x[1];  // pitch
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
    const _float_t g = 9.81f;
 8001ac8:	4bc6      	ldr	r3, [pc, #792]	@ (8001de4 <sensor_model+0x334>)
 8001aca:	617b      	str	r3, [r7, #20]

    // Predicted accelerometer measurements (gravity components)
    hx[0] = -g * sin(theta);            // ax
 8001acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ad0:	eef1 7a67 	vneg.f32	s15, s15
 8001ad4:	ee17 3a90 	vmov	r3, s15
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd35 	bl	8000548 <__aeabi_f2d>
 8001ade:	4604      	mov	r4, r0
 8001ae0:	460d      	mov	r5, r1
 8001ae2:	69b8      	ldr	r0, [r7, #24]
 8001ae4:	f7fe fd30 	bl	8000548 <__aeabi_f2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	ec43 2b10 	vmov	d0, r2, r3
 8001af0:	f00b feca 	bl	800d888 <sin>
 8001af4:	ec53 2b10 	vmov	r2, r3, d0
 8001af8:	4620      	mov	r0, r4
 8001afa:	4629      	mov	r1, r5
 8001afc:	f7fe fd7c 	bl	80005f8 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f7ff f84e 	bl	8000ba8 <__aeabi_d2f>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	601a      	str	r2, [r3, #0]
    hx[1] =  g * sin(phi) * cos(theta);   // ay
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7fe fd18 	bl	8000548 <__aeabi_f2d>
 8001b18:	4604      	mov	r4, r0
 8001b1a:	460d      	mov	r5, r1
 8001b1c:	69f8      	ldr	r0, [r7, #28]
 8001b1e:	f7fe fd13 	bl	8000548 <__aeabi_f2d>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	ec43 2b10 	vmov	d0, r2, r3
 8001b2a:	f00b fead 	bl	800d888 <sin>
 8001b2e:	ec53 2b10 	vmov	r2, r3, d0
 8001b32:	4620      	mov	r0, r4
 8001b34:	4629      	mov	r1, r5
 8001b36:	f7fe fd5f 	bl	80005f8 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4614      	mov	r4, r2
 8001b40:	461d      	mov	r5, r3
 8001b42:	69b8      	ldr	r0, [r7, #24]
 8001b44:	f7fe fd00 	bl	8000548 <__aeabi_f2d>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	ec43 2b10 	vmov	d0, r2, r3
 8001b50:	f00b fe46 	bl	800d7e0 <cos>
 8001b54:	ec53 2b10 	vmov	r2, r3, d0
 8001b58:	4620      	mov	r0, r4
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	f7fe fd4c 	bl	80005f8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1d1c      	adds	r4, r3, #4
 8001b6c:	f7ff f81c 	bl	8000ba8 <__aeabi_d2f>
 8001b70:	4603      	mov	r3, r0
 8001b72:	6023      	str	r3, [r4, #0]
    hx[2] =  g * cos(phi) * cos(theta);   // az
 8001b74:	6978      	ldr	r0, [r7, #20]
 8001b76:	f7fe fce7 	bl	8000548 <__aeabi_f2d>
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	460d      	mov	r5, r1
 8001b7e:	69f8      	ldr	r0, [r7, #28]
 8001b80:	f7fe fce2 	bl	8000548 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	ec43 2b10 	vmov	d0, r2, r3
 8001b8c:	f00b fe28 	bl	800d7e0 <cos>
 8001b90:	ec53 2b10 	vmov	r2, r3, d0
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe fd2e 	bl	80005f8 <__aeabi_dmul>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	461d      	mov	r5, r3
 8001ba4:	69b8      	ldr	r0, [r7, #24]
 8001ba6:	f7fe fccf 	bl	8000548 <__aeabi_f2d>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	ec43 2b10 	vmov	d0, r2, r3
 8001bb2:	f00b fe15 	bl	800d7e0 <cos>
 8001bb6:	ec53 2b10 	vmov	r2, r3, d0
 8001bba:	4620      	mov	r0, r4
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	f7fe fd1b 	bl	80005f8 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f103 0408 	add.w	r4, r3, #8
 8001bd0:	f7fe ffea 	bl	8000ba8 <__aeabi_d2f>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	6023      	str	r3, [r4, #0]

    // Jacobian matrix H = d[hx]/d[x]
    // For ax = -g*sin(theta)
    H[0 * EKF_N + 0] = 0.0f;               // ∂ax/∂phi
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
    H[0 * EKF_N + 1] = -g * cos(theta);     // ∂ax/∂theta
 8001be0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be4:	eef1 7a67 	vneg.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fcab 	bl	8000548 <__aeabi_f2d>
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	460d      	mov	r5, r1
 8001bf6:	69b8      	ldr	r0, [r7, #24]
 8001bf8:	f7fe fca6 	bl	8000548 <__aeabi_f2d>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	ec43 2b10 	vmov	d0, r2, r3
 8001c04:	f00b fdec 	bl	800d7e0 <cos>
 8001c08:	ec53 2b10 	vmov	r2, r3, d0
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	4629      	mov	r1, r5
 8001c10:	f7fe fcf2 	bl	80005f8 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	1d1c      	adds	r4, r3, #4
 8001c20:	f7fe ffc2 	bl	8000ba8 <__aeabi_d2f>
 8001c24:	4603      	mov	r3, r0
 8001c26:	6023      	str	r3, [r4, #0]

    // For ay = g*sin(phi)*cos(theta)
    H[1 * EKF_N + 0] = g * cos(phi) * cos(theta);   // ∂ay/∂phi
 8001c28:	6978      	ldr	r0, [r7, #20]
 8001c2a:	f7fe fc8d 	bl	8000548 <__aeabi_f2d>
 8001c2e:	4604      	mov	r4, r0
 8001c30:	460d      	mov	r5, r1
 8001c32:	69f8      	ldr	r0, [r7, #28]
 8001c34:	f7fe fc88 	bl	8000548 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	ec43 2b10 	vmov	d0, r2, r3
 8001c40:	f00b fdce 	bl	800d7e0 <cos>
 8001c44:	ec53 2b10 	vmov	r2, r3, d0
 8001c48:	4620      	mov	r0, r4
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	f7fe fcd4 	bl	80005f8 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4614      	mov	r4, r2
 8001c56:	461d      	mov	r5, r3
 8001c58:	69b8      	ldr	r0, [r7, #24]
 8001c5a:	f7fe fc75 	bl	8000548 <__aeabi_f2d>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	ec43 2b10 	vmov	d0, r2, r3
 8001c66:	f00b fdbb 	bl	800d7e0 <cos>
 8001c6a:	ec53 2b10 	vmov	r2, r3, d0
 8001c6e:	4620      	mov	r0, r4
 8001c70:	4629      	mov	r1, r5
 8001c72:	f7fe fcc1 	bl	80005f8 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f103 0408 	add.w	r4, r3, #8
 8001c84:	f7fe ff90 	bl	8000ba8 <__aeabi_d2f>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	6023      	str	r3, [r4, #0]
    H[1 * EKF_N + 1] = -g * sin(phi) * sin(theta);    // ∂ay/∂theta
 8001c8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c90:	eef1 7a67 	vneg.f32	s15, s15
 8001c94:	ee17 3a90 	vmov	r3, s15
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc55 	bl	8000548 <__aeabi_f2d>
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	460d      	mov	r5, r1
 8001ca2:	69f8      	ldr	r0, [r7, #28]
 8001ca4:	f7fe fc50 	bl	8000548 <__aeabi_f2d>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	ec43 2b10 	vmov	d0, r2, r3
 8001cb0:	f00b fdea 	bl	800d888 <sin>
 8001cb4:	ec53 2b10 	vmov	r2, r3, d0
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4629      	mov	r1, r5
 8001cbc:	f7fe fc9c 	bl	80005f8 <__aeabi_dmul>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4614      	mov	r4, r2
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	69b8      	ldr	r0, [r7, #24]
 8001cca:	f7fe fc3d 	bl	8000548 <__aeabi_f2d>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	ec43 2b10 	vmov	d0, r2, r3
 8001cd6:	f00b fdd7 	bl	800d888 <sin>
 8001cda:	ec53 2b10 	vmov	r2, r3, d0
 8001cde:	4620      	mov	r0, r4
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	f7fe fc89 	bl	80005f8 <__aeabi_dmul>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f103 040c 	add.w	r4, r3, #12
 8001cf4:	f7fe ff58 	bl	8000ba8 <__aeabi_d2f>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	6023      	str	r3, [r4, #0]

    // For az = g*cos(phi)*cos(theta)
    H[2 * EKF_N + 0] = -g * sin(phi) * cos(theta);    // ∂az/∂phi
 8001cfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d00:	eef1 7a67 	vneg.f32	s15, s15
 8001d04:	ee17 3a90 	vmov	r3, s15
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc1d 	bl	8000548 <__aeabi_f2d>
 8001d0e:	4604      	mov	r4, r0
 8001d10:	460d      	mov	r5, r1
 8001d12:	69f8      	ldr	r0, [r7, #28]
 8001d14:	f7fe fc18 	bl	8000548 <__aeabi_f2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	ec43 2b10 	vmov	d0, r2, r3
 8001d20:	f00b fdb2 	bl	800d888 <sin>
 8001d24:	ec53 2b10 	vmov	r2, r3, d0
 8001d28:	4620      	mov	r0, r4
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	f7fe fc64 	bl	80005f8 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4614      	mov	r4, r2
 8001d36:	461d      	mov	r5, r3
 8001d38:	69b8      	ldr	r0, [r7, #24]
 8001d3a:	f7fe fc05 	bl	8000548 <__aeabi_f2d>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	ec43 2b10 	vmov	d0, r2, r3
 8001d46:	f00b fd4b 	bl	800d7e0 <cos>
 8001d4a:	ec53 2b10 	vmov	r2, r3, d0
 8001d4e:	4620      	mov	r0, r4
 8001d50:	4629      	mov	r1, r5
 8001d52:	f7fe fc51 	bl	80005f8 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f103 0410 	add.w	r4, r3, #16
 8001d64:	f7fe ff20 	bl	8000ba8 <__aeabi_d2f>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	6023      	str	r3, [r4, #0]
    H[2 * EKF_N + 1] = -g * cos(phi) * sin(theta);    // ∂az/∂theta
 8001d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d70:	eef1 7a67 	vneg.f32	s15, s15
 8001d74:	ee17 3a90 	vmov	r3, s15
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbe5 	bl	8000548 <__aeabi_f2d>
 8001d7e:	4604      	mov	r4, r0
 8001d80:	460d      	mov	r5, r1
 8001d82:	69f8      	ldr	r0, [r7, #28]
 8001d84:	f7fe fbe0 	bl	8000548 <__aeabi_f2d>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	ec43 2b10 	vmov	d0, r2, r3
 8001d90:	f00b fd26 	bl	800d7e0 <cos>
 8001d94:	ec53 2b10 	vmov	r2, r3, d0
 8001d98:	4620      	mov	r0, r4
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4614      	mov	r4, r2
 8001da6:	461d      	mov	r5, r3
 8001da8:	69b8      	ldr	r0, [r7, #24]
 8001daa:	f7fe fbcd 	bl	8000548 <__aeabi_f2d>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	ec43 2b10 	vmov	d0, r2, r3
 8001db6:	f00b fd67 	bl	800d888 <sin>
 8001dba:	ec53 2b10 	vmov	r2, r3, d0
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	4629      	mov	r1, r5
 8001dc2:	f7fe fc19 	bl	80005f8 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f103 0414 	add.w	r4, r3, #20
 8001dd4:	f7fe fee8 	bl	8000ba8 <__aeabi_d2f>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	6023      	str	r3, [r4, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bdb0      	pop	{r4, r5, r7, pc}
 8001de4:	411cf5c3 	.word	0x411cf5c3

08001de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b0a0      	sub	sp, #128	@ 0x80
 8001dec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dee:	f000 fd89 	bl	8002904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df2:	f000 f8fd 	bl	8001ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df6:	f000 f9b3 	bl	8002160 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dfa:	f000 f991 	bl	8002120 <MX_DMA_Init>
  MX_I2C1_Init();
 8001dfe:	f000 f961 	bl	80020c4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001e02:	f008 f949 	bl	800a098 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  mpu6050Config();
 8001e06:	f000 fa91 	bl	800232c <mpu6050Config>
  mpu6050Read_DMA();
 8001e0a:	f000 faa9 	bl	8002360 <mpu6050Read_DMA>

  // Initialize the EKF with the initial covariance diagonal
  ekf_initialize(&ekf, Pdiag);
 8001e0e:	496a      	ldr	r1, [pc, #424]	@ (8001fb8 <main+0x1d0>)
 8001e10:	486a      	ldr	r0, [pc, #424]	@ (8001fbc <main+0x1d4>)
 8001e12:	f7ff fcd3 	bl	80017bc <ekf_initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t timerUSB = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	66fb      	str	r3, [r7, #108]	@ 0x6c


  while (1)
  {
	  /* Log data via USB */
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 8001e1a:	f000 fdd9 	bl	80029d0 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b31      	cmp	r3, #49	@ 0x31
 8001e26:	d9f8      	bls.n	8001e1a <main+0x32>

		  // Calculate dt in seconds:
		  float dt = SAMPLE_TIME_MS_USB / 1000.0f;
 8001e28:	4b65      	ldr	r3, [pc, #404]	@ (8001fc0 <main+0x1d8>)
 8001e2a:	66bb      	str	r3, [r7, #104]	@ 0x68



		  // --- Read Sensor Data ---
		  // Convert gyro measurements (in deg/s) to rad/s.
		  float p_rps = Gx * DEG_TO_RAD;
 8001e2c:	4b65      	ldr	r3, [pc, #404]	@ (8001fc4 <main+0x1dc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb89 	bl	8000548 <__aeabi_f2d>
 8001e36:	a35c      	add	r3, pc, #368	@ (adr r3, 8001fa8 <main+0x1c0>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fbdc 	bl	80005f8 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7fe feae 	bl	8000ba8 <__aeabi_d2f>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	667b      	str	r3, [r7, #100]	@ 0x64
		  float q_rps = Gy * DEG_TO_RAD;
 8001e50:	4b5d      	ldr	r3, [pc, #372]	@ (8001fc8 <main+0x1e0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb77 	bl	8000548 <__aeabi_f2d>
 8001e5a:	a353      	add	r3, pc, #332	@ (adr r3, 8001fa8 <main+0x1c0>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fbca 	bl	80005f8 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7fe fe9c 	bl	8000ba8 <__aeabi_d2f>
 8001e70:	4603      	mov	r3, r0
 8001e72:	663b      	str	r3, [r7, #96]	@ 0x60
		  float r_rps = Gz * DEG_TO_RAD;
 8001e74:	4b55      	ldr	r3, [pc, #340]	@ (8001fcc <main+0x1e4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb65 	bl	8000548 <__aeabi_f2d>
 8001e7e:	a34a      	add	r3, pc, #296	@ (adr r3, 8001fa8 <main+0x1c0>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	f7fe fbb8 	bl	80005f8 <__aeabi_dmul>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe fe8a 	bl	8000ba8 <__aeabi_d2f>
 8001e94:	4603      	mov	r3, r0
 8001e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
		  // --- EKF Prediction ---
		  // Propagate state using a simple model (assuming constant rate over dt):
		  //   roll_new  = roll + p_rps * dt;
		  //   pitch_new = pitch + q_rps * dt;
		  _float_t fx[EKF_N];
		  fx[0] = ekf.x[0] + p_rps * dt;
 8001e98:	4b48      	ldr	r3, [pc, #288]	@ (8001fbc <main+0x1d4>)
 8001e9a:	ed93 7a00 	vldr	s14, [r3]
 8001e9e:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8001ea2:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eae:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		  fx[1] = ekf.x[1] + q_rps * dt;
 8001eb2:	4b42      	ldr	r3, [pc, #264]	@ (8001fbc <main+0x1d4>)
 8001eb4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001eb8:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8001ebc:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

		  // For this simple prediction, we assume the Jacobian is the identity matrix.
		  _float_t F[EKF_N * EKF_N] = {
 8001ecc:	4b40      	ldr	r3, [pc, #256]	@ (8001fd0 <main+0x1e8>)
 8001ece:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  1.0f, 0.0f,
			  0.0f, 1.0f
		  };

		  // Run the prediction step.
		  ekf_predict(&ekf, fx, F, Q);
 8001ed8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001edc:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd4 <main+0x1ec>)
 8001ee2:	4836      	ldr	r0, [pc, #216]	@ (8001fbc <main+0x1d4>)
 8001ee4:	f7ff fca4 	bl	8001830 <ekf_predict>

		  // --- EKF Update ---
		  // Build the measurement vector using 3-axis accelerometer data.
		  _float_t z[EKF_M];
		  z[0] = Ax;  // measured ax
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd8 <main+0x1f0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	62bb      	str	r3, [r7, #40]	@ 0x28
		  z[1] = Ay;  // measured ay
 8001eee:	4b3b      	ldr	r3, [pc, #236]	@ (8001fdc <main+0x1f4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  z[2] = Az;  // measured az
 8001ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe0 <main+0x1f8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	633b      	str	r3, [r7, #48]	@ 0x30

		  // Compute the predicted measurements and the Jacobian using the sensor model.
		  _float_t hx[EKF_M];
		  _float_t H[EKF_M * EKF_N];
		  sensor_model(&ekf, hx, H);
 8001efa:	1d3a      	adds	r2, r7, #4
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	4619      	mov	r1, r3
 8001f02:	482e      	ldr	r0, [pc, #184]	@ (8001fbc <main+0x1d4>)
 8001f04:	f7ff fdd4 	bl	8001ab0 <sensor_model>

		  // Update the EKF with the new measurements.
		  if (!ekf_update(&ekf, z, hx, H, R))
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	f107 021c 	add.w	r2, r7, #28
 8001f0e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001f12:	4834      	ldr	r0, [pc, #208]	@ (8001fe4 <main+0x1fc>)
 8001f14:	9000      	str	r0, [sp, #0]
 8001f16:	4829      	ldr	r0, [pc, #164]	@ (8001fbc <main+0x1d4>)
 8001f18:	f7ff fd03 	bl	8001922 <ekf_update>
		  {
			  // Optionally handle update failure (e.g., log error or reset filter).
		  }

		  // Retrieve updated state estimates (roll and pitch in radians).
		  float roll_estimate_rad  = ekf.x[0];
 8001f1c:	4b27      	ldr	r3, [pc, #156]	@ (8001fbc <main+0x1d4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	65bb      	str	r3, [r7, #88]	@ 0x58
		  float pitch_estimate_rad = ekf.x[1];
 8001f22:	4b26      	ldr	r3, [pc, #152]	@ (8001fbc <main+0x1d4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	657b      	str	r3, [r7, #84]	@ 0x54

		  // Convert estimates to degrees.
		  float roll_estimate_deg  = roll_estimate_rad * RAD_TO_DEG;
 8001f28:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001f2a:	f7fe fb0d 	bl	8000548 <__aeabi_f2d>
 8001f2e:	a320      	add	r3, pc, #128	@ (adr r3, 8001fb0 <main+0x1c8>)
 8001f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f34:	f7fe fb60 	bl	80005f8 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7fe fe32 	bl	8000ba8 <__aeabi_d2f>
 8001f44:	4603      	mov	r3, r0
 8001f46:	653b      	str	r3, [r7, #80]	@ 0x50
		  float pitch_estimate_deg = pitch_estimate_rad * RAD_TO_DEG;
 8001f48:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001f4a:	f7fe fafd 	bl	8000548 <__aeabi_f2d>
 8001f4e:	a318      	add	r3, pc, #96	@ (adr r3, 8001fb0 <main+0x1c8>)
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	f7fe fb50 	bl	80005f8 <__aeabi_dmul>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7fe fe22 	bl	8000ba8 <__aeabi_d2f>
 8001f64:	4603      	mov	r3, r0
 8001f66:	64fb      	str	r3, [r7, #76]	@ 0x4c




	      snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
 8001f68:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f6a:	f7fe faed 	bl	8000548 <__aeabi_f2d>
 8001f6e:	4604      	mov	r4, r0
 8001f70:	460d      	mov	r5, r1
 8001f72:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001f74:	f7fe fae8 	bl	8000548 <__aeabi_f2d>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f80:	e9cd 4500 	strd	r4, r5, [sp]
 8001f84:	4a18      	ldr	r2, [pc, #96]	@ (8001fe8 <main+0x200>)
 8001f86:	2196      	movs	r1, #150	@ 0x96
 8001f88:	4818      	ldr	r0, [pc, #96]	@ (8001fec <main+0x204>)
 8001f8a:	f009 fab9 	bl	800b500 <sniprintf>
	               "%.3f, %.3f\r\n",
				   roll_estimate_deg,
				   pitch_estimate_deg);


	      CDC_Transmit_FS((uint8_t*)usb_tx_buffer, strlen(usb_tx_buffer));
 8001f8e:	4817      	ldr	r0, [pc, #92]	@ (8001fec <main+0x204>)
 8001f90:	f7fe f96e 	bl	8000270 <strlen>
 8001f94:	4603      	mov	r3, r0
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4814      	ldr	r0, [pc, #80]	@ (8001fec <main+0x204>)
 8001f9c:	f008 f93a 	bl	800a214 <CDC_Transmit_FS>
	      timerUSB = HAL_GetTick();
 8001fa0:	f000 fd16 	bl	80029d0 <HAL_GetTick>
 8001fa4:	66f8      	str	r0, [r7, #108]	@ 0x6c
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 8001fa6:	e738      	b.n	8001e1a <main+0x32>
 8001fa8:	a2529d39 	.word	0xa2529d39
 8001fac:	3f91df46 	.word	0x3f91df46
 8001fb0:	1a63c1f8 	.word	0x1a63c1f8
 8001fb4:	404ca5dc 	.word	0x404ca5dc
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	2000032c 	.word	0x2000032c
 8001fc0:	3d4ccccd 	.word	0x3d4ccccd
 8001fc4:	2000049c 	.word	0x2000049c
 8001fc8:	200004a0 	.word	0x200004a0
 8001fcc:	200004a4 	.word	0x200004a4
 8001fd0:	0800eac8 	.word	0x0800eac8
 8001fd4:	20000008 	.word	0x20000008
 8001fd8:	20000490 	.word	0x20000490
 8001fdc:	20000494 	.word	0x20000494
 8001fe0:	20000498 	.word	0x20000498
 8001fe4:	20000018 	.word	0x20000018
 8001fe8:	0800eab8 	.word	0x0800eab8
 8001fec:	200003f8 	.word	0x200003f8

08001ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b094      	sub	sp, #80	@ 0x50
 8001ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ff6:	f107 0320 	add.w	r3, r7, #32
 8001ffa:	2230      	movs	r2, #48	@ 0x30
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f009 faf5 	bl	800b5ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	4b28      	ldr	r3, [pc, #160]	@ (80020bc <SystemClock_Config+0xcc>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	4a27      	ldr	r2, [pc, #156]	@ (80020bc <SystemClock_Config+0xcc>)
 800201e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002022:	6413      	str	r3, [r2, #64]	@ 0x40
 8002024:	4b25      	ldr	r3, [pc, #148]	@ (80020bc <SystemClock_Config+0xcc>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002030:	2300      	movs	r3, #0
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	4b22      	ldr	r3, [pc, #136]	@ (80020c0 <SystemClock_Config+0xd0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a21      	ldr	r2, [pc, #132]	@ (80020c0 <SystemClock_Config+0xd0>)
 800203a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b1f      	ldr	r3, [pc, #124]	@ (80020c0 <SystemClock_Config+0xd0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800204c:	2301      	movs	r3, #1
 800204e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002050:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002056:	2302      	movs	r3, #2
 8002058:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800205a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800205e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002060:	2304      	movs	r3, #4
 8002062:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002064:	23a8      	movs	r3, #168	@ 0xa8
 8002066:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002068:	2302      	movs	r3, #2
 800206a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800206c:	2307      	movs	r3, #7
 800206e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002070:	f107 0320 	add.w	r3, r7, #32
 8002074:	4618      	mov	r0, r3
 8002076:	f004 f871 	bl	800615c <HAL_RCC_OscConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002080:	f000 f8a4 	bl	80021cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002084:	230f      	movs	r3, #15
 8002086:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002088:	2302      	movs	r3, #2
 800208a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002090:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002094:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002096:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800209a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800209c:	f107 030c 	add.w	r3, r7, #12
 80020a0:	2105      	movs	r1, #5
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 fad2 	bl	800664c <HAL_RCC_ClockConfig>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020ae:	f000 f88d 	bl	80021cc <Error_Handler>
  }
}
 80020b2:	bf00      	nop
 80020b4:	3750      	adds	r7, #80	@ 0x50
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40007000 	.word	0x40007000

080020c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020c8:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020ca:	4a13      	ldr	r2, [pc, #76]	@ (8002118 <MX_I2C1_Init+0x54>)
 80020cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020ce:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020d0:	4a12      	ldr	r2, [pc, #72]	@ (800211c <MX_I2C1_Init+0x58>)
 80020d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020da:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020dc:	2200      	movs	r2, #0
 80020de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020ee:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020f4:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <MX_I2C1_Init+0x50>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002100:	4804      	ldr	r0, [pc, #16]	@ (8002114 <MX_I2C1_Init+0x50>)
 8002102:	f001 fae1 	bl	80036c8 <HAL_I2C_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800210c:	f000 f85e 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000344 	.word	0x20000344
 8002118:	40005400 	.word	0x40005400
 800211c:	000186a0 	.word	0x000186a0

08002120 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <MX_DMA_Init+0x3c>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a0b      	ldr	r2, [pc, #44]	@ (800215c <MX_DMA_Init+0x3c>)
 8002130:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b09      	ldr	r3, [pc, #36]	@ (800215c <MX_DMA_Init+0x3c>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	200b      	movs	r0, #11
 8002148:	f000 fd4d 	bl	8002be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800214c:	200b      	movs	r0, #11
 800214e:	f000 fd66 	bl	8002c1e <HAL_NVIC_EnableIRQ>

}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800

08002160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <MX_GPIO_Init+0x68>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a16      	ldr	r2, [pc, #88]	@ (80021c8 <MX_GPIO_Init+0x68>)
 8002170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b14      	ldr	r3, [pc, #80]	@ (80021c8 <MX_GPIO_Init+0x68>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <MX_GPIO_Init+0x68>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a0f      	ldr	r2, [pc, #60]	@ (80021c8 <MX_GPIO_Init+0x68>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <MX_GPIO_Init+0x68>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	4b09      	ldr	r3, [pc, #36]	@ (80021c8 <MX_GPIO_Init+0x68>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a08      	ldr	r2, [pc, #32]	@ (80021c8 <MX_GPIO_Init+0x68>)
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <MX_GPIO_Init+0x68>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800

080021cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d0:	b672      	cpsid	i
}
 80021d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <Error_Handler+0x8>

080021d8 <mpu6050Init>:
uint8_t mpu6050Data[14];




void mpu6050Init(void){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(
 80021de:	2364      	movs	r3, #100	@ 0x64
 80021e0:	9302      	str	r3, [sp, #8]
 80021e2:	2301      	movs	r3, #1
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <mpu6050Init+0x24>)
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2301      	movs	r3, #1
 80021ec:	2275      	movs	r2, #117	@ 0x75
 80021ee:	21d0      	movs	r1, #208	@ 0xd0
 80021f0:	4803      	ldr	r0, [pc, #12]	@ (8002200 <mpu6050Init+0x28>)
 80021f2:	f001 fca7 	bl	8003b44 <HAL_I2C_Mem_Read>
				1,
				&whoAreYou,
				1,
				100
				);
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	2000048e 	.word	0x2000048e
 8002200:	20000344 	.word	0x20000344

08002204 <mpu6050powerOn>:

void mpu6050powerOn(void){
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af04      	add	r7, sp, #16
	MemData = 0x00;
 800220a:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <mpu6050powerOn+0x2c>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(
 8002210:	2364      	movs	r3, #100	@ 0x64
 8002212:	9302      	str	r3, [sp, #8]
 8002214:	2301      	movs	r3, #1
 8002216:	9301      	str	r3, [sp, #4]
 8002218:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <mpu6050powerOn+0x2c>)
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2301      	movs	r3, #1
 800221e:	226b      	movs	r2, #107	@ 0x6b
 8002220:	21d0      	movs	r1, #208	@ 0xd0
 8002222:	4804      	ldr	r0, [pc, #16]	@ (8002234 <mpu6050powerOn+0x30>)
 8002224:	f001 fb94 	bl	8003950 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000048f 	.word	0x2000048f
 8002234:	20000344 	.word	0x20000344

08002238 <mpu6050Sampling>:

void mpu6050Sampling(void){
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af04      	add	r7, sp, #16
	MemData = 0x07;
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <mpu6050Sampling+0x2c>)
 8002240:	2207      	movs	r2, #7
 8002242:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(
 8002244:	2364      	movs	r3, #100	@ 0x64
 8002246:	9302      	str	r3, [sp, #8]
 8002248:	2301      	movs	r3, #1
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <mpu6050Sampling+0x2c>)
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2301      	movs	r3, #1
 8002252:	2219      	movs	r2, #25
 8002254:	21d0      	movs	r1, #208	@ 0xd0
 8002256:	4804      	ldr	r0, [pc, #16]	@ (8002268 <mpu6050Sampling+0x30>)
 8002258:	f001 fb7a 	bl	8003950 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000048f 	.word	0x2000048f
 8002268:	20000344 	.word	0x20000344

0800226c <mpu6050GyroScale>:

void mpu6050GyroScale(gyroScale_t scale){
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af04      	add	r7, sp, #16
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
	MemData = 0x00 | (scale << 3);
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	b2da      	uxtb	r2, r3
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <mpu6050GyroScale+0x34>)
 800227e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(
 8002280:	2364      	movs	r3, #100	@ 0x64
 8002282:	9302      	str	r3, [sp, #8]
 8002284:	2301      	movs	r3, #1
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <mpu6050GyroScale+0x34>)
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2301      	movs	r3, #1
 800228e:	221b      	movs	r2, #27
 8002290:	21d0      	movs	r1, #208	@ 0xd0
 8002292:	4804      	ldr	r0, [pc, #16]	@ (80022a4 <mpu6050GyroScale+0x38>)
 8002294:	f001 fb5c 	bl	8003950 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	2000048f 	.word	0x2000048f
 80022a4:	20000344 	.word	0x20000344

080022a8 <mpu6050AccelScale>:

void mpu6050AccelScale(accelScale_t scale){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af04      	add	r7, sp, #16
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
	MemData = 0x00 | (scale << 3);
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <mpu6050AccelScale+0x34>)
 80022ba:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(
 80022bc:	2364      	movs	r3, #100	@ 0x64
 80022be:	9302      	str	r3, [sp, #8]
 80022c0:	2301      	movs	r3, #1
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <mpu6050AccelScale+0x34>)
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2301      	movs	r3, #1
 80022ca:	221c      	movs	r2, #28
 80022cc:	21d0      	movs	r1, #208	@ 0xd0
 80022ce:	4804      	ldr	r0, [pc, #16]	@ (80022e0 <mpu6050AccelScale+0x38>)
 80022d0:	f001 fb3e 	bl	8003950 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	2000048f 	.word	0x2000048f
 80022e0:	20000344 	.word	0x20000344

080022e4 <mpu6050ConfigFilter>:

void mpu6050ConfigFilter(uint8_t ext_sync, dlpfCfg_t dlpf_cfg) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af04      	add	r7, sp, #16
 80022ea:	4603      	mov	r3, r0
 80022ec:	460a      	mov	r2, r1
 80022ee:	71fb      	strb	r3, [r7, #7]
 80022f0:	4613      	mov	r3, r2
 80022f2:	71bb      	strb	r3, [r7, #6]
    // The CONFIG register (address 0x1A) combines EXT_SYNC_SET (bits 5–3) and DLPF_CFG (bits 2–0).
    // ext_sync: external sync setting (0 if not used).
    // dlpf_cfg: desired digital low pass filter configuration.
    uint8_t config = (ext_sync << 3) | (uint8_t)dlpf_cfg;
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	b25a      	sxtb	r2, r3
 80022fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022fe:	4313      	orrs	r3, r2
 8002300:	b25b      	sxtb	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Mem_Write(
 8002306:	2364      	movs	r3, #100	@ 0x64
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	2301      	movs	r3, #1
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	f107 030f 	add.w	r3, r7, #15
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2301      	movs	r3, #1
 8002316:	221a      	movs	r2, #26
 8002318:	21d0      	movs	r1, #208	@ 0xd0
 800231a:	4803      	ldr	r0, [pc, #12]	@ (8002328 <mpu6050ConfigFilter+0x44>)
 800231c:	f001 fb18 	bl	8003950 <HAL_I2C_Mem_Write>
        1,
        &config,
        1,
        100
    );
}
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000344 	.word	0x20000344

0800232c <mpu6050Config>:


void mpu6050Config(void){
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	// is valid Condition true 0x68
	mpu6050Init();
 8002330:	f7ff ff52 	bl	80021d8 <mpu6050Init>

	if(validCondition1){
 8002334:	4b09      	ldr	r3, [pc, #36]	@ (800235c <mpu6050Config+0x30>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b68      	cmp	r3, #104	@ 0x68
 800233a:	d10d      	bne.n	8002358 <mpu6050Config+0x2c>
	// power on
		mpu6050powerOn();
 800233c:	f7ff ff62 	bl	8002204 <mpu6050powerOn>
	// sampling data ratio
		mpu6050Sampling();
 8002340:	f7ff ff7a 	bl	8002238 <mpu6050Sampling>
	// gyro scale   (RAW)
		mpu6050GyroScale(degS500);
 8002344:	2001      	movs	r0, #1
 8002346:	f7ff ff91 	bl	800226c <mpu6050GyroScale>
	// accel scale  (RAW)
		mpu6050AccelScale(g4);
 800234a:	2001      	movs	r0, #1
 800234c:	f7ff ffac 	bl	80022a8 <mpu6050AccelScale>
	// using low pass filter
		mpu6050ConfigFilter(0, DLPF_CFG_10HZ);
 8002350:	2105      	movs	r1, #5
 8002352:	2000      	movs	r0, #0
 8002354:	f7ff ffc6 	bl	80022e4 <mpu6050ConfigFilter>

	}
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	2000048e 	.word	0x2000048e

08002360 <mpu6050Read_DMA>:
	Ay = RAWaccelY/2048.0;
	Az = RAWaccelZ/2048.0;
}


void mpu6050Read_DMA(void) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(&hi2c1,
 8002366:	230e      	movs	r3, #14
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	4b07      	ldr	r3, [pc, #28]	@ (8002388 <mpu6050Read_DMA+0x28>)
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2301      	movs	r3, #1
 8002370:	223b      	movs	r2, #59	@ 0x3b
 8002372:	21d0      	movs	r1, #208	@ 0xd0
 8002374:	4805      	ldr	r0, [pc, #20]	@ (800238c <mpu6050Read_DMA+0x2c>)
 8002376:	f001 fe17 	bl	8003fa8 <HAL_I2C_Mem_Read_DMA>
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
                                                    mpu6050Data,// Buffer to store the 14 bytes
                                                    14);        // Number of bytes to read
    if(status != HAL_OK) {
        // Handle error here, e.g., log or trigger an error flag.
    }
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200004ac 	.word	0x200004ac
 800238c:	20000344 	.word	0x20000344

08002390 <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
    if(hi2c->Instance == I2C1) {
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a58      	ldr	r2, [pc, #352]	@ (8002500 <HAL_I2C_MemRxCpltCallback+0x170>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	f040 80a6 	bne.w	80024f0 <HAL_I2C_MemRxCpltCallback+0x160>
        // Accelerometer data conversion
        int16_t rawAccelX = (int16_t)((mpu6050Data[0] << 8) | mpu6050Data[1]);
 80023a4:	4b57      	ldr	r3, [pc, #348]	@ (8002504 <HAL_I2C_MemRxCpltCallback+0x174>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	b21a      	sxth	r2, r3
 80023ac:	4b55      	ldr	r3, [pc, #340]	@ (8002504 <HAL_I2C_MemRxCpltCallback+0x174>)
 80023ae:	785b      	ldrb	r3, [r3, #1]
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	82fb      	strh	r3, [r7, #22]
        int16_t rawAccelY = (int16_t)((mpu6050Data[2] << 8) | mpu6050Data[3]);
 80023b6:	4b53      	ldr	r3, [pc, #332]	@ (8002504 <HAL_I2C_MemRxCpltCallback+0x174>)
 80023b8:	789b      	ldrb	r3, [r3, #2]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	b21a      	sxth	r2, r3
 80023be:	4b51      	ldr	r3, [pc, #324]	@ (8002504 <HAL_I2C_MemRxCpltCallback+0x174>)
 80023c0:	78db      	ldrb	r3, [r3, #3]
 80023c2:	b21b      	sxth	r3, r3
 80023c4:	4313      	orrs	r3, r2
 80023c6:	82bb      	strh	r3, [r7, #20]
        int16_t rawAccelZ = (int16_t)((mpu6050Data[4] << 8) | mpu6050Data[5]);
 80023c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002504 <HAL_I2C_MemRxCpltCallback+0x174>)
 80023ca:	791b      	ldrb	r3, [r3, #4]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002504 <HAL_I2C_MemRxCpltCallback+0x174>)
 80023d2:	795b      	ldrb	r3, [r3, #5]
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	827b      	strh	r3, [r7, #18]

        // Temperature data conversion
        int16_t rawTemp = (int16_t)((mpu6050Data[6] << 8) | mpu6050Data[7]);
 80023da:	4b4a      	ldr	r3, [pc, #296]	@ (8002504 <HAL_I2C_MemRxCpltCallback+0x174>)
 80023dc:	799b      	ldrb	r3, [r3, #6]
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	b21a      	sxth	r2, r3
 80023e2:	4b48      	ldr	r3, [pc, #288]	@ (8002504 <HAL_I2C_MemRxCpltCallback+0x174>)
 80023e4:	79db      	ldrb	r3, [r3, #7]
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	4313      	orrs	r3, r2
 80023ea:	823b      	strh	r3, [r7, #16]
        // Conversion formula example: actualTemp = (rawTemp / 340.0) + 36.53

        // Gyro data conversion
        int16_t rawGyroX = (int16_t)((mpu6050Data[8]  << 8) | mpu6050Data[9]);
 80023ec:	4b45      	ldr	r3, [pc, #276]	@ (8002504 <HAL_I2C_MemRxCpltCallback+0x174>)
 80023ee:	7a1b      	ldrb	r3, [r3, #8]
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	4b43      	ldr	r3, [pc, #268]	@ (8002504 <HAL_I2C_MemRxCpltCallback+0x174>)
 80023f6:	7a5b      	ldrb	r3, [r3, #9]
 80023f8:	b21b      	sxth	r3, r3
 80023fa:	4313      	orrs	r3, r2
 80023fc:	81fb      	strh	r3, [r7, #14]
        int16_t rawGyroY = (int16_t)((mpu6050Data[10] << 8) | mpu6050Data[11]);
 80023fe:	4b41      	ldr	r3, [pc, #260]	@ (8002504 <HAL_I2C_MemRxCpltCallback+0x174>)
 8002400:	7a9b      	ldrb	r3, [r3, #10]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	b21a      	sxth	r2, r3
 8002406:	4b3f      	ldr	r3, [pc, #252]	@ (8002504 <HAL_I2C_MemRxCpltCallback+0x174>)
 8002408:	7adb      	ldrb	r3, [r3, #11]
 800240a:	b21b      	sxth	r3, r3
 800240c:	4313      	orrs	r3, r2
 800240e:	81bb      	strh	r3, [r7, #12]
        int16_t rawGyroZ = (int16_t)((mpu6050Data[12] << 8) | mpu6050Data[13]);
 8002410:	4b3c      	ldr	r3, [pc, #240]	@ (8002504 <HAL_I2C_MemRxCpltCallback+0x174>)
 8002412:	7b1b      	ldrb	r3, [r3, #12]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	b21a      	sxth	r2, r3
 8002418:	4b3a      	ldr	r3, [pc, #232]	@ (8002504 <HAL_I2C_MemRxCpltCallback+0x174>)
 800241a:	7b5b      	ldrb	r3, [r3, #13]
 800241c:	b21b      	sxth	r3, r3
 800241e:	4313      	orrs	r3, r2
 8002420:	817b      	strh	r3, [r7, #10]


        Ax = rawAccelX / 8192.0f;
 8002422:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800242e:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002508 <HAL_I2C_MemRxCpltCallback+0x178>
 8002432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002436:	4b35      	ldr	r3, [pc, #212]	@ (800250c <HAL_I2C_MemRxCpltCallback+0x17c>)
 8002438:	edc3 7a00 	vstr	s15, [r3]
        Ay = rawAccelY / 8192.0f;
 800243c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002440:	ee07 3a90 	vmov	s15, r3
 8002444:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002448:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8002508 <HAL_I2C_MemRxCpltCallback+0x178>
 800244c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002450:	4b2f      	ldr	r3, [pc, #188]	@ (8002510 <HAL_I2C_MemRxCpltCallback+0x180>)
 8002452:	edc3 7a00 	vstr	s15, [r3]
        Az = rawAccelZ / 8192.0f;
 8002456:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002462:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8002508 <HAL_I2C_MemRxCpltCallback+0x178>
 8002466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800246a:	4b2a      	ldr	r3, [pc, #168]	@ (8002514 <HAL_I2C_MemRxCpltCallback+0x184>)
 800246c:	edc3 7a00 	vstr	s15, [r3]

        temperature = (rawTemp / 340.0f) + 36.53f; // Example conversion formula
 8002470:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800247c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002518 <HAL_I2C_MemRxCpltCallback+0x188>
 8002480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002484:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800251c <HAL_I2C_MemRxCpltCallback+0x18c>
 8002488:	ee77 7a87 	vadd.f32	s15, s15, s14
 800248c:	4b24      	ldr	r3, [pc, #144]	@ (8002520 <HAL_I2C_MemRxCpltCallback+0x190>)
 800248e:	edc3 7a00 	vstr	s15, [r3]

        Gx = rawGyroX / 65.5f;
 8002492:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800249e:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8002524 <HAL_I2C_MemRxCpltCallback+0x194>
 80024a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024a6:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <HAL_I2C_MemRxCpltCallback+0x198>)
 80024a8:	edc3 7a00 	vstr	s15, [r3]
        Gy = rawGyroY / 65.5;
 80024ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f837 	bl	8000524 <__aeabi_i2d>
 80024b6:	a310      	add	r3, pc, #64	@ (adr r3, 80024f8 <HAL_I2C_MemRxCpltCallback+0x168>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f7fe f9c6 	bl	800084c <__aeabi_ddiv>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	f7fe fb6e 	bl	8000ba8 <__aeabi_d2f>
 80024cc:	4603      	mov	r3, r0
 80024ce:	4a17      	ldr	r2, [pc, #92]	@ (800252c <HAL_I2C_MemRxCpltCallback+0x19c>)
 80024d0:	6013      	str	r3, [r2, #0]
        Gz = rawGyroZ / 65.5f;
 80024d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024de:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8002524 <HAL_I2C_MemRxCpltCallback+0x194>
 80024e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024e6:	4b12      	ldr	r3, [pc, #72]	@ (8002530 <HAL_I2C_MemRxCpltCallback+0x1a0>)
 80024e8:	edc3 7a00 	vstr	s15, [r3]
        // Process or store these values as needed
        // For example, update global variables or send them to another module

        // If you need continuous reading and are not using circular mode,
        // you can re-initiate the DMA read here.
        mpu6050Read_DMA();
 80024ec:	f7ff ff38 	bl	8002360 <mpu6050Read_DMA>
    }
}
 80024f0:	bf00      	nop
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	00000000 	.word	0x00000000
 80024fc:	40506000 	.word	0x40506000
 8002500:	40005400 	.word	0x40005400
 8002504:	200004ac 	.word	0x200004ac
 8002508:	46000000 	.word	0x46000000
 800250c:	20000490 	.word	0x20000490
 8002510:	20000494 	.word	0x20000494
 8002514:	20000498 	.word	0x20000498
 8002518:	43aa0000 	.word	0x43aa0000
 800251c:	42121eb8 	.word	0x42121eb8
 8002520:	200004a8 	.word	0x200004a8
 8002524:	42830000 	.word	0x42830000
 8002528:	2000049c 	.word	0x2000049c
 800252c:	200004a0 	.word	0x200004a0
 8002530:	200004a4 	.word	0x200004a4

08002534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	4b10      	ldr	r3, [pc, #64]	@ (8002580 <HAL_MspInit+0x4c>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	4a0f      	ldr	r2, [pc, #60]	@ (8002580 <HAL_MspInit+0x4c>)
 8002544:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002548:	6453      	str	r3, [r2, #68]	@ 0x44
 800254a:	4b0d      	ldr	r3, [pc, #52]	@ (8002580 <HAL_MspInit+0x4c>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <HAL_MspInit+0x4c>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	4a08      	ldr	r2, [pc, #32]	@ (8002580 <HAL_MspInit+0x4c>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002564:	6413      	str	r3, [r2, #64]	@ 0x40
 8002566:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <HAL_MspInit+0x4c>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800

08002584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	@ 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a30      	ldr	r2, [pc, #192]	@ (8002664 <HAL_I2C_MspInit+0xe0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d15a      	bne.n	800265c <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002668 <HAL_I2C_MspInit+0xe4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4a2e      	ldr	r2, [pc, #184]	@ (8002668 <HAL_I2C_MspInit+0xe4>)
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002668 <HAL_I2C_MspInit+0xe4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025c2:	23c0      	movs	r3, #192	@ 0xc0
 80025c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c6:	2312      	movs	r3, #18
 80025c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025d2:	2304      	movs	r3, #4
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	4619      	mov	r1, r3
 80025dc:	4823      	ldr	r0, [pc, #140]	@ (800266c <HAL_I2C_MspInit+0xe8>)
 80025de:	f000 fed7 	bl	8003390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b20      	ldr	r3, [pc, #128]	@ (8002668 <HAL_I2C_MspInit+0xe4>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002668 <HAL_I2C_MspInit+0xe4>)
 80025ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <HAL_I2C_MspInit+0xe4>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80025fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002670 <HAL_I2C_MspInit+0xec>)
 8002600:	4a1c      	ldr	r2, [pc, #112]	@ (8002674 <HAL_I2C_MspInit+0xf0>)
 8002602:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002604:	4b1a      	ldr	r3, [pc, #104]	@ (8002670 <HAL_I2C_MspInit+0xec>)
 8002606:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800260a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800260c:	4b18      	ldr	r3, [pc, #96]	@ (8002670 <HAL_I2C_MspInit+0xec>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002612:	4b17      	ldr	r3, [pc, #92]	@ (8002670 <HAL_I2C_MspInit+0xec>)
 8002614:	2200      	movs	r2, #0
 8002616:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002618:	4b15      	ldr	r3, [pc, #84]	@ (8002670 <HAL_I2C_MspInit+0xec>)
 800261a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800261e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002620:	4b13      	ldr	r3, [pc, #76]	@ (8002670 <HAL_I2C_MspInit+0xec>)
 8002622:	2200      	movs	r2, #0
 8002624:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <HAL_I2C_MspInit+0xec>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800262c:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <HAL_I2C_MspInit+0xec>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002632:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <HAL_I2C_MspInit+0xec>)
 8002634:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002638:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800263a:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <HAL_I2C_MspInit+0xec>)
 800263c:	2200      	movs	r2, #0
 800263e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002640:	480b      	ldr	r0, [pc, #44]	@ (8002670 <HAL_I2C_MspInit+0xec>)
 8002642:	f000 fb07 	bl	8002c54 <HAL_DMA_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800264c:	f7ff fdbe 	bl	80021cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a07      	ldr	r2, [pc, #28]	@ (8002670 <HAL_I2C_MspInit+0xec>)
 8002654:	639a      	str	r2, [r3, #56]	@ 0x38
 8002656:	4a06      	ldr	r2, [pc, #24]	@ (8002670 <HAL_I2C_MspInit+0xec>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800265c:	bf00      	nop
 800265e:	3728      	adds	r7, #40	@ 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40005400 	.word	0x40005400
 8002668:	40023800 	.word	0x40023800
 800266c:	40020400 	.word	0x40020400
 8002670:	20000398 	.word	0x20000398
 8002674:	40026010 	.word	0x40026010

08002678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <NMI_Handler+0x4>

08002680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <HardFault_Handler+0x4>

08002688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <MemManage_Handler+0x4>

08002690 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <BusFault_Handler+0x4>

08002698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <UsageFault_Handler+0x4>

080026a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ce:	f000 f96b 	bl	80029a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80026dc:	4802      	ldr	r0, [pc, #8]	@ (80026e8 <DMA1_Stream0_IRQHandler+0x10>)
 80026de:	f000 fbe1 	bl	8002ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000398 	.word	0x20000398

080026ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80026f0:	4802      	ldr	r0, [pc, #8]	@ (80026fc <OTG_FS_IRQHandler+0x10>)
 80026f2:	f002 fc25 	bl	8004f40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200019a4 	.word	0x200019a4

08002700 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return 1;
 8002704:	2301      	movs	r3, #1
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_kill>:

int _kill(int pid, int sig)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800271a:	f008 ffbb 	bl	800b694 <__errno>
 800271e:	4603      	mov	r3, r0
 8002720:	2216      	movs	r2, #22
 8002722:	601a      	str	r2, [r3, #0]
  return -1;
 8002724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_exit>:

void _exit (int status)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ffe7 	bl	8002710 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002742:	bf00      	nop
 8002744:	e7fd      	b.n	8002742 <_exit+0x12>

08002746 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	e00a      	b.n	800276e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002758:	f3af 8000 	nop.w
 800275c:	4601      	mov	r1, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	60ba      	str	r2, [r7, #8]
 8002764:	b2ca      	uxtb	r2, r1
 8002766:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3301      	adds	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	429a      	cmp	r2, r3
 8002774:	dbf0      	blt.n	8002758 <_read+0x12>
  }

  return len;
 8002776:	687b      	ldr	r3, [r7, #4]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	e009      	b.n	80027a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	60ba      	str	r2, [r7, #8]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3301      	adds	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	dbf1      	blt.n	8002792 <_write+0x12>
  }
  return len;
 80027ae:	687b      	ldr	r3, [r7, #4]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_close>:

int _close(int file)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027e0:	605a      	str	r2, [r3, #4]
  return 0;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <_isatty>:

int _isatty(int file)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027f8:	2301      	movs	r3, #1
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002828:	4a14      	ldr	r2, [pc, #80]	@ (800287c <_sbrk+0x5c>)
 800282a:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <_sbrk+0x60>)
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002834:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <_sbrk+0x64>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800283c:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <_sbrk+0x64>)
 800283e:	4a12      	ldr	r2, [pc, #72]	@ (8002888 <_sbrk+0x68>)
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002842:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <_sbrk+0x64>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	429a      	cmp	r2, r3
 800284e:	d207      	bcs.n	8002860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002850:	f008 ff20 	bl	800b694 <__errno>
 8002854:	4603      	mov	r3, r0
 8002856:	220c      	movs	r2, #12
 8002858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800285a:	f04f 33ff 	mov.w	r3, #4294967295
 800285e:	e009      	b.n	8002874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002860:	4b08      	ldr	r3, [pc, #32]	@ (8002884 <_sbrk+0x64>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002866:	4b07      	ldr	r3, [pc, #28]	@ (8002884 <_sbrk+0x64>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	4a05      	ldr	r2, [pc, #20]	@ (8002884 <_sbrk+0x64>)
 8002870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002872:	68fb      	ldr	r3, [r7, #12]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20020000 	.word	0x20020000
 8002880:	00000400 	.word	0x00000400
 8002884:	200004bc 	.word	0x200004bc
 8002888:	200021f8 	.word	0x200021f8

0800288c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <SystemInit+0x20>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002896:	4a05      	ldr	r2, [pc, #20]	@ (80028ac <SystemInit+0x20>)
 8002898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800289c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028b4:	f7ff ffea 	bl	800288c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028b8:	480c      	ldr	r0, [pc, #48]	@ (80028ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ba:	490d      	ldr	r1, [pc, #52]	@ (80028f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028bc:	4a0d      	ldr	r2, [pc, #52]	@ (80028f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c0:	e002      	b.n	80028c8 <LoopCopyDataInit>

080028c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028c6:	3304      	adds	r3, #4

080028c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028cc:	d3f9      	bcc.n	80028c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ce:	4a0a      	ldr	r2, [pc, #40]	@ (80028f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028d0:	4c0a      	ldr	r4, [pc, #40]	@ (80028fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d4:	e001      	b.n	80028da <LoopFillZerobss>

080028d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d8:	3204      	adds	r2, #4

080028da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028dc:	d3fb      	bcc.n	80028d6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80028de:	f008 fedf 	bl	800b6a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028e2:	f7ff fa81 	bl	8001de8 <main>
  bx  lr    
 80028e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f0:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 80028f4:	0800f098 	.word	0x0800f098
  ldr r2, =_sbss
 80028f8:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 80028fc:	200021f4 	.word	0x200021f4

08002900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002900:	e7fe      	b.n	8002900 <ADC_IRQHandler>
	...

08002904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002908:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <HAL_Init+0x40>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0d      	ldr	r2, [pc, #52]	@ (8002944 <HAL_Init+0x40>)
 800290e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_Init+0x40>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0a      	ldr	r2, [pc, #40]	@ (8002944 <HAL_Init+0x40>)
 800291a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800291e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <HAL_Init+0x40>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a07      	ldr	r2, [pc, #28]	@ (8002944 <HAL_Init+0x40>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292c:	2003      	movs	r0, #3
 800292e:	f000 f94f 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002932:	200f      	movs	r0, #15
 8002934:	f000 f808 	bl	8002948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002938:	f7ff fdfc 	bl	8002534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023c00 	.word	0x40023c00

08002948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002950:	4b12      	ldr	r3, [pc, #72]	@ (800299c <HAL_InitTick+0x54>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <HAL_InitTick+0x58>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	4619      	mov	r1, r3
 800295a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800295e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f967 	bl	8002c3a <HAL_SYSTICK_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e00e      	b.n	8002994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b0f      	cmp	r3, #15
 800297a:	d80a      	bhi.n	8002992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800297c:	2200      	movs	r2, #0
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	f04f 30ff 	mov.w	r0, #4294967295
 8002984:	f000 f92f 	bl	8002be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002988:	4a06      	ldr	r2, [pc, #24]	@ (80029a4 <HAL_InitTick+0x5c>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	2000003c 	.word	0x2000003c
 80029a0:	20000044 	.word	0x20000044
 80029a4:	20000040 	.word	0x20000040

080029a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <HAL_IncTick+0x20>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_IncTick+0x24>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <HAL_IncTick+0x24>)
 80029ba:	6013      	str	r3, [r2, #0]
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000044 	.word	0x20000044
 80029cc:	200004c0 	.word	0x200004c0

080029d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return uwTick;
 80029d4:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <HAL_GetTick+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	200004c0 	.word	0x200004c0

080029e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff ffee 	bl	80029d0 <HAL_GetTick>
 80029f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d005      	beq.n	8002a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a02:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <HAL_Delay+0x44>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a0e:	bf00      	nop
 8002a10:	f7ff ffde 	bl	80029d0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d8f7      	bhi.n	8002a10 <HAL_Delay+0x28>
  {
  }
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000044 	.word	0x20000044

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0c      	ldr	r3, [pc, #48]	@ (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a62:	4a04      	ldr	r2, [pc, #16]	@ (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	60d3      	str	r3, [r2, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	@ (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	@ (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	@ (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	@ (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	@ 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	@ 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b9c:	d301      	bcc.n	8002ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00f      	b.n	8002bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bcc <SysTick_Config+0x40>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002baa:	210f      	movs	r1, #15
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb0:	f7ff ff8e 	bl	8002ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb4:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <SysTick_Config+0x40>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bba:	4b04      	ldr	r3, [pc, #16]	@ (8002bcc <SysTick_Config+0x40>)
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff29 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf8:	f7ff ff3e 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	6978      	ldr	r0, [r7, #20]
 8002c04:	f7ff ff8e 	bl	8002b24 <NVIC_EncodePriority>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff5d 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002c16:	bf00      	nop
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff31 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ffa2 	bl	8002b8c <SysTick_Config>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f7ff feb6 	bl	80029d0 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e099      	b.n	8002da4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c90:	e00f      	b.n	8002cb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c92:	f7ff fe9d 	bl	80029d0 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d908      	bls.n	8002cb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e078      	b.n	8002da4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1e8      	bne.n	8002c92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	4b38      	ldr	r3, [pc, #224]	@ (8002dac <HAL_DMA_Init+0x158>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d107      	bne.n	8002d1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d14:	4313      	orrs	r3, r2
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f023 0307 	bic.w	r3, r3, #7
 8002d32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d117      	bne.n	8002d76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00e      	beq.n	8002d76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fa9d 	bl	8003298 <DMA_CheckFifoParam>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2240      	movs	r2, #64	@ 0x40
 8002d68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d72:	2301      	movs	r3, #1
 8002d74:	e016      	b.n	8002da4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fa54 	bl	800322c <DMA_CalcBaseAndBitshift>
 8002d84:	4603      	mov	r3, r0
 8002d86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8c:	223f      	movs	r2, #63	@ 0x3f
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	f010803f 	.word	0xf010803f

08002db0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_DMA_Start_IT+0x26>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e040      	b.n	8002e58 <HAL_DMA_Start_IT+0xa8>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d12f      	bne.n	8002e4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f9e6 	bl	80031d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e08:	223f      	movs	r2, #63	@ 0x3f
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0216 	orr.w	r2, r2, #22
 8002e1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0208 	orr.w	r2, r2, #8
 8002e36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e005      	b.n	8002e56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e52:	2302      	movs	r3, #2
 8002e54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d004      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2280      	movs	r2, #128	@ 0x80
 8002e78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00c      	b.n	8002e98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2205      	movs	r2, #5
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002eb0:	4b8e      	ldr	r3, [pc, #568]	@ (80030ec <HAL_DMA_IRQHandler+0x248>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a8e      	ldr	r2, [pc, #568]	@ (80030f0 <HAL_DMA_IRQHandler+0x24c>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	0a9b      	lsrs	r3, r3, #10
 8002ebc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ece:	2208      	movs	r2, #8
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01a      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d013      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0204 	bic.w	r2, r2, #4
 8002ef6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efc:	2208      	movs	r2, #8
 8002efe:	409a      	lsls	r2, r3
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	2201      	movs	r2, #1
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d012      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f32:	2201      	movs	r2, #1
 8002f34:	409a      	lsls	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3e:	f043 0202 	orr.w	r2, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d012      	beq.n	8002f7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f68:	2204      	movs	r2, #4
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f74:	f043 0204 	orr.w	r2, r3, #4
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f80:	2210      	movs	r2, #16
 8002f82:	409a      	lsls	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d043      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d03c      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d018      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d108      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d024      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	4798      	blx	r3
 8002fd2:	e01f      	b.n	8003014 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01b      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
 8002fe4:	e016      	b.n	8003014 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d107      	bne.n	8003004 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0208 	bic.w	r2, r2, #8
 8003002:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003018:	2220      	movs	r2, #32
 800301a:	409a      	lsls	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 808f 	beq.w	8003144 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8087 	beq.w	8003144 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303a:	2220      	movs	r2, #32
 800303c:	409a      	lsls	r2, r3
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b05      	cmp	r3, #5
 800304c:	d136      	bne.n	80030bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0216 	bic.w	r2, r2, #22
 800305c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800306c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <HAL_DMA_IRQHandler+0x1da>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0208 	bic.w	r2, r2, #8
 800308c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003092:	223f      	movs	r2, #63	@ 0x3f
 8003094:	409a      	lsls	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d07e      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
        }
        return;
 80030ba:	e079      	b.n	80031b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d01d      	beq.n	8003106 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10d      	bne.n	80030f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d031      	beq.n	8003144 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
 80030e8:	e02c      	b.n	8003144 <HAL_DMA_IRQHandler+0x2a0>
 80030ea:	bf00      	nop
 80030ec:	2000003c 	.word	0x2000003c
 80030f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d023      	beq.n	8003144 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	4798      	blx	r3
 8003104:	e01e      	b.n	8003144 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10f      	bne.n	8003134 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0210 	bic.w	r2, r2, #16
 8003122:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003148:	2b00      	cmp	r3, #0
 800314a:	d032      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d022      	beq.n	800319e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2205      	movs	r2, #5
 800315c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0201 	bic.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	3301      	adds	r3, #1
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	429a      	cmp	r2, r3
 800317a:	d307      	bcc.n	800318c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f2      	bne.n	8003170 <HAL_DMA_IRQHandler+0x2cc>
 800318a:	e000      	b.n	800318e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800318c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
 80031ae:	e000      	b.n	80031b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80031b0:	bf00      	nop
    }
  }
}
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b40      	cmp	r3, #64	@ 0x40
 80031fc:	d108      	bne.n	8003210 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800320e:	e007      	b.n	8003220 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	60da      	str	r2, [r3, #12]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	3b10      	subs	r3, #16
 800323c:	4a14      	ldr	r2, [pc, #80]	@ (8003290 <DMA_CalcBaseAndBitshift+0x64>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003246:	4a13      	ldr	r2, [pc, #76]	@ (8003294 <DMA_CalcBaseAndBitshift+0x68>)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d909      	bls.n	800326e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	1d1a      	adds	r2, r3, #4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	659a      	str	r2, [r3, #88]	@ 0x58
 800326c:	e007      	b.n	800327e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	aaaaaaab 	.word	0xaaaaaaab
 8003294:	0800eb38 	.word	0x0800eb38

08003298 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d11f      	bne.n	80032f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d856      	bhi.n	8003366 <DMA_CheckFifoParam+0xce>
 80032b8:	a201      	add	r2, pc, #4	@ (adr r2, 80032c0 <DMA_CheckFifoParam+0x28>)
 80032ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032be:	bf00      	nop
 80032c0:	080032d1 	.word	0x080032d1
 80032c4:	080032e3 	.word	0x080032e3
 80032c8:	080032d1 	.word	0x080032d1
 80032cc:	08003367 	.word	0x08003367
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d046      	beq.n	800336a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e0:	e043      	b.n	800336a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032ea:	d140      	bne.n	800336e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f0:	e03d      	b.n	800336e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032fa:	d121      	bne.n	8003340 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d837      	bhi.n	8003372 <DMA_CheckFifoParam+0xda>
 8003302:	a201      	add	r2, pc, #4	@ (adr r2, 8003308 <DMA_CheckFifoParam+0x70>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	08003319 	.word	0x08003319
 800330c:	0800331f 	.word	0x0800331f
 8003310:	08003319 	.word	0x08003319
 8003314:	08003331 	.word	0x08003331
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      break;
 800331c:	e030      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003322:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d025      	beq.n	8003376 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332e:	e022      	b.n	8003376 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003334:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003338:	d11f      	bne.n	800337a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800333e:	e01c      	b.n	800337a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d903      	bls.n	800334e <DMA_CheckFifoParam+0xb6>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d003      	beq.n	8003354 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800334c:	e018      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
      break;
 8003352:	e015      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00e      	beq.n	800337e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      break;
 8003364:	e00b      	b.n	800337e <DMA_CheckFifoParam+0xe6>
      break;
 8003366:	bf00      	nop
 8003368:	e00a      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
 800336c:	e008      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
 8003370:	e006      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 8003372:	bf00      	nop
 8003374:	e004      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 8003376:	bf00      	nop
 8003378:	e002      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;   
 800337a:	bf00      	nop
 800337c:	e000      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800337e:	bf00      	nop
    }
  } 
  
  return status; 
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	@ 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	e16b      	b.n	8003684 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033ac:	2201      	movs	r2, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	f040 815a 	bne.w	800367e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d005      	beq.n	80033e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d130      	bne.n	8003444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2203      	movs	r2, #3
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003418:	2201      	movs	r2, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 0201 	and.w	r2, r3, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b03      	cmp	r3, #3
 800344e:	d017      	beq.n	8003480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	2203      	movs	r2, #3
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d123      	bne.n	80034d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	08da      	lsrs	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3208      	adds	r2, #8
 8003494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	220f      	movs	r2, #15
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	08da      	lsrs	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3208      	adds	r2, #8
 80034ce:	69b9      	ldr	r1, [r7, #24]
 80034d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0203 	and.w	r2, r3, #3
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80b4 	beq.w	800367e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b60      	ldr	r3, [pc, #384]	@ (800369c <HAL_GPIO_Init+0x30c>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	4a5f      	ldr	r2, [pc, #380]	@ (800369c <HAL_GPIO_Init+0x30c>)
 8003520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003524:	6453      	str	r3, [r2, #68]	@ 0x44
 8003526:	4b5d      	ldr	r3, [pc, #372]	@ (800369c <HAL_GPIO_Init+0x30c>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003532:	4a5b      	ldr	r2, [pc, #364]	@ (80036a0 <HAL_GPIO_Init+0x310>)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	3302      	adds	r3, #2
 800353a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	220f      	movs	r2, #15
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a52      	ldr	r2, [pc, #328]	@ (80036a4 <HAL_GPIO_Init+0x314>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d02b      	beq.n	80035b6 <HAL_GPIO_Init+0x226>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a51      	ldr	r2, [pc, #324]	@ (80036a8 <HAL_GPIO_Init+0x318>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d025      	beq.n	80035b2 <HAL_GPIO_Init+0x222>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a50      	ldr	r2, [pc, #320]	@ (80036ac <HAL_GPIO_Init+0x31c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01f      	beq.n	80035ae <HAL_GPIO_Init+0x21e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4f      	ldr	r2, [pc, #316]	@ (80036b0 <HAL_GPIO_Init+0x320>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d019      	beq.n	80035aa <HAL_GPIO_Init+0x21a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4e      	ldr	r2, [pc, #312]	@ (80036b4 <HAL_GPIO_Init+0x324>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_GPIO_Init+0x216>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4d      	ldr	r2, [pc, #308]	@ (80036b8 <HAL_GPIO_Init+0x328>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00d      	beq.n	80035a2 <HAL_GPIO_Init+0x212>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4c      	ldr	r2, [pc, #304]	@ (80036bc <HAL_GPIO_Init+0x32c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <HAL_GPIO_Init+0x20e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4b      	ldr	r2, [pc, #300]	@ (80036c0 <HAL_GPIO_Init+0x330>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_GPIO_Init+0x20a>
 8003596:	2307      	movs	r3, #7
 8003598:	e00e      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 800359a:	2308      	movs	r3, #8
 800359c:	e00c      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 800359e:	2306      	movs	r3, #6
 80035a0:	e00a      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035a2:	2305      	movs	r3, #5
 80035a4:	e008      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035a6:	2304      	movs	r3, #4
 80035a8:	e006      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e004      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e002      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035b6:	2300      	movs	r3, #0
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	f002 0203 	and.w	r2, r2, #3
 80035be:	0092      	lsls	r2, r2, #2
 80035c0:	4093      	lsls	r3, r2
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c8:	4935      	ldr	r1, [pc, #212]	@ (80036a0 <HAL_GPIO_Init+0x310>)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	089b      	lsrs	r3, r3, #2
 80035ce:	3302      	adds	r3, #2
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035d6:	4b3b      	ldr	r3, [pc, #236]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035fa:	4a32      	ldr	r2, [pc, #200]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003600:	4b30      	ldr	r3, [pc, #192]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003624:	4a27      	ldr	r2, [pc, #156]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800362a:	4b26      	ldr	r3, [pc, #152]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800364e:	4a1d      	ldr	r2, [pc, #116]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003654:	4b1b      	ldr	r3, [pc, #108]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003678:	4a12      	ldr	r2, [pc, #72]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3301      	adds	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	f67f ae90 	bls.w	80033ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	3724      	adds	r7, #36	@ 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	40013800 	.word	0x40013800
 80036a4:	40020000 	.word	0x40020000
 80036a8:	40020400 	.word	0x40020400
 80036ac:	40020800 	.word	0x40020800
 80036b0:	40020c00 	.word	0x40020c00
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40021400 	.word	0x40021400
 80036bc:	40021800 	.word	0x40021800
 80036c0:	40021c00 	.word	0x40021c00
 80036c4:	40013c00 	.word	0x40013c00

080036c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e12b      	b.n	8003932 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fe ff48 	bl	8002584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2224      	movs	r2, #36	@ 0x24
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0201 	bic.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800371a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800372a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800372c:	f003 f986 	bl	8006a3c <HAL_RCC_GetPCLK1Freq>
 8003730:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4a81      	ldr	r2, [pc, #516]	@ (800393c <HAL_I2C_Init+0x274>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d807      	bhi.n	800374c <HAL_I2C_Init+0x84>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a80      	ldr	r2, [pc, #512]	@ (8003940 <HAL_I2C_Init+0x278>)
 8003740:	4293      	cmp	r3, r2
 8003742:	bf94      	ite	ls
 8003744:	2301      	movls	r3, #1
 8003746:	2300      	movhi	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	e006      	b.n	800375a <HAL_I2C_Init+0x92>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4a7d      	ldr	r2, [pc, #500]	@ (8003944 <HAL_I2C_Init+0x27c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	bf94      	ite	ls
 8003754:	2301      	movls	r3, #1
 8003756:	2300      	movhi	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e0e7      	b.n	8003932 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4a78      	ldr	r2, [pc, #480]	@ (8003948 <HAL_I2C_Init+0x280>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	0c9b      	lsrs	r3, r3, #18
 800376c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	430a      	orrs	r2, r1
 8003780:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4a6a      	ldr	r2, [pc, #424]	@ (800393c <HAL_I2C_Init+0x274>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d802      	bhi.n	800379c <HAL_I2C_Init+0xd4>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	3301      	adds	r3, #1
 800379a:	e009      	b.n	80037b0 <HAL_I2C_Init+0xe8>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037a2:	fb02 f303 	mul.w	r3, r2, r3
 80037a6:	4a69      	ldr	r2, [pc, #420]	@ (800394c <HAL_I2C_Init+0x284>)
 80037a8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ac:	099b      	lsrs	r3, r3, #6
 80037ae:	3301      	adds	r3, #1
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	430b      	orrs	r3, r1
 80037b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	495c      	ldr	r1, [pc, #368]	@ (800393c <HAL_I2C_Init+0x274>)
 80037cc:	428b      	cmp	r3, r1
 80037ce:	d819      	bhi.n	8003804 <HAL_I2C_Init+0x13c>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1e59      	subs	r1, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	fbb1 f3f3 	udiv	r3, r1, r3
 80037de:	1c59      	adds	r1, r3, #1
 80037e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037e4:	400b      	ands	r3, r1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_I2C_Init+0x138>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1e59      	subs	r1, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fe:	e051      	b.n	80038a4 <HAL_I2C_Init+0x1dc>
 8003800:	2304      	movs	r3, #4
 8003802:	e04f      	b.n	80038a4 <HAL_I2C_Init+0x1dc>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d111      	bne.n	8003830 <HAL_I2C_Init+0x168>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1e58      	subs	r0, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	440b      	add	r3, r1
 800381a:	fbb0 f3f3 	udiv	r3, r0, r3
 800381e:	3301      	adds	r3, #1
 8003820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e012      	b.n	8003856 <HAL_I2C_Init+0x18e>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1e58      	subs	r0, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	0099      	lsls	r1, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	fbb0 f3f3 	udiv	r3, r0, r3
 8003846:	3301      	adds	r3, #1
 8003848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf0c      	ite	eq
 8003850:	2301      	moveq	r3, #1
 8003852:	2300      	movne	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_Init+0x196>
 800385a:	2301      	movs	r3, #1
 800385c:	e022      	b.n	80038a4 <HAL_I2C_Init+0x1dc>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10e      	bne.n	8003884 <HAL_I2C_Init+0x1bc>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1e58      	subs	r0, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6859      	ldr	r1, [r3, #4]
 800386e:	460b      	mov	r3, r1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	440b      	add	r3, r1
 8003874:	fbb0 f3f3 	udiv	r3, r0, r3
 8003878:	3301      	adds	r3, #1
 800387a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003882:	e00f      	b.n	80038a4 <HAL_I2C_Init+0x1dc>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1e58      	subs	r0, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	0099      	lsls	r1, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	fbb0 f3f3 	udiv	r3, r0, r3
 800389a:	3301      	adds	r3, #1
 800389c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	6809      	ldr	r1, [r1, #0]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69da      	ldr	r2, [r3, #28]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6911      	ldr	r1, [r2, #16]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68d2      	ldr	r2, [r2, #12]
 80038de:	4311      	orrs	r1, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	000186a0 	.word	0x000186a0
 8003940:	001e847f 	.word	0x001e847f
 8003944:	003d08ff 	.word	0x003d08ff
 8003948:	431bde83 	.word	0x431bde83
 800394c:	10624dd3 	.word	0x10624dd3

08003950 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	4608      	mov	r0, r1
 800395a:	4611      	mov	r1, r2
 800395c:	461a      	mov	r2, r3
 800395e:	4603      	mov	r3, r0
 8003960:	817b      	strh	r3, [r7, #10]
 8003962:	460b      	mov	r3, r1
 8003964:	813b      	strh	r3, [r7, #8]
 8003966:	4613      	mov	r3, r2
 8003968:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800396a:	f7ff f831 	bl	80029d0 <HAL_GetTick>
 800396e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b20      	cmp	r3, #32
 800397a:	f040 80d9 	bne.w	8003b30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	2319      	movs	r3, #25
 8003984:	2201      	movs	r2, #1
 8003986:	496d      	ldr	r1, [pc, #436]	@ (8003b3c <HAL_I2C_Mem_Write+0x1ec>)
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 ff5f 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
 8003996:	e0cc      	b.n	8003b32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_I2C_Mem_Write+0x56>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e0c5      	b.n	8003b32 <HAL_I2C_Mem_Write+0x1e2>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d007      	beq.n	80039cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2221      	movs	r2, #33	@ 0x21
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2240      	movs	r2, #64	@ 0x40
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a3a      	ldr	r2, [r7, #32]
 80039f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a4d      	ldr	r2, [pc, #308]	@ (8003b40 <HAL_I2C_Mem_Write+0x1f0>)
 8003a0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a0e:	88f8      	ldrh	r0, [r7, #6]
 8003a10:	893a      	ldrh	r2, [r7, #8]
 8003a12:	8979      	ldrh	r1, [r7, #10]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fc7a 	bl	8004318 <I2C_RequestMemoryWrite>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d052      	beq.n	8003ad0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e081      	b.n	8003b32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f001 f824 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00d      	beq.n	8003a5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d107      	bne.n	8003a56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e06b      	b.n	8003b32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d11b      	bne.n	8003ad0 <HAL_I2C_Mem_Write+0x180>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d017      	beq.n	8003ad0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1aa      	bne.n	8003a2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f001 f817 	bl	8004b10 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00d      	beq.n	8003b04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d107      	bne.n	8003b00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003afe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e016      	b.n	8003b32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e000      	b.n	8003b32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	00100002 	.word	0x00100002
 8003b40:	ffff0000 	.word	0xffff0000

08003b44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08c      	sub	sp, #48	@ 0x30
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	4608      	mov	r0, r1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	461a      	mov	r2, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	817b      	strh	r3, [r7, #10]
 8003b56:	460b      	mov	r3, r1
 8003b58:	813b      	strh	r3, [r7, #8]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b5e:	f7fe ff37 	bl	80029d0 <HAL_GetTick>
 8003b62:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	f040 8214 	bne.w	8003f9a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	2319      	movs	r3, #25
 8003b78:	2201      	movs	r2, #1
 8003b7a:	497b      	ldr	r1, [pc, #492]	@ (8003d68 <HAL_I2C_Mem_Read+0x224>)
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fe65 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e207      	b.n	8003f9c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_I2C_Mem_Read+0x56>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e200      	b.n	8003f9c <HAL_I2C_Mem_Read+0x458>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d007      	beq.n	8003bc0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2222      	movs	r2, #34	@ 0x22
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2240      	movs	r2, #64	@ 0x40
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a5b      	ldr	r2, [pc, #364]	@ (8003d6c <HAL_I2C_Mem_Read+0x228>)
 8003c00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c02:	88f8      	ldrh	r0, [r7, #6]
 8003c04:	893a      	ldrh	r2, [r7, #8]
 8003c06:	8979      	ldrh	r1, [r7, #10]
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	9301      	str	r3, [sp, #4]
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	4603      	mov	r3, r0
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fc16 	bl	8004444 <I2C_RequestMemoryRead>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e1bc      	b.n	8003f9c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d113      	bne.n	8003c52 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	623b      	str	r3, [r7, #32]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	623b      	str	r3, [r7, #32]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	623b      	str	r3, [r7, #32]
 8003c3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e190      	b.n	8003f74 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d11b      	bne.n	8003c92 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e170      	b.n	8003f74 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d11b      	bne.n	8003cd2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ca8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	e150      	b.n	8003f74 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ce8:	e144      	b.n	8003f74 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	f200 80f1 	bhi.w	8003ed6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d123      	bne.n	8003d44 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 ff4d 	bl	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e145      	b.n	8003f9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d42:	e117      	b.n	8003f74 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d14e      	bne.n	8003dea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d52:	2200      	movs	r2, #0
 8003d54:	4906      	ldr	r1, [pc, #24]	@ (8003d70 <HAL_I2C_Mem_Read+0x22c>)
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fd78 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e11a      	b.n	8003f9c <HAL_I2C_Mem_Read+0x458>
 8003d66:	bf00      	nop
 8003d68:	00100002 	.word	0x00100002
 8003d6c:	ffff0000 	.word	0xffff0000
 8003d70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003de8:	e0c4      	b.n	8003f74 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df0:	2200      	movs	r2, #0
 8003df2:	496c      	ldr	r1, [pc, #432]	@ (8003fa4 <HAL_I2C_Mem_Read+0x460>)
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fd29 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0cb      	b.n	8003f9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	4955      	ldr	r1, [pc, #340]	@ (8003fa4 <HAL_I2C_Mem_Read+0x460>)
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 fcfb 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e09d      	b.n	8003f9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ed4:	e04e      	b.n	8003f74 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fe60 	bl	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e058      	b.n	8003f9c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d124      	bne.n	8003f74 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d107      	bne.n	8003f42 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f40:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f47f aeb6 	bne.w	8003cea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e000      	b.n	8003f9c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
  }
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3728      	adds	r7, #40	@ 0x28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	00010004 	.word	0x00010004

08003fa8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08c      	sub	sp, #48	@ 0x30
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	817b      	strh	r3, [r7, #10]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	813b      	strh	r3, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fc2:	f7fe fd05 	bl	80029d0 <HAL_GetTick>
 8003fc6:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	f040 8172 	bne.w	80042be <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fda:	4b93      	ldr	r3, [pc, #588]	@ (8004228 <HAL_I2C_Mem_Read_DMA+0x280>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	08db      	lsrs	r3, r3, #3
 8003fe0:	4a92      	ldr	r2, [pc, #584]	@ (800422c <HAL_I2C_Mem_Read_DMA+0x284>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	0a1a      	lsrs	r2, r3, #8
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009a      	lsls	r2, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d112      	bne.n	8004026 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
 8004024:	e14c      	b.n	80042c0 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b02      	cmp	r3, #2
 8004032:	d0df      	beq.n	8003ff4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_I2C_Mem_Read_DMA+0x9a>
 800403e:	2302      	movs	r3, #2
 8004040:	e13e      	b.n	80042c0 <HAL_I2C_Mem_Read_DMA+0x318>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b01      	cmp	r3, #1
 8004056:	d007      	beq.n	8004068 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004076:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2222      	movs	r2, #34	@ 0x22
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2240      	movs	r2, #64	@ 0x40
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004092:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004098:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a62      	ldr	r2, [pc, #392]	@ (8004230 <HAL_I2C_Mem_Read_DMA+0x288>)
 80040a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80040aa:	897a      	ldrh	r2, [r7, #10]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80040b0:	893a      	ldrh	r2, [r7, #8]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80040b6:	88fa      	ldrh	r2, [r7, #6]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80cc 	beq.w	8004264 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d02d      	beq.n	8004130 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	4a56      	ldr	r2, [pc, #344]	@ (8004234 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80040da:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e0:	4a55      	ldr	r2, [pc, #340]	@ (8004238 <HAL_I2C_Mem_Read_DMA+0x290>)
 80040e2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e8:	2200      	movs	r2, #0
 80040ea:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f0:	2200      	movs	r2, #0
 80040f2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f8:	2200      	movs	r2, #0
 80040fa:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004100:	2200      	movs	r2, #0
 8004102:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3310      	adds	r3, #16
 800410e:	4619      	mov	r1, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	461a      	mov	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411a:	f7fe fe49 	bl	8002db0 <HAL_DMA_Start_IT>
 800411e:	4603      	mov	r3, r0
 8004120:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004124:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 8087 	bne.w	800423c <HAL_I2C_Mem_Read_DMA+0x294>
 800412e:	e013      	b.n	8004158 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004144:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0b3      	b.n	80042c0 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004158:	88f8      	ldrh	r0, [r7, #6]
 800415a:	893a      	ldrh	r2, [r7, #8]
 800415c:	8979      	ldrh	r1, [r7, #10]
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	2323      	movs	r3, #35	@ 0x23
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	4603      	mov	r3, r0
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f96b 	bl	8004444 <I2C_RequestMemoryRead>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d023      	beq.n	80041bc <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004178:	4618      	mov	r0, r3
 800417a:	f7fe fe71 	bl	8002e60 <HAL_DMA_Abort_IT>
 800417e:	4603      	mov	r3, r0
 8004180:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004188:	2200      	movs	r2, #0
 800418a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e081      	b.n	80042c0 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d108      	bne.n	80041d6 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	e007      	b.n	80041e6 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e6:	2300      	movs	r3, #0
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004212:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004222:	605a      	str	r2, [r3, #4]
 8004224:	e049      	b.n	80042ba <HAL_I2C_Mem_Read_DMA+0x312>
 8004226:	bf00      	nop
 8004228:	2000003c 	.word	0x2000003c
 800422c:	14f8b589 	.word	0x14f8b589
 8004230:	ffff0000 	.word	0xffff0000
 8004234:	08004615 	.word	0x08004615
 8004238:	080047d3 	.word	0x080047d3
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	f043 0210 	orr.w	r2, r3, #16
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e02d      	b.n	80042c0 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004264:	88f8      	ldrh	r0, [r7, #6]
 8004266:	893a      	ldrh	r2, [r7, #8]
 8004268:	8979      	ldrh	r1, [r7, #10]
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	2323      	movs	r3, #35	@ 0x23
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	4603      	mov	r3, r0
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f8e5 	bl	8004444 <I2C_RequestMemoryRead>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e01d      	b.n	80042c0 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e000      	b.n	80042c0 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80042be:	2302      	movs	r3, #2
  }
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3728      	adds	r7, #40	@ 0x28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	4608      	mov	r0, r1
 8004322:	4611      	mov	r1, r2
 8004324:	461a      	mov	r2, r3
 8004326:	4603      	mov	r3, r0
 8004328:	817b      	strh	r3, [r7, #10]
 800432a:	460b      	mov	r3, r1
 800432c:	813b      	strh	r3, [r7, #8]
 800432e:	4613      	mov	r3, r2
 8004330:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004340:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	2200      	movs	r2, #0
 800434a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fa7c 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00d      	beq.n	8004376 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004368:	d103      	bne.n	8004372 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004370:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e05f      	b.n	8004436 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004376:	897b      	ldrh	r3, [r7, #10]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004384:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	6a3a      	ldr	r2, [r7, #32]
 800438a:	492d      	ldr	r1, [pc, #180]	@ (8004440 <I2C_RequestMemoryWrite+0x128>)
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 fad7 	bl	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e04c      	b.n	8004436 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b4:	6a39      	ldr	r1, [r7, #32]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fb62 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d107      	bne.n	80043da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e02b      	b.n	8004436 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d105      	bne.n	80043f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043e4:	893b      	ldrh	r3, [r7, #8]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	611a      	str	r2, [r3, #16]
 80043ee:	e021      	b.n	8004434 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043f0:	893b      	ldrh	r3, [r7, #8]
 80043f2:	0a1b      	lsrs	r3, r3, #8
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004400:	6a39      	ldr	r1, [r7, #32]
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 fb3c 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00d      	beq.n	800442a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	2b04      	cmp	r3, #4
 8004414:	d107      	bne.n	8004426 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004424:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e005      	b.n	8004436 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800442a:	893b      	ldrh	r3, [r7, #8]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	00010002 	.word	0x00010002

08004444 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af02      	add	r7, sp, #8
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	4608      	mov	r0, r1
 800444e:	4611      	mov	r1, r2
 8004450:	461a      	mov	r2, r3
 8004452:	4603      	mov	r3, r0
 8004454:	817b      	strh	r3, [r7, #10]
 8004456:	460b      	mov	r3, r1
 8004458:	813b      	strh	r3, [r7, #8]
 800445a:	4613      	mov	r3, r2
 800445c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800446c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800447c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	2200      	movs	r2, #0
 8004486:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f9de 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00d      	beq.n	80044b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044a4:	d103      	bne.n	80044ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e0aa      	b.n	8004608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044b2:	897b      	ldrh	r3, [r7, #10]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	6a3a      	ldr	r2, [r7, #32]
 80044c6:	4952      	ldr	r1, [pc, #328]	@ (8004610 <I2C_RequestMemoryRead+0x1cc>)
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fa39 	bl	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e097      	b.n	8004608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f0:	6a39      	ldr	r1, [r7, #32]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 fac4 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00d      	beq.n	800451a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	2b04      	cmp	r3, #4
 8004504:	d107      	bne.n	8004516 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004514:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e076      	b.n	8004608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d105      	bne.n	800452c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004520:	893b      	ldrh	r3, [r7, #8]
 8004522:	b2da      	uxtb	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	611a      	str	r2, [r3, #16]
 800452a:	e021      	b.n	8004570 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800452c:	893b      	ldrh	r3, [r7, #8]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	b29b      	uxth	r3, r3
 8004532:	b2da      	uxtb	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800453a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800453c:	6a39      	ldr	r1, [r7, #32]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fa9e 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00d      	beq.n	8004566 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	2b04      	cmp	r3, #4
 8004550:	d107      	bne.n	8004562 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004560:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e050      	b.n	8004608 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004566:	893b      	ldrh	r3, [r7, #8]
 8004568:	b2da      	uxtb	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004572:	6a39      	ldr	r1, [r7, #32]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fa83 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00d      	beq.n	800459c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004584:	2b04      	cmp	r3, #4
 8004586:	d107      	bne.n	8004598 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004596:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e035      	b.n	8004608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f947 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00d      	beq.n	80045e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045d2:	d103      	bne.n	80045dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e013      	b.n	8004608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045e0:	897b      	ldrh	r3, [r7, #10]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f2:	6a3a      	ldr	r2, [r7, #32]
 80045f4:	4906      	ldr	r1, [pc, #24]	@ (8004610 <I2C_RequestMemoryRead+0x1cc>)
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f9a2 	bl	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	00010002 	.word	0x00010002

08004614 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004620:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004628:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004630:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004646:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004654:	2200      	movs	r2, #0
 8004656:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004668:	7cfb      	ldrb	r3, [r7, #19]
 800466a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800466e:	2b21      	cmp	r3, #33	@ 0x21
 8004670:	d007      	beq.n	8004682 <I2C_DMAXferCplt+0x6e>
 8004672:	7cfb      	ldrb	r3, [r7, #19]
 8004674:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004678:	2b22      	cmp	r3, #34	@ 0x22
 800467a:	d131      	bne.n	80046e0 <I2C_DMAXferCplt+0xcc>
 800467c:	7cbb      	ldrb	r3, [r7, #18]
 800467e:	2b20      	cmp	r3, #32
 8004680:	d12e      	bne.n	80046e0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004690:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2200      	movs	r2, #0
 8004696:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	2b29      	cmp	r3, #41	@ 0x29
 800469c:	d10a      	bne.n	80046b4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2221      	movs	r2, #33	@ 0x21
 80046a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2228      	movs	r2, #40	@ 0x28
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046ac:	6978      	ldr	r0, [r7, #20]
 80046ae:	f7ff fe15 	bl	80042dc <HAL_I2C_SlaveTxCpltCallback>
 80046b2:	e00c      	b.n	80046ce <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80046b8:	d109      	bne.n	80046ce <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2222      	movs	r2, #34	@ 0x22
 80046be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2228      	movs	r2, #40	@ 0x28
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046c8:	6978      	ldr	r0, [r7, #20]
 80046ca:	f7ff fe11 	bl	80042f0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80046dc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80046de:	e074      	b.n	80047ca <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d06e      	beq.n	80047ca <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d107      	bne.n	8004706 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004704:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004714:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800471c:	d009      	beq.n	8004732 <I2C_DMAXferCplt+0x11e>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d006      	beq.n	8004732 <I2C_DMAXferCplt+0x11e>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800472a:	d002      	beq.n	8004732 <I2C_DMAXferCplt+0x11e>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b20      	cmp	r3, #32
 8004730:	d107      	bne.n	8004742 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004740:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004750:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004760:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2200      	movs	r2, #0
 8004766:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004770:	6978      	ldr	r0, [r7, #20]
 8004772:	f7ff fdc7 	bl	8004304 <HAL_I2C_ErrorCallback>
}
 8004776:	e028      	b.n	80047ca <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b40      	cmp	r3, #64	@ 0x40
 800478a:	d10a      	bne.n	80047a2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2200      	movs	r2, #0
 8004798:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800479a:	6978      	ldr	r0, [r7, #20]
 800479c:	f7fd fdf8 	bl	8002390 <HAL_I2C_MemRxCpltCallback>
}
 80047a0:	e013      	b.n	80047ca <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d002      	beq.n	80047b6 <I2C_DMAXferCplt+0x1a2>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d103      	bne.n	80047be <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80047bc:	e002      	b.n	80047c4 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2212      	movs	r2, #18
 80047c2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80047c4:	6978      	ldr	r0, [r7, #20]
 80047c6:	f7ff fd7f 	bl	80042c8 <HAL_I2C_MasterRxCpltCallback>
}
 80047ca:	bf00      	nop
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047de:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ec:	2200      	movs	r2, #0
 80047ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fc:	2200      	movs	r2, #0
 80047fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7fe fcd9 	bl	80031b8 <HAL_DMA_GetError>
 8004806:	4603      	mov	r3, r0
 8004808:	2b02      	cmp	r3, #2
 800480a:	d01b      	beq.n	8004844 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800481a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	f043 0210 	orr.w	r2, r3, #16
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f7ff fd60 	bl	8004304 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800485c:	e048      	b.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d044      	beq.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004866:	f7fe f8b3 	bl	80029d0 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d302      	bcc.n	800487c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d139      	bne.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	0c1b      	lsrs	r3, r3, #16
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d10d      	bne.n	80048a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	43da      	mvns	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4013      	ands	r3, r2
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	e00c      	b.n	80048bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	43da      	mvns	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4013      	ands	r3, r2
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d116      	bne.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e023      	b.n	8004938 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	0c1b      	lsrs	r3, r3, #16
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d10d      	bne.n	8004916 <I2C_WaitOnFlagUntilTimeout+0xca>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	43da      	mvns	r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4013      	ands	r3, r2
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	bf0c      	ite	eq
 800490c:	2301      	moveq	r3, #1
 800490e:	2300      	movne	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	e00c      	b.n	8004930 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	43da      	mvns	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4013      	ands	r3, r2
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	bf0c      	ite	eq
 8004928:	2301      	moveq	r3, #1
 800492a:	2300      	movne	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	461a      	mov	r2, r3
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	429a      	cmp	r2, r3
 8004934:	d093      	beq.n	800485e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800494e:	e071      	b.n	8004a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495e:	d123      	bne.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800496e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004978:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	f043 0204 	orr.w	r2, r3, #4
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e067      	b.n	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d041      	beq.n	8004a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b0:	f7fe f80e 	bl	80029d0 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d302      	bcc.n	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d136      	bne.n	8004a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d10c      	bne.n	80049ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	43da      	mvns	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4013      	ands	r3, r2
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	bf14      	ite	ne
 80049e2:	2301      	movne	r3, #1
 80049e4:	2300      	moveq	r3, #0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	e00b      	b.n	8004a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	43da      	mvns	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4013      	ands	r3, r2
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf14      	ite	ne
 80049fc:	2301      	movne	r3, #1
 80049fe:	2300      	moveq	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d016      	beq.n	8004a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e021      	b.n	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	0c1b      	lsrs	r3, r3, #16
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d10c      	bne.n	8004a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	43da      	mvns	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf14      	ite	ne
 8004a50:	2301      	movne	r3, #1
 8004a52:	2300      	moveq	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e00b      	b.n	8004a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	43da      	mvns	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bf14      	ite	ne
 8004a6a:	2301      	movne	r3, #1
 8004a6c:	2300      	moveq	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f47f af6d 	bne.w	8004950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a8c:	e034      	b.n	8004af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f8e3 	bl	8004c5a <I2C_IsAcknowledgeFailed>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e034      	b.n	8004b08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d028      	beq.n	8004af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa6:	f7fd ff93 	bl	80029d0 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d302      	bcc.n	8004abc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d11d      	bne.n	8004af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac6:	2b80      	cmp	r3, #128	@ 0x80
 8004ac8:	d016      	beq.n	8004af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae4:	f043 0220 	orr.w	r2, r3, #32
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e007      	b.n	8004b08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b02:	2b80      	cmp	r3, #128	@ 0x80
 8004b04:	d1c3      	bne.n	8004a8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b1c:	e034      	b.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f89b 	bl	8004c5a <I2C_IsAcknowledgeFailed>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e034      	b.n	8004b98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b34:	d028      	beq.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b36:	f7fd ff4b 	bl	80029d0 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d11d      	bne.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d016      	beq.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	f043 0220 	orr.w	r2, r3, #32
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e007      	b.n	8004b98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d1c3      	bne.n	8004b1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bac:	e049      	b.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d119      	bne.n	8004bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0210 	mvn.w	r2, #16
 8004bc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e030      	b.n	8004c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf0:	f7fd feee 	bl	80029d0 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d302      	bcc.n	8004c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d11d      	bne.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c10:	2b40      	cmp	r3, #64	@ 0x40
 8004c12:	d016      	beq.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e007      	b.n	8004c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4c:	2b40      	cmp	r3, #64	@ 0x40
 8004c4e:	d1ae      	bne.n	8004bae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c70:	d11b      	bne.n	8004caa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f043 0204 	orr.w	r2, r3, #4
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e101      	b.n	8004ece <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d106      	bne.n	8004cea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f005 fbdd 	bl	800a4a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2203      	movs	r2, #3
 8004cee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cf8:	d102      	bne.n	8004d00 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 ffc4 	bl	8006c92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	7c1a      	ldrb	r2, [r3, #16]
 8004d12:	f88d 2000 	strb.w	r2, [sp]
 8004d16:	3304      	adds	r3, #4
 8004d18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d1a:	f001 fea3 	bl	8006a64 <USB_CoreInit>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0ce      	b.n	8004ece <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2100      	movs	r1, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 ffbc 	bl	8006cb4 <USB_SetCurrentMode>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e0bf      	b.n	8004ece <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d4e:	2300      	movs	r3, #0
 8004d50:	73fb      	strb	r3, [r7, #15]
 8004d52:	e04a      	b.n	8004dea <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d54:	7bfa      	ldrb	r2, [r7, #15]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	3315      	adds	r3, #21
 8004d64:	2201      	movs	r2, #1
 8004d66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d68:	7bfa      	ldrb	r2, [r7, #15]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	3314      	adds	r3, #20
 8004d78:	7bfa      	ldrb	r2, [r7, #15]
 8004d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d7c:	7bfa      	ldrb	r2, [r7, #15]
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	b298      	uxth	r0, r3
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	332e      	adds	r3, #46	@ 0x2e
 8004d90:	4602      	mov	r2, r0
 8004d92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d94:	7bfa      	ldrb	r2, [r7, #15]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	3318      	adds	r3, #24
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004da8:	7bfa      	ldrb	r2, [r7, #15]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	331c      	adds	r3, #28
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004dbc:	7bfa      	ldrb	r2, [r7, #15]
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	3320      	adds	r3, #32
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004dd0:	7bfa      	ldrb	r2, [r7, #15]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	3324      	adds	r3, #36	@ 0x24
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	3301      	adds	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	791b      	ldrb	r3, [r3, #4]
 8004dee:	7bfa      	ldrb	r2, [r7, #15]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d3af      	bcc.n	8004d54 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004df4:	2300      	movs	r3, #0
 8004df6:	73fb      	strb	r3, [r7, #15]
 8004df8:	e044      	b.n	8004e84 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004dfa:	7bfa      	ldrb	r2, [r7, #15]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e26:	7bfa      	ldrb	r2, [r7, #15]
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e3c:	7bfa      	ldrb	r2, [r7, #15]
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e52:	7bfa      	ldrb	r2, [r7, #15]
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e68:	7bfa      	ldrb	r2, [r7, #15]
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	3301      	adds	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	791b      	ldrb	r3, [r3, #4]
 8004e88:	7bfa      	ldrb	r2, [r7, #15]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d3b5      	bcc.n	8004dfa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	7c1a      	ldrb	r2, [r3, #16]
 8004e96:	f88d 2000 	strb.w	r2, [sp]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e9e:	f001 ff55 	bl	8006d4c <USB_DevInit>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e00c      	b.n	8004ece <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f002 ff9f 	bl	8007e0a <USB_DevDisconnect>

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_PCD_Start+0x1c>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e022      	b.n	8004f38 <HAL_PCD_Start+0x62>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d105      	bne.n	8004f1a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f12:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f001 fea6 	bl	8006c70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f002 ff4d 	bl	8007dc8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f40:	b590      	push	{r4, r7, lr}
 8004f42:	b08d      	sub	sp, #52	@ 0x34
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f003 f80b 	bl	8007f72 <USB_GetMode>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f040 848c 	bne.w	800587c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f002 ff6f 	bl	8007e4c <USB_ReadInterrupts>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8482 	beq.w	800587a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	0a1b      	lsrs	r3, r3, #8
 8004f80:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f002 ff5c 	bl	8007e4c <USB_ReadInterrupts>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d107      	bne.n	8004fae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f002 0202 	and.w	r2, r2, #2
 8004fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f002 ff4a 	bl	8007e4c <USB_ReadInterrupts>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d161      	bne.n	8005086 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699a      	ldr	r2, [r3, #24]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0210 	bic.w	r2, r2, #16
 8004fd0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	f003 020f 	and.w	r2, r3, #15
 8004fde:	4613      	mov	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	3304      	adds	r3, #4
 8004ff0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	0c5b      	lsrs	r3, r3, #17
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d124      	bne.n	8005048 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005004:	4013      	ands	r3, r2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d035      	beq.n	8005076 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	091b      	lsrs	r3, r3, #4
 8005012:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005014:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005018:	b29b      	uxth	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	6a38      	ldr	r0, [r7, #32]
 800501e:	f002 fd81 	bl	8007b24 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800502e:	441a      	add	r2, r3
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	091b      	lsrs	r3, r3, #4
 800503c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005040:	441a      	add	r2, r3
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	615a      	str	r2, [r3, #20]
 8005046:	e016      	b.n	8005076 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	0c5b      	lsrs	r3, r3, #17
 800504c:	f003 030f 	and.w	r3, r3, #15
 8005050:	2b06      	cmp	r3, #6
 8005052:	d110      	bne.n	8005076 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800505a:	2208      	movs	r2, #8
 800505c:	4619      	mov	r1, r3
 800505e:	6a38      	ldr	r0, [r7, #32]
 8005060:	f002 fd60 	bl	8007b24 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	091b      	lsrs	r3, r3, #4
 800506c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005070:	441a      	add	r2, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0210 	orr.w	r2, r2, #16
 8005084:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f002 fede 	bl	8007e4c <USB_ReadInterrupts>
 8005090:	4603      	mov	r3, r0
 8005092:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005096:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800509a:	f040 80a7 	bne.w	80051ec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f002 fee3 	bl	8007e72 <USB_ReadDevAllOutEpInterrupt>
 80050ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80050ae:	e099      	b.n	80051e4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80050b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 808e 	beq.w	80051d8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	4611      	mov	r1, r2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f002 ff07 	bl	8007eda <USB_ReadDevOutEPInterrupt>
 80050cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00c      	beq.n	80050f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e4:	461a      	mov	r2, r3
 80050e6:	2301      	movs	r3, #1
 80050e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80050ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fea3 	bl	8005e38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00c      	beq.n	8005116 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005108:	461a      	mov	r2, r3
 800510a:	2308      	movs	r3, #8
 800510c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800510e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 ff79 	bl	8006008 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b00      	cmp	r3, #0
 800511e:	d008      	beq.n	8005132 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800512c:	461a      	mov	r2, r3
 800512e:	2310      	movs	r3, #16
 8005130:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d030      	beq.n	800519e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005144:	2b80      	cmp	r3, #128	@ 0x80
 8005146:	d109      	bne.n	800515c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005156:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800515a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800515c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800515e:	4613      	mov	r3, r2
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	4413      	add	r3, r2
 800516e:	3304      	adds	r3, #4
 8005170:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	78db      	ldrb	r3, [r3, #3]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d108      	bne.n	800518c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2200      	movs	r2, #0
 800517e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	b2db      	uxtb	r3, r3
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f005 fa92 	bl	800a6b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005198:	461a      	mov	r2, r3
 800519a:	2302      	movs	r3, #2
 800519c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b4:	461a      	mov	r2, r3
 80051b6:	2320      	movs	r3, #32
 80051b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d009      	beq.n	80051d8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d0:	461a      	mov	r2, r3
 80051d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	3301      	adds	r3, #1
 80051dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80051de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e0:	085b      	lsrs	r3, r3, #1
 80051e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80051e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f47f af62 	bne.w	80050b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f002 fe2b 	bl	8007e4c <USB_ReadInterrupts>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005200:	f040 80db 	bne.w	80053ba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f002 fe4c 	bl	8007ea6 <USB_ReadDevAllInEpInterrupt>
 800520e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005214:	e0cd      	b.n	80053b2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80c2 	beq.w	80053a6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	4611      	mov	r1, r2
 800522c:	4618      	mov	r0, r3
 800522e:	f002 fe72 	bl	8007f16 <USB_ReadDevInEPInterrupt>
 8005232:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d057      	beq.n	80052ee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	2201      	movs	r2, #1
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005252:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	43db      	mvns	r3, r3
 8005258:	69f9      	ldr	r1, [r7, #28]
 800525a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800525e:	4013      	ands	r3, r2
 8005260:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800526e:	461a      	mov	r2, r3
 8005270:	2301      	movs	r3, #1
 8005272:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	799b      	ldrb	r3, [r3, #6]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d132      	bne.n	80052e2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005280:	4613      	mov	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	3320      	adds	r3, #32
 800528c:	6819      	ldr	r1, [r3, #0]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4403      	add	r3, r0
 800529c:	331c      	adds	r3, #28
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4419      	add	r1, r3
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a6:	4613      	mov	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4403      	add	r3, r0
 80052b0:	3320      	adds	r3, #32
 80052b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d113      	bne.n	80052e2 <HAL_PCD_IRQHandler+0x3a2>
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052be:	4613      	mov	r3, r2
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	4413      	add	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	440b      	add	r3, r1
 80052c8:	3324      	adds	r3, #36	@ 0x24
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d108      	bne.n	80052e2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80052da:	461a      	mov	r2, r3
 80052dc:	2101      	movs	r1, #1
 80052de:	f002 fe79 	bl	8007fd4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80052e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	4619      	mov	r1, r3
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f005 f95c 	bl	800a5a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80052f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005304:	461a      	mov	r2, r3
 8005306:	2308      	movs	r3, #8
 8005308:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b00      	cmp	r3, #0
 8005312:	d008      	beq.n	8005326 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005320:	461a      	mov	r2, r3
 8005322:	2310      	movs	r3, #16
 8005324:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d008      	beq.n	8005342 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800533c:	461a      	mov	r2, r3
 800533e:	2340      	movs	r3, #64	@ 0x40
 8005340:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d023      	beq.n	8005394 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800534c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800534e:	6a38      	ldr	r0, [r7, #32]
 8005350:	f001 fe60 	bl	8007014 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005356:	4613      	mov	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	3310      	adds	r3, #16
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	4413      	add	r3, r2
 8005364:	3304      	adds	r3, #4
 8005366:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	78db      	ldrb	r3, [r3, #3]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d108      	bne.n	8005382 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2200      	movs	r2, #0
 8005374:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	b2db      	uxtb	r3, r3
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f005 f9a9 	bl	800a6d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538e:	461a      	mov	r2, r3
 8005390:	2302      	movs	r3, #2
 8005392:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800539e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fcbd 	bl	8005d20 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	3301      	adds	r3, #1
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80053ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80053b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f47f af2e 	bne.w	8005216 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f002 fd44 	bl	8007e4c <USB_ReadInterrupts>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053ce:	d122      	bne.n	8005416 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053de:	f023 0301 	bic.w	r3, r3, #1
 80053e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d108      	bne.n	8005400 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80053f6:	2100      	movs	r1, #0
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fea3 	bl	8006144 <HAL_PCDEx_LPM_Callback>
 80053fe:	e002      	b.n	8005406 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f005 f947 	bl	800a694 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695a      	ldr	r2, [r3, #20]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005414:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f002 fd16 	bl	8007e4c <USB_ReadInterrupts>
 8005420:	4603      	mov	r3, r0
 8005422:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800542a:	d112      	bne.n	8005452 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b01      	cmp	r3, #1
 800543a:	d102      	bne.n	8005442 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f005 f903 	bl	800a648 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695a      	ldr	r2, [r3, #20]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005450:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f002 fcf8 	bl	8007e4c <USB_ReadInterrupts>
 800545c:	4603      	mov	r3, r0
 800545e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005466:	f040 80b7 	bne.w	80055d8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005478:	f023 0301 	bic.w	r3, r3, #1
 800547c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2110      	movs	r1, #16
 8005484:	4618      	mov	r0, r3
 8005486:	f001 fdc5 	bl	8007014 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800548a:	2300      	movs	r3, #0
 800548c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800548e:	e046      	b.n	800551e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800549c:	461a      	mov	r2, r3
 800549e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b4:	0151      	lsls	r1, r2, #5
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	440a      	add	r2, r1
 80054ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80054c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d0:	461a      	mov	r2, r3
 80054d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054e8:	0151      	lsls	r1, r2, #5
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	440a      	add	r2, r1
 80054ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005508:	0151      	lsls	r1, r2, #5
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	440a      	add	r2, r1
 800550e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005512:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005516:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551a:	3301      	adds	r3, #1
 800551c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	791b      	ldrb	r3, [r3, #4]
 8005522:	461a      	mov	r2, r3
 8005524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005526:	4293      	cmp	r3, r2
 8005528:	d3b2      	bcc.n	8005490 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005538:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800553c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	7bdb      	ldrb	r3, [r3, #15]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d016      	beq.n	8005574 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800554c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005556:	f043 030b 	orr.w	r3, r3, #11
 800555a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800556c:	f043 030b 	orr.w	r3, r3, #11
 8005570:	6453      	str	r3, [r2, #68]	@ 0x44
 8005572:	e015      	b.n	80055a0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	69fa      	ldr	r2, [r7, #28]
 800557e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005582:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005586:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800558a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800559a:	f043 030b 	orr.w	r3, r3, #11
 800559e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80055b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055c2:	461a      	mov	r2, r3
 80055c4:	f002 fd06 	bl	8007fd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80055d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	f002 fc35 	bl	8007e4c <USB_ReadInterrupts>
 80055e2:	4603      	mov	r3, r0
 80055e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ec:	d123      	bne.n	8005636 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f002 fccb 	bl	8007f8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f001 fd82 	bl	8007106 <USB_GetDevSpeed>
 8005602:	4603      	mov	r3, r0
 8005604:	461a      	mov	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681c      	ldr	r4, [r3, #0]
 800560e:	f001 fa09 	bl	8006a24 <HAL_RCC_GetHCLKFreq>
 8005612:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005618:	461a      	mov	r2, r3
 800561a:	4620      	mov	r0, r4
 800561c:	f001 fa86 	bl	8006b2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f004 ffe8 	bl	800a5f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695a      	ldr	r2, [r3, #20]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005634:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f002 fc06 	bl	8007e4c <USB_ReadInterrupts>
 8005640:	4603      	mov	r3, r0
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b08      	cmp	r3, #8
 8005648:	d10a      	bne.n	8005660 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f004 ffc5 	bl	800a5da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695a      	ldr	r2, [r3, #20]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f002 0208 	and.w	r2, r2, #8
 800565e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f002 fbf1 	bl	8007e4c <USB_ReadInterrupts>
 800566a:	4603      	mov	r3, r0
 800566c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005670:	2b80      	cmp	r3, #128	@ 0x80
 8005672:	d123      	bne.n	80056bc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005680:	2301      	movs	r3, #1
 8005682:	627b      	str	r3, [r7, #36]	@ 0x24
 8005684:	e014      	b.n	80056b0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800568a:	4613      	mov	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d105      	bne.n	80056aa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fb0a 	bl	8005cbe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	3301      	adds	r3, #1
 80056ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	791b      	ldrb	r3, [r3, #4]
 80056b4:	461a      	mov	r2, r3
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d3e4      	bcc.n	8005686 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f002 fbc3 	bl	8007e4c <USB_ReadInterrupts>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056d0:	d13c      	bne.n	800574c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056d2:	2301      	movs	r3, #1
 80056d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d6:	e02b      	b.n	8005730 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80056d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ec:	4613      	mov	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	3318      	adds	r3, #24
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d115      	bne.n	800572a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80056fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005700:	2b00      	cmp	r3, #0
 8005702:	da12      	bge.n	800572a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005708:	4613      	mov	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	3317      	adds	r3, #23
 8005714:	2201      	movs	r2, #1
 8005716:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005720:	b2db      	uxtb	r3, r3
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 faca 	bl	8005cbe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	3301      	adds	r3, #1
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	791b      	ldrb	r3, [r3, #4]
 8005734:	461a      	mov	r2, r3
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	4293      	cmp	r3, r2
 800573a:	d3cd      	bcc.n	80056d8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695a      	ldr	r2, [r3, #20]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800574a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f002 fb7b 	bl	8007e4c <USB_ReadInterrupts>
 8005756:	4603      	mov	r3, r0
 8005758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800575c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005760:	d156      	bne.n	8005810 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005762:	2301      	movs	r3, #1
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
 8005766:	e045      	b.n	80057f4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d12e      	bne.n	80057ee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005790:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005792:	2b00      	cmp	r3, #0
 8005794:	da2b      	bge.n	80057ee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80057a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d121      	bne.n	80057ee <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ae:	4613      	mov	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80057bc:	2201      	movs	r2, #1
 80057be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057ea:	6053      	str	r3, [r2, #4]
            break;
 80057ec:	e008      	b.n	8005800 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	3301      	adds	r3, #1
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	791b      	ldrb	r3, [r3, #4]
 80057f8:	461a      	mov	r2, r3
 80057fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d3b3      	bcc.n	8005768 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695a      	ldr	r2, [r3, #20]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800580e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f002 fb19 	bl	8007e4c <USB_ReadInterrupts>
 800581a:	4603      	mov	r3, r0
 800581c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005824:	d10a      	bne.n	800583c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f004 ff66 	bl	800a6f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695a      	ldr	r2, [r3, #20]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800583a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4618      	mov	r0, r3
 8005842:	f002 fb03 	bl	8007e4c <USB_ReadInterrupts>
 8005846:	4603      	mov	r3, r0
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b04      	cmp	r3, #4
 800584e:	d115      	bne.n	800587c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f004 ff56 	bl	800a714 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	430a      	orrs	r2, r1
 8005876:	605a      	str	r2, [r3, #4]
 8005878:	e000      	b.n	800587c <HAL_PCD_IRQHandler+0x93c>
      return;
 800587a:	bf00      	nop
    }
  }
}
 800587c:	3734      	adds	r7, #52	@ 0x34
 800587e:	46bd      	mov	sp, r7
 8005880:	bd90      	pop	{r4, r7, pc}

08005882 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b082      	sub	sp, #8
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	460b      	mov	r3, r1
 800588c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_PCD_SetAddress+0x1a>
 8005898:	2302      	movs	r3, #2
 800589a:	e012      	b.n	80058c2 <HAL_PCD_SetAddress+0x40>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	78fa      	ldrb	r2, [r7, #3]
 80058a8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	78fa      	ldrb	r2, [r7, #3]
 80058b0:	4611      	mov	r1, r2
 80058b2:	4618      	mov	r0, r3
 80058b4:	f002 fa62 	bl	8007d7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	4608      	mov	r0, r1
 80058d4:	4611      	mov	r1, r2
 80058d6:	461a      	mov	r2, r3
 80058d8:	4603      	mov	r3, r0
 80058da:	70fb      	strb	r3, [r7, #3]
 80058dc:	460b      	mov	r3, r1
 80058de:	803b      	strh	r3, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	da0f      	bge.n	8005910 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058f0:	78fb      	ldrb	r3, [r7, #3]
 80058f2:	f003 020f 	and.w	r2, r3, #15
 80058f6:	4613      	mov	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	3310      	adds	r3, #16
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	4413      	add	r3, r2
 8005904:	3304      	adds	r3, #4
 8005906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	705a      	strb	r2, [r3, #1]
 800590e:	e00f      	b.n	8005930 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	f003 020f 	and.w	r2, r3, #15
 8005916:	4613      	mov	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	4413      	add	r3, r2
 8005926:	3304      	adds	r3, #4
 8005928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	b2da      	uxtb	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800593c:	883b      	ldrh	r3, [r7, #0]
 800593e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	78ba      	ldrb	r2, [r7, #2]
 800594a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	785b      	ldrb	r3, [r3, #1]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d004      	beq.n	800595e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800595e:	78bb      	ldrb	r3, [r7, #2]
 8005960:	2b02      	cmp	r3, #2
 8005962:	d102      	bne.n	800596a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_PCD_EP_Open+0xae>
 8005974:	2302      	movs	r3, #2
 8005976:	e00e      	b.n	8005996 <HAL_PCD_EP_Open+0xcc>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68f9      	ldr	r1, [r7, #12]
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fbe2 	bl	8007150 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005994:	7afb      	ldrb	r3, [r7, #11]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	460b      	mov	r3, r1
 80059a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	da0f      	bge.n	80059d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	4613      	mov	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	3310      	adds	r3, #16
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	4413      	add	r3, r2
 80059c6:	3304      	adds	r3, #4
 80059c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	705a      	strb	r2, [r3, #1]
 80059d0:	e00f      	b.n	80059f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059d2:	78fb      	ldrb	r3, [r7, #3]
 80059d4:	f003 020f 	and.w	r2, r3, #15
 80059d8:	4613      	mov	r3, r2
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	4413      	add	r3, r2
 80059e8:	3304      	adds	r3, #4
 80059ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80059f2:	78fb      	ldrb	r3, [r7, #3]
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_PCD_EP_Close+0x6e>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e00e      	b.n	8005a2a <HAL_PCD_EP_Close+0x8c>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68f9      	ldr	r1, [r7, #12]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f001 fc20 	bl	8007260 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b086      	sub	sp, #24
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a42:	7afb      	ldrb	r3, [r7, #11]
 8005a44:	f003 020f 	and.w	r2, r3, #15
 8005a48:	4613      	mov	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	3304      	adds	r3, #4
 8005a5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2200      	movs	r2, #0
 8005a72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a74:	7afb      	ldrb	r3, [r7, #11]
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	799b      	ldrb	r3, [r3, #6]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d102      	bne.n	8005a8e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	799b      	ldrb	r3, [r3, #6]
 8005a96:	461a      	mov	r2, r3
 8005a98:	6979      	ldr	r1, [r7, #20]
 8005a9a:	f001 fcbd 	bl	8007418 <USB_EPStartXfer>

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	f003 020f 	and.w	r2, r3, #15
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005aca:	681b      	ldr	r3, [r3, #0]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	607a      	str	r2, [r7, #4]
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ae8:	7afb      	ldrb	r3, [r7, #11]
 8005aea:	f003 020f 	and.w	r2, r3, #15
 8005aee:	4613      	mov	r3, r2
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	3310      	adds	r3, #16
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	3304      	adds	r3, #4
 8005afe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2201      	movs	r2, #1
 8005b16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b18:	7afb      	ldrb	r3, [r7, #11]
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	799b      	ldrb	r3, [r3, #6]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d102      	bne.n	8005b32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	799b      	ldrb	r3, [r3, #6]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6979      	ldr	r1, [r7, #20]
 8005b3e:	f001 fc6b 	bl	8007418 <USB_EPStartXfer>

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	7912      	ldrb	r2, [r2, #4]
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d901      	bls.n	8005b6a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e04f      	b.n	8005c0a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	da0f      	bge.n	8005b92 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b72:	78fb      	ldrb	r3, [r7, #3]
 8005b74:	f003 020f 	and.w	r2, r3, #15
 8005b78:	4613      	mov	r3, r2
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	3310      	adds	r3, #16
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	4413      	add	r3, r2
 8005b86:	3304      	adds	r3, #4
 8005b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	705a      	strb	r2, [r3, #1]
 8005b90:	e00d      	b.n	8005bae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b92:	78fa      	ldrb	r2, [r7, #3]
 8005b94:	4613      	mov	r3, r2
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_PCD_EP_SetStall+0x82>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e01d      	b.n	8005c0a <HAL_PCD_EP_SetStall+0xbe>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68f9      	ldr	r1, [r7, #12]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 fff9 	bl	8007bd4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d109      	bne.n	8005c00 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6818      	ldr	r0, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	7999      	ldrb	r1, [r3, #6]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f002 f9ea 	bl	8007fd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	7912      	ldrb	r2, [r2, #4]
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d901      	bls.n	8005c30 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e042      	b.n	8005cb6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	da0f      	bge.n	8005c58 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	f003 020f 	and.w	r2, r3, #15
 8005c3e:	4613      	mov	r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	3310      	adds	r3, #16
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	705a      	strb	r2, [r3, #1]
 8005c56:	e00f      	b.n	8005c78 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	f003 020f 	and.w	r2, r3, #15
 8005c5e:	4613      	mov	r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3304      	adds	r3, #4
 8005c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c7e:	78fb      	ldrb	r3, [r7, #3]
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_PCD_EP_ClrStall+0x86>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e00e      	b.n	8005cb6 <HAL_PCD_EP_ClrStall+0xa4>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68f9      	ldr	r1, [r7, #12]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f002 f802 	bl	8007cb0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	da0c      	bge.n	8005cec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	f003 020f 	and.w	r2, r3, #15
 8005cd8:	4613      	mov	r3, r2
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	4413      	add	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	3310      	adds	r3, #16
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	e00c      	b.n	8005d06 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	f003 020f 	and.w	r2, r3, #15
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	4413      	add	r3, r2
 8005d02:	3304      	adds	r3, #4
 8005d04:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68f9      	ldr	r1, [r7, #12]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 fe21 	bl	8007954 <USB_EPStopXfer>
 8005d12:	4603      	mov	r3, r0
 8005d14:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005d16:	7afb      	ldrb	r3, [r7, #11]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08a      	sub	sp, #40	@ 0x28
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	4613      	mov	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	3310      	adds	r3, #16
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	4413      	add	r3, r2
 8005d44:	3304      	adds	r3, #4
 8005d46:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	695a      	ldr	r2, [r3, #20]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d901      	bls.n	8005d58 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e06b      	b.n	8005e30 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d902      	bls.n	8005d74 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	3303      	adds	r3, #3
 8005d78:	089b      	lsrs	r3, r3, #2
 8005d7a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d7c:	e02a      	b.n	8005dd4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d902      	bls.n	8005d9a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	3303      	adds	r3, #3
 8005d9e:	089b      	lsrs	r3, r3, #2
 8005da0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	68d9      	ldr	r1, [r3, #12]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	4603      	mov	r3, r0
 8005db6:	6978      	ldr	r0, [r7, #20]
 8005db8:	f001 fe76 	bl	8007aa8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	441a      	add	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	695a      	ldr	r2, [r3, #20]
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	441a      	add	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d809      	bhi.n	8005dfe <PCD_WriteEmptyTxFifo+0xde>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	695a      	ldr	r2, [r3, #20]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d203      	bcs.n	8005dfe <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1bf      	bne.n	8005d7e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d811      	bhi.n	8005e2e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	2201      	movs	r2, #1
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	43db      	mvns	r3, r3
 8005e24:	6939      	ldr	r1, [r7, #16]
 8005e26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	333c      	adds	r3, #60	@ 0x3c
 8005e50:	3304      	adds	r3, #4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	799b      	ldrb	r3, [r3, #6]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d17b      	bne.n	8005f66 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d015      	beq.n	8005ea4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	4a61      	ldr	r2, [pc, #388]	@ (8006000 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	f240 80b9 	bls.w	8005ff4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 80b3 	beq.w	8005ff4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ea0:	6093      	str	r3, [r2, #8]
 8005ea2:	e0a7      	b.n	8005ff4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eba:	461a      	mov	r2, r3
 8005ebc:	2320      	movs	r3, #32
 8005ebe:	6093      	str	r3, [r2, #8]
 8005ec0:	e098      	b.n	8005ff4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f040 8093 	bne.w	8005ff4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	4a4b      	ldr	r2, [pc, #300]	@ (8006000 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d90f      	bls.n	8005ef6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eec:	461a      	mov	r2, r3
 8005eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ef2:	6093      	str	r3, [r2, #8]
 8005ef4:	e07e      	b.n	8005ff4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	4413      	add	r3, r2
 8005f08:	3304      	adds	r3, #4
 8005f0a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a1a      	ldr	r2, [r3, #32]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	0159      	lsls	r1, r3, #5
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	440b      	add	r3, r1
 8005f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f22:	1ad2      	subs	r2, r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d114      	bne.n	8005f58 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f40:	461a      	mov	r2, r3
 8005f42:	2101      	movs	r1, #1
 8005f44:	f002 f846 	bl	8007fd4 <USB_EP0_OutStart>
 8005f48:	e006      	b.n	8005f58 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	441a      	add	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f004 fb06 	bl	800a570 <HAL_PCD_DataOutStageCallback>
 8005f64:	e046      	b.n	8005ff4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	4a26      	ldr	r2, [pc, #152]	@ (8006004 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d124      	bne.n	8005fb8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f84:	461a      	mov	r2, r3
 8005f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f8a:	6093      	str	r3, [r2, #8]
 8005f8c:	e032      	b.n	8005ff4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d008      	beq.n	8005faa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	2320      	movs	r3, #32
 8005fa8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f004 fadd 	bl	800a570 <HAL_PCD_DataOutStageCallback>
 8005fb6:	e01d      	b.n	8005ff4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d114      	bne.n	8005fe8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d108      	bne.n	8005fe8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	f001 fff6 	bl	8007fd4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f004 fabe 	bl	800a570 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3720      	adds	r7, #32
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	4f54300a 	.word	0x4f54300a
 8006004:	4f54310a 	.word	0x4f54310a

08006008 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	333c      	adds	r3, #60	@ 0x3c
 8006020:	3304      	adds	r3, #4
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4a15      	ldr	r2, [pc, #84]	@ (8006090 <PCD_EP_OutSetupPacket_int+0x88>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d90e      	bls.n	800605c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006044:	2b00      	cmp	r3, #0
 8006046:	d009      	beq.n	800605c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006054:	461a      	mov	r2, r3
 8006056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800605a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f004 fa75 	bl	800a54c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a0a      	ldr	r2, [pc, #40]	@ (8006090 <PCD_EP_OutSetupPacket_int+0x88>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d90c      	bls.n	8006084 <PCD_EP_OutSetupPacket_int+0x7c>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	799b      	ldrb	r3, [r3, #6]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d108      	bne.n	8006084 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800607c:	461a      	mov	r2, r3
 800607e:	2101      	movs	r1, #1
 8006080:	f001 ffa8 	bl	8007fd4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	4f54300a 	.word	0x4f54300a

08006094 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	460b      	mov	r3, r1
 800609e:	70fb      	strb	r3, [r7, #3]
 80060a0:	4613      	mov	r3, r2
 80060a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d107      	bne.n	80060c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80060b2:	883b      	ldrh	r3, [r7, #0]
 80060b4:	0419      	lsls	r1, r3, #16
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	430a      	orrs	r2, r1
 80060be:	629a      	str	r2, [r3, #40]	@ 0x28
 80060c0:	e028      	b.n	8006114 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c8:	0c1b      	lsrs	r3, r3, #16
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	4413      	add	r3, r2
 80060ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80060d0:	2300      	movs	r3, #0
 80060d2:	73fb      	strb	r3, [r7, #15]
 80060d4:	e00d      	b.n	80060f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	3340      	adds	r3, #64	@ 0x40
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	0c1b      	lsrs	r3, r3, #16
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	4413      	add	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	3301      	adds	r3, #1
 80060f0:	73fb      	strb	r3, [r7, #15]
 80060f2:	7bfa      	ldrb	r2, [r7, #15]
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d3ec      	bcc.n	80060d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80060fc:	883b      	ldrh	r3, [r7, #0]
 80060fe:	0418      	lsls	r0, r3, #16
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6819      	ldr	r1, [r3, #0]
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	3b01      	subs	r3, #1
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	4302      	orrs	r2, r0
 800610c:	3340      	adds	r3, #64	@ 0x40
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	887a      	ldrh	r2, [r7, #2]
 8006134:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e267      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d075      	beq.n	8006266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800617a:	4b88      	ldr	r3, [pc, #544]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 030c 	and.w	r3, r3, #12
 8006182:	2b04      	cmp	r3, #4
 8006184:	d00c      	beq.n	80061a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006186:	4b85      	ldr	r3, [pc, #532]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800618e:	2b08      	cmp	r3, #8
 8006190:	d112      	bne.n	80061b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006192:	4b82      	ldr	r3, [pc, #520]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800619a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800619e:	d10b      	bne.n	80061b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061a0:	4b7e      	ldr	r3, [pc, #504]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d05b      	beq.n	8006264 <HAL_RCC_OscConfig+0x108>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d157      	bne.n	8006264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e242      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061c0:	d106      	bne.n	80061d0 <HAL_RCC_OscConfig+0x74>
 80061c2:	4b76      	ldr	r3, [pc, #472]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a75      	ldr	r2, [pc, #468]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 80061c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	e01d      	b.n	800620c <HAL_RCC_OscConfig+0xb0>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061d8:	d10c      	bne.n	80061f4 <HAL_RCC_OscConfig+0x98>
 80061da:	4b70      	ldr	r3, [pc, #448]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a6f      	ldr	r2, [pc, #444]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 80061e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	4b6d      	ldr	r3, [pc, #436]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a6c      	ldr	r2, [pc, #432]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 80061ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	e00b      	b.n	800620c <HAL_RCC_OscConfig+0xb0>
 80061f4:	4b69      	ldr	r3, [pc, #420]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a68      	ldr	r2, [pc, #416]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 80061fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	4b66      	ldr	r3, [pc, #408]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a65      	ldr	r2, [pc, #404]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 8006206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800620a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d013      	beq.n	800623c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006214:	f7fc fbdc 	bl	80029d0 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800621c:	f7fc fbd8 	bl	80029d0 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b64      	cmp	r3, #100	@ 0x64
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e207      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800622e:	4b5b      	ldr	r3, [pc, #364]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0f0      	beq.n	800621c <HAL_RCC_OscConfig+0xc0>
 800623a:	e014      	b.n	8006266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623c:	f7fc fbc8 	bl	80029d0 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006244:	f7fc fbc4 	bl	80029d0 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b64      	cmp	r3, #100	@ 0x64
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e1f3      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006256:	4b51      	ldr	r3, [pc, #324]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1f0      	bne.n	8006244 <HAL_RCC_OscConfig+0xe8>
 8006262:	e000      	b.n	8006266 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d063      	beq.n	800633a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006272:	4b4a      	ldr	r3, [pc, #296]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 030c 	and.w	r3, r3, #12
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00b      	beq.n	8006296 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800627e:	4b47      	ldr	r3, [pc, #284]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006286:	2b08      	cmp	r3, #8
 8006288:	d11c      	bne.n	80062c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800628a:	4b44      	ldr	r3, [pc, #272]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d116      	bne.n	80062c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006296:	4b41      	ldr	r3, [pc, #260]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <HAL_RCC_OscConfig+0x152>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d001      	beq.n	80062ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e1c7      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ae:	4b3b      	ldr	r3, [pc, #236]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	4937      	ldr	r1, [pc, #220]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062c2:	e03a      	b.n	800633a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d020      	beq.n	800630e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062cc:	4b34      	ldr	r3, [pc, #208]	@ (80063a0 <HAL_RCC_OscConfig+0x244>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d2:	f7fc fb7d 	bl	80029d0 <HAL_GetTick>
 80062d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062d8:	e008      	b.n	80062ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062da:	f7fc fb79 	bl	80029d0 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e1a8      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ec:	4b2b      	ldr	r3, [pc, #172]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0f0      	beq.n	80062da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062f8:	4b28      	ldr	r3, [pc, #160]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	4925      	ldr	r1, [pc, #148]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 8006308:	4313      	orrs	r3, r2
 800630a:	600b      	str	r3, [r1, #0]
 800630c:	e015      	b.n	800633a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800630e:	4b24      	ldr	r3, [pc, #144]	@ (80063a0 <HAL_RCC_OscConfig+0x244>)
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006314:	f7fc fb5c 	bl	80029d0 <HAL_GetTick>
 8006318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800631a:	e008      	b.n	800632e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800631c:	f7fc fb58 	bl	80029d0 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e187      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800632e:	4b1b      	ldr	r3, [pc, #108]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f0      	bne.n	800631c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0308 	and.w	r3, r3, #8
 8006342:	2b00      	cmp	r3, #0
 8006344:	d036      	beq.n	80063b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d016      	beq.n	800637c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800634e:	4b15      	ldr	r3, [pc, #84]	@ (80063a4 <HAL_RCC_OscConfig+0x248>)
 8006350:	2201      	movs	r2, #1
 8006352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006354:	f7fc fb3c 	bl	80029d0 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800635c:	f7fc fb38 	bl	80029d0 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e167      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800636e:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <HAL_RCC_OscConfig+0x240>)
 8006370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0f0      	beq.n	800635c <HAL_RCC_OscConfig+0x200>
 800637a:	e01b      	b.n	80063b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800637c:	4b09      	ldr	r3, [pc, #36]	@ (80063a4 <HAL_RCC_OscConfig+0x248>)
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006382:	f7fc fb25 	bl	80029d0 <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006388:	e00e      	b.n	80063a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800638a:	f7fc fb21 	bl	80029d0 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d907      	bls.n	80063a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e150      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
 800639c:	40023800 	.word	0x40023800
 80063a0:	42470000 	.word	0x42470000
 80063a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063a8:	4b88      	ldr	r3, [pc, #544]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 80063aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1ea      	bne.n	800638a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8097 	beq.w	80064f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063c2:	2300      	movs	r3, #0
 80063c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063c6:	4b81      	ldr	r3, [pc, #516]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 80063c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10f      	bne.n	80063f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063d2:	2300      	movs	r3, #0
 80063d4:	60bb      	str	r3, [r7, #8]
 80063d6:	4b7d      	ldr	r3, [pc, #500]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 80063d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063da:	4a7c      	ldr	r2, [pc, #496]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 80063dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80063e2:	4b7a      	ldr	r3, [pc, #488]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ea:	60bb      	str	r3, [r7, #8]
 80063ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ee:	2301      	movs	r3, #1
 80063f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063f2:	4b77      	ldr	r3, [pc, #476]	@ (80065d0 <HAL_RCC_OscConfig+0x474>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d118      	bne.n	8006430 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063fe:	4b74      	ldr	r3, [pc, #464]	@ (80065d0 <HAL_RCC_OscConfig+0x474>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a73      	ldr	r2, [pc, #460]	@ (80065d0 <HAL_RCC_OscConfig+0x474>)
 8006404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800640a:	f7fc fae1 	bl	80029d0 <HAL_GetTick>
 800640e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006410:	e008      	b.n	8006424 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006412:	f7fc fadd 	bl	80029d0 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d901      	bls.n	8006424 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e10c      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006424:	4b6a      	ldr	r3, [pc, #424]	@ (80065d0 <HAL_RCC_OscConfig+0x474>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0f0      	beq.n	8006412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d106      	bne.n	8006446 <HAL_RCC_OscConfig+0x2ea>
 8006438:	4b64      	ldr	r3, [pc, #400]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 800643a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800643c:	4a63      	ldr	r2, [pc, #396]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 800643e:	f043 0301 	orr.w	r3, r3, #1
 8006442:	6713      	str	r3, [r2, #112]	@ 0x70
 8006444:	e01c      	b.n	8006480 <HAL_RCC_OscConfig+0x324>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	2b05      	cmp	r3, #5
 800644c:	d10c      	bne.n	8006468 <HAL_RCC_OscConfig+0x30c>
 800644e:	4b5f      	ldr	r3, [pc, #380]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 8006450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006452:	4a5e      	ldr	r2, [pc, #376]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 8006454:	f043 0304 	orr.w	r3, r3, #4
 8006458:	6713      	str	r3, [r2, #112]	@ 0x70
 800645a:	4b5c      	ldr	r3, [pc, #368]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 800645c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800645e:	4a5b      	ldr	r2, [pc, #364]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 8006460:	f043 0301 	orr.w	r3, r3, #1
 8006464:	6713      	str	r3, [r2, #112]	@ 0x70
 8006466:	e00b      	b.n	8006480 <HAL_RCC_OscConfig+0x324>
 8006468:	4b58      	ldr	r3, [pc, #352]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 800646a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646c:	4a57      	ldr	r2, [pc, #348]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	6713      	str	r3, [r2, #112]	@ 0x70
 8006474:	4b55      	ldr	r3, [pc, #340]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 8006476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006478:	4a54      	ldr	r2, [pc, #336]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 800647a:	f023 0304 	bic.w	r3, r3, #4
 800647e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d015      	beq.n	80064b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006488:	f7fc faa2 	bl	80029d0 <HAL_GetTick>
 800648c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800648e:	e00a      	b.n	80064a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006490:	f7fc fa9e 	bl	80029d0 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800649e:	4293      	cmp	r3, r2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e0cb      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a6:	4b49      	ldr	r3, [pc, #292]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 80064a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0ee      	beq.n	8006490 <HAL_RCC_OscConfig+0x334>
 80064b2:	e014      	b.n	80064de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064b4:	f7fc fa8c 	bl	80029d0 <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064ba:	e00a      	b.n	80064d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064bc:	f7fc fa88 	bl	80029d0 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e0b5      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064d2:	4b3e      	ldr	r3, [pc, #248]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 80064d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1ee      	bne.n	80064bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064de:	7dfb      	ldrb	r3, [r7, #23]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d105      	bne.n	80064f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064e4:	4b39      	ldr	r3, [pc, #228]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 80064e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e8:	4a38      	ldr	r2, [pc, #224]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 80064ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 80a1 	beq.w	800663c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064fa:	4b34      	ldr	r3, [pc, #208]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 030c 	and.w	r3, r3, #12
 8006502:	2b08      	cmp	r3, #8
 8006504:	d05c      	beq.n	80065c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	2b02      	cmp	r3, #2
 800650c:	d141      	bne.n	8006592 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800650e:	4b31      	ldr	r3, [pc, #196]	@ (80065d4 <HAL_RCC_OscConfig+0x478>)
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006514:	f7fc fa5c 	bl	80029d0 <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800651c:	f7fc fa58 	bl	80029d0 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e087      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800652e:	4b27      	ldr	r3, [pc, #156]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f0      	bne.n	800651c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	69da      	ldr	r2, [r3, #28]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006548:	019b      	lsls	r3, r3, #6
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006550:	085b      	lsrs	r3, r3, #1
 8006552:	3b01      	subs	r3, #1
 8006554:	041b      	lsls	r3, r3, #16
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655c:	061b      	lsls	r3, r3, #24
 800655e:	491b      	ldr	r1, [pc, #108]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 8006560:	4313      	orrs	r3, r2
 8006562:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006564:	4b1b      	ldr	r3, [pc, #108]	@ (80065d4 <HAL_RCC_OscConfig+0x478>)
 8006566:	2201      	movs	r2, #1
 8006568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800656a:	f7fc fa31 	bl	80029d0 <HAL_GetTick>
 800656e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006570:	e008      	b.n	8006584 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006572:	f7fc fa2d 	bl	80029d0 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e05c      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006584:	4b11      	ldr	r3, [pc, #68]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0f0      	beq.n	8006572 <HAL_RCC_OscConfig+0x416>
 8006590:	e054      	b.n	800663c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006592:	4b10      	ldr	r3, [pc, #64]	@ (80065d4 <HAL_RCC_OscConfig+0x478>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006598:	f7fc fa1a 	bl	80029d0 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a0:	f7fc fa16 	bl	80029d0 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e045      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b2:	4b06      	ldr	r3, [pc, #24]	@ (80065cc <HAL_RCC_OscConfig+0x470>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f0      	bne.n	80065a0 <HAL_RCC_OscConfig+0x444>
 80065be:	e03d      	b.n	800663c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d107      	bne.n	80065d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e038      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
 80065cc:	40023800 	.word	0x40023800
 80065d0:	40007000 	.word	0x40007000
 80065d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006648 <HAL_RCC_OscConfig+0x4ec>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d028      	beq.n	8006638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d121      	bne.n	8006638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065fe:	429a      	cmp	r2, r3
 8006600:	d11a      	bne.n	8006638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006608:	4013      	ands	r3, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800660e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006610:	4293      	cmp	r3, r2
 8006612:	d111      	bne.n	8006638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661e:	085b      	lsrs	r3, r3, #1
 8006620:	3b01      	subs	r3, #1
 8006622:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006624:	429a      	cmp	r2, r3
 8006626:	d107      	bne.n	8006638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006632:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006634:	429a      	cmp	r2, r3
 8006636:	d001      	beq.n	800663c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e000      	b.n	800663e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	40023800 	.word	0x40023800

0800664c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0cc      	b.n	80067fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006660:	4b68      	ldr	r3, [pc, #416]	@ (8006804 <HAL_RCC_ClockConfig+0x1b8>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d90c      	bls.n	8006688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800666e:	4b65      	ldr	r3, [pc, #404]	@ (8006804 <HAL_RCC_ClockConfig+0x1b8>)
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006676:	4b63      	ldr	r3, [pc, #396]	@ (8006804 <HAL_RCC_ClockConfig+0x1b8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d001      	beq.n	8006688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e0b8      	b.n	80067fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b00      	cmp	r3, #0
 8006692:	d020      	beq.n	80066d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066a0:	4b59      	ldr	r3, [pc, #356]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	4a58      	ldr	r2, [pc, #352]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 80066a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80066aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066b8:	4b53      	ldr	r3, [pc, #332]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	4a52      	ldr	r2, [pc, #328]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 80066be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80066c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066c4:	4b50      	ldr	r3, [pc, #320]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	494d      	ldr	r1, [pc, #308]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d044      	beq.n	800676c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d107      	bne.n	80066fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ea:	4b47      	ldr	r3, [pc, #284]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d119      	bne.n	800672a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e07f      	b.n	80067fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d003      	beq.n	800670a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006706:	2b03      	cmp	r3, #3
 8006708:	d107      	bne.n	800671a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800670a:	4b3f      	ldr	r3, [pc, #252]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e06f      	b.n	80067fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800671a:	4b3b      	ldr	r3, [pc, #236]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e067      	b.n	80067fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800672a:	4b37      	ldr	r3, [pc, #220]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f023 0203 	bic.w	r2, r3, #3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	4934      	ldr	r1, [pc, #208]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 8006738:	4313      	orrs	r3, r2
 800673a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800673c:	f7fc f948 	bl	80029d0 <HAL_GetTick>
 8006740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006742:	e00a      	b.n	800675a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006744:	f7fc f944 	bl	80029d0 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006752:	4293      	cmp	r3, r2
 8006754:	d901      	bls.n	800675a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e04f      	b.n	80067fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800675a:	4b2b      	ldr	r3, [pc, #172]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 020c 	and.w	r2, r3, #12
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	429a      	cmp	r2, r3
 800676a:	d1eb      	bne.n	8006744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800676c:	4b25      	ldr	r3, [pc, #148]	@ (8006804 <HAL_RCC_ClockConfig+0x1b8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d20c      	bcs.n	8006794 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677a:	4b22      	ldr	r3, [pc, #136]	@ (8006804 <HAL_RCC_ClockConfig+0x1b8>)
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006782:	4b20      	ldr	r3, [pc, #128]	@ (8006804 <HAL_RCC_ClockConfig+0x1b8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d001      	beq.n	8006794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e032      	b.n	80067fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067a0:	4b19      	ldr	r3, [pc, #100]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	4916      	ldr	r1, [pc, #88]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0308 	and.w	r3, r3, #8
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d009      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067be:	4b12      	ldr	r3, [pc, #72]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	490e      	ldr	r1, [pc, #56]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067d2:	f000 f821 	bl	8006818 <HAL_RCC_GetSysClockFreq>
 80067d6:	4602      	mov	r2, r0
 80067d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006808 <HAL_RCC_ClockConfig+0x1bc>)
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	091b      	lsrs	r3, r3, #4
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	490a      	ldr	r1, [pc, #40]	@ (800680c <HAL_RCC_ClockConfig+0x1c0>)
 80067e4:	5ccb      	ldrb	r3, [r1, r3]
 80067e6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ea:	4a09      	ldr	r2, [pc, #36]	@ (8006810 <HAL_RCC_ClockConfig+0x1c4>)
 80067ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80067ee:	4b09      	ldr	r3, [pc, #36]	@ (8006814 <HAL_RCC_ClockConfig+0x1c8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fc f8a8 	bl	8002948 <HAL_InitTick>

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	40023c00 	.word	0x40023c00
 8006808:	40023800 	.word	0x40023800
 800680c:	0800eb20 	.word	0x0800eb20
 8006810:	2000003c 	.word	0x2000003c
 8006814:	20000040 	.word	0x20000040

08006818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800681c:	b094      	sub	sp, #80	@ 0x50
 800681e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006830:	4b79      	ldr	r3, [pc, #484]	@ (8006a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f003 030c 	and.w	r3, r3, #12
 8006838:	2b08      	cmp	r3, #8
 800683a:	d00d      	beq.n	8006858 <HAL_RCC_GetSysClockFreq+0x40>
 800683c:	2b08      	cmp	r3, #8
 800683e:	f200 80e1 	bhi.w	8006a04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <HAL_RCC_GetSysClockFreq+0x34>
 8006846:	2b04      	cmp	r3, #4
 8006848:	d003      	beq.n	8006852 <HAL_RCC_GetSysClockFreq+0x3a>
 800684a:	e0db      	b.n	8006a04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800684c:	4b73      	ldr	r3, [pc, #460]	@ (8006a1c <HAL_RCC_GetSysClockFreq+0x204>)
 800684e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006850:	e0db      	b.n	8006a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006852:	4b73      	ldr	r3, [pc, #460]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x208>)
 8006854:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006856:	e0d8      	b.n	8006a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006858:	4b6f      	ldr	r3, [pc, #444]	@ (8006a18 <HAL_RCC_GetSysClockFreq+0x200>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006860:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006862:	4b6d      	ldr	r3, [pc, #436]	@ (8006a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d063      	beq.n	8006936 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800686e:	4b6a      	ldr	r3, [pc, #424]	@ (8006a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	099b      	lsrs	r3, r3, #6
 8006874:	2200      	movs	r2, #0
 8006876:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006878:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800687a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006880:	633b      	str	r3, [r7, #48]	@ 0x30
 8006882:	2300      	movs	r3, #0
 8006884:	637b      	str	r3, [r7, #52]	@ 0x34
 8006886:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800688a:	4622      	mov	r2, r4
 800688c:	462b      	mov	r3, r5
 800688e:	f04f 0000 	mov.w	r0, #0
 8006892:	f04f 0100 	mov.w	r1, #0
 8006896:	0159      	lsls	r1, r3, #5
 8006898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800689c:	0150      	lsls	r0, r2, #5
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4621      	mov	r1, r4
 80068a4:	1a51      	subs	r1, r2, r1
 80068a6:	6139      	str	r1, [r7, #16]
 80068a8:	4629      	mov	r1, r5
 80068aa:	eb63 0301 	sbc.w	r3, r3, r1
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068bc:	4659      	mov	r1, fp
 80068be:	018b      	lsls	r3, r1, #6
 80068c0:	4651      	mov	r1, sl
 80068c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068c6:	4651      	mov	r1, sl
 80068c8:	018a      	lsls	r2, r1, #6
 80068ca:	4651      	mov	r1, sl
 80068cc:	ebb2 0801 	subs.w	r8, r2, r1
 80068d0:	4659      	mov	r1, fp
 80068d2:	eb63 0901 	sbc.w	r9, r3, r1
 80068d6:	f04f 0200 	mov.w	r2, #0
 80068da:	f04f 0300 	mov.w	r3, #0
 80068de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068ea:	4690      	mov	r8, r2
 80068ec:	4699      	mov	r9, r3
 80068ee:	4623      	mov	r3, r4
 80068f0:	eb18 0303 	adds.w	r3, r8, r3
 80068f4:	60bb      	str	r3, [r7, #8]
 80068f6:	462b      	mov	r3, r5
 80068f8:	eb49 0303 	adc.w	r3, r9, r3
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	f04f 0300 	mov.w	r3, #0
 8006906:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800690a:	4629      	mov	r1, r5
 800690c:	024b      	lsls	r3, r1, #9
 800690e:	4621      	mov	r1, r4
 8006910:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006914:	4621      	mov	r1, r4
 8006916:	024a      	lsls	r2, r1, #9
 8006918:	4610      	mov	r0, r2
 800691a:	4619      	mov	r1, r3
 800691c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800691e:	2200      	movs	r2, #0
 8006920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006922:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006924:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006928:	f7fa f98e 	bl	8000c48 <__aeabi_uldivmod>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	4613      	mov	r3, r2
 8006932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006934:	e058      	b.n	80069e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006936:	4b38      	ldr	r3, [pc, #224]	@ (8006a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	099b      	lsrs	r3, r3, #6
 800693c:	2200      	movs	r2, #0
 800693e:	4618      	mov	r0, r3
 8006940:	4611      	mov	r1, r2
 8006942:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006946:	623b      	str	r3, [r7, #32]
 8006948:	2300      	movs	r3, #0
 800694a:	627b      	str	r3, [r7, #36]	@ 0x24
 800694c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006950:	4642      	mov	r2, r8
 8006952:	464b      	mov	r3, r9
 8006954:	f04f 0000 	mov.w	r0, #0
 8006958:	f04f 0100 	mov.w	r1, #0
 800695c:	0159      	lsls	r1, r3, #5
 800695e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006962:	0150      	lsls	r0, r2, #5
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4641      	mov	r1, r8
 800696a:	ebb2 0a01 	subs.w	sl, r2, r1
 800696e:	4649      	mov	r1, r9
 8006970:	eb63 0b01 	sbc.w	fp, r3, r1
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006980:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006984:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006988:	ebb2 040a 	subs.w	r4, r2, sl
 800698c:	eb63 050b 	sbc.w	r5, r3, fp
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	00eb      	lsls	r3, r5, #3
 800699a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800699e:	00e2      	lsls	r2, r4, #3
 80069a0:	4614      	mov	r4, r2
 80069a2:	461d      	mov	r5, r3
 80069a4:	4643      	mov	r3, r8
 80069a6:	18e3      	adds	r3, r4, r3
 80069a8:	603b      	str	r3, [r7, #0]
 80069aa:	464b      	mov	r3, r9
 80069ac:	eb45 0303 	adc.w	r3, r5, r3
 80069b0:	607b      	str	r3, [r7, #4]
 80069b2:	f04f 0200 	mov.w	r2, #0
 80069b6:	f04f 0300 	mov.w	r3, #0
 80069ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069be:	4629      	mov	r1, r5
 80069c0:	028b      	lsls	r3, r1, #10
 80069c2:	4621      	mov	r1, r4
 80069c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069c8:	4621      	mov	r1, r4
 80069ca:	028a      	lsls	r2, r1, #10
 80069cc:	4610      	mov	r0, r2
 80069ce:	4619      	mov	r1, r3
 80069d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069d2:	2200      	movs	r2, #0
 80069d4:	61bb      	str	r3, [r7, #24]
 80069d6:	61fa      	str	r2, [r7, #28]
 80069d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069dc:	f7fa f934 	bl	8000c48 <__aeabi_uldivmod>
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	4613      	mov	r3, r2
 80069e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80069e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006a18 <HAL_RCC_GetSysClockFreq+0x200>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	0c1b      	lsrs	r3, r3, #16
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	3301      	adds	r3, #1
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80069f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a02:	e002      	b.n	8006a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a04:	4b05      	ldr	r3, [pc, #20]	@ (8006a1c <HAL_RCC_GetSysClockFreq+0x204>)
 8006a06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3750      	adds	r7, #80	@ 0x50
 8006a10:	46bd      	mov	sp, r7
 8006a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a16:	bf00      	nop
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	00f42400 	.word	0x00f42400
 8006a20:	007a1200 	.word	0x007a1200

08006a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a28:	4b03      	ldr	r3, [pc, #12]	@ (8006a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	2000003c 	.word	0x2000003c

08006a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a40:	f7ff fff0 	bl	8006a24 <HAL_RCC_GetHCLKFreq>
 8006a44:	4602      	mov	r2, r0
 8006a46:	4b05      	ldr	r3, [pc, #20]	@ (8006a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	0a9b      	lsrs	r3, r3, #10
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	4903      	ldr	r1, [pc, #12]	@ (8006a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a52:	5ccb      	ldrb	r3, [r1, r3]
 8006a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	40023800 	.word	0x40023800
 8006a60:	0800eb30 	.word	0x0800eb30

08006a64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a64:	b084      	sub	sp, #16
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	f107 001c 	add.w	r0, r7, #28
 8006a72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a76:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d123      	bne.n	8006ac6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006a92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006aa6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d105      	bne.n	8006aba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 fae8 	bl	8008090 <USB_CoreReset>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	73fb      	strb	r3, [r7, #15]
 8006ac4:	e01b      	b.n	8006afe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 fadc 	bl	8008090 <USB_CoreReset>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006adc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	639a      	str	r2, [r3, #56]	@ 0x38
 8006af0:	e005      	b.n	8006afe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006afe:	7fbb      	ldrb	r3, [r7, #30]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d10b      	bne.n	8006b1c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f043 0206 	orr.w	r2, r3, #6
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f043 0220 	orr.w	r2, r3, #32
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b28:	b004      	add	sp, #16
 8006b2a:	4770      	bx	lr

08006b2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d165      	bne.n	8006c0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4a41      	ldr	r2, [pc, #260]	@ (8006c48 <USB_SetTurnaroundTime+0x11c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d906      	bls.n	8006b56 <USB_SetTurnaroundTime+0x2a>
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4a40      	ldr	r2, [pc, #256]	@ (8006c4c <USB_SetTurnaroundTime+0x120>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d202      	bcs.n	8006b56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b50:	230f      	movs	r3, #15
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	e062      	b.n	8006c1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	4a3c      	ldr	r2, [pc, #240]	@ (8006c4c <USB_SetTurnaroundTime+0x120>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d306      	bcc.n	8006b6c <USB_SetTurnaroundTime+0x40>
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	4a3b      	ldr	r2, [pc, #236]	@ (8006c50 <USB_SetTurnaroundTime+0x124>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d202      	bcs.n	8006b6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b66:	230e      	movs	r3, #14
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	e057      	b.n	8006c1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	4a38      	ldr	r2, [pc, #224]	@ (8006c50 <USB_SetTurnaroundTime+0x124>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d306      	bcc.n	8006b82 <USB_SetTurnaroundTime+0x56>
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4a37      	ldr	r2, [pc, #220]	@ (8006c54 <USB_SetTurnaroundTime+0x128>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d202      	bcs.n	8006b82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b7c:	230d      	movs	r3, #13
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	e04c      	b.n	8006c1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	4a33      	ldr	r2, [pc, #204]	@ (8006c54 <USB_SetTurnaroundTime+0x128>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d306      	bcc.n	8006b98 <USB_SetTurnaroundTime+0x6c>
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4a32      	ldr	r2, [pc, #200]	@ (8006c58 <USB_SetTurnaroundTime+0x12c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d802      	bhi.n	8006b98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b92:	230c      	movs	r3, #12
 8006b94:	617b      	str	r3, [r7, #20]
 8006b96:	e041      	b.n	8006c1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8006c58 <USB_SetTurnaroundTime+0x12c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d906      	bls.n	8006bae <USB_SetTurnaroundTime+0x82>
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4a2e      	ldr	r2, [pc, #184]	@ (8006c5c <USB_SetTurnaroundTime+0x130>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d802      	bhi.n	8006bae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ba8:	230b      	movs	r3, #11
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	e036      	b.n	8006c1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c5c <USB_SetTurnaroundTime+0x130>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d906      	bls.n	8006bc4 <USB_SetTurnaroundTime+0x98>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	4a29      	ldr	r2, [pc, #164]	@ (8006c60 <USB_SetTurnaroundTime+0x134>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d802      	bhi.n	8006bc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006bbe:	230a      	movs	r3, #10
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	e02b      	b.n	8006c1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4a26      	ldr	r2, [pc, #152]	@ (8006c60 <USB_SetTurnaroundTime+0x134>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d906      	bls.n	8006bda <USB_SetTurnaroundTime+0xae>
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4a25      	ldr	r2, [pc, #148]	@ (8006c64 <USB_SetTurnaroundTime+0x138>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d202      	bcs.n	8006bda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006bd4:	2309      	movs	r3, #9
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e020      	b.n	8006c1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4a21      	ldr	r2, [pc, #132]	@ (8006c64 <USB_SetTurnaroundTime+0x138>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d306      	bcc.n	8006bf0 <USB_SetTurnaroundTime+0xc4>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	4a20      	ldr	r2, [pc, #128]	@ (8006c68 <USB_SetTurnaroundTime+0x13c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d802      	bhi.n	8006bf0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006bea:	2308      	movs	r3, #8
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e015      	b.n	8006c1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8006c68 <USB_SetTurnaroundTime+0x13c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d906      	bls.n	8006c06 <USB_SetTurnaroundTime+0xda>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8006c6c <USB_SetTurnaroundTime+0x140>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d202      	bcs.n	8006c06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c00:	2307      	movs	r3, #7
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e00a      	b.n	8006c1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c06:	2306      	movs	r3, #6
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	e007      	b.n	8006c1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c0c:	79fb      	ldrb	r3, [r7, #7]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d102      	bne.n	8006c18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c12:	2309      	movs	r3, #9
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	e001      	b.n	8006c1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c18:	2309      	movs	r3, #9
 8006c1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	029b      	lsls	r3, r3, #10
 8006c30:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006c34:	431a      	orrs	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	00d8acbf 	.word	0x00d8acbf
 8006c4c:	00e4e1c0 	.word	0x00e4e1c0
 8006c50:	00f42400 	.word	0x00f42400
 8006c54:	01067380 	.word	0x01067380
 8006c58:	011a499f 	.word	0x011a499f
 8006c5c:	01312cff 	.word	0x01312cff
 8006c60:	014ca43f 	.word	0x014ca43f
 8006c64:	016e3600 	.word	0x016e3600
 8006c68:	01a6ab1f 	.word	0x01a6ab1f
 8006c6c:	01e84800 	.word	0x01e84800

08006c70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f043 0201 	orr.w	r2, r3, #1
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f023 0201 	bic.w	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d115      	bne.n	8006d02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ce2:	200a      	movs	r0, #10
 8006ce4:	f7fb fe80 	bl	80029e8 <HAL_Delay>
      ms += 10U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	330a      	adds	r3, #10
 8006cec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 f93f 	bl	8007f72 <USB_GetMode>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d01e      	beq.n	8006d38 <USB_SetCurrentMode+0x84>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2bc7      	cmp	r3, #199	@ 0xc7
 8006cfe:	d9f0      	bls.n	8006ce2 <USB_SetCurrentMode+0x2e>
 8006d00:	e01a      	b.n	8006d38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d115      	bne.n	8006d34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d14:	200a      	movs	r0, #10
 8006d16:	f7fb fe67 	bl	80029e8 <HAL_Delay>
      ms += 10U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	330a      	adds	r3, #10
 8006d1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 f926 	bl	8007f72 <USB_GetMode>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d005      	beq.n	8006d38 <USB_SetCurrentMode+0x84>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d30:	d9f0      	bls.n	8006d14 <USB_SetCurrentMode+0x60>
 8006d32:	e001      	b.n	8006d38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e005      	b.n	8006d44 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d3c:	d101      	bne.n	8006d42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e000      	b.n	8006d44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b086      	sub	sp, #24
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d66:	2300      	movs	r3, #0
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	e009      	b.n	8006d80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	3340      	adds	r3, #64	@ 0x40
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	2200      	movs	r2, #0
 8006d78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b0e      	cmp	r3, #14
 8006d84:	d9f2      	bls.n	8006d6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d11c      	bne.n	8006dc8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d9c:	f043 0302 	orr.w	r3, r3, #2
 8006da0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8006dc6:	e00b      	b.n	8006de0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dcc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006de6:	461a      	mov	r2, r3
 8006de8:	2300      	movs	r3, #0
 8006dea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d10d      	bne.n	8006e10 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006df4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f968 	bl	80070d4 <USB_SetDevSpeed>
 8006e04:	e008      	b.n	8006e18 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e06:	2101      	movs	r1, #1
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f963 	bl	80070d4 <USB_SetDevSpeed>
 8006e0e:	e003      	b.n	8006e18 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e10:	2103      	movs	r1, #3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f95e 	bl	80070d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e18:	2110      	movs	r1, #16
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f8fa 	bl	8007014 <USB_FlushTxFifo>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f924 	bl	8007078 <USB_FlushRxFifo>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e40:	461a      	mov	r2, r3
 8006e42:	2300      	movs	r3, #0
 8006e44:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	2300      	movs	r3, #0
 8006e50:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e58:	461a      	mov	r2, r3
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e5e:	2300      	movs	r3, #0
 8006e60:	613b      	str	r3, [r7, #16]
 8006e62:	e043      	b.n	8006eec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e7a:	d118      	bne.n	8006eae <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10a      	bne.n	8006e98 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e94:	6013      	str	r3, [r2, #0]
 8006e96:	e013      	b.n	8006ec0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	e008      	b.n	8006ec0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eba:	461a      	mov	r2, r3
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ecc:	461a      	mov	r2, r3
 8006ece:	2300      	movs	r3, #0
 8006ed0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ee4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	613b      	str	r3, [r7, #16]
 8006eec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d3b5      	bcc.n	8006e64 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ef8:	2300      	movs	r3, #0
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	e043      	b.n	8006f86 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f14:	d118      	bne.n	8006f48 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	e013      	b.n	8006f5a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	e008      	b.n	8006f5a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f54:	461a      	mov	r2, r3
 8006f56:	2300      	movs	r3, #0
 8006f58:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f66:	461a      	mov	r2, r3
 8006f68:	2300      	movs	r3, #0
 8006f6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f78:	461a      	mov	r2, r3
 8006f7a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	3301      	adds	r3, #1
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d3b5      	bcc.n	8006efe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fa4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006fb2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d105      	bne.n	8006fc8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	f043 0210 	orr.w	r2, r3, #16
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699a      	ldr	r2, [r3, #24]
 8006fcc:	4b10      	ldr	r3, [pc, #64]	@ (8007010 <USB_DevInit+0x2c4>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fd4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	f043 0208 	orr.w	r2, r3, #8
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fe8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d107      	bne.n	8007000 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ff8:	f043 0304 	orr.w	r3, r3, #4
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007000:	7dfb      	ldrb	r3, [r7, #23]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800700c:	b004      	add	sp, #16
 800700e:	4770      	bx	lr
 8007010:	803c3800 	.word	0x803c3800

08007014 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3301      	adds	r3, #1
 8007026:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800702e:	d901      	bls.n	8007034 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e01b      	b.n	800706c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	daf2      	bge.n	8007022 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	019b      	lsls	r3, r3, #6
 8007044:	f043 0220 	orr.w	r2, r3, #32
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3301      	adds	r3, #1
 8007050:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007058:	d901      	bls.n	800705e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e006      	b.n	800706c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b20      	cmp	r3, #32
 8007068:	d0f0      	beq.n	800704c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3301      	adds	r3, #1
 8007088:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007090:	d901      	bls.n	8007096 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e018      	b.n	80070c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	daf2      	bge.n	8007084 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2210      	movs	r2, #16
 80070a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3301      	adds	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070b4:	d901      	bls.n	80070ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e006      	b.n	80070c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f003 0310 	and.w	r3, r3, #16
 80070c2:	2b10      	cmp	r3, #16
 80070c4:	d0f0      	beq.n	80070a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	68f9      	ldr	r1, [r7, #12]
 80070f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070f4:	4313      	orrs	r3, r2
 80070f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007106:	b480      	push	{r7}
 8007108:	b087      	sub	sp, #28
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 0306 	and.w	r3, r3, #6
 800711e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d102      	bne.n	800712c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007126:	2300      	movs	r3, #0
 8007128:	75fb      	strb	r3, [r7, #23]
 800712a:	e00a      	b.n	8007142 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b02      	cmp	r3, #2
 8007130:	d002      	beq.n	8007138 <USB_GetDevSpeed+0x32>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b06      	cmp	r3, #6
 8007136:	d102      	bne.n	800713e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007138:	2302      	movs	r3, #2
 800713a:	75fb      	strb	r3, [r7, #23]
 800713c:	e001      	b.n	8007142 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800713e:	230f      	movs	r3, #15
 8007140:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007142:	7dfb      	ldrb	r3, [r7, #23]
}
 8007144:	4618      	mov	r0, r3
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	785b      	ldrb	r3, [r3, #1]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d13a      	bne.n	80071e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007172:	69da      	ldr	r2, [r3, #28]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	2101      	movs	r1, #1
 800717e:	fa01 f303 	lsl.w	r3, r1, r3
 8007182:	b29b      	uxth	r3, r3
 8007184:	68f9      	ldr	r1, [r7, #12]
 8007186:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800718a:	4313      	orrs	r3, r2
 800718c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d155      	bne.n	8007250 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	791b      	ldrb	r3, [r3, #4]
 80071be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	059b      	lsls	r3, r3, #22
 80071c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071c8:	4313      	orrs	r3, r2
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	e036      	b.n	8007250 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e8:	69da      	ldr	r2, [r3, #28]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	2101      	movs	r1, #1
 80071f4:	fa01 f303 	lsl.w	r3, r1, r3
 80071f8:	041b      	lsls	r3, r3, #16
 80071fa:	68f9      	ldr	r1, [r7, #12]
 80071fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007200:	4313      	orrs	r3, r2
 8007202:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d11a      	bne.n	8007250 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	4413      	add	r3, r2
 8007222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	791b      	ldrb	r3, [r3, #4]
 8007234:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007236:	430b      	orrs	r3, r1
 8007238:	4313      	orrs	r3, r2
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	0151      	lsls	r1, r2, #5
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	440a      	add	r2, r1
 8007242:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800724a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800724e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	785b      	ldrb	r3, [r3, #1]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d161      	bne.n	8007340 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800728e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007292:	d11f      	bne.n	80072d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	0151      	lsls	r1, r2, #5
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	440a      	add	r2, r1
 80072aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	0151      	lsls	r1, r2, #5
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	440a      	add	r2, r1
 80072ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	f003 030f 	and.w	r3, r3, #15
 80072e4:	2101      	movs	r1, #1
 80072e6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	43db      	mvns	r3, r3
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072f4:	4013      	ands	r3, r2
 80072f6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072fe:	69da      	ldr	r2, [r3, #28]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	f003 030f 	and.w	r3, r3, #15
 8007308:	2101      	movs	r1, #1
 800730a:	fa01 f303 	lsl.w	r3, r1, r3
 800730e:	b29b      	uxth	r3, r3
 8007310:	43db      	mvns	r3, r3
 8007312:	68f9      	ldr	r1, [r7, #12]
 8007314:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007318:	4013      	ands	r3, r2
 800731a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	0159      	lsls	r1, r3, #5
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	440b      	add	r3, r1
 8007332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007336:	4619      	mov	r1, r3
 8007338:	4b35      	ldr	r3, [pc, #212]	@ (8007410 <USB_DeactivateEndpoint+0x1b0>)
 800733a:	4013      	ands	r3, r2
 800733c:	600b      	str	r3, [r1, #0]
 800733e:	e060      	b.n	8007402 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007352:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007356:	d11f      	bne.n	8007398 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	0151      	lsls	r1, r2, #5
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	440a      	add	r2, r1
 800736e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007372:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007376:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	0151      	lsls	r1, r2, #5
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	440a      	add	r2, r1
 800738e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007392:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007396:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800739e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	f003 030f 	and.w	r3, r3, #15
 80073a8:	2101      	movs	r1, #1
 80073aa:	fa01 f303 	lsl.w	r3, r1, r3
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	43db      	mvns	r3, r3
 80073b2:	68f9      	ldr	r1, [r7, #12]
 80073b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073b8:	4013      	ands	r3, r2
 80073ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c2:	69da      	ldr	r2, [r3, #28]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	f003 030f 	and.w	r3, r3, #15
 80073cc:	2101      	movs	r1, #1
 80073ce:	fa01 f303 	lsl.w	r3, r1, r3
 80073d2:	041b      	lsls	r3, r3, #16
 80073d4:	43db      	mvns	r3, r3
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073dc:	4013      	ands	r3, r2
 80073de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	0159      	lsls	r1, r3, #5
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	440b      	add	r3, r1
 80073f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073fa:	4619      	mov	r1, r3
 80073fc:	4b05      	ldr	r3, [pc, #20]	@ (8007414 <USB_DeactivateEndpoint+0x1b4>)
 80073fe:	4013      	ands	r3, r2
 8007400:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	ec337800 	.word	0xec337800
 8007414:	eff37800 	.word	0xeff37800

08007418 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b08a      	sub	sp, #40	@ 0x28
 800741c:	af02      	add	r7, sp, #8
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	4613      	mov	r3, r2
 8007424:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	785b      	ldrb	r3, [r3, #1]
 8007434:	2b01      	cmp	r3, #1
 8007436:	f040 817f 	bne.w	8007738 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d132      	bne.n	80074a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	440a      	add	r2, r1
 8007458:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800745c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007460:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007464:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	0151      	lsls	r1, r2, #5
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	440a      	add	r2, r1
 800747c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007480:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007484:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	0151      	lsls	r1, r2, #5
 8007498:	69fa      	ldr	r2, [r7, #28]
 800749a:	440a      	add	r2, r1
 800749c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074a0:	0cdb      	lsrs	r3, r3, #19
 80074a2:	04db      	lsls	r3, r3, #19
 80074a4:	6113      	str	r3, [r2, #16]
 80074a6:	e097      	b.n	80075d8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	0151      	lsls	r1, r2, #5
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	440a      	add	r2, r1
 80074be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074c2:	0cdb      	lsrs	r3, r3, #19
 80074c4:	04db      	lsls	r3, r3, #19
 80074c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	0151      	lsls	r1, r2, #5
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	440a      	add	r2, r1
 80074de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80074e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80074ea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d11a      	bne.n	8007528 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	691a      	ldr	r2, [r3, #16]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d903      	bls.n	8007506 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	440a      	add	r2, r1
 800751c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007520:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007524:	6113      	str	r3, [r2, #16]
 8007526:	e044      	b.n	80075b2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	691a      	ldr	r2, [r3, #16]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	4413      	add	r3, r2
 8007532:	1e5a      	subs	r2, r3, #1
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	fbb2 f3f3 	udiv	r3, r2, r3
 800753c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800754a:	691a      	ldr	r2, [r3, #16]
 800754c:	8afb      	ldrh	r3, [r7, #22]
 800754e:	04d9      	lsls	r1, r3, #19
 8007550:	4ba4      	ldr	r3, [pc, #656]	@ (80077e4 <USB_EPStartXfer+0x3cc>)
 8007552:	400b      	ands	r3, r1
 8007554:	69b9      	ldr	r1, [r7, #24]
 8007556:	0148      	lsls	r0, r1, #5
 8007558:	69f9      	ldr	r1, [r7, #28]
 800755a:	4401      	add	r1, r0
 800755c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007560:	4313      	orrs	r3, r2
 8007562:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	791b      	ldrb	r3, [r3, #4]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d122      	bne.n	80075b2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	0151      	lsls	r1, r2, #5
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	440a      	add	r2, r1
 8007582:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007586:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800758a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007598:	691a      	ldr	r2, [r3, #16]
 800759a:	8afb      	ldrh	r3, [r7, #22]
 800759c:	075b      	lsls	r3, r3, #29
 800759e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80075a2:	69b9      	ldr	r1, [r7, #24]
 80075a4:	0148      	lsls	r0, r1, #5
 80075a6:	69f9      	ldr	r1, [r7, #28]
 80075a8:	4401      	add	r1, r0
 80075aa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075ae:	4313      	orrs	r3, r2
 80075b0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075be:	691a      	ldr	r2, [r3, #16]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075c8:	69b9      	ldr	r1, [r7, #24]
 80075ca:	0148      	lsls	r0, r1, #5
 80075cc:	69f9      	ldr	r1, [r7, #28]
 80075ce:	4401      	add	r1, r0
 80075d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075d4:	4313      	orrs	r3, r2
 80075d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d14b      	bne.n	8007676 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f2:	461a      	mov	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	791b      	ldrb	r3, [r3, #4]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d128      	bne.n	8007654 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800760e:	2b00      	cmp	r3, #0
 8007610:	d110      	bne.n	8007634 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	0151      	lsls	r1, r2, #5
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	440a      	add	r2, r1
 8007628:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800762c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007630:	6013      	str	r3, [r2, #0]
 8007632:	e00f      	b.n	8007654 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	0151      	lsls	r1, r2, #5
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	440a      	add	r2, r1
 800764a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800764e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007652:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	0151      	lsls	r1, r2, #5
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	440a      	add	r2, r1
 800766a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800766e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	e166      	b.n	8007944 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	0151      	lsls	r1, r2, #5
 8007688:	69fa      	ldr	r2, [r7, #28]
 800768a:	440a      	add	r2, r1
 800768c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007690:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007694:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	791b      	ldrb	r3, [r3, #4]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d015      	beq.n	80076ca <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 814e 	beq.w	8007944 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	f003 030f 	and.w	r3, r3, #15
 80076b8:	2101      	movs	r1, #1
 80076ba:	fa01 f303 	lsl.w	r3, r1, r3
 80076be:	69f9      	ldr	r1, [r7, #28]
 80076c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076c4:	4313      	orrs	r3, r2
 80076c6:	634b      	str	r3, [r1, #52]	@ 0x34
 80076c8:	e13c      	b.n	8007944 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d110      	bne.n	80076fc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	0151      	lsls	r1, r2, #5
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	440a      	add	r2, r1
 80076f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	e00f      	b.n	800771c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	015a      	lsls	r2, r3, #5
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	4413      	add	r3, r2
 8007704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	0151      	lsls	r1, r2, #5
 800770e:	69fa      	ldr	r2, [r7, #28]
 8007710:	440a      	add	r2, r1
 8007712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800771a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	68d9      	ldr	r1, [r3, #12]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	781a      	ldrb	r2, [r3, #0]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	b298      	uxth	r0, r3
 800772a:	79fb      	ldrb	r3, [r7, #7]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	4603      	mov	r3, r0
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 f9b9 	bl	8007aa8 <USB_WritePacket>
 8007736:	e105      	b.n	8007944 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	69ba      	ldr	r2, [r7, #24]
 8007748:	0151      	lsls	r1, r2, #5
 800774a:	69fa      	ldr	r2, [r7, #28]
 800774c:	440a      	add	r2, r1
 800774e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007752:	0cdb      	lsrs	r3, r3, #19
 8007754:	04db      	lsls	r3, r3, #19
 8007756:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	4413      	add	r3, r2
 8007760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	0151      	lsls	r1, r2, #5
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	440a      	add	r2, r1
 800776e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007772:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007776:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800777a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d132      	bne.n	80077e8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a6:	691a      	ldr	r2, [r3, #16]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077b0:	69b9      	ldr	r1, [r7, #24]
 80077b2:	0148      	lsls	r0, r1, #5
 80077b4:	69f9      	ldr	r1, [r7, #28]
 80077b6:	4401      	add	r1, r0
 80077b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80077bc:	4313      	orrs	r3, r2
 80077be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	0151      	lsls	r1, r2, #5
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	440a      	add	r2, r1
 80077d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077de:	6113      	str	r3, [r2, #16]
 80077e0:	e062      	b.n	80078a8 <USB_EPStartXfer+0x490>
 80077e2:	bf00      	nop
 80077e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d123      	bne.n	8007838 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fc:	691a      	ldr	r2, [r3, #16]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007806:	69b9      	ldr	r1, [r7, #24]
 8007808:	0148      	lsls	r0, r1, #5
 800780a:	69f9      	ldr	r1, [r7, #28]
 800780c:	4401      	add	r1, r0
 800780e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007812:	4313      	orrs	r3, r2
 8007814:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	0151      	lsls	r1, r2, #5
 8007828:	69fa      	ldr	r2, [r7, #28]
 800782a:	440a      	add	r2, r1
 800782c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007830:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007834:	6113      	str	r3, [r2, #16]
 8007836:	e037      	b.n	80078a8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	691a      	ldr	r2, [r3, #16]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	4413      	add	r3, r2
 8007842:	1e5a      	subs	r2, r3, #1
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	fbb2 f3f3 	udiv	r3, r2, r3
 800784c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	8afa      	ldrh	r2, [r7, #22]
 8007854:	fb03 f202 	mul.w	r2, r3, r2
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007868:	691a      	ldr	r2, [r3, #16]
 800786a:	8afb      	ldrh	r3, [r7, #22]
 800786c:	04d9      	lsls	r1, r3, #19
 800786e:	4b38      	ldr	r3, [pc, #224]	@ (8007950 <USB_EPStartXfer+0x538>)
 8007870:	400b      	ands	r3, r1
 8007872:	69b9      	ldr	r1, [r7, #24]
 8007874:	0148      	lsls	r0, r1, #5
 8007876:	69f9      	ldr	r1, [r7, #28]
 8007878:	4401      	add	r1, r0
 800787a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800787e:	4313      	orrs	r3, r2
 8007880:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	4413      	add	r3, r2
 800788a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	6a1b      	ldr	r3, [r3, #32]
 8007894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007898:	69b9      	ldr	r1, [r7, #24]
 800789a:	0148      	lsls	r0, r1, #5
 800789c:	69f9      	ldr	r1, [r7, #28]
 800789e:	4401      	add	r1, r0
 80078a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078a4:	4313      	orrs	r3, r2
 80078a6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d10d      	bne.n	80078ca <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d009      	beq.n	80078ca <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	68d9      	ldr	r1, [r3, #12]
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c6:	460a      	mov	r2, r1
 80078c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	791b      	ldrb	r3, [r3, #4]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d128      	bne.n	8007924 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d110      	bne.n	8007904 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	0151      	lsls	r1, r2, #5
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	440a      	add	r2, r1
 80078f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	e00f      	b.n	8007924 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	0151      	lsls	r1, r2, #5
 8007916:	69fa      	ldr	r2, [r7, #28]
 8007918:	440a      	add	r2, r1
 800791a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800791e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007922:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	0151      	lsls	r1, r2, #5
 8007936:	69fa      	ldr	r2, [r7, #28]
 8007938:	440a      	add	r2, r1
 800793a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800793e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007942:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3720      	adds	r7, #32
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	1ff80000 	.word	0x1ff80000

08007954 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	785b      	ldrb	r3, [r3, #1]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d14a      	bne.n	8007a08 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007986:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800798a:	f040 8086 	bne.w	8007a9a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	7812      	ldrb	r2, [r2, #0]
 80079a2:	0151      	lsls	r1, r2, #5
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	440a      	add	r2, r1
 80079a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80079b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	7812      	ldrb	r2, [r2, #0]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3301      	adds	r3, #1
 80079da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d902      	bls.n	80079ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	75fb      	strb	r3, [r7, #23]
          break;
 80079ea:	e056      	b.n	8007a9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a04:	d0e7      	beq.n	80079d6 <USB_EPStopXfer+0x82>
 8007a06:	e048      	b.n	8007a9a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a20:	d13b      	bne.n	8007a9a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	7812      	ldrb	r2, [r2, #0]
 8007a36:	0151      	lsls	r1, r2, #5
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	440a      	add	r2, r1
 8007a3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a44:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	7812      	ldrb	r2, [r2, #0]
 8007a5a:	0151      	lsls	r1, r2, #5
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	440a      	add	r2, r1
 8007a60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d902      	bls.n	8007a80 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a7e:	e00c      	b.n	8007a9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a98:	d0e7      	beq.n	8007a6a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	371c      	adds	r7, #28
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b089      	sub	sp, #36	@ 0x24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	71fb      	strb	r3, [r7, #7]
 8007aba:	4613      	mov	r3, r2
 8007abc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ac6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d123      	bne.n	8007b16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ace:	88bb      	ldrh	r3, [r7, #4]
 8007ad0:	3303      	adds	r3, #3
 8007ad2:	089b      	lsrs	r3, r3, #2
 8007ad4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61bb      	str	r3, [r7, #24]
 8007ada:	e018      	b.n	8007b0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	031a      	lsls	r2, r3, #12
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ae8:	461a      	mov	r2, r3
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	3301      	adds	r3, #1
 8007af4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	3301      	adds	r3, #1
 8007afa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	3301      	adds	r3, #1
 8007b00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	3301      	adds	r3, #1
 8007b06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	61bb      	str	r3, [r7, #24]
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d3e2      	bcc.n	8007adc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3724      	adds	r7, #36	@ 0x24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b08b      	sub	sp, #44	@ 0x2c
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b3a:	88fb      	ldrh	r3, [r7, #6]
 8007b3c:	089b      	lsrs	r3, r3, #2
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b42:	88fb      	ldrh	r3, [r7, #6]
 8007b44:	f003 0303 	and.w	r3, r3, #3
 8007b48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	623b      	str	r3, [r7, #32]
 8007b4e:	e014      	b.n	8007b7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5e:	3301      	adds	r3, #1
 8007b60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b64:	3301      	adds	r3, #1
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b70:	3301      	adds	r3, #1
 8007b72:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	3301      	adds	r3, #1
 8007b78:	623b      	str	r3, [r7, #32]
 8007b7a:	6a3a      	ldr	r2, [r7, #32]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d3e6      	bcc.n	8007b50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b82:	8bfb      	ldrh	r3, [r7, #30]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01e      	beq.n	8007bc6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b92:	461a      	mov	r2, r3
 8007b94:	f107 0310 	add.w	r3, r7, #16
 8007b98:	6812      	ldr	r2, [r2, #0]
 8007b9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bac:	701a      	strb	r2, [r3, #0]
      i++;
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007bba:	8bfb      	ldrh	r3, [r7, #30]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007bc0:	8bfb      	ldrh	r3, [r7, #30]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1ea      	bne.n	8007b9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	372c      	adds	r7, #44	@ 0x2c
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	785b      	ldrb	r3, [r3, #1]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d12c      	bne.n	8007c4a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	db12      	blt.n	8007c28 <USB_EPSetStall+0x54>
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00f      	beq.n	8007c28 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c22:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c26:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	0151      	lsls	r1, r2, #5
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	440a      	add	r2, r1
 8007c3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	e02b      	b.n	8007ca2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	db12      	blt.n	8007c82 <USB_EPSetStall+0xae>
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00f      	beq.n	8007c82 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	0151      	lsls	r1, r2, #5
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	440a      	add	r2, r1
 8007c78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c7c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c80:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	0151      	lsls	r1, r2, #5
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	440a      	add	r2, r1
 8007c98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ca0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	785b      	ldrb	r3, [r3, #1]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d128      	bne.n	8007d1e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	0151      	lsls	r1, r2, #5
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	440a      	add	r2, r1
 8007ce2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ce6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007cea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	791b      	ldrb	r3, [r3, #4]
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d003      	beq.n	8007cfc <USB_EPClearStall+0x4c>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	791b      	ldrb	r3, [r3, #4]
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d138      	bne.n	8007d6e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	0151      	lsls	r1, r2, #5
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	440a      	add	r2, r1
 8007d12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	e027      	b.n	8007d6e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	0151      	lsls	r1, r2, #5
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	440a      	add	r2, r1
 8007d34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d38:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	791b      	ldrb	r3, [r3, #4]
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d003      	beq.n	8007d4e <USB_EPClearStall+0x9e>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	791b      	ldrb	r3, [r3, #4]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d10f      	bne.n	8007d6e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	0151      	lsls	r1, r2, #5
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	440a      	add	r2, r1
 8007d64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d6c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d9a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007d9e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	011b      	lsls	r3, r3, #4
 8007dac:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007db0:	68f9      	ldr	r1, [r7, #12]
 8007db2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007db6:	4313      	orrs	r3, r2
 8007db8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007de2:	f023 0303 	bic.w	r3, r3, #3
 8007de6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007df6:	f023 0302 	bic.w	r3, r3, #2
 8007dfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b085      	sub	sp, #20
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e24:	f023 0303 	bic.w	r3, r3, #3
 8007e28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e38:	f043 0302 	orr.w	r3, r3, #2
 8007e3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4013      	ands	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e64:	68fb      	ldr	r3, [r7, #12]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	4013      	ands	r3, r2
 8007e94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	0c1b      	lsrs	r3, r3, #16
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	b29b      	uxth	r3, r3
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b085      	sub	sp, #20
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007eea:	78fb      	ldrb	r3, [r7, #3]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	4013      	ands	r3, r2
 8007f06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f08:	68bb      	ldr	r3, [r7, #8]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b087      	sub	sp, #28
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	f003 030f 	and.w	r3, r3, #15
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	fa22 f303 	lsr.w	r3, r2, r3
 8007f46:	01db      	lsls	r3, r3, #7
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	4013      	ands	r3, r2
 8007f62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f64:	68bb      	ldr	r3, [r7, #8]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	f003 0301 	and.w	r3, r3, #1
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b085      	sub	sp, #20
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fa8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007fac:	f023 0307 	bic.w	r3, r3, #7
 8007fb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	607a      	str	r2, [r7, #4]
 8007fe0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	333c      	adds	r3, #60	@ 0x3c
 8007fea:	3304      	adds	r3, #4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	4a26      	ldr	r2, [pc, #152]	@ (800808c <USB_EP0_OutStart+0xb8>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d90a      	bls.n	800800e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008004:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008008:	d101      	bne.n	800800e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	e037      	b.n	800807e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008014:	461a      	mov	r2, r3
 8008016:	2300      	movs	r3, #0
 8008018:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008028:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800802c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800803c:	f043 0318 	orr.w	r3, r3, #24
 8008040:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008050:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008054:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008056:	7afb      	ldrb	r3, [r7, #11]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d10f      	bne.n	800807c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008062:	461a      	mov	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008076:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800807a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	371c      	adds	r7, #28
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	4f54300a 	.word	0x4f54300a

08008090 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3301      	adds	r3, #1
 80080a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080a8:	d901      	bls.n	80080ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e01b      	b.n	80080e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	daf2      	bge.n	800809c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	f043 0201 	orr.w	r2, r3, #1
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3301      	adds	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080d2:	d901      	bls.n	80080d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e006      	b.n	80080e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d0f0      	beq.n	80080c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
	...

080080f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008100:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008104:	f002 fc9e 	bl	800aa44 <USBD_static_malloc>
 8008108:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d109      	bne.n	8008124 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	32b0      	adds	r2, #176	@ 0xb0
 800811a:	2100      	movs	r1, #0
 800811c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008120:	2302      	movs	r3, #2
 8008122:	e0d4      	b.n	80082ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008124:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008128:	2100      	movs	r1, #0
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f003 fa5f 	bl	800b5ee <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	32b0      	adds	r2, #176	@ 0xb0
 800813a:	68f9      	ldr	r1, [r7, #12]
 800813c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	32b0      	adds	r2, #176	@ 0xb0
 800814a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7c1b      	ldrb	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d138      	bne.n	80081ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800815c:	4b5e      	ldr	r3, [pc, #376]	@ (80082d8 <USBD_CDC_Init+0x1e4>)
 800815e:	7819      	ldrb	r1, [r3, #0]
 8008160:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008164:	2202      	movs	r2, #2
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f002 fb49 	bl	800a7fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800816c:	4b5a      	ldr	r3, [pc, #360]	@ (80082d8 <USBD_CDC_Init+0x1e4>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f003 020f 	and.w	r2, r3, #15
 8008174:	6879      	ldr	r1, [r7, #4]
 8008176:	4613      	mov	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	440b      	add	r3, r1
 8008180:	3324      	adds	r3, #36	@ 0x24
 8008182:	2201      	movs	r2, #1
 8008184:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008186:	4b55      	ldr	r3, [pc, #340]	@ (80082dc <USBD_CDC_Init+0x1e8>)
 8008188:	7819      	ldrb	r1, [r3, #0]
 800818a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800818e:	2202      	movs	r2, #2
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f002 fb34 	bl	800a7fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008196:	4b51      	ldr	r3, [pc, #324]	@ (80082dc <USBD_CDC_Init+0x1e8>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	f003 020f 	and.w	r2, r3, #15
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	440b      	add	r3, r1
 80081aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80081ae:	2201      	movs	r2, #1
 80081b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80081b2:	4b4b      	ldr	r3, [pc, #300]	@ (80082e0 <USBD_CDC_Init+0x1ec>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	f003 020f 	and.w	r2, r3, #15
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	4613      	mov	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	3326      	adds	r3, #38	@ 0x26
 80081c8:	2210      	movs	r2, #16
 80081ca:	801a      	strh	r2, [r3, #0]
 80081cc:	e035      	b.n	800823a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80081ce:	4b42      	ldr	r3, [pc, #264]	@ (80082d8 <USBD_CDC_Init+0x1e4>)
 80081d0:	7819      	ldrb	r1, [r3, #0]
 80081d2:	2340      	movs	r3, #64	@ 0x40
 80081d4:	2202      	movs	r2, #2
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f002 fb11 	bl	800a7fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80081dc:	4b3e      	ldr	r3, [pc, #248]	@ (80082d8 <USBD_CDC_Init+0x1e4>)
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	f003 020f 	and.w	r2, r3, #15
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	4613      	mov	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	440b      	add	r3, r1
 80081f0:	3324      	adds	r3, #36	@ 0x24
 80081f2:	2201      	movs	r2, #1
 80081f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80081f6:	4b39      	ldr	r3, [pc, #228]	@ (80082dc <USBD_CDC_Init+0x1e8>)
 80081f8:	7819      	ldrb	r1, [r3, #0]
 80081fa:	2340      	movs	r3, #64	@ 0x40
 80081fc:	2202      	movs	r2, #2
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f002 fafd 	bl	800a7fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008204:	4b35      	ldr	r3, [pc, #212]	@ (80082dc <USBD_CDC_Init+0x1e8>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	f003 020f 	and.w	r2, r3, #15
 800820c:	6879      	ldr	r1, [r7, #4]
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	440b      	add	r3, r1
 8008218:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800821c:	2201      	movs	r2, #1
 800821e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008220:	4b2f      	ldr	r3, [pc, #188]	@ (80082e0 <USBD_CDC_Init+0x1ec>)
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	f003 020f 	and.w	r2, r3, #15
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	440b      	add	r3, r1
 8008234:	3326      	adds	r3, #38	@ 0x26
 8008236:	2210      	movs	r2, #16
 8008238:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800823a:	4b29      	ldr	r3, [pc, #164]	@ (80082e0 <USBD_CDC_Init+0x1ec>)
 800823c:	7819      	ldrb	r1, [r3, #0]
 800823e:	2308      	movs	r3, #8
 8008240:	2203      	movs	r2, #3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f002 fadb 	bl	800a7fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008248:	4b25      	ldr	r3, [pc, #148]	@ (80082e0 <USBD_CDC_Init+0x1ec>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	f003 020f 	and.w	r2, r3, #15
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	440b      	add	r3, r1
 800825c:	3324      	adds	r3, #36	@ 0x24
 800825e:	2201      	movs	r2, #1
 8008260:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	33b0      	adds	r3, #176	@ 0xb0
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008298:	2302      	movs	r3, #2
 800829a:	e018      	b.n	80082ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	7c1b      	ldrb	r3, [r3, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10a      	bne.n	80082ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082a4:	4b0d      	ldr	r3, [pc, #52]	@ (80082dc <USBD_CDC_Init+0x1e8>)
 80082a6:	7819      	ldrb	r1, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f002 fb92 	bl	800a9dc <USBD_LL_PrepareReceive>
 80082b8:	e008      	b.n	80082cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082ba:	4b08      	ldr	r3, [pc, #32]	@ (80082dc <USBD_CDC_Init+0x1e8>)
 80082bc:	7819      	ldrb	r1, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082c4:	2340      	movs	r3, #64	@ 0x40
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f002 fb88 	bl	800a9dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	200000cf 	.word	0x200000cf
 80082dc:	200000d0 	.word	0x200000d0
 80082e0:	200000d1 	.word	0x200000d1

080082e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80082f0:	4b3a      	ldr	r3, [pc, #232]	@ (80083dc <USBD_CDC_DeInit+0xf8>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f002 faa7 	bl	800a84a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80082fc:	4b37      	ldr	r3, [pc, #220]	@ (80083dc <USBD_CDC_DeInit+0xf8>)
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	f003 020f 	and.w	r2, r3, #15
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	440b      	add	r3, r1
 8008310:	3324      	adds	r3, #36	@ 0x24
 8008312:	2200      	movs	r2, #0
 8008314:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008316:	4b32      	ldr	r3, [pc, #200]	@ (80083e0 <USBD_CDC_DeInit+0xfc>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f002 fa94 	bl	800a84a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008322:	4b2f      	ldr	r3, [pc, #188]	@ (80083e0 <USBD_CDC_DeInit+0xfc>)
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	f003 020f 	and.w	r2, r3, #15
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	4613      	mov	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800833a:	2200      	movs	r2, #0
 800833c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800833e:	4b29      	ldr	r3, [pc, #164]	@ (80083e4 <USBD_CDC_DeInit+0x100>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f002 fa80 	bl	800a84a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800834a:	4b26      	ldr	r3, [pc, #152]	@ (80083e4 <USBD_CDC_DeInit+0x100>)
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	f003 020f 	and.w	r2, r3, #15
 8008352:	6879      	ldr	r1, [r7, #4]
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	440b      	add	r3, r1
 800835e:	3324      	adds	r3, #36	@ 0x24
 8008360:	2200      	movs	r2, #0
 8008362:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008364:	4b1f      	ldr	r3, [pc, #124]	@ (80083e4 <USBD_CDC_DeInit+0x100>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	f003 020f 	and.w	r2, r3, #15
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	4613      	mov	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	440b      	add	r3, r1
 8008378:	3326      	adds	r3, #38	@ 0x26
 800837a:	2200      	movs	r2, #0
 800837c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	32b0      	adds	r2, #176	@ 0xb0
 8008388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01f      	beq.n	80083d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	33b0      	adds	r3, #176	@ 0xb0
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	32b0      	adds	r2, #176	@ 0xb0
 80083ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f002 fb54 	bl	800aa60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	32b0      	adds	r2, #176	@ 0xb0
 80083c2:	2100      	movs	r1, #0
 80083c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	200000cf 	.word	0x200000cf
 80083e0:	200000d0 	.word	0x200000d0
 80083e4:	200000d1 	.word	0x200000d1

080083e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	32b0      	adds	r2, #176	@ 0xb0
 80083fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008400:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008414:	2303      	movs	r3, #3
 8008416:	e0bf      	b.n	8008598 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008420:	2b00      	cmp	r3, #0
 8008422:	d050      	beq.n	80084c6 <USBD_CDC_Setup+0xde>
 8008424:	2b20      	cmp	r3, #32
 8008426:	f040 80af 	bne.w	8008588 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	88db      	ldrh	r3, [r3, #6]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d03a      	beq.n	80084a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	b25b      	sxtb	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	da1b      	bge.n	8008474 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	33b0      	adds	r3, #176	@ 0xb0
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4413      	add	r3, r2
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008452:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	88d2      	ldrh	r2, [r2, #6]
 8008458:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	88db      	ldrh	r3, [r3, #6]
 800845e:	2b07      	cmp	r3, #7
 8008460:	bf28      	it	cs
 8008462:	2307      	movcs	r3, #7
 8008464:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	89fa      	ldrh	r2, [r7, #14]
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f001 fd93 	bl	8009f98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008472:	e090      	b.n	8008596 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	785a      	ldrb	r2, [r3, #1]
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	88db      	ldrh	r3, [r3, #6]
 8008482:	2b3f      	cmp	r3, #63	@ 0x3f
 8008484:	d803      	bhi.n	800848e <USBD_CDC_Setup+0xa6>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	88db      	ldrh	r3, [r3, #6]
 800848a:	b2da      	uxtb	r2, r3
 800848c:	e000      	b.n	8008490 <USBD_CDC_Setup+0xa8>
 800848e:	2240      	movs	r2, #64	@ 0x40
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008496:	6939      	ldr	r1, [r7, #16]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800849e:	461a      	mov	r2, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f001 fda5 	bl	8009ff0 <USBD_CtlPrepareRx>
      break;
 80084a6:	e076      	b.n	8008596 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	33b0      	adds	r3, #176	@ 0xb0
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	7850      	ldrb	r0, [r2, #1]
 80084be:	2200      	movs	r2, #0
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	4798      	blx	r3
      break;
 80084c4:	e067      	b.n	8008596 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	785b      	ldrb	r3, [r3, #1]
 80084ca:	2b0b      	cmp	r3, #11
 80084cc:	d851      	bhi.n	8008572 <USBD_CDC_Setup+0x18a>
 80084ce:	a201      	add	r2, pc, #4	@ (adr r2, 80084d4 <USBD_CDC_Setup+0xec>)
 80084d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d4:	08008505 	.word	0x08008505
 80084d8:	08008581 	.word	0x08008581
 80084dc:	08008573 	.word	0x08008573
 80084e0:	08008573 	.word	0x08008573
 80084e4:	08008573 	.word	0x08008573
 80084e8:	08008573 	.word	0x08008573
 80084ec:	08008573 	.word	0x08008573
 80084f0:	08008573 	.word	0x08008573
 80084f4:	08008573 	.word	0x08008573
 80084f8:	08008573 	.word	0x08008573
 80084fc:	0800852f 	.word	0x0800852f
 8008500:	08008559 	.word	0x08008559
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b03      	cmp	r3, #3
 800850e:	d107      	bne.n	8008520 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008510:	f107 030a 	add.w	r3, r7, #10
 8008514:	2202      	movs	r2, #2
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f001 fd3d 	bl	8009f98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800851e:	e032      	b.n	8008586 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 fcbb 	bl	8009e9e <USBD_CtlError>
            ret = USBD_FAIL;
 8008528:	2303      	movs	r3, #3
 800852a:	75fb      	strb	r3, [r7, #23]
          break;
 800852c:	e02b      	b.n	8008586 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b03      	cmp	r3, #3
 8008538:	d107      	bne.n	800854a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800853a:	f107 030d 	add.w	r3, r7, #13
 800853e:	2201      	movs	r2, #1
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 fd28 	bl	8009f98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008548:	e01d      	b.n	8008586 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f001 fca6 	bl	8009e9e <USBD_CtlError>
            ret = USBD_FAIL;
 8008552:	2303      	movs	r3, #3
 8008554:	75fb      	strb	r3, [r7, #23]
          break;
 8008556:	e016      	b.n	8008586 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b03      	cmp	r3, #3
 8008562:	d00f      	beq.n	8008584 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f001 fc99 	bl	8009e9e <USBD_CtlError>
            ret = USBD_FAIL;
 800856c:	2303      	movs	r3, #3
 800856e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008570:	e008      	b.n	8008584 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f001 fc92 	bl	8009e9e <USBD_CtlError>
          ret = USBD_FAIL;
 800857a:	2303      	movs	r3, #3
 800857c:	75fb      	strb	r3, [r7, #23]
          break;
 800857e:	e002      	b.n	8008586 <USBD_CDC_Setup+0x19e>
          break;
 8008580:	bf00      	nop
 8008582:	e008      	b.n	8008596 <USBD_CDC_Setup+0x1ae>
          break;
 8008584:	bf00      	nop
      }
      break;
 8008586:	e006      	b.n	8008596 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f001 fc87 	bl	8009e9e <USBD_CtlError>
      ret = USBD_FAIL;
 8008590:	2303      	movs	r3, #3
 8008592:	75fb      	strb	r3, [r7, #23]
      break;
 8008594:	bf00      	nop
  }

  return (uint8_t)ret;
 8008596:	7dfb      	ldrb	r3, [r7, #23]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	32b0      	adds	r2, #176	@ 0xb0
 80085be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e065      	b.n	8008696 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	32b0      	adds	r2, #176	@ 0xb0
 80085d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80085da:	78fb      	ldrb	r3, [r7, #3]
 80085dc:	f003 020f 	and.w	r2, r3, #15
 80085e0:	6879      	ldr	r1, [r7, #4]
 80085e2:	4613      	mov	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	440b      	add	r3, r1
 80085ec:	3318      	adds	r3, #24
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d02f      	beq.n	8008654 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80085f4:	78fb      	ldrb	r3, [r7, #3]
 80085f6:	f003 020f 	and.w	r2, r3, #15
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	3318      	adds	r3, #24
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	f003 010f 	and.w	r1, r3, #15
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	460b      	mov	r3, r1
 8008614:	00db      	lsls	r3, r3, #3
 8008616:	440b      	add	r3, r1
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4403      	add	r3, r0
 800861c:	331c      	adds	r3, #28
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	fbb2 f1f3 	udiv	r1, r2, r3
 8008624:	fb01 f303 	mul.w	r3, r1, r3
 8008628:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800862a:	2b00      	cmp	r3, #0
 800862c:	d112      	bne.n	8008654 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	f003 020f 	and.w	r2, r3, #15
 8008634:	6879      	ldr	r1, [r7, #4]
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	440b      	add	r3, r1
 8008640:	3318      	adds	r3, #24
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008646:	78f9      	ldrb	r1, [r7, #3]
 8008648:	2300      	movs	r3, #0
 800864a:	2200      	movs	r2, #0
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f002 f9a4 	bl	800a99a <USBD_LL_Transmit>
 8008652:	e01f      	b.n	8008694 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2200      	movs	r2, #0
 8008658:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	33b0      	adds	r3, #176	@ 0xb0
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d010      	beq.n	8008694 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	33b0      	adds	r3, #176	@ 0xb0
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008690:	78fa      	ldrb	r2, [r7, #3]
 8008692:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	32b0      	adds	r2, #176	@ 0xb0
 80086b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	32b0      	adds	r2, #176	@ 0xb0
 80086c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e01a      	b.n	8008706 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f002 f9a2 	bl	800aa1e <USBD_LL_GetRxDataSize>
 80086da:	4602      	mov	r2, r0
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	33b0      	adds	r3, #176	@ 0xb0
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008700:	4611      	mov	r1, r2
 8008702:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	32b0      	adds	r2, #176	@ 0xb0
 8008720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008724:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800872c:	2303      	movs	r3, #3
 800872e:	e024      	b.n	800877a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	33b0      	adds	r3, #176	@ 0xb0
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d019      	beq.n	8008778 <USBD_CDC_EP0_RxReady+0x6a>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800874a:	2bff      	cmp	r3, #255	@ 0xff
 800874c:	d014      	beq.n	8008778 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	33b0      	adds	r3, #176	@ 0xb0
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008766:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800876e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	22ff      	movs	r2, #255	@ 0xff
 8008774:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
	...

08008784 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800878c:	2182      	movs	r1, #130	@ 0x82
 800878e:	4818      	ldr	r0, [pc, #96]	@ (80087f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008790:	f000 fd4f 	bl	8009232 <USBD_GetEpDesc>
 8008794:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008796:	2101      	movs	r1, #1
 8008798:	4815      	ldr	r0, [pc, #84]	@ (80087f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800879a:	f000 fd4a 	bl	8009232 <USBD_GetEpDesc>
 800879e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087a0:	2181      	movs	r1, #129	@ 0x81
 80087a2:	4813      	ldr	r0, [pc, #76]	@ (80087f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087a4:	f000 fd45 	bl	8009232 <USBD_GetEpDesc>
 80087a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2210      	movs	r2, #16
 80087b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d006      	beq.n	80087ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	2200      	movs	r2, #0
 80087c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087c4:	711a      	strb	r2, [r3, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d006      	beq.n	80087de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087d8:	711a      	strb	r2, [r3, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2243      	movs	r2, #67	@ 0x43
 80087e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80087e4:	4b02      	ldr	r3, [pc, #8]	@ (80087f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	2000008c 	.word	0x2000008c

080087f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087fc:	2182      	movs	r1, #130	@ 0x82
 80087fe:	4818      	ldr	r0, [pc, #96]	@ (8008860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008800:	f000 fd17 	bl	8009232 <USBD_GetEpDesc>
 8008804:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008806:	2101      	movs	r1, #1
 8008808:	4815      	ldr	r0, [pc, #84]	@ (8008860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800880a:	f000 fd12 	bl	8009232 <USBD_GetEpDesc>
 800880e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008810:	2181      	movs	r1, #129	@ 0x81
 8008812:	4813      	ldr	r0, [pc, #76]	@ (8008860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008814:	f000 fd0d 	bl	8009232 <USBD_GetEpDesc>
 8008818:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	2210      	movs	r2, #16
 8008824:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d006      	beq.n	800883a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2200      	movs	r2, #0
 8008830:	711a      	strb	r2, [r3, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f042 0202 	orr.w	r2, r2, #2
 8008838:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d006      	beq.n	800884e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	711a      	strb	r2, [r3, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f042 0202 	orr.w	r2, r2, #2
 800884c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2243      	movs	r2, #67	@ 0x43
 8008852:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008854:	4b02      	ldr	r3, [pc, #8]	@ (8008860 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008856:	4618      	mov	r0, r3
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	2000008c 	.word	0x2000008c

08008864 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800886c:	2182      	movs	r1, #130	@ 0x82
 800886e:	4818      	ldr	r0, [pc, #96]	@ (80088d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008870:	f000 fcdf 	bl	8009232 <USBD_GetEpDesc>
 8008874:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008876:	2101      	movs	r1, #1
 8008878:	4815      	ldr	r0, [pc, #84]	@ (80088d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800887a:	f000 fcda 	bl	8009232 <USBD_GetEpDesc>
 800887e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008880:	2181      	movs	r1, #129	@ 0x81
 8008882:	4813      	ldr	r0, [pc, #76]	@ (80088d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008884:	f000 fcd5 	bl	8009232 <USBD_GetEpDesc>
 8008888:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2210      	movs	r2, #16
 8008894:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d006      	beq.n	80088aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	2200      	movs	r2, #0
 80088a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088a4:	711a      	strb	r2, [r3, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d006      	beq.n	80088be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088b8:	711a      	strb	r2, [r3, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2243      	movs	r2, #67	@ 0x43
 80088c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088c4:	4b02      	ldr	r3, [pc, #8]	@ (80088d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	2000008c 	.word	0x2000008c

080088d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	220a      	movs	r2, #10
 80088e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80088e2:	4b03      	ldr	r3, [pc, #12]	@ (80088f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	20000048 	.word	0x20000048

080088f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008904:	2303      	movs	r3, #3
 8008906:	e009      	b.n	800891c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	33b0      	adds	r3, #176	@ 0xb0
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	32b0      	adds	r2, #176	@ 0xb0
 800893e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008942:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800894a:	2303      	movs	r3, #3
 800894c:	e008      	b.n	8008960 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	371c      	adds	r7, #28
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	32b0      	adds	r2, #176	@ 0xb0
 8008980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008984:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800898c:	2303      	movs	r3, #3
 800898e:	e004      	b.n	800899a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
	...

080089a8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	32b0      	adds	r2, #176	@ 0xb0
 80089ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089be:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80089c0:	2301      	movs	r3, #1
 80089c2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e025      	b.n	8008a1a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d11f      	bne.n	8008a18 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	2201      	movs	r2, #1
 80089dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80089e0:	4b10      	ldr	r3, [pc, #64]	@ (8008a24 <USBD_CDC_TransmitPacket+0x7c>)
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	f003 020f 	and.w	r2, r3, #15
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4403      	add	r3, r0
 80089fa:	3318      	adds	r3, #24
 80089fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80089fe:	4b09      	ldr	r3, [pc, #36]	@ (8008a24 <USBD_CDC_TransmitPacket+0x7c>)
 8008a00:	7819      	ldrb	r1, [r3, #0]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f001 ffc3 	bl	800a99a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	200000cf 	.word	0x200000cf

08008a28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	32b0      	adds	r2, #176	@ 0xb0
 8008a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	32b0      	adds	r2, #176	@ 0xb0
 8008a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e018      	b.n	8008a88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	7c1b      	ldrb	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10a      	bne.n	8008a74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008a90 <USBD_CDC_ReceivePacket+0x68>)
 8008a60:	7819      	ldrb	r1, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 ffb5 	bl	800a9dc <USBD_LL_PrepareReceive>
 8008a72:	e008      	b.n	8008a86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a74:	4b06      	ldr	r3, [pc, #24]	@ (8008a90 <USBD_CDC_ReceivePacket+0x68>)
 8008a76:	7819      	ldrb	r1, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a7e:	2340      	movs	r3, #64	@ 0x40
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f001 ffab 	bl	800a9dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	200000d0 	.word	0x200000d0

08008a94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e01f      	b.n	8008aec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	79fa      	ldrb	r2, [r7, #7]
 8008ade:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f001 fe25 	bl	800a730 <USBD_LL_Init>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e025      	b.n	8008b58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	32ae      	adds	r2, #174	@ 0xae
 8008b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00f      	beq.n	8008b48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	32ae      	adds	r2, #174	@ 0xae
 8008b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b38:	f107 020e 	add.w	r2, r7, #14
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	4798      	blx	r3
 8008b40:	4602      	mov	r2, r0
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008b4e:	1c5a      	adds	r2, r3, #1
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f001 fe2d 	bl	800a7c8 <USBD_LL_Start>
 8008b6e:	4603      	mov	r3, r0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d009      	beq.n	8008bbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	78fa      	ldrb	r2, [r7, #3]
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	4798      	blx	r3
 8008bb8:	4603      	mov	r3, r0
 8008bba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	78fa      	ldrb	r2, [r7, #3]
 8008be0:	4611      	mov	r1, r2
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	4798      	blx	r3
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008bec:	2303      	movs	r3, #3
 8008bee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f001 f90c 	bl	8009e2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008c20:	461a      	mov	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008c2e:	f003 031f 	and.w	r3, r3, #31
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d01a      	beq.n	8008c6c <USBD_LL_SetupStage+0x72>
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d822      	bhi.n	8008c80 <USBD_LL_SetupStage+0x86>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <USBD_LL_SetupStage+0x4a>
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d00a      	beq.n	8008c58 <USBD_LL_SetupStage+0x5e>
 8008c42:	e01d      	b.n	8008c80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fb63 	bl	8009318 <USBD_StdDevReq>
 8008c52:	4603      	mov	r3, r0
 8008c54:	73fb      	strb	r3, [r7, #15]
      break;
 8008c56:	e020      	b.n	8008c9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fbcb 	bl	80093fc <USBD_StdItfReq>
 8008c66:	4603      	mov	r3, r0
 8008c68:	73fb      	strb	r3, [r7, #15]
      break;
 8008c6a:	e016      	b.n	8008c9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fc2d 	bl	80094d4 <USBD_StdEPReq>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8008c7e:	e00c      	b.n	8008c9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008c86:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f001 fdfa 	bl	800a888 <USBD_LL_StallEP>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73fb      	strb	r3, [r7, #15]
      break;
 8008c98:	bf00      	nop
  }

  return ret;
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	460b      	mov	r3, r1
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008cb6:	7afb      	ldrb	r3, [r7, #11]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d16e      	bne.n	8008d9a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008cc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	f040 8098 	bne.w	8008e00 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	689a      	ldr	r2, [r3, #8]
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d913      	bls.n	8008d04 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	689a      	ldr	r2, [r3, #8]
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	1ad2      	subs	r2, r2, r3
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	68da      	ldr	r2, [r3, #12]
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	bf28      	it	cs
 8008cf6:	4613      	movcs	r3, r2
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f001 f994 	bl	800a02a <USBD_CtlContinueRx>
 8008d02:	e07d      	b.n	8008e00 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d0a:	f003 031f 	and.w	r3, r3, #31
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d014      	beq.n	8008d3c <USBD_LL_DataOutStage+0x98>
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d81d      	bhi.n	8008d52 <USBD_LL_DataOutStage+0xae>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d002      	beq.n	8008d20 <USBD_LL_DataOutStage+0x7c>
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d003      	beq.n	8008d26 <USBD_LL_DataOutStage+0x82>
 8008d1e:	e018      	b.n	8008d52 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	75bb      	strb	r3, [r7, #22]
            break;
 8008d24:	e018      	b.n	8008d58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	4619      	mov	r1, r3
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 fa64 	bl	80091fe <USBD_CoreFindIF>
 8008d36:	4603      	mov	r3, r0
 8008d38:	75bb      	strb	r3, [r7, #22]
            break;
 8008d3a:	e00d      	b.n	8008d58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	4619      	mov	r1, r3
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 fa66 	bl	8009218 <USBD_CoreFindEP>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	75bb      	strb	r3, [r7, #22]
            break;
 8008d50:	e002      	b.n	8008d58 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008d52:	2300      	movs	r3, #0
 8008d54:	75bb      	strb	r3, [r7, #22]
            break;
 8008d56:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008d58:	7dbb      	ldrb	r3, [r7, #22]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d119      	bne.n	8008d92 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d113      	bne.n	8008d92 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008d6a:	7dba      	ldrb	r2, [r7, #22]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	32ae      	adds	r2, #174	@ 0xae
 8008d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00b      	beq.n	8008d92 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008d7a:	7dba      	ldrb	r2, [r7, #22]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008d82:	7dba      	ldrb	r2, [r7, #22]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	32ae      	adds	r2, #174	@ 0xae
 8008d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f001 f95a 	bl	800a04c <USBD_CtlSendStatus>
 8008d98:	e032      	b.n	8008e00 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008d9a:	7afb      	ldrb	r3, [r7, #11]
 8008d9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	4619      	mov	r1, r3
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f000 fa37 	bl	8009218 <USBD_CoreFindEP>
 8008daa:	4603      	mov	r3, r0
 8008dac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dae:	7dbb      	ldrb	r3, [r7, #22]
 8008db0:	2bff      	cmp	r3, #255	@ 0xff
 8008db2:	d025      	beq.n	8008e00 <USBD_LL_DataOutStage+0x15c>
 8008db4:	7dbb      	ldrb	r3, [r7, #22]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d122      	bne.n	8008e00 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d117      	bne.n	8008df6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008dc6:	7dba      	ldrb	r2, [r7, #22]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	32ae      	adds	r2, #174	@ 0xae
 8008dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00f      	beq.n	8008df6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008dd6:	7dba      	ldrb	r2, [r7, #22]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008dde:	7dba      	ldrb	r2, [r7, #22]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	32ae      	adds	r2, #174	@ 0xae
 8008de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	7afa      	ldrb	r2, [r7, #11]
 8008dec:	4611      	mov	r1, r2
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	4798      	blx	r3
 8008df2:	4603      	mov	r3, r0
 8008df4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008df6:	7dfb      	ldrb	r3, [r7, #23]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008dfc:	7dfb      	ldrb	r3, [r7, #23]
 8008dfe:	e000      	b.n	8008e02 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b086      	sub	sp, #24
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	460b      	mov	r3, r1
 8008e14:	607a      	str	r2, [r7, #4]
 8008e16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008e18:	7afb      	ldrb	r3, [r7, #11]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d16f      	bne.n	8008efe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3314      	adds	r3, #20
 8008e22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d15a      	bne.n	8008ee4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	689a      	ldr	r2, [r3, #8]
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d914      	bls.n	8008e64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	689a      	ldr	r2, [r3, #8]
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	1ad2      	subs	r2, r2, r3
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f001 f8bc 	bl	8009fce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e56:	2300      	movs	r3, #0
 8008e58:	2200      	movs	r2, #0
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f001 fdbd 	bl	800a9dc <USBD_LL_PrepareReceive>
 8008e62:	e03f      	b.n	8008ee4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	68da      	ldr	r2, [r3, #12]
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d11c      	bne.n	8008eaa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d316      	bcc.n	8008eaa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d20f      	bcs.n	8008eaa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f001 f89d 	bl	8009fce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f001 fd9a 	bl	800a9dc <USBD_LL_PrepareReceive>
 8008ea8:	e01c      	b.n	8008ee4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	d10f      	bne.n	8008ed6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ed6:	2180      	movs	r1, #128	@ 0x80
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f001 fcd5 	bl	800a888 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f001 f8c7 	bl	800a072 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d03a      	beq.n	8008f64 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f7ff fe42 	bl	8008b78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008efc:	e032      	b.n	8008f64 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008efe:	7afb      	ldrb	r3, [r7, #11]
 8008f00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	4619      	mov	r1, r3
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 f985 	bl	8009218 <USBD_CoreFindEP>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f12:	7dfb      	ldrb	r3, [r7, #23]
 8008f14:	2bff      	cmp	r3, #255	@ 0xff
 8008f16:	d025      	beq.n	8008f64 <USBD_LL_DataInStage+0x15a>
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d122      	bne.n	8008f64 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	d11c      	bne.n	8008f64 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008f2a:	7dfa      	ldrb	r2, [r7, #23]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	32ae      	adds	r2, #174	@ 0xae
 8008f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d014      	beq.n	8008f64 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008f3a:	7dfa      	ldrb	r2, [r7, #23]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008f42:	7dfa      	ldrb	r2, [r7, #23]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	32ae      	adds	r2, #174	@ 0xae
 8008f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	7afa      	ldrb	r2, [r7, #11]
 8008f50:	4611      	mov	r1, r2
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	4798      	blx	r3
 8008f56:	4603      	mov	r3, r0
 8008f58:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008f5a:	7dbb      	ldrb	r3, [r7, #22]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008f60:	7dbb      	ldrb	r3, [r7, #22]
 8008f62:	e000      	b.n	8008f66 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d014      	beq.n	8008fd4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00e      	beq.n	8008fd4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	6852      	ldr	r2, [r2, #4]
 8008fc2:	b2d2      	uxtb	r2, r2
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	4798      	blx	r3
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fd4:	2340      	movs	r3, #64	@ 0x40
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2100      	movs	r1, #0
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 fc0f 	bl	800a7fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2240      	movs	r2, #64	@ 0x40
 8008fec:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ff0:	2340      	movs	r3, #64	@ 0x40
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2180      	movs	r1, #128	@ 0x80
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f001 fc01 	bl	800a7fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2240      	movs	r2, #64	@ 0x40
 8009006:	621a      	str	r2, [r3, #32]

  return ret;
 8009008:	7bfb      	ldrb	r3, [r7, #15]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009012:	b480      	push	{r7}
 8009014:	b083      	sub	sp, #12
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	460b      	mov	r3, r1
 800901c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	78fa      	ldrb	r2, [r7, #3]
 8009022:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009032:	b480      	push	{r7}
 8009034:	b083      	sub	sp, #12
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b04      	cmp	r3, #4
 8009044:	d006      	beq.n	8009054 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800904c:	b2da      	uxtb	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2204      	movs	r2, #4
 8009058:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b04      	cmp	r3, #4
 800907c:	d106      	bne.n	800908c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009084:	b2da      	uxtb	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d110      	bne.n	80090d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00b      	beq.n	80090d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d005      	beq.n	80090d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	460b      	mov	r3, r1
 80090e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	32ae      	adds	r2, #174	@ 0xae
 80090f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e01c      	b.n	8009136 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b03      	cmp	r3, #3
 8009106:	d115      	bne.n	8009134 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	32ae      	adds	r2, #174	@ 0xae
 8009112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009116:	6a1b      	ldr	r3, [r3, #32]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	32ae      	adds	r2, #174	@ 0xae
 8009126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	78fa      	ldrb	r2, [r7, #3]
 800912e:	4611      	mov	r1, r2
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b082      	sub	sp, #8
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	460b      	mov	r3, r1
 8009148:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	32ae      	adds	r2, #174	@ 0xae
 8009154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800915c:	2303      	movs	r3, #3
 800915e:	e01c      	b.n	800919a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b03      	cmp	r3, #3
 800916a:	d115      	bne.n	8009198 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	32ae      	adds	r2, #174	@ 0xae
 8009176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800917a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00b      	beq.n	8009198 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	32ae      	adds	r2, #174	@ 0xae
 800918a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800918e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009190:	78fa      	ldrb	r2, [r7, #3]
 8009192:	4611      	mov	r1, r2
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b083      	sub	sp, #12
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00e      	beq.n	80091f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	6852      	ldr	r2, [r2, #4]
 80091e2:	b2d2      	uxtb	r2, r2
 80091e4:	4611      	mov	r1, r2
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	4798      	blx	r3
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80091f0:	2303      	movs	r3, #3
 80091f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80091fe:	b480      	push	{r7}
 8009200:	b083      	sub	sp, #12
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	460b      	mov	r3, r1
 8009208:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800920a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800920c:	4618      	mov	r0, r3
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009224:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009226:	4618      	mov	r0, r3
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b086      	sub	sp, #24
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009246:	2300      	movs	r3, #0
 8009248:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	885b      	ldrh	r3, [r3, #2]
 800924e:	b29b      	uxth	r3, r3
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	7812      	ldrb	r2, [r2, #0]
 8009254:	4293      	cmp	r3, r2
 8009256:	d91f      	bls.n	8009298 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800925e:	e013      	b.n	8009288 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009260:	f107 030a 	add.w	r3, r7, #10
 8009264:	4619      	mov	r1, r3
 8009266:	6978      	ldr	r0, [r7, #20]
 8009268:	f000 f81b 	bl	80092a2 <USBD_GetNextDesc>
 800926c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	785b      	ldrb	r3, [r3, #1]
 8009272:	2b05      	cmp	r3, #5
 8009274:	d108      	bne.n	8009288 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	789b      	ldrb	r3, [r3, #2]
 800927e:	78fa      	ldrb	r2, [r7, #3]
 8009280:	429a      	cmp	r2, r3
 8009282:	d008      	beq.n	8009296 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009284:	2300      	movs	r3, #0
 8009286:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	885b      	ldrh	r3, [r3, #2]
 800928c:	b29a      	uxth	r2, r3
 800928e:	897b      	ldrh	r3, [r7, #10]
 8009290:	429a      	cmp	r2, r3
 8009292:	d8e5      	bhi.n	8009260 <USBD_GetEpDesc+0x2e>
 8009294:	e000      	b.n	8009298 <USBD_GetEpDesc+0x66>
          break;
 8009296:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009298:	693b      	ldr	r3, [r7, #16]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80092a2:	b480      	push	{r7}
 80092a4:	b085      	sub	sp, #20
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	881b      	ldrh	r3, [r3, #0]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	7812      	ldrb	r2, [r2, #0]
 80092b8:	4413      	add	r3, r2
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	461a      	mov	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4413      	add	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80092cc:	68fb      	ldr	r3, [r7, #12]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80092da:	b480      	push	{r7}
 80092dc:	b087      	sub	sp, #28
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	3301      	adds	r3, #1
 80092f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80092f8:	8a3b      	ldrh	r3, [r7, #16]
 80092fa:	021b      	lsls	r3, r3, #8
 80092fc:	b21a      	sxth	r2, r3
 80092fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009302:	4313      	orrs	r3, r2
 8009304:	b21b      	sxth	r3, r3
 8009306:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009308:	89fb      	ldrh	r3, [r7, #14]
}
 800930a:	4618      	mov	r0, r3
 800930c:	371c      	adds	r7, #28
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
	...

08009318 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800932e:	2b40      	cmp	r3, #64	@ 0x40
 8009330:	d005      	beq.n	800933e <USBD_StdDevReq+0x26>
 8009332:	2b40      	cmp	r3, #64	@ 0x40
 8009334:	d857      	bhi.n	80093e6 <USBD_StdDevReq+0xce>
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00f      	beq.n	800935a <USBD_StdDevReq+0x42>
 800933a:	2b20      	cmp	r3, #32
 800933c:	d153      	bne.n	80093e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	32ae      	adds	r2, #174	@ 0xae
 8009348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	4798      	blx	r3
 8009354:	4603      	mov	r3, r0
 8009356:	73fb      	strb	r3, [r7, #15]
      break;
 8009358:	e04a      	b.n	80093f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	785b      	ldrb	r3, [r3, #1]
 800935e:	2b09      	cmp	r3, #9
 8009360:	d83b      	bhi.n	80093da <USBD_StdDevReq+0xc2>
 8009362:	a201      	add	r2, pc, #4	@ (adr r2, 8009368 <USBD_StdDevReq+0x50>)
 8009364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009368:	080093bd 	.word	0x080093bd
 800936c:	080093d1 	.word	0x080093d1
 8009370:	080093db 	.word	0x080093db
 8009374:	080093c7 	.word	0x080093c7
 8009378:	080093db 	.word	0x080093db
 800937c:	0800939b 	.word	0x0800939b
 8009380:	08009391 	.word	0x08009391
 8009384:	080093db 	.word	0x080093db
 8009388:	080093b3 	.word	0x080093b3
 800938c:	080093a5 	.word	0x080093a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fa3c 	bl	8009810 <USBD_GetDescriptor>
          break;
 8009398:	e024      	b.n	80093e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fba1 	bl	8009ae4 <USBD_SetAddress>
          break;
 80093a2:	e01f      	b.n	80093e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fbe0 	bl	8009b6c <USBD_SetConfig>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73fb      	strb	r3, [r7, #15]
          break;
 80093b0:	e018      	b.n	80093e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fc83 	bl	8009cc0 <USBD_GetConfig>
          break;
 80093ba:	e013      	b.n	80093e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fcb4 	bl	8009d2c <USBD_GetStatus>
          break;
 80093c4:	e00e      	b.n	80093e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fce3 	bl	8009d94 <USBD_SetFeature>
          break;
 80093ce:	e009      	b.n	80093e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fd07 	bl	8009de6 <USBD_ClrFeature>
          break;
 80093d8:	e004      	b.n	80093e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fd5e 	bl	8009e9e <USBD_CtlError>
          break;
 80093e2:	bf00      	nop
      }
      break;
 80093e4:	e004      	b.n	80093f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fd58 	bl	8009e9e <USBD_CtlError>
      break;
 80093ee:	bf00      	nop
  }

  return ret;
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop

080093fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009412:	2b40      	cmp	r3, #64	@ 0x40
 8009414:	d005      	beq.n	8009422 <USBD_StdItfReq+0x26>
 8009416:	2b40      	cmp	r3, #64	@ 0x40
 8009418:	d852      	bhi.n	80094c0 <USBD_StdItfReq+0xc4>
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <USBD_StdItfReq+0x26>
 800941e:	2b20      	cmp	r3, #32
 8009420:	d14e      	bne.n	80094c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009428:	b2db      	uxtb	r3, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	2b02      	cmp	r3, #2
 800942e:	d840      	bhi.n	80094b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	889b      	ldrh	r3, [r3, #4]
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b01      	cmp	r3, #1
 8009438:	d836      	bhi.n	80094a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	889b      	ldrh	r3, [r3, #4]
 800943e:	b2db      	uxtb	r3, r3
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7ff fedb 	bl	80091fe <USBD_CoreFindIF>
 8009448:	4603      	mov	r3, r0
 800944a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800944c:	7bbb      	ldrb	r3, [r7, #14]
 800944e:	2bff      	cmp	r3, #255	@ 0xff
 8009450:	d01d      	beq.n	800948e <USBD_StdItfReq+0x92>
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d11a      	bne.n	800948e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009458:	7bba      	ldrb	r2, [r7, #14]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	32ae      	adds	r2, #174	@ 0xae
 800945e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00f      	beq.n	8009488 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009468:	7bba      	ldrb	r2, [r7, #14]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009470:	7bba      	ldrb	r2, [r7, #14]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	32ae      	adds	r2, #174	@ 0xae
 8009476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	6839      	ldr	r1, [r7, #0]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	4798      	blx	r3
 8009482:	4603      	mov	r3, r0
 8009484:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009486:	e004      	b.n	8009492 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009488:	2303      	movs	r3, #3
 800948a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800948c:	e001      	b.n	8009492 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800948e:	2303      	movs	r3, #3
 8009490:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	88db      	ldrh	r3, [r3, #6]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d110      	bne.n	80094bc <USBD_StdItfReq+0xc0>
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10d      	bne.n	80094bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fdd3 	bl	800a04c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80094a6:	e009      	b.n	80094bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fcf7 	bl	8009e9e <USBD_CtlError>
          break;
 80094b0:	e004      	b.n	80094bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fcf2 	bl	8009e9e <USBD_CtlError>
          break;
 80094ba:	e000      	b.n	80094be <USBD_StdItfReq+0xc2>
          break;
 80094bc:	bf00      	nop
      }
      break;
 80094be:	e004      	b.n	80094ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fceb 	bl	8009e9e <USBD_CtlError>
      break;
 80094c8:	bf00      	nop
  }

  return ret;
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	889b      	ldrh	r3, [r3, #4]
 80094e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094f0:	2b40      	cmp	r3, #64	@ 0x40
 80094f2:	d007      	beq.n	8009504 <USBD_StdEPReq+0x30>
 80094f4:	2b40      	cmp	r3, #64	@ 0x40
 80094f6:	f200 817f 	bhi.w	80097f8 <USBD_StdEPReq+0x324>
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d02a      	beq.n	8009554 <USBD_StdEPReq+0x80>
 80094fe:	2b20      	cmp	r3, #32
 8009500:	f040 817a 	bne.w	80097f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009504:	7bbb      	ldrb	r3, [r7, #14]
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7ff fe85 	bl	8009218 <USBD_CoreFindEP>
 800950e:	4603      	mov	r3, r0
 8009510:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009512:	7b7b      	ldrb	r3, [r7, #13]
 8009514:	2bff      	cmp	r3, #255	@ 0xff
 8009516:	f000 8174 	beq.w	8009802 <USBD_StdEPReq+0x32e>
 800951a:	7b7b      	ldrb	r3, [r7, #13]
 800951c:	2b00      	cmp	r3, #0
 800951e:	f040 8170 	bne.w	8009802 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009522:	7b7a      	ldrb	r2, [r7, #13]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800952a:	7b7a      	ldrb	r2, [r7, #13]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	32ae      	adds	r2, #174	@ 0xae
 8009530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 8163 	beq.w	8009802 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800953c:	7b7a      	ldrb	r2, [r7, #13]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	32ae      	adds	r2, #174	@ 0xae
 8009542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	4798      	blx	r3
 800954e:	4603      	mov	r3, r0
 8009550:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009552:	e156      	b.n	8009802 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	785b      	ldrb	r3, [r3, #1]
 8009558:	2b03      	cmp	r3, #3
 800955a:	d008      	beq.n	800956e <USBD_StdEPReq+0x9a>
 800955c:	2b03      	cmp	r3, #3
 800955e:	f300 8145 	bgt.w	80097ec <USBD_StdEPReq+0x318>
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 809b 	beq.w	800969e <USBD_StdEPReq+0x1ca>
 8009568:	2b01      	cmp	r3, #1
 800956a:	d03c      	beq.n	80095e6 <USBD_StdEPReq+0x112>
 800956c:	e13e      	b.n	80097ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b02      	cmp	r3, #2
 8009578:	d002      	beq.n	8009580 <USBD_StdEPReq+0xac>
 800957a:	2b03      	cmp	r3, #3
 800957c:	d016      	beq.n	80095ac <USBD_StdEPReq+0xd8>
 800957e:	e02c      	b.n	80095da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00d      	beq.n	80095a2 <USBD_StdEPReq+0xce>
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	2b80      	cmp	r3, #128	@ 0x80
 800958a:	d00a      	beq.n	80095a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f001 f979 	bl	800a888 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009596:	2180      	movs	r1, #128	@ 0x80
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f001 f975 	bl	800a888 <USBD_LL_StallEP>
 800959e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095a0:	e020      	b.n	80095e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80095a2:	6839      	ldr	r1, [r7, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fc7a 	bl	8009e9e <USBD_CtlError>
              break;
 80095aa:	e01b      	b.n	80095e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	885b      	ldrh	r3, [r3, #2]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10e      	bne.n	80095d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00b      	beq.n	80095d2 <USBD_StdEPReq+0xfe>
 80095ba:	7bbb      	ldrb	r3, [r7, #14]
 80095bc:	2b80      	cmp	r3, #128	@ 0x80
 80095be:	d008      	beq.n	80095d2 <USBD_StdEPReq+0xfe>
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	88db      	ldrh	r3, [r3, #6]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d104      	bne.n	80095d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80095c8:	7bbb      	ldrb	r3, [r7, #14]
 80095ca:	4619      	mov	r1, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 f95b 	bl	800a888 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fd3a 	bl	800a04c <USBD_CtlSendStatus>

              break;
 80095d8:	e004      	b.n	80095e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fc5e 	bl	8009e9e <USBD_CtlError>
              break;
 80095e2:	bf00      	nop
          }
          break;
 80095e4:	e107      	b.n	80097f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d002      	beq.n	80095f8 <USBD_StdEPReq+0x124>
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d016      	beq.n	8009624 <USBD_StdEPReq+0x150>
 80095f6:	e04b      	b.n	8009690 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00d      	beq.n	800961a <USBD_StdEPReq+0x146>
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	2b80      	cmp	r3, #128	@ 0x80
 8009602:	d00a      	beq.n	800961a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f001 f93d 	bl	800a888 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800960e:	2180      	movs	r1, #128	@ 0x80
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f001 f939 	bl	800a888 <USBD_LL_StallEP>
 8009616:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009618:	e040      	b.n	800969c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fc3e 	bl	8009e9e <USBD_CtlError>
              break;
 8009622:	e03b      	b.n	800969c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	885b      	ldrh	r3, [r3, #2]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d136      	bne.n	800969a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009632:	2b00      	cmp	r3, #0
 8009634:	d004      	beq.n	8009640 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009636:	7bbb      	ldrb	r3, [r7, #14]
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f001 f943 	bl	800a8c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fd03 	bl	800a04c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009646:	7bbb      	ldrb	r3, [r7, #14]
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7ff fde4 	bl	8009218 <USBD_CoreFindEP>
 8009650:	4603      	mov	r3, r0
 8009652:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009654:	7b7b      	ldrb	r3, [r7, #13]
 8009656:	2bff      	cmp	r3, #255	@ 0xff
 8009658:	d01f      	beq.n	800969a <USBD_StdEPReq+0x1c6>
 800965a:	7b7b      	ldrb	r3, [r7, #13]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d11c      	bne.n	800969a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009660:	7b7a      	ldrb	r2, [r7, #13]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009668:	7b7a      	ldrb	r2, [r7, #13]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	32ae      	adds	r2, #174	@ 0xae
 800966e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d010      	beq.n	800969a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009678:	7b7a      	ldrb	r2, [r7, #13]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	32ae      	adds	r2, #174	@ 0xae
 800967e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	4798      	blx	r3
 800968a:	4603      	mov	r3, r0
 800968c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800968e:	e004      	b.n	800969a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fc03 	bl	8009e9e <USBD_CtlError>
              break;
 8009698:	e000      	b.n	800969c <USBD_StdEPReq+0x1c8>
              break;
 800969a:	bf00      	nop
          }
          break;
 800969c:	e0ab      	b.n	80097f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d002      	beq.n	80096b0 <USBD_StdEPReq+0x1dc>
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d032      	beq.n	8009714 <USBD_StdEPReq+0x240>
 80096ae:	e097      	b.n	80097e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096b0:	7bbb      	ldrb	r3, [r7, #14]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d007      	beq.n	80096c6 <USBD_StdEPReq+0x1f2>
 80096b6:	7bbb      	ldrb	r3, [r7, #14]
 80096b8:	2b80      	cmp	r3, #128	@ 0x80
 80096ba:	d004      	beq.n	80096c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fbed 	bl	8009e9e <USBD_CtlError>
                break;
 80096c4:	e091      	b.n	80097ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	da0b      	bge.n	80096e6 <USBD_StdEPReq+0x212>
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
 80096d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096d4:	4613      	mov	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	3310      	adds	r3, #16
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	4413      	add	r3, r2
 80096e2:	3304      	adds	r3, #4
 80096e4:	e00b      	b.n	80096fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
 80096e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096ec:	4613      	mov	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	4413      	add	r3, r2
 80096fc:	3304      	adds	r3, #4
 80096fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	2200      	movs	r2, #0
 8009704:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	2202      	movs	r2, #2
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fc43 	bl	8009f98 <USBD_CtlSendData>
              break;
 8009712:	e06a      	b.n	80097ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009718:	2b00      	cmp	r3, #0
 800971a:	da11      	bge.n	8009740 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800971c:	7bbb      	ldrb	r3, [r7, #14]
 800971e:	f003 020f 	and.w	r2, r3, #15
 8009722:	6879      	ldr	r1, [r7, #4]
 8009724:	4613      	mov	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	440b      	add	r3, r1
 800972e:	3324      	adds	r3, #36	@ 0x24
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d117      	bne.n	8009766 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fbb0 	bl	8009e9e <USBD_CtlError>
                  break;
 800973e:	e054      	b.n	80097ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	f003 020f 	and.w	r2, r3, #15
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	4613      	mov	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	440b      	add	r3, r1
 8009752:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009756:	881b      	ldrh	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d104      	bne.n	8009766 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fb9d 	bl	8009e9e <USBD_CtlError>
                  break;
 8009764:	e041      	b.n	80097ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009766:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800976a:	2b00      	cmp	r3, #0
 800976c:	da0b      	bge.n	8009786 <USBD_StdEPReq+0x2b2>
 800976e:	7bbb      	ldrb	r3, [r7, #14]
 8009770:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009774:	4613      	mov	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	3310      	adds	r3, #16
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	4413      	add	r3, r2
 8009782:	3304      	adds	r3, #4
 8009784:	e00b      	b.n	800979e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800978c:	4613      	mov	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	4413      	add	r3, r2
 800979c:	3304      	adds	r3, #4
 800979e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80097a0:	7bbb      	ldrb	r3, [r7, #14]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d002      	beq.n	80097ac <USBD_StdEPReq+0x2d8>
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	2b80      	cmp	r3, #128	@ 0x80
 80097aa:	d103      	bne.n	80097b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2200      	movs	r2, #0
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	e00e      	b.n	80097d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
 80097b6:	4619      	mov	r1, r3
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f001 f8a3 	bl	800a904 <USBD_LL_IsStallEP>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2201      	movs	r2, #1
 80097c8:	601a      	str	r2, [r3, #0]
 80097ca:	e002      	b.n	80097d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2200      	movs	r2, #0
 80097d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	2202      	movs	r2, #2
 80097d6:	4619      	mov	r1, r3
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fbdd 	bl	8009f98 <USBD_CtlSendData>
              break;
 80097de:	e004      	b.n	80097ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fb5b 	bl	8009e9e <USBD_CtlError>
              break;
 80097e8:	bf00      	nop
          }
          break;
 80097ea:	e004      	b.n	80097f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fb55 	bl	8009e9e <USBD_CtlError>
          break;
 80097f4:	bf00      	nop
      }
      break;
 80097f6:	e005      	b.n	8009804 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fb4f 	bl	8009e9e <USBD_CtlError>
      break;
 8009800:	e000      	b.n	8009804 <USBD_StdEPReq+0x330>
      break;
 8009802:	bf00      	nop
  }

  return ret;
 8009804:	7bfb      	ldrb	r3, [r7, #15]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800981e:	2300      	movs	r3, #0
 8009820:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009822:	2300      	movs	r3, #0
 8009824:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	885b      	ldrh	r3, [r3, #2]
 800982a:	0a1b      	lsrs	r3, r3, #8
 800982c:	b29b      	uxth	r3, r3
 800982e:	3b01      	subs	r3, #1
 8009830:	2b06      	cmp	r3, #6
 8009832:	f200 8128 	bhi.w	8009a86 <USBD_GetDescriptor+0x276>
 8009836:	a201      	add	r2, pc, #4	@ (adr r2, 800983c <USBD_GetDescriptor+0x2c>)
 8009838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983c:	08009859 	.word	0x08009859
 8009840:	08009871 	.word	0x08009871
 8009844:	080098b1 	.word	0x080098b1
 8009848:	08009a87 	.word	0x08009a87
 800984c:	08009a87 	.word	0x08009a87
 8009850:	08009a27 	.word	0x08009a27
 8009854:	08009a53 	.word	0x08009a53
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	7c12      	ldrb	r2, [r2, #16]
 8009864:	f107 0108 	add.w	r1, r7, #8
 8009868:	4610      	mov	r0, r2
 800986a:	4798      	blx	r3
 800986c:	60f8      	str	r0, [r7, #12]
      break;
 800986e:	e112      	b.n	8009a96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	7c1b      	ldrb	r3, [r3, #16]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10d      	bne.n	8009894 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800987e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009880:	f107 0208 	add.w	r2, r7, #8
 8009884:	4610      	mov	r0, r2
 8009886:	4798      	blx	r3
 8009888:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3301      	adds	r3, #1
 800988e:	2202      	movs	r2, #2
 8009890:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009892:	e100      	b.n	8009a96 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800989a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989c:	f107 0208 	add.w	r2, r7, #8
 80098a0:	4610      	mov	r0, r2
 80098a2:	4798      	blx	r3
 80098a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3301      	adds	r3, #1
 80098aa:	2202      	movs	r2, #2
 80098ac:	701a      	strb	r2, [r3, #0]
      break;
 80098ae:	e0f2      	b.n	8009a96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	885b      	ldrh	r3, [r3, #2]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b05      	cmp	r3, #5
 80098b8:	f200 80ac 	bhi.w	8009a14 <USBD_GetDescriptor+0x204>
 80098bc:	a201      	add	r2, pc, #4	@ (adr r2, 80098c4 <USBD_GetDescriptor+0xb4>)
 80098be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c2:	bf00      	nop
 80098c4:	080098dd 	.word	0x080098dd
 80098c8:	08009911 	.word	0x08009911
 80098cc:	08009945 	.word	0x08009945
 80098d0:	08009979 	.word	0x08009979
 80098d4:	080099ad 	.word	0x080099ad
 80098d8:	080099e1 	.word	0x080099e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00b      	beq.n	8009900 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	7c12      	ldrb	r2, [r2, #16]
 80098f4:	f107 0108 	add.w	r1, r7, #8
 80098f8:	4610      	mov	r0, r2
 80098fa:	4798      	blx	r3
 80098fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098fe:	e091      	b.n	8009a24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 facb 	bl	8009e9e <USBD_CtlError>
            err++;
 8009908:	7afb      	ldrb	r3, [r7, #11]
 800990a:	3301      	adds	r3, #1
 800990c:	72fb      	strb	r3, [r7, #11]
          break;
 800990e:	e089      	b.n	8009a24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00b      	beq.n	8009934 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	7c12      	ldrb	r2, [r2, #16]
 8009928:	f107 0108 	add.w	r1, r7, #8
 800992c:	4610      	mov	r0, r2
 800992e:	4798      	blx	r3
 8009930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009932:	e077      	b.n	8009a24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fab1 	bl	8009e9e <USBD_CtlError>
            err++;
 800993c:	7afb      	ldrb	r3, [r7, #11]
 800993e:	3301      	adds	r3, #1
 8009940:	72fb      	strb	r3, [r7, #11]
          break;
 8009942:	e06f      	b.n	8009a24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00b      	beq.n	8009968 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	7c12      	ldrb	r2, [r2, #16]
 800995c:	f107 0108 	add.w	r1, r7, #8
 8009960:	4610      	mov	r0, r2
 8009962:	4798      	blx	r3
 8009964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009966:	e05d      	b.n	8009a24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fa97 	bl	8009e9e <USBD_CtlError>
            err++;
 8009970:	7afb      	ldrb	r3, [r7, #11]
 8009972:	3301      	adds	r3, #1
 8009974:	72fb      	strb	r3, [r7, #11]
          break;
 8009976:	e055      	b.n	8009a24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00b      	beq.n	800999c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	7c12      	ldrb	r2, [r2, #16]
 8009990:	f107 0108 	add.w	r1, r7, #8
 8009994:	4610      	mov	r0, r2
 8009996:	4798      	blx	r3
 8009998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800999a:	e043      	b.n	8009a24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fa7d 	bl	8009e9e <USBD_CtlError>
            err++;
 80099a4:	7afb      	ldrb	r3, [r7, #11]
 80099a6:	3301      	adds	r3, #1
 80099a8:	72fb      	strb	r3, [r7, #11]
          break;
 80099aa:	e03b      	b.n	8009a24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00b      	beq.n	80099d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099be:	695b      	ldr	r3, [r3, #20]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	7c12      	ldrb	r2, [r2, #16]
 80099c4:	f107 0108 	add.w	r1, r7, #8
 80099c8:	4610      	mov	r0, r2
 80099ca:	4798      	blx	r3
 80099cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ce:	e029      	b.n	8009a24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fa63 	bl	8009e9e <USBD_CtlError>
            err++;
 80099d8:	7afb      	ldrb	r3, [r7, #11]
 80099da:	3301      	adds	r3, #1
 80099dc:	72fb      	strb	r3, [r7, #11]
          break;
 80099de:	e021      	b.n	8009a24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00b      	beq.n	8009a04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	7c12      	ldrb	r2, [r2, #16]
 80099f8:	f107 0108 	add.w	r1, r7, #8
 80099fc:	4610      	mov	r0, r2
 80099fe:	4798      	blx	r3
 8009a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a02:	e00f      	b.n	8009a24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fa49 	bl	8009e9e <USBD_CtlError>
            err++;
 8009a0c:	7afb      	ldrb	r3, [r7, #11]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	72fb      	strb	r3, [r7, #11]
          break;
 8009a12:	e007      	b.n	8009a24 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fa41 	bl	8009e9e <USBD_CtlError>
          err++;
 8009a1c:	7afb      	ldrb	r3, [r7, #11]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009a22:	bf00      	nop
      }
      break;
 8009a24:	e037      	b.n	8009a96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	7c1b      	ldrb	r3, [r3, #16]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d109      	bne.n	8009a42 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a36:	f107 0208 	add.w	r2, r7, #8
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	4798      	blx	r3
 8009a3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a40:	e029      	b.n	8009a96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fa2a 	bl	8009e9e <USBD_CtlError>
        err++;
 8009a4a:	7afb      	ldrb	r3, [r7, #11]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	72fb      	strb	r3, [r7, #11]
      break;
 8009a50:	e021      	b.n	8009a96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	7c1b      	ldrb	r3, [r3, #16]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10d      	bne.n	8009a76 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a62:	f107 0208 	add.w	r2, r7, #8
 8009a66:	4610      	mov	r0, r2
 8009a68:	4798      	blx	r3
 8009a6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	2207      	movs	r2, #7
 8009a72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a74:	e00f      	b.n	8009a96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a76:	6839      	ldr	r1, [r7, #0]
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fa10 	bl	8009e9e <USBD_CtlError>
        err++;
 8009a7e:	7afb      	ldrb	r3, [r7, #11]
 8009a80:	3301      	adds	r3, #1
 8009a82:	72fb      	strb	r3, [r7, #11]
      break;
 8009a84:	e007      	b.n	8009a96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fa08 	bl	8009e9e <USBD_CtlError>
      err++;
 8009a8e:	7afb      	ldrb	r3, [r7, #11]
 8009a90:	3301      	adds	r3, #1
 8009a92:	72fb      	strb	r3, [r7, #11]
      break;
 8009a94:	bf00      	nop
  }

  if (err != 0U)
 8009a96:	7afb      	ldrb	r3, [r7, #11]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d11e      	bne.n	8009ada <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	88db      	ldrh	r3, [r3, #6]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d016      	beq.n	8009ad2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009aa4:	893b      	ldrh	r3, [r7, #8]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00e      	beq.n	8009ac8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	88da      	ldrh	r2, [r3, #6]
 8009aae:	893b      	ldrh	r3, [r7, #8]
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	bf28      	it	cs
 8009ab4:	4613      	movcs	r3, r2
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009aba:	893b      	ldrh	r3, [r7, #8]
 8009abc:	461a      	mov	r2, r3
 8009abe:	68f9      	ldr	r1, [r7, #12]
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fa69 	bl	8009f98 <USBD_CtlSendData>
 8009ac6:	e009      	b.n	8009adc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f9e7 	bl	8009e9e <USBD_CtlError>
 8009ad0:	e004      	b.n	8009adc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 faba 	bl	800a04c <USBD_CtlSendStatus>
 8009ad8:	e000      	b.n	8009adc <USBD_GetDescriptor+0x2cc>
    return;
 8009ada:	bf00      	nop
  }
}
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop

08009ae4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	889b      	ldrh	r3, [r3, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d131      	bne.n	8009b5a <USBD_SetAddress+0x76>
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	88db      	ldrh	r3, [r3, #6]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d12d      	bne.n	8009b5a <USBD_SetAddress+0x76>
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	885b      	ldrh	r3, [r3, #2]
 8009b02:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b04:	d829      	bhi.n	8009b5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	885b      	ldrh	r3, [r3, #2]
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	d104      	bne.n	8009b28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f9bc 	bl	8009e9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b26:	e01d      	b.n	8009b64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	7bfa      	ldrb	r2, [r7, #15]
 8009b2c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 ff11 	bl	800a95c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fa86 	bl	800a04c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d004      	beq.n	8009b50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2202      	movs	r2, #2
 8009b4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b4e:	e009      	b.n	8009b64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b58:	e004      	b.n	8009b64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f99e 	bl	8009e9e <USBD_CtlError>
  }
}
 8009b62:	bf00      	nop
 8009b64:	bf00      	nop
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	885b      	ldrh	r3, [r3, #2]
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	4b4e      	ldr	r3, [pc, #312]	@ (8009cbc <USBD_SetConfig+0x150>)
 8009b82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b84:	4b4d      	ldr	r3, [pc, #308]	@ (8009cbc <USBD_SetConfig+0x150>)
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d905      	bls.n	8009b98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f985 	bl	8009e9e <USBD_CtlError>
    return USBD_FAIL;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e08c      	b.n	8009cb2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d002      	beq.n	8009baa <USBD_SetConfig+0x3e>
 8009ba4:	2b03      	cmp	r3, #3
 8009ba6:	d029      	beq.n	8009bfc <USBD_SetConfig+0x90>
 8009ba8:	e075      	b.n	8009c96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009baa:	4b44      	ldr	r3, [pc, #272]	@ (8009cbc <USBD_SetConfig+0x150>)
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d020      	beq.n	8009bf4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009bb2:	4b42      	ldr	r3, [pc, #264]	@ (8009cbc <USBD_SetConfig+0x150>)
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8009cbc <USBD_SetConfig+0x150>)
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7fe ffe3 	bl	8008b8e <USBD_SetClassConfig>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d008      	beq.n	8009be4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f962 	bl	8009e9e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2202      	movs	r2, #2
 8009bde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009be2:	e065      	b.n	8009cb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fa31 	bl	800a04c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2203      	movs	r2, #3
 8009bee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009bf2:	e05d      	b.n	8009cb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fa29 	bl	800a04c <USBD_CtlSendStatus>
      break;
 8009bfa:	e059      	b.n	8009cb0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8009cbc <USBD_SetConfig+0x150>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d112      	bne.n	8009c2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2202      	movs	r2, #2
 8009c08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8009cbc <USBD_SetConfig+0x150>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c16:	4b29      	ldr	r3, [pc, #164]	@ (8009cbc <USBD_SetConfig+0x150>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7fe ffd2 	bl	8008bc6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fa12 	bl	800a04c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c28:	e042      	b.n	8009cb0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009c2a:	4b24      	ldr	r3, [pc, #144]	@ (8009cbc <USBD_SetConfig+0x150>)
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d02a      	beq.n	8009c8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7fe ffc0 	bl	8008bc6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009c46:	4b1d      	ldr	r3, [pc, #116]	@ (8009cbc <USBD_SetConfig+0x150>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c50:	4b1a      	ldr	r3, [pc, #104]	@ (8009cbc <USBD_SetConfig+0x150>)
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7fe ff99 	bl	8008b8e <USBD_SetClassConfig>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00f      	beq.n	8009c86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f918 	bl	8009e9e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	4619      	mov	r1, r3
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7fe ffa5 	bl	8008bc6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2202      	movs	r2, #2
 8009c80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009c84:	e014      	b.n	8009cb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f9e0 	bl	800a04c <USBD_CtlSendStatus>
      break;
 8009c8c:	e010      	b.n	8009cb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f9dc 	bl	800a04c <USBD_CtlSendStatus>
      break;
 8009c94:	e00c      	b.n	8009cb0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f900 	bl	8009e9e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c9e:	4b07      	ldr	r3, [pc, #28]	@ (8009cbc <USBD_SetConfig+0x150>)
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7fe ff8e 	bl	8008bc6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009caa:	2303      	movs	r3, #3
 8009cac:	73fb      	strb	r3, [r7, #15]
      break;
 8009cae:	bf00      	nop
  }

  return ret;
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	200004c4 	.word	0x200004c4

08009cc0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	88db      	ldrh	r3, [r3, #6]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d004      	beq.n	8009cdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f8e2 	bl	8009e9e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009cda:	e023      	b.n	8009d24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	dc02      	bgt.n	8009cee <USBD_GetConfig+0x2e>
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	dc03      	bgt.n	8009cf4 <USBD_GetConfig+0x34>
 8009cec:	e015      	b.n	8009d1a <USBD_GetConfig+0x5a>
 8009cee:	2b03      	cmp	r3, #3
 8009cf0:	d00b      	beq.n	8009d0a <USBD_GetConfig+0x4a>
 8009cf2:	e012      	b.n	8009d1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	2201      	movs	r2, #1
 8009d00:	4619      	mov	r1, r3
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 f948 	bl	8009f98 <USBD_CtlSendData>
        break;
 8009d08:	e00c      	b.n	8009d24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	2201      	movs	r2, #1
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f940 	bl	8009f98 <USBD_CtlSendData>
        break;
 8009d18:	e004      	b.n	8009d24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f8be 	bl	8009e9e <USBD_CtlError>
        break;
 8009d22:	bf00      	nop
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d81e      	bhi.n	8009d82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	88db      	ldrh	r3, [r3, #6]
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d004      	beq.n	8009d56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009d4c:	6839      	ldr	r1, [r7, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f8a5 	bl	8009e9e <USBD_CtlError>
        break;
 8009d54:	e01a      	b.n	8009d8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d005      	beq.n	8009d72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	f043 0202 	orr.w	r2, r3, #2
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	330c      	adds	r3, #12
 8009d76:	2202      	movs	r2, #2
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f90c 	bl	8009f98 <USBD_CtlSendData>
      break;
 8009d80:	e004      	b.n	8009d8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f88a 	bl	8009e9e <USBD_CtlError>
      break;
 8009d8a:	bf00      	nop
  }
}
 8009d8c:	bf00      	nop
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	885b      	ldrh	r3, [r3, #2]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d107      	bne.n	8009db6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f94c 	bl	800a04c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009db4:	e013      	b.n	8009dde <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	885b      	ldrh	r3, [r3, #2]
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d10b      	bne.n	8009dd6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	889b      	ldrh	r3, [r3, #4]
 8009dc2:	0a1b      	lsrs	r3, r3, #8
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	b2da      	uxtb	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f93c 	bl	800a04c <USBD_CtlSendStatus>
}
 8009dd4:	e003      	b.n	8009dde <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f860 	bl	8009e9e <USBD_CtlError>
}
 8009dde:	bf00      	nop
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b082      	sub	sp, #8
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d80b      	bhi.n	8009e16 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	885b      	ldrh	r3, [r3, #2]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d10c      	bne.n	8009e20 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f91c 	bl	800a04c <USBD_CtlSendStatus>
      }
      break;
 8009e14:	e004      	b.n	8009e20 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f840 	bl	8009e9e <USBD_CtlError>
      break;
 8009e1e:	e000      	b.n	8009e22 <USBD_ClrFeature+0x3c>
      break;
 8009e20:	bf00      	nop
  }
}
 8009e22:	bf00      	nop
 8009e24:	3708      	adds	r7, #8
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	781a      	ldrb	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	3301      	adds	r3, #1
 8009e44:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	781a      	ldrb	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3301      	adds	r3, #1
 8009e52:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f7ff fa40 	bl	80092da <SWAPBYTE>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	3301      	adds	r3, #1
 8009e66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7ff fa33 	bl	80092da <SWAPBYTE>
 8009e74:	4603      	mov	r3, r0
 8009e76:	461a      	mov	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	3301      	adds	r3, #1
 8009e86:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f7ff fa26 	bl	80092da <SWAPBYTE>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	461a      	mov	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	80da      	strh	r2, [r3, #6]
}
 8009e96:	bf00      	nop
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ea8:	2180      	movs	r1, #128	@ 0x80
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fcec 	bl	800a888 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fce8 	bl	800a888 <USBD_LL_StallEP>
}
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d042      	beq.n	8009f5c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009eda:	6938      	ldr	r0, [r7, #16]
 8009edc:	f000 f842 	bl	8009f64 <USBD_GetLen>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009eea:	d808      	bhi.n	8009efe <USBD_GetString+0x3e>
 8009eec:	6938      	ldr	r0, [r7, #16]
 8009eee:	f000 f839 	bl	8009f64 <USBD_GetLen>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	e001      	b.n	8009f02 <USBD_GetString+0x42>
 8009efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f06:	7dfb      	ldrb	r3, [r7, #23]
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	7812      	ldrb	r2, [r2, #0]
 8009f10:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	3301      	adds	r3, #1
 8009f16:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f18:	7dfb      	ldrb	r3, [r7, #23]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	2203      	movs	r2, #3
 8009f20:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f22:	7dfb      	ldrb	r3, [r7, #23]
 8009f24:	3301      	adds	r3, #1
 8009f26:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f28:	e013      	b.n	8009f52 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	4413      	add	r3, r2
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	7812      	ldrb	r2, [r2, #0]
 8009f34:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	613b      	str	r3, [r7, #16]
    idx++;
 8009f3c:	7dfb      	ldrb	r3, [r7, #23]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f42:	7dfb      	ldrb	r3, [r7, #23]
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	4413      	add	r3, r2
 8009f48:	2200      	movs	r2, #0
 8009f4a:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1e7      	bne.n	8009f2a <USBD_GetString+0x6a>
 8009f5a:	e000      	b.n	8009f5e <USBD_GetString+0x9e>
    return;
 8009f5c:	bf00      	nop
  }
}
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009f74:	e005      	b.n	8009f82 <USBD_GetLen+0x1e>
  {
    len++;
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1f5      	bne.n	8009f76 <USBD_GetLen+0x12>
  }

  return len;
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3714      	adds	r7, #20
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f000 fceb 	bl	800a99a <USBD_LL_Transmit>

  return USBD_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	2100      	movs	r1, #0
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 fcda 	bl	800a99a <USBD_LL_Transmit>

  return USBD_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2203      	movs	r2, #3
 800a000:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	2100      	movs	r1, #0
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f000 fcde 	bl	800a9dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b084      	sub	sp, #16
 800a02e:	af00      	add	r7, sp, #0
 800a030:	60f8      	str	r0, [r7, #12]
 800a032:	60b9      	str	r1, [r7, #8]
 800a034:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	2100      	movs	r1, #0
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f000 fccd 	bl	800a9dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2204      	movs	r2, #4
 800a058:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a05c:	2300      	movs	r3, #0
 800a05e:	2200      	movs	r2, #0
 800a060:	2100      	movs	r1, #0
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fc99 	bl	800a99a <USBD_LL_Transmit>

  return USBD_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b082      	sub	sp, #8
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2205      	movs	r2, #5
 800a07e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a082:	2300      	movs	r3, #0
 800a084:	2200      	movs	r2, #0
 800a086:	2100      	movs	r1, #0
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 fca7 	bl	800a9dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a09c:	2200      	movs	r2, #0
 800a09e:	4912      	ldr	r1, [pc, #72]	@ (800a0e8 <MX_USB_DEVICE_Init+0x50>)
 800a0a0:	4812      	ldr	r0, [pc, #72]	@ (800a0ec <MX_USB_DEVICE_Init+0x54>)
 800a0a2:	f7fe fcf7 	bl	8008a94 <USBD_Init>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a0ac:	f7f8 f88e 	bl	80021cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a0b0:	490f      	ldr	r1, [pc, #60]	@ (800a0f0 <MX_USB_DEVICE_Init+0x58>)
 800a0b2:	480e      	ldr	r0, [pc, #56]	@ (800a0ec <MX_USB_DEVICE_Init+0x54>)
 800a0b4:	f7fe fd1e 	bl	8008af4 <USBD_RegisterClass>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a0be:	f7f8 f885 	bl	80021cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a0c2:	490c      	ldr	r1, [pc, #48]	@ (800a0f4 <MX_USB_DEVICE_Init+0x5c>)
 800a0c4:	4809      	ldr	r0, [pc, #36]	@ (800a0ec <MX_USB_DEVICE_Init+0x54>)
 800a0c6:	f7fe fc15 	bl	80088f4 <USBD_CDC_RegisterInterface>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a0d0:	f7f8 f87c 	bl	80021cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a0d4:	4805      	ldr	r0, [pc, #20]	@ (800a0ec <MX_USB_DEVICE_Init+0x54>)
 800a0d6:	f7fe fd43 	bl	8008b60 <USBD_Start>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a0e0:	f7f8 f874 	bl	80021cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a0e4:	bf00      	nop
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	200000e8 	.word	0x200000e8
 800a0ec:	200004c8 	.word	0x200004c8
 800a0f0:	20000054 	.word	0x20000054
 800a0f4:	200000d4 	.word	0x200000d4

0800a0f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	4905      	ldr	r1, [pc, #20]	@ (800a114 <CDC_Init_FS+0x1c>)
 800a100:	4805      	ldr	r0, [pc, #20]	@ (800a118 <CDC_Init_FS+0x20>)
 800a102:	f7fe fc11 	bl	8008928 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a106:	4905      	ldr	r1, [pc, #20]	@ (800a11c <CDC_Init_FS+0x24>)
 800a108:	4803      	ldr	r0, [pc, #12]	@ (800a118 <CDC_Init_FS+0x20>)
 800a10a:	f7fe fc2f 	bl	800896c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a10e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a110:	4618      	mov	r0, r3
 800a112:	bd80      	pop	{r7, pc}
 800a114:	20000fa4 	.word	0x20000fa4
 800a118:	200004c8 	.word	0x200004c8
 800a11c:	200007a4 	.word	0x200007a4

0800a120 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a120:	b480      	push	{r7}
 800a122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a124:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a126:	4618      	mov	r0, r3
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	4603      	mov	r3, r0
 800a138:	6039      	str	r1, [r7, #0]
 800a13a:	71fb      	strb	r3, [r7, #7]
 800a13c:	4613      	mov	r3, r2
 800a13e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a140:	79fb      	ldrb	r3, [r7, #7]
 800a142:	2b23      	cmp	r3, #35	@ 0x23
 800a144:	d84a      	bhi.n	800a1dc <CDC_Control_FS+0xac>
 800a146:	a201      	add	r2, pc, #4	@ (adr r2, 800a14c <CDC_Control_FS+0x1c>)
 800a148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14c:	0800a1dd 	.word	0x0800a1dd
 800a150:	0800a1dd 	.word	0x0800a1dd
 800a154:	0800a1dd 	.word	0x0800a1dd
 800a158:	0800a1dd 	.word	0x0800a1dd
 800a15c:	0800a1dd 	.word	0x0800a1dd
 800a160:	0800a1dd 	.word	0x0800a1dd
 800a164:	0800a1dd 	.word	0x0800a1dd
 800a168:	0800a1dd 	.word	0x0800a1dd
 800a16c:	0800a1dd 	.word	0x0800a1dd
 800a170:	0800a1dd 	.word	0x0800a1dd
 800a174:	0800a1dd 	.word	0x0800a1dd
 800a178:	0800a1dd 	.word	0x0800a1dd
 800a17c:	0800a1dd 	.word	0x0800a1dd
 800a180:	0800a1dd 	.word	0x0800a1dd
 800a184:	0800a1dd 	.word	0x0800a1dd
 800a188:	0800a1dd 	.word	0x0800a1dd
 800a18c:	0800a1dd 	.word	0x0800a1dd
 800a190:	0800a1dd 	.word	0x0800a1dd
 800a194:	0800a1dd 	.word	0x0800a1dd
 800a198:	0800a1dd 	.word	0x0800a1dd
 800a19c:	0800a1dd 	.word	0x0800a1dd
 800a1a0:	0800a1dd 	.word	0x0800a1dd
 800a1a4:	0800a1dd 	.word	0x0800a1dd
 800a1a8:	0800a1dd 	.word	0x0800a1dd
 800a1ac:	0800a1dd 	.word	0x0800a1dd
 800a1b0:	0800a1dd 	.word	0x0800a1dd
 800a1b4:	0800a1dd 	.word	0x0800a1dd
 800a1b8:	0800a1dd 	.word	0x0800a1dd
 800a1bc:	0800a1dd 	.word	0x0800a1dd
 800a1c0:	0800a1dd 	.word	0x0800a1dd
 800a1c4:	0800a1dd 	.word	0x0800a1dd
 800a1c8:	0800a1dd 	.word	0x0800a1dd
 800a1cc:	0800a1dd 	.word	0x0800a1dd
 800a1d0:	0800a1dd 	.word	0x0800a1dd
 800a1d4:	0800a1dd 	.word	0x0800a1dd
 800a1d8:	0800a1dd 	.word	0x0800a1dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a1dc:	bf00      	nop
  }

  return (USBD_OK);
 800a1de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a1f6:	6879      	ldr	r1, [r7, #4]
 800a1f8:	4805      	ldr	r0, [pc, #20]	@ (800a210 <CDC_Receive_FS+0x24>)
 800a1fa:	f7fe fbb7 	bl	800896c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a1fe:	4804      	ldr	r0, [pc, #16]	@ (800a210 <CDC_Receive_FS+0x24>)
 800a200:	f7fe fc12 	bl	8008a28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a204:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	200004c8 	.word	0x200004c8

0800a214 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	460b      	mov	r3, r1
 800a21e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a224:	4b0d      	ldr	r3, [pc, #52]	@ (800a25c <CDC_Transmit_FS+0x48>)
 800a226:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a22a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a232:	2b00      	cmp	r3, #0
 800a234:	d001      	beq.n	800a23a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a236:	2301      	movs	r3, #1
 800a238:	e00b      	b.n	800a252 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a23a:	887b      	ldrh	r3, [r7, #2]
 800a23c:	461a      	mov	r2, r3
 800a23e:	6879      	ldr	r1, [r7, #4]
 800a240:	4806      	ldr	r0, [pc, #24]	@ (800a25c <CDC_Transmit_FS+0x48>)
 800a242:	f7fe fb71 	bl	8008928 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a246:	4805      	ldr	r0, [pc, #20]	@ (800a25c <CDC_Transmit_FS+0x48>)
 800a248:	f7fe fbae 	bl	80089a8 <USBD_CDC_TransmitPacket>
 800a24c:	4603      	mov	r3, r0
 800a24e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a250:	7bfb      	ldrb	r3, [r7, #15]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	200004c8 	.word	0x200004c8

0800a260 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	4613      	mov	r3, r2
 800a26c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a272:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a276:	4618      	mov	r0, r3
 800a278:	371c      	adds	r7, #28
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
	...

0800a284 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	6039      	str	r1, [r7, #0]
 800a28e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	2212      	movs	r2, #18
 800a294:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a296:	4b03      	ldr	r3, [pc, #12]	@ (800a2a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a298:	4618      	mov	r0, r3
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	20000104 	.word	0x20000104

0800a2a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	6039      	str	r1, [r7, #0]
 800a2b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2204      	movs	r2, #4
 800a2b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2ba:	4b03      	ldr	r3, [pc, #12]	@ (800a2c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr
 800a2c8:	20000118 	.word	0x20000118

0800a2cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	6039      	str	r1, [r7, #0]
 800a2d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2d8:	79fb      	ldrb	r3, [r7, #7]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d105      	bne.n	800a2ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	4907      	ldr	r1, [pc, #28]	@ (800a300 <USBD_FS_ProductStrDescriptor+0x34>)
 800a2e2:	4808      	ldr	r0, [pc, #32]	@ (800a304 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2e4:	f7ff fdec 	bl	8009ec0 <USBD_GetString>
 800a2e8:	e004      	b.n	800a2f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	4904      	ldr	r1, [pc, #16]	@ (800a300 <USBD_FS_ProductStrDescriptor+0x34>)
 800a2ee:	4805      	ldr	r0, [pc, #20]	@ (800a304 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2f0:	f7ff fde6 	bl	8009ec0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2f4:	4b02      	ldr	r3, [pc, #8]	@ (800a300 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	200017a4 	.word	0x200017a4
 800a304:	0800ead8 	.word	0x0800ead8

0800a308 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	4603      	mov	r3, r0
 800a310:	6039      	str	r1, [r7, #0]
 800a312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	4904      	ldr	r1, [pc, #16]	@ (800a328 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a318:	4804      	ldr	r0, [pc, #16]	@ (800a32c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a31a:	f7ff fdd1 	bl	8009ec0 <USBD_GetString>
  return USBD_StrDesc;
 800a31e:	4b02      	ldr	r3, [pc, #8]	@ (800a328 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a320:	4618      	mov	r0, r3
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	200017a4 	.word	0x200017a4
 800a32c:	0800eaf0 	.word	0x0800eaf0

0800a330 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	4603      	mov	r3, r0
 800a338:	6039      	str	r1, [r7, #0]
 800a33a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	221a      	movs	r2, #26
 800a340:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a342:	f000 f843 	bl	800a3cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a346:	4b02      	ldr	r3, [pc, #8]	@ (800a350 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	2000011c 	.word	0x2000011c

0800a354 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	6039      	str	r1, [r7, #0]
 800a35e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a360:	79fb      	ldrb	r3, [r7, #7]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d105      	bne.n	800a372 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	4907      	ldr	r1, [pc, #28]	@ (800a388 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a36a:	4808      	ldr	r0, [pc, #32]	@ (800a38c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a36c:	f7ff fda8 	bl	8009ec0 <USBD_GetString>
 800a370:	e004      	b.n	800a37c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	4904      	ldr	r1, [pc, #16]	@ (800a388 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a376:	4805      	ldr	r0, [pc, #20]	@ (800a38c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a378:	f7ff fda2 	bl	8009ec0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a37c:	4b02      	ldr	r3, [pc, #8]	@ (800a388 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	200017a4 	.word	0x200017a4
 800a38c:	0800eb04 	.word	0x0800eb04

0800a390 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	6039      	str	r1, [r7, #0]
 800a39a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a39c:	79fb      	ldrb	r3, [r7, #7]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d105      	bne.n	800a3ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	4907      	ldr	r1, [pc, #28]	@ (800a3c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3a6:	4808      	ldr	r0, [pc, #32]	@ (800a3c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3a8:	f7ff fd8a 	bl	8009ec0 <USBD_GetString>
 800a3ac:	e004      	b.n	800a3b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	4904      	ldr	r1, [pc, #16]	@ (800a3c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3b2:	4805      	ldr	r0, [pc, #20]	@ (800a3c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3b4:	f7ff fd84 	bl	8009ec0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3b8:	4b02      	ldr	r3, [pc, #8]	@ (800a3c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	200017a4 	.word	0x200017a4
 800a3c8:	0800eb10 	.word	0x0800eb10

0800a3cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a3d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a410 <Get_SerialNum+0x44>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a3d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a414 <Get_SerialNum+0x48>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a3de:	4b0e      	ldr	r3, [pc, #56]	@ (800a418 <Get_SerialNum+0x4c>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d009      	beq.n	800a406 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3f2:	2208      	movs	r2, #8
 800a3f4:	4909      	ldr	r1, [pc, #36]	@ (800a41c <Get_SerialNum+0x50>)
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 f814 	bl	800a424 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3fc:	2204      	movs	r2, #4
 800a3fe:	4908      	ldr	r1, [pc, #32]	@ (800a420 <Get_SerialNum+0x54>)
 800a400:	68b8      	ldr	r0, [r7, #8]
 800a402:	f000 f80f 	bl	800a424 <IntToUnicode>
  }
}
 800a406:	bf00      	nop
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	1fff7a10 	.word	0x1fff7a10
 800a414:	1fff7a14 	.word	0x1fff7a14
 800a418:	1fff7a18 	.word	0x1fff7a18
 800a41c:	2000011e 	.word	0x2000011e
 800a420:	2000012e 	.word	0x2000012e

0800a424 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a424:	b480      	push	{r7}
 800a426:	b087      	sub	sp, #28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	4613      	mov	r3, r2
 800a430:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a436:	2300      	movs	r3, #0
 800a438:	75fb      	strb	r3, [r7, #23]
 800a43a:	e027      	b.n	800a48c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	0f1b      	lsrs	r3, r3, #28
 800a440:	2b09      	cmp	r3, #9
 800a442:	d80b      	bhi.n	800a45c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	0f1b      	lsrs	r3, r3, #28
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	005b      	lsls	r3, r3, #1
 800a44e:	4619      	mov	r1, r3
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	440b      	add	r3, r1
 800a454:	3230      	adds	r2, #48	@ 0x30
 800a456:	b2d2      	uxtb	r2, r2
 800a458:	701a      	strb	r2, [r3, #0]
 800a45a:	e00a      	b.n	800a472 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	0f1b      	lsrs	r3, r3, #28
 800a460:	b2da      	uxtb	r2, r3
 800a462:	7dfb      	ldrb	r3, [r7, #23]
 800a464:	005b      	lsls	r3, r3, #1
 800a466:	4619      	mov	r1, r3
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	440b      	add	r3, r1
 800a46c:	3237      	adds	r2, #55	@ 0x37
 800a46e:	b2d2      	uxtb	r2, r2
 800a470:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	011b      	lsls	r3, r3, #4
 800a476:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a478:	7dfb      	ldrb	r3, [r7, #23]
 800a47a:	005b      	lsls	r3, r3, #1
 800a47c:	3301      	adds	r3, #1
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	4413      	add	r3, r2
 800a482:	2200      	movs	r2, #0
 800a484:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a486:	7dfb      	ldrb	r3, [r7, #23]
 800a488:	3301      	adds	r3, #1
 800a48a:	75fb      	strb	r3, [r7, #23]
 800a48c:	7dfa      	ldrb	r2, [r7, #23]
 800a48e:	79fb      	ldrb	r3, [r7, #7]
 800a490:	429a      	cmp	r2, r3
 800a492:	d3d3      	bcc.n	800a43c <IntToUnicode+0x18>
  }
}
 800a494:	bf00      	nop
 800a496:	bf00      	nop
 800a498:	371c      	adds	r7, #28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
	...

0800a4a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b08a      	sub	sp, #40	@ 0x28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4ac:	f107 0314 	add.w	r3, r7, #20
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	605a      	str	r2, [r3, #4]
 800a4b6:	609a      	str	r2, [r3, #8]
 800a4b8:	60da      	str	r2, [r3, #12]
 800a4ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4c4:	d13a      	bne.n	800a53c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	613b      	str	r3, [r7, #16]
 800a4ca:	4b1e      	ldr	r3, [pc, #120]	@ (800a544 <HAL_PCD_MspInit+0xa0>)
 800a4cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ce:	4a1d      	ldr	r2, [pc, #116]	@ (800a544 <HAL_PCD_MspInit+0xa0>)
 800a4d0:	f043 0301 	orr.w	r3, r3, #1
 800a4d4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a4d6:	4b1b      	ldr	r3, [pc, #108]	@ (800a544 <HAL_PCD_MspInit+0xa0>)
 800a4d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	613b      	str	r3, [r7, #16]
 800a4e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a4e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a4e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a4f4:	230a      	movs	r3, #10
 800a4f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4f8:	f107 0314 	add.w	r3, r7, #20
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4812      	ldr	r0, [pc, #72]	@ (800a548 <HAL_PCD_MspInit+0xa4>)
 800a500:	f7f8 ff46 	bl	8003390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a504:	4b0f      	ldr	r3, [pc, #60]	@ (800a544 <HAL_PCD_MspInit+0xa0>)
 800a506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a508:	4a0e      	ldr	r2, [pc, #56]	@ (800a544 <HAL_PCD_MspInit+0xa0>)
 800a50a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a50e:	6353      	str	r3, [r2, #52]	@ 0x34
 800a510:	2300      	movs	r3, #0
 800a512:	60fb      	str	r3, [r7, #12]
 800a514:	4b0b      	ldr	r3, [pc, #44]	@ (800a544 <HAL_PCD_MspInit+0xa0>)
 800a516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a518:	4a0a      	ldr	r2, [pc, #40]	@ (800a544 <HAL_PCD_MspInit+0xa0>)
 800a51a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a51e:	6453      	str	r3, [r2, #68]	@ 0x44
 800a520:	4b08      	ldr	r3, [pc, #32]	@ (800a544 <HAL_PCD_MspInit+0xa0>)
 800a522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a528:	60fb      	str	r3, [r7, #12]
 800a52a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a52c:	2200      	movs	r2, #0
 800a52e:	2100      	movs	r1, #0
 800a530:	2043      	movs	r0, #67	@ 0x43
 800a532:	f7f8 fb58 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a536:	2043      	movs	r0, #67	@ 0x43
 800a538:	f7f8 fb71 	bl	8002c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a53c:	bf00      	nop
 800a53e:	3728      	adds	r7, #40	@ 0x28
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	40023800 	.word	0x40023800
 800a548:	40020000 	.word	0x40020000

0800a54c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a560:	4619      	mov	r1, r3
 800a562:	4610      	mov	r0, r2
 800a564:	f7fe fb49 	bl	8008bfa <USBD_LL_SetupStage>
}
 800a568:	bf00      	nop
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	460b      	mov	r3, r1
 800a57a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a582:	78fa      	ldrb	r2, [r7, #3]
 800a584:	6879      	ldr	r1, [r7, #4]
 800a586:	4613      	mov	r3, r2
 800a588:	00db      	lsls	r3, r3, #3
 800a58a:	4413      	add	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	440b      	add	r3, r1
 800a590:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	78fb      	ldrb	r3, [r7, #3]
 800a598:	4619      	mov	r1, r3
 800a59a:	f7fe fb83 	bl	8008ca4 <USBD_LL_DataOutStage>
}
 800a59e:	bf00      	nop
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b082      	sub	sp, #8
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a5b8:	78fa      	ldrb	r2, [r7, #3]
 800a5ba:	6879      	ldr	r1, [r7, #4]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	00db      	lsls	r3, r3, #3
 800a5c0:	4413      	add	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	440b      	add	r3, r1
 800a5c6:	3320      	adds	r3, #32
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	78fb      	ldrb	r3, [r7, #3]
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	f7fe fc1c 	bl	8008e0a <USBD_LL_DataInStage>
}
 800a5d2:	bf00      	nop
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b082      	sub	sp, #8
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7fe fd56 	bl	800909a <USBD_LL_SOF>
}
 800a5ee:	bf00      	nop
 800a5f0:	3708      	adds	r7, #8
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b084      	sub	sp, #16
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a5fe:	2301      	movs	r3, #1
 800a600:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	79db      	ldrb	r3, [r3, #7]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d102      	bne.n	800a610 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]
 800a60e:	e008      	b.n	800a622 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	79db      	ldrb	r3, [r3, #7]
 800a614:	2b02      	cmp	r3, #2
 800a616:	d102      	bne.n	800a61e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a618:	2301      	movs	r3, #1
 800a61a:	73fb      	strb	r3, [r7, #15]
 800a61c:	e001      	b.n	800a622 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a61e:	f7f7 fdd5 	bl	80021cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a628:	7bfa      	ldrb	r2, [r7, #15]
 800a62a:	4611      	mov	r1, r2
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fe fcf0 	bl	8009012 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fe fc98 	bl	8008f6e <USBD_LL_Reset>
}
 800a63e:	bf00      	nop
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
	...

0800a648 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe fceb 	bl	8009032 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	6812      	ldr	r2, [r2, #0]
 800a66a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a66e:	f043 0301 	orr.w	r3, r3, #1
 800a672:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	7adb      	ldrb	r3, [r3, #11]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d005      	beq.n	800a688 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a67c:	4b04      	ldr	r3, [pc, #16]	@ (800a690 <HAL_PCD_SuspendCallback+0x48>)
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	4a03      	ldr	r2, [pc, #12]	@ (800a690 <HAL_PCD_SuspendCallback+0x48>)
 800a682:	f043 0306 	orr.w	r3, r3, #6
 800a686:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a688:	bf00      	nop
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	e000ed00 	.word	0xe000ed00

0800a694 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fe fce1 	bl	800906a <USBD_LL_Resume>
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6c2:	78fa      	ldrb	r2, [r7, #3]
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe fd39 	bl	800913e <USBD_LL_IsoOUTIncomplete>
}
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6e6:	78fa      	ldrb	r2, [r7, #3]
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fe fcf5 	bl	80090da <USBD_LL_IsoINIncomplete>
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a706:	4618      	mov	r0, r3
 800a708:	f7fe fd4b 	bl	80091a2 <USBD_LL_DevConnected>
}
 800a70c:	bf00      	nop
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a722:	4618      	mov	r0, r3
 800a724:	f7fe fd48 	bl	80091b8 <USBD_LL_DevDisconnected>
}
 800a728:	bf00      	nop
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d13c      	bne.n	800a7ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a740:	4a20      	ldr	r2, [pc, #128]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a1e      	ldr	r2, [pc, #120]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a74c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a750:	4b1c      	ldr	r3, [pc, #112]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a752:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a756:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a758:	4b1a      	ldr	r3, [pc, #104]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a75a:	2204      	movs	r2, #4
 800a75c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a75e:	4b19      	ldr	r3, [pc, #100]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a760:	2202      	movs	r2, #2
 800a762:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a764:	4b17      	ldr	r3, [pc, #92]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a766:	2200      	movs	r2, #0
 800a768:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a76a:	4b16      	ldr	r3, [pc, #88]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a76c:	2202      	movs	r2, #2
 800a76e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a770:	4b14      	ldr	r3, [pc, #80]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a772:	2200      	movs	r2, #0
 800a774:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a776:	4b13      	ldr	r3, [pc, #76]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a778:	2200      	movs	r2, #0
 800a77a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a77c:	4b11      	ldr	r3, [pc, #68]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a77e:	2200      	movs	r2, #0
 800a780:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a782:	4b10      	ldr	r3, [pc, #64]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a784:	2200      	movs	r2, #0
 800a786:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a788:	4b0e      	ldr	r3, [pc, #56]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a78e:	480d      	ldr	r0, [pc, #52]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a790:	f7fa fa92 	bl	8004cb8 <HAL_PCD_Init>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a79a:	f7f7 fd17 	bl	80021cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a79e:	2180      	movs	r1, #128	@ 0x80
 800a7a0:	4808      	ldr	r0, [pc, #32]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a7a2:	f7fb fcbe 	bl	8006122 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a7a6:	2240      	movs	r2, #64	@ 0x40
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	4806      	ldr	r0, [pc, #24]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a7ac:	f7fb fc72 	bl	8006094 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a7b0:	2280      	movs	r2, #128	@ 0x80
 800a7b2:	2101      	movs	r1, #1
 800a7b4:	4803      	ldr	r0, [pc, #12]	@ (800a7c4 <USBD_LL_Init+0x94>)
 800a7b6:	f7fb fc6d 	bl	8006094 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	200019a4 	.word	0x200019a4

0800a7c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fa fb79 	bl	8004ed6 <HAL_PCD_Start>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 f942 	bl	800aa74 <USBD_Get_USB_Status>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b084      	sub	sp, #16
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	4608      	mov	r0, r1
 800a808:	4611      	mov	r1, r2
 800a80a:	461a      	mov	r2, r3
 800a80c:	4603      	mov	r3, r0
 800a80e:	70fb      	strb	r3, [r7, #3]
 800a810:	460b      	mov	r3, r1
 800a812:	70bb      	strb	r3, [r7, #2]
 800a814:	4613      	mov	r3, r2
 800a816:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a818:	2300      	movs	r3, #0
 800a81a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a826:	78bb      	ldrb	r3, [r7, #2]
 800a828:	883a      	ldrh	r2, [r7, #0]
 800a82a:	78f9      	ldrb	r1, [r7, #3]
 800a82c:	f7fb f84d 	bl	80058ca <HAL_PCD_EP_Open>
 800a830:	4603      	mov	r3, r0
 800a832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a834:	7bfb      	ldrb	r3, [r7, #15]
 800a836:	4618      	mov	r0, r3
 800a838:	f000 f91c 	bl	800aa74 <USBD_Get_USB_Status>
 800a83c:	4603      	mov	r3, r0
 800a83e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a840:	7bbb      	ldrb	r3, [r7, #14]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b084      	sub	sp, #16
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	460b      	mov	r3, r1
 800a854:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a864:	78fa      	ldrb	r2, [r7, #3]
 800a866:	4611      	mov	r1, r2
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fb f898 	bl	800599e <HAL_PCD_EP_Close>
 800a86e:	4603      	mov	r3, r0
 800a870:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a872:	7bfb      	ldrb	r3, [r7, #15]
 800a874:	4618      	mov	r0, r3
 800a876:	f000 f8fd 	bl	800aa74 <USBD_Get_USB_Status>
 800a87a:	4603      	mov	r3, r0
 800a87c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8a2:	78fa      	ldrb	r2, [r7, #3]
 800a8a4:	4611      	mov	r1, r2
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fb f950 	bl	8005b4c <HAL_PCD_EP_SetStall>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f000 f8de 	bl	800aa74 <USBD_Get_USB_Status>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b084      	sub	sp, #16
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8e0:	78fa      	ldrb	r2, [r7, #3]
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fb f994 	bl	8005c12 <HAL_PCD_EP_ClrStall>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 f8bf 	bl	800aa74 <USBD_Get_USB_Status>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	460b      	mov	r3, r1
 800a90e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a916:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	da0b      	bge.n	800a938 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a920:	78fb      	ldrb	r3, [r7, #3]
 800a922:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a926:	68f9      	ldr	r1, [r7, #12]
 800a928:	4613      	mov	r3, r2
 800a92a:	00db      	lsls	r3, r3, #3
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	440b      	add	r3, r1
 800a932:	3316      	adds	r3, #22
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	e00b      	b.n	800a950 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a938:	78fb      	ldrb	r3, [r7, #3]
 800a93a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a93e:	68f9      	ldr	r1, [r7, #12]
 800a940:	4613      	mov	r3, r2
 800a942:	00db      	lsls	r3, r3, #3
 800a944:	4413      	add	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	440b      	add	r3, r1
 800a94a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a94e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	460b      	mov	r3, r1
 800a966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a968:	2300      	movs	r3, #0
 800a96a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a976:	78fa      	ldrb	r2, [r7, #3]
 800a978:	4611      	mov	r1, r2
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fa ff81 	bl	8005882 <HAL_PCD_SetAddress>
 800a980:	4603      	mov	r3, r0
 800a982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a984:	7bfb      	ldrb	r3, [r7, #15]
 800a986:	4618      	mov	r0, r3
 800a988:	f000 f874 	bl	800aa74 <USBD_Get_USB_Status>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a990:	7bbb      	ldrb	r3, [r7, #14]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b086      	sub	sp, #24
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	60f8      	str	r0, [r7, #12]
 800a9a2:	607a      	str	r2, [r7, #4]
 800a9a4:	603b      	str	r3, [r7, #0]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a9b8:	7af9      	ldrb	r1, [r7, #11]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	f7fb f88b 	bl	8005ad8 <HAL_PCD_EP_Transmit>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 f853 	bl	800aa74 <USBD_Get_USB_Status>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3718      	adds	r7, #24
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b086      	sub	sp, #24
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	607a      	str	r2, [r7, #4]
 800a9e6:	603b      	str	r3, [r7, #0]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a9fa:	7af9      	ldrb	r1, [r7, #11]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	f7fb f817 	bl	8005a32 <HAL_PCD_EP_Receive>
 800aa04:	4603      	mov	r3, r0
 800aa06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa08:	7dfb      	ldrb	r3, [r7, #23]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 f832 	bl	800aa74 <USBD_Get_USB_Status>
 800aa10:	4603      	mov	r3, r0
 800aa12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa14:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b082      	sub	sp, #8
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	460b      	mov	r3, r1
 800aa28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa30:	78fa      	ldrb	r2, [r7, #3]
 800aa32:	4611      	mov	r1, r2
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fb f837 	bl	8005aa8 <HAL_PCD_EP_GetRxCount>
 800aa3a:	4603      	mov	r3, r0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa4c:	4b03      	ldr	r3, [pc, #12]	@ (800aa5c <USBD_static_malloc+0x18>)
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	20001e88 	.word	0x20001e88

0800aa60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]

}
 800aa68:	bf00      	nop
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa82:	79fb      	ldrb	r3, [r7, #7]
 800aa84:	2b03      	cmp	r3, #3
 800aa86:	d817      	bhi.n	800aab8 <USBD_Get_USB_Status+0x44>
 800aa88:	a201      	add	r2, pc, #4	@ (adr r2, 800aa90 <USBD_Get_USB_Status+0x1c>)
 800aa8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8e:	bf00      	nop
 800aa90:	0800aaa1 	.word	0x0800aaa1
 800aa94:	0800aaa7 	.word	0x0800aaa7
 800aa98:	0800aaad 	.word	0x0800aaad
 800aa9c:	0800aab3 	.word	0x0800aab3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	73fb      	strb	r3, [r7, #15]
    break;
 800aaa4:	e00b      	b.n	800aabe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	73fb      	strb	r3, [r7, #15]
    break;
 800aaaa:	e008      	b.n	800aabe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aaac:	2301      	movs	r3, #1
 800aaae:	73fb      	strb	r3, [r7, #15]
    break;
 800aab0:	e005      	b.n	800aabe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aab2:	2303      	movs	r3, #3
 800aab4:	73fb      	strb	r3, [r7, #15]
    break;
 800aab6:	e002      	b.n	800aabe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aab8:	2303      	movs	r3, #3
 800aaba:	73fb      	strb	r3, [r7, #15]
    break;
 800aabc:	bf00      	nop
  }
  return usb_status;
 800aabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <__cvt>:
 800aacc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aad0:	ec57 6b10 	vmov	r6, r7, d0
 800aad4:	2f00      	cmp	r7, #0
 800aad6:	460c      	mov	r4, r1
 800aad8:	4619      	mov	r1, r3
 800aada:	463b      	mov	r3, r7
 800aadc:	bfbb      	ittet	lt
 800aade:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aae2:	461f      	movlt	r7, r3
 800aae4:	2300      	movge	r3, #0
 800aae6:	232d      	movlt	r3, #45	@ 0x2d
 800aae8:	700b      	strb	r3, [r1, #0]
 800aaea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aaec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aaf0:	4691      	mov	r9, r2
 800aaf2:	f023 0820 	bic.w	r8, r3, #32
 800aaf6:	bfbc      	itt	lt
 800aaf8:	4632      	movlt	r2, r6
 800aafa:	4616      	movlt	r6, r2
 800aafc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab00:	d005      	beq.n	800ab0e <__cvt+0x42>
 800ab02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ab06:	d100      	bne.n	800ab0a <__cvt+0x3e>
 800ab08:	3401      	adds	r4, #1
 800ab0a:	2102      	movs	r1, #2
 800ab0c:	e000      	b.n	800ab10 <__cvt+0x44>
 800ab0e:	2103      	movs	r1, #3
 800ab10:	ab03      	add	r3, sp, #12
 800ab12:	9301      	str	r3, [sp, #4]
 800ab14:	ab02      	add	r3, sp, #8
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	ec47 6b10 	vmov	d0, r6, r7
 800ab1c:	4653      	mov	r3, sl
 800ab1e:	4622      	mov	r2, r4
 800ab20:	f000 fe7e 	bl	800b820 <_dtoa_r>
 800ab24:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ab28:	4605      	mov	r5, r0
 800ab2a:	d119      	bne.n	800ab60 <__cvt+0x94>
 800ab2c:	f019 0f01 	tst.w	r9, #1
 800ab30:	d00e      	beq.n	800ab50 <__cvt+0x84>
 800ab32:	eb00 0904 	add.w	r9, r0, r4
 800ab36:	2200      	movs	r2, #0
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	f7f5 ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab42:	b108      	cbz	r0, 800ab48 <__cvt+0x7c>
 800ab44:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab48:	2230      	movs	r2, #48	@ 0x30
 800ab4a:	9b03      	ldr	r3, [sp, #12]
 800ab4c:	454b      	cmp	r3, r9
 800ab4e:	d31e      	bcc.n	800ab8e <__cvt+0xc2>
 800ab50:	9b03      	ldr	r3, [sp, #12]
 800ab52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab54:	1b5b      	subs	r3, r3, r5
 800ab56:	4628      	mov	r0, r5
 800ab58:	6013      	str	r3, [r2, #0]
 800ab5a:	b004      	add	sp, #16
 800ab5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab64:	eb00 0904 	add.w	r9, r0, r4
 800ab68:	d1e5      	bne.n	800ab36 <__cvt+0x6a>
 800ab6a:	7803      	ldrb	r3, [r0, #0]
 800ab6c:	2b30      	cmp	r3, #48	@ 0x30
 800ab6e:	d10a      	bne.n	800ab86 <__cvt+0xba>
 800ab70:	2200      	movs	r2, #0
 800ab72:	2300      	movs	r3, #0
 800ab74:	4630      	mov	r0, r6
 800ab76:	4639      	mov	r1, r7
 800ab78:	f7f5 ffa6 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab7c:	b918      	cbnz	r0, 800ab86 <__cvt+0xba>
 800ab7e:	f1c4 0401 	rsb	r4, r4, #1
 800ab82:	f8ca 4000 	str.w	r4, [sl]
 800ab86:	f8da 3000 	ldr.w	r3, [sl]
 800ab8a:	4499      	add	r9, r3
 800ab8c:	e7d3      	b.n	800ab36 <__cvt+0x6a>
 800ab8e:	1c59      	adds	r1, r3, #1
 800ab90:	9103      	str	r1, [sp, #12]
 800ab92:	701a      	strb	r2, [r3, #0]
 800ab94:	e7d9      	b.n	800ab4a <__cvt+0x7e>

0800ab96 <__exponent>:
 800ab96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab98:	2900      	cmp	r1, #0
 800ab9a:	bfba      	itte	lt
 800ab9c:	4249      	neglt	r1, r1
 800ab9e:	232d      	movlt	r3, #45	@ 0x2d
 800aba0:	232b      	movge	r3, #43	@ 0x2b
 800aba2:	2909      	cmp	r1, #9
 800aba4:	7002      	strb	r2, [r0, #0]
 800aba6:	7043      	strb	r3, [r0, #1]
 800aba8:	dd29      	ble.n	800abfe <__exponent+0x68>
 800abaa:	f10d 0307 	add.w	r3, sp, #7
 800abae:	461d      	mov	r5, r3
 800abb0:	270a      	movs	r7, #10
 800abb2:	461a      	mov	r2, r3
 800abb4:	fbb1 f6f7 	udiv	r6, r1, r7
 800abb8:	fb07 1416 	mls	r4, r7, r6, r1
 800abbc:	3430      	adds	r4, #48	@ 0x30
 800abbe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800abc2:	460c      	mov	r4, r1
 800abc4:	2c63      	cmp	r4, #99	@ 0x63
 800abc6:	f103 33ff 	add.w	r3, r3, #4294967295
 800abca:	4631      	mov	r1, r6
 800abcc:	dcf1      	bgt.n	800abb2 <__exponent+0x1c>
 800abce:	3130      	adds	r1, #48	@ 0x30
 800abd0:	1e94      	subs	r4, r2, #2
 800abd2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800abd6:	1c41      	adds	r1, r0, #1
 800abd8:	4623      	mov	r3, r4
 800abda:	42ab      	cmp	r3, r5
 800abdc:	d30a      	bcc.n	800abf4 <__exponent+0x5e>
 800abde:	f10d 0309 	add.w	r3, sp, #9
 800abe2:	1a9b      	subs	r3, r3, r2
 800abe4:	42ac      	cmp	r4, r5
 800abe6:	bf88      	it	hi
 800abe8:	2300      	movhi	r3, #0
 800abea:	3302      	adds	r3, #2
 800abec:	4403      	add	r3, r0
 800abee:	1a18      	subs	r0, r3, r0
 800abf0:	b003      	add	sp, #12
 800abf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abf4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800abf8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800abfc:	e7ed      	b.n	800abda <__exponent+0x44>
 800abfe:	2330      	movs	r3, #48	@ 0x30
 800ac00:	3130      	adds	r1, #48	@ 0x30
 800ac02:	7083      	strb	r3, [r0, #2]
 800ac04:	70c1      	strb	r1, [r0, #3]
 800ac06:	1d03      	adds	r3, r0, #4
 800ac08:	e7f1      	b.n	800abee <__exponent+0x58>
	...

0800ac0c <_printf_float>:
 800ac0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac10:	b08d      	sub	sp, #52	@ 0x34
 800ac12:	460c      	mov	r4, r1
 800ac14:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac18:	4616      	mov	r6, r2
 800ac1a:	461f      	mov	r7, r3
 800ac1c:	4605      	mov	r5, r0
 800ac1e:	f000 fcef 	bl	800b600 <_localeconv_r>
 800ac22:	6803      	ldr	r3, [r0, #0]
 800ac24:	9304      	str	r3, [sp, #16]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7f5 fb22 	bl	8000270 <strlen>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac30:	f8d8 3000 	ldr.w	r3, [r8]
 800ac34:	9005      	str	r0, [sp, #20]
 800ac36:	3307      	adds	r3, #7
 800ac38:	f023 0307 	bic.w	r3, r3, #7
 800ac3c:	f103 0208 	add.w	r2, r3, #8
 800ac40:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ac44:	f8d4 b000 	ldr.w	fp, [r4]
 800ac48:	f8c8 2000 	str.w	r2, [r8]
 800ac4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ac54:	9307      	str	r3, [sp, #28]
 800ac56:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ac5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac62:	4b9c      	ldr	r3, [pc, #624]	@ (800aed4 <_printf_float+0x2c8>)
 800ac64:	f04f 32ff 	mov.w	r2, #4294967295
 800ac68:	f7f5 ff60 	bl	8000b2c <__aeabi_dcmpun>
 800ac6c:	bb70      	cbnz	r0, 800accc <_printf_float+0xc0>
 800ac6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac72:	4b98      	ldr	r3, [pc, #608]	@ (800aed4 <_printf_float+0x2c8>)
 800ac74:	f04f 32ff 	mov.w	r2, #4294967295
 800ac78:	f7f5 ff3a 	bl	8000af0 <__aeabi_dcmple>
 800ac7c:	bb30      	cbnz	r0, 800accc <_printf_float+0xc0>
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2300      	movs	r3, #0
 800ac82:	4640      	mov	r0, r8
 800ac84:	4649      	mov	r1, r9
 800ac86:	f7f5 ff29 	bl	8000adc <__aeabi_dcmplt>
 800ac8a:	b110      	cbz	r0, 800ac92 <_printf_float+0x86>
 800ac8c:	232d      	movs	r3, #45	@ 0x2d
 800ac8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac92:	4a91      	ldr	r2, [pc, #580]	@ (800aed8 <_printf_float+0x2cc>)
 800ac94:	4b91      	ldr	r3, [pc, #580]	@ (800aedc <_printf_float+0x2d0>)
 800ac96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ac9a:	bf94      	ite	ls
 800ac9c:	4690      	movls	r8, r2
 800ac9e:	4698      	movhi	r8, r3
 800aca0:	2303      	movs	r3, #3
 800aca2:	6123      	str	r3, [r4, #16]
 800aca4:	f02b 0304 	bic.w	r3, fp, #4
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	f04f 0900 	mov.w	r9, #0
 800acae:	9700      	str	r7, [sp, #0]
 800acb0:	4633      	mov	r3, r6
 800acb2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800acb4:	4621      	mov	r1, r4
 800acb6:	4628      	mov	r0, r5
 800acb8:	f000 f9d2 	bl	800b060 <_printf_common>
 800acbc:	3001      	adds	r0, #1
 800acbe:	f040 808d 	bne.w	800addc <_printf_float+0x1d0>
 800acc2:	f04f 30ff 	mov.w	r0, #4294967295
 800acc6:	b00d      	add	sp, #52	@ 0x34
 800acc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800accc:	4642      	mov	r2, r8
 800acce:	464b      	mov	r3, r9
 800acd0:	4640      	mov	r0, r8
 800acd2:	4649      	mov	r1, r9
 800acd4:	f7f5 ff2a 	bl	8000b2c <__aeabi_dcmpun>
 800acd8:	b140      	cbz	r0, 800acec <_printf_float+0xe0>
 800acda:	464b      	mov	r3, r9
 800acdc:	2b00      	cmp	r3, #0
 800acde:	bfbc      	itt	lt
 800ace0:	232d      	movlt	r3, #45	@ 0x2d
 800ace2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ace6:	4a7e      	ldr	r2, [pc, #504]	@ (800aee0 <_printf_float+0x2d4>)
 800ace8:	4b7e      	ldr	r3, [pc, #504]	@ (800aee4 <_printf_float+0x2d8>)
 800acea:	e7d4      	b.n	800ac96 <_printf_float+0x8a>
 800acec:	6863      	ldr	r3, [r4, #4]
 800acee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800acf2:	9206      	str	r2, [sp, #24]
 800acf4:	1c5a      	adds	r2, r3, #1
 800acf6:	d13b      	bne.n	800ad70 <_printf_float+0x164>
 800acf8:	2306      	movs	r3, #6
 800acfa:	6063      	str	r3, [r4, #4]
 800acfc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ad00:	2300      	movs	r3, #0
 800ad02:	6022      	str	r2, [r4, #0]
 800ad04:	9303      	str	r3, [sp, #12]
 800ad06:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad08:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ad0c:	ab09      	add	r3, sp, #36	@ 0x24
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	6861      	ldr	r1, [r4, #4]
 800ad12:	ec49 8b10 	vmov	d0, r8, r9
 800ad16:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	f7ff fed6 	bl	800aacc <__cvt>
 800ad20:	9b06      	ldr	r3, [sp, #24]
 800ad22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad24:	2b47      	cmp	r3, #71	@ 0x47
 800ad26:	4680      	mov	r8, r0
 800ad28:	d129      	bne.n	800ad7e <_printf_float+0x172>
 800ad2a:	1cc8      	adds	r0, r1, #3
 800ad2c:	db02      	blt.n	800ad34 <_printf_float+0x128>
 800ad2e:	6863      	ldr	r3, [r4, #4]
 800ad30:	4299      	cmp	r1, r3
 800ad32:	dd41      	ble.n	800adb8 <_printf_float+0x1ac>
 800ad34:	f1aa 0a02 	sub.w	sl, sl, #2
 800ad38:	fa5f fa8a 	uxtb.w	sl, sl
 800ad3c:	3901      	subs	r1, #1
 800ad3e:	4652      	mov	r2, sl
 800ad40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad44:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad46:	f7ff ff26 	bl	800ab96 <__exponent>
 800ad4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad4c:	1813      	adds	r3, r2, r0
 800ad4e:	2a01      	cmp	r2, #1
 800ad50:	4681      	mov	r9, r0
 800ad52:	6123      	str	r3, [r4, #16]
 800ad54:	dc02      	bgt.n	800ad5c <_printf_float+0x150>
 800ad56:	6822      	ldr	r2, [r4, #0]
 800ad58:	07d2      	lsls	r2, r2, #31
 800ad5a:	d501      	bpl.n	800ad60 <_printf_float+0x154>
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	6123      	str	r3, [r4, #16]
 800ad60:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d0a2      	beq.n	800acae <_printf_float+0xa2>
 800ad68:	232d      	movs	r3, #45	@ 0x2d
 800ad6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad6e:	e79e      	b.n	800acae <_printf_float+0xa2>
 800ad70:	9a06      	ldr	r2, [sp, #24]
 800ad72:	2a47      	cmp	r2, #71	@ 0x47
 800ad74:	d1c2      	bne.n	800acfc <_printf_float+0xf0>
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1c0      	bne.n	800acfc <_printf_float+0xf0>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e7bd      	b.n	800acfa <_printf_float+0xee>
 800ad7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad82:	d9db      	bls.n	800ad3c <_printf_float+0x130>
 800ad84:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ad88:	d118      	bne.n	800adbc <_printf_float+0x1b0>
 800ad8a:	2900      	cmp	r1, #0
 800ad8c:	6863      	ldr	r3, [r4, #4]
 800ad8e:	dd0b      	ble.n	800ada8 <_printf_float+0x19c>
 800ad90:	6121      	str	r1, [r4, #16]
 800ad92:	b913      	cbnz	r3, 800ad9a <_printf_float+0x18e>
 800ad94:	6822      	ldr	r2, [r4, #0]
 800ad96:	07d0      	lsls	r0, r2, #31
 800ad98:	d502      	bpl.n	800ada0 <_printf_float+0x194>
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	440b      	add	r3, r1
 800ad9e:	6123      	str	r3, [r4, #16]
 800ada0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ada2:	f04f 0900 	mov.w	r9, #0
 800ada6:	e7db      	b.n	800ad60 <_printf_float+0x154>
 800ada8:	b913      	cbnz	r3, 800adb0 <_printf_float+0x1a4>
 800adaa:	6822      	ldr	r2, [r4, #0]
 800adac:	07d2      	lsls	r2, r2, #31
 800adae:	d501      	bpl.n	800adb4 <_printf_float+0x1a8>
 800adb0:	3302      	adds	r3, #2
 800adb2:	e7f4      	b.n	800ad9e <_printf_float+0x192>
 800adb4:	2301      	movs	r3, #1
 800adb6:	e7f2      	b.n	800ad9e <_printf_float+0x192>
 800adb8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800adbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adbe:	4299      	cmp	r1, r3
 800adc0:	db05      	blt.n	800adce <_printf_float+0x1c2>
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	6121      	str	r1, [r4, #16]
 800adc6:	07d8      	lsls	r0, r3, #31
 800adc8:	d5ea      	bpl.n	800ada0 <_printf_float+0x194>
 800adca:	1c4b      	adds	r3, r1, #1
 800adcc:	e7e7      	b.n	800ad9e <_printf_float+0x192>
 800adce:	2900      	cmp	r1, #0
 800add0:	bfd4      	ite	le
 800add2:	f1c1 0202 	rsble	r2, r1, #2
 800add6:	2201      	movgt	r2, #1
 800add8:	4413      	add	r3, r2
 800adda:	e7e0      	b.n	800ad9e <_printf_float+0x192>
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	055a      	lsls	r2, r3, #21
 800ade0:	d407      	bmi.n	800adf2 <_printf_float+0x1e6>
 800ade2:	6923      	ldr	r3, [r4, #16]
 800ade4:	4642      	mov	r2, r8
 800ade6:	4631      	mov	r1, r6
 800ade8:	4628      	mov	r0, r5
 800adea:	47b8      	blx	r7
 800adec:	3001      	adds	r0, #1
 800adee:	d12b      	bne.n	800ae48 <_printf_float+0x23c>
 800adf0:	e767      	b.n	800acc2 <_printf_float+0xb6>
 800adf2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800adf6:	f240 80dd 	bls.w	800afb4 <_printf_float+0x3a8>
 800adfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800adfe:	2200      	movs	r2, #0
 800ae00:	2300      	movs	r3, #0
 800ae02:	f7f5 fe61 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d033      	beq.n	800ae72 <_printf_float+0x266>
 800ae0a:	4a37      	ldr	r2, [pc, #220]	@ (800aee8 <_printf_float+0x2dc>)
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	4631      	mov	r1, r6
 800ae10:	4628      	mov	r0, r5
 800ae12:	47b8      	blx	r7
 800ae14:	3001      	adds	r0, #1
 800ae16:	f43f af54 	beq.w	800acc2 <_printf_float+0xb6>
 800ae1a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ae1e:	4543      	cmp	r3, r8
 800ae20:	db02      	blt.n	800ae28 <_printf_float+0x21c>
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	07d8      	lsls	r0, r3, #31
 800ae26:	d50f      	bpl.n	800ae48 <_printf_float+0x23c>
 800ae28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae2c:	4631      	mov	r1, r6
 800ae2e:	4628      	mov	r0, r5
 800ae30:	47b8      	blx	r7
 800ae32:	3001      	adds	r0, #1
 800ae34:	f43f af45 	beq.w	800acc2 <_printf_float+0xb6>
 800ae38:	f04f 0900 	mov.w	r9, #0
 800ae3c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae40:	f104 0a1a 	add.w	sl, r4, #26
 800ae44:	45c8      	cmp	r8, r9
 800ae46:	dc09      	bgt.n	800ae5c <_printf_float+0x250>
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	079b      	lsls	r3, r3, #30
 800ae4c:	f100 8103 	bmi.w	800b056 <_printf_float+0x44a>
 800ae50:	68e0      	ldr	r0, [r4, #12]
 800ae52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae54:	4298      	cmp	r0, r3
 800ae56:	bfb8      	it	lt
 800ae58:	4618      	movlt	r0, r3
 800ae5a:	e734      	b.n	800acc6 <_printf_float+0xba>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	4652      	mov	r2, sl
 800ae60:	4631      	mov	r1, r6
 800ae62:	4628      	mov	r0, r5
 800ae64:	47b8      	blx	r7
 800ae66:	3001      	adds	r0, #1
 800ae68:	f43f af2b 	beq.w	800acc2 <_printf_float+0xb6>
 800ae6c:	f109 0901 	add.w	r9, r9, #1
 800ae70:	e7e8      	b.n	800ae44 <_printf_float+0x238>
 800ae72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	dc39      	bgt.n	800aeec <_printf_float+0x2e0>
 800ae78:	4a1b      	ldr	r2, [pc, #108]	@ (800aee8 <_printf_float+0x2dc>)
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	4628      	mov	r0, r5
 800ae80:	47b8      	blx	r7
 800ae82:	3001      	adds	r0, #1
 800ae84:	f43f af1d 	beq.w	800acc2 <_printf_float+0xb6>
 800ae88:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ae8c:	ea59 0303 	orrs.w	r3, r9, r3
 800ae90:	d102      	bne.n	800ae98 <_printf_float+0x28c>
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	07d9      	lsls	r1, r3, #31
 800ae96:	d5d7      	bpl.n	800ae48 <_printf_float+0x23c>
 800ae98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae9c:	4631      	mov	r1, r6
 800ae9e:	4628      	mov	r0, r5
 800aea0:	47b8      	blx	r7
 800aea2:	3001      	adds	r0, #1
 800aea4:	f43f af0d 	beq.w	800acc2 <_printf_float+0xb6>
 800aea8:	f04f 0a00 	mov.w	sl, #0
 800aeac:	f104 0b1a 	add.w	fp, r4, #26
 800aeb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeb2:	425b      	negs	r3, r3
 800aeb4:	4553      	cmp	r3, sl
 800aeb6:	dc01      	bgt.n	800aebc <_printf_float+0x2b0>
 800aeb8:	464b      	mov	r3, r9
 800aeba:	e793      	b.n	800ade4 <_printf_float+0x1d8>
 800aebc:	2301      	movs	r3, #1
 800aebe:	465a      	mov	r2, fp
 800aec0:	4631      	mov	r1, r6
 800aec2:	4628      	mov	r0, r5
 800aec4:	47b8      	blx	r7
 800aec6:	3001      	adds	r0, #1
 800aec8:	f43f aefb 	beq.w	800acc2 <_printf_float+0xb6>
 800aecc:	f10a 0a01 	add.w	sl, sl, #1
 800aed0:	e7ee      	b.n	800aeb0 <_printf_float+0x2a4>
 800aed2:	bf00      	nop
 800aed4:	7fefffff 	.word	0x7fefffff
 800aed8:	0800eb40 	.word	0x0800eb40
 800aedc:	0800eb44 	.word	0x0800eb44
 800aee0:	0800eb48 	.word	0x0800eb48
 800aee4:	0800eb4c 	.word	0x0800eb4c
 800aee8:	0800eb50 	.word	0x0800eb50
 800aeec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aeee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aef2:	4553      	cmp	r3, sl
 800aef4:	bfa8      	it	ge
 800aef6:	4653      	movge	r3, sl
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	4699      	mov	r9, r3
 800aefc:	dc36      	bgt.n	800af6c <_printf_float+0x360>
 800aefe:	f04f 0b00 	mov.w	fp, #0
 800af02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af06:	f104 021a 	add.w	r2, r4, #26
 800af0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af0c:	9306      	str	r3, [sp, #24]
 800af0e:	eba3 0309 	sub.w	r3, r3, r9
 800af12:	455b      	cmp	r3, fp
 800af14:	dc31      	bgt.n	800af7a <_printf_float+0x36e>
 800af16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af18:	459a      	cmp	sl, r3
 800af1a:	dc3a      	bgt.n	800af92 <_printf_float+0x386>
 800af1c:	6823      	ldr	r3, [r4, #0]
 800af1e:	07da      	lsls	r2, r3, #31
 800af20:	d437      	bmi.n	800af92 <_printf_float+0x386>
 800af22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af24:	ebaa 0903 	sub.w	r9, sl, r3
 800af28:	9b06      	ldr	r3, [sp, #24]
 800af2a:	ebaa 0303 	sub.w	r3, sl, r3
 800af2e:	4599      	cmp	r9, r3
 800af30:	bfa8      	it	ge
 800af32:	4699      	movge	r9, r3
 800af34:	f1b9 0f00 	cmp.w	r9, #0
 800af38:	dc33      	bgt.n	800afa2 <_printf_float+0x396>
 800af3a:	f04f 0800 	mov.w	r8, #0
 800af3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af42:	f104 0b1a 	add.w	fp, r4, #26
 800af46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af48:	ebaa 0303 	sub.w	r3, sl, r3
 800af4c:	eba3 0309 	sub.w	r3, r3, r9
 800af50:	4543      	cmp	r3, r8
 800af52:	f77f af79 	ble.w	800ae48 <_printf_float+0x23c>
 800af56:	2301      	movs	r3, #1
 800af58:	465a      	mov	r2, fp
 800af5a:	4631      	mov	r1, r6
 800af5c:	4628      	mov	r0, r5
 800af5e:	47b8      	blx	r7
 800af60:	3001      	adds	r0, #1
 800af62:	f43f aeae 	beq.w	800acc2 <_printf_float+0xb6>
 800af66:	f108 0801 	add.w	r8, r8, #1
 800af6a:	e7ec      	b.n	800af46 <_printf_float+0x33a>
 800af6c:	4642      	mov	r2, r8
 800af6e:	4631      	mov	r1, r6
 800af70:	4628      	mov	r0, r5
 800af72:	47b8      	blx	r7
 800af74:	3001      	adds	r0, #1
 800af76:	d1c2      	bne.n	800aefe <_printf_float+0x2f2>
 800af78:	e6a3      	b.n	800acc2 <_printf_float+0xb6>
 800af7a:	2301      	movs	r3, #1
 800af7c:	4631      	mov	r1, r6
 800af7e:	4628      	mov	r0, r5
 800af80:	9206      	str	r2, [sp, #24]
 800af82:	47b8      	blx	r7
 800af84:	3001      	adds	r0, #1
 800af86:	f43f ae9c 	beq.w	800acc2 <_printf_float+0xb6>
 800af8a:	9a06      	ldr	r2, [sp, #24]
 800af8c:	f10b 0b01 	add.w	fp, fp, #1
 800af90:	e7bb      	b.n	800af0a <_printf_float+0x2fe>
 800af92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af96:	4631      	mov	r1, r6
 800af98:	4628      	mov	r0, r5
 800af9a:	47b8      	blx	r7
 800af9c:	3001      	adds	r0, #1
 800af9e:	d1c0      	bne.n	800af22 <_printf_float+0x316>
 800afa0:	e68f      	b.n	800acc2 <_printf_float+0xb6>
 800afa2:	9a06      	ldr	r2, [sp, #24]
 800afa4:	464b      	mov	r3, r9
 800afa6:	4442      	add	r2, r8
 800afa8:	4631      	mov	r1, r6
 800afaa:	4628      	mov	r0, r5
 800afac:	47b8      	blx	r7
 800afae:	3001      	adds	r0, #1
 800afb0:	d1c3      	bne.n	800af3a <_printf_float+0x32e>
 800afb2:	e686      	b.n	800acc2 <_printf_float+0xb6>
 800afb4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800afb8:	f1ba 0f01 	cmp.w	sl, #1
 800afbc:	dc01      	bgt.n	800afc2 <_printf_float+0x3b6>
 800afbe:	07db      	lsls	r3, r3, #31
 800afc0:	d536      	bpl.n	800b030 <_printf_float+0x424>
 800afc2:	2301      	movs	r3, #1
 800afc4:	4642      	mov	r2, r8
 800afc6:	4631      	mov	r1, r6
 800afc8:	4628      	mov	r0, r5
 800afca:	47b8      	blx	r7
 800afcc:	3001      	adds	r0, #1
 800afce:	f43f ae78 	beq.w	800acc2 <_printf_float+0xb6>
 800afd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afd6:	4631      	mov	r1, r6
 800afd8:	4628      	mov	r0, r5
 800afda:	47b8      	blx	r7
 800afdc:	3001      	adds	r0, #1
 800afde:	f43f ae70 	beq.w	800acc2 <_printf_float+0xb6>
 800afe2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800afe6:	2200      	movs	r2, #0
 800afe8:	2300      	movs	r3, #0
 800afea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afee:	f7f5 fd6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800aff2:	b9c0      	cbnz	r0, 800b026 <_printf_float+0x41a>
 800aff4:	4653      	mov	r3, sl
 800aff6:	f108 0201 	add.w	r2, r8, #1
 800affa:	4631      	mov	r1, r6
 800affc:	4628      	mov	r0, r5
 800affe:	47b8      	blx	r7
 800b000:	3001      	adds	r0, #1
 800b002:	d10c      	bne.n	800b01e <_printf_float+0x412>
 800b004:	e65d      	b.n	800acc2 <_printf_float+0xb6>
 800b006:	2301      	movs	r3, #1
 800b008:	465a      	mov	r2, fp
 800b00a:	4631      	mov	r1, r6
 800b00c:	4628      	mov	r0, r5
 800b00e:	47b8      	blx	r7
 800b010:	3001      	adds	r0, #1
 800b012:	f43f ae56 	beq.w	800acc2 <_printf_float+0xb6>
 800b016:	f108 0801 	add.w	r8, r8, #1
 800b01a:	45d0      	cmp	r8, sl
 800b01c:	dbf3      	blt.n	800b006 <_printf_float+0x3fa>
 800b01e:	464b      	mov	r3, r9
 800b020:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b024:	e6df      	b.n	800ade6 <_printf_float+0x1da>
 800b026:	f04f 0800 	mov.w	r8, #0
 800b02a:	f104 0b1a 	add.w	fp, r4, #26
 800b02e:	e7f4      	b.n	800b01a <_printf_float+0x40e>
 800b030:	2301      	movs	r3, #1
 800b032:	4642      	mov	r2, r8
 800b034:	e7e1      	b.n	800affa <_printf_float+0x3ee>
 800b036:	2301      	movs	r3, #1
 800b038:	464a      	mov	r2, r9
 800b03a:	4631      	mov	r1, r6
 800b03c:	4628      	mov	r0, r5
 800b03e:	47b8      	blx	r7
 800b040:	3001      	adds	r0, #1
 800b042:	f43f ae3e 	beq.w	800acc2 <_printf_float+0xb6>
 800b046:	f108 0801 	add.w	r8, r8, #1
 800b04a:	68e3      	ldr	r3, [r4, #12]
 800b04c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b04e:	1a5b      	subs	r3, r3, r1
 800b050:	4543      	cmp	r3, r8
 800b052:	dcf0      	bgt.n	800b036 <_printf_float+0x42a>
 800b054:	e6fc      	b.n	800ae50 <_printf_float+0x244>
 800b056:	f04f 0800 	mov.w	r8, #0
 800b05a:	f104 0919 	add.w	r9, r4, #25
 800b05e:	e7f4      	b.n	800b04a <_printf_float+0x43e>

0800b060 <_printf_common>:
 800b060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b064:	4616      	mov	r6, r2
 800b066:	4698      	mov	r8, r3
 800b068:	688a      	ldr	r2, [r1, #8]
 800b06a:	690b      	ldr	r3, [r1, #16]
 800b06c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b070:	4293      	cmp	r3, r2
 800b072:	bfb8      	it	lt
 800b074:	4613      	movlt	r3, r2
 800b076:	6033      	str	r3, [r6, #0]
 800b078:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b07c:	4607      	mov	r7, r0
 800b07e:	460c      	mov	r4, r1
 800b080:	b10a      	cbz	r2, 800b086 <_printf_common+0x26>
 800b082:	3301      	adds	r3, #1
 800b084:	6033      	str	r3, [r6, #0]
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	0699      	lsls	r1, r3, #26
 800b08a:	bf42      	ittt	mi
 800b08c:	6833      	ldrmi	r3, [r6, #0]
 800b08e:	3302      	addmi	r3, #2
 800b090:	6033      	strmi	r3, [r6, #0]
 800b092:	6825      	ldr	r5, [r4, #0]
 800b094:	f015 0506 	ands.w	r5, r5, #6
 800b098:	d106      	bne.n	800b0a8 <_printf_common+0x48>
 800b09a:	f104 0a19 	add.w	sl, r4, #25
 800b09e:	68e3      	ldr	r3, [r4, #12]
 800b0a0:	6832      	ldr	r2, [r6, #0]
 800b0a2:	1a9b      	subs	r3, r3, r2
 800b0a4:	42ab      	cmp	r3, r5
 800b0a6:	dc26      	bgt.n	800b0f6 <_printf_common+0x96>
 800b0a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b0ac:	6822      	ldr	r2, [r4, #0]
 800b0ae:	3b00      	subs	r3, #0
 800b0b0:	bf18      	it	ne
 800b0b2:	2301      	movne	r3, #1
 800b0b4:	0692      	lsls	r2, r2, #26
 800b0b6:	d42b      	bmi.n	800b110 <_printf_common+0xb0>
 800b0b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b0bc:	4641      	mov	r1, r8
 800b0be:	4638      	mov	r0, r7
 800b0c0:	47c8      	blx	r9
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	d01e      	beq.n	800b104 <_printf_common+0xa4>
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	6922      	ldr	r2, [r4, #16]
 800b0ca:	f003 0306 	and.w	r3, r3, #6
 800b0ce:	2b04      	cmp	r3, #4
 800b0d0:	bf02      	ittt	eq
 800b0d2:	68e5      	ldreq	r5, [r4, #12]
 800b0d4:	6833      	ldreq	r3, [r6, #0]
 800b0d6:	1aed      	subeq	r5, r5, r3
 800b0d8:	68a3      	ldr	r3, [r4, #8]
 800b0da:	bf0c      	ite	eq
 800b0dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0e0:	2500      	movne	r5, #0
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	bfc4      	itt	gt
 800b0e6:	1a9b      	subgt	r3, r3, r2
 800b0e8:	18ed      	addgt	r5, r5, r3
 800b0ea:	2600      	movs	r6, #0
 800b0ec:	341a      	adds	r4, #26
 800b0ee:	42b5      	cmp	r5, r6
 800b0f0:	d11a      	bne.n	800b128 <_printf_common+0xc8>
 800b0f2:	2000      	movs	r0, #0
 800b0f4:	e008      	b.n	800b108 <_printf_common+0xa8>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	4652      	mov	r2, sl
 800b0fa:	4641      	mov	r1, r8
 800b0fc:	4638      	mov	r0, r7
 800b0fe:	47c8      	blx	r9
 800b100:	3001      	adds	r0, #1
 800b102:	d103      	bne.n	800b10c <_printf_common+0xac>
 800b104:	f04f 30ff 	mov.w	r0, #4294967295
 800b108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b10c:	3501      	adds	r5, #1
 800b10e:	e7c6      	b.n	800b09e <_printf_common+0x3e>
 800b110:	18e1      	adds	r1, r4, r3
 800b112:	1c5a      	adds	r2, r3, #1
 800b114:	2030      	movs	r0, #48	@ 0x30
 800b116:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b11a:	4422      	add	r2, r4
 800b11c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b120:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b124:	3302      	adds	r3, #2
 800b126:	e7c7      	b.n	800b0b8 <_printf_common+0x58>
 800b128:	2301      	movs	r3, #1
 800b12a:	4622      	mov	r2, r4
 800b12c:	4641      	mov	r1, r8
 800b12e:	4638      	mov	r0, r7
 800b130:	47c8      	blx	r9
 800b132:	3001      	adds	r0, #1
 800b134:	d0e6      	beq.n	800b104 <_printf_common+0xa4>
 800b136:	3601      	adds	r6, #1
 800b138:	e7d9      	b.n	800b0ee <_printf_common+0x8e>
	...

0800b13c <_printf_i>:
 800b13c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b140:	7e0f      	ldrb	r7, [r1, #24]
 800b142:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b144:	2f78      	cmp	r7, #120	@ 0x78
 800b146:	4691      	mov	r9, r2
 800b148:	4680      	mov	r8, r0
 800b14a:	460c      	mov	r4, r1
 800b14c:	469a      	mov	sl, r3
 800b14e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b152:	d807      	bhi.n	800b164 <_printf_i+0x28>
 800b154:	2f62      	cmp	r7, #98	@ 0x62
 800b156:	d80a      	bhi.n	800b16e <_printf_i+0x32>
 800b158:	2f00      	cmp	r7, #0
 800b15a:	f000 80d2 	beq.w	800b302 <_printf_i+0x1c6>
 800b15e:	2f58      	cmp	r7, #88	@ 0x58
 800b160:	f000 80b9 	beq.w	800b2d6 <_printf_i+0x19a>
 800b164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b168:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b16c:	e03a      	b.n	800b1e4 <_printf_i+0xa8>
 800b16e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b172:	2b15      	cmp	r3, #21
 800b174:	d8f6      	bhi.n	800b164 <_printf_i+0x28>
 800b176:	a101      	add	r1, pc, #4	@ (adr r1, 800b17c <_printf_i+0x40>)
 800b178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b17c:	0800b1d5 	.word	0x0800b1d5
 800b180:	0800b1e9 	.word	0x0800b1e9
 800b184:	0800b165 	.word	0x0800b165
 800b188:	0800b165 	.word	0x0800b165
 800b18c:	0800b165 	.word	0x0800b165
 800b190:	0800b165 	.word	0x0800b165
 800b194:	0800b1e9 	.word	0x0800b1e9
 800b198:	0800b165 	.word	0x0800b165
 800b19c:	0800b165 	.word	0x0800b165
 800b1a0:	0800b165 	.word	0x0800b165
 800b1a4:	0800b165 	.word	0x0800b165
 800b1a8:	0800b2e9 	.word	0x0800b2e9
 800b1ac:	0800b213 	.word	0x0800b213
 800b1b0:	0800b2a3 	.word	0x0800b2a3
 800b1b4:	0800b165 	.word	0x0800b165
 800b1b8:	0800b165 	.word	0x0800b165
 800b1bc:	0800b30b 	.word	0x0800b30b
 800b1c0:	0800b165 	.word	0x0800b165
 800b1c4:	0800b213 	.word	0x0800b213
 800b1c8:	0800b165 	.word	0x0800b165
 800b1cc:	0800b165 	.word	0x0800b165
 800b1d0:	0800b2ab 	.word	0x0800b2ab
 800b1d4:	6833      	ldr	r3, [r6, #0]
 800b1d6:	1d1a      	adds	r2, r3, #4
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6032      	str	r2, [r6, #0]
 800b1dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e09d      	b.n	800b324 <_printf_i+0x1e8>
 800b1e8:	6833      	ldr	r3, [r6, #0]
 800b1ea:	6820      	ldr	r0, [r4, #0]
 800b1ec:	1d19      	adds	r1, r3, #4
 800b1ee:	6031      	str	r1, [r6, #0]
 800b1f0:	0606      	lsls	r6, r0, #24
 800b1f2:	d501      	bpl.n	800b1f8 <_printf_i+0xbc>
 800b1f4:	681d      	ldr	r5, [r3, #0]
 800b1f6:	e003      	b.n	800b200 <_printf_i+0xc4>
 800b1f8:	0645      	lsls	r5, r0, #25
 800b1fa:	d5fb      	bpl.n	800b1f4 <_printf_i+0xb8>
 800b1fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b200:	2d00      	cmp	r5, #0
 800b202:	da03      	bge.n	800b20c <_printf_i+0xd0>
 800b204:	232d      	movs	r3, #45	@ 0x2d
 800b206:	426d      	negs	r5, r5
 800b208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b20c:	4859      	ldr	r0, [pc, #356]	@ (800b374 <_printf_i+0x238>)
 800b20e:	230a      	movs	r3, #10
 800b210:	e011      	b.n	800b236 <_printf_i+0xfa>
 800b212:	6821      	ldr	r1, [r4, #0]
 800b214:	6833      	ldr	r3, [r6, #0]
 800b216:	0608      	lsls	r0, r1, #24
 800b218:	f853 5b04 	ldr.w	r5, [r3], #4
 800b21c:	d402      	bmi.n	800b224 <_printf_i+0xe8>
 800b21e:	0649      	lsls	r1, r1, #25
 800b220:	bf48      	it	mi
 800b222:	b2ad      	uxthmi	r5, r5
 800b224:	2f6f      	cmp	r7, #111	@ 0x6f
 800b226:	4853      	ldr	r0, [pc, #332]	@ (800b374 <_printf_i+0x238>)
 800b228:	6033      	str	r3, [r6, #0]
 800b22a:	bf14      	ite	ne
 800b22c:	230a      	movne	r3, #10
 800b22e:	2308      	moveq	r3, #8
 800b230:	2100      	movs	r1, #0
 800b232:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b236:	6866      	ldr	r6, [r4, #4]
 800b238:	60a6      	str	r6, [r4, #8]
 800b23a:	2e00      	cmp	r6, #0
 800b23c:	bfa2      	ittt	ge
 800b23e:	6821      	ldrge	r1, [r4, #0]
 800b240:	f021 0104 	bicge.w	r1, r1, #4
 800b244:	6021      	strge	r1, [r4, #0]
 800b246:	b90d      	cbnz	r5, 800b24c <_printf_i+0x110>
 800b248:	2e00      	cmp	r6, #0
 800b24a:	d04b      	beq.n	800b2e4 <_printf_i+0x1a8>
 800b24c:	4616      	mov	r6, r2
 800b24e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b252:	fb03 5711 	mls	r7, r3, r1, r5
 800b256:	5dc7      	ldrb	r7, [r0, r7]
 800b258:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b25c:	462f      	mov	r7, r5
 800b25e:	42bb      	cmp	r3, r7
 800b260:	460d      	mov	r5, r1
 800b262:	d9f4      	bls.n	800b24e <_printf_i+0x112>
 800b264:	2b08      	cmp	r3, #8
 800b266:	d10b      	bne.n	800b280 <_printf_i+0x144>
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	07df      	lsls	r7, r3, #31
 800b26c:	d508      	bpl.n	800b280 <_printf_i+0x144>
 800b26e:	6923      	ldr	r3, [r4, #16]
 800b270:	6861      	ldr	r1, [r4, #4]
 800b272:	4299      	cmp	r1, r3
 800b274:	bfde      	ittt	le
 800b276:	2330      	movle	r3, #48	@ 0x30
 800b278:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b27c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b280:	1b92      	subs	r2, r2, r6
 800b282:	6122      	str	r2, [r4, #16]
 800b284:	f8cd a000 	str.w	sl, [sp]
 800b288:	464b      	mov	r3, r9
 800b28a:	aa03      	add	r2, sp, #12
 800b28c:	4621      	mov	r1, r4
 800b28e:	4640      	mov	r0, r8
 800b290:	f7ff fee6 	bl	800b060 <_printf_common>
 800b294:	3001      	adds	r0, #1
 800b296:	d14a      	bne.n	800b32e <_printf_i+0x1f2>
 800b298:	f04f 30ff 	mov.w	r0, #4294967295
 800b29c:	b004      	add	sp, #16
 800b29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2a2:	6823      	ldr	r3, [r4, #0]
 800b2a4:	f043 0320 	orr.w	r3, r3, #32
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	4833      	ldr	r0, [pc, #204]	@ (800b378 <_printf_i+0x23c>)
 800b2ac:	2778      	movs	r7, #120	@ 0x78
 800b2ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	6831      	ldr	r1, [r6, #0]
 800b2b6:	061f      	lsls	r7, r3, #24
 800b2b8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b2bc:	d402      	bmi.n	800b2c4 <_printf_i+0x188>
 800b2be:	065f      	lsls	r7, r3, #25
 800b2c0:	bf48      	it	mi
 800b2c2:	b2ad      	uxthmi	r5, r5
 800b2c4:	6031      	str	r1, [r6, #0]
 800b2c6:	07d9      	lsls	r1, r3, #31
 800b2c8:	bf44      	itt	mi
 800b2ca:	f043 0320 	orrmi.w	r3, r3, #32
 800b2ce:	6023      	strmi	r3, [r4, #0]
 800b2d0:	b11d      	cbz	r5, 800b2da <_printf_i+0x19e>
 800b2d2:	2310      	movs	r3, #16
 800b2d4:	e7ac      	b.n	800b230 <_printf_i+0xf4>
 800b2d6:	4827      	ldr	r0, [pc, #156]	@ (800b374 <_printf_i+0x238>)
 800b2d8:	e7e9      	b.n	800b2ae <_printf_i+0x172>
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	f023 0320 	bic.w	r3, r3, #32
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	e7f6      	b.n	800b2d2 <_printf_i+0x196>
 800b2e4:	4616      	mov	r6, r2
 800b2e6:	e7bd      	b.n	800b264 <_printf_i+0x128>
 800b2e8:	6833      	ldr	r3, [r6, #0]
 800b2ea:	6825      	ldr	r5, [r4, #0]
 800b2ec:	6961      	ldr	r1, [r4, #20]
 800b2ee:	1d18      	adds	r0, r3, #4
 800b2f0:	6030      	str	r0, [r6, #0]
 800b2f2:	062e      	lsls	r6, r5, #24
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	d501      	bpl.n	800b2fc <_printf_i+0x1c0>
 800b2f8:	6019      	str	r1, [r3, #0]
 800b2fa:	e002      	b.n	800b302 <_printf_i+0x1c6>
 800b2fc:	0668      	lsls	r0, r5, #25
 800b2fe:	d5fb      	bpl.n	800b2f8 <_printf_i+0x1bc>
 800b300:	8019      	strh	r1, [r3, #0]
 800b302:	2300      	movs	r3, #0
 800b304:	6123      	str	r3, [r4, #16]
 800b306:	4616      	mov	r6, r2
 800b308:	e7bc      	b.n	800b284 <_printf_i+0x148>
 800b30a:	6833      	ldr	r3, [r6, #0]
 800b30c:	1d1a      	adds	r2, r3, #4
 800b30e:	6032      	str	r2, [r6, #0]
 800b310:	681e      	ldr	r6, [r3, #0]
 800b312:	6862      	ldr	r2, [r4, #4]
 800b314:	2100      	movs	r1, #0
 800b316:	4630      	mov	r0, r6
 800b318:	f7f4 ff5a 	bl	80001d0 <memchr>
 800b31c:	b108      	cbz	r0, 800b322 <_printf_i+0x1e6>
 800b31e:	1b80      	subs	r0, r0, r6
 800b320:	6060      	str	r0, [r4, #4]
 800b322:	6863      	ldr	r3, [r4, #4]
 800b324:	6123      	str	r3, [r4, #16]
 800b326:	2300      	movs	r3, #0
 800b328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b32c:	e7aa      	b.n	800b284 <_printf_i+0x148>
 800b32e:	6923      	ldr	r3, [r4, #16]
 800b330:	4632      	mov	r2, r6
 800b332:	4649      	mov	r1, r9
 800b334:	4640      	mov	r0, r8
 800b336:	47d0      	blx	sl
 800b338:	3001      	adds	r0, #1
 800b33a:	d0ad      	beq.n	800b298 <_printf_i+0x15c>
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	079b      	lsls	r3, r3, #30
 800b340:	d413      	bmi.n	800b36a <_printf_i+0x22e>
 800b342:	68e0      	ldr	r0, [r4, #12]
 800b344:	9b03      	ldr	r3, [sp, #12]
 800b346:	4298      	cmp	r0, r3
 800b348:	bfb8      	it	lt
 800b34a:	4618      	movlt	r0, r3
 800b34c:	e7a6      	b.n	800b29c <_printf_i+0x160>
 800b34e:	2301      	movs	r3, #1
 800b350:	4632      	mov	r2, r6
 800b352:	4649      	mov	r1, r9
 800b354:	4640      	mov	r0, r8
 800b356:	47d0      	blx	sl
 800b358:	3001      	adds	r0, #1
 800b35a:	d09d      	beq.n	800b298 <_printf_i+0x15c>
 800b35c:	3501      	adds	r5, #1
 800b35e:	68e3      	ldr	r3, [r4, #12]
 800b360:	9903      	ldr	r1, [sp, #12]
 800b362:	1a5b      	subs	r3, r3, r1
 800b364:	42ab      	cmp	r3, r5
 800b366:	dcf2      	bgt.n	800b34e <_printf_i+0x212>
 800b368:	e7eb      	b.n	800b342 <_printf_i+0x206>
 800b36a:	2500      	movs	r5, #0
 800b36c:	f104 0619 	add.w	r6, r4, #25
 800b370:	e7f5      	b.n	800b35e <_printf_i+0x222>
 800b372:	bf00      	nop
 800b374:	0800eb52 	.word	0x0800eb52
 800b378:	0800eb63 	.word	0x0800eb63

0800b37c <std>:
 800b37c:	2300      	movs	r3, #0
 800b37e:	b510      	push	{r4, lr}
 800b380:	4604      	mov	r4, r0
 800b382:	e9c0 3300 	strd	r3, r3, [r0]
 800b386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b38a:	6083      	str	r3, [r0, #8]
 800b38c:	8181      	strh	r1, [r0, #12]
 800b38e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b390:	81c2      	strh	r2, [r0, #14]
 800b392:	6183      	str	r3, [r0, #24]
 800b394:	4619      	mov	r1, r3
 800b396:	2208      	movs	r2, #8
 800b398:	305c      	adds	r0, #92	@ 0x5c
 800b39a:	f000 f928 	bl	800b5ee <memset>
 800b39e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d4 <std+0x58>)
 800b3a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d8 <std+0x5c>)
 800b3a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3dc <std+0x60>)
 800b3a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e0 <std+0x64>)
 800b3ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e4 <std+0x68>)
 800b3b0:	6224      	str	r4, [r4, #32]
 800b3b2:	429c      	cmp	r4, r3
 800b3b4:	d006      	beq.n	800b3c4 <std+0x48>
 800b3b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3ba:	4294      	cmp	r4, r2
 800b3bc:	d002      	beq.n	800b3c4 <std+0x48>
 800b3be:	33d0      	adds	r3, #208	@ 0xd0
 800b3c0:	429c      	cmp	r4, r3
 800b3c2:	d105      	bne.n	800b3d0 <std+0x54>
 800b3c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3cc:	f000 b98c 	b.w	800b6e8 <__retarget_lock_init_recursive>
 800b3d0:	bd10      	pop	{r4, pc}
 800b3d2:	bf00      	nop
 800b3d4:	0800b569 	.word	0x0800b569
 800b3d8:	0800b58b 	.word	0x0800b58b
 800b3dc:	0800b5c3 	.word	0x0800b5c3
 800b3e0:	0800b5e7 	.word	0x0800b5e7
 800b3e4:	200020a8 	.word	0x200020a8

0800b3e8 <stdio_exit_handler>:
 800b3e8:	4a02      	ldr	r2, [pc, #8]	@ (800b3f4 <stdio_exit_handler+0xc>)
 800b3ea:	4903      	ldr	r1, [pc, #12]	@ (800b3f8 <stdio_exit_handler+0x10>)
 800b3ec:	4803      	ldr	r0, [pc, #12]	@ (800b3fc <stdio_exit_handler+0x14>)
 800b3ee:	f000 b869 	b.w	800b4c4 <_fwalk_sglue>
 800b3f2:	bf00      	nop
 800b3f4:	20000138 	.word	0x20000138
 800b3f8:	0800d065 	.word	0x0800d065
 800b3fc:	20000148 	.word	0x20000148

0800b400 <cleanup_stdio>:
 800b400:	6841      	ldr	r1, [r0, #4]
 800b402:	4b0c      	ldr	r3, [pc, #48]	@ (800b434 <cleanup_stdio+0x34>)
 800b404:	4299      	cmp	r1, r3
 800b406:	b510      	push	{r4, lr}
 800b408:	4604      	mov	r4, r0
 800b40a:	d001      	beq.n	800b410 <cleanup_stdio+0x10>
 800b40c:	f001 fe2a 	bl	800d064 <_fflush_r>
 800b410:	68a1      	ldr	r1, [r4, #8]
 800b412:	4b09      	ldr	r3, [pc, #36]	@ (800b438 <cleanup_stdio+0x38>)
 800b414:	4299      	cmp	r1, r3
 800b416:	d002      	beq.n	800b41e <cleanup_stdio+0x1e>
 800b418:	4620      	mov	r0, r4
 800b41a:	f001 fe23 	bl	800d064 <_fflush_r>
 800b41e:	68e1      	ldr	r1, [r4, #12]
 800b420:	4b06      	ldr	r3, [pc, #24]	@ (800b43c <cleanup_stdio+0x3c>)
 800b422:	4299      	cmp	r1, r3
 800b424:	d004      	beq.n	800b430 <cleanup_stdio+0x30>
 800b426:	4620      	mov	r0, r4
 800b428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b42c:	f001 be1a 	b.w	800d064 <_fflush_r>
 800b430:	bd10      	pop	{r4, pc}
 800b432:	bf00      	nop
 800b434:	200020a8 	.word	0x200020a8
 800b438:	20002110 	.word	0x20002110
 800b43c:	20002178 	.word	0x20002178

0800b440 <global_stdio_init.part.0>:
 800b440:	b510      	push	{r4, lr}
 800b442:	4b0b      	ldr	r3, [pc, #44]	@ (800b470 <global_stdio_init.part.0+0x30>)
 800b444:	4c0b      	ldr	r4, [pc, #44]	@ (800b474 <global_stdio_init.part.0+0x34>)
 800b446:	4a0c      	ldr	r2, [pc, #48]	@ (800b478 <global_stdio_init.part.0+0x38>)
 800b448:	601a      	str	r2, [r3, #0]
 800b44a:	4620      	mov	r0, r4
 800b44c:	2200      	movs	r2, #0
 800b44e:	2104      	movs	r1, #4
 800b450:	f7ff ff94 	bl	800b37c <std>
 800b454:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b458:	2201      	movs	r2, #1
 800b45a:	2109      	movs	r1, #9
 800b45c:	f7ff ff8e 	bl	800b37c <std>
 800b460:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b464:	2202      	movs	r2, #2
 800b466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b46a:	2112      	movs	r1, #18
 800b46c:	f7ff bf86 	b.w	800b37c <std>
 800b470:	200021e0 	.word	0x200021e0
 800b474:	200020a8 	.word	0x200020a8
 800b478:	0800b3e9 	.word	0x0800b3e9

0800b47c <__sfp_lock_acquire>:
 800b47c:	4801      	ldr	r0, [pc, #4]	@ (800b484 <__sfp_lock_acquire+0x8>)
 800b47e:	f000 b934 	b.w	800b6ea <__retarget_lock_acquire_recursive>
 800b482:	bf00      	nop
 800b484:	200021e9 	.word	0x200021e9

0800b488 <__sfp_lock_release>:
 800b488:	4801      	ldr	r0, [pc, #4]	@ (800b490 <__sfp_lock_release+0x8>)
 800b48a:	f000 b92f 	b.w	800b6ec <__retarget_lock_release_recursive>
 800b48e:	bf00      	nop
 800b490:	200021e9 	.word	0x200021e9

0800b494 <__sinit>:
 800b494:	b510      	push	{r4, lr}
 800b496:	4604      	mov	r4, r0
 800b498:	f7ff fff0 	bl	800b47c <__sfp_lock_acquire>
 800b49c:	6a23      	ldr	r3, [r4, #32]
 800b49e:	b11b      	cbz	r3, 800b4a8 <__sinit+0x14>
 800b4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4a4:	f7ff bff0 	b.w	800b488 <__sfp_lock_release>
 800b4a8:	4b04      	ldr	r3, [pc, #16]	@ (800b4bc <__sinit+0x28>)
 800b4aa:	6223      	str	r3, [r4, #32]
 800b4ac:	4b04      	ldr	r3, [pc, #16]	@ (800b4c0 <__sinit+0x2c>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1f5      	bne.n	800b4a0 <__sinit+0xc>
 800b4b4:	f7ff ffc4 	bl	800b440 <global_stdio_init.part.0>
 800b4b8:	e7f2      	b.n	800b4a0 <__sinit+0xc>
 800b4ba:	bf00      	nop
 800b4bc:	0800b401 	.word	0x0800b401
 800b4c0:	200021e0 	.word	0x200021e0

0800b4c4 <_fwalk_sglue>:
 800b4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4c8:	4607      	mov	r7, r0
 800b4ca:	4688      	mov	r8, r1
 800b4cc:	4614      	mov	r4, r2
 800b4ce:	2600      	movs	r6, #0
 800b4d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4d4:	f1b9 0901 	subs.w	r9, r9, #1
 800b4d8:	d505      	bpl.n	800b4e6 <_fwalk_sglue+0x22>
 800b4da:	6824      	ldr	r4, [r4, #0]
 800b4dc:	2c00      	cmp	r4, #0
 800b4de:	d1f7      	bne.n	800b4d0 <_fwalk_sglue+0xc>
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4e6:	89ab      	ldrh	r3, [r5, #12]
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d907      	bls.n	800b4fc <_fwalk_sglue+0x38>
 800b4ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	d003      	beq.n	800b4fc <_fwalk_sglue+0x38>
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	47c0      	blx	r8
 800b4fa:	4306      	orrs	r6, r0
 800b4fc:	3568      	adds	r5, #104	@ 0x68
 800b4fe:	e7e9      	b.n	800b4d4 <_fwalk_sglue+0x10>

0800b500 <sniprintf>:
 800b500:	b40c      	push	{r2, r3}
 800b502:	b530      	push	{r4, r5, lr}
 800b504:	4b17      	ldr	r3, [pc, #92]	@ (800b564 <sniprintf+0x64>)
 800b506:	1e0c      	subs	r4, r1, #0
 800b508:	681d      	ldr	r5, [r3, #0]
 800b50a:	b09d      	sub	sp, #116	@ 0x74
 800b50c:	da08      	bge.n	800b520 <sniprintf+0x20>
 800b50e:	238b      	movs	r3, #139	@ 0x8b
 800b510:	602b      	str	r3, [r5, #0]
 800b512:	f04f 30ff 	mov.w	r0, #4294967295
 800b516:	b01d      	add	sp, #116	@ 0x74
 800b518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b51c:	b002      	add	sp, #8
 800b51e:	4770      	bx	lr
 800b520:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b524:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b528:	bf14      	ite	ne
 800b52a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b52e:	4623      	moveq	r3, r4
 800b530:	9304      	str	r3, [sp, #16]
 800b532:	9307      	str	r3, [sp, #28]
 800b534:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b538:	9002      	str	r0, [sp, #8]
 800b53a:	9006      	str	r0, [sp, #24]
 800b53c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b540:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b542:	ab21      	add	r3, sp, #132	@ 0x84
 800b544:	a902      	add	r1, sp, #8
 800b546:	4628      	mov	r0, r5
 800b548:	9301      	str	r3, [sp, #4]
 800b54a:	f001 fc0b 	bl	800cd64 <_svfiprintf_r>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	bfbc      	itt	lt
 800b552:	238b      	movlt	r3, #139	@ 0x8b
 800b554:	602b      	strlt	r3, [r5, #0]
 800b556:	2c00      	cmp	r4, #0
 800b558:	d0dd      	beq.n	800b516 <sniprintf+0x16>
 800b55a:	9b02      	ldr	r3, [sp, #8]
 800b55c:	2200      	movs	r2, #0
 800b55e:	701a      	strb	r2, [r3, #0]
 800b560:	e7d9      	b.n	800b516 <sniprintf+0x16>
 800b562:	bf00      	nop
 800b564:	20000144 	.word	0x20000144

0800b568 <__sread>:
 800b568:	b510      	push	{r4, lr}
 800b56a:	460c      	mov	r4, r1
 800b56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b570:	f000 f86c 	bl	800b64c <_read_r>
 800b574:	2800      	cmp	r0, #0
 800b576:	bfab      	itete	ge
 800b578:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b57a:	89a3      	ldrhlt	r3, [r4, #12]
 800b57c:	181b      	addge	r3, r3, r0
 800b57e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b582:	bfac      	ite	ge
 800b584:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b586:	81a3      	strhlt	r3, [r4, #12]
 800b588:	bd10      	pop	{r4, pc}

0800b58a <__swrite>:
 800b58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b58e:	461f      	mov	r7, r3
 800b590:	898b      	ldrh	r3, [r1, #12]
 800b592:	05db      	lsls	r3, r3, #23
 800b594:	4605      	mov	r5, r0
 800b596:	460c      	mov	r4, r1
 800b598:	4616      	mov	r6, r2
 800b59a:	d505      	bpl.n	800b5a8 <__swrite+0x1e>
 800b59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f000 f840 	bl	800b628 <_lseek_r>
 800b5a8:	89a3      	ldrh	r3, [r4, #12]
 800b5aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5b2:	81a3      	strh	r3, [r4, #12]
 800b5b4:	4632      	mov	r2, r6
 800b5b6:	463b      	mov	r3, r7
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5be:	f000 b857 	b.w	800b670 <_write_r>

0800b5c2 <__sseek>:
 800b5c2:	b510      	push	{r4, lr}
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ca:	f000 f82d 	bl	800b628 <_lseek_r>
 800b5ce:	1c43      	adds	r3, r0, #1
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	bf15      	itete	ne
 800b5d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5de:	81a3      	strheq	r3, [r4, #12]
 800b5e0:	bf18      	it	ne
 800b5e2:	81a3      	strhne	r3, [r4, #12]
 800b5e4:	bd10      	pop	{r4, pc}

0800b5e6 <__sclose>:
 800b5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ea:	f000 b80d 	b.w	800b608 <_close_r>

0800b5ee <memset>:
 800b5ee:	4402      	add	r2, r0
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d100      	bne.n	800b5f8 <memset+0xa>
 800b5f6:	4770      	bx	lr
 800b5f8:	f803 1b01 	strb.w	r1, [r3], #1
 800b5fc:	e7f9      	b.n	800b5f2 <memset+0x4>
	...

0800b600 <_localeconv_r>:
 800b600:	4800      	ldr	r0, [pc, #0]	@ (800b604 <_localeconv_r+0x4>)
 800b602:	4770      	bx	lr
 800b604:	20000284 	.word	0x20000284

0800b608 <_close_r>:
 800b608:	b538      	push	{r3, r4, r5, lr}
 800b60a:	4d06      	ldr	r5, [pc, #24]	@ (800b624 <_close_r+0x1c>)
 800b60c:	2300      	movs	r3, #0
 800b60e:	4604      	mov	r4, r0
 800b610:	4608      	mov	r0, r1
 800b612:	602b      	str	r3, [r5, #0]
 800b614:	f7f7 f8d0 	bl	80027b8 <_close>
 800b618:	1c43      	adds	r3, r0, #1
 800b61a:	d102      	bne.n	800b622 <_close_r+0x1a>
 800b61c:	682b      	ldr	r3, [r5, #0]
 800b61e:	b103      	cbz	r3, 800b622 <_close_r+0x1a>
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	bd38      	pop	{r3, r4, r5, pc}
 800b624:	200021e4 	.word	0x200021e4

0800b628 <_lseek_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	4d07      	ldr	r5, [pc, #28]	@ (800b648 <_lseek_r+0x20>)
 800b62c:	4604      	mov	r4, r0
 800b62e:	4608      	mov	r0, r1
 800b630:	4611      	mov	r1, r2
 800b632:	2200      	movs	r2, #0
 800b634:	602a      	str	r2, [r5, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	f7f7 f8e5 	bl	8002806 <_lseek>
 800b63c:	1c43      	adds	r3, r0, #1
 800b63e:	d102      	bne.n	800b646 <_lseek_r+0x1e>
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	b103      	cbz	r3, 800b646 <_lseek_r+0x1e>
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	bd38      	pop	{r3, r4, r5, pc}
 800b648:	200021e4 	.word	0x200021e4

0800b64c <_read_r>:
 800b64c:	b538      	push	{r3, r4, r5, lr}
 800b64e:	4d07      	ldr	r5, [pc, #28]	@ (800b66c <_read_r+0x20>)
 800b650:	4604      	mov	r4, r0
 800b652:	4608      	mov	r0, r1
 800b654:	4611      	mov	r1, r2
 800b656:	2200      	movs	r2, #0
 800b658:	602a      	str	r2, [r5, #0]
 800b65a:	461a      	mov	r2, r3
 800b65c:	f7f7 f873 	bl	8002746 <_read>
 800b660:	1c43      	adds	r3, r0, #1
 800b662:	d102      	bne.n	800b66a <_read_r+0x1e>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	b103      	cbz	r3, 800b66a <_read_r+0x1e>
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	200021e4 	.word	0x200021e4

0800b670 <_write_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d07      	ldr	r5, [pc, #28]	@ (800b690 <_write_r+0x20>)
 800b674:	4604      	mov	r4, r0
 800b676:	4608      	mov	r0, r1
 800b678:	4611      	mov	r1, r2
 800b67a:	2200      	movs	r2, #0
 800b67c:	602a      	str	r2, [r5, #0]
 800b67e:	461a      	mov	r2, r3
 800b680:	f7f7 f87e 	bl	8002780 <_write>
 800b684:	1c43      	adds	r3, r0, #1
 800b686:	d102      	bne.n	800b68e <_write_r+0x1e>
 800b688:	682b      	ldr	r3, [r5, #0]
 800b68a:	b103      	cbz	r3, 800b68e <_write_r+0x1e>
 800b68c:	6023      	str	r3, [r4, #0]
 800b68e:	bd38      	pop	{r3, r4, r5, pc}
 800b690:	200021e4 	.word	0x200021e4

0800b694 <__errno>:
 800b694:	4b01      	ldr	r3, [pc, #4]	@ (800b69c <__errno+0x8>)
 800b696:	6818      	ldr	r0, [r3, #0]
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	20000144 	.word	0x20000144

0800b6a0 <__libc_init_array>:
 800b6a0:	b570      	push	{r4, r5, r6, lr}
 800b6a2:	4d0d      	ldr	r5, [pc, #52]	@ (800b6d8 <__libc_init_array+0x38>)
 800b6a4:	4c0d      	ldr	r4, [pc, #52]	@ (800b6dc <__libc_init_array+0x3c>)
 800b6a6:	1b64      	subs	r4, r4, r5
 800b6a8:	10a4      	asrs	r4, r4, #2
 800b6aa:	2600      	movs	r6, #0
 800b6ac:	42a6      	cmp	r6, r4
 800b6ae:	d109      	bne.n	800b6c4 <__libc_init_array+0x24>
 800b6b0:	4d0b      	ldr	r5, [pc, #44]	@ (800b6e0 <__libc_init_array+0x40>)
 800b6b2:	4c0c      	ldr	r4, [pc, #48]	@ (800b6e4 <__libc_init_array+0x44>)
 800b6b4:	f003 f9f4 	bl	800eaa0 <_init>
 800b6b8:	1b64      	subs	r4, r4, r5
 800b6ba:	10a4      	asrs	r4, r4, #2
 800b6bc:	2600      	movs	r6, #0
 800b6be:	42a6      	cmp	r6, r4
 800b6c0:	d105      	bne.n	800b6ce <__libc_init_array+0x2e>
 800b6c2:	bd70      	pop	{r4, r5, r6, pc}
 800b6c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6c8:	4798      	blx	r3
 800b6ca:	3601      	adds	r6, #1
 800b6cc:	e7ee      	b.n	800b6ac <__libc_init_array+0xc>
 800b6ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6d2:	4798      	blx	r3
 800b6d4:	3601      	adds	r6, #1
 800b6d6:	e7f2      	b.n	800b6be <__libc_init_array+0x1e>
 800b6d8:	0800f090 	.word	0x0800f090
 800b6dc:	0800f090 	.word	0x0800f090
 800b6e0:	0800f090 	.word	0x0800f090
 800b6e4:	0800f094 	.word	0x0800f094

0800b6e8 <__retarget_lock_init_recursive>:
 800b6e8:	4770      	bx	lr

0800b6ea <__retarget_lock_acquire_recursive>:
 800b6ea:	4770      	bx	lr

0800b6ec <__retarget_lock_release_recursive>:
 800b6ec:	4770      	bx	lr

0800b6ee <memcpy>:
 800b6ee:	440a      	add	r2, r1
 800b6f0:	4291      	cmp	r1, r2
 800b6f2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6f6:	d100      	bne.n	800b6fa <memcpy+0xc>
 800b6f8:	4770      	bx	lr
 800b6fa:	b510      	push	{r4, lr}
 800b6fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b700:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b704:	4291      	cmp	r1, r2
 800b706:	d1f9      	bne.n	800b6fc <memcpy+0xe>
 800b708:	bd10      	pop	{r4, pc}

0800b70a <quorem>:
 800b70a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70e:	6903      	ldr	r3, [r0, #16]
 800b710:	690c      	ldr	r4, [r1, #16]
 800b712:	42a3      	cmp	r3, r4
 800b714:	4607      	mov	r7, r0
 800b716:	db7e      	blt.n	800b816 <quorem+0x10c>
 800b718:	3c01      	subs	r4, #1
 800b71a:	f101 0814 	add.w	r8, r1, #20
 800b71e:	00a3      	lsls	r3, r4, #2
 800b720:	f100 0514 	add.w	r5, r0, #20
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b72a:	9301      	str	r3, [sp, #4]
 800b72c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b734:	3301      	adds	r3, #1
 800b736:	429a      	cmp	r2, r3
 800b738:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b73c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b740:	d32e      	bcc.n	800b7a0 <quorem+0x96>
 800b742:	f04f 0a00 	mov.w	sl, #0
 800b746:	46c4      	mov	ip, r8
 800b748:	46ae      	mov	lr, r5
 800b74a:	46d3      	mov	fp, sl
 800b74c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b750:	b298      	uxth	r0, r3
 800b752:	fb06 a000 	mla	r0, r6, r0, sl
 800b756:	0c02      	lsrs	r2, r0, #16
 800b758:	0c1b      	lsrs	r3, r3, #16
 800b75a:	fb06 2303 	mla	r3, r6, r3, r2
 800b75e:	f8de 2000 	ldr.w	r2, [lr]
 800b762:	b280      	uxth	r0, r0
 800b764:	b292      	uxth	r2, r2
 800b766:	1a12      	subs	r2, r2, r0
 800b768:	445a      	add	r2, fp
 800b76a:	f8de 0000 	ldr.w	r0, [lr]
 800b76e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b772:	b29b      	uxth	r3, r3
 800b774:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b778:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b77c:	b292      	uxth	r2, r2
 800b77e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b782:	45e1      	cmp	r9, ip
 800b784:	f84e 2b04 	str.w	r2, [lr], #4
 800b788:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b78c:	d2de      	bcs.n	800b74c <quorem+0x42>
 800b78e:	9b00      	ldr	r3, [sp, #0]
 800b790:	58eb      	ldr	r3, [r5, r3]
 800b792:	b92b      	cbnz	r3, 800b7a0 <quorem+0x96>
 800b794:	9b01      	ldr	r3, [sp, #4]
 800b796:	3b04      	subs	r3, #4
 800b798:	429d      	cmp	r5, r3
 800b79a:	461a      	mov	r2, r3
 800b79c:	d32f      	bcc.n	800b7fe <quorem+0xf4>
 800b79e:	613c      	str	r4, [r7, #16]
 800b7a0:	4638      	mov	r0, r7
 800b7a2:	f001 f97b 	bl	800ca9c <__mcmp>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	db25      	blt.n	800b7f6 <quorem+0xec>
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7b2:	f8d1 c000 	ldr.w	ip, [r1]
 800b7b6:	fa1f fe82 	uxth.w	lr, r2
 800b7ba:	fa1f f38c 	uxth.w	r3, ip
 800b7be:	eba3 030e 	sub.w	r3, r3, lr
 800b7c2:	4403      	add	r3, r0
 800b7c4:	0c12      	lsrs	r2, r2, #16
 800b7c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b7ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7d4:	45c1      	cmp	r9, r8
 800b7d6:	f841 3b04 	str.w	r3, [r1], #4
 800b7da:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b7de:	d2e6      	bcs.n	800b7ae <quorem+0xa4>
 800b7e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7e8:	b922      	cbnz	r2, 800b7f4 <quorem+0xea>
 800b7ea:	3b04      	subs	r3, #4
 800b7ec:	429d      	cmp	r5, r3
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	d30b      	bcc.n	800b80a <quorem+0x100>
 800b7f2:	613c      	str	r4, [r7, #16]
 800b7f4:	3601      	adds	r6, #1
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	b003      	add	sp, #12
 800b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fe:	6812      	ldr	r2, [r2, #0]
 800b800:	3b04      	subs	r3, #4
 800b802:	2a00      	cmp	r2, #0
 800b804:	d1cb      	bne.n	800b79e <quorem+0x94>
 800b806:	3c01      	subs	r4, #1
 800b808:	e7c6      	b.n	800b798 <quorem+0x8e>
 800b80a:	6812      	ldr	r2, [r2, #0]
 800b80c:	3b04      	subs	r3, #4
 800b80e:	2a00      	cmp	r2, #0
 800b810:	d1ef      	bne.n	800b7f2 <quorem+0xe8>
 800b812:	3c01      	subs	r4, #1
 800b814:	e7ea      	b.n	800b7ec <quorem+0xe2>
 800b816:	2000      	movs	r0, #0
 800b818:	e7ee      	b.n	800b7f8 <quorem+0xee>
 800b81a:	0000      	movs	r0, r0
 800b81c:	0000      	movs	r0, r0
	...

0800b820 <_dtoa_r>:
 800b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b824:	69c7      	ldr	r7, [r0, #28]
 800b826:	b099      	sub	sp, #100	@ 0x64
 800b828:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b82c:	ec55 4b10 	vmov	r4, r5, d0
 800b830:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b832:	9109      	str	r1, [sp, #36]	@ 0x24
 800b834:	4683      	mov	fp, r0
 800b836:	920e      	str	r2, [sp, #56]	@ 0x38
 800b838:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b83a:	b97f      	cbnz	r7, 800b85c <_dtoa_r+0x3c>
 800b83c:	2010      	movs	r0, #16
 800b83e:	f000 fdfd 	bl	800c43c <malloc>
 800b842:	4602      	mov	r2, r0
 800b844:	f8cb 001c 	str.w	r0, [fp, #28]
 800b848:	b920      	cbnz	r0, 800b854 <_dtoa_r+0x34>
 800b84a:	4ba7      	ldr	r3, [pc, #668]	@ (800bae8 <_dtoa_r+0x2c8>)
 800b84c:	21ef      	movs	r1, #239	@ 0xef
 800b84e:	48a7      	ldr	r0, [pc, #668]	@ (800baec <_dtoa_r+0x2cc>)
 800b850:	f001 fc5a 	bl	800d108 <__assert_func>
 800b854:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b858:	6007      	str	r7, [r0, #0]
 800b85a:	60c7      	str	r7, [r0, #12]
 800b85c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b860:	6819      	ldr	r1, [r3, #0]
 800b862:	b159      	cbz	r1, 800b87c <_dtoa_r+0x5c>
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	604a      	str	r2, [r1, #4]
 800b868:	2301      	movs	r3, #1
 800b86a:	4093      	lsls	r3, r2
 800b86c:	608b      	str	r3, [r1, #8]
 800b86e:	4658      	mov	r0, fp
 800b870:	f000 feda 	bl	800c628 <_Bfree>
 800b874:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b878:	2200      	movs	r2, #0
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	1e2b      	subs	r3, r5, #0
 800b87e:	bfb9      	ittee	lt
 800b880:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b884:	9303      	strlt	r3, [sp, #12]
 800b886:	2300      	movge	r3, #0
 800b888:	6033      	strge	r3, [r6, #0]
 800b88a:	9f03      	ldr	r7, [sp, #12]
 800b88c:	4b98      	ldr	r3, [pc, #608]	@ (800baf0 <_dtoa_r+0x2d0>)
 800b88e:	bfbc      	itt	lt
 800b890:	2201      	movlt	r2, #1
 800b892:	6032      	strlt	r2, [r6, #0]
 800b894:	43bb      	bics	r3, r7
 800b896:	d112      	bne.n	800b8be <_dtoa_r+0x9e>
 800b898:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b89a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8a4:	4323      	orrs	r3, r4
 800b8a6:	f000 854d 	beq.w	800c344 <_dtoa_r+0xb24>
 800b8aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bb04 <_dtoa_r+0x2e4>
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f000 854f 	beq.w	800c354 <_dtoa_r+0xb34>
 800b8b6:	f10a 0303 	add.w	r3, sl, #3
 800b8ba:	f000 bd49 	b.w	800c350 <_dtoa_r+0xb30>
 800b8be:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	ec51 0b17 	vmov	r0, r1, d7
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b8ce:	f7f5 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8d2:	4680      	mov	r8, r0
 800b8d4:	b158      	cbz	r0, 800b8ee <_dtoa_r+0xce>
 800b8d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b8d8:	2301      	movs	r3, #1
 800b8da:	6013      	str	r3, [r2, #0]
 800b8dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8de:	b113      	cbz	r3, 800b8e6 <_dtoa_r+0xc6>
 800b8e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b8e2:	4b84      	ldr	r3, [pc, #528]	@ (800baf4 <_dtoa_r+0x2d4>)
 800b8e4:	6013      	str	r3, [r2, #0]
 800b8e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bb08 <_dtoa_r+0x2e8>
 800b8ea:	f000 bd33 	b.w	800c354 <_dtoa_r+0xb34>
 800b8ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b8f2:	aa16      	add	r2, sp, #88	@ 0x58
 800b8f4:	a917      	add	r1, sp, #92	@ 0x5c
 800b8f6:	4658      	mov	r0, fp
 800b8f8:	f001 f980 	bl	800cbfc <__d2b>
 800b8fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b900:	4681      	mov	r9, r0
 800b902:	2e00      	cmp	r6, #0
 800b904:	d077      	beq.n	800b9f6 <_dtoa_r+0x1d6>
 800b906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b908:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b90c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b914:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b918:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b91c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b920:	4619      	mov	r1, r3
 800b922:	2200      	movs	r2, #0
 800b924:	4b74      	ldr	r3, [pc, #464]	@ (800baf8 <_dtoa_r+0x2d8>)
 800b926:	f7f4 fcaf 	bl	8000288 <__aeabi_dsub>
 800b92a:	a369      	add	r3, pc, #420	@ (adr r3, 800bad0 <_dtoa_r+0x2b0>)
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	f7f4 fe62 	bl	80005f8 <__aeabi_dmul>
 800b934:	a368      	add	r3, pc, #416	@ (adr r3, 800bad8 <_dtoa_r+0x2b8>)
 800b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93a:	f7f4 fca7 	bl	800028c <__adddf3>
 800b93e:	4604      	mov	r4, r0
 800b940:	4630      	mov	r0, r6
 800b942:	460d      	mov	r5, r1
 800b944:	f7f4 fdee 	bl	8000524 <__aeabi_i2d>
 800b948:	a365      	add	r3, pc, #404	@ (adr r3, 800bae0 <_dtoa_r+0x2c0>)
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	f7f4 fe53 	bl	80005f8 <__aeabi_dmul>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	4620      	mov	r0, r4
 800b958:	4629      	mov	r1, r5
 800b95a:	f7f4 fc97 	bl	800028c <__adddf3>
 800b95e:	4604      	mov	r4, r0
 800b960:	460d      	mov	r5, r1
 800b962:	f7f5 f8f9 	bl	8000b58 <__aeabi_d2iz>
 800b966:	2200      	movs	r2, #0
 800b968:	4607      	mov	r7, r0
 800b96a:	2300      	movs	r3, #0
 800b96c:	4620      	mov	r0, r4
 800b96e:	4629      	mov	r1, r5
 800b970:	f7f5 f8b4 	bl	8000adc <__aeabi_dcmplt>
 800b974:	b140      	cbz	r0, 800b988 <_dtoa_r+0x168>
 800b976:	4638      	mov	r0, r7
 800b978:	f7f4 fdd4 	bl	8000524 <__aeabi_i2d>
 800b97c:	4622      	mov	r2, r4
 800b97e:	462b      	mov	r3, r5
 800b980:	f7f5 f8a2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b984:	b900      	cbnz	r0, 800b988 <_dtoa_r+0x168>
 800b986:	3f01      	subs	r7, #1
 800b988:	2f16      	cmp	r7, #22
 800b98a:	d851      	bhi.n	800ba30 <_dtoa_r+0x210>
 800b98c:	4b5b      	ldr	r3, [pc, #364]	@ (800bafc <_dtoa_r+0x2dc>)
 800b98e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b99a:	f7f5 f89f 	bl	8000adc <__aeabi_dcmplt>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d048      	beq.n	800ba34 <_dtoa_r+0x214>
 800b9a2:	3f01      	subs	r7, #1
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b9a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b9aa:	1b9b      	subs	r3, r3, r6
 800b9ac:	1e5a      	subs	r2, r3, #1
 800b9ae:	bf44      	itt	mi
 800b9b0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b9b4:	2300      	movmi	r3, #0
 800b9b6:	9208      	str	r2, [sp, #32]
 800b9b8:	bf54      	ite	pl
 800b9ba:	f04f 0800 	movpl.w	r8, #0
 800b9be:	9308      	strmi	r3, [sp, #32]
 800b9c0:	2f00      	cmp	r7, #0
 800b9c2:	db39      	blt.n	800ba38 <_dtoa_r+0x218>
 800b9c4:	9b08      	ldr	r3, [sp, #32]
 800b9c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b9c8:	443b      	add	r3, r7
 800b9ca:	9308      	str	r3, [sp, #32]
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9d2:	2b09      	cmp	r3, #9
 800b9d4:	d864      	bhi.n	800baa0 <_dtoa_r+0x280>
 800b9d6:	2b05      	cmp	r3, #5
 800b9d8:	bfc4      	itt	gt
 800b9da:	3b04      	subgt	r3, #4
 800b9dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e0:	f1a3 0302 	sub.w	r3, r3, #2
 800b9e4:	bfcc      	ite	gt
 800b9e6:	2400      	movgt	r4, #0
 800b9e8:	2401      	movle	r4, #1
 800b9ea:	2b03      	cmp	r3, #3
 800b9ec:	d863      	bhi.n	800bab6 <_dtoa_r+0x296>
 800b9ee:	e8df f003 	tbb	[pc, r3]
 800b9f2:	372a      	.short	0x372a
 800b9f4:	5535      	.short	0x5535
 800b9f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b9fa:	441e      	add	r6, r3
 800b9fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ba00:	2b20      	cmp	r3, #32
 800ba02:	bfc1      	itttt	gt
 800ba04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ba08:	409f      	lslgt	r7, r3
 800ba0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ba0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ba12:	bfd6      	itet	le
 800ba14:	f1c3 0320 	rsble	r3, r3, #32
 800ba18:	ea47 0003 	orrgt.w	r0, r7, r3
 800ba1c:	fa04 f003 	lslle.w	r0, r4, r3
 800ba20:	f7f4 fd70 	bl	8000504 <__aeabi_ui2d>
 800ba24:	2201      	movs	r2, #1
 800ba26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba2a:	3e01      	subs	r6, #1
 800ba2c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ba2e:	e777      	b.n	800b920 <_dtoa_r+0x100>
 800ba30:	2301      	movs	r3, #1
 800ba32:	e7b8      	b.n	800b9a6 <_dtoa_r+0x186>
 800ba34:	9012      	str	r0, [sp, #72]	@ 0x48
 800ba36:	e7b7      	b.n	800b9a8 <_dtoa_r+0x188>
 800ba38:	427b      	negs	r3, r7
 800ba3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	eba8 0807 	sub.w	r8, r8, r7
 800ba42:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba44:	e7c4      	b.n	800b9d0 <_dtoa_r+0x1b0>
 800ba46:	2300      	movs	r3, #0
 800ba48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	dc35      	bgt.n	800babc <_dtoa_r+0x29c>
 800ba50:	2301      	movs	r3, #1
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	9307      	str	r3, [sp, #28]
 800ba56:	461a      	mov	r2, r3
 800ba58:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba5a:	e00b      	b.n	800ba74 <_dtoa_r+0x254>
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e7f3      	b.n	800ba48 <_dtoa_r+0x228>
 800ba60:	2300      	movs	r3, #0
 800ba62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba66:	18fb      	adds	r3, r7, r3
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	9307      	str	r3, [sp, #28]
 800ba70:	bfb8      	it	lt
 800ba72:	2301      	movlt	r3, #1
 800ba74:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ba78:	2100      	movs	r1, #0
 800ba7a:	2204      	movs	r2, #4
 800ba7c:	f102 0514 	add.w	r5, r2, #20
 800ba80:	429d      	cmp	r5, r3
 800ba82:	d91f      	bls.n	800bac4 <_dtoa_r+0x2a4>
 800ba84:	6041      	str	r1, [r0, #4]
 800ba86:	4658      	mov	r0, fp
 800ba88:	f000 fd8e 	bl	800c5a8 <_Balloc>
 800ba8c:	4682      	mov	sl, r0
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d13c      	bne.n	800bb0c <_dtoa_r+0x2ec>
 800ba92:	4b1b      	ldr	r3, [pc, #108]	@ (800bb00 <_dtoa_r+0x2e0>)
 800ba94:	4602      	mov	r2, r0
 800ba96:	f240 11af 	movw	r1, #431	@ 0x1af
 800ba9a:	e6d8      	b.n	800b84e <_dtoa_r+0x2e>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e7e0      	b.n	800ba62 <_dtoa_r+0x242>
 800baa0:	2401      	movs	r4, #1
 800baa2:	2300      	movs	r3, #0
 800baa4:	9309      	str	r3, [sp, #36]	@ 0x24
 800baa6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800baa8:	f04f 33ff 	mov.w	r3, #4294967295
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	9307      	str	r3, [sp, #28]
 800bab0:	2200      	movs	r2, #0
 800bab2:	2312      	movs	r3, #18
 800bab4:	e7d0      	b.n	800ba58 <_dtoa_r+0x238>
 800bab6:	2301      	movs	r3, #1
 800bab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baba:	e7f5      	b.n	800baa8 <_dtoa_r+0x288>
 800babc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800babe:	9300      	str	r3, [sp, #0]
 800bac0:	9307      	str	r3, [sp, #28]
 800bac2:	e7d7      	b.n	800ba74 <_dtoa_r+0x254>
 800bac4:	3101      	adds	r1, #1
 800bac6:	0052      	lsls	r2, r2, #1
 800bac8:	e7d8      	b.n	800ba7c <_dtoa_r+0x25c>
 800baca:	bf00      	nop
 800bacc:	f3af 8000 	nop.w
 800bad0:	636f4361 	.word	0x636f4361
 800bad4:	3fd287a7 	.word	0x3fd287a7
 800bad8:	8b60c8b3 	.word	0x8b60c8b3
 800badc:	3fc68a28 	.word	0x3fc68a28
 800bae0:	509f79fb 	.word	0x509f79fb
 800bae4:	3fd34413 	.word	0x3fd34413
 800bae8:	0800eb81 	.word	0x0800eb81
 800baec:	0800eb98 	.word	0x0800eb98
 800baf0:	7ff00000 	.word	0x7ff00000
 800baf4:	0800eb51 	.word	0x0800eb51
 800baf8:	3ff80000 	.word	0x3ff80000
 800bafc:	0800ec90 	.word	0x0800ec90
 800bb00:	0800ebf0 	.word	0x0800ebf0
 800bb04:	0800eb7d 	.word	0x0800eb7d
 800bb08:	0800eb50 	.word	0x0800eb50
 800bb0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb10:	6018      	str	r0, [r3, #0]
 800bb12:	9b07      	ldr	r3, [sp, #28]
 800bb14:	2b0e      	cmp	r3, #14
 800bb16:	f200 80a4 	bhi.w	800bc62 <_dtoa_r+0x442>
 800bb1a:	2c00      	cmp	r4, #0
 800bb1c:	f000 80a1 	beq.w	800bc62 <_dtoa_r+0x442>
 800bb20:	2f00      	cmp	r7, #0
 800bb22:	dd33      	ble.n	800bb8c <_dtoa_r+0x36c>
 800bb24:	4bad      	ldr	r3, [pc, #692]	@ (800bddc <_dtoa_r+0x5bc>)
 800bb26:	f007 020f 	and.w	r2, r7, #15
 800bb2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb2e:	ed93 7b00 	vldr	d7, [r3]
 800bb32:	05f8      	lsls	r0, r7, #23
 800bb34:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb38:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb3c:	d516      	bpl.n	800bb6c <_dtoa_r+0x34c>
 800bb3e:	4ba8      	ldr	r3, [pc, #672]	@ (800bde0 <_dtoa_r+0x5c0>)
 800bb40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb48:	f7f4 fe80 	bl	800084c <__aeabi_ddiv>
 800bb4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb50:	f004 040f 	and.w	r4, r4, #15
 800bb54:	2603      	movs	r6, #3
 800bb56:	4da2      	ldr	r5, [pc, #648]	@ (800bde0 <_dtoa_r+0x5c0>)
 800bb58:	b954      	cbnz	r4, 800bb70 <_dtoa_r+0x350>
 800bb5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb62:	f7f4 fe73 	bl	800084c <__aeabi_ddiv>
 800bb66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb6a:	e028      	b.n	800bbbe <_dtoa_r+0x39e>
 800bb6c:	2602      	movs	r6, #2
 800bb6e:	e7f2      	b.n	800bb56 <_dtoa_r+0x336>
 800bb70:	07e1      	lsls	r1, r4, #31
 800bb72:	d508      	bpl.n	800bb86 <_dtoa_r+0x366>
 800bb74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb7c:	f7f4 fd3c 	bl	80005f8 <__aeabi_dmul>
 800bb80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb84:	3601      	adds	r6, #1
 800bb86:	1064      	asrs	r4, r4, #1
 800bb88:	3508      	adds	r5, #8
 800bb8a:	e7e5      	b.n	800bb58 <_dtoa_r+0x338>
 800bb8c:	f000 80d2 	beq.w	800bd34 <_dtoa_r+0x514>
 800bb90:	427c      	negs	r4, r7
 800bb92:	4b92      	ldr	r3, [pc, #584]	@ (800bddc <_dtoa_r+0x5bc>)
 800bb94:	4d92      	ldr	r5, [pc, #584]	@ (800bde0 <_dtoa_r+0x5c0>)
 800bb96:	f004 020f 	and.w	r2, r4, #15
 800bb9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bba6:	f7f4 fd27 	bl	80005f8 <__aeabi_dmul>
 800bbaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbae:	1124      	asrs	r4, r4, #4
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	2602      	movs	r6, #2
 800bbb4:	2c00      	cmp	r4, #0
 800bbb6:	f040 80b2 	bne.w	800bd1e <_dtoa_r+0x4fe>
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1d3      	bne.n	800bb66 <_dtoa_r+0x346>
 800bbbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bbc0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 80b7 	beq.w	800bd38 <_dtoa_r+0x518>
 800bbca:	4b86      	ldr	r3, [pc, #536]	@ (800bde4 <_dtoa_r+0x5c4>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	4620      	mov	r0, r4
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	f7f4 ff83 	bl	8000adc <__aeabi_dcmplt>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	f000 80ae 	beq.w	800bd38 <_dtoa_r+0x518>
 800bbdc:	9b07      	ldr	r3, [sp, #28]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 80aa 	beq.w	800bd38 <_dtoa_r+0x518>
 800bbe4:	9b00      	ldr	r3, [sp, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	dd37      	ble.n	800bc5a <_dtoa_r+0x43a>
 800bbea:	1e7b      	subs	r3, r7, #1
 800bbec:	9304      	str	r3, [sp, #16]
 800bbee:	4620      	mov	r0, r4
 800bbf0:	4b7d      	ldr	r3, [pc, #500]	@ (800bde8 <_dtoa_r+0x5c8>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	f7f4 fcff 	bl	80005f8 <__aeabi_dmul>
 800bbfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbfe:	9c00      	ldr	r4, [sp, #0]
 800bc00:	3601      	adds	r6, #1
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7f4 fc8e 	bl	8000524 <__aeabi_i2d>
 800bc08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc0c:	f7f4 fcf4 	bl	80005f8 <__aeabi_dmul>
 800bc10:	4b76      	ldr	r3, [pc, #472]	@ (800bdec <_dtoa_r+0x5cc>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	f7f4 fb3a 	bl	800028c <__adddf3>
 800bc18:	4605      	mov	r5, r0
 800bc1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bc1e:	2c00      	cmp	r4, #0
 800bc20:	f040 808d 	bne.w	800bd3e <_dtoa_r+0x51e>
 800bc24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc28:	4b71      	ldr	r3, [pc, #452]	@ (800bdf0 <_dtoa_r+0x5d0>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f7f4 fb2c 	bl	8000288 <__aeabi_dsub>
 800bc30:	4602      	mov	r2, r0
 800bc32:	460b      	mov	r3, r1
 800bc34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc38:	462a      	mov	r2, r5
 800bc3a:	4633      	mov	r3, r6
 800bc3c:	f7f4 ff6c 	bl	8000b18 <__aeabi_dcmpgt>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	f040 828b 	bne.w	800c15c <_dtoa_r+0x93c>
 800bc46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc4a:	462a      	mov	r2, r5
 800bc4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc50:	f7f4 ff44 	bl	8000adc <__aeabi_dcmplt>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	f040 8128 	bne.w	800beaa <_dtoa_r+0x68a>
 800bc5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bc5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bc62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	f2c0 815a 	blt.w	800bf1e <_dtoa_r+0x6fe>
 800bc6a:	2f0e      	cmp	r7, #14
 800bc6c:	f300 8157 	bgt.w	800bf1e <_dtoa_r+0x6fe>
 800bc70:	4b5a      	ldr	r3, [pc, #360]	@ (800bddc <_dtoa_r+0x5bc>)
 800bc72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc76:	ed93 7b00 	vldr	d7, [r3]
 800bc7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	ed8d 7b00 	vstr	d7, [sp]
 800bc82:	da03      	bge.n	800bc8c <_dtoa_r+0x46c>
 800bc84:	9b07      	ldr	r3, [sp, #28]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	f340 8101 	ble.w	800be8e <_dtoa_r+0x66e>
 800bc8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc90:	4656      	mov	r6, sl
 800bc92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc96:	4620      	mov	r0, r4
 800bc98:	4629      	mov	r1, r5
 800bc9a:	f7f4 fdd7 	bl	800084c <__aeabi_ddiv>
 800bc9e:	f7f4 ff5b 	bl	8000b58 <__aeabi_d2iz>
 800bca2:	4680      	mov	r8, r0
 800bca4:	f7f4 fc3e 	bl	8000524 <__aeabi_i2d>
 800bca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcac:	f7f4 fca4 	bl	80005f8 <__aeabi_dmul>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bcbc:	f7f4 fae4 	bl	8000288 <__aeabi_dsub>
 800bcc0:	f806 4b01 	strb.w	r4, [r6], #1
 800bcc4:	9d07      	ldr	r5, [sp, #28]
 800bcc6:	eba6 040a 	sub.w	r4, r6, sl
 800bcca:	42a5      	cmp	r5, r4
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	f040 8117 	bne.w	800bf02 <_dtoa_r+0x6e2>
 800bcd4:	f7f4 fada 	bl	800028c <__adddf3>
 800bcd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcdc:	4604      	mov	r4, r0
 800bcde:	460d      	mov	r5, r1
 800bce0:	f7f4 ff1a 	bl	8000b18 <__aeabi_dcmpgt>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	f040 80f9 	bne.w	800bedc <_dtoa_r+0x6bc>
 800bcea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcee:	4620      	mov	r0, r4
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	f7f4 fee9 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcf6:	b118      	cbz	r0, 800bd00 <_dtoa_r+0x4e0>
 800bcf8:	f018 0f01 	tst.w	r8, #1
 800bcfc:	f040 80ee 	bne.w	800bedc <_dtoa_r+0x6bc>
 800bd00:	4649      	mov	r1, r9
 800bd02:	4658      	mov	r0, fp
 800bd04:	f000 fc90 	bl	800c628 <_Bfree>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	7033      	strb	r3, [r6, #0]
 800bd0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd0e:	3701      	adds	r7, #1
 800bd10:	601f      	str	r7, [r3, #0]
 800bd12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f000 831d 	beq.w	800c354 <_dtoa_r+0xb34>
 800bd1a:	601e      	str	r6, [r3, #0]
 800bd1c:	e31a      	b.n	800c354 <_dtoa_r+0xb34>
 800bd1e:	07e2      	lsls	r2, r4, #31
 800bd20:	d505      	bpl.n	800bd2e <_dtoa_r+0x50e>
 800bd22:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd26:	f7f4 fc67 	bl	80005f8 <__aeabi_dmul>
 800bd2a:	3601      	adds	r6, #1
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	1064      	asrs	r4, r4, #1
 800bd30:	3508      	adds	r5, #8
 800bd32:	e73f      	b.n	800bbb4 <_dtoa_r+0x394>
 800bd34:	2602      	movs	r6, #2
 800bd36:	e742      	b.n	800bbbe <_dtoa_r+0x39e>
 800bd38:	9c07      	ldr	r4, [sp, #28]
 800bd3a:	9704      	str	r7, [sp, #16]
 800bd3c:	e761      	b.n	800bc02 <_dtoa_r+0x3e2>
 800bd3e:	4b27      	ldr	r3, [pc, #156]	@ (800bddc <_dtoa_r+0x5bc>)
 800bd40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd4a:	4454      	add	r4, sl
 800bd4c:	2900      	cmp	r1, #0
 800bd4e:	d053      	beq.n	800bdf8 <_dtoa_r+0x5d8>
 800bd50:	4928      	ldr	r1, [pc, #160]	@ (800bdf4 <_dtoa_r+0x5d4>)
 800bd52:	2000      	movs	r0, #0
 800bd54:	f7f4 fd7a 	bl	800084c <__aeabi_ddiv>
 800bd58:	4633      	mov	r3, r6
 800bd5a:	462a      	mov	r2, r5
 800bd5c:	f7f4 fa94 	bl	8000288 <__aeabi_dsub>
 800bd60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd64:	4656      	mov	r6, sl
 800bd66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd6a:	f7f4 fef5 	bl	8000b58 <__aeabi_d2iz>
 800bd6e:	4605      	mov	r5, r0
 800bd70:	f7f4 fbd8 	bl	8000524 <__aeabi_i2d>
 800bd74:	4602      	mov	r2, r0
 800bd76:	460b      	mov	r3, r1
 800bd78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd7c:	f7f4 fa84 	bl	8000288 <__aeabi_dsub>
 800bd80:	3530      	adds	r5, #48	@ 0x30
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd8a:	f806 5b01 	strb.w	r5, [r6], #1
 800bd8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd92:	f7f4 fea3 	bl	8000adc <__aeabi_dcmplt>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d171      	bne.n	800be7e <_dtoa_r+0x65e>
 800bd9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd9e:	4911      	ldr	r1, [pc, #68]	@ (800bde4 <_dtoa_r+0x5c4>)
 800bda0:	2000      	movs	r0, #0
 800bda2:	f7f4 fa71 	bl	8000288 <__aeabi_dsub>
 800bda6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdaa:	f7f4 fe97 	bl	8000adc <__aeabi_dcmplt>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	f040 8095 	bne.w	800bede <_dtoa_r+0x6be>
 800bdb4:	42a6      	cmp	r6, r4
 800bdb6:	f43f af50 	beq.w	800bc5a <_dtoa_r+0x43a>
 800bdba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bdbe:	4b0a      	ldr	r3, [pc, #40]	@ (800bde8 <_dtoa_r+0x5c8>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f7f4 fc19 	bl	80005f8 <__aeabi_dmul>
 800bdc6:	4b08      	ldr	r3, [pc, #32]	@ (800bde8 <_dtoa_r+0x5c8>)
 800bdc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdcc:	2200      	movs	r2, #0
 800bdce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdd2:	f7f4 fc11 	bl	80005f8 <__aeabi_dmul>
 800bdd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdda:	e7c4      	b.n	800bd66 <_dtoa_r+0x546>
 800bddc:	0800ec90 	.word	0x0800ec90
 800bde0:	0800ec68 	.word	0x0800ec68
 800bde4:	3ff00000 	.word	0x3ff00000
 800bde8:	40240000 	.word	0x40240000
 800bdec:	401c0000 	.word	0x401c0000
 800bdf0:	40140000 	.word	0x40140000
 800bdf4:	3fe00000 	.word	0x3fe00000
 800bdf8:	4631      	mov	r1, r6
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	f7f4 fbfc 	bl	80005f8 <__aeabi_dmul>
 800be00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be04:	9415      	str	r4, [sp, #84]	@ 0x54
 800be06:	4656      	mov	r6, sl
 800be08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be0c:	f7f4 fea4 	bl	8000b58 <__aeabi_d2iz>
 800be10:	4605      	mov	r5, r0
 800be12:	f7f4 fb87 	bl	8000524 <__aeabi_i2d>
 800be16:	4602      	mov	r2, r0
 800be18:	460b      	mov	r3, r1
 800be1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be1e:	f7f4 fa33 	bl	8000288 <__aeabi_dsub>
 800be22:	3530      	adds	r5, #48	@ 0x30
 800be24:	f806 5b01 	strb.w	r5, [r6], #1
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	42a6      	cmp	r6, r4
 800be2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be32:	f04f 0200 	mov.w	r2, #0
 800be36:	d124      	bne.n	800be82 <_dtoa_r+0x662>
 800be38:	4bac      	ldr	r3, [pc, #688]	@ (800c0ec <_dtoa_r+0x8cc>)
 800be3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be3e:	f7f4 fa25 	bl	800028c <__adddf3>
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be4a:	f7f4 fe65 	bl	8000b18 <__aeabi_dcmpgt>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d145      	bne.n	800bede <_dtoa_r+0x6be>
 800be52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be56:	49a5      	ldr	r1, [pc, #660]	@ (800c0ec <_dtoa_r+0x8cc>)
 800be58:	2000      	movs	r0, #0
 800be5a:	f7f4 fa15 	bl	8000288 <__aeabi_dsub>
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be66:	f7f4 fe39 	bl	8000adc <__aeabi_dcmplt>
 800be6a:	2800      	cmp	r0, #0
 800be6c:	f43f aef5 	beq.w	800bc5a <_dtoa_r+0x43a>
 800be70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800be72:	1e73      	subs	r3, r6, #1
 800be74:	9315      	str	r3, [sp, #84]	@ 0x54
 800be76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be7a:	2b30      	cmp	r3, #48	@ 0x30
 800be7c:	d0f8      	beq.n	800be70 <_dtoa_r+0x650>
 800be7e:	9f04      	ldr	r7, [sp, #16]
 800be80:	e73e      	b.n	800bd00 <_dtoa_r+0x4e0>
 800be82:	4b9b      	ldr	r3, [pc, #620]	@ (800c0f0 <_dtoa_r+0x8d0>)
 800be84:	f7f4 fbb8 	bl	80005f8 <__aeabi_dmul>
 800be88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be8c:	e7bc      	b.n	800be08 <_dtoa_r+0x5e8>
 800be8e:	d10c      	bne.n	800beaa <_dtoa_r+0x68a>
 800be90:	4b98      	ldr	r3, [pc, #608]	@ (800c0f4 <_dtoa_r+0x8d4>)
 800be92:	2200      	movs	r2, #0
 800be94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be98:	f7f4 fbae 	bl	80005f8 <__aeabi_dmul>
 800be9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bea0:	f7f4 fe30 	bl	8000b04 <__aeabi_dcmpge>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	f000 8157 	beq.w	800c158 <_dtoa_r+0x938>
 800beaa:	2400      	movs	r4, #0
 800beac:	4625      	mov	r5, r4
 800beae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beb0:	43db      	mvns	r3, r3
 800beb2:	9304      	str	r3, [sp, #16]
 800beb4:	4656      	mov	r6, sl
 800beb6:	2700      	movs	r7, #0
 800beb8:	4621      	mov	r1, r4
 800beba:	4658      	mov	r0, fp
 800bebc:	f000 fbb4 	bl	800c628 <_Bfree>
 800bec0:	2d00      	cmp	r5, #0
 800bec2:	d0dc      	beq.n	800be7e <_dtoa_r+0x65e>
 800bec4:	b12f      	cbz	r7, 800bed2 <_dtoa_r+0x6b2>
 800bec6:	42af      	cmp	r7, r5
 800bec8:	d003      	beq.n	800bed2 <_dtoa_r+0x6b2>
 800beca:	4639      	mov	r1, r7
 800becc:	4658      	mov	r0, fp
 800bece:	f000 fbab 	bl	800c628 <_Bfree>
 800bed2:	4629      	mov	r1, r5
 800bed4:	4658      	mov	r0, fp
 800bed6:	f000 fba7 	bl	800c628 <_Bfree>
 800beda:	e7d0      	b.n	800be7e <_dtoa_r+0x65e>
 800bedc:	9704      	str	r7, [sp, #16]
 800bede:	4633      	mov	r3, r6
 800bee0:	461e      	mov	r6, r3
 800bee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bee6:	2a39      	cmp	r2, #57	@ 0x39
 800bee8:	d107      	bne.n	800befa <_dtoa_r+0x6da>
 800beea:	459a      	cmp	sl, r3
 800beec:	d1f8      	bne.n	800bee0 <_dtoa_r+0x6c0>
 800beee:	9a04      	ldr	r2, [sp, #16]
 800bef0:	3201      	adds	r2, #1
 800bef2:	9204      	str	r2, [sp, #16]
 800bef4:	2230      	movs	r2, #48	@ 0x30
 800bef6:	f88a 2000 	strb.w	r2, [sl]
 800befa:	781a      	ldrb	r2, [r3, #0]
 800befc:	3201      	adds	r2, #1
 800befe:	701a      	strb	r2, [r3, #0]
 800bf00:	e7bd      	b.n	800be7e <_dtoa_r+0x65e>
 800bf02:	4b7b      	ldr	r3, [pc, #492]	@ (800c0f0 <_dtoa_r+0x8d0>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	f7f4 fb77 	bl	80005f8 <__aeabi_dmul>
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4604      	mov	r4, r0
 800bf10:	460d      	mov	r5, r1
 800bf12:	f7f4 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	f43f aebb 	beq.w	800bc92 <_dtoa_r+0x472>
 800bf1c:	e6f0      	b.n	800bd00 <_dtoa_r+0x4e0>
 800bf1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf20:	2a00      	cmp	r2, #0
 800bf22:	f000 80db 	beq.w	800c0dc <_dtoa_r+0x8bc>
 800bf26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf28:	2a01      	cmp	r2, #1
 800bf2a:	f300 80bf 	bgt.w	800c0ac <_dtoa_r+0x88c>
 800bf2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf30:	2a00      	cmp	r2, #0
 800bf32:	f000 80b7 	beq.w	800c0a4 <_dtoa_r+0x884>
 800bf36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bf3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf3c:	4646      	mov	r6, r8
 800bf3e:	9a08      	ldr	r2, [sp, #32]
 800bf40:	2101      	movs	r1, #1
 800bf42:	441a      	add	r2, r3
 800bf44:	4658      	mov	r0, fp
 800bf46:	4498      	add	r8, r3
 800bf48:	9208      	str	r2, [sp, #32]
 800bf4a:	f000 fc21 	bl	800c790 <__i2b>
 800bf4e:	4605      	mov	r5, r0
 800bf50:	b15e      	cbz	r6, 800bf6a <_dtoa_r+0x74a>
 800bf52:	9b08      	ldr	r3, [sp, #32]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	dd08      	ble.n	800bf6a <_dtoa_r+0x74a>
 800bf58:	42b3      	cmp	r3, r6
 800bf5a:	9a08      	ldr	r2, [sp, #32]
 800bf5c:	bfa8      	it	ge
 800bf5e:	4633      	movge	r3, r6
 800bf60:	eba8 0803 	sub.w	r8, r8, r3
 800bf64:	1af6      	subs	r6, r6, r3
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	9308      	str	r3, [sp, #32]
 800bf6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf6c:	b1f3      	cbz	r3, 800bfac <_dtoa_r+0x78c>
 800bf6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f000 80b7 	beq.w	800c0e4 <_dtoa_r+0x8c4>
 800bf76:	b18c      	cbz	r4, 800bf9c <_dtoa_r+0x77c>
 800bf78:	4629      	mov	r1, r5
 800bf7a:	4622      	mov	r2, r4
 800bf7c:	4658      	mov	r0, fp
 800bf7e:	f000 fcc7 	bl	800c910 <__pow5mult>
 800bf82:	464a      	mov	r2, r9
 800bf84:	4601      	mov	r1, r0
 800bf86:	4605      	mov	r5, r0
 800bf88:	4658      	mov	r0, fp
 800bf8a:	f000 fc17 	bl	800c7bc <__multiply>
 800bf8e:	4649      	mov	r1, r9
 800bf90:	9004      	str	r0, [sp, #16]
 800bf92:	4658      	mov	r0, fp
 800bf94:	f000 fb48 	bl	800c628 <_Bfree>
 800bf98:	9b04      	ldr	r3, [sp, #16]
 800bf9a:	4699      	mov	r9, r3
 800bf9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf9e:	1b1a      	subs	r2, r3, r4
 800bfa0:	d004      	beq.n	800bfac <_dtoa_r+0x78c>
 800bfa2:	4649      	mov	r1, r9
 800bfa4:	4658      	mov	r0, fp
 800bfa6:	f000 fcb3 	bl	800c910 <__pow5mult>
 800bfaa:	4681      	mov	r9, r0
 800bfac:	2101      	movs	r1, #1
 800bfae:	4658      	mov	r0, fp
 800bfb0:	f000 fbee 	bl	800c790 <__i2b>
 800bfb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 81cf 	beq.w	800c35c <_dtoa_r+0xb3c>
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	4601      	mov	r1, r0
 800bfc2:	4658      	mov	r0, fp
 800bfc4:	f000 fca4 	bl	800c910 <__pow5mult>
 800bfc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	4604      	mov	r4, r0
 800bfce:	f300 8095 	bgt.w	800c0fc <_dtoa_r+0x8dc>
 800bfd2:	9b02      	ldr	r3, [sp, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f040 8087 	bne.w	800c0e8 <_dtoa_r+0x8c8>
 800bfda:	9b03      	ldr	r3, [sp, #12]
 800bfdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f040 8089 	bne.w	800c0f8 <_dtoa_r+0x8d8>
 800bfe6:	9b03      	ldr	r3, [sp, #12]
 800bfe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bfec:	0d1b      	lsrs	r3, r3, #20
 800bfee:	051b      	lsls	r3, r3, #20
 800bff0:	b12b      	cbz	r3, 800bffe <_dtoa_r+0x7de>
 800bff2:	9b08      	ldr	r3, [sp, #32]
 800bff4:	3301      	adds	r3, #1
 800bff6:	9308      	str	r3, [sp, #32]
 800bff8:	f108 0801 	add.w	r8, r8, #1
 800bffc:	2301      	movs	r3, #1
 800bffe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c002:	2b00      	cmp	r3, #0
 800c004:	f000 81b0 	beq.w	800c368 <_dtoa_r+0xb48>
 800c008:	6923      	ldr	r3, [r4, #16]
 800c00a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c00e:	6918      	ldr	r0, [r3, #16]
 800c010:	f000 fb72 	bl	800c6f8 <__hi0bits>
 800c014:	f1c0 0020 	rsb	r0, r0, #32
 800c018:	9b08      	ldr	r3, [sp, #32]
 800c01a:	4418      	add	r0, r3
 800c01c:	f010 001f 	ands.w	r0, r0, #31
 800c020:	d077      	beq.n	800c112 <_dtoa_r+0x8f2>
 800c022:	f1c0 0320 	rsb	r3, r0, #32
 800c026:	2b04      	cmp	r3, #4
 800c028:	dd6b      	ble.n	800c102 <_dtoa_r+0x8e2>
 800c02a:	9b08      	ldr	r3, [sp, #32]
 800c02c:	f1c0 001c 	rsb	r0, r0, #28
 800c030:	4403      	add	r3, r0
 800c032:	4480      	add	r8, r0
 800c034:	4406      	add	r6, r0
 800c036:	9308      	str	r3, [sp, #32]
 800c038:	f1b8 0f00 	cmp.w	r8, #0
 800c03c:	dd05      	ble.n	800c04a <_dtoa_r+0x82a>
 800c03e:	4649      	mov	r1, r9
 800c040:	4642      	mov	r2, r8
 800c042:	4658      	mov	r0, fp
 800c044:	f000 fcbe 	bl	800c9c4 <__lshift>
 800c048:	4681      	mov	r9, r0
 800c04a:	9b08      	ldr	r3, [sp, #32]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	dd05      	ble.n	800c05c <_dtoa_r+0x83c>
 800c050:	4621      	mov	r1, r4
 800c052:	461a      	mov	r2, r3
 800c054:	4658      	mov	r0, fp
 800c056:	f000 fcb5 	bl	800c9c4 <__lshift>
 800c05a:	4604      	mov	r4, r0
 800c05c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d059      	beq.n	800c116 <_dtoa_r+0x8f6>
 800c062:	4621      	mov	r1, r4
 800c064:	4648      	mov	r0, r9
 800c066:	f000 fd19 	bl	800ca9c <__mcmp>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	da53      	bge.n	800c116 <_dtoa_r+0x8f6>
 800c06e:	1e7b      	subs	r3, r7, #1
 800c070:	9304      	str	r3, [sp, #16]
 800c072:	4649      	mov	r1, r9
 800c074:	2300      	movs	r3, #0
 800c076:	220a      	movs	r2, #10
 800c078:	4658      	mov	r0, fp
 800c07a:	f000 faf7 	bl	800c66c <__multadd>
 800c07e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c080:	4681      	mov	r9, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 8172 	beq.w	800c36c <_dtoa_r+0xb4c>
 800c088:	2300      	movs	r3, #0
 800c08a:	4629      	mov	r1, r5
 800c08c:	220a      	movs	r2, #10
 800c08e:	4658      	mov	r0, fp
 800c090:	f000 faec 	bl	800c66c <__multadd>
 800c094:	9b00      	ldr	r3, [sp, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	4605      	mov	r5, r0
 800c09a:	dc67      	bgt.n	800c16c <_dtoa_r+0x94c>
 800c09c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	dc41      	bgt.n	800c126 <_dtoa_r+0x906>
 800c0a2:	e063      	b.n	800c16c <_dtoa_r+0x94c>
 800c0a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c0a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c0aa:	e746      	b.n	800bf3a <_dtoa_r+0x71a>
 800c0ac:	9b07      	ldr	r3, [sp, #28]
 800c0ae:	1e5c      	subs	r4, r3, #1
 800c0b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0b2:	42a3      	cmp	r3, r4
 800c0b4:	bfbf      	itttt	lt
 800c0b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c0b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c0ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c0bc:	1ae3      	sublt	r3, r4, r3
 800c0be:	bfb4      	ite	lt
 800c0c0:	18d2      	addlt	r2, r2, r3
 800c0c2:	1b1c      	subge	r4, r3, r4
 800c0c4:	9b07      	ldr	r3, [sp, #28]
 800c0c6:	bfbc      	itt	lt
 800c0c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c0ca:	2400      	movlt	r4, #0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	bfb5      	itete	lt
 800c0d0:	eba8 0603 	sublt.w	r6, r8, r3
 800c0d4:	9b07      	ldrge	r3, [sp, #28]
 800c0d6:	2300      	movlt	r3, #0
 800c0d8:	4646      	movge	r6, r8
 800c0da:	e730      	b.n	800bf3e <_dtoa_r+0x71e>
 800c0dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c0de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c0e0:	4646      	mov	r6, r8
 800c0e2:	e735      	b.n	800bf50 <_dtoa_r+0x730>
 800c0e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0e6:	e75c      	b.n	800bfa2 <_dtoa_r+0x782>
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	e788      	b.n	800bffe <_dtoa_r+0x7de>
 800c0ec:	3fe00000 	.word	0x3fe00000
 800c0f0:	40240000 	.word	0x40240000
 800c0f4:	40140000 	.word	0x40140000
 800c0f8:	9b02      	ldr	r3, [sp, #8]
 800c0fa:	e780      	b.n	800bffe <_dtoa_r+0x7de>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c100:	e782      	b.n	800c008 <_dtoa_r+0x7e8>
 800c102:	d099      	beq.n	800c038 <_dtoa_r+0x818>
 800c104:	9a08      	ldr	r2, [sp, #32]
 800c106:	331c      	adds	r3, #28
 800c108:	441a      	add	r2, r3
 800c10a:	4498      	add	r8, r3
 800c10c:	441e      	add	r6, r3
 800c10e:	9208      	str	r2, [sp, #32]
 800c110:	e792      	b.n	800c038 <_dtoa_r+0x818>
 800c112:	4603      	mov	r3, r0
 800c114:	e7f6      	b.n	800c104 <_dtoa_r+0x8e4>
 800c116:	9b07      	ldr	r3, [sp, #28]
 800c118:	9704      	str	r7, [sp, #16]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	dc20      	bgt.n	800c160 <_dtoa_r+0x940>
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c122:	2b02      	cmp	r3, #2
 800c124:	dd1e      	ble.n	800c164 <_dtoa_r+0x944>
 800c126:	9b00      	ldr	r3, [sp, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f47f aec0 	bne.w	800beae <_dtoa_r+0x68e>
 800c12e:	4621      	mov	r1, r4
 800c130:	2205      	movs	r2, #5
 800c132:	4658      	mov	r0, fp
 800c134:	f000 fa9a 	bl	800c66c <__multadd>
 800c138:	4601      	mov	r1, r0
 800c13a:	4604      	mov	r4, r0
 800c13c:	4648      	mov	r0, r9
 800c13e:	f000 fcad 	bl	800ca9c <__mcmp>
 800c142:	2800      	cmp	r0, #0
 800c144:	f77f aeb3 	ble.w	800beae <_dtoa_r+0x68e>
 800c148:	4656      	mov	r6, sl
 800c14a:	2331      	movs	r3, #49	@ 0x31
 800c14c:	f806 3b01 	strb.w	r3, [r6], #1
 800c150:	9b04      	ldr	r3, [sp, #16]
 800c152:	3301      	adds	r3, #1
 800c154:	9304      	str	r3, [sp, #16]
 800c156:	e6ae      	b.n	800beb6 <_dtoa_r+0x696>
 800c158:	9c07      	ldr	r4, [sp, #28]
 800c15a:	9704      	str	r7, [sp, #16]
 800c15c:	4625      	mov	r5, r4
 800c15e:	e7f3      	b.n	800c148 <_dtoa_r+0x928>
 800c160:	9b07      	ldr	r3, [sp, #28]
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c166:	2b00      	cmp	r3, #0
 800c168:	f000 8104 	beq.w	800c374 <_dtoa_r+0xb54>
 800c16c:	2e00      	cmp	r6, #0
 800c16e:	dd05      	ble.n	800c17c <_dtoa_r+0x95c>
 800c170:	4629      	mov	r1, r5
 800c172:	4632      	mov	r2, r6
 800c174:	4658      	mov	r0, fp
 800c176:	f000 fc25 	bl	800c9c4 <__lshift>
 800c17a:	4605      	mov	r5, r0
 800c17c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d05a      	beq.n	800c238 <_dtoa_r+0xa18>
 800c182:	6869      	ldr	r1, [r5, #4]
 800c184:	4658      	mov	r0, fp
 800c186:	f000 fa0f 	bl	800c5a8 <_Balloc>
 800c18a:	4606      	mov	r6, r0
 800c18c:	b928      	cbnz	r0, 800c19a <_dtoa_r+0x97a>
 800c18e:	4b84      	ldr	r3, [pc, #528]	@ (800c3a0 <_dtoa_r+0xb80>)
 800c190:	4602      	mov	r2, r0
 800c192:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c196:	f7ff bb5a 	b.w	800b84e <_dtoa_r+0x2e>
 800c19a:	692a      	ldr	r2, [r5, #16]
 800c19c:	3202      	adds	r2, #2
 800c19e:	0092      	lsls	r2, r2, #2
 800c1a0:	f105 010c 	add.w	r1, r5, #12
 800c1a4:	300c      	adds	r0, #12
 800c1a6:	f7ff faa2 	bl	800b6ee <memcpy>
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	4631      	mov	r1, r6
 800c1ae:	4658      	mov	r0, fp
 800c1b0:	f000 fc08 	bl	800c9c4 <__lshift>
 800c1b4:	f10a 0301 	add.w	r3, sl, #1
 800c1b8:	9307      	str	r3, [sp, #28]
 800c1ba:	9b00      	ldr	r3, [sp, #0]
 800c1bc:	4453      	add	r3, sl
 800c1be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1c0:	9b02      	ldr	r3, [sp, #8]
 800c1c2:	f003 0301 	and.w	r3, r3, #1
 800c1c6:	462f      	mov	r7, r5
 800c1c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1ca:	4605      	mov	r5, r0
 800c1cc:	9b07      	ldr	r3, [sp, #28]
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	4648      	mov	r0, r9
 800c1d4:	9300      	str	r3, [sp, #0]
 800c1d6:	f7ff fa98 	bl	800b70a <quorem>
 800c1da:	4639      	mov	r1, r7
 800c1dc:	9002      	str	r0, [sp, #8]
 800c1de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c1e2:	4648      	mov	r0, r9
 800c1e4:	f000 fc5a 	bl	800ca9c <__mcmp>
 800c1e8:	462a      	mov	r2, r5
 800c1ea:	9008      	str	r0, [sp, #32]
 800c1ec:	4621      	mov	r1, r4
 800c1ee:	4658      	mov	r0, fp
 800c1f0:	f000 fc70 	bl	800cad4 <__mdiff>
 800c1f4:	68c2      	ldr	r2, [r0, #12]
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	bb02      	cbnz	r2, 800c23c <_dtoa_r+0xa1c>
 800c1fa:	4601      	mov	r1, r0
 800c1fc:	4648      	mov	r0, r9
 800c1fe:	f000 fc4d 	bl	800ca9c <__mcmp>
 800c202:	4602      	mov	r2, r0
 800c204:	4631      	mov	r1, r6
 800c206:	4658      	mov	r0, fp
 800c208:	920e      	str	r2, [sp, #56]	@ 0x38
 800c20a:	f000 fa0d 	bl	800c628 <_Bfree>
 800c20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c210:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c212:	9e07      	ldr	r6, [sp, #28]
 800c214:	ea43 0102 	orr.w	r1, r3, r2
 800c218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c21a:	4319      	orrs	r1, r3
 800c21c:	d110      	bne.n	800c240 <_dtoa_r+0xa20>
 800c21e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c222:	d029      	beq.n	800c278 <_dtoa_r+0xa58>
 800c224:	9b08      	ldr	r3, [sp, #32]
 800c226:	2b00      	cmp	r3, #0
 800c228:	dd02      	ble.n	800c230 <_dtoa_r+0xa10>
 800c22a:	9b02      	ldr	r3, [sp, #8]
 800c22c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c230:	9b00      	ldr	r3, [sp, #0]
 800c232:	f883 8000 	strb.w	r8, [r3]
 800c236:	e63f      	b.n	800beb8 <_dtoa_r+0x698>
 800c238:	4628      	mov	r0, r5
 800c23a:	e7bb      	b.n	800c1b4 <_dtoa_r+0x994>
 800c23c:	2201      	movs	r2, #1
 800c23e:	e7e1      	b.n	800c204 <_dtoa_r+0x9e4>
 800c240:	9b08      	ldr	r3, [sp, #32]
 800c242:	2b00      	cmp	r3, #0
 800c244:	db04      	blt.n	800c250 <_dtoa_r+0xa30>
 800c246:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c248:	430b      	orrs	r3, r1
 800c24a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c24c:	430b      	orrs	r3, r1
 800c24e:	d120      	bne.n	800c292 <_dtoa_r+0xa72>
 800c250:	2a00      	cmp	r2, #0
 800c252:	dded      	ble.n	800c230 <_dtoa_r+0xa10>
 800c254:	4649      	mov	r1, r9
 800c256:	2201      	movs	r2, #1
 800c258:	4658      	mov	r0, fp
 800c25a:	f000 fbb3 	bl	800c9c4 <__lshift>
 800c25e:	4621      	mov	r1, r4
 800c260:	4681      	mov	r9, r0
 800c262:	f000 fc1b 	bl	800ca9c <__mcmp>
 800c266:	2800      	cmp	r0, #0
 800c268:	dc03      	bgt.n	800c272 <_dtoa_r+0xa52>
 800c26a:	d1e1      	bne.n	800c230 <_dtoa_r+0xa10>
 800c26c:	f018 0f01 	tst.w	r8, #1
 800c270:	d0de      	beq.n	800c230 <_dtoa_r+0xa10>
 800c272:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c276:	d1d8      	bne.n	800c22a <_dtoa_r+0xa0a>
 800c278:	9a00      	ldr	r2, [sp, #0]
 800c27a:	2339      	movs	r3, #57	@ 0x39
 800c27c:	7013      	strb	r3, [r2, #0]
 800c27e:	4633      	mov	r3, r6
 800c280:	461e      	mov	r6, r3
 800c282:	3b01      	subs	r3, #1
 800c284:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c288:	2a39      	cmp	r2, #57	@ 0x39
 800c28a:	d052      	beq.n	800c332 <_dtoa_r+0xb12>
 800c28c:	3201      	adds	r2, #1
 800c28e:	701a      	strb	r2, [r3, #0]
 800c290:	e612      	b.n	800beb8 <_dtoa_r+0x698>
 800c292:	2a00      	cmp	r2, #0
 800c294:	dd07      	ble.n	800c2a6 <_dtoa_r+0xa86>
 800c296:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c29a:	d0ed      	beq.n	800c278 <_dtoa_r+0xa58>
 800c29c:	9a00      	ldr	r2, [sp, #0]
 800c29e:	f108 0301 	add.w	r3, r8, #1
 800c2a2:	7013      	strb	r3, [r2, #0]
 800c2a4:	e608      	b.n	800beb8 <_dtoa_r+0x698>
 800c2a6:	9b07      	ldr	r3, [sp, #28]
 800c2a8:	9a07      	ldr	r2, [sp, #28]
 800c2aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c2ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d028      	beq.n	800c306 <_dtoa_r+0xae6>
 800c2b4:	4649      	mov	r1, r9
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	220a      	movs	r2, #10
 800c2ba:	4658      	mov	r0, fp
 800c2bc:	f000 f9d6 	bl	800c66c <__multadd>
 800c2c0:	42af      	cmp	r7, r5
 800c2c2:	4681      	mov	r9, r0
 800c2c4:	f04f 0300 	mov.w	r3, #0
 800c2c8:	f04f 020a 	mov.w	r2, #10
 800c2cc:	4639      	mov	r1, r7
 800c2ce:	4658      	mov	r0, fp
 800c2d0:	d107      	bne.n	800c2e2 <_dtoa_r+0xac2>
 800c2d2:	f000 f9cb 	bl	800c66c <__multadd>
 800c2d6:	4607      	mov	r7, r0
 800c2d8:	4605      	mov	r5, r0
 800c2da:	9b07      	ldr	r3, [sp, #28]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	9307      	str	r3, [sp, #28]
 800c2e0:	e774      	b.n	800c1cc <_dtoa_r+0x9ac>
 800c2e2:	f000 f9c3 	bl	800c66c <__multadd>
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	4607      	mov	r7, r0
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	220a      	movs	r2, #10
 800c2ee:	4658      	mov	r0, fp
 800c2f0:	f000 f9bc 	bl	800c66c <__multadd>
 800c2f4:	4605      	mov	r5, r0
 800c2f6:	e7f0      	b.n	800c2da <_dtoa_r+0xaba>
 800c2f8:	9b00      	ldr	r3, [sp, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	bfcc      	ite	gt
 800c2fe:	461e      	movgt	r6, r3
 800c300:	2601      	movle	r6, #1
 800c302:	4456      	add	r6, sl
 800c304:	2700      	movs	r7, #0
 800c306:	4649      	mov	r1, r9
 800c308:	2201      	movs	r2, #1
 800c30a:	4658      	mov	r0, fp
 800c30c:	f000 fb5a 	bl	800c9c4 <__lshift>
 800c310:	4621      	mov	r1, r4
 800c312:	4681      	mov	r9, r0
 800c314:	f000 fbc2 	bl	800ca9c <__mcmp>
 800c318:	2800      	cmp	r0, #0
 800c31a:	dcb0      	bgt.n	800c27e <_dtoa_r+0xa5e>
 800c31c:	d102      	bne.n	800c324 <_dtoa_r+0xb04>
 800c31e:	f018 0f01 	tst.w	r8, #1
 800c322:	d1ac      	bne.n	800c27e <_dtoa_r+0xa5e>
 800c324:	4633      	mov	r3, r6
 800c326:	461e      	mov	r6, r3
 800c328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c32c:	2a30      	cmp	r2, #48	@ 0x30
 800c32e:	d0fa      	beq.n	800c326 <_dtoa_r+0xb06>
 800c330:	e5c2      	b.n	800beb8 <_dtoa_r+0x698>
 800c332:	459a      	cmp	sl, r3
 800c334:	d1a4      	bne.n	800c280 <_dtoa_r+0xa60>
 800c336:	9b04      	ldr	r3, [sp, #16]
 800c338:	3301      	adds	r3, #1
 800c33a:	9304      	str	r3, [sp, #16]
 800c33c:	2331      	movs	r3, #49	@ 0x31
 800c33e:	f88a 3000 	strb.w	r3, [sl]
 800c342:	e5b9      	b.n	800beb8 <_dtoa_r+0x698>
 800c344:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c346:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c3a4 <_dtoa_r+0xb84>
 800c34a:	b11b      	cbz	r3, 800c354 <_dtoa_r+0xb34>
 800c34c:	f10a 0308 	add.w	r3, sl, #8
 800c350:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c352:	6013      	str	r3, [r2, #0]
 800c354:	4650      	mov	r0, sl
 800c356:	b019      	add	sp, #100	@ 0x64
 800c358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c35e:	2b01      	cmp	r3, #1
 800c360:	f77f ae37 	ble.w	800bfd2 <_dtoa_r+0x7b2>
 800c364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c366:	930a      	str	r3, [sp, #40]	@ 0x28
 800c368:	2001      	movs	r0, #1
 800c36a:	e655      	b.n	800c018 <_dtoa_r+0x7f8>
 800c36c:	9b00      	ldr	r3, [sp, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f77f aed6 	ble.w	800c120 <_dtoa_r+0x900>
 800c374:	4656      	mov	r6, sl
 800c376:	4621      	mov	r1, r4
 800c378:	4648      	mov	r0, r9
 800c37a:	f7ff f9c6 	bl	800b70a <quorem>
 800c37e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c382:	f806 8b01 	strb.w	r8, [r6], #1
 800c386:	9b00      	ldr	r3, [sp, #0]
 800c388:	eba6 020a 	sub.w	r2, r6, sl
 800c38c:	4293      	cmp	r3, r2
 800c38e:	ddb3      	ble.n	800c2f8 <_dtoa_r+0xad8>
 800c390:	4649      	mov	r1, r9
 800c392:	2300      	movs	r3, #0
 800c394:	220a      	movs	r2, #10
 800c396:	4658      	mov	r0, fp
 800c398:	f000 f968 	bl	800c66c <__multadd>
 800c39c:	4681      	mov	r9, r0
 800c39e:	e7ea      	b.n	800c376 <_dtoa_r+0xb56>
 800c3a0:	0800ebf0 	.word	0x0800ebf0
 800c3a4:	0800eb74 	.word	0x0800eb74

0800c3a8 <_free_r>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	2900      	cmp	r1, #0
 800c3ae:	d041      	beq.n	800c434 <_free_r+0x8c>
 800c3b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3b4:	1f0c      	subs	r4, r1, #4
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	bfb8      	it	lt
 800c3ba:	18e4      	addlt	r4, r4, r3
 800c3bc:	f000 f8e8 	bl	800c590 <__malloc_lock>
 800c3c0:	4a1d      	ldr	r2, [pc, #116]	@ (800c438 <_free_r+0x90>)
 800c3c2:	6813      	ldr	r3, [r2, #0]
 800c3c4:	b933      	cbnz	r3, 800c3d4 <_free_r+0x2c>
 800c3c6:	6063      	str	r3, [r4, #4]
 800c3c8:	6014      	str	r4, [r2, #0]
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3d0:	f000 b8e4 	b.w	800c59c <__malloc_unlock>
 800c3d4:	42a3      	cmp	r3, r4
 800c3d6:	d908      	bls.n	800c3ea <_free_r+0x42>
 800c3d8:	6820      	ldr	r0, [r4, #0]
 800c3da:	1821      	adds	r1, r4, r0
 800c3dc:	428b      	cmp	r3, r1
 800c3de:	bf01      	itttt	eq
 800c3e0:	6819      	ldreq	r1, [r3, #0]
 800c3e2:	685b      	ldreq	r3, [r3, #4]
 800c3e4:	1809      	addeq	r1, r1, r0
 800c3e6:	6021      	streq	r1, [r4, #0]
 800c3e8:	e7ed      	b.n	800c3c6 <_free_r+0x1e>
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	b10b      	cbz	r3, 800c3f4 <_free_r+0x4c>
 800c3f0:	42a3      	cmp	r3, r4
 800c3f2:	d9fa      	bls.n	800c3ea <_free_r+0x42>
 800c3f4:	6811      	ldr	r1, [r2, #0]
 800c3f6:	1850      	adds	r0, r2, r1
 800c3f8:	42a0      	cmp	r0, r4
 800c3fa:	d10b      	bne.n	800c414 <_free_r+0x6c>
 800c3fc:	6820      	ldr	r0, [r4, #0]
 800c3fe:	4401      	add	r1, r0
 800c400:	1850      	adds	r0, r2, r1
 800c402:	4283      	cmp	r3, r0
 800c404:	6011      	str	r1, [r2, #0]
 800c406:	d1e0      	bne.n	800c3ca <_free_r+0x22>
 800c408:	6818      	ldr	r0, [r3, #0]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	6053      	str	r3, [r2, #4]
 800c40e:	4408      	add	r0, r1
 800c410:	6010      	str	r0, [r2, #0]
 800c412:	e7da      	b.n	800c3ca <_free_r+0x22>
 800c414:	d902      	bls.n	800c41c <_free_r+0x74>
 800c416:	230c      	movs	r3, #12
 800c418:	602b      	str	r3, [r5, #0]
 800c41a:	e7d6      	b.n	800c3ca <_free_r+0x22>
 800c41c:	6820      	ldr	r0, [r4, #0]
 800c41e:	1821      	adds	r1, r4, r0
 800c420:	428b      	cmp	r3, r1
 800c422:	bf04      	itt	eq
 800c424:	6819      	ldreq	r1, [r3, #0]
 800c426:	685b      	ldreq	r3, [r3, #4]
 800c428:	6063      	str	r3, [r4, #4]
 800c42a:	bf04      	itt	eq
 800c42c:	1809      	addeq	r1, r1, r0
 800c42e:	6021      	streq	r1, [r4, #0]
 800c430:	6054      	str	r4, [r2, #4]
 800c432:	e7ca      	b.n	800c3ca <_free_r+0x22>
 800c434:	bd38      	pop	{r3, r4, r5, pc}
 800c436:	bf00      	nop
 800c438:	200021f0 	.word	0x200021f0

0800c43c <malloc>:
 800c43c:	4b02      	ldr	r3, [pc, #8]	@ (800c448 <malloc+0xc>)
 800c43e:	4601      	mov	r1, r0
 800c440:	6818      	ldr	r0, [r3, #0]
 800c442:	f000 b825 	b.w	800c490 <_malloc_r>
 800c446:	bf00      	nop
 800c448:	20000144 	.word	0x20000144

0800c44c <sbrk_aligned>:
 800c44c:	b570      	push	{r4, r5, r6, lr}
 800c44e:	4e0f      	ldr	r6, [pc, #60]	@ (800c48c <sbrk_aligned+0x40>)
 800c450:	460c      	mov	r4, r1
 800c452:	6831      	ldr	r1, [r6, #0]
 800c454:	4605      	mov	r5, r0
 800c456:	b911      	cbnz	r1, 800c45e <sbrk_aligned+0x12>
 800c458:	f000 fe46 	bl	800d0e8 <_sbrk_r>
 800c45c:	6030      	str	r0, [r6, #0]
 800c45e:	4621      	mov	r1, r4
 800c460:	4628      	mov	r0, r5
 800c462:	f000 fe41 	bl	800d0e8 <_sbrk_r>
 800c466:	1c43      	adds	r3, r0, #1
 800c468:	d103      	bne.n	800c472 <sbrk_aligned+0x26>
 800c46a:	f04f 34ff 	mov.w	r4, #4294967295
 800c46e:	4620      	mov	r0, r4
 800c470:	bd70      	pop	{r4, r5, r6, pc}
 800c472:	1cc4      	adds	r4, r0, #3
 800c474:	f024 0403 	bic.w	r4, r4, #3
 800c478:	42a0      	cmp	r0, r4
 800c47a:	d0f8      	beq.n	800c46e <sbrk_aligned+0x22>
 800c47c:	1a21      	subs	r1, r4, r0
 800c47e:	4628      	mov	r0, r5
 800c480:	f000 fe32 	bl	800d0e8 <_sbrk_r>
 800c484:	3001      	adds	r0, #1
 800c486:	d1f2      	bne.n	800c46e <sbrk_aligned+0x22>
 800c488:	e7ef      	b.n	800c46a <sbrk_aligned+0x1e>
 800c48a:	bf00      	nop
 800c48c:	200021ec 	.word	0x200021ec

0800c490 <_malloc_r>:
 800c490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c494:	1ccd      	adds	r5, r1, #3
 800c496:	f025 0503 	bic.w	r5, r5, #3
 800c49a:	3508      	adds	r5, #8
 800c49c:	2d0c      	cmp	r5, #12
 800c49e:	bf38      	it	cc
 800c4a0:	250c      	movcc	r5, #12
 800c4a2:	2d00      	cmp	r5, #0
 800c4a4:	4606      	mov	r6, r0
 800c4a6:	db01      	blt.n	800c4ac <_malloc_r+0x1c>
 800c4a8:	42a9      	cmp	r1, r5
 800c4aa:	d904      	bls.n	800c4b6 <_malloc_r+0x26>
 800c4ac:	230c      	movs	r3, #12
 800c4ae:	6033      	str	r3, [r6, #0]
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c58c <_malloc_r+0xfc>
 800c4ba:	f000 f869 	bl	800c590 <__malloc_lock>
 800c4be:	f8d8 3000 	ldr.w	r3, [r8]
 800c4c2:	461c      	mov	r4, r3
 800c4c4:	bb44      	cbnz	r4, 800c518 <_malloc_r+0x88>
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	f7ff ffbf 	bl	800c44c <sbrk_aligned>
 800c4ce:	1c43      	adds	r3, r0, #1
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	d158      	bne.n	800c586 <_malloc_r+0xf6>
 800c4d4:	f8d8 4000 	ldr.w	r4, [r8]
 800c4d8:	4627      	mov	r7, r4
 800c4da:	2f00      	cmp	r7, #0
 800c4dc:	d143      	bne.n	800c566 <_malloc_r+0xd6>
 800c4de:	2c00      	cmp	r4, #0
 800c4e0:	d04b      	beq.n	800c57a <_malloc_r+0xea>
 800c4e2:	6823      	ldr	r3, [r4, #0]
 800c4e4:	4639      	mov	r1, r7
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	eb04 0903 	add.w	r9, r4, r3
 800c4ec:	f000 fdfc 	bl	800d0e8 <_sbrk_r>
 800c4f0:	4581      	cmp	r9, r0
 800c4f2:	d142      	bne.n	800c57a <_malloc_r+0xea>
 800c4f4:	6821      	ldr	r1, [r4, #0]
 800c4f6:	1a6d      	subs	r5, r5, r1
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	f7ff ffa6 	bl	800c44c <sbrk_aligned>
 800c500:	3001      	adds	r0, #1
 800c502:	d03a      	beq.n	800c57a <_malloc_r+0xea>
 800c504:	6823      	ldr	r3, [r4, #0]
 800c506:	442b      	add	r3, r5
 800c508:	6023      	str	r3, [r4, #0]
 800c50a:	f8d8 3000 	ldr.w	r3, [r8]
 800c50e:	685a      	ldr	r2, [r3, #4]
 800c510:	bb62      	cbnz	r2, 800c56c <_malloc_r+0xdc>
 800c512:	f8c8 7000 	str.w	r7, [r8]
 800c516:	e00f      	b.n	800c538 <_malloc_r+0xa8>
 800c518:	6822      	ldr	r2, [r4, #0]
 800c51a:	1b52      	subs	r2, r2, r5
 800c51c:	d420      	bmi.n	800c560 <_malloc_r+0xd0>
 800c51e:	2a0b      	cmp	r2, #11
 800c520:	d917      	bls.n	800c552 <_malloc_r+0xc2>
 800c522:	1961      	adds	r1, r4, r5
 800c524:	42a3      	cmp	r3, r4
 800c526:	6025      	str	r5, [r4, #0]
 800c528:	bf18      	it	ne
 800c52a:	6059      	strne	r1, [r3, #4]
 800c52c:	6863      	ldr	r3, [r4, #4]
 800c52e:	bf08      	it	eq
 800c530:	f8c8 1000 	streq.w	r1, [r8]
 800c534:	5162      	str	r2, [r4, r5]
 800c536:	604b      	str	r3, [r1, #4]
 800c538:	4630      	mov	r0, r6
 800c53a:	f000 f82f 	bl	800c59c <__malloc_unlock>
 800c53e:	f104 000b 	add.w	r0, r4, #11
 800c542:	1d23      	adds	r3, r4, #4
 800c544:	f020 0007 	bic.w	r0, r0, #7
 800c548:	1ac2      	subs	r2, r0, r3
 800c54a:	bf1c      	itt	ne
 800c54c:	1a1b      	subne	r3, r3, r0
 800c54e:	50a3      	strne	r3, [r4, r2]
 800c550:	e7af      	b.n	800c4b2 <_malloc_r+0x22>
 800c552:	6862      	ldr	r2, [r4, #4]
 800c554:	42a3      	cmp	r3, r4
 800c556:	bf0c      	ite	eq
 800c558:	f8c8 2000 	streq.w	r2, [r8]
 800c55c:	605a      	strne	r2, [r3, #4]
 800c55e:	e7eb      	b.n	800c538 <_malloc_r+0xa8>
 800c560:	4623      	mov	r3, r4
 800c562:	6864      	ldr	r4, [r4, #4]
 800c564:	e7ae      	b.n	800c4c4 <_malloc_r+0x34>
 800c566:	463c      	mov	r4, r7
 800c568:	687f      	ldr	r7, [r7, #4]
 800c56a:	e7b6      	b.n	800c4da <_malloc_r+0x4a>
 800c56c:	461a      	mov	r2, r3
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	42a3      	cmp	r3, r4
 800c572:	d1fb      	bne.n	800c56c <_malloc_r+0xdc>
 800c574:	2300      	movs	r3, #0
 800c576:	6053      	str	r3, [r2, #4]
 800c578:	e7de      	b.n	800c538 <_malloc_r+0xa8>
 800c57a:	230c      	movs	r3, #12
 800c57c:	6033      	str	r3, [r6, #0]
 800c57e:	4630      	mov	r0, r6
 800c580:	f000 f80c 	bl	800c59c <__malloc_unlock>
 800c584:	e794      	b.n	800c4b0 <_malloc_r+0x20>
 800c586:	6005      	str	r5, [r0, #0]
 800c588:	e7d6      	b.n	800c538 <_malloc_r+0xa8>
 800c58a:	bf00      	nop
 800c58c:	200021f0 	.word	0x200021f0

0800c590 <__malloc_lock>:
 800c590:	4801      	ldr	r0, [pc, #4]	@ (800c598 <__malloc_lock+0x8>)
 800c592:	f7ff b8aa 	b.w	800b6ea <__retarget_lock_acquire_recursive>
 800c596:	bf00      	nop
 800c598:	200021e8 	.word	0x200021e8

0800c59c <__malloc_unlock>:
 800c59c:	4801      	ldr	r0, [pc, #4]	@ (800c5a4 <__malloc_unlock+0x8>)
 800c59e:	f7ff b8a5 	b.w	800b6ec <__retarget_lock_release_recursive>
 800c5a2:	bf00      	nop
 800c5a4:	200021e8 	.word	0x200021e8

0800c5a8 <_Balloc>:
 800c5a8:	b570      	push	{r4, r5, r6, lr}
 800c5aa:	69c6      	ldr	r6, [r0, #28]
 800c5ac:	4604      	mov	r4, r0
 800c5ae:	460d      	mov	r5, r1
 800c5b0:	b976      	cbnz	r6, 800c5d0 <_Balloc+0x28>
 800c5b2:	2010      	movs	r0, #16
 800c5b4:	f7ff ff42 	bl	800c43c <malloc>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	61e0      	str	r0, [r4, #28]
 800c5bc:	b920      	cbnz	r0, 800c5c8 <_Balloc+0x20>
 800c5be:	4b18      	ldr	r3, [pc, #96]	@ (800c620 <_Balloc+0x78>)
 800c5c0:	4818      	ldr	r0, [pc, #96]	@ (800c624 <_Balloc+0x7c>)
 800c5c2:	216b      	movs	r1, #107	@ 0x6b
 800c5c4:	f000 fda0 	bl	800d108 <__assert_func>
 800c5c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5cc:	6006      	str	r6, [r0, #0]
 800c5ce:	60c6      	str	r6, [r0, #12]
 800c5d0:	69e6      	ldr	r6, [r4, #28]
 800c5d2:	68f3      	ldr	r3, [r6, #12]
 800c5d4:	b183      	cbz	r3, 800c5f8 <_Balloc+0x50>
 800c5d6:	69e3      	ldr	r3, [r4, #28]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5de:	b9b8      	cbnz	r0, 800c610 <_Balloc+0x68>
 800c5e0:	2101      	movs	r1, #1
 800c5e2:	fa01 f605 	lsl.w	r6, r1, r5
 800c5e6:	1d72      	adds	r2, r6, #5
 800c5e8:	0092      	lsls	r2, r2, #2
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f000 fdaa 	bl	800d144 <_calloc_r>
 800c5f0:	b160      	cbz	r0, 800c60c <_Balloc+0x64>
 800c5f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5f6:	e00e      	b.n	800c616 <_Balloc+0x6e>
 800c5f8:	2221      	movs	r2, #33	@ 0x21
 800c5fa:	2104      	movs	r1, #4
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f000 fda1 	bl	800d144 <_calloc_r>
 800c602:	69e3      	ldr	r3, [r4, #28]
 800c604:	60f0      	str	r0, [r6, #12]
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d1e4      	bne.n	800c5d6 <_Balloc+0x2e>
 800c60c:	2000      	movs	r0, #0
 800c60e:	bd70      	pop	{r4, r5, r6, pc}
 800c610:	6802      	ldr	r2, [r0, #0]
 800c612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c616:	2300      	movs	r3, #0
 800c618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c61c:	e7f7      	b.n	800c60e <_Balloc+0x66>
 800c61e:	bf00      	nop
 800c620:	0800eb81 	.word	0x0800eb81
 800c624:	0800ec01 	.word	0x0800ec01

0800c628 <_Bfree>:
 800c628:	b570      	push	{r4, r5, r6, lr}
 800c62a:	69c6      	ldr	r6, [r0, #28]
 800c62c:	4605      	mov	r5, r0
 800c62e:	460c      	mov	r4, r1
 800c630:	b976      	cbnz	r6, 800c650 <_Bfree+0x28>
 800c632:	2010      	movs	r0, #16
 800c634:	f7ff ff02 	bl	800c43c <malloc>
 800c638:	4602      	mov	r2, r0
 800c63a:	61e8      	str	r0, [r5, #28]
 800c63c:	b920      	cbnz	r0, 800c648 <_Bfree+0x20>
 800c63e:	4b09      	ldr	r3, [pc, #36]	@ (800c664 <_Bfree+0x3c>)
 800c640:	4809      	ldr	r0, [pc, #36]	@ (800c668 <_Bfree+0x40>)
 800c642:	218f      	movs	r1, #143	@ 0x8f
 800c644:	f000 fd60 	bl	800d108 <__assert_func>
 800c648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c64c:	6006      	str	r6, [r0, #0]
 800c64e:	60c6      	str	r6, [r0, #12]
 800c650:	b13c      	cbz	r4, 800c662 <_Bfree+0x3a>
 800c652:	69eb      	ldr	r3, [r5, #28]
 800c654:	6862      	ldr	r2, [r4, #4]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c65c:	6021      	str	r1, [r4, #0]
 800c65e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c662:	bd70      	pop	{r4, r5, r6, pc}
 800c664:	0800eb81 	.word	0x0800eb81
 800c668:	0800ec01 	.word	0x0800ec01

0800c66c <__multadd>:
 800c66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c670:	690d      	ldr	r5, [r1, #16]
 800c672:	4607      	mov	r7, r0
 800c674:	460c      	mov	r4, r1
 800c676:	461e      	mov	r6, r3
 800c678:	f101 0c14 	add.w	ip, r1, #20
 800c67c:	2000      	movs	r0, #0
 800c67e:	f8dc 3000 	ldr.w	r3, [ip]
 800c682:	b299      	uxth	r1, r3
 800c684:	fb02 6101 	mla	r1, r2, r1, r6
 800c688:	0c1e      	lsrs	r6, r3, #16
 800c68a:	0c0b      	lsrs	r3, r1, #16
 800c68c:	fb02 3306 	mla	r3, r2, r6, r3
 800c690:	b289      	uxth	r1, r1
 800c692:	3001      	adds	r0, #1
 800c694:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c698:	4285      	cmp	r5, r0
 800c69a:	f84c 1b04 	str.w	r1, [ip], #4
 800c69e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c6a2:	dcec      	bgt.n	800c67e <__multadd+0x12>
 800c6a4:	b30e      	cbz	r6, 800c6ea <__multadd+0x7e>
 800c6a6:	68a3      	ldr	r3, [r4, #8]
 800c6a8:	42ab      	cmp	r3, r5
 800c6aa:	dc19      	bgt.n	800c6e0 <__multadd+0x74>
 800c6ac:	6861      	ldr	r1, [r4, #4]
 800c6ae:	4638      	mov	r0, r7
 800c6b0:	3101      	adds	r1, #1
 800c6b2:	f7ff ff79 	bl	800c5a8 <_Balloc>
 800c6b6:	4680      	mov	r8, r0
 800c6b8:	b928      	cbnz	r0, 800c6c6 <__multadd+0x5a>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	4b0c      	ldr	r3, [pc, #48]	@ (800c6f0 <__multadd+0x84>)
 800c6be:	480d      	ldr	r0, [pc, #52]	@ (800c6f4 <__multadd+0x88>)
 800c6c0:	21ba      	movs	r1, #186	@ 0xba
 800c6c2:	f000 fd21 	bl	800d108 <__assert_func>
 800c6c6:	6922      	ldr	r2, [r4, #16]
 800c6c8:	3202      	adds	r2, #2
 800c6ca:	f104 010c 	add.w	r1, r4, #12
 800c6ce:	0092      	lsls	r2, r2, #2
 800c6d0:	300c      	adds	r0, #12
 800c6d2:	f7ff f80c 	bl	800b6ee <memcpy>
 800c6d6:	4621      	mov	r1, r4
 800c6d8:	4638      	mov	r0, r7
 800c6da:	f7ff ffa5 	bl	800c628 <_Bfree>
 800c6de:	4644      	mov	r4, r8
 800c6e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6e4:	3501      	adds	r5, #1
 800c6e6:	615e      	str	r6, [r3, #20]
 800c6e8:	6125      	str	r5, [r4, #16]
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f0:	0800ebf0 	.word	0x0800ebf0
 800c6f4:	0800ec01 	.word	0x0800ec01

0800c6f8 <__hi0bits>:
 800c6f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	bf36      	itet	cc
 800c700:	0403      	lslcc	r3, r0, #16
 800c702:	2000      	movcs	r0, #0
 800c704:	2010      	movcc	r0, #16
 800c706:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c70a:	bf3c      	itt	cc
 800c70c:	021b      	lslcc	r3, r3, #8
 800c70e:	3008      	addcc	r0, #8
 800c710:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c714:	bf3c      	itt	cc
 800c716:	011b      	lslcc	r3, r3, #4
 800c718:	3004      	addcc	r0, #4
 800c71a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c71e:	bf3c      	itt	cc
 800c720:	009b      	lslcc	r3, r3, #2
 800c722:	3002      	addcc	r0, #2
 800c724:	2b00      	cmp	r3, #0
 800c726:	db05      	blt.n	800c734 <__hi0bits+0x3c>
 800c728:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c72c:	f100 0001 	add.w	r0, r0, #1
 800c730:	bf08      	it	eq
 800c732:	2020      	moveq	r0, #32
 800c734:	4770      	bx	lr

0800c736 <__lo0bits>:
 800c736:	6803      	ldr	r3, [r0, #0]
 800c738:	4602      	mov	r2, r0
 800c73a:	f013 0007 	ands.w	r0, r3, #7
 800c73e:	d00b      	beq.n	800c758 <__lo0bits+0x22>
 800c740:	07d9      	lsls	r1, r3, #31
 800c742:	d421      	bmi.n	800c788 <__lo0bits+0x52>
 800c744:	0798      	lsls	r0, r3, #30
 800c746:	bf49      	itett	mi
 800c748:	085b      	lsrmi	r3, r3, #1
 800c74a:	089b      	lsrpl	r3, r3, #2
 800c74c:	2001      	movmi	r0, #1
 800c74e:	6013      	strmi	r3, [r2, #0]
 800c750:	bf5c      	itt	pl
 800c752:	6013      	strpl	r3, [r2, #0]
 800c754:	2002      	movpl	r0, #2
 800c756:	4770      	bx	lr
 800c758:	b299      	uxth	r1, r3
 800c75a:	b909      	cbnz	r1, 800c760 <__lo0bits+0x2a>
 800c75c:	0c1b      	lsrs	r3, r3, #16
 800c75e:	2010      	movs	r0, #16
 800c760:	b2d9      	uxtb	r1, r3
 800c762:	b909      	cbnz	r1, 800c768 <__lo0bits+0x32>
 800c764:	3008      	adds	r0, #8
 800c766:	0a1b      	lsrs	r3, r3, #8
 800c768:	0719      	lsls	r1, r3, #28
 800c76a:	bf04      	itt	eq
 800c76c:	091b      	lsreq	r3, r3, #4
 800c76e:	3004      	addeq	r0, #4
 800c770:	0799      	lsls	r1, r3, #30
 800c772:	bf04      	itt	eq
 800c774:	089b      	lsreq	r3, r3, #2
 800c776:	3002      	addeq	r0, #2
 800c778:	07d9      	lsls	r1, r3, #31
 800c77a:	d403      	bmi.n	800c784 <__lo0bits+0x4e>
 800c77c:	085b      	lsrs	r3, r3, #1
 800c77e:	f100 0001 	add.w	r0, r0, #1
 800c782:	d003      	beq.n	800c78c <__lo0bits+0x56>
 800c784:	6013      	str	r3, [r2, #0]
 800c786:	4770      	bx	lr
 800c788:	2000      	movs	r0, #0
 800c78a:	4770      	bx	lr
 800c78c:	2020      	movs	r0, #32
 800c78e:	4770      	bx	lr

0800c790 <__i2b>:
 800c790:	b510      	push	{r4, lr}
 800c792:	460c      	mov	r4, r1
 800c794:	2101      	movs	r1, #1
 800c796:	f7ff ff07 	bl	800c5a8 <_Balloc>
 800c79a:	4602      	mov	r2, r0
 800c79c:	b928      	cbnz	r0, 800c7aa <__i2b+0x1a>
 800c79e:	4b05      	ldr	r3, [pc, #20]	@ (800c7b4 <__i2b+0x24>)
 800c7a0:	4805      	ldr	r0, [pc, #20]	@ (800c7b8 <__i2b+0x28>)
 800c7a2:	f240 1145 	movw	r1, #325	@ 0x145
 800c7a6:	f000 fcaf 	bl	800d108 <__assert_func>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	6144      	str	r4, [r0, #20]
 800c7ae:	6103      	str	r3, [r0, #16]
 800c7b0:	bd10      	pop	{r4, pc}
 800c7b2:	bf00      	nop
 800c7b4:	0800ebf0 	.word	0x0800ebf0
 800c7b8:	0800ec01 	.word	0x0800ec01

0800c7bc <__multiply>:
 800c7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c0:	4614      	mov	r4, r2
 800c7c2:	690a      	ldr	r2, [r1, #16]
 800c7c4:	6923      	ldr	r3, [r4, #16]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	bfa8      	it	ge
 800c7ca:	4623      	movge	r3, r4
 800c7cc:	460f      	mov	r7, r1
 800c7ce:	bfa4      	itt	ge
 800c7d0:	460c      	movge	r4, r1
 800c7d2:	461f      	movge	r7, r3
 800c7d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c7d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c7dc:	68a3      	ldr	r3, [r4, #8]
 800c7de:	6861      	ldr	r1, [r4, #4]
 800c7e0:	eb0a 0609 	add.w	r6, sl, r9
 800c7e4:	42b3      	cmp	r3, r6
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	bfb8      	it	lt
 800c7ea:	3101      	addlt	r1, #1
 800c7ec:	f7ff fedc 	bl	800c5a8 <_Balloc>
 800c7f0:	b930      	cbnz	r0, 800c800 <__multiply+0x44>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	4b44      	ldr	r3, [pc, #272]	@ (800c908 <__multiply+0x14c>)
 800c7f6:	4845      	ldr	r0, [pc, #276]	@ (800c90c <__multiply+0x150>)
 800c7f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c7fc:	f000 fc84 	bl	800d108 <__assert_func>
 800c800:	f100 0514 	add.w	r5, r0, #20
 800c804:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c808:	462b      	mov	r3, r5
 800c80a:	2200      	movs	r2, #0
 800c80c:	4543      	cmp	r3, r8
 800c80e:	d321      	bcc.n	800c854 <__multiply+0x98>
 800c810:	f107 0114 	add.w	r1, r7, #20
 800c814:	f104 0214 	add.w	r2, r4, #20
 800c818:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c81c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c820:	9302      	str	r3, [sp, #8]
 800c822:	1b13      	subs	r3, r2, r4
 800c824:	3b15      	subs	r3, #21
 800c826:	f023 0303 	bic.w	r3, r3, #3
 800c82a:	3304      	adds	r3, #4
 800c82c:	f104 0715 	add.w	r7, r4, #21
 800c830:	42ba      	cmp	r2, r7
 800c832:	bf38      	it	cc
 800c834:	2304      	movcc	r3, #4
 800c836:	9301      	str	r3, [sp, #4]
 800c838:	9b02      	ldr	r3, [sp, #8]
 800c83a:	9103      	str	r1, [sp, #12]
 800c83c:	428b      	cmp	r3, r1
 800c83e:	d80c      	bhi.n	800c85a <__multiply+0x9e>
 800c840:	2e00      	cmp	r6, #0
 800c842:	dd03      	ble.n	800c84c <__multiply+0x90>
 800c844:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d05b      	beq.n	800c904 <__multiply+0x148>
 800c84c:	6106      	str	r6, [r0, #16]
 800c84e:	b005      	add	sp, #20
 800c850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c854:	f843 2b04 	str.w	r2, [r3], #4
 800c858:	e7d8      	b.n	800c80c <__multiply+0x50>
 800c85a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c85e:	f1ba 0f00 	cmp.w	sl, #0
 800c862:	d024      	beq.n	800c8ae <__multiply+0xf2>
 800c864:	f104 0e14 	add.w	lr, r4, #20
 800c868:	46a9      	mov	r9, r5
 800c86a:	f04f 0c00 	mov.w	ip, #0
 800c86e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c872:	f8d9 3000 	ldr.w	r3, [r9]
 800c876:	fa1f fb87 	uxth.w	fp, r7
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c880:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c884:	f8d9 7000 	ldr.w	r7, [r9]
 800c888:	4463      	add	r3, ip
 800c88a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c88e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c892:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c896:	b29b      	uxth	r3, r3
 800c898:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c89c:	4572      	cmp	r2, lr
 800c89e:	f849 3b04 	str.w	r3, [r9], #4
 800c8a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8a6:	d8e2      	bhi.n	800c86e <__multiply+0xb2>
 800c8a8:	9b01      	ldr	r3, [sp, #4]
 800c8aa:	f845 c003 	str.w	ip, [r5, r3]
 800c8ae:	9b03      	ldr	r3, [sp, #12]
 800c8b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c8b4:	3104      	adds	r1, #4
 800c8b6:	f1b9 0f00 	cmp.w	r9, #0
 800c8ba:	d021      	beq.n	800c900 <__multiply+0x144>
 800c8bc:	682b      	ldr	r3, [r5, #0]
 800c8be:	f104 0c14 	add.w	ip, r4, #20
 800c8c2:	46ae      	mov	lr, r5
 800c8c4:	f04f 0a00 	mov.w	sl, #0
 800c8c8:	f8bc b000 	ldrh.w	fp, [ip]
 800c8cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c8d0:	fb09 770b 	mla	r7, r9, fp, r7
 800c8d4:	4457      	add	r7, sl
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8dc:	f84e 3b04 	str.w	r3, [lr], #4
 800c8e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c8e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8e8:	f8be 3000 	ldrh.w	r3, [lr]
 800c8ec:	fb09 330a 	mla	r3, r9, sl, r3
 800c8f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c8f4:	4562      	cmp	r2, ip
 800c8f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8fa:	d8e5      	bhi.n	800c8c8 <__multiply+0x10c>
 800c8fc:	9f01      	ldr	r7, [sp, #4]
 800c8fe:	51eb      	str	r3, [r5, r7]
 800c900:	3504      	adds	r5, #4
 800c902:	e799      	b.n	800c838 <__multiply+0x7c>
 800c904:	3e01      	subs	r6, #1
 800c906:	e79b      	b.n	800c840 <__multiply+0x84>
 800c908:	0800ebf0 	.word	0x0800ebf0
 800c90c:	0800ec01 	.word	0x0800ec01

0800c910 <__pow5mult>:
 800c910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c914:	4615      	mov	r5, r2
 800c916:	f012 0203 	ands.w	r2, r2, #3
 800c91a:	4607      	mov	r7, r0
 800c91c:	460e      	mov	r6, r1
 800c91e:	d007      	beq.n	800c930 <__pow5mult+0x20>
 800c920:	4c25      	ldr	r4, [pc, #148]	@ (800c9b8 <__pow5mult+0xa8>)
 800c922:	3a01      	subs	r2, #1
 800c924:	2300      	movs	r3, #0
 800c926:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c92a:	f7ff fe9f 	bl	800c66c <__multadd>
 800c92e:	4606      	mov	r6, r0
 800c930:	10ad      	asrs	r5, r5, #2
 800c932:	d03d      	beq.n	800c9b0 <__pow5mult+0xa0>
 800c934:	69fc      	ldr	r4, [r7, #28]
 800c936:	b97c      	cbnz	r4, 800c958 <__pow5mult+0x48>
 800c938:	2010      	movs	r0, #16
 800c93a:	f7ff fd7f 	bl	800c43c <malloc>
 800c93e:	4602      	mov	r2, r0
 800c940:	61f8      	str	r0, [r7, #28]
 800c942:	b928      	cbnz	r0, 800c950 <__pow5mult+0x40>
 800c944:	4b1d      	ldr	r3, [pc, #116]	@ (800c9bc <__pow5mult+0xac>)
 800c946:	481e      	ldr	r0, [pc, #120]	@ (800c9c0 <__pow5mult+0xb0>)
 800c948:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c94c:	f000 fbdc 	bl	800d108 <__assert_func>
 800c950:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c954:	6004      	str	r4, [r0, #0]
 800c956:	60c4      	str	r4, [r0, #12]
 800c958:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c95c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c960:	b94c      	cbnz	r4, 800c976 <__pow5mult+0x66>
 800c962:	f240 2171 	movw	r1, #625	@ 0x271
 800c966:	4638      	mov	r0, r7
 800c968:	f7ff ff12 	bl	800c790 <__i2b>
 800c96c:	2300      	movs	r3, #0
 800c96e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c972:	4604      	mov	r4, r0
 800c974:	6003      	str	r3, [r0, #0]
 800c976:	f04f 0900 	mov.w	r9, #0
 800c97a:	07eb      	lsls	r3, r5, #31
 800c97c:	d50a      	bpl.n	800c994 <__pow5mult+0x84>
 800c97e:	4631      	mov	r1, r6
 800c980:	4622      	mov	r2, r4
 800c982:	4638      	mov	r0, r7
 800c984:	f7ff ff1a 	bl	800c7bc <__multiply>
 800c988:	4631      	mov	r1, r6
 800c98a:	4680      	mov	r8, r0
 800c98c:	4638      	mov	r0, r7
 800c98e:	f7ff fe4b 	bl	800c628 <_Bfree>
 800c992:	4646      	mov	r6, r8
 800c994:	106d      	asrs	r5, r5, #1
 800c996:	d00b      	beq.n	800c9b0 <__pow5mult+0xa0>
 800c998:	6820      	ldr	r0, [r4, #0]
 800c99a:	b938      	cbnz	r0, 800c9ac <__pow5mult+0x9c>
 800c99c:	4622      	mov	r2, r4
 800c99e:	4621      	mov	r1, r4
 800c9a0:	4638      	mov	r0, r7
 800c9a2:	f7ff ff0b 	bl	800c7bc <__multiply>
 800c9a6:	6020      	str	r0, [r4, #0]
 800c9a8:	f8c0 9000 	str.w	r9, [r0]
 800c9ac:	4604      	mov	r4, r0
 800c9ae:	e7e4      	b.n	800c97a <__pow5mult+0x6a>
 800c9b0:	4630      	mov	r0, r6
 800c9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9b6:	bf00      	nop
 800c9b8:	0800ec5c 	.word	0x0800ec5c
 800c9bc:	0800eb81 	.word	0x0800eb81
 800c9c0:	0800ec01 	.word	0x0800ec01

0800c9c4 <__lshift>:
 800c9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9c8:	460c      	mov	r4, r1
 800c9ca:	6849      	ldr	r1, [r1, #4]
 800c9cc:	6923      	ldr	r3, [r4, #16]
 800c9ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c9d2:	68a3      	ldr	r3, [r4, #8]
 800c9d4:	4607      	mov	r7, r0
 800c9d6:	4691      	mov	r9, r2
 800c9d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9dc:	f108 0601 	add.w	r6, r8, #1
 800c9e0:	42b3      	cmp	r3, r6
 800c9e2:	db0b      	blt.n	800c9fc <__lshift+0x38>
 800c9e4:	4638      	mov	r0, r7
 800c9e6:	f7ff fddf 	bl	800c5a8 <_Balloc>
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	b948      	cbnz	r0, 800ca02 <__lshift+0x3e>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	4b28      	ldr	r3, [pc, #160]	@ (800ca94 <__lshift+0xd0>)
 800c9f2:	4829      	ldr	r0, [pc, #164]	@ (800ca98 <__lshift+0xd4>)
 800c9f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c9f8:	f000 fb86 	bl	800d108 <__assert_func>
 800c9fc:	3101      	adds	r1, #1
 800c9fe:	005b      	lsls	r3, r3, #1
 800ca00:	e7ee      	b.n	800c9e0 <__lshift+0x1c>
 800ca02:	2300      	movs	r3, #0
 800ca04:	f100 0114 	add.w	r1, r0, #20
 800ca08:	f100 0210 	add.w	r2, r0, #16
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	4553      	cmp	r3, sl
 800ca10:	db33      	blt.n	800ca7a <__lshift+0xb6>
 800ca12:	6920      	ldr	r0, [r4, #16]
 800ca14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca18:	f104 0314 	add.w	r3, r4, #20
 800ca1c:	f019 091f 	ands.w	r9, r9, #31
 800ca20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca28:	d02b      	beq.n	800ca82 <__lshift+0xbe>
 800ca2a:	f1c9 0e20 	rsb	lr, r9, #32
 800ca2e:	468a      	mov	sl, r1
 800ca30:	2200      	movs	r2, #0
 800ca32:	6818      	ldr	r0, [r3, #0]
 800ca34:	fa00 f009 	lsl.w	r0, r0, r9
 800ca38:	4310      	orrs	r0, r2
 800ca3a:	f84a 0b04 	str.w	r0, [sl], #4
 800ca3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca42:	459c      	cmp	ip, r3
 800ca44:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca48:	d8f3      	bhi.n	800ca32 <__lshift+0x6e>
 800ca4a:	ebac 0304 	sub.w	r3, ip, r4
 800ca4e:	3b15      	subs	r3, #21
 800ca50:	f023 0303 	bic.w	r3, r3, #3
 800ca54:	3304      	adds	r3, #4
 800ca56:	f104 0015 	add.w	r0, r4, #21
 800ca5a:	4584      	cmp	ip, r0
 800ca5c:	bf38      	it	cc
 800ca5e:	2304      	movcc	r3, #4
 800ca60:	50ca      	str	r2, [r1, r3]
 800ca62:	b10a      	cbz	r2, 800ca68 <__lshift+0xa4>
 800ca64:	f108 0602 	add.w	r6, r8, #2
 800ca68:	3e01      	subs	r6, #1
 800ca6a:	4638      	mov	r0, r7
 800ca6c:	612e      	str	r6, [r5, #16]
 800ca6e:	4621      	mov	r1, r4
 800ca70:	f7ff fdda 	bl	800c628 <_Bfree>
 800ca74:	4628      	mov	r0, r5
 800ca76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca7e:	3301      	adds	r3, #1
 800ca80:	e7c5      	b.n	800ca0e <__lshift+0x4a>
 800ca82:	3904      	subs	r1, #4
 800ca84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca88:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca8c:	459c      	cmp	ip, r3
 800ca8e:	d8f9      	bhi.n	800ca84 <__lshift+0xc0>
 800ca90:	e7ea      	b.n	800ca68 <__lshift+0xa4>
 800ca92:	bf00      	nop
 800ca94:	0800ebf0 	.word	0x0800ebf0
 800ca98:	0800ec01 	.word	0x0800ec01

0800ca9c <__mcmp>:
 800ca9c:	690a      	ldr	r2, [r1, #16]
 800ca9e:	4603      	mov	r3, r0
 800caa0:	6900      	ldr	r0, [r0, #16]
 800caa2:	1a80      	subs	r0, r0, r2
 800caa4:	b530      	push	{r4, r5, lr}
 800caa6:	d10e      	bne.n	800cac6 <__mcmp+0x2a>
 800caa8:	3314      	adds	r3, #20
 800caaa:	3114      	adds	r1, #20
 800caac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cab0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cab4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cab8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cabc:	4295      	cmp	r5, r2
 800cabe:	d003      	beq.n	800cac8 <__mcmp+0x2c>
 800cac0:	d205      	bcs.n	800cace <__mcmp+0x32>
 800cac2:	f04f 30ff 	mov.w	r0, #4294967295
 800cac6:	bd30      	pop	{r4, r5, pc}
 800cac8:	42a3      	cmp	r3, r4
 800caca:	d3f3      	bcc.n	800cab4 <__mcmp+0x18>
 800cacc:	e7fb      	b.n	800cac6 <__mcmp+0x2a>
 800cace:	2001      	movs	r0, #1
 800cad0:	e7f9      	b.n	800cac6 <__mcmp+0x2a>
	...

0800cad4 <__mdiff>:
 800cad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad8:	4689      	mov	r9, r1
 800cada:	4606      	mov	r6, r0
 800cadc:	4611      	mov	r1, r2
 800cade:	4648      	mov	r0, r9
 800cae0:	4614      	mov	r4, r2
 800cae2:	f7ff ffdb 	bl	800ca9c <__mcmp>
 800cae6:	1e05      	subs	r5, r0, #0
 800cae8:	d112      	bne.n	800cb10 <__mdiff+0x3c>
 800caea:	4629      	mov	r1, r5
 800caec:	4630      	mov	r0, r6
 800caee:	f7ff fd5b 	bl	800c5a8 <_Balloc>
 800caf2:	4602      	mov	r2, r0
 800caf4:	b928      	cbnz	r0, 800cb02 <__mdiff+0x2e>
 800caf6:	4b3f      	ldr	r3, [pc, #252]	@ (800cbf4 <__mdiff+0x120>)
 800caf8:	f240 2137 	movw	r1, #567	@ 0x237
 800cafc:	483e      	ldr	r0, [pc, #248]	@ (800cbf8 <__mdiff+0x124>)
 800cafe:	f000 fb03 	bl	800d108 <__assert_func>
 800cb02:	2301      	movs	r3, #1
 800cb04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb08:	4610      	mov	r0, r2
 800cb0a:	b003      	add	sp, #12
 800cb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb10:	bfbc      	itt	lt
 800cb12:	464b      	movlt	r3, r9
 800cb14:	46a1      	movlt	r9, r4
 800cb16:	4630      	mov	r0, r6
 800cb18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb1c:	bfba      	itte	lt
 800cb1e:	461c      	movlt	r4, r3
 800cb20:	2501      	movlt	r5, #1
 800cb22:	2500      	movge	r5, #0
 800cb24:	f7ff fd40 	bl	800c5a8 <_Balloc>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	b918      	cbnz	r0, 800cb34 <__mdiff+0x60>
 800cb2c:	4b31      	ldr	r3, [pc, #196]	@ (800cbf4 <__mdiff+0x120>)
 800cb2e:	f240 2145 	movw	r1, #581	@ 0x245
 800cb32:	e7e3      	b.n	800cafc <__mdiff+0x28>
 800cb34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb38:	6926      	ldr	r6, [r4, #16]
 800cb3a:	60c5      	str	r5, [r0, #12]
 800cb3c:	f109 0310 	add.w	r3, r9, #16
 800cb40:	f109 0514 	add.w	r5, r9, #20
 800cb44:	f104 0e14 	add.w	lr, r4, #20
 800cb48:	f100 0b14 	add.w	fp, r0, #20
 800cb4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb54:	9301      	str	r3, [sp, #4]
 800cb56:	46d9      	mov	r9, fp
 800cb58:	f04f 0c00 	mov.w	ip, #0
 800cb5c:	9b01      	ldr	r3, [sp, #4]
 800cb5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cb62:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cb66:	9301      	str	r3, [sp, #4]
 800cb68:	fa1f f38a 	uxth.w	r3, sl
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	b283      	uxth	r3, r0
 800cb70:	1acb      	subs	r3, r1, r3
 800cb72:	0c00      	lsrs	r0, r0, #16
 800cb74:	4463      	add	r3, ip
 800cb76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cb7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb84:	4576      	cmp	r6, lr
 800cb86:	f849 3b04 	str.w	r3, [r9], #4
 800cb8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb8e:	d8e5      	bhi.n	800cb5c <__mdiff+0x88>
 800cb90:	1b33      	subs	r3, r6, r4
 800cb92:	3b15      	subs	r3, #21
 800cb94:	f023 0303 	bic.w	r3, r3, #3
 800cb98:	3415      	adds	r4, #21
 800cb9a:	3304      	adds	r3, #4
 800cb9c:	42a6      	cmp	r6, r4
 800cb9e:	bf38      	it	cc
 800cba0:	2304      	movcc	r3, #4
 800cba2:	441d      	add	r5, r3
 800cba4:	445b      	add	r3, fp
 800cba6:	461e      	mov	r6, r3
 800cba8:	462c      	mov	r4, r5
 800cbaa:	4544      	cmp	r4, r8
 800cbac:	d30e      	bcc.n	800cbcc <__mdiff+0xf8>
 800cbae:	f108 0103 	add.w	r1, r8, #3
 800cbb2:	1b49      	subs	r1, r1, r5
 800cbb4:	f021 0103 	bic.w	r1, r1, #3
 800cbb8:	3d03      	subs	r5, #3
 800cbba:	45a8      	cmp	r8, r5
 800cbbc:	bf38      	it	cc
 800cbbe:	2100      	movcc	r1, #0
 800cbc0:	440b      	add	r3, r1
 800cbc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cbc6:	b191      	cbz	r1, 800cbee <__mdiff+0x11a>
 800cbc8:	6117      	str	r7, [r2, #16]
 800cbca:	e79d      	b.n	800cb08 <__mdiff+0x34>
 800cbcc:	f854 1b04 	ldr.w	r1, [r4], #4
 800cbd0:	46e6      	mov	lr, ip
 800cbd2:	0c08      	lsrs	r0, r1, #16
 800cbd4:	fa1c fc81 	uxtah	ip, ip, r1
 800cbd8:	4471      	add	r1, lr
 800cbda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cbde:	b289      	uxth	r1, r1
 800cbe0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cbe4:	f846 1b04 	str.w	r1, [r6], #4
 800cbe8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbec:	e7dd      	b.n	800cbaa <__mdiff+0xd6>
 800cbee:	3f01      	subs	r7, #1
 800cbf0:	e7e7      	b.n	800cbc2 <__mdiff+0xee>
 800cbf2:	bf00      	nop
 800cbf4:	0800ebf0 	.word	0x0800ebf0
 800cbf8:	0800ec01 	.word	0x0800ec01

0800cbfc <__d2b>:
 800cbfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc00:	460f      	mov	r7, r1
 800cc02:	2101      	movs	r1, #1
 800cc04:	ec59 8b10 	vmov	r8, r9, d0
 800cc08:	4616      	mov	r6, r2
 800cc0a:	f7ff fccd 	bl	800c5a8 <_Balloc>
 800cc0e:	4604      	mov	r4, r0
 800cc10:	b930      	cbnz	r0, 800cc20 <__d2b+0x24>
 800cc12:	4602      	mov	r2, r0
 800cc14:	4b23      	ldr	r3, [pc, #140]	@ (800cca4 <__d2b+0xa8>)
 800cc16:	4824      	ldr	r0, [pc, #144]	@ (800cca8 <__d2b+0xac>)
 800cc18:	f240 310f 	movw	r1, #783	@ 0x30f
 800cc1c:	f000 fa74 	bl	800d108 <__assert_func>
 800cc20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc28:	b10d      	cbz	r5, 800cc2e <__d2b+0x32>
 800cc2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc2e:	9301      	str	r3, [sp, #4]
 800cc30:	f1b8 0300 	subs.w	r3, r8, #0
 800cc34:	d023      	beq.n	800cc7e <__d2b+0x82>
 800cc36:	4668      	mov	r0, sp
 800cc38:	9300      	str	r3, [sp, #0]
 800cc3a:	f7ff fd7c 	bl	800c736 <__lo0bits>
 800cc3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc42:	b1d0      	cbz	r0, 800cc7a <__d2b+0x7e>
 800cc44:	f1c0 0320 	rsb	r3, r0, #32
 800cc48:	fa02 f303 	lsl.w	r3, r2, r3
 800cc4c:	430b      	orrs	r3, r1
 800cc4e:	40c2      	lsrs	r2, r0
 800cc50:	6163      	str	r3, [r4, #20]
 800cc52:	9201      	str	r2, [sp, #4]
 800cc54:	9b01      	ldr	r3, [sp, #4]
 800cc56:	61a3      	str	r3, [r4, #24]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	bf0c      	ite	eq
 800cc5c:	2201      	moveq	r2, #1
 800cc5e:	2202      	movne	r2, #2
 800cc60:	6122      	str	r2, [r4, #16]
 800cc62:	b1a5      	cbz	r5, 800cc8e <__d2b+0x92>
 800cc64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cc68:	4405      	add	r5, r0
 800cc6a:	603d      	str	r5, [r7, #0]
 800cc6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cc70:	6030      	str	r0, [r6, #0]
 800cc72:	4620      	mov	r0, r4
 800cc74:	b003      	add	sp, #12
 800cc76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc7a:	6161      	str	r1, [r4, #20]
 800cc7c:	e7ea      	b.n	800cc54 <__d2b+0x58>
 800cc7e:	a801      	add	r0, sp, #4
 800cc80:	f7ff fd59 	bl	800c736 <__lo0bits>
 800cc84:	9b01      	ldr	r3, [sp, #4]
 800cc86:	6163      	str	r3, [r4, #20]
 800cc88:	3020      	adds	r0, #32
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	e7e8      	b.n	800cc60 <__d2b+0x64>
 800cc8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc96:	6038      	str	r0, [r7, #0]
 800cc98:	6918      	ldr	r0, [r3, #16]
 800cc9a:	f7ff fd2d 	bl	800c6f8 <__hi0bits>
 800cc9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cca2:	e7e5      	b.n	800cc70 <__d2b+0x74>
 800cca4:	0800ebf0 	.word	0x0800ebf0
 800cca8:	0800ec01 	.word	0x0800ec01

0800ccac <__ssputs_r>:
 800ccac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb0:	688e      	ldr	r6, [r1, #8]
 800ccb2:	461f      	mov	r7, r3
 800ccb4:	42be      	cmp	r6, r7
 800ccb6:	680b      	ldr	r3, [r1, #0]
 800ccb8:	4682      	mov	sl, r0
 800ccba:	460c      	mov	r4, r1
 800ccbc:	4690      	mov	r8, r2
 800ccbe:	d82d      	bhi.n	800cd1c <__ssputs_r+0x70>
 800ccc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ccc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ccc8:	d026      	beq.n	800cd18 <__ssputs_r+0x6c>
 800ccca:	6965      	ldr	r5, [r4, #20]
 800cccc:	6909      	ldr	r1, [r1, #16]
 800ccce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccd2:	eba3 0901 	sub.w	r9, r3, r1
 800ccd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ccda:	1c7b      	adds	r3, r7, #1
 800ccdc:	444b      	add	r3, r9
 800ccde:	106d      	asrs	r5, r5, #1
 800cce0:	429d      	cmp	r5, r3
 800cce2:	bf38      	it	cc
 800cce4:	461d      	movcc	r5, r3
 800cce6:	0553      	lsls	r3, r2, #21
 800cce8:	d527      	bpl.n	800cd3a <__ssputs_r+0x8e>
 800ccea:	4629      	mov	r1, r5
 800ccec:	f7ff fbd0 	bl	800c490 <_malloc_r>
 800ccf0:	4606      	mov	r6, r0
 800ccf2:	b360      	cbz	r0, 800cd4e <__ssputs_r+0xa2>
 800ccf4:	6921      	ldr	r1, [r4, #16]
 800ccf6:	464a      	mov	r2, r9
 800ccf8:	f7fe fcf9 	bl	800b6ee <memcpy>
 800ccfc:	89a3      	ldrh	r3, [r4, #12]
 800ccfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cd02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd06:	81a3      	strh	r3, [r4, #12]
 800cd08:	6126      	str	r6, [r4, #16]
 800cd0a:	6165      	str	r5, [r4, #20]
 800cd0c:	444e      	add	r6, r9
 800cd0e:	eba5 0509 	sub.w	r5, r5, r9
 800cd12:	6026      	str	r6, [r4, #0]
 800cd14:	60a5      	str	r5, [r4, #8]
 800cd16:	463e      	mov	r6, r7
 800cd18:	42be      	cmp	r6, r7
 800cd1a:	d900      	bls.n	800cd1e <__ssputs_r+0x72>
 800cd1c:	463e      	mov	r6, r7
 800cd1e:	6820      	ldr	r0, [r4, #0]
 800cd20:	4632      	mov	r2, r6
 800cd22:	4641      	mov	r1, r8
 800cd24:	f000 f9c6 	bl	800d0b4 <memmove>
 800cd28:	68a3      	ldr	r3, [r4, #8]
 800cd2a:	1b9b      	subs	r3, r3, r6
 800cd2c:	60a3      	str	r3, [r4, #8]
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	4433      	add	r3, r6
 800cd32:	6023      	str	r3, [r4, #0]
 800cd34:	2000      	movs	r0, #0
 800cd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd3a:	462a      	mov	r2, r5
 800cd3c:	f000 fa28 	bl	800d190 <_realloc_r>
 800cd40:	4606      	mov	r6, r0
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d1e0      	bne.n	800cd08 <__ssputs_r+0x5c>
 800cd46:	6921      	ldr	r1, [r4, #16]
 800cd48:	4650      	mov	r0, sl
 800cd4a:	f7ff fb2d 	bl	800c3a8 <_free_r>
 800cd4e:	230c      	movs	r3, #12
 800cd50:	f8ca 3000 	str.w	r3, [sl]
 800cd54:	89a3      	ldrh	r3, [r4, #12]
 800cd56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd5a:	81a3      	strh	r3, [r4, #12]
 800cd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd60:	e7e9      	b.n	800cd36 <__ssputs_r+0x8a>
	...

0800cd64 <_svfiprintf_r>:
 800cd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd68:	4698      	mov	r8, r3
 800cd6a:	898b      	ldrh	r3, [r1, #12]
 800cd6c:	061b      	lsls	r3, r3, #24
 800cd6e:	b09d      	sub	sp, #116	@ 0x74
 800cd70:	4607      	mov	r7, r0
 800cd72:	460d      	mov	r5, r1
 800cd74:	4614      	mov	r4, r2
 800cd76:	d510      	bpl.n	800cd9a <_svfiprintf_r+0x36>
 800cd78:	690b      	ldr	r3, [r1, #16]
 800cd7a:	b973      	cbnz	r3, 800cd9a <_svfiprintf_r+0x36>
 800cd7c:	2140      	movs	r1, #64	@ 0x40
 800cd7e:	f7ff fb87 	bl	800c490 <_malloc_r>
 800cd82:	6028      	str	r0, [r5, #0]
 800cd84:	6128      	str	r0, [r5, #16]
 800cd86:	b930      	cbnz	r0, 800cd96 <_svfiprintf_r+0x32>
 800cd88:	230c      	movs	r3, #12
 800cd8a:	603b      	str	r3, [r7, #0]
 800cd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd90:	b01d      	add	sp, #116	@ 0x74
 800cd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd96:	2340      	movs	r3, #64	@ 0x40
 800cd98:	616b      	str	r3, [r5, #20]
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd9e:	2320      	movs	r3, #32
 800cda0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cda4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cda8:	2330      	movs	r3, #48	@ 0x30
 800cdaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cf48 <_svfiprintf_r+0x1e4>
 800cdae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cdb2:	f04f 0901 	mov.w	r9, #1
 800cdb6:	4623      	mov	r3, r4
 800cdb8:	469a      	mov	sl, r3
 800cdba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdbe:	b10a      	cbz	r2, 800cdc4 <_svfiprintf_r+0x60>
 800cdc0:	2a25      	cmp	r2, #37	@ 0x25
 800cdc2:	d1f9      	bne.n	800cdb8 <_svfiprintf_r+0x54>
 800cdc4:	ebba 0b04 	subs.w	fp, sl, r4
 800cdc8:	d00b      	beq.n	800cde2 <_svfiprintf_r+0x7e>
 800cdca:	465b      	mov	r3, fp
 800cdcc:	4622      	mov	r2, r4
 800cdce:	4629      	mov	r1, r5
 800cdd0:	4638      	mov	r0, r7
 800cdd2:	f7ff ff6b 	bl	800ccac <__ssputs_r>
 800cdd6:	3001      	adds	r0, #1
 800cdd8:	f000 80a7 	beq.w	800cf2a <_svfiprintf_r+0x1c6>
 800cddc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdde:	445a      	add	r2, fp
 800cde0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cde2:	f89a 3000 	ldrb.w	r3, [sl]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	f000 809f 	beq.w	800cf2a <_svfiprintf_r+0x1c6>
 800cdec:	2300      	movs	r3, #0
 800cdee:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdf6:	f10a 0a01 	add.w	sl, sl, #1
 800cdfa:	9304      	str	r3, [sp, #16]
 800cdfc:	9307      	str	r3, [sp, #28]
 800cdfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce02:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce04:	4654      	mov	r4, sl
 800ce06:	2205      	movs	r2, #5
 800ce08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce0c:	484e      	ldr	r0, [pc, #312]	@ (800cf48 <_svfiprintf_r+0x1e4>)
 800ce0e:	f7f3 f9df 	bl	80001d0 <memchr>
 800ce12:	9a04      	ldr	r2, [sp, #16]
 800ce14:	b9d8      	cbnz	r0, 800ce4e <_svfiprintf_r+0xea>
 800ce16:	06d0      	lsls	r0, r2, #27
 800ce18:	bf44      	itt	mi
 800ce1a:	2320      	movmi	r3, #32
 800ce1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce20:	0711      	lsls	r1, r2, #28
 800ce22:	bf44      	itt	mi
 800ce24:	232b      	movmi	r3, #43	@ 0x2b
 800ce26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce30:	d015      	beq.n	800ce5e <_svfiprintf_r+0xfa>
 800ce32:	9a07      	ldr	r2, [sp, #28]
 800ce34:	4654      	mov	r4, sl
 800ce36:	2000      	movs	r0, #0
 800ce38:	f04f 0c0a 	mov.w	ip, #10
 800ce3c:	4621      	mov	r1, r4
 800ce3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce42:	3b30      	subs	r3, #48	@ 0x30
 800ce44:	2b09      	cmp	r3, #9
 800ce46:	d94b      	bls.n	800cee0 <_svfiprintf_r+0x17c>
 800ce48:	b1b0      	cbz	r0, 800ce78 <_svfiprintf_r+0x114>
 800ce4a:	9207      	str	r2, [sp, #28]
 800ce4c:	e014      	b.n	800ce78 <_svfiprintf_r+0x114>
 800ce4e:	eba0 0308 	sub.w	r3, r0, r8
 800ce52:	fa09 f303 	lsl.w	r3, r9, r3
 800ce56:	4313      	orrs	r3, r2
 800ce58:	9304      	str	r3, [sp, #16]
 800ce5a:	46a2      	mov	sl, r4
 800ce5c:	e7d2      	b.n	800ce04 <_svfiprintf_r+0xa0>
 800ce5e:	9b03      	ldr	r3, [sp, #12]
 800ce60:	1d19      	adds	r1, r3, #4
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	9103      	str	r1, [sp, #12]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	bfbb      	ittet	lt
 800ce6a:	425b      	neglt	r3, r3
 800ce6c:	f042 0202 	orrlt.w	r2, r2, #2
 800ce70:	9307      	strge	r3, [sp, #28]
 800ce72:	9307      	strlt	r3, [sp, #28]
 800ce74:	bfb8      	it	lt
 800ce76:	9204      	strlt	r2, [sp, #16]
 800ce78:	7823      	ldrb	r3, [r4, #0]
 800ce7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce7c:	d10a      	bne.n	800ce94 <_svfiprintf_r+0x130>
 800ce7e:	7863      	ldrb	r3, [r4, #1]
 800ce80:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce82:	d132      	bne.n	800ceea <_svfiprintf_r+0x186>
 800ce84:	9b03      	ldr	r3, [sp, #12]
 800ce86:	1d1a      	adds	r2, r3, #4
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	9203      	str	r2, [sp, #12]
 800ce8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce90:	3402      	adds	r4, #2
 800ce92:	9305      	str	r3, [sp, #20]
 800ce94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cf58 <_svfiprintf_r+0x1f4>
 800ce98:	7821      	ldrb	r1, [r4, #0]
 800ce9a:	2203      	movs	r2, #3
 800ce9c:	4650      	mov	r0, sl
 800ce9e:	f7f3 f997 	bl	80001d0 <memchr>
 800cea2:	b138      	cbz	r0, 800ceb4 <_svfiprintf_r+0x150>
 800cea4:	9b04      	ldr	r3, [sp, #16]
 800cea6:	eba0 000a 	sub.w	r0, r0, sl
 800ceaa:	2240      	movs	r2, #64	@ 0x40
 800ceac:	4082      	lsls	r2, r0
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	3401      	adds	r4, #1
 800ceb2:	9304      	str	r3, [sp, #16]
 800ceb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceb8:	4824      	ldr	r0, [pc, #144]	@ (800cf4c <_svfiprintf_r+0x1e8>)
 800ceba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cebe:	2206      	movs	r2, #6
 800cec0:	f7f3 f986 	bl	80001d0 <memchr>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d036      	beq.n	800cf36 <_svfiprintf_r+0x1d2>
 800cec8:	4b21      	ldr	r3, [pc, #132]	@ (800cf50 <_svfiprintf_r+0x1ec>)
 800ceca:	bb1b      	cbnz	r3, 800cf14 <_svfiprintf_r+0x1b0>
 800cecc:	9b03      	ldr	r3, [sp, #12]
 800cece:	3307      	adds	r3, #7
 800ced0:	f023 0307 	bic.w	r3, r3, #7
 800ced4:	3308      	adds	r3, #8
 800ced6:	9303      	str	r3, [sp, #12]
 800ced8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceda:	4433      	add	r3, r6
 800cedc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cede:	e76a      	b.n	800cdb6 <_svfiprintf_r+0x52>
 800cee0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cee4:	460c      	mov	r4, r1
 800cee6:	2001      	movs	r0, #1
 800cee8:	e7a8      	b.n	800ce3c <_svfiprintf_r+0xd8>
 800ceea:	2300      	movs	r3, #0
 800ceec:	3401      	adds	r4, #1
 800ceee:	9305      	str	r3, [sp, #20]
 800cef0:	4619      	mov	r1, r3
 800cef2:	f04f 0c0a 	mov.w	ip, #10
 800cef6:	4620      	mov	r0, r4
 800cef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cefc:	3a30      	subs	r2, #48	@ 0x30
 800cefe:	2a09      	cmp	r2, #9
 800cf00:	d903      	bls.n	800cf0a <_svfiprintf_r+0x1a6>
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d0c6      	beq.n	800ce94 <_svfiprintf_r+0x130>
 800cf06:	9105      	str	r1, [sp, #20]
 800cf08:	e7c4      	b.n	800ce94 <_svfiprintf_r+0x130>
 800cf0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf0e:	4604      	mov	r4, r0
 800cf10:	2301      	movs	r3, #1
 800cf12:	e7f0      	b.n	800cef6 <_svfiprintf_r+0x192>
 800cf14:	ab03      	add	r3, sp, #12
 800cf16:	9300      	str	r3, [sp, #0]
 800cf18:	462a      	mov	r2, r5
 800cf1a:	4b0e      	ldr	r3, [pc, #56]	@ (800cf54 <_svfiprintf_r+0x1f0>)
 800cf1c:	a904      	add	r1, sp, #16
 800cf1e:	4638      	mov	r0, r7
 800cf20:	f7fd fe74 	bl	800ac0c <_printf_float>
 800cf24:	1c42      	adds	r2, r0, #1
 800cf26:	4606      	mov	r6, r0
 800cf28:	d1d6      	bne.n	800ced8 <_svfiprintf_r+0x174>
 800cf2a:	89ab      	ldrh	r3, [r5, #12]
 800cf2c:	065b      	lsls	r3, r3, #25
 800cf2e:	f53f af2d 	bmi.w	800cd8c <_svfiprintf_r+0x28>
 800cf32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf34:	e72c      	b.n	800cd90 <_svfiprintf_r+0x2c>
 800cf36:	ab03      	add	r3, sp, #12
 800cf38:	9300      	str	r3, [sp, #0]
 800cf3a:	462a      	mov	r2, r5
 800cf3c:	4b05      	ldr	r3, [pc, #20]	@ (800cf54 <_svfiprintf_r+0x1f0>)
 800cf3e:	a904      	add	r1, sp, #16
 800cf40:	4638      	mov	r0, r7
 800cf42:	f7fe f8fb 	bl	800b13c <_printf_i>
 800cf46:	e7ed      	b.n	800cf24 <_svfiprintf_r+0x1c0>
 800cf48:	0800ed58 	.word	0x0800ed58
 800cf4c:	0800ed62 	.word	0x0800ed62
 800cf50:	0800ac0d 	.word	0x0800ac0d
 800cf54:	0800ccad 	.word	0x0800ccad
 800cf58:	0800ed5e 	.word	0x0800ed5e

0800cf5c <__sflush_r>:
 800cf5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf64:	0716      	lsls	r6, r2, #28
 800cf66:	4605      	mov	r5, r0
 800cf68:	460c      	mov	r4, r1
 800cf6a:	d454      	bmi.n	800d016 <__sflush_r+0xba>
 800cf6c:	684b      	ldr	r3, [r1, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	dc02      	bgt.n	800cf78 <__sflush_r+0x1c>
 800cf72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	dd48      	ble.n	800d00a <__sflush_r+0xae>
 800cf78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf7a:	2e00      	cmp	r6, #0
 800cf7c:	d045      	beq.n	800d00a <__sflush_r+0xae>
 800cf7e:	2300      	movs	r3, #0
 800cf80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf84:	682f      	ldr	r7, [r5, #0]
 800cf86:	6a21      	ldr	r1, [r4, #32]
 800cf88:	602b      	str	r3, [r5, #0]
 800cf8a:	d030      	beq.n	800cfee <__sflush_r+0x92>
 800cf8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf8e:	89a3      	ldrh	r3, [r4, #12]
 800cf90:	0759      	lsls	r1, r3, #29
 800cf92:	d505      	bpl.n	800cfa0 <__sflush_r+0x44>
 800cf94:	6863      	ldr	r3, [r4, #4]
 800cf96:	1ad2      	subs	r2, r2, r3
 800cf98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cf9a:	b10b      	cbz	r3, 800cfa0 <__sflush_r+0x44>
 800cf9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cf9e:	1ad2      	subs	r2, r2, r3
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfa4:	6a21      	ldr	r1, [r4, #32]
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	47b0      	blx	r6
 800cfaa:	1c43      	adds	r3, r0, #1
 800cfac:	89a3      	ldrh	r3, [r4, #12]
 800cfae:	d106      	bne.n	800cfbe <__sflush_r+0x62>
 800cfb0:	6829      	ldr	r1, [r5, #0]
 800cfb2:	291d      	cmp	r1, #29
 800cfb4:	d82b      	bhi.n	800d00e <__sflush_r+0xb2>
 800cfb6:	4a2a      	ldr	r2, [pc, #168]	@ (800d060 <__sflush_r+0x104>)
 800cfb8:	410a      	asrs	r2, r1
 800cfba:	07d6      	lsls	r6, r2, #31
 800cfbc:	d427      	bmi.n	800d00e <__sflush_r+0xb2>
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	6062      	str	r2, [r4, #4]
 800cfc2:	04d9      	lsls	r1, r3, #19
 800cfc4:	6922      	ldr	r2, [r4, #16]
 800cfc6:	6022      	str	r2, [r4, #0]
 800cfc8:	d504      	bpl.n	800cfd4 <__sflush_r+0x78>
 800cfca:	1c42      	adds	r2, r0, #1
 800cfcc:	d101      	bne.n	800cfd2 <__sflush_r+0x76>
 800cfce:	682b      	ldr	r3, [r5, #0]
 800cfd0:	b903      	cbnz	r3, 800cfd4 <__sflush_r+0x78>
 800cfd2:	6560      	str	r0, [r4, #84]	@ 0x54
 800cfd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfd6:	602f      	str	r7, [r5, #0]
 800cfd8:	b1b9      	cbz	r1, 800d00a <__sflush_r+0xae>
 800cfda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfde:	4299      	cmp	r1, r3
 800cfe0:	d002      	beq.n	800cfe8 <__sflush_r+0x8c>
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	f7ff f9e0 	bl	800c3a8 <_free_r>
 800cfe8:	2300      	movs	r3, #0
 800cfea:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfec:	e00d      	b.n	800d00a <__sflush_r+0xae>
 800cfee:	2301      	movs	r3, #1
 800cff0:	4628      	mov	r0, r5
 800cff2:	47b0      	blx	r6
 800cff4:	4602      	mov	r2, r0
 800cff6:	1c50      	adds	r0, r2, #1
 800cff8:	d1c9      	bne.n	800cf8e <__sflush_r+0x32>
 800cffa:	682b      	ldr	r3, [r5, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d0c6      	beq.n	800cf8e <__sflush_r+0x32>
 800d000:	2b1d      	cmp	r3, #29
 800d002:	d001      	beq.n	800d008 <__sflush_r+0xac>
 800d004:	2b16      	cmp	r3, #22
 800d006:	d11e      	bne.n	800d046 <__sflush_r+0xea>
 800d008:	602f      	str	r7, [r5, #0]
 800d00a:	2000      	movs	r0, #0
 800d00c:	e022      	b.n	800d054 <__sflush_r+0xf8>
 800d00e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d012:	b21b      	sxth	r3, r3
 800d014:	e01b      	b.n	800d04e <__sflush_r+0xf2>
 800d016:	690f      	ldr	r7, [r1, #16]
 800d018:	2f00      	cmp	r7, #0
 800d01a:	d0f6      	beq.n	800d00a <__sflush_r+0xae>
 800d01c:	0793      	lsls	r3, r2, #30
 800d01e:	680e      	ldr	r6, [r1, #0]
 800d020:	bf08      	it	eq
 800d022:	694b      	ldreq	r3, [r1, #20]
 800d024:	600f      	str	r7, [r1, #0]
 800d026:	bf18      	it	ne
 800d028:	2300      	movne	r3, #0
 800d02a:	eba6 0807 	sub.w	r8, r6, r7
 800d02e:	608b      	str	r3, [r1, #8]
 800d030:	f1b8 0f00 	cmp.w	r8, #0
 800d034:	dde9      	ble.n	800d00a <__sflush_r+0xae>
 800d036:	6a21      	ldr	r1, [r4, #32]
 800d038:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d03a:	4643      	mov	r3, r8
 800d03c:	463a      	mov	r2, r7
 800d03e:	4628      	mov	r0, r5
 800d040:	47b0      	blx	r6
 800d042:	2800      	cmp	r0, #0
 800d044:	dc08      	bgt.n	800d058 <__sflush_r+0xfc>
 800d046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d04a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d04e:	81a3      	strh	r3, [r4, #12]
 800d050:	f04f 30ff 	mov.w	r0, #4294967295
 800d054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d058:	4407      	add	r7, r0
 800d05a:	eba8 0800 	sub.w	r8, r8, r0
 800d05e:	e7e7      	b.n	800d030 <__sflush_r+0xd4>
 800d060:	dfbffffe 	.word	0xdfbffffe

0800d064 <_fflush_r>:
 800d064:	b538      	push	{r3, r4, r5, lr}
 800d066:	690b      	ldr	r3, [r1, #16]
 800d068:	4605      	mov	r5, r0
 800d06a:	460c      	mov	r4, r1
 800d06c:	b913      	cbnz	r3, 800d074 <_fflush_r+0x10>
 800d06e:	2500      	movs	r5, #0
 800d070:	4628      	mov	r0, r5
 800d072:	bd38      	pop	{r3, r4, r5, pc}
 800d074:	b118      	cbz	r0, 800d07e <_fflush_r+0x1a>
 800d076:	6a03      	ldr	r3, [r0, #32]
 800d078:	b90b      	cbnz	r3, 800d07e <_fflush_r+0x1a>
 800d07a:	f7fe fa0b 	bl	800b494 <__sinit>
 800d07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d0f3      	beq.n	800d06e <_fflush_r+0xa>
 800d086:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d088:	07d0      	lsls	r0, r2, #31
 800d08a:	d404      	bmi.n	800d096 <_fflush_r+0x32>
 800d08c:	0599      	lsls	r1, r3, #22
 800d08e:	d402      	bmi.n	800d096 <_fflush_r+0x32>
 800d090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d092:	f7fe fb2a 	bl	800b6ea <__retarget_lock_acquire_recursive>
 800d096:	4628      	mov	r0, r5
 800d098:	4621      	mov	r1, r4
 800d09a:	f7ff ff5f 	bl	800cf5c <__sflush_r>
 800d09e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0a0:	07da      	lsls	r2, r3, #31
 800d0a2:	4605      	mov	r5, r0
 800d0a4:	d4e4      	bmi.n	800d070 <_fflush_r+0xc>
 800d0a6:	89a3      	ldrh	r3, [r4, #12]
 800d0a8:	059b      	lsls	r3, r3, #22
 800d0aa:	d4e1      	bmi.n	800d070 <_fflush_r+0xc>
 800d0ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0ae:	f7fe fb1d 	bl	800b6ec <__retarget_lock_release_recursive>
 800d0b2:	e7dd      	b.n	800d070 <_fflush_r+0xc>

0800d0b4 <memmove>:
 800d0b4:	4288      	cmp	r0, r1
 800d0b6:	b510      	push	{r4, lr}
 800d0b8:	eb01 0402 	add.w	r4, r1, r2
 800d0bc:	d902      	bls.n	800d0c4 <memmove+0x10>
 800d0be:	4284      	cmp	r4, r0
 800d0c0:	4623      	mov	r3, r4
 800d0c2:	d807      	bhi.n	800d0d4 <memmove+0x20>
 800d0c4:	1e43      	subs	r3, r0, #1
 800d0c6:	42a1      	cmp	r1, r4
 800d0c8:	d008      	beq.n	800d0dc <memmove+0x28>
 800d0ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0d2:	e7f8      	b.n	800d0c6 <memmove+0x12>
 800d0d4:	4402      	add	r2, r0
 800d0d6:	4601      	mov	r1, r0
 800d0d8:	428a      	cmp	r2, r1
 800d0da:	d100      	bne.n	800d0de <memmove+0x2a>
 800d0dc:	bd10      	pop	{r4, pc}
 800d0de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0e6:	e7f7      	b.n	800d0d8 <memmove+0x24>

0800d0e8 <_sbrk_r>:
 800d0e8:	b538      	push	{r3, r4, r5, lr}
 800d0ea:	4d06      	ldr	r5, [pc, #24]	@ (800d104 <_sbrk_r+0x1c>)
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	4608      	mov	r0, r1
 800d0f2:	602b      	str	r3, [r5, #0]
 800d0f4:	f7f5 fb94 	bl	8002820 <_sbrk>
 800d0f8:	1c43      	adds	r3, r0, #1
 800d0fa:	d102      	bne.n	800d102 <_sbrk_r+0x1a>
 800d0fc:	682b      	ldr	r3, [r5, #0]
 800d0fe:	b103      	cbz	r3, 800d102 <_sbrk_r+0x1a>
 800d100:	6023      	str	r3, [r4, #0]
 800d102:	bd38      	pop	{r3, r4, r5, pc}
 800d104:	200021e4 	.word	0x200021e4

0800d108 <__assert_func>:
 800d108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d10a:	4614      	mov	r4, r2
 800d10c:	461a      	mov	r2, r3
 800d10e:	4b09      	ldr	r3, [pc, #36]	@ (800d134 <__assert_func+0x2c>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4605      	mov	r5, r0
 800d114:	68d8      	ldr	r0, [r3, #12]
 800d116:	b954      	cbnz	r4, 800d12e <__assert_func+0x26>
 800d118:	4b07      	ldr	r3, [pc, #28]	@ (800d138 <__assert_func+0x30>)
 800d11a:	461c      	mov	r4, r3
 800d11c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d120:	9100      	str	r1, [sp, #0]
 800d122:	462b      	mov	r3, r5
 800d124:	4905      	ldr	r1, [pc, #20]	@ (800d13c <__assert_func+0x34>)
 800d126:	f000 f86f 	bl	800d208 <fiprintf>
 800d12a:	f000 f87f 	bl	800d22c <abort>
 800d12e:	4b04      	ldr	r3, [pc, #16]	@ (800d140 <__assert_func+0x38>)
 800d130:	e7f4      	b.n	800d11c <__assert_func+0x14>
 800d132:	bf00      	nop
 800d134:	20000144 	.word	0x20000144
 800d138:	0800edae 	.word	0x0800edae
 800d13c:	0800ed80 	.word	0x0800ed80
 800d140:	0800ed73 	.word	0x0800ed73

0800d144 <_calloc_r>:
 800d144:	b570      	push	{r4, r5, r6, lr}
 800d146:	fba1 5402 	umull	r5, r4, r1, r2
 800d14a:	b93c      	cbnz	r4, 800d15c <_calloc_r+0x18>
 800d14c:	4629      	mov	r1, r5
 800d14e:	f7ff f99f 	bl	800c490 <_malloc_r>
 800d152:	4606      	mov	r6, r0
 800d154:	b928      	cbnz	r0, 800d162 <_calloc_r+0x1e>
 800d156:	2600      	movs	r6, #0
 800d158:	4630      	mov	r0, r6
 800d15a:	bd70      	pop	{r4, r5, r6, pc}
 800d15c:	220c      	movs	r2, #12
 800d15e:	6002      	str	r2, [r0, #0]
 800d160:	e7f9      	b.n	800d156 <_calloc_r+0x12>
 800d162:	462a      	mov	r2, r5
 800d164:	4621      	mov	r1, r4
 800d166:	f7fe fa42 	bl	800b5ee <memset>
 800d16a:	e7f5      	b.n	800d158 <_calloc_r+0x14>

0800d16c <__ascii_mbtowc>:
 800d16c:	b082      	sub	sp, #8
 800d16e:	b901      	cbnz	r1, 800d172 <__ascii_mbtowc+0x6>
 800d170:	a901      	add	r1, sp, #4
 800d172:	b142      	cbz	r2, 800d186 <__ascii_mbtowc+0x1a>
 800d174:	b14b      	cbz	r3, 800d18a <__ascii_mbtowc+0x1e>
 800d176:	7813      	ldrb	r3, [r2, #0]
 800d178:	600b      	str	r3, [r1, #0]
 800d17a:	7812      	ldrb	r2, [r2, #0]
 800d17c:	1e10      	subs	r0, r2, #0
 800d17e:	bf18      	it	ne
 800d180:	2001      	movne	r0, #1
 800d182:	b002      	add	sp, #8
 800d184:	4770      	bx	lr
 800d186:	4610      	mov	r0, r2
 800d188:	e7fb      	b.n	800d182 <__ascii_mbtowc+0x16>
 800d18a:	f06f 0001 	mvn.w	r0, #1
 800d18e:	e7f8      	b.n	800d182 <__ascii_mbtowc+0x16>

0800d190 <_realloc_r>:
 800d190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d194:	4680      	mov	r8, r0
 800d196:	4615      	mov	r5, r2
 800d198:	460c      	mov	r4, r1
 800d19a:	b921      	cbnz	r1, 800d1a6 <_realloc_r+0x16>
 800d19c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1a0:	4611      	mov	r1, r2
 800d1a2:	f7ff b975 	b.w	800c490 <_malloc_r>
 800d1a6:	b92a      	cbnz	r2, 800d1b4 <_realloc_r+0x24>
 800d1a8:	f7ff f8fe 	bl	800c3a8 <_free_r>
 800d1ac:	2400      	movs	r4, #0
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1b4:	f000 f841 	bl	800d23a <_malloc_usable_size_r>
 800d1b8:	4285      	cmp	r5, r0
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	d802      	bhi.n	800d1c4 <_realloc_r+0x34>
 800d1be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d1c2:	d8f4      	bhi.n	800d1ae <_realloc_r+0x1e>
 800d1c4:	4629      	mov	r1, r5
 800d1c6:	4640      	mov	r0, r8
 800d1c8:	f7ff f962 	bl	800c490 <_malloc_r>
 800d1cc:	4607      	mov	r7, r0
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	d0ec      	beq.n	800d1ac <_realloc_r+0x1c>
 800d1d2:	42b5      	cmp	r5, r6
 800d1d4:	462a      	mov	r2, r5
 800d1d6:	4621      	mov	r1, r4
 800d1d8:	bf28      	it	cs
 800d1da:	4632      	movcs	r2, r6
 800d1dc:	f7fe fa87 	bl	800b6ee <memcpy>
 800d1e0:	4621      	mov	r1, r4
 800d1e2:	4640      	mov	r0, r8
 800d1e4:	f7ff f8e0 	bl	800c3a8 <_free_r>
 800d1e8:	463c      	mov	r4, r7
 800d1ea:	e7e0      	b.n	800d1ae <_realloc_r+0x1e>

0800d1ec <__ascii_wctomb>:
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	4608      	mov	r0, r1
 800d1f0:	b141      	cbz	r1, 800d204 <__ascii_wctomb+0x18>
 800d1f2:	2aff      	cmp	r2, #255	@ 0xff
 800d1f4:	d904      	bls.n	800d200 <__ascii_wctomb+0x14>
 800d1f6:	228a      	movs	r2, #138	@ 0x8a
 800d1f8:	601a      	str	r2, [r3, #0]
 800d1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d1fe:	4770      	bx	lr
 800d200:	700a      	strb	r2, [r1, #0]
 800d202:	2001      	movs	r0, #1
 800d204:	4770      	bx	lr
	...

0800d208 <fiprintf>:
 800d208:	b40e      	push	{r1, r2, r3}
 800d20a:	b503      	push	{r0, r1, lr}
 800d20c:	4601      	mov	r1, r0
 800d20e:	ab03      	add	r3, sp, #12
 800d210:	4805      	ldr	r0, [pc, #20]	@ (800d228 <fiprintf+0x20>)
 800d212:	f853 2b04 	ldr.w	r2, [r3], #4
 800d216:	6800      	ldr	r0, [r0, #0]
 800d218:	9301      	str	r3, [sp, #4]
 800d21a:	f000 f83f 	bl	800d29c <_vfiprintf_r>
 800d21e:	b002      	add	sp, #8
 800d220:	f85d eb04 	ldr.w	lr, [sp], #4
 800d224:	b003      	add	sp, #12
 800d226:	4770      	bx	lr
 800d228:	20000144 	.word	0x20000144

0800d22c <abort>:
 800d22c:	b508      	push	{r3, lr}
 800d22e:	2006      	movs	r0, #6
 800d230:	f000 fa08 	bl	800d644 <raise>
 800d234:	2001      	movs	r0, #1
 800d236:	f7f5 fa7b 	bl	8002730 <_exit>

0800d23a <_malloc_usable_size_r>:
 800d23a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d23e:	1f18      	subs	r0, r3, #4
 800d240:	2b00      	cmp	r3, #0
 800d242:	bfbc      	itt	lt
 800d244:	580b      	ldrlt	r3, [r1, r0]
 800d246:	18c0      	addlt	r0, r0, r3
 800d248:	4770      	bx	lr

0800d24a <__sfputc_r>:
 800d24a:	6893      	ldr	r3, [r2, #8]
 800d24c:	3b01      	subs	r3, #1
 800d24e:	2b00      	cmp	r3, #0
 800d250:	b410      	push	{r4}
 800d252:	6093      	str	r3, [r2, #8]
 800d254:	da08      	bge.n	800d268 <__sfputc_r+0x1e>
 800d256:	6994      	ldr	r4, [r2, #24]
 800d258:	42a3      	cmp	r3, r4
 800d25a:	db01      	blt.n	800d260 <__sfputc_r+0x16>
 800d25c:	290a      	cmp	r1, #10
 800d25e:	d103      	bne.n	800d268 <__sfputc_r+0x1e>
 800d260:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d264:	f000 b932 	b.w	800d4cc <__swbuf_r>
 800d268:	6813      	ldr	r3, [r2, #0]
 800d26a:	1c58      	adds	r0, r3, #1
 800d26c:	6010      	str	r0, [r2, #0]
 800d26e:	7019      	strb	r1, [r3, #0]
 800d270:	4608      	mov	r0, r1
 800d272:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <__sfputs_r>:
 800d278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27a:	4606      	mov	r6, r0
 800d27c:	460f      	mov	r7, r1
 800d27e:	4614      	mov	r4, r2
 800d280:	18d5      	adds	r5, r2, r3
 800d282:	42ac      	cmp	r4, r5
 800d284:	d101      	bne.n	800d28a <__sfputs_r+0x12>
 800d286:	2000      	movs	r0, #0
 800d288:	e007      	b.n	800d29a <__sfputs_r+0x22>
 800d28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d28e:	463a      	mov	r2, r7
 800d290:	4630      	mov	r0, r6
 800d292:	f7ff ffda 	bl	800d24a <__sfputc_r>
 800d296:	1c43      	adds	r3, r0, #1
 800d298:	d1f3      	bne.n	800d282 <__sfputs_r+0xa>
 800d29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d29c <_vfiprintf_r>:
 800d29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a0:	460d      	mov	r5, r1
 800d2a2:	b09d      	sub	sp, #116	@ 0x74
 800d2a4:	4614      	mov	r4, r2
 800d2a6:	4698      	mov	r8, r3
 800d2a8:	4606      	mov	r6, r0
 800d2aa:	b118      	cbz	r0, 800d2b4 <_vfiprintf_r+0x18>
 800d2ac:	6a03      	ldr	r3, [r0, #32]
 800d2ae:	b90b      	cbnz	r3, 800d2b4 <_vfiprintf_r+0x18>
 800d2b0:	f7fe f8f0 	bl	800b494 <__sinit>
 800d2b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2b6:	07d9      	lsls	r1, r3, #31
 800d2b8:	d405      	bmi.n	800d2c6 <_vfiprintf_r+0x2a>
 800d2ba:	89ab      	ldrh	r3, [r5, #12]
 800d2bc:	059a      	lsls	r2, r3, #22
 800d2be:	d402      	bmi.n	800d2c6 <_vfiprintf_r+0x2a>
 800d2c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2c2:	f7fe fa12 	bl	800b6ea <__retarget_lock_acquire_recursive>
 800d2c6:	89ab      	ldrh	r3, [r5, #12]
 800d2c8:	071b      	lsls	r3, r3, #28
 800d2ca:	d501      	bpl.n	800d2d0 <_vfiprintf_r+0x34>
 800d2cc:	692b      	ldr	r3, [r5, #16]
 800d2ce:	b99b      	cbnz	r3, 800d2f8 <_vfiprintf_r+0x5c>
 800d2d0:	4629      	mov	r1, r5
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	f000 f938 	bl	800d548 <__swsetup_r>
 800d2d8:	b170      	cbz	r0, 800d2f8 <_vfiprintf_r+0x5c>
 800d2da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2dc:	07dc      	lsls	r4, r3, #31
 800d2de:	d504      	bpl.n	800d2ea <_vfiprintf_r+0x4e>
 800d2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e4:	b01d      	add	sp, #116	@ 0x74
 800d2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ea:	89ab      	ldrh	r3, [r5, #12]
 800d2ec:	0598      	lsls	r0, r3, #22
 800d2ee:	d4f7      	bmi.n	800d2e0 <_vfiprintf_r+0x44>
 800d2f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2f2:	f7fe f9fb 	bl	800b6ec <__retarget_lock_release_recursive>
 800d2f6:	e7f3      	b.n	800d2e0 <_vfiprintf_r+0x44>
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2fc:	2320      	movs	r3, #32
 800d2fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d302:	f8cd 800c 	str.w	r8, [sp, #12]
 800d306:	2330      	movs	r3, #48	@ 0x30
 800d308:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d4b8 <_vfiprintf_r+0x21c>
 800d30c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d310:	f04f 0901 	mov.w	r9, #1
 800d314:	4623      	mov	r3, r4
 800d316:	469a      	mov	sl, r3
 800d318:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d31c:	b10a      	cbz	r2, 800d322 <_vfiprintf_r+0x86>
 800d31e:	2a25      	cmp	r2, #37	@ 0x25
 800d320:	d1f9      	bne.n	800d316 <_vfiprintf_r+0x7a>
 800d322:	ebba 0b04 	subs.w	fp, sl, r4
 800d326:	d00b      	beq.n	800d340 <_vfiprintf_r+0xa4>
 800d328:	465b      	mov	r3, fp
 800d32a:	4622      	mov	r2, r4
 800d32c:	4629      	mov	r1, r5
 800d32e:	4630      	mov	r0, r6
 800d330:	f7ff ffa2 	bl	800d278 <__sfputs_r>
 800d334:	3001      	adds	r0, #1
 800d336:	f000 80a7 	beq.w	800d488 <_vfiprintf_r+0x1ec>
 800d33a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d33c:	445a      	add	r2, fp
 800d33e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d340:	f89a 3000 	ldrb.w	r3, [sl]
 800d344:	2b00      	cmp	r3, #0
 800d346:	f000 809f 	beq.w	800d488 <_vfiprintf_r+0x1ec>
 800d34a:	2300      	movs	r3, #0
 800d34c:	f04f 32ff 	mov.w	r2, #4294967295
 800d350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d354:	f10a 0a01 	add.w	sl, sl, #1
 800d358:	9304      	str	r3, [sp, #16]
 800d35a:	9307      	str	r3, [sp, #28]
 800d35c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d360:	931a      	str	r3, [sp, #104]	@ 0x68
 800d362:	4654      	mov	r4, sl
 800d364:	2205      	movs	r2, #5
 800d366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d36a:	4853      	ldr	r0, [pc, #332]	@ (800d4b8 <_vfiprintf_r+0x21c>)
 800d36c:	f7f2 ff30 	bl	80001d0 <memchr>
 800d370:	9a04      	ldr	r2, [sp, #16]
 800d372:	b9d8      	cbnz	r0, 800d3ac <_vfiprintf_r+0x110>
 800d374:	06d1      	lsls	r1, r2, #27
 800d376:	bf44      	itt	mi
 800d378:	2320      	movmi	r3, #32
 800d37a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d37e:	0713      	lsls	r3, r2, #28
 800d380:	bf44      	itt	mi
 800d382:	232b      	movmi	r3, #43	@ 0x2b
 800d384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d388:	f89a 3000 	ldrb.w	r3, [sl]
 800d38c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d38e:	d015      	beq.n	800d3bc <_vfiprintf_r+0x120>
 800d390:	9a07      	ldr	r2, [sp, #28]
 800d392:	4654      	mov	r4, sl
 800d394:	2000      	movs	r0, #0
 800d396:	f04f 0c0a 	mov.w	ip, #10
 800d39a:	4621      	mov	r1, r4
 800d39c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3a0:	3b30      	subs	r3, #48	@ 0x30
 800d3a2:	2b09      	cmp	r3, #9
 800d3a4:	d94b      	bls.n	800d43e <_vfiprintf_r+0x1a2>
 800d3a6:	b1b0      	cbz	r0, 800d3d6 <_vfiprintf_r+0x13a>
 800d3a8:	9207      	str	r2, [sp, #28]
 800d3aa:	e014      	b.n	800d3d6 <_vfiprintf_r+0x13a>
 800d3ac:	eba0 0308 	sub.w	r3, r0, r8
 800d3b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	9304      	str	r3, [sp, #16]
 800d3b8:	46a2      	mov	sl, r4
 800d3ba:	e7d2      	b.n	800d362 <_vfiprintf_r+0xc6>
 800d3bc:	9b03      	ldr	r3, [sp, #12]
 800d3be:	1d19      	adds	r1, r3, #4
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	9103      	str	r1, [sp, #12]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	bfbb      	ittet	lt
 800d3c8:	425b      	neglt	r3, r3
 800d3ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d3ce:	9307      	strge	r3, [sp, #28]
 800d3d0:	9307      	strlt	r3, [sp, #28]
 800d3d2:	bfb8      	it	lt
 800d3d4:	9204      	strlt	r2, [sp, #16]
 800d3d6:	7823      	ldrb	r3, [r4, #0]
 800d3d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3da:	d10a      	bne.n	800d3f2 <_vfiprintf_r+0x156>
 800d3dc:	7863      	ldrb	r3, [r4, #1]
 800d3de:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3e0:	d132      	bne.n	800d448 <_vfiprintf_r+0x1ac>
 800d3e2:	9b03      	ldr	r3, [sp, #12]
 800d3e4:	1d1a      	adds	r2, r3, #4
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	9203      	str	r2, [sp, #12]
 800d3ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3ee:	3402      	adds	r4, #2
 800d3f0:	9305      	str	r3, [sp, #20]
 800d3f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d4c8 <_vfiprintf_r+0x22c>
 800d3f6:	7821      	ldrb	r1, [r4, #0]
 800d3f8:	2203      	movs	r2, #3
 800d3fa:	4650      	mov	r0, sl
 800d3fc:	f7f2 fee8 	bl	80001d0 <memchr>
 800d400:	b138      	cbz	r0, 800d412 <_vfiprintf_r+0x176>
 800d402:	9b04      	ldr	r3, [sp, #16]
 800d404:	eba0 000a 	sub.w	r0, r0, sl
 800d408:	2240      	movs	r2, #64	@ 0x40
 800d40a:	4082      	lsls	r2, r0
 800d40c:	4313      	orrs	r3, r2
 800d40e:	3401      	adds	r4, #1
 800d410:	9304      	str	r3, [sp, #16]
 800d412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d416:	4829      	ldr	r0, [pc, #164]	@ (800d4bc <_vfiprintf_r+0x220>)
 800d418:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d41c:	2206      	movs	r2, #6
 800d41e:	f7f2 fed7 	bl	80001d0 <memchr>
 800d422:	2800      	cmp	r0, #0
 800d424:	d03f      	beq.n	800d4a6 <_vfiprintf_r+0x20a>
 800d426:	4b26      	ldr	r3, [pc, #152]	@ (800d4c0 <_vfiprintf_r+0x224>)
 800d428:	bb1b      	cbnz	r3, 800d472 <_vfiprintf_r+0x1d6>
 800d42a:	9b03      	ldr	r3, [sp, #12]
 800d42c:	3307      	adds	r3, #7
 800d42e:	f023 0307 	bic.w	r3, r3, #7
 800d432:	3308      	adds	r3, #8
 800d434:	9303      	str	r3, [sp, #12]
 800d436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d438:	443b      	add	r3, r7
 800d43a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d43c:	e76a      	b.n	800d314 <_vfiprintf_r+0x78>
 800d43e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d442:	460c      	mov	r4, r1
 800d444:	2001      	movs	r0, #1
 800d446:	e7a8      	b.n	800d39a <_vfiprintf_r+0xfe>
 800d448:	2300      	movs	r3, #0
 800d44a:	3401      	adds	r4, #1
 800d44c:	9305      	str	r3, [sp, #20]
 800d44e:	4619      	mov	r1, r3
 800d450:	f04f 0c0a 	mov.w	ip, #10
 800d454:	4620      	mov	r0, r4
 800d456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d45a:	3a30      	subs	r2, #48	@ 0x30
 800d45c:	2a09      	cmp	r2, #9
 800d45e:	d903      	bls.n	800d468 <_vfiprintf_r+0x1cc>
 800d460:	2b00      	cmp	r3, #0
 800d462:	d0c6      	beq.n	800d3f2 <_vfiprintf_r+0x156>
 800d464:	9105      	str	r1, [sp, #20]
 800d466:	e7c4      	b.n	800d3f2 <_vfiprintf_r+0x156>
 800d468:	fb0c 2101 	mla	r1, ip, r1, r2
 800d46c:	4604      	mov	r4, r0
 800d46e:	2301      	movs	r3, #1
 800d470:	e7f0      	b.n	800d454 <_vfiprintf_r+0x1b8>
 800d472:	ab03      	add	r3, sp, #12
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	462a      	mov	r2, r5
 800d478:	4b12      	ldr	r3, [pc, #72]	@ (800d4c4 <_vfiprintf_r+0x228>)
 800d47a:	a904      	add	r1, sp, #16
 800d47c:	4630      	mov	r0, r6
 800d47e:	f7fd fbc5 	bl	800ac0c <_printf_float>
 800d482:	4607      	mov	r7, r0
 800d484:	1c78      	adds	r0, r7, #1
 800d486:	d1d6      	bne.n	800d436 <_vfiprintf_r+0x19a>
 800d488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d48a:	07d9      	lsls	r1, r3, #31
 800d48c:	d405      	bmi.n	800d49a <_vfiprintf_r+0x1fe>
 800d48e:	89ab      	ldrh	r3, [r5, #12]
 800d490:	059a      	lsls	r2, r3, #22
 800d492:	d402      	bmi.n	800d49a <_vfiprintf_r+0x1fe>
 800d494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d496:	f7fe f929 	bl	800b6ec <__retarget_lock_release_recursive>
 800d49a:	89ab      	ldrh	r3, [r5, #12]
 800d49c:	065b      	lsls	r3, r3, #25
 800d49e:	f53f af1f 	bmi.w	800d2e0 <_vfiprintf_r+0x44>
 800d4a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4a4:	e71e      	b.n	800d2e4 <_vfiprintf_r+0x48>
 800d4a6:	ab03      	add	r3, sp, #12
 800d4a8:	9300      	str	r3, [sp, #0]
 800d4aa:	462a      	mov	r2, r5
 800d4ac:	4b05      	ldr	r3, [pc, #20]	@ (800d4c4 <_vfiprintf_r+0x228>)
 800d4ae:	a904      	add	r1, sp, #16
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	f7fd fe43 	bl	800b13c <_printf_i>
 800d4b6:	e7e4      	b.n	800d482 <_vfiprintf_r+0x1e6>
 800d4b8:	0800ed58 	.word	0x0800ed58
 800d4bc:	0800ed62 	.word	0x0800ed62
 800d4c0:	0800ac0d 	.word	0x0800ac0d
 800d4c4:	0800d279 	.word	0x0800d279
 800d4c8:	0800ed5e 	.word	0x0800ed5e

0800d4cc <__swbuf_r>:
 800d4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ce:	460e      	mov	r6, r1
 800d4d0:	4614      	mov	r4, r2
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	b118      	cbz	r0, 800d4de <__swbuf_r+0x12>
 800d4d6:	6a03      	ldr	r3, [r0, #32]
 800d4d8:	b90b      	cbnz	r3, 800d4de <__swbuf_r+0x12>
 800d4da:	f7fd ffdb 	bl	800b494 <__sinit>
 800d4de:	69a3      	ldr	r3, [r4, #24]
 800d4e0:	60a3      	str	r3, [r4, #8]
 800d4e2:	89a3      	ldrh	r3, [r4, #12]
 800d4e4:	071a      	lsls	r2, r3, #28
 800d4e6:	d501      	bpl.n	800d4ec <__swbuf_r+0x20>
 800d4e8:	6923      	ldr	r3, [r4, #16]
 800d4ea:	b943      	cbnz	r3, 800d4fe <__swbuf_r+0x32>
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	f000 f82a 	bl	800d548 <__swsetup_r>
 800d4f4:	b118      	cbz	r0, 800d4fe <__swbuf_r+0x32>
 800d4f6:	f04f 37ff 	mov.w	r7, #4294967295
 800d4fa:	4638      	mov	r0, r7
 800d4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4fe:	6823      	ldr	r3, [r4, #0]
 800d500:	6922      	ldr	r2, [r4, #16]
 800d502:	1a98      	subs	r0, r3, r2
 800d504:	6963      	ldr	r3, [r4, #20]
 800d506:	b2f6      	uxtb	r6, r6
 800d508:	4283      	cmp	r3, r0
 800d50a:	4637      	mov	r7, r6
 800d50c:	dc05      	bgt.n	800d51a <__swbuf_r+0x4e>
 800d50e:	4621      	mov	r1, r4
 800d510:	4628      	mov	r0, r5
 800d512:	f7ff fda7 	bl	800d064 <_fflush_r>
 800d516:	2800      	cmp	r0, #0
 800d518:	d1ed      	bne.n	800d4f6 <__swbuf_r+0x2a>
 800d51a:	68a3      	ldr	r3, [r4, #8]
 800d51c:	3b01      	subs	r3, #1
 800d51e:	60a3      	str	r3, [r4, #8]
 800d520:	6823      	ldr	r3, [r4, #0]
 800d522:	1c5a      	adds	r2, r3, #1
 800d524:	6022      	str	r2, [r4, #0]
 800d526:	701e      	strb	r6, [r3, #0]
 800d528:	6962      	ldr	r2, [r4, #20]
 800d52a:	1c43      	adds	r3, r0, #1
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d004      	beq.n	800d53a <__swbuf_r+0x6e>
 800d530:	89a3      	ldrh	r3, [r4, #12]
 800d532:	07db      	lsls	r3, r3, #31
 800d534:	d5e1      	bpl.n	800d4fa <__swbuf_r+0x2e>
 800d536:	2e0a      	cmp	r6, #10
 800d538:	d1df      	bne.n	800d4fa <__swbuf_r+0x2e>
 800d53a:	4621      	mov	r1, r4
 800d53c:	4628      	mov	r0, r5
 800d53e:	f7ff fd91 	bl	800d064 <_fflush_r>
 800d542:	2800      	cmp	r0, #0
 800d544:	d0d9      	beq.n	800d4fa <__swbuf_r+0x2e>
 800d546:	e7d6      	b.n	800d4f6 <__swbuf_r+0x2a>

0800d548 <__swsetup_r>:
 800d548:	b538      	push	{r3, r4, r5, lr}
 800d54a:	4b29      	ldr	r3, [pc, #164]	@ (800d5f0 <__swsetup_r+0xa8>)
 800d54c:	4605      	mov	r5, r0
 800d54e:	6818      	ldr	r0, [r3, #0]
 800d550:	460c      	mov	r4, r1
 800d552:	b118      	cbz	r0, 800d55c <__swsetup_r+0x14>
 800d554:	6a03      	ldr	r3, [r0, #32]
 800d556:	b90b      	cbnz	r3, 800d55c <__swsetup_r+0x14>
 800d558:	f7fd ff9c 	bl	800b494 <__sinit>
 800d55c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d560:	0719      	lsls	r1, r3, #28
 800d562:	d422      	bmi.n	800d5aa <__swsetup_r+0x62>
 800d564:	06da      	lsls	r2, r3, #27
 800d566:	d407      	bmi.n	800d578 <__swsetup_r+0x30>
 800d568:	2209      	movs	r2, #9
 800d56a:	602a      	str	r2, [r5, #0]
 800d56c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d570:	81a3      	strh	r3, [r4, #12]
 800d572:	f04f 30ff 	mov.w	r0, #4294967295
 800d576:	e033      	b.n	800d5e0 <__swsetup_r+0x98>
 800d578:	0758      	lsls	r0, r3, #29
 800d57a:	d512      	bpl.n	800d5a2 <__swsetup_r+0x5a>
 800d57c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d57e:	b141      	cbz	r1, 800d592 <__swsetup_r+0x4a>
 800d580:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d584:	4299      	cmp	r1, r3
 800d586:	d002      	beq.n	800d58e <__swsetup_r+0x46>
 800d588:	4628      	mov	r0, r5
 800d58a:	f7fe ff0d 	bl	800c3a8 <_free_r>
 800d58e:	2300      	movs	r3, #0
 800d590:	6363      	str	r3, [r4, #52]	@ 0x34
 800d592:	89a3      	ldrh	r3, [r4, #12]
 800d594:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d598:	81a3      	strh	r3, [r4, #12]
 800d59a:	2300      	movs	r3, #0
 800d59c:	6063      	str	r3, [r4, #4]
 800d59e:	6923      	ldr	r3, [r4, #16]
 800d5a0:	6023      	str	r3, [r4, #0]
 800d5a2:	89a3      	ldrh	r3, [r4, #12]
 800d5a4:	f043 0308 	orr.w	r3, r3, #8
 800d5a8:	81a3      	strh	r3, [r4, #12]
 800d5aa:	6923      	ldr	r3, [r4, #16]
 800d5ac:	b94b      	cbnz	r3, 800d5c2 <__swsetup_r+0x7a>
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d5b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5b8:	d003      	beq.n	800d5c2 <__swsetup_r+0x7a>
 800d5ba:	4621      	mov	r1, r4
 800d5bc:	4628      	mov	r0, r5
 800d5be:	f000 f883 	bl	800d6c8 <__smakebuf_r>
 800d5c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5c6:	f013 0201 	ands.w	r2, r3, #1
 800d5ca:	d00a      	beq.n	800d5e2 <__swsetup_r+0x9a>
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	60a2      	str	r2, [r4, #8]
 800d5d0:	6962      	ldr	r2, [r4, #20]
 800d5d2:	4252      	negs	r2, r2
 800d5d4:	61a2      	str	r2, [r4, #24]
 800d5d6:	6922      	ldr	r2, [r4, #16]
 800d5d8:	b942      	cbnz	r2, 800d5ec <__swsetup_r+0xa4>
 800d5da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d5de:	d1c5      	bne.n	800d56c <__swsetup_r+0x24>
 800d5e0:	bd38      	pop	{r3, r4, r5, pc}
 800d5e2:	0799      	lsls	r1, r3, #30
 800d5e4:	bf58      	it	pl
 800d5e6:	6962      	ldrpl	r2, [r4, #20]
 800d5e8:	60a2      	str	r2, [r4, #8]
 800d5ea:	e7f4      	b.n	800d5d6 <__swsetup_r+0x8e>
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	e7f7      	b.n	800d5e0 <__swsetup_r+0x98>
 800d5f0:	20000144 	.word	0x20000144

0800d5f4 <_raise_r>:
 800d5f4:	291f      	cmp	r1, #31
 800d5f6:	b538      	push	{r3, r4, r5, lr}
 800d5f8:	4605      	mov	r5, r0
 800d5fa:	460c      	mov	r4, r1
 800d5fc:	d904      	bls.n	800d608 <_raise_r+0x14>
 800d5fe:	2316      	movs	r3, #22
 800d600:	6003      	str	r3, [r0, #0]
 800d602:	f04f 30ff 	mov.w	r0, #4294967295
 800d606:	bd38      	pop	{r3, r4, r5, pc}
 800d608:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d60a:	b112      	cbz	r2, 800d612 <_raise_r+0x1e>
 800d60c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d610:	b94b      	cbnz	r3, 800d626 <_raise_r+0x32>
 800d612:	4628      	mov	r0, r5
 800d614:	f000 f830 	bl	800d678 <_getpid_r>
 800d618:	4622      	mov	r2, r4
 800d61a:	4601      	mov	r1, r0
 800d61c:	4628      	mov	r0, r5
 800d61e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d622:	f000 b817 	b.w	800d654 <_kill_r>
 800d626:	2b01      	cmp	r3, #1
 800d628:	d00a      	beq.n	800d640 <_raise_r+0x4c>
 800d62a:	1c59      	adds	r1, r3, #1
 800d62c:	d103      	bne.n	800d636 <_raise_r+0x42>
 800d62e:	2316      	movs	r3, #22
 800d630:	6003      	str	r3, [r0, #0]
 800d632:	2001      	movs	r0, #1
 800d634:	e7e7      	b.n	800d606 <_raise_r+0x12>
 800d636:	2100      	movs	r1, #0
 800d638:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d63c:	4620      	mov	r0, r4
 800d63e:	4798      	blx	r3
 800d640:	2000      	movs	r0, #0
 800d642:	e7e0      	b.n	800d606 <_raise_r+0x12>

0800d644 <raise>:
 800d644:	4b02      	ldr	r3, [pc, #8]	@ (800d650 <raise+0xc>)
 800d646:	4601      	mov	r1, r0
 800d648:	6818      	ldr	r0, [r3, #0]
 800d64a:	f7ff bfd3 	b.w	800d5f4 <_raise_r>
 800d64e:	bf00      	nop
 800d650:	20000144 	.word	0x20000144

0800d654 <_kill_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d07      	ldr	r5, [pc, #28]	@ (800d674 <_kill_r+0x20>)
 800d658:	2300      	movs	r3, #0
 800d65a:	4604      	mov	r4, r0
 800d65c:	4608      	mov	r0, r1
 800d65e:	4611      	mov	r1, r2
 800d660:	602b      	str	r3, [r5, #0]
 800d662:	f7f5 f855 	bl	8002710 <_kill>
 800d666:	1c43      	adds	r3, r0, #1
 800d668:	d102      	bne.n	800d670 <_kill_r+0x1c>
 800d66a:	682b      	ldr	r3, [r5, #0]
 800d66c:	b103      	cbz	r3, 800d670 <_kill_r+0x1c>
 800d66e:	6023      	str	r3, [r4, #0]
 800d670:	bd38      	pop	{r3, r4, r5, pc}
 800d672:	bf00      	nop
 800d674:	200021e4 	.word	0x200021e4

0800d678 <_getpid_r>:
 800d678:	f7f5 b842 	b.w	8002700 <_getpid>

0800d67c <__swhatbuf_r>:
 800d67c:	b570      	push	{r4, r5, r6, lr}
 800d67e:	460c      	mov	r4, r1
 800d680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d684:	2900      	cmp	r1, #0
 800d686:	b096      	sub	sp, #88	@ 0x58
 800d688:	4615      	mov	r5, r2
 800d68a:	461e      	mov	r6, r3
 800d68c:	da0d      	bge.n	800d6aa <__swhatbuf_r+0x2e>
 800d68e:	89a3      	ldrh	r3, [r4, #12]
 800d690:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d694:	f04f 0100 	mov.w	r1, #0
 800d698:	bf14      	ite	ne
 800d69a:	2340      	movne	r3, #64	@ 0x40
 800d69c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d6a0:	2000      	movs	r0, #0
 800d6a2:	6031      	str	r1, [r6, #0]
 800d6a4:	602b      	str	r3, [r5, #0]
 800d6a6:	b016      	add	sp, #88	@ 0x58
 800d6a8:	bd70      	pop	{r4, r5, r6, pc}
 800d6aa:	466a      	mov	r2, sp
 800d6ac:	f000 f848 	bl	800d740 <_fstat_r>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	dbec      	blt.n	800d68e <__swhatbuf_r+0x12>
 800d6b4:	9901      	ldr	r1, [sp, #4]
 800d6b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d6ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d6be:	4259      	negs	r1, r3
 800d6c0:	4159      	adcs	r1, r3
 800d6c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6c6:	e7eb      	b.n	800d6a0 <__swhatbuf_r+0x24>

0800d6c8 <__smakebuf_r>:
 800d6c8:	898b      	ldrh	r3, [r1, #12]
 800d6ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6cc:	079d      	lsls	r5, r3, #30
 800d6ce:	4606      	mov	r6, r0
 800d6d0:	460c      	mov	r4, r1
 800d6d2:	d507      	bpl.n	800d6e4 <__smakebuf_r+0x1c>
 800d6d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d6d8:	6023      	str	r3, [r4, #0]
 800d6da:	6123      	str	r3, [r4, #16]
 800d6dc:	2301      	movs	r3, #1
 800d6de:	6163      	str	r3, [r4, #20]
 800d6e0:	b003      	add	sp, #12
 800d6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6e4:	ab01      	add	r3, sp, #4
 800d6e6:	466a      	mov	r2, sp
 800d6e8:	f7ff ffc8 	bl	800d67c <__swhatbuf_r>
 800d6ec:	9f00      	ldr	r7, [sp, #0]
 800d6ee:	4605      	mov	r5, r0
 800d6f0:	4639      	mov	r1, r7
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	f7fe fecc 	bl	800c490 <_malloc_r>
 800d6f8:	b948      	cbnz	r0, 800d70e <__smakebuf_r+0x46>
 800d6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6fe:	059a      	lsls	r2, r3, #22
 800d700:	d4ee      	bmi.n	800d6e0 <__smakebuf_r+0x18>
 800d702:	f023 0303 	bic.w	r3, r3, #3
 800d706:	f043 0302 	orr.w	r3, r3, #2
 800d70a:	81a3      	strh	r3, [r4, #12]
 800d70c:	e7e2      	b.n	800d6d4 <__smakebuf_r+0xc>
 800d70e:	89a3      	ldrh	r3, [r4, #12]
 800d710:	6020      	str	r0, [r4, #0]
 800d712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d716:	81a3      	strh	r3, [r4, #12]
 800d718:	9b01      	ldr	r3, [sp, #4]
 800d71a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d71e:	b15b      	cbz	r3, 800d738 <__smakebuf_r+0x70>
 800d720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d724:	4630      	mov	r0, r6
 800d726:	f000 f81d 	bl	800d764 <_isatty_r>
 800d72a:	b128      	cbz	r0, 800d738 <__smakebuf_r+0x70>
 800d72c:	89a3      	ldrh	r3, [r4, #12]
 800d72e:	f023 0303 	bic.w	r3, r3, #3
 800d732:	f043 0301 	orr.w	r3, r3, #1
 800d736:	81a3      	strh	r3, [r4, #12]
 800d738:	89a3      	ldrh	r3, [r4, #12]
 800d73a:	431d      	orrs	r5, r3
 800d73c:	81a5      	strh	r5, [r4, #12]
 800d73e:	e7cf      	b.n	800d6e0 <__smakebuf_r+0x18>

0800d740 <_fstat_r>:
 800d740:	b538      	push	{r3, r4, r5, lr}
 800d742:	4d07      	ldr	r5, [pc, #28]	@ (800d760 <_fstat_r+0x20>)
 800d744:	2300      	movs	r3, #0
 800d746:	4604      	mov	r4, r0
 800d748:	4608      	mov	r0, r1
 800d74a:	4611      	mov	r1, r2
 800d74c:	602b      	str	r3, [r5, #0]
 800d74e:	f7f5 f83f 	bl	80027d0 <_fstat>
 800d752:	1c43      	adds	r3, r0, #1
 800d754:	d102      	bne.n	800d75c <_fstat_r+0x1c>
 800d756:	682b      	ldr	r3, [r5, #0]
 800d758:	b103      	cbz	r3, 800d75c <_fstat_r+0x1c>
 800d75a:	6023      	str	r3, [r4, #0]
 800d75c:	bd38      	pop	{r3, r4, r5, pc}
 800d75e:	bf00      	nop
 800d760:	200021e4 	.word	0x200021e4

0800d764 <_isatty_r>:
 800d764:	b538      	push	{r3, r4, r5, lr}
 800d766:	4d06      	ldr	r5, [pc, #24]	@ (800d780 <_isatty_r+0x1c>)
 800d768:	2300      	movs	r3, #0
 800d76a:	4604      	mov	r4, r0
 800d76c:	4608      	mov	r0, r1
 800d76e:	602b      	str	r3, [r5, #0]
 800d770:	f7f5 f83e 	bl	80027f0 <_isatty>
 800d774:	1c43      	adds	r3, r0, #1
 800d776:	d102      	bne.n	800d77e <_isatty_r+0x1a>
 800d778:	682b      	ldr	r3, [r5, #0]
 800d77a:	b103      	cbz	r3, 800d77e <_isatty_r+0x1a>
 800d77c:	6023      	str	r3, [r4, #0]
 800d77e:	bd38      	pop	{r3, r4, r5, pc}
 800d780:	200021e4 	.word	0x200021e4

0800d784 <sqrt>:
 800d784:	b538      	push	{r3, r4, r5, lr}
 800d786:	ed2d 8b02 	vpush	{d8}
 800d78a:	ec55 4b10 	vmov	r4, r5, d0
 800d78e:	f000 f8cf 	bl	800d930 <__ieee754_sqrt>
 800d792:	4622      	mov	r2, r4
 800d794:	462b      	mov	r3, r5
 800d796:	4620      	mov	r0, r4
 800d798:	4629      	mov	r1, r5
 800d79a:	eeb0 8a40 	vmov.f32	s16, s0
 800d79e:	eef0 8a60 	vmov.f32	s17, s1
 800d7a2:	f7f3 f9c3 	bl	8000b2c <__aeabi_dcmpun>
 800d7a6:	b990      	cbnz	r0, 800d7ce <sqrt+0x4a>
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	4629      	mov	r1, r5
 800d7b0:	f7f3 f994 	bl	8000adc <__aeabi_dcmplt>
 800d7b4:	b158      	cbz	r0, 800d7ce <sqrt+0x4a>
 800d7b6:	f7fd ff6d 	bl	800b694 <__errno>
 800d7ba:	2321      	movs	r3, #33	@ 0x21
 800d7bc:	6003      	str	r3, [r0, #0]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	4610      	mov	r0, r2
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	f7f3 f841 	bl	800084c <__aeabi_ddiv>
 800d7ca:	ec41 0b18 	vmov	d8, r0, r1
 800d7ce:	eeb0 0a48 	vmov.f32	s0, s16
 800d7d2:	eef0 0a68 	vmov.f32	s1, s17
 800d7d6:	ecbd 8b02 	vpop	{d8}
 800d7da:	bd38      	pop	{r3, r4, r5, pc}
 800d7dc:	0000      	movs	r0, r0
	...

0800d7e0 <cos>:
 800d7e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7e2:	ec53 2b10 	vmov	r2, r3, d0
 800d7e6:	4826      	ldr	r0, [pc, #152]	@ (800d880 <cos+0xa0>)
 800d7e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d7ec:	4281      	cmp	r1, r0
 800d7ee:	d806      	bhi.n	800d7fe <cos+0x1e>
 800d7f0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d878 <cos+0x98>
 800d7f4:	b005      	add	sp, #20
 800d7f6:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7fa:	f000 b975 	b.w	800dae8 <__kernel_cos>
 800d7fe:	4821      	ldr	r0, [pc, #132]	@ (800d884 <cos+0xa4>)
 800d800:	4281      	cmp	r1, r0
 800d802:	d908      	bls.n	800d816 <cos+0x36>
 800d804:	4610      	mov	r0, r2
 800d806:	4619      	mov	r1, r3
 800d808:	f7f2 fd3e 	bl	8000288 <__aeabi_dsub>
 800d80c:	ec41 0b10 	vmov	d0, r0, r1
 800d810:	b005      	add	sp, #20
 800d812:	f85d fb04 	ldr.w	pc, [sp], #4
 800d816:	4668      	mov	r0, sp
 800d818:	f000 faea 	bl	800ddf0 <__ieee754_rem_pio2>
 800d81c:	f000 0003 	and.w	r0, r0, #3
 800d820:	2801      	cmp	r0, #1
 800d822:	d00b      	beq.n	800d83c <cos+0x5c>
 800d824:	2802      	cmp	r0, #2
 800d826:	d015      	beq.n	800d854 <cos+0x74>
 800d828:	b9d8      	cbnz	r0, 800d862 <cos+0x82>
 800d82a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d82e:	ed9d 0b00 	vldr	d0, [sp]
 800d832:	f000 f959 	bl	800dae8 <__kernel_cos>
 800d836:	ec51 0b10 	vmov	r0, r1, d0
 800d83a:	e7e7      	b.n	800d80c <cos+0x2c>
 800d83c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d840:	ed9d 0b00 	vldr	d0, [sp]
 800d844:	f000 fa18 	bl	800dc78 <__kernel_sin>
 800d848:	ec53 2b10 	vmov	r2, r3, d0
 800d84c:	4610      	mov	r0, r2
 800d84e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d852:	e7db      	b.n	800d80c <cos+0x2c>
 800d854:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d858:	ed9d 0b00 	vldr	d0, [sp]
 800d85c:	f000 f944 	bl	800dae8 <__kernel_cos>
 800d860:	e7f2      	b.n	800d848 <cos+0x68>
 800d862:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d866:	ed9d 0b00 	vldr	d0, [sp]
 800d86a:	2001      	movs	r0, #1
 800d86c:	f000 fa04 	bl	800dc78 <__kernel_sin>
 800d870:	e7e1      	b.n	800d836 <cos+0x56>
 800d872:	bf00      	nop
 800d874:	f3af 8000 	nop.w
	...
 800d880:	3fe921fb 	.word	0x3fe921fb
 800d884:	7fefffff 	.word	0x7fefffff

0800d888 <sin>:
 800d888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d88a:	ec53 2b10 	vmov	r2, r3, d0
 800d88e:	4826      	ldr	r0, [pc, #152]	@ (800d928 <sin+0xa0>)
 800d890:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d894:	4281      	cmp	r1, r0
 800d896:	d807      	bhi.n	800d8a8 <sin+0x20>
 800d898:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d920 <sin+0x98>
 800d89c:	2000      	movs	r0, #0
 800d89e:	b005      	add	sp, #20
 800d8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8a4:	f000 b9e8 	b.w	800dc78 <__kernel_sin>
 800d8a8:	4820      	ldr	r0, [pc, #128]	@ (800d92c <sin+0xa4>)
 800d8aa:	4281      	cmp	r1, r0
 800d8ac:	d908      	bls.n	800d8c0 <sin+0x38>
 800d8ae:	4610      	mov	r0, r2
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	f7f2 fce9 	bl	8000288 <__aeabi_dsub>
 800d8b6:	ec41 0b10 	vmov	d0, r0, r1
 800d8ba:	b005      	add	sp, #20
 800d8bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8c0:	4668      	mov	r0, sp
 800d8c2:	f000 fa95 	bl	800ddf0 <__ieee754_rem_pio2>
 800d8c6:	f000 0003 	and.w	r0, r0, #3
 800d8ca:	2801      	cmp	r0, #1
 800d8cc:	d00c      	beq.n	800d8e8 <sin+0x60>
 800d8ce:	2802      	cmp	r0, #2
 800d8d0:	d011      	beq.n	800d8f6 <sin+0x6e>
 800d8d2:	b9e8      	cbnz	r0, 800d910 <sin+0x88>
 800d8d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8d8:	ed9d 0b00 	vldr	d0, [sp]
 800d8dc:	2001      	movs	r0, #1
 800d8de:	f000 f9cb 	bl	800dc78 <__kernel_sin>
 800d8e2:	ec51 0b10 	vmov	r0, r1, d0
 800d8e6:	e7e6      	b.n	800d8b6 <sin+0x2e>
 800d8e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8ec:	ed9d 0b00 	vldr	d0, [sp]
 800d8f0:	f000 f8fa 	bl	800dae8 <__kernel_cos>
 800d8f4:	e7f5      	b.n	800d8e2 <sin+0x5a>
 800d8f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8fa:	ed9d 0b00 	vldr	d0, [sp]
 800d8fe:	2001      	movs	r0, #1
 800d900:	f000 f9ba 	bl	800dc78 <__kernel_sin>
 800d904:	ec53 2b10 	vmov	r2, r3, d0
 800d908:	4610      	mov	r0, r2
 800d90a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d90e:	e7d2      	b.n	800d8b6 <sin+0x2e>
 800d910:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d914:	ed9d 0b00 	vldr	d0, [sp]
 800d918:	f000 f8e6 	bl	800dae8 <__kernel_cos>
 800d91c:	e7f2      	b.n	800d904 <sin+0x7c>
 800d91e:	bf00      	nop
	...
 800d928:	3fe921fb 	.word	0x3fe921fb
 800d92c:	7fefffff 	.word	0x7fefffff

0800d930 <__ieee754_sqrt>:
 800d930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d934:	4a68      	ldr	r2, [pc, #416]	@ (800dad8 <__ieee754_sqrt+0x1a8>)
 800d936:	ec55 4b10 	vmov	r4, r5, d0
 800d93a:	43aa      	bics	r2, r5
 800d93c:	462b      	mov	r3, r5
 800d93e:	4621      	mov	r1, r4
 800d940:	d110      	bne.n	800d964 <__ieee754_sqrt+0x34>
 800d942:	4622      	mov	r2, r4
 800d944:	4620      	mov	r0, r4
 800d946:	4629      	mov	r1, r5
 800d948:	f7f2 fe56 	bl	80005f8 <__aeabi_dmul>
 800d94c:	4602      	mov	r2, r0
 800d94e:	460b      	mov	r3, r1
 800d950:	4620      	mov	r0, r4
 800d952:	4629      	mov	r1, r5
 800d954:	f7f2 fc9a 	bl	800028c <__adddf3>
 800d958:	4604      	mov	r4, r0
 800d95a:	460d      	mov	r5, r1
 800d95c:	ec45 4b10 	vmov	d0, r4, r5
 800d960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d964:	2d00      	cmp	r5, #0
 800d966:	dc0e      	bgt.n	800d986 <__ieee754_sqrt+0x56>
 800d968:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d96c:	4322      	orrs	r2, r4
 800d96e:	d0f5      	beq.n	800d95c <__ieee754_sqrt+0x2c>
 800d970:	b19d      	cbz	r5, 800d99a <__ieee754_sqrt+0x6a>
 800d972:	4622      	mov	r2, r4
 800d974:	4620      	mov	r0, r4
 800d976:	4629      	mov	r1, r5
 800d978:	f7f2 fc86 	bl	8000288 <__aeabi_dsub>
 800d97c:	4602      	mov	r2, r0
 800d97e:	460b      	mov	r3, r1
 800d980:	f7f2 ff64 	bl	800084c <__aeabi_ddiv>
 800d984:	e7e8      	b.n	800d958 <__ieee754_sqrt+0x28>
 800d986:	152a      	asrs	r2, r5, #20
 800d988:	d115      	bne.n	800d9b6 <__ieee754_sqrt+0x86>
 800d98a:	2000      	movs	r0, #0
 800d98c:	e009      	b.n	800d9a2 <__ieee754_sqrt+0x72>
 800d98e:	0acb      	lsrs	r3, r1, #11
 800d990:	3a15      	subs	r2, #21
 800d992:	0549      	lsls	r1, r1, #21
 800d994:	2b00      	cmp	r3, #0
 800d996:	d0fa      	beq.n	800d98e <__ieee754_sqrt+0x5e>
 800d998:	e7f7      	b.n	800d98a <__ieee754_sqrt+0x5a>
 800d99a:	462a      	mov	r2, r5
 800d99c:	e7fa      	b.n	800d994 <__ieee754_sqrt+0x64>
 800d99e:	005b      	lsls	r3, r3, #1
 800d9a0:	3001      	adds	r0, #1
 800d9a2:	02dc      	lsls	r4, r3, #11
 800d9a4:	d5fb      	bpl.n	800d99e <__ieee754_sqrt+0x6e>
 800d9a6:	1e44      	subs	r4, r0, #1
 800d9a8:	1b12      	subs	r2, r2, r4
 800d9aa:	f1c0 0420 	rsb	r4, r0, #32
 800d9ae:	fa21 f404 	lsr.w	r4, r1, r4
 800d9b2:	4323      	orrs	r3, r4
 800d9b4:	4081      	lsls	r1, r0
 800d9b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9ba:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d9be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d9c2:	07d2      	lsls	r2, r2, #31
 800d9c4:	bf5c      	itt	pl
 800d9c6:	005b      	lslpl	r3, r3, #1
 800d9c8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d9cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d9d0:	bf58      	it	pl
 800d9d2:	0049      	lslpl	r1, r1, #1
 800d9d4:	2600      	movs	r6, #0
 800d9d6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d9da:	106d      	asrs	r5, r5, #1
 800d9dc:	0049      	lsls	r1, r1, #1
 800d9de:	2016      	movs	r0, #22
 800d9e0:	4632      	mov	r2, r6
 800d9e2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d9e6:	1917      	adds	r7, r2, r4
 800d9e8:	429f      	cmp	r7, r3
 800d9ea:	bfde      	ittt	le
 800d9ec:	193a      	addle	r2, r7, r4
 800d9ee:	1bdb      	suble	r3, r3, r7
 800d9f0:	1936      	addle	r6, r6, r4
 800d9f2:	0fcf      	lsrs	r7, r1, #31
 800d9f4:	3801      	subs	r0, #1
 800d9f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d9fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d9fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800da02:	d1f0      	bne.n	800d9e6 <__ieee754_sqrt+0xb6>
 800da04:	4604      	mov	r4, r0
 800da06:	2720      	movs	r7, #32
 800da08:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800da0c:	429a      	cmp	r2, r3
 800da0e:	eb00 0e0c 	add.w	lr, r0, ip
 800da12:	db02      	blt.n	800da1a <__ieee754_sqrt+0xea>
 800da14:	d113      	bne.n	800da3e <__ieee754_sqrt+0x10e>
 800da16:	458e      	cmp	lr, r1
 800da18:	d811      	bhi.n	800da3e <__ieee754_sqrt+0x10e>
 800da1a:	f1be 0f00 	cmp.w	lr, #0
 800da1e:	eb0e 000c 	add.w	r0, lr, ip
 800da22:	da42      	bge.n	800daaa <__ieee754_sqrt+0x17a>
 800da24:	2800      	cmp	r0, #0
 800da26:	db40      	blt.n	800daaa <__ieee754_sqrt+0x17a>
 800da28:	f102 0801 	add.w	r8, r2, #1
 800da2c:	1a9b      	subs	r3, r3, r2
 800da2e:	458e      	cmp	lr, r1
 800da30:	bf88      	it	hi
 800da32:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800da36:	eba1 010e 	sub.w	r1, r1, lr
 800da3a:	4464      	add	r4, ip
 800da3c:	4642      	mov	r2, r8
 800da3e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800da42:	3f01      	subs	r7, #1
 800da44:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800da48:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800da4c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800da50:	d1dc      	bne.n	800da0c <__ieee754_sqrt+0xdc>
 800da52:	4319      	orrs	r1, r3
 800da54:	d01b      	beq.n	800da8e <__ieee754_sqrt+0x15e>
 800da56:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800dadc <__ieee754_sqrt+0x1ac>
 800da5a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800dae0 <__ieee754_sqrt+0x1b0>
 800da5e:	e9da 0100 	ldrd	r0, r1, [sl]
 800da62:	e9db 2300 	ldrd	r2, r3, [fp]
 800da66:	f7f2 fc0f 	bl	8000288 <__aeabi_dsub>
 800da6a:	e9da 8900 	ldrd	r8, r9, [sl]
 800da6e:	4602      	mov	r2, r0
 800da70:	460b      	mov	r3, r1
 800da72:	4640      	mov	r0, r8
 800da74:	4649      	mov	r1, r9
 800da76:	f7f3 f83b 	bl	8000af0 <__aeabi_dcmple>
 800da7a:	b140      	cbz	r0, 800da8e <__ieee754_sqrt+0x15e>
 800da7c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800da80:	e9da 0100 	ldrd	r0, r1, [sl]
 800da84:	e9db 2300 	ldrd	r2, r3, [fp]
 800da88:	d111      	bne.n	800daae <__ieee754_sqrt+0x17e>
 800da8a:	3601      	adds	r6, #1
 800da8c:	463c      	mov	r4, r7
 800da8e:	1072      	asrs	r2, r6, #1
 800da90:	0863      	lsrs	r3, r4, #1
 800da92:	07f1      	lsls	r1, r6, #31
 800da94:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800da98:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800da9c:	bf48      	it	mi
 800da9e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800daa2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800daa6:	4618      	mov	r0, r3
 800daa8:	e756      	b.n	800d958 <__ieee754_sqrt+0x28>
 800daaa:	4690      	mov	r8, r2
 800daac:	e7be      	b.n	800da2c <__ieee754_sqrt+0xfc>
 800daae:	f7f2 fbed 	bl	800028c <__adddf3>
 800dab2:	e9da 8900 	ldrd	r8, r9, [sl]
 800dab6:	4602      	mov	r2, r0
 800dab8:	460b      	mov	r3, r1
 800daba:	4640      	mov	r0, r8
 800dabc:	4649      	mov	r1, r9
 800dabe:	f7f3 f80d 	bl	8000adc <__aeabi_dcmplt>
 800dac2:	b120      	cbz	r0, 800dace <__ieee754_sqrt+0x19e>
 800dac4:	1ca0      	adds	r0, r4, #2
 800dac6:	bf08      	it	eq
 800dac8:	3601      	addeq	r6, #1
 800daca:	3402      	adds	r4, #2
 800dacc:	e7df      	b.n	800da8e <__ieee754_sqrt+0x15e>
 800dace:	1c63      	adds	r3, r4, #1
 800dad0:	f023 0401 	bic.w	r4, r3, #1
 800dad4:	e7db      	b.n	800da8e <__ieee754_sqrt+0x15e>
 800dad6:	bf00      	nop
 800dad8:	7ff00000 	.word	0x7ff00000
 800dadc:	20000308 	.word	0x20000308
 800dae0:	20000300 	.word	0x20000300
 800dae4:	00000000 	.word	0x00000000

0800dae8 <__kernel_cos>:
 800dae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daec:	ec57 6b10 	vmov	r6, r7, d0
 800daf0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800daf4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800daf8:	ed8d 1b00 	vstr	d1, [sp]
 800dafc:	d206      	bcs.n	800db0c <__kernel_cos+0x24>
 800dafe:	4630      	mov	r0, r6
 800db00:	4639      	mov	r1, r7
 800db02:	f7f3 f829 	bl	8000b58 <__aeabi_d2iz>
 800db06:	2800      	cmp	r0, #0
 800db08:	f000 8088 	beq.w	800dc1c <__kernel_cos+0x134>
 800db0c:	4632      	mov	r2, r6
 800db0e:	463b      	mov	r3, r7
 800db10:	4630      	mov	r0, r6
 800db12:	4639      	mov	r1, r7
 800db14:	f7f2 fd70 	bl	80005f8 <__aeabi_dmul>
 800db18:	4b51      	ldr	r3, [pc, #324]	@ (800dc60 <__kernel_cos+0x178>)
 800db1a:	2200      	movs	r2, #0
 800db1c:	4604      	mov	r4, r0
 800db1e:	460d      	mov	r5, r1
 800db20:	f7f2 fd6a 	bl	80005f8 <__aeabi_dmul>
 800db24:	a340      	add	r3, pc, #256	@ (adr r3, 800dc28 <__kernel_cos+0x140>)
 800db26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2a:	4682      	mov	sl, r0
 800db2c:	468b      	mov	fp, r1
 800db2e:	4620      	mov	r0, r4
 800db30:	4629      	mov	r1, r5
 800db32:	f7f2 fd61 	bl	80005f8 <__aeabi_dmul>
 800db36:	a33e      	add	r3, pc, #248	@ (adr r3, 800dc30 <__kernel_cos+0x148>)
 800db38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3c:	f7f2 fba6 	bl	800028c <__adddf3>
 800db40:	4622      	mov	r2, r4
 800db42:	462b      	mov	r3, r5
 800db44:	f7f2 fd58 	bl	80005f8 <__aeabi_dmul>
 800db48:	a33b      	add	r3, pc, #236	@ (adr r3, 800dc38 <__kernel_cos+0x150>)
 800db4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4e:	f7f2 fb9b 	bl	8000288 <__aeabi_dsub>
 800db52:	4622      	mov	r2, r4
 800db54:	462b      	mov	r3, r5
 800db56:	f7f2 fd4f 	bl	80005f8 <__aeabi_dmul>
 800db5a:	a339      	add	r3, pc, #228	@ (adr r3, 800dc40 <__kernel_cos+0x158>)
 800db5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db60:	f7f2 fb94 	bl	800028c <__adddf3>
 800db64:	4622      	mov	r2, r4
 800db66:	462b      	mov	r3, r5
 800db68:	f7f2 fd46 	bl	80005f8 <__aeabi_dmul>
 800db6c:	a336      	add	r3, pc, #216	@ (adr r3, 800dc48 <__kernel_cos+0x160>)
 800db6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db72:	f7f2 fb89 	bl	8000288 <__aeabi_dsub>
 800db76:	4622      	mov	r2, r4
 800db78:	462b      	mov	r3, r5
 800db7a:	f7f2 fd3d 	bl	80005f8 <__aeabi_dmul>
 800db7e:	a334      	add	r3, pc, #208	@ (adr r3, 800dc50 <__kernel_cos+0x168>)
 800db80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db84:	f7f2 fb82 	bl	800028c <__adddf3>
 800db88:	4622      	mov	r2, r4
 800db8a:	462b      	mov	r3, r5
 800db8c:	f7f2 fd34 	bl	80005f8 <__aeabi_dmul>
 800db90:	4622      	mov	r2, r4
 800db92:	462b      	mov	r3, r5
 800db94:	f7f2 fd30 	bl	80005f8 <__aeabi_dmul>
 800db98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db9c:	4604      	mov	r4, r0
 800db9e:	460d      	mov	r5, r1
 800dba0:	4630      	mov	r0, r6
 800dba2:	4639      	mov	r1, r7
 800dba4:	f7f2 fd28 	bl	80005f8 <__aeabi_dmul>
 800dba8:	460b      	mov	r3, r1
 800dbaa:	4602      	mov	r2, r0
 800dbac:	4629      	mov	r1, r5
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f7f2 fb6a 	bl	8000288 <__aeabi_dsub>
 800dbb4:	4b2b      	ldr	r3, [pc, #172]	@ (800dc64 <__kernel_cos+0x17c>)
 800dbb6:	4598      	cmp	r8, r3
 800dbb8:	4606      	mov	r6, r0
 800dbba:	460f      	mov	r7, r1
 800dbbc:	d810      	bhi.n	800dbe0 <__kernel_cos+0xf8>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	4650      	mov	r0, sl
 800dbc4:	4659      	mov	r1, fp
 800dbc6:	f7f2 fb5f 	bl	8000288 <__aeabi_dsub>
 800dbca:	460b      	mov	r3, r1
 800dbcc:	4926      	ldr	r1, [pc, #152]	@ (800dc68 <__kernel_cos+0x180>)
 800dbce:	4602      	mov	r2, r0
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	f7f2 fb59 	bl	8000288 <__aeabi_dsub>
 800dbd6:	ec41 0b10 	vmov	d0, r0, r1
 800dbda:	b003      	add	sp, #12
 800dbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe0:	4b22      	ldr	r3, [pc, #136]	@ (800dc6c <__kernel_cos+0x184>)
 800dbe2:	4921      	ldr	r1, [pc, #132]	@ (800dc68 <__kernel_cos+0x180>)
 800dbe4:	4598      	cmp	r8, r3
 800dbe6:	bf8c      	ite	hi
 800dbe8:	4d21      	ldrhi	r5, [pc, #132]	@ (800dc70 <__kernel_cos+0x188>)
 800dbea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800dbee:	2400      	movs	r4, #0
 800dbf0:	4622      	mov	r2, r4
 800dbf2:	462b      	mov	r3, r5
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	f7f2 fb47 	bl	8000288 <__aeabi_dsub>
 800dbfa:	4622      	mov	r2, r4
 800dbfc:	4680      	mov	r8, r0
 800dbfe:	4689      	mov	r9, r1
 800dc00:	462b      	mov	r3, r5
 800dc02:	4650      	mov	r0, sl
 800dc04:	4659      	mov	r1, fp
 800dc06:	f7f2 fb3f 	bl	8000288 <__aeabi_dsub>
 800dc0a:	4632      	mov	r2, r6
 800dc0c:	463b      	mov	r3, r7
 800dc0e:	f7f2 fb3b 	bl	8000288 <__aeabi_dsub>
 800dc12:	4602      	mov	r2, r0
 800dc14:	460b      	mov	r3, r1
 800dc16:	4640      	mov	r0, r8
 800dc18:	4649      	mov	r1, r9
 800dc1a:	e7da      	b.n	800dbd2 <__kernel_cos+0xea>
 800dc1c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800dc58 <__kernel_cos+0x170>
 800dc20:	e7db      	b.n	800dbda <__kernel_cos+0xf2>
 800dc22:	bf00      	nop
 800dc24:	f3af 8000 	nop.w
 800dc28:	be8838d4 	.word	0xbe8838d4
 800dc2c:	bda8fae9 	.word	0xbda8fae9
 800dc30:	bdb4b1c4 	.word	0xbdb4b1c4
 800dc34:	3e21ee9e 	.word	0x3e21ee9e
 800dc38:	809c52ad 	.word	0x809c52ad
 800dc3c:	3e927e4f 	.word	0x3e927e4f
 800dc40:	19cb1590 	.word	0x19cb1590
 800dc44:	3efa01a0 	.word	0x3efa01a0
 800dc48:	16c15177 	.word	0x16c15177
 800dc4c:	3f56c16c 	.word	0x3f56c16c
 800dc50:	5555554c 	.word	0x5555554c
 800dc54:	3fa55555 	.word	0x3fa55555
 800dc58:	00000000 	.word	0x00000000
 800dc5c:	3ff00000 	.word	0x3ff00000
 800dc60:	3fe00000 	.word	0x3fe00000
 800dc64:	3fd33332 	.word	0x3fd33332
 800dc68:	3ff00000 	.word	0x3ff00000
 800dc6c:	3fe90000 	.word	0x3fe90000
 800dc70:	3fd20000 	.word	0x3fd20000
 800dc74:	00000000 	.word	0x00000000

0800dc78 <__kernel_sin>:
 800dc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7c:	ec55 4b10 	vmov	r4, r5, d0
 800dc80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800dc84:	b085      	sub	sp, #20
 800dc86:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800dc8a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800dc8e:	4680      	mov	r8, r0
 800dc90:	d205      	bcs.n	800dc9e <__kernel_sin+0x26>
 800dc92:	4620      	mov	r0, r4
 800dc94:	4629      	mov	r1, r5
 800dc96:	f7f2 ff5f 	bl	8000b58 <__aeabi_d2iz>
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d052      	beq.n	800dd44 <__kernel_sin+0xcc>
 800dc9e:	4622      	mov	r2, r4
 800dca0:	462b      	mov	r3, r5
 800dca2:	4620      	mov	r0, r4
 800dca4:	4629      	mov	r1, r5
 800dca6:	f7f2 fca7 	bl	80005f8 <__aeabi_dmul>
 800dcaa:	4682      	mov	sl, r0
 800dcac:	468b      	mov	fp, r1
 800dcae:	4602      	mov	r2, r0
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	f7f2 fc9f 	bl	80005f8 <__aeabi_dmul>
 800dcba:	a342      	add	r3, pc, #264	@ (adr r3, 800ddc4 <__kernel_sin+0x14c>)
 800dcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc0:	e9cd 0100 	strd	r0, r1, [sp]
 800dcc4:	4650      	mov	r0, sl
 800dcc6:	4659      	mov	r1, fp
 800dcc8:	f7f2 fc96 	bl	80005f8 <__aeabi_dmul>
 800dccc:	a33f      	add	r3, pc, #252	@ (adr r3, 800ddcc <__kernel_sin+0x154>)
 800dcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd2:	f7f2 fad9 	bl	8000288 <__aeabi_dsub>
 800dcd6:	4652      	mov	r2, sl
 800dcd8:	465b      	mov	r3, fp
 800dcda:	f7f2 fc8d 	bl	80005f8 <__aeabi_dmul>
 800dcde:	a33d      	add	r3, pc, #244	@ (adr r3, 800ddd4 <__kernel_sin+0x15c>)
 800dce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce4:	f7f2 fad2 	bl	800028c <__adddf3>
 800dce8:	4652      	mov	r2, sl
 800dcea:	465b      	mov	r3, fp
 800dcec:	f7f2 fc84 	bl	80005f8 <__aeabi_dmul>
 800dcf0:	a33a      	add	r3, pc, #232	@ (adr r3, 800dddc <__kernel_sin+0x164>)
 800dcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf6:	f7f2 fac7 	bl	8000288 <__aeabi_dsub>
 800dcfa:	4652      	mov	r2, sl
 800dcfc:	465b      	mov	r3, fp
 800dcfe:	f7f2 fc7b 	bl	80005f8 <__aeabi_dmul>
 800dd02:	a338      	add	r3, pc, #224	@ (adr r3, 800dde4 <__kernel_sin+0x16c>)
 800dd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd08:	f7f2 fac0 	bl	800028c <__adddf3>
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	460f      	mov	r7, r1
 800dd10:	f1b8 0f00 	cmp.w	r8, #0
 800dd14:	d11b      	bne.n	800dd4e <__kernel_sin+0xd6>
 800dd16:	4602      	mov	r2, r0
 800dd18:	460b      	mov	r3, r1
 800dd1a:	4650      	mov	r0, sl
 800dd1c:	4659      	mov	r1, fp
 800dd1e:	f7f2 fc6b 	bl	80005f8 <__aeabi_dmul>
 800dd22:	a325      	add	r3, pc, #148	@ (adr r3, 800ddb8 <__kernel_sin+0x140>)
 800dd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd28:	f7f2 faae 	bl	8000288 <__aeabi_dsub>
 800dd2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd30:	f7f2 fc62 	bl	80005f8 <__aeabi_dmul>
 800dd34:	4602      	mov	r2, r0
 800dd36:	460b      	mov	r3, r1
 800dd38:	4620      	mov	r0, r4
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	f7f2 faa6 	bl	800028c <__adddf3>
 800dd40:	4604      	mov	r4, r0
 800dd42:	460d      	mov	r5, r1
 800dd44:	ec45 4b10 	vmov	d0, r4, r5
 800dd48:	b005      	add	sp, #20
 800dd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd52:	4b1b      	ldr	r3, [pc, #108]	@ (800ddc0 <__kernel_sin+0x148>)
 800dd54:	2200      	movs	r2, #0
 800dd56:	f7f2 fc4f 	bl	80005f8 <__aeabi_dmul>
 800dd5a:	4632      	mov	r2, r6
 800dd5c:	4680      	mov	r8, r0
 800dd5e:	4689      	mov	r9, r1
 800dd60:	463b      	mov	r3, r7
 800dd62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd66:	f7f2 fc47 	bl	80005f8 <__aeabi_dmul>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	4640      	mov	r0, r8
 800dd70:	4649      	mov	r1, r9
 800dd72:	f7f2 fa89 	bl	8000288 <__aeabi_dsub>
 800dd76:	4652      	mov	r2, sl
 800dd78:	465b      	mov	r3, fp
 800dd7a:	f7f2 fc3d 	bl	80005f8 <__aeabi_dmul>
 800dd7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd82:	f7f2 fa81 	bl	8000288 <__aeabi_dsub>
 800dd86:	a30c      	add	r3, pc, #48	@ (adr r3, 800ddb8 <__kernel_sin+0x140>)
 800dd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8c:	4606      	mov	r6, r0
 800dd8e:	460f      	mov	r7, r1
 800dd90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd94:	f7f2 fc30 	bl	80005f8 <__aeabi_dmul>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	4630      	mov	r0, r6
 800dd9e:	4639      	mov	r1, r7
 800dda0:	f7f2 fa74 	bl	800028c <__adddf3>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	4620      	mov	r0, r4
 800ddaa:	4629      	mov	r1, r5
 800ddac:	f7f2 fa6c 	bl	8000288 <__aeabi_dsub>
 800ddb0:	e7c6      	b.n	800dd40 <__kernel_sin+0xc8>
 800ddb2:	bf00      	nop
 800ddb4:	f3af 8000 	nop.w
 800ddb8:	55555549 	.word	0x55555549
 800ddbc:	3fc55555 	.word	0x3fc55555
 800ddc0:	3fe00000 	.word	0x3fe00000
 800ddc4:	5acfd57c 	.word	0x5acfd57c
 800ddc8:	3de5d93a 	.word	0x3de5d93a
 800ddcc:	8a2b9ceb 	.word	0x8a2b9ceb
 800ddd0:	3e5ae5e6 	.word	0x3e5ae5e6
 800ddd4:	57b1fe7d 	.word	0x57b1fe7d
 800ddd8:	3ec71de3 	.word	0x3ec71de3
 800dddc:	19c161d5 	.word	0x19c161d5
 800dde0:	3f2a01a0 	.word	0x3f2a01a0
 800dde4:	1110f8a6 	.word	0x1110f8a6
 800dde8:	3f811111 	.word	0x3f811111
 800ddec:	00000000 	.word	0x00000000

0800ddf0 <__ieee754_rem_pio2>:
 800ddf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf4:	ec57 6b10 	vmov	r6, r7, d0
 800ddf8:	4bc5      	ldr	r3, [pc, #788]	@ (800e110 <__ieee754_rem_pio2+0x320>)
 800ddfa:	b08d      	sub	sp, #52	@ 0x34
 800ddfc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800de00:	4598      	cmp	r8, r3
 800de02:	4604      	mov	r4, r0
 800de04:	9704      	str	r7, [sp, #16]
 800de06:	d807      	bhi.n	800de18 <__ieee754_rem_pio2+0x28>
 800de08:	2200      	movs	r2, #0
 800de0a:	2300      	movs	r3, #0
 800de0c:	ed80 0b00 	vstr	d0, [r0]
 800de10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800de14:	2500      	movs	r5, #0
 800de16:	e028      	b.n	800de6a <__ieee754_rem_pio2+0x7a>
 800de18:	4bbe      	ldr	r3, [pc, #760]	@ (800e114 <__ieee754_rem_pio2+0x324>)
 800de1a:	4598      	cmp	r8, r3
 800de1c:	d878      	bhi.n	800df10 <__ieee754_rem_pio2+0x120>
 800de1e:	9b04      	ldr	r3, [sp, #16]
 800de20:	4dbd      	ldr	r5, [pc, #756]	@ (800e118 <__ieee754_rem_pio2+0x328>)
 800de22:	2b00      	cmp	r3, #0
 800de24:	4630      	mov	r0, r6
 800de26:	a3ac      	add	r3, pc, #688	@ (adr r3, 800e0d8 <__ieee754_rem_pio2+0x2e8>)
 800de28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2c:	4639      	mov	r1, r7
 800de2e:	dd38      	ble.n	800dea2 <__ieee754_rem_pio2+0xb2>
 800de30:	f7f2 fa2a 	bl	8000288 <__aeabi_dsub>
 800de34:	45a8      	cmp	r8, r5
 800de36:	4606      	mov	r6, r0
 800de38:	460f      	mov	r7, r1
 800de3a:	d01a      	beq.n	800de72 <__ieee754_rem_pio2+0x82>
 800de3c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800e0e0 <__ieee754_rem_pio2+0x2f0>)
 800de3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de42:	f7f2 fa21 	bl	8000288 <__aeabi_dsub>
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	4680      	mov	r8, r0
 800de4c:	4689      	mov	r9, r1
 800de4e:	4630      	mov	r0, r6
 800de50:	4639      	mov	r1, r7
 800de52:	f7f2 fa19 	bl	8000288 <__aeabi_dsub>
 800de56:	a3a2      	add	r3, pc, #648	@ (adr r3, 800e0e0 <__ieee754_rem_pio2+0x2f0>)
 800de58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5c:	f7f2 fa14 	bl	8000288 <__aeabi_dsub>
 800de60:	e9c4 8900 	strd	r8, r9, [r4]
 800de64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800de68:	2501      	movs	r5, #1
 800de6a:	4628      	mov	r0, r5
 800de6c:	b00d      	add	sp, #52	@ 0x34
 800de6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de72:	a39d      	add	r3, pc, #628	@ (adr r3, 800e0e8 <__ieee754_rem_pio2+0x2f8>)
 800de74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de78:	f7f2 fa06 	bl	8000288 <__aeabi_dsub>
 800de7c:	a39c      	add	r3, pc, #624	@ (adr r3, 800e0f0 <__ieee754_rem_pio2+0x300>)
 800de7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de82:	4606      	mov	r6, r0
 800de84:	460f      	mov	r7, r1
 800de86:	f7f2 f9ff 	bl	8000288 <__aeabi_dsub>
 800de8a:	4602      	mov	r2, r0
 800de8c:	460b      	mov	r3, r1
 800de8e:	4680      	mov	r8, r0
 800de90:	4689      	mov	r9, r1
 800de92:	4630      	mov	r0, r6
 800de94:	4639      	mov	r1, r7
 800de96:	f7f2 f9f7 	bl	8000288 <__aeabi_dsub>
 800de9a:	a395      	add	r3, pc, #596	@ (adr r3, 800e0f0 <__ieee754_rem_pio2+0x300>)
 800de9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea0:	e7dc      	b.n	800de5c <__ieee754_rem_pio2+0x6c>
 800dea2:	f7f2 f9f3 	bl	800028c <__adddf3>
 800dea6:	45a8      	cmp	r8, r5
 800dea8:	4606      	mov	r6, r0
 800deaa:	460f      	mov	r7, r1
 800deac:	d018      	beq.n	800dee0 <__ieee754_rem_pio2+0xf0>
 800deae:	a38c      	add	r3, pc, #560	@ (adr r3, 800e0e0 <__ieee754_rem_pio2+0x2f0>)
 800deb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb4:	f7f2 f9ea 	bl	800028c <__adddf3>
 800deb8:	4602      	mov	r2, r0
 800deba:	460b      	mov	r3, r1
 800debc:	4680      	mov	r8, r0
 800debe:	4689      	mov	r9, r1
 800dec0:	4630      	mov	r0, r6
 800dec2:	4639      	mov	r1, r7
 800dec4:	f7f2 f9e0 	bl	8000288 <__aeabi_dsub>
 800dec8:	a385      	add	r3, pc, #532	@ (adr r3, 800e0e0 <__ieee754_rem_pio2+0x2f0>)
 800deca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dece:	f7f2 f9dd 	bl	800028c <__adddf3>
 800ded2:	f04f 35ff 	mov.w	r5, #4294967295
 800ded6:	e9c4 8900 	strd	r8, r9, [r4]
 800deda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dede:	e7c4      	b.n	800de6a <__ieee754_rem_pio2+0x7a>
 800dee0:	a381      	add	r3, pc, #516	@ (adr r3, 800e0e8 <__ieee754_rem_pio2+0x2f8>)
 800dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee6:	f7f2 f9d1 	bl	800028c <__adddf3>
 800deea:	a381      	add	r3, pc, #516	@ (adr r3, 800e0f0 <__ieee754_rem_pio2+0x300>)
 800deec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def0:	4606      	mov	r6, r0
 800def2:	460f      	mov	r7, r1
 800def4:	f7f2 f9ca 	bl	800028c <__adddf3>
 800def8:	4602      	mov	r2, r0
 800defa:	460b      	mov	r3, r1
 800defc:	4680      	mov	r8, r0
 800defe:	4689      	mov	r9, r1
 800df00:	4630      	mov	r0, r6
 800df02:	4639      	mov	r1, r7
 800df04:	f7f2 f9c0 	bl	8000288 <__aeabi_dsub>
 800df08:	a379      	add	r3, pc, #484	@ (adr r3, 800e0f0 <__ieee754_rem_pio2+0x300>)
 800df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0e:	e7de      	b.n	800dece <__ieee754_rem_pio2+0xde>
 800df10:	4b82      	ldr	r3, [pc, #520]	@ (800e11c <__ieee754_rem_pio2+0x32c>)
 800df12:	4598      	cmp	r8, r3
 800df14:	f200 80d1 	bhi.w	800e0ba <__ieee754_rem_pio2+0x2ca>
 800df18:	f000 f966 	bl	800e1e8 <fabs>
 800df1c:	ec57 6b10 	vmov	r6, r7, d0
 800df20:	a375      	add	r3, pc, #468	@ (adr r3, 800e0f8 <__ieee754_rem_pio2+0x308>)
 800df22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df26:	4630      	mov	r0, r6
 800df28:	4639      	mov	r1, r7
 800df2a:	f7f2 fb65 	bl	80005f8 <__aeabi_dmul>
 800df2e:	4b7c      	ldr	r3, [pc, #496]	@ (800e120 <__ieee754_rem_pio2+0x330>)
 800df30:	2200      	movs	r2, #0
 800df32:	f7f2 f9ab 	bl	800028c <__adddf3>
 800df36:	f7f2 fe0f 	bl	8000b58 <__aeabi_d2iz>
 800df3a:	4605      	mov	r5, r0
 800df3c:	f7f2 faf2 	bl	8000524 <__aeabi_i2d>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df48:	a363      	add	r3, pc, #396	@ (adr r3, 800e0d8 <__ieee754_rem_pio2+0x2e8>)
 800df4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4e:	f7f2 fb53 	bl	80005f8 <__aeabi_dmul>
 800df52:	4602      	mov	r2, r0
 800df54:	460b      	mov	r3, r1
 800df56:	4630      	mov	r0, r6
 800df58:	4639      	mov	r1, r7
 800df5a:	f7f2 f995 	bl	8000288 <__aeabi_dsub>
 800df5e:	a360      	add	r3, pc, #384	@ (adr r3, 800e0e0 <__ieee754_rem_pio2+0x2f0>)
 800df60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df64:	4682      	mov	sl, r0
 800df66:	468b      	mov	fp, r1
 800df68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df6c:	f7f2 fb44 	bl	80005f8 <__aeabi_dmul>
 800df70:	2d1f      	cmp	r5, #31
 800df72:	4606      	mov	r6, r0
 800df74:	460f      	mov	r7, r1
 800df76:	dc0c      	bgt.n	800df92 <__ieee754_rem_pio2+0x1a2>
 800df78:	4b6a      	ldr	r3, [pc, #424]	@ (800e124 <__ieee754_rem_pio2+0x334>)
 800df7a:	1e6a      	subs	r2, r5, #1
 800df7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df80:	4543      	cmp	r3, r8
 800df82:	d006      	beq.n	800df92 <__ieee754_rem_pio2+0x1a2>
 800df84:	4632      	mov	r2, r6
 800df86:	463b      	mov	r3, r7
 800df88:	4650      	mov	r0, sl
 800df8a:	4659      	mov	r1, fp
 800df8c:	f7f2 f97c 	bl	8000288 <__aeabi_dsub>
 800df90:	e00e      	b.n	800dfb0 <__ieee754_rem_pio2+0x1c0>
 800df92:	463b      	mov	r3, r7
 800df94:	4632      	mov	r2, r6
 800df96:	4650      	mov	r0, sl
 800df98:	4659      	mov	r1, fp
 800df9a:	f7f2 f975 	bl	8000288 <__aeabi_dsub>
 800df9e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dfa2:	9305      	str	r3, [sp, #20]
 800dfa4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dfa8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800dfac:	2b10      	cmp	r3, #16
 800dfae:	dc02      	bgt.n	800dfb6 <__ieee754_rem_pio2+0x1c6>
 800dfb0:	e9c4 0100 	strd	r0, r1, [r4]
 800dfb4:	e039      	b.n	800e02a <__ieee754_rem_pio2+0x23a>
 800dfb6:	a34c      	add	r3, pc, #304	@ (adr r3, 800e0e8 <__ieee754_rem_pio2+0x2f8>)
 800dfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfc0:	f7f2 fb1a 	bl	80005f8 <__aeabi_dmul>
 800dfc4:	4606      	mov	r6, r0
 800dfc6:	460f      	mov	r7, r1
 800dfc8:	4602      	mov	r2, r0
 800dfca:	460b      	mov	r3, r1
 800dfcc:	4650      	mov	r0, sl
 800dfce:	4659      	mov	r1, fp
 800dfd0:	f7f2 f95a 	bl	8000288 <__aeabi_dsub>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	4680      	mov	r8, r0
 800dfda:	4689      	mov	r9, r1
 800dfdc:	4650      	mov	r0, sl
 800dfde:	4659      	mov	r1, fp
 800dfe0:	f7f2 f952 	bl	8000288 <__aeabi_dsub>
 800dfe4:	4632      	mov	r2, r6
 800dfe6:	463b      	mov	r3, r7
 800dfe8:	f7f2 f94e 	bl	8000288 <__aeabi_dsub>
 800dfec:	a340      	add	r3, pc, #256	@ (adr r3, 800e0f0 <__ieee754_rem_pio2+0x300>)
 800dfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff2:	4606      	mov	r6, r0
 800dff4:	460f      	mov	r7, r1
 800dff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dffa:	f7f2 fafd 	bl	80005f8 <__aeabi_dmul>
 800dffe:	4632      	mov	r2, r6
 800e000:	463b      	mov	r3, r7
 800e002:	f7f2 f941 	bl	8000288 <__aeabi_dsub>
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	4606      	mov	r6, r0
 800e00c:	460f      	mov	r7, r1
 800e00e:	4640      	mov	r0, r8
 800e010:	4649      	mov	r1, r9
 800e012:	f7f2 f939 	bl	8000288 <__aeabi_dsub>
 800e016:	9a05      	ldr	r2, [sp, #20]
 800e018:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e01c:	1ad3      	subs	r3, r2, r3
 800e01e:	2b31      	cmp	r3, #49	@ 0x31
 800e020:	dc20      	bgt.n	800e064 <__ieee754_rem_pio2+0x274>
 800e022:	e9c4 0100 	strd	r0, r1, [r4]
 800e026:	46c2      	mov	sl, r8
 800e028:	46cb      	mov	fp, r9
 800e02a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e02e:	4650      	mov	r0, sl
 800e030:	4642      	mov	r2, r8
 800e032:	464b      	mov	r3, r9
 800e034:	4659      	mov	r1, fp
 800e036:	f7f2 f927 	bl	8000288 <__aeabi_dsub>
 800e03a:	463b      	mov	r3, r7
 800e03c:	4632      	mov	r2, r6
 800e03e:	f7f2 f923 	bl	8000288 <__aeabi_dsub>
 800e042:	9b04      	ldr	r3, [sp, #16]
 800e044:	2b00      	cmp	r3, #0
 800e046:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e04a:	f6bf af0e 	bge.w	800de6a <__ieee754_rem_pio2+0x7a>
 800e04e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800e052:	6063      	str	r3, [r4, #4]
 800e054:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e058:	f8c4 8000 	str.w	r8, [r4]
 800e05c:	60a0      	str	r0, [r4, #8]
 800e05e:	60e3      	str	r3, [r4, #12]
 800e060:	426d      	negs	r5, r5
 800e062:	e702      	b.n	800de6a <__ieee754_rem_pio2+0x7a>
 800e064:	a326      	add	r3, pc, #152	@ (adr r3, 800e100 <__ieee754_rem_pio2+0x310>)
 800e066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e06a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e06e:	f7f2 fac3 	bl	80005f8 <__aeabi_dmul>
 800e072:	4606      	mov	r6, r0
 800e074:	460f      	mov	r7, r1
 800e076:	4602      	mov	r2, r0
 800e078:	460b      	mov	r3, r1
 800e07a:	4640      	mov	r0, r8
 800e07c:	4649      	mov	r1, r9
 800e07e:	f7f2 f903 	bl	8000288 <__aeabi_dsub>
 800e082:	4602      	mov	r2, r0
 800e084:	460b      	mov	r3, r1
 800e086:	4682      	mov	sl, r0
 800e088:	468b      	mov	fp, r1
 800e08a:	4640      	mov	r0, r8
 800e08c:	4649      	mov	r1, r9
 800e08e:	f7f2 f8fb 	bl	8000288 <__aeabi_dsub>
 800e092:	4632      	mov	r2, r6
 800e094:	463b      	mov	r3, r7
 800e096:	f7f2 f8f7 	bl	8000288 <__aeabi_dsub>
 800e09a:	a31b      	add	r3, pc, #108	@ (adr r3, 800e108 <__ieee754_rem_pio2+0x318>)
 800e09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a0:	4606      	mov	r6, r0
 800e0a2:	460f      	mov	r7, r1
 800e0a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0a8:	f7f2 faa6 	bl	80005f8 <__aeabi_dmul>
 800e0ac:	4632      	mov	r2, r6
 800e0ae:	463b      	mov	r3, r7
 800e0b0:	f7f2 f8ea 	bl	8000288 <__aeabi_dsub>
 800e0b4:	4606      	mov	r6, r0
 800e0b6:	460f      	mov	r7, r1
 800e0b8:	e764      	b.n	800df84 <__ieee754_rem_pio2+0x194>
 800e0ba:	4b1b      	ldr	r3, [pc, #108]	@ (800e128 <__ieee754_rem_pio2+0x338>)
 800e0bc:	4598      	cmp	r8, r3
 800e0be:	d935      	bls.n	800e12c <__ieee754_rem_pio2+0x33c>
 800e0c0:	4632      	mov	r2, r6
 800e0c2:	463b      	mov	r3, r7
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	4639      	mov	r1, r7
 800e0c8:	f7f2 f8de 	bl	8000288 <__aeabi_dsub>
 800e0cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e0d0:	e9c4 0100 	strd	r0, r1, [r4]
 800e0d4:	e69e      	b.n	800de14 <__ieee754_rem_pio2+0x24>
 800e0d6:	bf00      	nop
 800e0d8:	54400000 	.word	0x54400000
 800e0dc:	3ff921fb 	.word	0x3ff921fb
 800e0e0:	1a626331 	.word	0x1a626331
 800e0e4:	3dd0b461 	.word	0x3dd0b461
 800e0e8:	1a600000 	.word	0x1a600000
 800e0ec:	3dd0b461 	.word	0x3dd0b461
 800e0f0:	2e037073 	.word	0x2e037073
 800e0f4:	3ba3198a 	.word	0x3ba3198a
 800e0f8:	6dc9c883 	.word	0x6dc9c883
 800e0fc:	3fe45f30 	.word	0x3fe45f30
 800e100:	2e000000 	.word	0x2e000000
 800e104:	3ba3198a 	.word	0x3ba3198a
 800e108:	252049c1 	.word	0x252049c1
 800e10c:	397b839a 	.word	0x397b839a
 800e110:	3fe921fb 	.word	0x3fe921fb
 800e114:	4002d97b 	.word	0x4002d97b
 800e118:	3ff921fb 	.word	0x3ff921fb
 800e11c:	413921fb 	.word	0x413921fb
 800e120:	3fe00000 	.word	0x3fe00000
 800e124:	0800eeb0 	.word	0x0800eeb0
 800e128:	7fefffff 	.word	0x7fefffff
 800e12c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800e130:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800e134:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800e138:	4630      	mov	r0, r6
 800e13a:	460f      	mov	r7, r1
 800e13c:	f7f2 fd0c 	bl	8000b58 <__aeabi_d2iz>
 800e140:	f7f2 f9f0 	bl	8000524 <__aeabi_i2d>
 800e144:	4602      	mov	r2, r0
 800e146:	460b      	mov	r3, r1
 800e148:	4630      	mov	r0, r6
 800e14a:	4639      	mov	r1, r7
 800e14c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e150:	f7f2 f89a 	bl	8000288 <__aeabi_dsub>
 800e154:	4b22      	ldr	r3, [pc, #136]	@ (800e1e0 <__ieee754_rem_pio2+0x3f0>)
 800e156:	2200      	movs	r2, #0
 800e158:	f7f2 fa4e 	bl	80005f8 <__aeabi_dmul>
 800e15c:	460f      	mov	r7, r1
 800e15e:	4606      	mov	r6, r0
 800e160:	f7f2 fcfa 	bl	8000b58 <__aeabi_d2iz>
 800e164:	f7f2 f9de 	bl	8000524 <__aeabi_i2d>
 800e168:	4602      	mov	r2, r0
 800e16a:	460b      	mov	r3, r1
 800e16c:	4630      	mov	r0, r6
 800e16e:	4639      	mov	r1, r7
 800e170:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e174:	f7f2 f888 	bl	8000288 <__aeabi_dsub>
 800e178:	4b19      	ldr	r3, [pc, #100]	@ (800e1e0 <__ieee754_rem_pio2+0x3f0>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	f7f2 fa3c 	bl	80005f8 <__aeabi_dmul>
 800e180:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800e184:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800e188:	f04f 0803 	mov.w	r8, #3
 800e18c:	2600      	movs	r6, #0
 800e18e:	2700      	movs	r7, #0
 800e190:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800e194:	4632      	mov	r2, r6
 800e196:	463b      	mov	r3, r7
 800e198:	46c2      	mov	sl, r8
 800e19a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e19e:	f7f2 fc93 	bl	8000ac8 <__aeabi_dcmpeq>
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	d1f4      	bne.n	800e190 <__ieee754_rem_pio2+0x3a0>
 800e1a6:	4b0f      	ldr	r3, [pc, #60]	@ (800e1e4 <__ieee754_rem_pio2+0x3f4>)
 800e1a8:	9301      	str	r3, [sp, #4]
 800e1aa:	2302      	movs	r3, #2
 800e1ac:	9300      	str	r3, [sp, #0]
 800e1ae:	462a      	mov	r2, r5
 800e1b0:	4653      	mov	r3, sl
 800e1b2:	4621      	mov	r1, r4
 800e1b4:	a806      	add	r0, sp, #24
 800e1b6:	f000 f81f 	bl	800e1f8 <__kernel_rem_pio2>
 800e1ba:	9b04      	ldr	r3, [sp, #16]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	4605      	mov	r5, r0
 800e1c0:	f6bf ae53 	bge.w	800de6a <__ieee754_rem_pio2+0x7a>
 800e1c4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800e1c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e1cc:	e9c4 2300 	strd	r2, r3, [r4]
 800e1d0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800e1d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e1d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800e1dc:	e740      	b.n	800e060 <__ieee754_rem_pio2+0x270>
 800e1de:	bf00      	nop
 800e1e0:	41700000 	.word	0x41700000
 800e1e4:	0800ef30 	.word	0x0800ef30

0800e1e8 <fabs>:
 800e1e8:	ec51 0b10 	vmov	r0, r1, d0
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e1f2:	ec43 2b10 	vmov	d0, r2, r3
 800e1f6:	4770      	bx	lr

0800e1f8 <__kernel_rem_pio2>:
 800e1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1fc:	ed2d 8b02 	vpush	{d8}
 800e200:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800e204:	f112 0f14 	cmn.w	r2, #20
 800e208:	9306      	str	r3, [sp, #24]
 800e20a:	9104      	str	r1, [sp, #16]
 800e20c:	4bbe      	ldr	r3, [pc, #760]	@ (800e508 <__kernel_rem_pio2+0x310>)
 800e20e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800e210:	9008      	str	r0, [sp, #32]
 800e212:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	9b06      	ldr	r3, [sp, #24]
 800e21a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e21e:	bfa8      	it	ge
 800e220:	1ed4      	subge	r4, r2, #3
 800e222:	9305      	str	r3, [sp, #20]
 800e224:	bfb2      	itee	lt
 800e226:	2400      	movlt	r4, #0
 800e228:	2318      	movge	r3, #24
 800e22a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e22e:	f06f 0317 	mvn.w	r3, #23
 800e232:	fb04 3303 	mla	r3, r4, r3, r3
 800e236:	eb03 0b02 	add.w	fp, r3, r2
 800e23a:	9b00      	ldr	r3, [sp, #0]
 800e23c:	9a05      	ldr	r2, [sp, #20]
 800e23e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800e4f8 <__kernel_rem_pio2+0x300>
 800e242:	eb03 0802 	add.w	r8, r3, r2
 800e246:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800e248:	1aa7      	subs	r7, r4, r2
 800e24a:	ae20      	add	r6, sp, #128	@ 0x80
 800e24c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e250:	2500      	movs	r5, #0
 800e252:	4545      	cmp	r5, r8
 800e254:	dd13      	ble.n	800e27e <__kernel_rem_pio2+0x86>
 800e256:	9b06      	ldr	r3, [sp, #24]
 800e258:	aa20      	add	r2, sp, #128	@ 0x80
 800e25a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e25e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800e262:	f04f 0800 	mov.w	r8, #0
 800e266:	9b00      	ldr	r3, [sp, #0]
 800e268:	4598      	cmp	r8, r3
 800e26a:	dc31      	bgt.n	800e2d0 <__kernel_rem_pio2+0xd8>
 800e26c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800e4f8 <__kernel_rem_pio2+0x300>
 800e270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e274:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e278:	462f      	mov	r7, r5
 800e27a:	2600      	movs	r6, #0
 800e27c:	e01b      	b.n	800e2b6 <__kernel_rem_pio2+0xbe>
 800e27e:	42ef      	cmn	r7, r5
 800e280:	d407      	bmi.n	800e292 <__kernel_rem_pio2+0x9a>
 800e282:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e286:	f7f2 f94d 	bl	8000524 <__aeabi_i2d>
 800e28a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e28e:	3501      	adds	r5, #1
 800e290:	e7df      	b.n	800e252 <__kernel_rem_pio2+0x5a>
 800e292:	ec51 0b18 	vmov	r0, r1, d8
 800e296:	e7f8      	b.n	800e28a <__kernel_rem_pio2+0x92>
 800e298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e29c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e2a0:	f7f2 f9aa 	bl	80005f8 <__aeabi_dmul>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2ac:	f7f1 ffee 	bl	800028c <__adddf3>
 800e2b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2b4:	3601      	adds	r6, #1
 800e2b6:	9b05      	ldr	r3, [sp, #20]
 800e2b8:	429e      	cmp	r6, r3
 800e2ba:	f1a7 0708 	sub.w	r7, r7, #8
 800e2be:	ddeb      	ble.n	800e298 <__kernel_rem_pio2+0xa0>
 800e2c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2c4:	f108 0801 	add.w	r8, r8, #1
 800e2c8:	ecaa 7b02 	vstmia	sl!, {d7}
 800e2cc:	3508      	adds	r5, #8
 800e2ce:	e7ca      	b.n	800e266 <__kernel_rem_pio2+0x6e>
 800e2d0:	9b00      	ldr	r3, [sp, #0]
 800e2d2:	f8dd 8000 	ldr.w	r8, [sp]
 800e2d6:	aa0c      	add	r2, sp, #48	@ 0x30
 800e2d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800e2e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e2e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800e2ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e2ec:	ab98      	add	r3, sp, #608	@ 0x260
 800e2ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e2f2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800e2f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e2fa:	ac0c      	add	r4, sp, #48	@ 0x30
 800e2fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e2fe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800e302:	46a1      	mov	r9, r4
 800e304:	46c2      	mov	sl, r8
 800e306:	f1ba 0f00 	cmp.w	sl, #0
 800e30a:	f1a5 0508 	sub.w	r5, r5, #8
 800e30e:	dc77      	bgt.n	800e400 <__kernel_rem_pio2+0x208>
 800e310:	4658      	mov	r0, fp
 800e312:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e316:	f000 fac7 	bl	800e8a8 <scalbn>
 800e31a:	ec57 6b10 	vmov	r6, r7, d0
 800e31e:	2200      	movs	r2, #0
 800e320:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800e324:	4630      	mov	r0, r6
 800e326:	4639      	mov	r1, r7
 800e328:	f7f2 f966 	bl	80005f8 <__aeabi_dmul>
 800e32c:	ec41 0b10 	vmov	d0, r0, r1
 800e330:	f000 fb3a 	bl	800e9a8 <floor>
 800e334:	4b75      	ldr	r3, [pc, #468]	@ (800e50c <__kernel_rem_pio2+0x314>)
 800e336:	ec51 0b10 	vmov	r0, r1, d0
 800e33a:	2200      	movs	r2, #0
 800e33c:	f7f2 f95c 	bl	80005f8 <__aeabi_dmul>
 800e340:	4602      	mov	r2, r0
 800e342:	460b      	mov	r3, r1
 800e344:	4630      	mov	r0, r6
 800e346:	4639      	mov	r1, r7
 800e348:	f7f1 ff9e 	bl	8000288 <__aeabi_dsub>
 800e34c:	460f      	mov	r7, r1
 800e34e:	4606      	mov	r6, r0
 800e350:	f7f2 fc02 	bl	8000b58 <__aeabi_d2iz>
 800e354:	9002      	str	r0, [sp, #8]
 800e356:	f7f2 f8e5 	bl	8000524 <__aeabi_i2d>
 800e35a:	4602      	mov	r2, r0
 800e35c:	460b      	mov	r3, r1
 800e35e:	4630      	mov	r0, r6
 800e360:	4639      	mov	r1, r7
 800e362:	f7f1 ff91 	bl	8000288 <__aeabi_dsub>
 800e366:	f1bb 0f00 	cmp.w	fp, #0
 800e36a:	4606      	mov	r6, r0
 800e36c:	460f      	mov	r7, r1
 800e36e:	dd6c      	ble.n	800e44a <__kernel_rem_pio2+0x252>
 800e370:	f108 31ff 	add.w	r1, r8, #4294967295
 800e374:	ab0c      	add	r3, sp, #48	@ 0x30
 800e376:	9d02      	ldr	r5, [sp, #8]
 800e378:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e37c:	f1cb 0018 	rsb	r0, fp, #24
 800e380:	fa43 f200 	asr.w	r2, r3, r0
 800e384:	4415      	add	r5, r2
 800e386:	4082      	lsls	r2, r0
 800e388:	1a9b      	subs	r3, r3, r2
 800e38a:	aa0c      	add	r2, sp, #48	@ 0x30
 800e38c:	9502      	str	r5, [sp, #8]
 800e38e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e392:	f1cb 0217 	rsb	r2, fp, #23
 800e396:	fa43 f902 	asr.w	r9, r3, r2
 800e39a:	f1b9 0f00 	cmp.w	r9, #0
 800e39e:	dd64      	ble.n	800e46a <__kernel_rem_pio2+0x272>
 800e3a0:	9b02      	ldr	r3, [sp, #8]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	9302      	str	r3, [sp, #8]
 800e3a8:	4615      	mov	r5, r2
 800e3aa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800e3ae:	4590      	cmp	r8, r2
 800e3b0:	f300 80b8 	bgt.w	800e524 <__kernel_rem_pio2+0x32c>
 800e3b4:	f1bb 0f00 	cmp.w	fp, #0
 800e3b8:	dd07      	ble.n	800e3ca <__kernel_rem_pio2+0x1d2>
 800e3ba:	f1bb 0f01 	cmp.w	fp, #1
 800e3be:	f000 80bf 	beq.w	800e540 <__kernel_rem_pio2+0x348>
 800e3c2:	f1bb 0f02 	cmp.w	fp, #2
 800e3c6:	f000 80c6 	beq.w	800e556 <__kernel_rem_pio2+0x35e>
 800e3ca:	f1b9 0f02 	cmp.w	r9, #2
 800e3ce:	d14c      	bne.n	800e46a <__kernel_rem_pio2+0x272>
 800e3d0:	4632      	mov	r2, r6
 800e3d2:	463b      	mov	r3, r7
 800e3d4:	494e      	ldr	r1, [pc, #312]	@ (800e510 <__kernel_rem_pio2+0x318>)
 800e3d6:	2000      	movs	r0, #0
 800e3d8:	f7f1 ff56 	bl	8000288 <__aeabi_dsub>
 800e3dc:	4606      	mov	r6, r0
 800e3de:	460f      	mov	r7, r1
 800e3e0:	2d00      	cmp	r5, #0
 800e3e2:	d042      	beq.n	800e46a <__kernel_rem_pio2+0x272>
 800e3e4:	4658      	mov	r0, fp
 800e3e6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800e500 <__kernel_rem_pio2+0x308>
 800e3ea:	f000 fa5d 	bl	800e8a8 <scalbn>
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	4639      	mov	r1, r7
 800e3f2:	ec53 2b10 	vmov	r2, r3, d0
 800e3f6:	f7f1 ff47 	bl	8000288 <__aeabi_dsub>
 800e3fa:	4606      	mov	r6, r0
 800e3fc:	460f      	mov	r7, r1
 800e3fe:	e034      	b.n	800e46a <__kernel_rem_pio2+0x272>
 800e400:	4b44      	ldr	r3, [pc, #272]	@ (800e514 <__kernel_rem_pio2+0x31c>)
 800e402:	2200      	movs	r2, #0
 800e404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e408:	f7f2 f8f6 	bl	80005f8 <__aeabi_dmul>
 800e40c:	f7f2 fba4 	bl	8000b58 <__aeabi_d2iz>
 800e410:	f7f2 f888 	bl	8000524 <__aeabi_i2d>
 800e414:	4b40      	ldr	r3, [pc, #256]	@ (800e518 <__kernel_rem_pio2+0x320>)
 800e416:	2200      	movs	r2, #0
 800e418:	4606      	mov	r6, r0
 800e41a:	460f      	mov	r7, r1
 800e41c:	f7f2 f8ec 	bl	80005f8 <__aeabi_dmul>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e428:	f7f1 ff2e 	bl	8000288 <__aeabi_dsub>
 800e42c:	f7f2 fb94 	bl	8000b58 <__aeabi_d2iz>
 800e430:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e434:	f849 0b04 	str.w	r0, [r9], #4
 800e438:	4639      	mov	r1, r7
 800e43a:	4630      	mov	r0, r6
 800e43c:	f7f1 ff26 	bl	800028c <__adddf3>
 800e440:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e448:	e75d      	b.n	800e306 <__kernel_rem_pio2+0x10e>
 800e44a:	d107      	bne.n	800e45c <__kernel_rem_pio2+0x264>
 800e44c:	f108 33ff 	add.w	r3, r8, #4294967295
 800e450:	aa0c      	add	r2, sp, #48	@ 0x30
 800e452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e456:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800e45a:	e79e      	b.n	800e39a <__kernel_rem_pio2+0x1a2>
 800e45c:	4b2f      	ldr	r3, [pc, #188]	@ (800e51c <__kernel_rem_pio2+0x324>)
 800e45e:	2200      	movs	r2, #0
 800e460:	f7f2 fb50 	bl	8000b04 <__aeabi_dcmpge>
 800e464:	2800      	cmp	r0, #0
 800e466:	d143      	bne.n	800e4f0 <__kernel_rem_pio2+0x2f8>
 800e468:	4681      	mov	r9, r0
 800e46a:	2200      	movs	r2, #0
 800e46c:	2300      	movs	r3, #0
 800e46e:	4630      	mov	r0, r6
 800e470:	4639      	mov	r1, r7
 800e472:	f7f2 fb29 	bl	8000ac8 <__aeabi_dcmpeq>
 800e476:	2800      	cmp	r0, #0
 800e478:	f000 80bf 	beq.w	800e5fa <__kernel_rem_pio2+0x402>
 800e47c:	f108 33ff 	add.w	r3, r8, #4294967295
 800e480:	2200      	movs	r2, #0
 800e482:	9900      	ldr	r1, [sp, #0]
 800e484:	428b      	cmp	r3, r1
 800e486:	da6e      	bge.n	800e566 <__kernel_rem_pio2+0x36e>
 800e488:	2a00      	cmp	r2, #0
 800e48a:	f000 8089 	beq.w	800e5a0 <__kernel_rem_pio2+0x3a8>
 800e48e:	f108 38ff 	add.w	r8, r8, #4294967295
 800e492:	ab0c      	add	r3, sp, #48	@ 0x30
 800e494:	f1ab 0b18 	sub.w	fp, fp, #24
 800e498:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d0f6      	beq.n	800e48e <__kernel_rem_pio2+0x296>
 800e4a0:	4658      	mov	r0, fp
 800e4a2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800e500 <__kernel_rem_pio2+0x308>
 800e4a6:	f000 f9ff 	bl	800e8a8 <scalbn>
 800e4aa:	f108 0301 	add.w	r3, r8, #1
 800e4ae:	00da      	lsls	r2, r3, #3
 800e4b0:	9205      	str	r2, [sp, #20]
 800e4b2:	ec55 4b10 	vmov	r4, r5, d0
 800e4b6:	aa70      	add	r2, sp, #448	@ 0x1c0
 800e4b8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800e514 <__kernel_rem_pio2+0x31c>
 800e4bc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800e4c0:	4646      	mov	r6, r8
 800e4c2:	f04f 0a00 	mov.w	sl, #0
 800e4c6:	2e00      	cmp	r6, #0
 800e4c8:	f280 80cf 	bge.w	800e66a <__kernel_rem_pio2+0x472>
 800e4cc:	4644      	mov	r4, r8
 800e4ce:	2c00      	cmp	r4, #0
 800e4d0:	f2c0 80fd 	blt.w	800e6ce <__kernel_rem_pio2+0x4d6>
 800e4d4:	4b12      	ldr	r3, [pc, #72]	@ (800e520 <__kernel_rem_pio2+0x328>)
 800e4d6:	461f      	mov	r7, r3
 800e4d8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e4da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4de:	9306      	str	r3, [sp, #24]
 800e4e0:	f04f 0a00 	mov.w	sl, #0
 800e4e4:	f04f 0b00 	mov.w	fp, #0
 800e4e8:	2600      	movs	r6, #0
 800e4ea:	eba8 0504 	sub.w	r5, r8, r4
 800e4ee:	e0e2      	b.n	800e6b6 <__kernel_rem_pio2+0x4be>
 800e4f0:	f04f 0902 	mov.w	r9, #2
 800e4f4:	e754      	b.n	800e3a0 <__kernel_rem_pio2+0x1a8>
 800e4f6:	bf00      	nop
	...
 800e504:	3ff00000 	.word	0x3ff00000
 800e508:	0800f078 	.word	0x0800f078
 800e50c:	40200000 	.word	0x40200000
 800e510:	3ff00000 	.word	0x3ff00000
 800e514:	3e700000 	.word	0x3e700000
 800e518:	41700000 	.word	0x41700000
 800e51c:	3fe00000 	.word	0x3fe00000
 800e520:	0800f038 	.word	0x0800f038
 800e524:	f854 3b04 	ldr.w	r3, [r4], #4
 800e528:	b945      	cbnz	r5, 800e53c <__kernel_rem_pio2+0x344>
 800e52a:	b123      	cbz	r3, 800e536 <__kernel_rem_pio2+0x33e>
 800e52c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800e530:	f844 3c04 	str.w	r3, [r4, #-4]
 800e534:	2301      	movs	r3, #1
 800e536:	3201      	adds	r2, #1
 800e538:	461d      	mov	r5, r3
 800e53a:	e738      	b.n	800e3ae <__kernel_rem_pio2+0x1b6>
 800e53c:	1acb      	subs	r3, r1, r3
 800e53e:	e7f7      	b.n	800e530 <__kernel_rem_pio2+0x338>
 800e540:	f108 32ff 	add.w	r2, r8, #4294967295
 800e544:	ab0c      	add	r3, sp, #48	@ 0x30
 800e546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e54a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e54e:	a90c      	add	r1, sp, #48	@ 0x30
 800e550:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e554:	e739      	b.n	800e3ca <__kernel_rem_pio2+0x1d2>
 800e556:	f108 32ff 	add.w	r2, r8, #4294967295
 800e55a:	ab0c      	add	r3, sp, #48	@ 0x30
 800e55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e560:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e564:	e7f3      	b.n	800e54e <__kernel_rem_pio2+0x356>
 800e566:	a90c      	add	r1, sp, #48	@ 0x30
 800e568:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e56c:	3b01      	subs	r3, #1
 800e56e:	430a      	orrs	r2, r1
 800e570:	e787      	b.n	800e482 <__kernel_rem_pio2+0x28a>
 800e572:	3401      	adds	r4, #1
 800e574:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e578:	2a00      	cmp	r2, #0
 800e57a:	d0fa      	beq.n	800e572 <__kernel_rem_pio2+0x37a>
 800e57c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e57e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e582:	eb0d 0503 	add.w	r5, sp, r3
 800e586:	9b06      	ldr	r3, [sp, #24]
 800e588:	aa20      	add	r2, sp, #128	@ 0x80
 800e58a:	4443      	add	r3, r8
 800e58c:	f108 0701 	add.w	r7, r8, #1
 800e590:	3d98      	subs	r5, #152	@ 0x98
 800e592:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800e596:	4444      	add	r4, r8
 800e598:	42bc      	cmp	r4, r7
 800e59a:	da04      	bge.n	800e5a6 <__kernel_rem_pio2+0x3ae>
 800e59c:	46a0      	mov	r8, r4
 800e59e:	e6a2      	b.n	800e2e6 <__kernel_rem_pio2+0xee>
 800e5a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5a2:	2401      	movs	r4, #1
 800e5a4:	e7e6      	b.n	800e574 <__kernel_rem_pio2+0x37c>
 800e5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5a8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e5ac:	f7f1 ffba 	bl	8000524 <__aeabi_i2d>
 800e5b0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800e878 <__kernel_rem_pio2+0x680>
 800e5b4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e5b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e5bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e5c0:	46b2      	mov	sl, r6
 800e5c2:	f04f 0800 	mov.w	r8, #0
 800e5c6:	9b05      	ldr	r3, [sp, #20]
 800e5c8:	4598      	cmp	r8, r3
 800e5ca:	dd05      	ble.n	800e5d8 <__kernel_rem_pio2+0x3e0>
 800e5cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e5d0:	3701      	adds	r7, #1
 800e5d2:	eca5 7b02 	vstmia	r5!, {d7}
 800e5d6:	e7df      	b.n	800e598 <__kernel_rem_pio2+0x3a0>
 800e5d8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800e5dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e5e0:	f7f2 f80a 	bl	80005f8 <__aeabi_dmul>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5ec:	f7f1 fe4e 	bl	800028c <__adddf3>
 800e5f0:	f108 0801 	add.w	r8, r8, #1
 800e5f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5f8:	e7e5      	b.n	800e5c6 <__kernel_rem_pio2+0x3ce>
 800e5fa:	f1cb 0000 	rsb	r0, fp, #0
 800e5fe:	ec47 6b10 	vmov	d0, r6, r7
 800e602:	f000 f951 	bl	800e8a8 <scalbn>
 800e606:	ec55 4b10 	vmov	r4, r5, d0
 800e60a:	4b9d      	ldr	r3, [pc, #628]	@ (800e880 <__kernel_rem_pio2+0x688>)
 800e60c:	2200      	movs	r2, #0
 800e60e:	4620      	mov	r0, r4
 800e610:	4629      	mov	r1, r5
 800e612:	f7f2 fa77 	bl	8000b04 <__aeabi_dcmpge>
 800e616:	b300      	cbz	r0, 800e65a <__kernel_rem_pio2+0x462>
 800e618:	4b9a      	ldr	r3, [pc, #616]	@ (800e884 <__kernel_rem_pio2+0x68c>)
 800e61a:	2200      	movs	r2, #0
 800e61c:	4620      	mov	r0, r4
 800e61e:	4629      	mov	r1, r5
 800e620:	f7f1 ffea 	bl	80005f8 <__aeabi_dmul>
 800e624:	f7f2 fa98 	bl	8000b58 <__aeabi_d2iz>
 800e628:	4606      	mov	r6, r0
 800e62a:	f7f1 ff7b 	bl	8000524 <__aeabi_i2d>
 800e62e:	4b94      	ldr	r3, [pc, #592]	@ (800e880 <__kernel_rem_pio2+0x688>)
 800e630:	2200      	movs	r2, #0
 800e632:	f7f1 ffe1 	bl	80005f8 <__aeabi_dmul>
 800e636:	460b      	mov	r3, r1
 800e638:	4602      	mov	r2, r0
 800e63a:	4629      	mov	r1, r5
 800e63c:	4620      	mov	r0, r4
 800e63e:	f7f1 fe23 	bl	8000288 <__aeabi_dsub>
 800e642:	f7f2 fa89 	bl	8000b58 <__aeabi_d2iz>
 800e646:	ab0c      	add	r3, sp, #48	@ 0x30
 800e648:	f10b 0b18 	add.w	fp, fp, #24
 800e64c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e650:	f108 0801 	add.w	r8, r8, #1
 800e654:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e658:	e722      	b.n	800e4a0 <__kernel_rem_pio2+0x2a8>
 800e65a:	4620      	mov	r0, r4
 800e65c:	4629      	mov	r1, r5
 800e65e:	f7f2 fa7b 	bl	8000b58 <__aeabi_d2iz>
 800e662:	ab0c      	add	r3, sp, #48	@ 0x30
 800e664:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e668:	e71a      	b.n	800e4a0 <__kernel_rem_pio2+0x2a8>
 800e66a:	ab0c      	add	r3, sp, #48	@ 0x30
 800e66c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e670:	f7f1 ff58 	bl	8000524 <__aeabi_i2d>
 800e674:	4622      	mov	r2, r4
 800e676:	462b      	mov	r3, r5
 800e678:	f7f1 ffbe 	bl	80005f8 <__aeabi_dmul>
 800e67c:	4652      	mov	r2, sl
 800e67e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800e682:	465b      	mov	r3, fp
 800e684:	4620      	mov	r0, r4
 800e686:	4629      	mov	r1, r5
 800e688:	f7f1 ffb6 	bl	80005f8 <__aeabi_dmul>
 800e68c:	3e01      	subs	r6, #1
 800e68e:	4604      	mov	r4, r0
 800e690:	460d      	mov	r5, r1
 800e692:	e718      	b.n	800e4c6 <__kernel_rem_pio2+0x2ce>
 800e694:	9906      	ldr	r1, [sp, #24]
 800e696:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800e69a:	9106      	str	r1, [sp, #24]
 800e69c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800e6a0:	f7f1 ffaa 	bl	80005f8 <__aeabi_dmul>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	4650      	mov	r0, sl
 800e6aa:	4659      	mov	r1, fp
 800e6ac:	f7f1 fdee 	bl	800028c <__adddf3>
 800e6b0:	3601      	adds	r6, #1
 800e6b2:	4682      	mov	sl, r0
 800e6b4:	468b      	mov	fp, r1
 800e6b6:	9b00      	ldr	r3, [sp, #0]
 800e6b8:	429e      	cmp	r6, r3
 800e6ba:	dc01      	bgt.n	800e6c0 <__kernel_rem_pio2+0x4c8>
 800e6bc:	42b5      	cmp	r5, r6
 800e6be:	dae9      	bge.n	800e694 <__kernel_rem_pio2+0x49c>
 800e6c0:	ab48      	add	r3, sp, #288	@ 0x120
 800e6c2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e6c6:	e9c5 ab00 	strd	sl, fp, [r5]
 800e6ca:	3c01      	subs	r4, #1
 800e6cc:	e6ff      	b.n	800e4ce <__kernel_rem_pio2+0x2d6>
 800e6ce:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e6d0:	2b02      	cmp	r3, #2
 800e6d2:	dc0b      	bgt.n	800e6ec <__kernel_rem_pio2+0x4f4>
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	dc39      	bgt.n	800e74c <__kernel_rem_pio2+0x554>
 800e6d8:	d05d      	beq.n	800e796 <__kernel_rem_pio2+0x59e>
 800e6da:	9b02      	ldr	r3, [sp, #8]
 800e6dc:	f003 0007 	and.w	r0, r3, #7
 800e6e0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800e6e4:	ecbd 8b02 	vpop	{d8}
 800e6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ec:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e6ee:	2b03      	cmp	r3, #3
 800e6f0:	d1f3      	bne.n	800e6da <__kernel_rem_pio2+0x4e2>
 800e6f2:	9b05      	ldr	r3, [sp, #20]
 800e6f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e6f8:	eb0d 0403 	add.w	r4, sp, r3
 800e6fc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800e700:	4625      	mov	r5, r4
 800e702:	46c2      	mov	sl, r8
 800e704:	f1ba 0f00 	cmp.w	sl, #0
 800e708:	f1a5 0508 	sub.w	r5, r5, #8
 800e70c:	dc6b      	bgt.n	800e7e6 <__kernel_rem_pio2+0x5ee>
 800e70e:	4645      	mov	r5, r8
 800e710:	2d01      	cmp	r5, #1
 800e712:	f1a4 0408 	sub.w	r4, r4, #8
 800e716:	f300 8087 	bgt.w	800e828 <__kernel_rem_pio2+0x630>
 800e71a:	9c05      	ldr	r4, [sp, #20]
 800e71c:	ab48      	add	r3, sp, #288	@ 0x120
 800e71e:	441c      	add	r4, r3
 800e720:	2000      	movs	r0, #0
 800e722:	2100      	movs	r1, #0
 800e724:	f1b8 0f01 	cmp.w	r8, #1
 800e728:	f300 809c 	bgt.w	800e864 <__kernel_rem_pio2+0x66c>
 800e72c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800e730:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800e734:	f1b9 0f00 	cmp.w	r9, #0
 800e738:	f040 80a6 	bne.w	800e888 <__kernel_rem_pio2+0x690>
 800e73c:	9b04      	ldr	r3, [sp, #16]
 800e73e:	e9c3 7800 	strd	r7, r8, [r3]
 800e742:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e746:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e74a:	e7c6      	b.n	800e6da <__kernel_rem_pio2+0x4e2>
 800e74c:	9d05      	ldr	r5, [sp, #20]
 800e74e:	ab48      	add	r3, sp, #288	@ 0x120
 800e750:	441d      	add	r5, r3
 800e752:	4644      	mov	r4, r8
 800e754:	2000      	movs	r0, #0
 800e756:	2100      	movs	r1, #0
 800e758:	2c00      	cmp	r4, #0
 800e75a:	da35      	bge.n	800e7c8 <__kernel_rem_pio2+0x5d0>
 800e75c:	f1b9 0f00 	cmp.w	r9, #0
 800e760:	d038      	beq.n	800e7d4 <__kernel_rem_pio2+0x5dc>
 800e762:	4602      	mov	r2, r0
 800e764:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e768:	9c04      	ldr	r4, [sp, #16]
 800e76a:	e9c4 2300 	strd	r2, r3, [r4]
 800e76e:	4602      	mov	r2, r0
 800e770:	460b      	mov	r3, r1
 800e772:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e776:	f7f1 fd87 	bl	8000288 <__aeabi_dsub>
 800e77a:	ad4a      	add	r5, sp, #296	@ 0x128
 800e77c:	2401      	movs	r4, #1
 800e77e:	45a0      	cmp	r8, r4
 800e780:	da2b      	bge.n	800e7da <__kernel_rem_pio2+0x5e2>
 800e782:	f1b9 0f00 	cmp.w	r9, #0
 800e786:	d002      	beq.n	800e78e <__kernel_rem_pio2+0x596>
 800e788:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e78c:	4619      	mov	r1, r3
 800e78e:	9b04      	ldr	r3, [sp, #16]
 800e790:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e794:	e7a1      	b.n	800e6da <__kernel_rem_pio2+0x4e2>
 800e796:	9c05      	ldr	r4, [sp, #20]
 800e798:	ab48      	add	r3, sp, #288	@ 0x120
 800e79a:	441c      	add	r4, r3
 800e79c:	2000      	movs	r0, #0
 800e79e:	2100      	movs	r1, #0
 800e7a0:	f1b8 0f00 	cmp.w	r8, #0
 800e7a4:	da09      	bge.n	800e7ba <__kernel_rem_pio2+0x5c2>
 800e7a6:	f1b9 0f00 	cmp.w	r9, #0
 800e7aa:	d002      	beq.n	800e7b2 <__kernel_rem_pio2+0x5ba>
 800e7ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	9b04      	ldr	r3, [sp, #16]
 800e7b4:	e9c3 0100 	strd	r0, r1, [r3]
 800e7b8:	e78f      	b.n	800e6da <__kernel_rem_pio2+0x4e2>
 800e7ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e7be:	f7f1 fd65 	bl	800028c <__adddf3>
 800e7c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800e7c6:	e7eb      	b.n	800e7a0 <__kernel_rem_pio2+0x5a8>
 800e7c8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e7cc:	f7f1 fd5e 	bl	800028c <__adddf3>
 800e7d0:	3c01      	subs	r4, #1
 800e7d2:	e7c1      	b.n	800e758 <__kernel_rem_pio2+0x560>
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	e7c6      	b.n	800e768 <__kernel_rem_pio2+0x570>
 800e7da:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e7de:	f7f1 fd55 	bl	800028c <__adddf3>
 800e7e2:	3401      	adds	r4, #1
 800e7e4:	e7cb      	b.n	800e77e <__kernel_rem_pio2+0x586>
 800e7e6:	ed95 7b00 	vldr	d7, [r5]
 800e7ea:	ed8d 7b00 	vstr	d7, [sp]
 800e7ee:	ed95 7b02 	vldr	d7, [r5, #8]
 800e7f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7f6:	ec53 2b17 	vmov	r2, r3, d7
 800e7fa:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e7fe:	f7f1 fd45 	bl	800028c <__adddf3>
 800e802:	4602      	mov	r2, r0
 800e804:	460b      	mov	r3, r1
 800e806:	4606      	mov	r6, r0
 800e808:	460f      	mov	r7, r1
 800e80a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e80e:	f7f1 fd3b 	bl	8000288 <__aeabi_dsub>
 800e812:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e816:	f7f1 fd39 	bl	800028c <__adddf3>
 800e81a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e81e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e822:	e9c5 6700 	strd	r6, r7, [r5]
 800e826:	e76d      	b.n	800e704 <__kernel_rem_pio2+0x50c>
 800e828:	ed94 7b00 	vldr	d7, [r4]
 800e82c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e830:	ec51 0b17 	vmov	r0, r1, d7
 800e834:	4652      	mov	r2, sl
 800e836:	465b      	mov	r3, fp
 800e838:	ed8d 7b00 	vstr	d7, [sp]
 800e83c:	f7f1 fd26 	bl	800028c <__adddf3>
 800e840:	4602      	mov	r2, r0
 800e842:	460b      	mov	r3, r1
 800e844:	4606      	mov	r6, r0
 800e846:	460f      	mov	r7, r1
 800e848:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e84c:	f7f1 fd1c 	bl	8000288 <__aeabi_dsub>
 800e850:	4652      	mov	r2, sl
 800e852:	465b      	mov	r3, fp
 800e854:	f7f1 fd1a 	bl	800028c <__adddf3>
 800e858:	3d01      	subs	r5, #1
 800e85a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e85e:	e9c4 6700 	strd	r6, r7, [r4]
 800e862:	e755      	b.n	800e710 <__kernel_rem_pio2+0x518>
 800e864:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e868:	f7f1 fd10 	bl	800028c <__adddf3>
 800e86c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e870:	e758      	b.n	800e724 <__kernel_rem_pio2+0x52c>
 800e872:	bf00      	nop
 800e874:	f3af 8000 	nop.w
	...
 800e880:	41700000 	.word	0x41700000
 800e884:	3e700000 	.word	0x3e700000
 800e888:	9b04      	ldr	r3, [sp, #16]
 800e88a:	9a04      	ldr	r2, [sp, #16]
 800e88c:	601f      	str	r7, [r3, #0]
 800e88e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800e892:	605c      	str	r4, [r3, #4]
 800e894:	609d      	str	r5, [r3, #8]
 800e896:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e89a:	60d3      	str	r3, [r2, #12]
 800e89c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e8a0:	6110      	str	r0, [r2, #16]
 800e8a2:	6153      	str	r3, [r2, #20]
 800e8a4:	e719      	b.n	800e6da <__kernel_rem_pio2+0x4e2>
 800e8a6:	bf00      	nop

0800e8a8 <scalbn>:
 800e8a8:	b570      	push	{r4, r5, r6, lr}
 800e8aa:	ec55 4b10 	vmov	r4, r5, d0
 800e8ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e8b2:	4606      	mov	r6, r0
 800e8b4:	462b      	mov	r3, r5
 800e8b6:	b991      	cbnz	r1, 800e8de <scalbn+0x36>
 800e8b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e8bc:	4323      	orrs	r3, r4
 800e8be:	d03d      	beq.n	800e93c <scalbn+0x94>
 800e8c0:	4b35      	ldr	r3, [pc, #212]	@ (800e998 <scalbn+0xf0>)
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	4629      	mov	r1, r5
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f7f1 fe96 	bl	80005f8 <__aeabi_dmul>
 800e8cc:	4b33      	ldr	r3, [pc, #204]	@ (800e99c <scalbn+0xf4>)
 800e8ce:	429e      	cmp	r6, r3
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	460d      	mov	r5, r1
 800e8d4:	da0f      	bge.n	800e8f6 <scalbn+0x4e>
 800e8d6:	a328      	add	r3, pc, #160	@ (adr r3, 800e978 <scalbn+0xd0>)
 800e8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8dc:	e01e      	b.n	800e91c <scalbn+0x74>
 800e8de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e8e2:	4291      	cmp	r1, r2
 800e8e4:	d10b      	bne.n	800e8fe <scalbn+0x56>
 800e8e6:	4622      	mov	r2, r4
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	4629      	mov	r1, r5
 800e8ec:	f7f1 fcce 	bl	800028c <__adddf3>
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	460d      	mov	r5, r1
 800e8f4:	e022      	b.n	800e93c <scalbn+0x94>
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e8fc:	3936      	subs	r1, #54	@ 0x36
 800e8fe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e902:	4296      	cmp	r6, r2
 800e904:	dd0d      	ble.n	800e922 <scalbn+0x7a>
 800e906:	2d00      	cmp	r5, #0
 800e908:	a11d      	add	r1, pc, #116	@ (adr r1, 800e980 <scalbn+0xd8>)
 800e90a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e90e:	da02      	bge.n	800e916 <scalbn+0x6e>
 800e910:	a11d      	add	r1, pc, #116	@ (adr r1, 800e988 <scalbn+0xe0>)
 800e912:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e916:	a31a      	add	r3, pc, #104	@ (adr r3, 800e980 <scalbn+0xd8>)
 800e918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91c:	f7f1 fe6c 	bl	80005f8 <__aeabi_dmul>
 800e920:	e7e6      	b.n	800e8f0 <scalbn+0x48>
 800e922:	1872      	adds	r2, r6, r1
 800e924:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e928:	428a      	cmp	r2, r1
 800e92a:	dcec      	bgt.n	800e906 <scalbn+0x5e>
 800e92c:	2a00      	cmp	r2, #0
 800e92e:	dd08      	ble.n	800e942 <scalbn+0x9a>
 800e930:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e934:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e938:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e93c:	ec45 4b10 	vmov	d0, r4, r5
 800e940:	bd70      	pop	{r4, r5, r6, pc}
 800e942:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e946:	da08      	bge.n	800e95a <scalbn+0xb2>
 800e948:	2d00      	cmp	r5, #0
 800e94a:	a10b      	add	r1, pc, #44	@ (adr r1, 800e978 <scalbn+0xd0>)
 800e94c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e950:	dac1      	bge.n	800e8d6 <scalbn+0x2e>
 800e952:	a10f      	add	r1, pc, #60	@ (adr r1, 800e990 <scalbn+0xe8>)
 800e954:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e958:	e7bd      	b.n	800e8d6 <scalbn+0x2e>
 800e95a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e95e:	3236      	adds	r2, #54	@ 0x36
 800e960:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e964:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e968:	4620      	mov	r0, r4
 800e96a:	4b0d      	ldr	r3, [pc, #52]	@ (800e9a0 <scalbn+0xf8>)
 800e96c:	4629      	mov	r1, r5
 800e96e:	2200      	movs	r2, #0
 800e970:	e7d4      	b.n	800e91c <scalbn+0x74>
 800e972:	bf00      	nop
 800e974:	f3af 8000 	nop.w
 800e978:	c2f8f359 	.word	0xc2f8f359
 800e97c:	01a56e1f 	.word	0x01a56e1f
 800e980:	8800759c 	.word	0x8800759c
 800e984:	7e37e43c 	.word	0x7e37e43c
 800e988:	8800759c 	.word	0x8800759c
 800e98c:	fe37e43c 	.word	0xfe37e43c
 800e990:	c2f8f359 	.word	0xc2f8f359
 800e994:	81a56e1f 	.word	0x81a56e1f
 800e998:	43500000 	.word	0x43500000
 800e99c:	ffff3cb0 	.word	0xffff3cb0
 800e9a0:	3c900000 	.word	0x3c900000
 800e9a4:	00000000 	.word	0x00000000

0800e9a8 <floor>:
 800e9a8:	ec51 0b10 	vmov	r0, r1, d0
 800e9ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e9b8:	2e13      	cmp	r6, #19
 800e9ba:	460c      	mov	r4, r1
 800e9bc:	4605      	mov	r5, r0
 800e9be:	4680      	mov	r8, r0
 800e9c0:	dc34      	bgt.n	800ea2c <floor+0x84>
 800e9c2:	2e00      	cmp	r6, #0
 800e9c4:	da17      	bge.n	800e9f6 <floor+0x4e>
 800e9c6:	a332      	add	r3, pc, #200	@ (adr r3, 800ea90 <floor+0xe8>)
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	f7f1 fc5e 	bl	800028c <__adddf3>
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	f7f2 f8a0 	bl	8000b18 <__aeabi_dcmpgt>
 800e9d8:	b150      	cbz	r0, 800e9f0 <floor+0x48>
 800e9da:	2c00      	cmp	r4, #0
 800e9dc:	da55      	bge.n	800ea8a <floor+0xe2>
 800e9de:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e9e2:	432c      	orrs	r4, r5
 800e9e4:	2500      	movs	r5, #0
 800e9e6:	42ac      	cmp	r4, r5
 800e9e8:	4c2b      	ldr	r4, [pc, #172]	@ (800ea98 <floor+0xf0>)
 800e9ea:	bf08      	it	eq
 800e9ec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e9f0:	4621      	mov	r1, r4
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	e023      	b.n	800ea3e <floor+0x96>
 800e9f6:	4f29      	ldr	r7, [pc, #164]	@ (800ea9c <floor+0xf4>)
 800e9f8:	4137      	asrs	r7, r6
 800e9fa:	ea01 0307 	and.w	r3, r1, r7
 800e9fe:	4303      	orrs	r3, r0
 800ea00:	d01d      	beq.n	800ea3e <floor+0x96>
 800ea02:	a323      	add	r3, pc, #140	@ (adr r3, 800ea90 <floor+0xe8>)
 800ea04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea08:	f7f1 fc40 	bl	800028c <__adddf3>
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	2300      	movs	r3, #0
 800ea10:	f7f2 f882 	bl	8000b18 <__aeabi_dcmpgt>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	d0eb      	beq.n	800e9f0 <floor+0x48>
 800ea18:	2c00      	cmp	r4, #0
 800ea1a:	bfbe      	ittt	lt
 800ea1c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ea20:	4133      	asrlt	r3, r6
 800ea22:	18e4      	addlt	r4, r4, r3
 800ea24:	ea24 0407 	bic.w	r4, r4, r7
 800ea28:	2500      	movs	r5, #0
 800ea2a:	e7e1      	b.n	800e9f0 <floor+0x48>
 800ea2c:	2e33      	cmp	r6, #51	@ 0x33
 800ea2e:	dd0a      	ble.n	800ea46 <floor+0x9e>
 800ea30:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ea34:	d103      	bne.n	800ea3e <floor+0x96>
 800ea36:	4602      	mov	r2, r0
 800ea38:	460b      	mov	r3, r1
 800ea3a:	f7f1 fc27 	bl	800028c <__adddf3>
 800ea3e:	ec41 0b10 	vmov	d0, r0, r1
 800ea42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea46:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800ea4a:	f04f 37ff 	mov.w	r7, #4294967295
 800ea4e:	40df      	lsrs	r7, r3
 800ea50:	4207      	tst	r7, r0
 800ea52:	d0f4      	beq.n	800ea3e <floor+0x96>
 800ea54:	a30e      	add	r3, pc, #56	@ (adr r3, 800ea90 <floor+0xe8>)
 800ea56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5a:	f7f1 fc17 	bl	800028c <__adddf3>
 800ea5e:	2200      	movs	r2, #0
 800ea60:	2300      	movs	r3, #0
 800ea62:	f7f2 f859 	bl	8000b18 <__aeabi_dcmpgt>
 800ea66:	2800      	cmp	r0, #0
 800ea68:	d0c2      	beq.n	800e9f0 <floor+0x48>
 800ea6a:	2c00      	cmp	r4, #0
 800ea6c:	da0a      	bge.n	800ea84 <floor+0xdc>
 800ea6e:	2e14      	cmp	r6, #20
 800ea70:	d101      	bne.n	800ea76 <floor+0xce>
 800ea72:	3401      	adds	r4, #1
 800ea74:	e006      	b.n	800ea84 <floor+0xdc>
 800ea76:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	40b3      	lsls	r3, r6
 800ea7e:	441d      	add	r5, r3
 800ea80:	4545      	cmp	r5, r8
 800ea82:	d3f6      	bcc.n	800ea72 <floor+0xca>
 800ea84:	ea25 0507 	bic.w	r5, r5, r7
 800ea88:	e7b2      	b.n	800e9f0 <floor+0x48>
 800ea8a:	2500      	movs	r5, #0
 800ea8c:	462c      	mov	r4, r5
 800ea8e:	e7af      	b.n	800e9f0 <floor+0x48>
 800ea90:	8800759c 	.word	0x8800759c
 800ea94:	7e37e43c 	.word	0x7e37e43c
 800ea98:	bff00000 	.word	0xbff00000
 800ea9c:	000fffff 	.word	0x000fffff

0800eaa0 <_init>:
 800eaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaa2:	bf00      	nop
 800eaa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaa6:	bc08      	pop	{r3}
 800eaa8:	469e      	mov	lr, r3
 800eaaa:	4770      	bx	lr

0800eaac <_fini>:
 800eaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaae:	bf00      	nop
 800eab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eab2:	bc08      	pop	{r3}
 800eab4:	469e      	mov	lr, r3
 800eab6:	4770      	bx	lr
