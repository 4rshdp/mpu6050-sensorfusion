
mpu6050SensorFusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c530  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800c6c0  0800c6c0  0000d6c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cad0  0800cad0  0000e2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cad0  0800cad0  0000dad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cad8  0800cad8  0000e2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cad8  0800cad8  0000dad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cadc  0800cadc  0000dadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800cae0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e2c4  2**0
                  CONTENTS
 10 .bss          00001ecc  200002c4  200002c4  0000e2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002190  20002190  0000e2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000123f6  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034f3  00000000  00000000  000206ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  00023be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf7  00000000  00000000  00024bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002243f  00000000  00000000  000257b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e30  00000000  00000000  00047bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bdffd  00000000  00000000  0005da26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ba23  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005224  00000000  00000000  0011ba68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00120c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c6a8 	.word	0x0800c6a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800c6a8 	.word	0x0800c6a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e9c:	b090      	sub	sp, #64	@ 0x40
 8000e9e:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f000 fcc4 	bl	800182c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 f86a 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f000 f920 	bl	80010ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000eac:	f000 f8fe 	bl	80010ac <MX_DMA_Init>
  MX_I2C1_Init();
 8000eb0:	f000 f8ce 	bl	8001050 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000eb4:	f008 f884 	bl	8008fc0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  mpu6050Config();
 8000eb8:	f000 f9da 	bl	8001270 <mpu6050Config>
  mpu6050Read_DMA();
 8000ebc:	f000 f9ee 	bl	800129c <mpu6050Read_DMA>

  while (1)
  {

	  // Format your accelerometer and gyro readings into a string
	  snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
 8000ec0:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <main+0xc4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fb3f 	bl	8000548 <__aeabi_f2d>
 8000eca:	4604      	mov	r4, r0
 8000ecc:	460d      	mov	r5, r1
 8000ece:	4b24      	ldr	r3, [pc, #144]	@ (8000f60 <main+0xc8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fb38 	bl	8000548 <__aeabi_f2d>
 8000ed8:	4680      	mov	r8, r0
 8000eda:	4689      	mov	r9, r1
 8000edc:	4b21      	ldr	r3, [pc, #132]	@ (8000f64 <main+0xcc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fb31 	bl	8000548 <__aeabi_f2d>
 8000ee6:	4682      	mov	sl, r0
 8000ee8:	468b      	mov	fp, r1
 8000eea:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <main+0xd0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fb2a 	bl	8000548 <__aeabi_f2d>
 8000ef4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <main+0xd4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fb23 	bl	8000548 <__aeabi_f2d>
 8000f02:	e9c7 0100 	strd	r0, r1, [r7]
 8000f06:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <main+0xd8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fb1c 	bl	8000548 <__aeabi_f2d>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8000f18:	ed97 7b00 	vldr	d7, [r7]
 8000f1c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8000f20:	ed97 7b02 	vldr	d7, [r7, #8]
 8000f24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000f28:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8000f2c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000f30:	e9cd 4500 	strd	r4, r5, [sp]
 8000f34:	4a0f      	ldr	r2, [pc, #60]	@ (8000f74 <main+0xdc>)
 8000f36:	2196      	movs	r1, #150	@ 0x96
 8000f38:	480f      	ldr	r0, [pc, #60]	@ (8000f78 <main+0xe0>)
 8000f3a:	f009 fa75 	bl	800a428 <sniprintf>
			   Gx,
			   Gy,
			   Gz);

	  // Transmit via USB CDC
	  CDC_Transmit_FS((uint8_t*)usb_tx_buffer, strlen(usb_tx_buffer));
 8000f3e:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <main+0xe0>)
 8000f40:	f7ff f996 	bl	8000270 <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480b      	ldr	r0, [pc, #44]	@ (8000f78 <main+0xe0>)
 8000f4c:	f008 f8f6 	bl	800913c <CDC_Transmit_FS>

	  HAL_Delay(20);
 8000f50:	2014      	movs	r0, #20
 8000f52:	f000 fcdd 	bl	8001910 <HAL_Delay>
	  snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
 8000f56:	bf00      	nop
 8000f58:	e7b2      	b.n	8000ec0 <main+0x28>
 8000f5a:	bf00      	nop
 8000f5c:	2000042c 	.word	0x2000042c
 8000f60:	20000430 	.word	0x20000430
 8000f64:	20000434 	.word	0x20000434
 8000f68:	20000438 	.word	0x20000438
 8000f6c:	2000043c 	.word	0x2000043c
 8000f70:	20000440 	.word	0x20000440
 8000f74:	0800c6c0 	.word	0x0800c6c0
 8000f78:	20000394 	.word	0x20000394

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	@ 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	2230      	movs	r2, #48	@ 0x30
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f009 fac3 	bl	800a516 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <SystemClock_Config+0xcc>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	4a27      	ldr	r2, [pc, #156]	@ (8001048 <SystemClock_Config+0xcc>)
 8000faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb0:	4b25      	ldr	r3, [pc, #148]	@ (8001048 <SystemClock_Config+0xcc>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b22      	ldr	r3, [pc, #136]	@ (800104c <SystemClock_Config+0xd0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a21      	ldr	r2, [pc, #132]	@ (800104c <SystemClock_Config+0xd0>)
 8000fc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <SystemClock_Config+0xd0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fdc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fec:	2304      	movs	r3, #4
 8000fee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ff0:	23a8      	movs	r3, #168	@ 0xa8
 8000ff2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffc:	f107 0320 	add.w	r3, r7, #32
 8001000:	4618      	mov	r0, r3
 8001002:	f004 f83f 	bl	8005084 <HAL_RCC_OscConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800100c:	f000 f8a4 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001010:	230f      	movs	r3, #15
 8001012:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001014:	2302      	movs	r3, #2
 8001016:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800101c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001020:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001022:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001026:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2105      	movs	r1, #5
 800102e:	4618      	mov	r0, r3
 8001030:	f004 faa0 	bl	8005574 <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800103a:	f000 f88d 	bl	8001158 <Error_Handler>
  }
}
 800103e:	bf00      	nop
 8001040:	3750      	adds	r7, #80	@ 0x50
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40007000 	.word	0x40007000

08001050 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <MX_I2C1_Init+0x50>)
 8001056:	4a13      	ldr	r2, [pc, #76]	@ (80010a4 <MX_I2C1_Init+0x54>)
 8001058:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800105a:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <MX_I2C1_Init+0x50>)
 800105c:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <MX_I2C1_Init+0x58>)
 800105e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <MX_I2C1_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <MX_I2C1_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <MX_I2C1_Init+0x50>)
 800106e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001072:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001074:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <MX_I2C1_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <MX_I2C1_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001080:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	@ (80010a0 <MX_I2C1_Init+0x50>)
 800108e:	f001 faaf 	bl	80025f0 <HAL_I2C_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001098:	f000 f85e 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200002e0 	.word	0x200002e0
 80010a4:	40005400 	.word	0x40005400
 80010a8:	000186a0 	.word	0x000186a0

080010ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_DMA_Init+0x3c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a0b      	ldr	r2, [pc, #44]	@ (80010e8 <MX_DMA_Init+0x3c>)
 80010bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_DMA_Init+0x3c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	200b      	movs	r0, #11
 80010d4:	f000 fd1b 	bl	8001b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010d8:	200b      	movs	r0, #11
 80010da:	f000 fd34 	bl	8001b46 <HAL_NVIC_EnableIRQ>

}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <MX_GPIO_Init+0x68>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a16      	ldr	r2, [pc, #88]	@ (8001154 <MX_GPIO_Init+0x68>)
 80010fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_GPIO_Init+0x68>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_GPIO_Init+0x68>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a0f      	ldr	r2, [pc, #60]	@ (8001154 <MX_GPIO_Init+0x68>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <MX_GPIO_Init+0x68>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_GPIO_Init+0x68>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <MX_GPIO_Init+0x68>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_GPIO_Init+0x68>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <Error_Handler+0x8>

08001164 <mpu6050Init>:
uint8_t mpu6050Data[14];




void mpu6050Init(void){
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(
 800116a:	2364      	movs	r3, #100	@ 0x64
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	2301      	movs	r3, #1
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <mpu6050Init+0x24>)
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	2275      	movs	r2, #117	@ 0x75
 800117a:	21d0      	movs	r1, #208	@ 0xd0
 800117c:	4803      	ldr	r0, [pc, #12]	@ (800118c <mpu6050Init+0x28>)
 800117e:	f001 fc75 	bl	8002a6c <HAL_I2C_Mem_Read>
				1,
				&whoAreYou,
				1,
				100
				);
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000042a 	.word	0x2000042a
 800118c:	200002e0 	.word	0x200002e0

08001190 <mpu6050powerOn>:

void mpu6050powerOn(void){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af04      	add	r7, sp, #16
	MemData = 0x00;
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <mpu6050powerOn+0x2c>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(
 800119c:	2364      	movs	r3, #100	@ 0x64
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <mpu6050powerOn+0x2c>)
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	226b      	movs	r2, #107	@ 0x6b
 80011ac:	21d0      	movs	r1, #208	@ 0xd0
 80011ae:	4804      	ldr	r0, [pc, #16]	@ (80011c0 <mpu6050powerOn+0x30>)
 80011b0:	f001 fb62 	bl	8002878 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000042b 	.word	0x2000042b
 80011c0:	200002e0 	.word	0x200002e0

080011c4 <mpu6050Sampling>:

void mpu6050Sampling(void){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af04      	add	r7, sp, #16
	MemData = 0x07;
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <mpu6050Sampling+0x2c>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(
 80011d0:	2364      	movs	r3, #100	@ 0x64
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2301      	movs	r3, #1
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <mpu6050Sampling+0x2c>)
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	2219      	movs	r2, #25
 80011e0:	21d0      	movs	r1, #208	@ 0xd0
 80011e2:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <mpu6050Sampling+0x30>)
 80011e4:	f001 fb48 	bl	8002878 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000042b 	.word	0x2000042b
 80011f4:	200002e0 	.word	0x200002e0

080011f8 <mpu6050GyroScale>:

void mpu6050GyroScale(gyroScale_t scale){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af04      	add	r7, sp, #16
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	MemData = 0x00 | (scale << 3);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b08      	ldr	r3, [pc, #32]	@ (800122c <mpu6050GyroScale+0x34>)
 800120a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(
 800120c:	2364      	movs	r3, #100	@ 0x64
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2301      	movs	r3, #1
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <mpu6050GyroScale+0x34>)
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	221b      	movs	r2, #27
 800121c:	21d0      	movs	r1, #208	@ 0xd0
 800121e:	4804      	ldr	r0, [pc, #16]	@ (8001230 <mpu6050GyroScale+0x38>)
 8001220:	f001 fb2a 	bl	8002878 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000042b 	.word	0x2000042b
 8001230:	200002e0 	.word	0x200002e0

08001234 <mpu6050AccelScale>:

void mpu6050AccelScale(accelScale_t scale){
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af04      	add	r7, sp, #16
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	MemData = 0x00 | (scale << 3);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <mpu6050AccelScale+0x34>)
 8001246:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(
 8001248:	2364      	movs	r3, #100	@ 0x64
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	2301      	movs	r3, #1
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <mpu6050AccelScale+0x34>)
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	221c      	movs	r2, #28
 8001258:	21d0      	movs	r1, #208	@ 0xd0
 800125a:	4804      	ldr	r0, [pc, #16]	@ (800126c <mpu6050AccelScale+0x38>)
 800125c:	f001 fb0c 	bl	8002878 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000042b 	.word	0x2000042b
 800126c:	200002e0 	.word	0x200002e0

08001270 <mpu6050Config>:

void mpu6050Config(void){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	// is valid Condition true 0x68
	mpu6050Init();
 8001274:	f7ff ff76 	bl	8001164 <mpu6050Init>

	if(validCondition1){
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <mpu6050Config+0x28>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b68      	cmp	r3, #104	@ 0x68
 800127e:	d109      	bne.n	8001294 <mpu6050Config+0x24>
	// power on
		mpu6050powerOn();
 8001280:	f7ff ff86 	bl	8001190 <mpu6050powerOn>
	// sampling data ratio
		mpu6050Sampling();
 8001284:	f7ff ff9e 	bl	80011c4 <mpu6050Sampling>
	// gyro scale   (RAW)
		mpu6050GyroScale(degS2000);
 8001288:	2003      	movs	r0, #3
 800128a:	f7ff ffb5 	bl	80011f8 <mpu6050GyroScale>
	// accel scale  (RAW)
		mpu6050AccelScale(g16);
 800128e:	2003      	movs	r0, #3
 8001290:	f7ff ffd0 	bl	8001234 <mpu6050AccelScale>
	}
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000042a 	.word	0x2000042a

0800129c <mpu6050Read_DMA>:
	Ay = RAWaccelY/2048.0;
	Az = RAWaccelZ/2048.0;
}


void mpu6050Read_DMA(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(&hi2c1,
 80012a2:	230e      	movs	r3, #14
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <mpu6050Read_DMA+0x28>)
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	223b      	movs	r2, #59	@ 0x3b
 80012ae:	21d0      	movs	r1, #208	@ 0xd0
 80012b0:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <mpu6050Read_DMA+0x2c>)
 80012b2:	f001 fe0d 	bl	8002ed0 <HAL_I2C_Mem_Read_DMA>
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
                                                    mpu6050Data,// Buffer to store the 14 bytes
                                                    14);        // Number of bytes to read
    if(status != HAL_OK) {
        // Handle error here, e.g., log or trigger an error flag.
    }
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000448 	.word	0x20000448
 80012c8:	200002e0 	.word	0x200002e0

080012cc <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    if(hi2c->Instance == I2C1) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a53      	ldr	r2, [pc, #332]	@ (8001428 <HAL_I2C_MemRxCpltCallback+0x15c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	f040 80a0 	bne.w	8001420 <HAL_I2C_MemRxCpltCallback+0x154>
        // Accelerometer data conversion
        int16_t rawAccelX = (int16_t)((mpu6050Data[0] << 8) | mpu6050Data[1]);
 80012e0:	4b52      	ldr	r3, [pc, #328]	@ (800142c <HAL_I2C_MemRxCpltCallback+0x160>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	4b50      	ldr	r3, [pc, #320]	@ (800142c <HAL_I2C_MemRxCpltCallback+0x160>)
 80012ea:	785b      	ldrb	r3, [r3, #1]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	82fb      	strh	r3, [r7, #22]
        int16_t rawAccelY = (int16_t)((mpu6050Data[2] << 8) | mpu6050Data[3]);
 80012f2:	4b4e      	ldr	r3, [pc, #312]	@ (800142c <HAL_I2C_MemRxCpltCallback+0x160>)
 80012f4:	789b      	ldrb	r3, [r3, #2]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	4b4c      	ldr	r3, [pc, #304]	@ (800142c <HAL_I2C_MemRxCpltCallback+0x160>)
 80012fc:	78db      	ldrb	r3, [r3, #3]
 80012fe:	b21b      	sxth	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	82bb      	strh	r3, [r7, #20]
        int16_t rawAccelZ = (int16_t)((mpu6050Data[4] << 8) | mpu6050Data[5]);
 8001304:	4b49      	ldr	r3, [pc, #292]	@ (800142c <HAL_I2C_MemRxCpltCallback+0x160>)
 8001306:	791b      	ldrb	r3, [r3, #4]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b47      	ldr	r3, [pc, #284]	@ (800142c <HAL_I2C_MemRxCpltCallback+0x160>)
 800130e:	795b      	ldrb	r3, [r3, #5]
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	827b      	strh	r3, [r7, #18]

        // Temperature data conversion
        int16_t rawTemp = (int16_t)((mpu6050Data[6] << 8) | mpu6050Data[7]);
 8001316:	4b45      	ldr	r3, [pc, #276]	@ (800142c <HAL_I2C_MemRxCpltCallback+0x160>)
 8001318:	799b      	ldrb	r3, [r3, #6]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21a      	sxth	r2, r3
 800131e:	4b43      	ldr	r3, [pc, #268]	@ (800142c <HAL_I2C_MemRxCpltCallback+0x160>)
 8001320:	79db      	ldrb	r3, [r3, #7]
 8001322:	b21b      	sxth	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	823b      	strh	r3, [r7, #16]
        // Conversion formula example: actualTemp = (rawTemp / 340.0) + 36.53

        // Gyro data conversion
        int16_t rawGyroX = (int16_t)((mpu6050Data[8]  << 8) | mpu6050Data[9]);
 8001328:	4b40      	ldr	r3, [pc, #256]	@ (800142c <HAL_I2C_MemRxCpltCallback+0x160>)
 800132a:	7a1b      	ldrb	r3, [r3, #8]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21a      	sxth	r2, r3
 8001330:	4b3e      	ldr	r3, [pc, #248]	@ (800142c <HAL_I2C_MemRxCpltCallback+0x160>)
 8001332:	7a5b      	ldrb	r3, [r3, #9]
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	81fb      	strh	r3, [r7, #14]
        int16_t rawGyroY = (int16_t)((mpu6050Data[10] << 8) | mpu6050Data[11]);
 800133a:	4b3c      	ldr	r3, [pc, #240]	@ (800142c <HAL_I2C_MemRxCpltCallback+0x160>)
 800133c:	7a9b      	ldrb	r3, [r3, #10]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b21a      	sxth	r2, r3
 8001342:	4b3a      	ldr	r3, [pc, #232]	@ (800142c <HAL_I2C_MemRxCpltCallback+0x160>)
 8001344:	7adb      	ldrb	r3, [r3, #11]
 8001346:	b21b      	sxth	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	81bb      	strh	r3, [r7, #12]
        int16_t rawGyroZ = (int16_t)((mpu6050Data[12] << 8) | mpu6050Data[13]);
 800134c:	4b37      	ldr	r3, [pc, #220]	@ (800142c <HAL_I2C_MemRxCpltCallback+0x160>)
 800134e:	7b1b      	ldrb	r3, [r3, #12]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b21a      	sxth	r2, r3
 8001354:	4b35      	ldr	r3, [pc, #212]	@ (800142c <HAL_I2C_MemRxCpltCallback+0x160>)
 8001356:	7b5b      	ldrb	r3, [r3, #13]
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	817b      	strh	r3, [r7, #10]


        Ax = rawAccelX / 2048.0f;
 800135e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800136a:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001430 <HAL_I2C_MemRxCpltCallback+0x164>
 800136e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001372:	4b30      	ldr	r3, [pc, #192]	@ (8001434 <HAL_I2C_MemRxCpltCallback+0x168>)
 8001374:	edc3 7a00 	vstr	s15, [r3]
        Ay = rawAccelY / 2048.0f;
 8001378:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001384:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8001430 <HAL_I2C_MemRxCpltCallback+0x164>
 8001388:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138c:	4b2a      	ldr	r3, [pc, #168]	@ (8001438 <HAL_I2C_MemRxCpltCallback+0x16c>)
 800138e:	edc3 7a00 	vstr	s15, [r3]
        Az = rawAccelZ / 2048.0f;
 8001392:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139e:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001430 <HAL_I2C_MemRxCpltCallback+0x164>
 80013a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a6:	4b25      	ldr	r3, [pc, #148]	@ (800143c <HAL_I2C_MemRxCpltCallback+0x170>)
 80013a8:	edc3 7a00 	vstr	s15, [r3]

        temperature = (rawTemp / 340.0f) + 36.53f; // Example conversion formula
 80013ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001440 <HAL_I2C_MemRxCpltCallback+0x174>
 80013bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c0:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001444 <HAL_I2C_MemRxCpltCallback+0x178>
 80013c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <HAL_I2C_MemRxCpltCallback+0x17c>)
 80013ca:	edc3 7a00 	vstr	s15, [r3]

        Gx = rawGyroX / 16.4f;
 80013ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013da:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800144c <HAL_I2C_MemRxCpltCallback+0x180>
 80013de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_I2C_MemRxCpltCallback+0x184>)
 80013e4:	edc3 7a00 	vstr	s15, [r3]
        Gy = rawGyroY / 16.4f;
 80013e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f4:	eddf 6a15 	vldr	s13, [pc, #84]	@ 800144c <HAL_I2C_MemRxCpltCallback+0x180>
 80013f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fc:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_I2C_MemRxCpltCallback+0x188>)
 80013fe:	edc3 7a00 	vstr	s15, [r3]
        Gz = rawGyroZ / 16.4f;
 8001402:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800144c <HAL_I2C_MemRxCpltCallback+0x180>
 8001412:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <HAL_I2C_MemRxCpltCallback+0x18c>)
 8001418:	edc3 7a00 	vstr	s15, [r3]
        // Process or store these values as needed
        // For example, update global variables or send them to another module

        // If you need continuous reading and are not using circular mode,
        // you can re-initiate the DMA read here.
        mpu6050Read_DMA();
 800141c:	f7ff ff3e 	bl	800129c <mpu6050Read_DMA>
    }
}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40005400 	.word	0x40005400
 800142c:	20000448 	.word	0x20000448
 8001430:	45000000 	.word	0x45000000
 8001434:	2000042c 	.word	0x2000042c
 8001438:	20000430 	.word	0x20000430
 800143c:	20000434 	.word	0x20000434
 8001440:	43aa0000 	.word	0x43aa0000
 8001444:	42121eb8 	.word	0x42121eb8
 8001448:	20000444 	.word	0x20000444
 800144c:	41833333 	.word	0x41833333
 8001450:	20000438 	.word	0x20000438
 8001454:	2000043c 	.word	0x2000043c
 8001458:	20000440 	.word	0x20000440

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	4a0f      	ldr	r2, [pc, #60]	@ (80014a8 <HAL_MspInit+0x4c>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001470:	6453      	str	r3, [r2, #68]	@ 0x44
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	@ 0x40
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a30      	ldr	r2, [pc, #192]	@ (800158c <HAL_I2C_MspInit+0xe0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d15a      	bne.n	8001584 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001590 <HAL_I2C_MspInit+0xe4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001590 <HAL_I2C_MspInit+0xe4>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b2c      	ldr	r3, [pc, #176]	@ (8001590 <HAL_I2C_MspInit+0xe4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ea:	23c0      	movs	r3, #192	@ 0xc0
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ee:	2312      	movs	r3, #18
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014fa:	2304      	movs	r3, #4
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4823      	ldr	r0, [pc, #140]	@ (8001594 <HAL_I2C_MspInit+0xe8>)
 8001506:	f000 fed7 	bl	80022b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b20      	ldr	r3, [pc, #128]	@ (8001590 <HAL_I2C_MspInit+0xe4>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a1f      	ldr	r2, [pc, #124]	@ (8001590 <HAL_I2C_MspInit+0xe4>)
 8001514:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <HAL_I2C_MspInit+0xe4>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001526:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <HAL_I2C_MspInit+0xec>)
 8001528:	4a1c      	ldr	r2, [pc, #112]	@ (800159c <HAL_I2C_MspInit+0xf0>)
 800152a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800152c:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <HAL_I2C_MspInit+0xec>)
 800152e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001532:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001534:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <HAL_I2C_MspInit+0xec>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800153a:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <HAL_I2C_MspInit+0xec>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001540:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <HAL_I2C_MspInit+0xec>)
 8001542:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001546:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001548:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <HAL_I2C_MspInit+0xec>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800154e:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_I2C_MspInit+0xec>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001554:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <HAL_I2C_MspInit+0xec>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_I2C_MspInit+0xec>)
 800155c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001560:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001562:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <HAL_I2C_MspInit+0xec>)
 8001564:	2200      	movs	r2, #0
 8001566:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001568:	480b      	ldr	r0, [pc, #44]	@ (8001598 <HAL_I2C_MspInit+0xec>)
 800156a:	f000 fb07 	bl	8001b7c <HAL_DMA_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001574:	f7ff fdf0 	bl	8001158 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <HAL_I2C_MspInit+0xec>)
 800157c:	639a      	str	r2, [r3, #56]	@ 0x38
 800157e:	4a06      	ldr	r2, [pc, #24]	@ (8001598 <HAL_I2C_MspInit+0xec>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001584:	bf00      	nop
 8001586:	3728      	adds	r7, #40	@ 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40005400 	.word	0x40005400
 8001590:	40023800 	.word	0x40023800
 8001594:	40020400 	.word	0x40020400
 8001598:	20000334 	.word	0x20000334
 800159c:	40026010 	.word	0x40026010

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <NMI_Handler+0x4>

080015a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <MemManage_Handler+0x4>

080015b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f6:	f000 f96b 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <DMA1_Stream0_IRQHandler+0x10>)
 8001606:	f000 fbe1 	bl	8001dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000334 	.word	0x20000334

08001614 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <OTG_FS_IRQHandler+0x10>)
 800161a:	f002 fc25 	bl	8003e68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20001940 	.word	0x20001940

08001628 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return 1;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_kill>:

int _kill(int pid, int sig)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001642:	f008 ffbb 	bl	800a5bc <__errno>
 8001646:	4603      	mov	r3, r0
 8001648:	2216      	movs	r2, #22
 800164a:	601a      	str	r2, [r3, #0]
  return -1;
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_exit>:

void _exit (int status)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ffe7 	bl	8001638 <_kill>
  while (1) {}    /* Make sure we hang here */
 800166a:	bf00      	nop
 800166c:	e7fd      	b.n	800166a <_exit+0x12>

0800166e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e00a      	b.n	8001696 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001680:	f3af 8000 	nop.w
 8001684:	4601      	mov	r1, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	60ba      	str	r2, [r7, #8]
 800168c:	b2ca      	uxtb	r2, r1
 800168e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3301      	adds	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	429a      	cmp	r2, r3
 800169c:	dbf0      	blt.n	8001680 <_read+0x12>
  }

  return len;
 800169e:	687b      	ldr	r3, [r7, #4]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	e009      	b.n	80016ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	60ba      	str	r2, [r7, #8]
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	dbf1      	blt.n	80016ba <_write+0x12>
  }
  return len;
 80016d6:	687b      	ldr	r3, [r7, #4]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_close>:

int _close(int file)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001708:	605a      	str	r2, [r3, #4]
  return 0;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_isatty>:

int _isatty(int file)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800172e:	b480      	push	{r7}
 8001730:	b085      	sub	sp, #20
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f008 ff20 	bl	800a5bc <__errno>
 800177c:	4603      	mov	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20020000 	.word	0x20020000
 80017a8:	00000400 	.word	0x00000400
 80017ac:	20000458 	.word	0x20000458
 80017b0:	20002190 	.word	0x20002190

080017b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <SystemInit+0x20>)
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017be:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <SystemInit+0x20>)
 80017c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001810 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017dc:	f7ff ffea 	bl	80017b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001806:	f008 fedf 	bl	800a5c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180a:	f7ff fb45 	bl	8000e98 <main>
  bx  lr    
 800180e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001810:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 800181c:	0800cae0 	.word	0x0800cae0
  ldr r2, =_sbss
 8001820:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001824:	20002190 	.word	0x20002190

08001828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC_IRQHandler>
	...

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001830:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <HAL_Init+0x40>)
 8001836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800183c:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <HAL_Init+0x40>)
 8001842:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a07      	ldr	r2, [pc, #28]	@ (800186c <HAL_Init+0x40>)
 800184e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f000 f94f 	bl	8001af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185a:	200f      	movs	r0, #15
 800185c:	f000 f808 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001860:	f7ff fdfc 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023c00 	.word	0x40023c00

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <HAL_InitTick+0x54>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_InitTick+0x58>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f967 	bl	8001b62 <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d80a      	bhi.n	80018ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f000 f92f 	bl	8001b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4a06      	ldr	r2, [pc, #24]	@ (80018cc <HAL_InitTick+0x5c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000004 	.word	0x20000004

080018d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_IncTick+0x20>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_IncTick+0x24>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <HAL_IncTick+0x24>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008
 80018f4:	2000045c 	.word	0x2000045c

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	2000045c 	.word	0x2000045c

08001910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff ffee 	bl	80018f8 <HAL_GetTick>
 800191c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d005      	beq.n	8001936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_Delay+0x44>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001936:	bf00      	nop
 8001938:	f7ff ffde 	bl	80018f8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	429a      	cmp	r2, r3
 8001946:	d8f7      	bhi.n	8001938 <HAL_Delay+0x28>
  {
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000008 	.word	0x20000008

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4907      	ldr	r1, [pc, #28]	@ (80019f4 <__NVIC_EnableIRQ+0x38>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	@ (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	@ (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	@ 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
         );
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	@ 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac4:	d301      	bcc.n	8001aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00f      	b.n	8001aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <SysTick_Config+0x40>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f7ff ff8e 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <SysTick_Config+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae2:	4b04      	ldr	r3, [pc, #16]	@ (8001af4 <SysTick_Config+0x40>)
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff29 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b20:	f7ff ff3e 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	6978      	ldr	r0, [r7, #20]
 8001b2c:	f7ff ff8e 	bl	8001a4c <NVIC_EncodePriority>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff5d 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff31 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffa2 	bl	8001ab4 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff feb6 	bl	80018f8 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e099      	b.n	8001ccc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb8:	e00f      	b.n	8001bda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bba:	f7ff fe9d 	bl	80018f8 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d908      	bls.n	8001bda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e078      	b.n	8001ccc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e8      	bne.n	8001bba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	4b38      	ldr	r3, [pc, #224]	@ (8001cd4 <HAL_DMA_Init+0x158>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d107      	bne.n	8001c44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f023 0307 	bic.w	r3, r3, #7
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d117      	bne.n	8001c9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00e      	beq.n	8001c9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fa9d 	bl	80021c0 <DMA_CheckFifoParam>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2240      	movs	r2, #64	@ 0x40
 8001c90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e016      	b.n	8001ccc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fa54 	bl	8002154 <DMA_CalcBaseAndBitshift>
 8001cac:	4603      	mov	r3, r0
 8001cae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb4:	223f      	movs	r2, #63	@ 0x3f
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	f010803f 	.word	0xf010803f

08001cd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_DMA_Start_IT+0x26>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e040      	b.n	8001d80 <HAL_DMA_Start_IT+0xa8>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d12f      	bne.n	8001d72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f9e6 	bl	80020f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d30:	223f      	movs	r2, #63	@ 0x3f
 8001d32:	409a      	lsls	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0216 	orr.w	r2, r2, #22
 8001d46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0208 	orr.w	r2, r2, #8
 8001d5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e005      	b.n	8001d7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d004      	beq.n	8001da6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2280      	movs	r2, #128	@ 0x80
 8001da0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00c      	b.n	8001dc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2205      	movs	r2, #5
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dd8:	4b8e      	ldr	r3, [pc, #568]	@ (8002014 <HAL_DMA_IRQHandler+0x248>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a8e      	ldr	r2, [pc, #568]	@ (8002018 <HAL_DMA_IRQHandler+0x24c>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0a9b      	lsrs	r3, r3, #10
 8001de4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df6:	2208      	movs	r2, #8
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0204 	bic.w	r2, r2, #4
 8001e1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e24:	2208      	movs	r2, #8
 8001e26:	409a      	lsls	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d012      	beq.n	8001e6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e66:	f043 0202 	orr.w	r2, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e72:	2204      	movs	r2, #4
 8001e74:	409a      	lsls	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d012      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00b      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e90:	2204      	movs	r2, #4
 8001e92:	409a      	lsls	r2, r3
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9c:	f043 0204 	orr.w	r2, r3, #4
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d043      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d03c      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d018      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d108      	bne.n	8001efc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d024      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
 8001efa:	e01f      	b.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
 8001f0c:	e016      	b.n	8001f3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0208 	bic.w	r2, r2, #8
 8001f2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f40:	2220      	movs	r2, #32
 8001f42:	409a      	lsls	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 808f 	beq.w	800206c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8087 	beq.w	800206c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f62:	2220      	movs	r2, #32
 8001f64:	409a      	lsls	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d136      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0216 	bic.w	r2, r2, #22
 8001f84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d103      	bne.n	8001fa6 <HAL_DMA_IRQHandler+0x1da>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0208 	bic.w	r2, r2, #8
 8001fb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	223f      	movs	r2, #63	@ 0x3f
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d07e      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
        }
        return;
 8001fe2:	e079      	b.n	80020d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d01d      	beq.n	800202e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10d      	bne.n	800201c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002004:	2b00      	cmp	r3, #0
 8002006:	d031      	beq.n	800206c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
 8002010:	e02c      	b.n	800206c <HAL_DMA_IRQHandler+0x2a0>
 8002012:	bf00      	nop
 8002014:	20000000 	.word	0x20000000
 8002018:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d023      	beq.n	800206c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
 800202c:	e01e      	b.n	800206c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10f      	bne.n	800205c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0210 	bic.w	r2, r2, #16
 800204a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	2b00      	cmp	r3, #0
 8002072:	d032      	beq.n	80020da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d022      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2205      	movs	r2, #5
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	3301      	adds	r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d307      	bcc.n	80020b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f2      	bne.n	8002098 <HAL_DMA_IRQHandler+0x2cc>
 80020b2:	e000      	b.n	80020b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	4798      	blx	r3
 80020d6:	e000      	b.n	80020da <HAL_DMA_IRQHandler+0x30e>
        return;
 80020d8:	bf00      	nop
    }
  }
}
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002114:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b40      	cmp	r3, #64	@ 0x40
 8002124:	d108      	bne.n	8002138 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002136:	e007      	b.n	8002148 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	60da      	str	r2, [r3, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	3b10      	subs	r3, #16
 8002164:	4a14      	ldr	r2, [pc, #80]	@ (80021b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800216e:	4a13      	ldr	r2, [pc, #76]	@ (80021bc <DMA_CalcBaseAndBitshift+0x68>)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4413      	add	r3, r2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d909      	bls.n	8002196 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800218a:	f023 0303 	bic.w	r3, r3, #3
 800218e:	1d1a      	adds	r2, r3, #4
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	659a      	str	r2, [r3, #88]	@ 0x58
 8002194:	e007      	b.n	80021a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800219e:	f023 0303 	bic.w	r3, r3, #3
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	aaaaaaab 	.word	0xaaaaaaab
 80021bc:	0800c758 	.word	0x0800c758

080021c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d11f      	bne.n	800221a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d856      	bhi.n	800228e <DMA_CheckFifoParam+0xce>
 80021e0:	a201      	add	r2, pc, #4	@ (adr r2, 80021e8 <DMA_CheckFifoParam+0x28>)
 80021e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e6:	bf00      	nop
 80021e8:	080021f9 	.word	0x080021f9
 80021ec:	0800220b 	.word	0x0800220b
 80021f0:	080021f9 	.word	0x080021f9
 80021f4:	0800228f 	.word	0x0800228f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d046      	beq.n	8002292 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002208:	e043      	b.n	8002292 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002212:	d140      	bne.n	8002296 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002218:	e03d      	b.n	8002296 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002222:	d121      	bne.n	8002268 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d837      	bhi.n	800229a <DMA_CheckFifoParam+0xda>
 800222a:	a201      	add	r2, pc, #4	@ (adr r2, 8002230 <DMA_CheckFifoParam+0x70>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	08002241 	.word	0x08002241
 8002234:	08002247 	.word	0x08002247
 8002238:	08002241 	.word	0x08002241
 800223c:	08002259 	.word	0x08002259
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
      break;
 8002244:	e030      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d025      	beq.n	800229e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002256:	e022      	b.n	800229e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002260:	d11f      	bne.n	80022a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002266:	e01c      	b.n	80022a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d903      	bls.n	8002276 <DMA_CheckFifoParam+0xb6>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b03      	cmp	r3, #3
 8002272:	d003      	beq.n	800227c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002274:	e018      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
      break;
 800227a:	e015      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00e      	beq.n	80022a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
      break;
 800228c:	e00b      	b.n	80022a6 <DMA_CheckFifoParam+0xe6>
      break;
 800228e:	bf00      	nop
 8002290:	e00a      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002292:	bf00      	nop
 8002294:	e008      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002296:	bf00      	nop
 8002298:	e006      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 800229a:	bf00      	nop
 800229c:	e004      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 800229e:	bf00      	nop
 80022a0:	e002      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022a2:	bf00      	nop
 80022a4:	e000      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 80022a6:	bf00      	nop
    }
  } 
  
  return status; 
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	@ 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e16b      	b.n	80025ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 815a 	bne.w	80025a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d005      	beq.n	800230a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002306:	2b02      	cmp	r3, #2
 8002308:	d130      	bne.n	800236c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	2203      	movs	r2, #3
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002340:	2201      	movs	r2, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 0201 	and.w	r2, r3, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b03      	cmp	r3, #3
 8002376:	d017      	beq.n	80023a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d123      	bne.n	80023fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	08da      	lsrs	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3208      	adds	r2, #8
 80023f6:	69b9      	ldr	r1, [r7, #24]
 80023f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0203 	and.w	r2, r3, #3
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80b4 	beq.w	80025a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b60      	ldr	r3, [pc, #384]	@ (80025c4 <HAL_GPIO_Init+0x30c>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	4a5f      	ldr	r2, [pc, #380]	@ (80025c4 <HAL_GPIO_Init+0x30c>)
 8002448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800244c:	6453      	str	r3, [r2, #68]	@ 0x44
 800244e:	4b5d      	ldr	r3, [pc, #372]	@ (80025c4 <HAL_GPIO_Init+0x30c>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245a:	4a5b      	ldr	r2, [pc, #364]	@ (80025c8 <HAL_GPIO_Init+0x310>)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	220f      	movs	r2, #15
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a52      	ldr	r2, [pc, #328]	@ (80025cc <HAL_GPIO_Init+0x314>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d02b      	beq.n	80024de <HAL_GPIO_Init+0x226>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a51      	ldr	r2, [pc, #324]	@ (80025d0 <HAL_GPIO_Init+0x318>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d025      	beq.n	80024da <HAL_GPIO_Init+0x222>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a50      	ldr	r2, [pc, #320]	@ (80025d4 <HAL_GPIO_Init+0x31c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01f      	beq.n	80024d6 <HAL_GPIO_Init+0x21e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4f      	ldr	r2, [pc, #316]	@ (80025d8 <HAL_GPIO_Init+0x320>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d019      	beq.n	80024d2 <HAL_GPIO_Init+0x21a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4e      	ldr	r2, [pc, #312]	@ (80025dc <HAL_GPIO_Init+0x324>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_GPIO_Init+0x216>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4d      	ldr	r2, [pc, #308]	@ (80025e0 <HAL_GPIO_Init+0x328>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00d      	beq.n	80024ca <HAL_GPIO_Init+0x212>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4c      	ldr	r2, [pc, #304]	@ (80025e4 <HAL_GPIO_Init+0x32c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d007      	beq.n	80024c6 <HAL_GPIO_Init+0x20e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4b      	ldr	r2, [pc, #300]	@ (80025e8 <HAL_GPIO_Init+0x330>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <HAL_GPIO_Init+0x20a>
 80024be:	2307      	movs	r3, #7
 80024c0:	e00e      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024c2:	2308      	movs	r3, #8
 80024c4:	e00c      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024c6:	2306      	movs	r3, #6
 80024c8:	e00a      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024ca:	2305      	movs	r3, #5
 80024cc:	e008      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024ce:	2304      	movs	r3, #4
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024d2:	2303      	movs	r3, #3
 80024d4:	e004      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024de:	2300      	movs	r3, #0
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f002 0203 	and.w	r2, r2, #3
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	4093      	lsls	r3, r2
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f0:	4935      	ldr	r1, [pc, #212]	@ (80025c8 <HAL_GPIO_Init+0x310>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fe:	4b3b      	ldr	r3, [pc, #236]	@ (80025ec <HAL_GPIO_Init+0x334>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002522:	4a32      	ldr	r2, [pc, #200]	@ (80025ec <HAL_GPIO_Init+0x334>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002528:	4b30      	ldr	r3, [pc, #192]	@ (80025ec <HAL_GPIO_Init+0x334>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800254c:	4a27      	ldr	r2, [pc, #156]	@ (80025ec <HAL_GPIO_Init+0x334>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002552:	4b26      	ldr	r3, [pc, #152]	@ (80025ec <HAL_GPIO_Init+0x334>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002576:	4a1d      	ldr	r2, [pc, #116]	@ (80025ec <HAL_GPIO_Init+0x334>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800257c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ec <HAL_GPIO_Init+0x334>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a0:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <HAL_GPIO_Init+0x334>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	f67f ae90 	bls.w	80022d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3724      	adds	r7, #36	@ 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020c00 	.word	0x40020c00
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40021400 	.word	0x40021400
 80025e4:	40021800 	.word	0x40021800
 80025e8:	40021c00 	.word	0x40021c00
 80025ec:	40013c00 	.word	0x40013c00

080025f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e12b      	b.n	800285a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe ff48 	bl	80014ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2224      	movs	r2, #36	@ 0x24
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002654:	f003 f986 	bl	8005964 <HAL_RCC_GetPCLK1Freq>
 8002658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4a81      	ldr	r2, [pc, #516]	@ (8002864 <HAL_I2C_Init+0x274>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d807      	bhi.n	8002674 <HAL_I2C_Init+0x84>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a80      	ldr	r2, [pc, #512]	@ (8002868 <HAL_I2C_Init+0x278>)
 8002668:	4293      	cmp	r3, r2
 800266a:	bf94      	ite	ls
 800266c:	2301      	movls	r3, #1
 800266e:	2300      	movhi	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e006      	b.n	8002682 <HAL_I2C_Init+0x92>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a7d      	ldr	r2, [pc, #500]	@ (800286c <HAL_I2C_Init+0x27c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	bf94      	ite	ls
 800267c:	2301      	movls	r3, #1
 800267e:	2300      	movhi	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0e7      	b.n	800285a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4a78      	ldr	r2, [pc, #480]	@ (8002870 <HAL_I2C_Init+0x280>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	0c9b      	lsrs	r3, r3, #18
 8002694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002864 <HAL_I2C_Init+0x274>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d802      	bhi.n	80026c4 <HAL_I2C_Init+0xd4>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	3301      	adds	r3, #1
 80026c2:	e009      	b.n	80026d8 <HAL_I2C_Init+0xe8>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	4a69      	ldr	r2, [pc, #420]	@ (8002874 <HAL_I2C_Init+0x284>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	099b      	lsrs	r3, r3, #6
 80026d6:	3301      	adds	r3, #1
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	430b      	orrs	r3, r1
 80026de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	495c      	ldr	r1, [pc, #368]	@ (8002864 <HAL_I2C_Init+0x274>)
 80026f4:	428b      	cmp	r3, r1
 80026f6:	d819      	bhi.n	800272c <HAL_I2C_Init+0x13c>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e59      	subs	r1, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fbb1 f3f3 	udiv	r3, r1, r3
 8002706:	1c59      	adds	r1, r3, #1
 8002708:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800270c:	400b      	ands	r3, r1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_I2C_Init+0x138>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1e59      	subs	r1, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002720:	3301      	adds	r3, #1
 8002722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002726:	e051      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 8002728:	2304      	movs	r3, #4
 800272a:	e04f      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d111      	bne.n	8002758 <HAL_I2C_Init+0x168>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e58      	subs	r0, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	440b      	add	r3, r1
 8002742:	fbb0 f3f3 	udiv	r3, r0, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	e012      	b.n	800277e <HAL_I2C_Init+0x18e>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1e58      	subs	r0, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	0099      	lsls	r1, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	fbb0 f3f3 	udiv	r3, r0, r3
 800276e:	3301      	adds	r3, #1
 8002770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_Init+0x196>
 8002782:	2301      	movs	r3, #1
 8002784:	e022      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10e      	bne.n	80027ac <HAL_I2C_Init+0x1bc>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1e58      	subs	r0, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	440b      	add	r3, r1
 800279c:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027aa:	e00f      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1e58      	subs	r0, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6859      	ldr	r1, [r3, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	0099      	lsls	r1, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	6809      	ldr	r1, [r1, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6911      	ldr	r1, [r2, #16]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68d2      	ldr	r2, [r2, #12]
 8002806:	4311      	orrs	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	430b      	orrs	r3, r1
 800280e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	000186a0 	.word	0x000186a0
 8002868:	001e847f 	.word	0x001e847f
 800286c:	003d08ff 	.word	0x003d08ff
 8002870:	431bde83 	.word	0x431bde83
 8002874:	10624dd3 	.word	0x10624dd3

08002878 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4603      	mov	r3, r0
 8002888:	817b      	strh	r3, [r7, #10]
 800288a:	460b      	mov	r3, r1
 800288c:	813b      	strh	r3, [r7, #8]
 800288e:	4613      	mov	r3, r2
 8002890:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002892:	f7ff f831 	bl	80018f8 <HAL_GetTick>
 8002896:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	f040 80d9 	bne.w	8002a58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	2319      	movs	r3, #25
 80028ac:	2201      	movs	r2, #1
 80028ae:	496d      	ldr	r1, [pc, #436]	@ (8002a64 <HAL_I2C_Mem_Write+0x1ec>)
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 ff5f 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028bc:	2302      	movs	r3, #2
 80028be:	e0cc      	b.n	8002a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_I2C_Mem_Write+0x56>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e0c5      	b.n	8002a5a <HAL_I2C_Mem_Write+0x1e2>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d007      	beq.n	80028f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002902:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2221      	movs	r2, #33	@ 0x21
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2240      	movs	r2, #64	@ 0x40
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a3a      	ldr	r2, [r7, #32]
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002924:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a4d      	ldr	r2, [pc, #308]	@ (8002a68 <HAL_I2C_Mem_Write+0x1f0>)
 8002934:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002936:	88f8      	ldrh	r0, [r7, #6]
 8002938:	893a      	ldrh	r2, [r7, #8]
 800293a:	8979      	ldrh	r1, [r7, #10]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4603      	mov	r3, r0
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 fc7a 	bl	8003240 <I2C_RequestMemoryWrite>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d052      	beq.n	80029f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e081      	b.n	8002a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f001 f824 	bl	80039a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00d      	beq.n	8002982 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	2b04      	cmp	r3, #4
 800296c:	d107      	bne.n	800297e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800297c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e06b      	b.n	8002a5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	781a      	ldrb	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d11b      	bne.n	80029f8 <HAL_I2C_Mem_Write+0x180>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d017      	beq.n	80029f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1aa      	bne.n	8002956 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f001 f817 	bl	8003a38 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d107      	bne.n	8002a28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e016      	b.n	8002a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	00100002 	.word	0x00100002
 8002a68:	ffff0000 	.word	0xffff0000

08002a6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08c      	sub	sp, #48	@ 0x30
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	4608      	mov	r0, r1
 8002a76:	4611      	mov	r1, r2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	817b      	strh	r3, [r7, #10]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	813b      	strh	r3, [r7, #8]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a86:	f7fe ff37 	bl	80018f8 <HAL_GetTick>
 8002a8a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	f040 8214 	bne.w	8002ec2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	2319      	movs	r3, #25
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	497b      	ldr	r1, [pc, #492]	@ (8002c90 <HAL_I2C_Mem_Read+0x224>)
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fe65 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e207      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_I2C_Mem_Read+0x56>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e200      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x458>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d007      	beq.n	8002ae8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002af6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2222      	movs	r2, #34	@ 0x22
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2240      	movs	r2, #64	@ 0x40
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4a5b      	ldr	r2, [pc, #364]	@ (8002c94 <HAL_I2C_Mem_Read+0x228>)
 8002b28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b2a:	88f8      	ldrh	r0, [r7, #6]
 8002b2c:	893a      	ldrh	r2, [r7, #8]
 8002b2e:	8979      	ldrh	r1, [r7, #10]
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	4603      	mov	r3, r0
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fc16 	bl	800336c <I2C_RequestMemoryRead>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e1bc      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d113      	bne.n	8002b7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	623b      	str	r3, [r7, #32]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	623b      	str	r3, [r7, #32]
 8002b66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	e190      	b.n	8002e9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d11b      	bne.n	8002bba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	e170      	b.n	8002e9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d11b      	bne.n	8002bfa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002be0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	e150      	b.n	8002e9c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c10:	e144      	b.n	8002e9c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	f200 80f1 	bhi.w	8002dfe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d123      	bne.n	8002c6c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 ff4d 	bl	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e145      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c6a:	e117      	b.n	8002e9c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d14e      	bne.n	8002d12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	4906      	ldr	r1, [pc, #24]	@ (8002c98 <HAL_I2C_Mem_Read+0x22c>)
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fd78 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e11a      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x458>
 8002c8e:	bf00      	nop
 8002c90:	00100002 	.word	0x00100002
 8002c94:	ffff0000 	.word	0xffff0000
 8002c98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d10:	e0c4      	b.n	8002e9c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d18:	2200      	movs	r2, #0
 8002d1a:	496c      	ldr	r1, [pc, #432]	@ (8002ecc <HAL_I2C_Mem_Read+0x460>)
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fd29 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0cb      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d74:	2200      	movs	r2, #0
 8002d76:	4955      	ldr	r1, [pc, #340]	@ (8002ecc <HAL_I2C_Mem_Read+0x460>)
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 fcfb 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e09d      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dfc:	e04e      	b.n	8002e9c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fe60 	bl	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e058      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d124      	bne.n	8002e9c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d107      	bne.n	8002e6a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e68:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f47f aeb6 	bne.w	8002c12 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e000      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
  }
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3728      	adds	r7, #40	@ 0x28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	00010004 	.word	0x00010004

08002ed0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08c      	sub	sp, #48	@ 0x30
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	4608      	mov	r0, r1
 8002eda:	4611      	mov	r1, r2
 8002edc:	461a      	mov	r2, r3
 8002ede:	4603      	mov	r3, r0
 8002ee0:	817b      	strh	r3, [r7, #10]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	813b      	strh	r3, [r7, #8]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eea:	f7fe fd05 	bl	80018f8 <HAL_GetTick>
 8002eee:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	f040 8172 	bne.w	80031e6 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f02:	4b93      	ldr	r3, [pc, #588]	@ (8003150 <HAL_I2C_Mem_Read_DMA+0x280>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	08db      	lsrs	r3, r3, #3
 8002f08:	4a92      	ldr	r2, [pc, #584]	@ (8003154 <HAL_I2C_Mem_Read_DMA+0x284>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0a1a      	lsrs	r2, r3, #8
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	009a      	lsls	r2, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d112      	bne.n	8002f4e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f043 0220 	orr.w	r2, r3, #32
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e14c      	b.n	80031e8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d0df      	beq.n	8002f1c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Mem_Read_DMA+0x9a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e13e      	b.n	80031e8 <HAL_I2C_Mem_Read_DMA+0x318>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d007      	beq.n	8002f90 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2222      	movs	r2, #34	@ 0x22
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2240      	movs	r2, #64	@ 0x40
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a62      	ldr	r2, [pc, #392]	@ (8003158 <HAL_I2C_Mem_Read_DMA+0x288>)
 8002fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002fd2:	897a      	ldrh	r2, [r7, #10]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8002fd8:	893a      	ldrh	r2, [r7, #8]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002fde:	88fa      	ldrh	r2, [r7, #6]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80cc 	beq.w	800318c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d02d      	beq.n	8003058 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	4a56      	ldr	r2, [pc, #344]	@ (800315c <HAL_I2C_Mem_Read_DMA+0x28c>)
 8003002:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003008:	4a55      	ldr	r2, [pc, #340]	@ (8003160 <HAL_I2C_Mem_Read_DMA+0x290>)
 800300a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003010:	2200      	movs	r2, #0
 8003012:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003018:	2200      	movs	r2, #0
 800301a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003020:	2200      	movs	r2, #0
 8003022:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003028:	2200      	movs	r2, #0
 800302a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3310      	adds	r3, #16
 8003036:	4619      	mov	r1, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	461a      	mov	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003042:	f7fe fe49 	bl	8001cd8 <HAL_DMA_Start_IT>
 8003046:	4603      	mov	r3, r0
 8003048:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800304c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003050:	2b00      	cmp	r3, #0
 8003052:	f040 8087 	bne.w	8003164 <HAL_I2C_Mem_Read_DMA+0x294>
 8003056:	e013      	b.n	8003080 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0b3      	b.n	80031e8 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003080:	88f8      	ldrh	r0, [r7, #6]
 8003082:	893a      	ldrh	r2, [r7, #8]
 8003084:	8979      	ldrh	r1, [r7, #10]
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	2323      	movs	r3, #35	@ 0x23
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	4603      	mov	r3, r0
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f96b 	bl	800336c <I2C_RequestMemoryRead>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d023      	beq.n	80030e4 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe fe71 	bl	8001d88 <HAL_DMA_Abort_IT>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b0:	2200      	movs	r2, #0
 80030b2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e081      	b.n	80031e8 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d108      	bne.n	80030fe <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	e007      	b.n	800310e <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800310c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310e:	2300      	movs	r3, #0
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800313a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	e049      	b.n	80031e2 <HAL_I2C_Mem_Read_DMA+0x312>
 800314e:	bf00      	nop
 8003150:	20000000 	.word	0x20000000
 8003154:	14f8b589 	.word	0x14f8b589
 8003158:	ffff0000 	.word	0xffff0000
 800315c:	0800353d 	.word	0x0800353d
 8003160:	080036fb 	.word	0x080036fb
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	f043 0210 	orr.w	r2, r3, #16
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e02d      	b.n	80031e8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800318c:	88f8      	ldrh	r0, [r7, #6]
 800318e:	893a      	ldrh	r2, [r7, #8]
 8003190:	8979      	ldrh	r1, [r7, #10]
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	2323      	movs	r3, #35	@ 0x23
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	4603      	mov	r3, r0
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f8e5 	bl	800336c <I2C_RequestMemoryRead>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e01d      	b.n	80031e8 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d0:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
  }
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3728      	adds	r7, #40	@ 0x28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	461a      	mov	r2, r3
 800324e:	4603      	mov	r3, r0
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	460b      	mov	r3, r1
 8003254:	813b      	strh	r3, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003268:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	2200      	movs	r2, #0
 8003272:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fa7c 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003290:	d103      	bne.n	800329a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e05f      	b.n	800335e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800329e:	897b      	ldrh	r3, [r7, #10]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	6a3a      	ldr	r2, [r7, #32]
 80032b2:	492d      	ldr	r1, [pc, #180]	@ (8003368 <I2C_RequestMemoryWrite+0x128>)
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 fad7 	bl	8003868 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e04c      	b.n	800335e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032dc:	6a39      	ldr	r1, [r7, #32]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fb62 	bl	80039a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00d      	beq.n	8003306 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d107      	bne.n	8003302 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003300:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e02b      	b.n	800335e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800330c:	893b      	ldrh	r3, [r7, #8]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	611a      	str	r2, [r3, #16]
 8003316:	e021      	b.n	800335c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003318:	893b      	ldrh	r3, [r7, #8]
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	b29b      	uxth	r3, r3
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003328:	6a39      	ldr	r1, [r7, #32]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fb3c 	bl	80039a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	2b04      	cmp	r3, #4
 800333c:	d107      	bne.n	800334e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800334c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e005      	b.n	800335e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003352:	893b      	ldrh	r3, [r7, #8]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	00010002 	.word	0x00010002

0800336c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	4608      	mov	r0, r1
 8003376:	4611      	mov	r1, r2
 8003378:	461a      	mov	r2, r3
 800337a:	4603      	mov	r3, r0
 800337c:	817b      	strh	r3, [r7, #10]
 800337e:	460b      	mov	r3, r1
 8003380:	813b      	strh	r3, [r7, #8]
 8003382:	4613      	mov	r3, r2
 8003384:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003394:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f9de 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00d      	beq.n	80033da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033cc:	d103      	bne.n	80033d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0aa      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	6a3a      	ldr	r2, [r7, #32]
 80033ee:	4952      	ldr	r1, [pc, #328]	@ (8003538 <I2C_RequestMemoryRead+0x1cc>)
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fa39 	bl	8003868 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e097      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003418:	6a39      	ldr	r1, [r7, #32]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fac4 	bl	80039a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	2b04      	cmp	r3, #4
 800342c:	d107      	bne.n	800343e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800343c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e076      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d105      	bne.n	8003454 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003448:	893b      	ldrh	r3, [r7, #8]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	611a      	str	r2, [r3, #16]
 8003452:	e021      	b.n	8003498 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003454:	893b      	ldrh	r3, [r7, #8]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	b29b      	uxth	r3, r3
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003464:	6a39      	ldr	r1, [r7, #32]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 fa9e 	bl	80039a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00d      	beq.n	800348e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	2b04      	cmp	r3, #4
 8003478:	d107      	bne.n	800348a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003488:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e050      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800348e:	893b      	ldrh	r3, [r7, #8]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800349a:	6a39      	ldr	r1, [r7, #32]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fa83 	bl	80039a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00d      	beq.n	80034c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d107      	bne.n	80034c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e035      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	2200      	movs	r2, #0
 80034dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f947 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00d      	beq.n	8003508 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034fa:	d103      	bne.n	8003504 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003502:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e013      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003508:	897b      	ldrh	r3, [r7, #10]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	b2da      	uxtb	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	6a3a      	ldr	r2, [r7, #32]
 800351c:	4906      	ldr	r1, [pc, #24]	@ (8003538 <I2C_RequestMemoryRead+0x1cc>)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f9a2 	bl	8003868 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	00010002 	.word	0x00010002

0800353c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003550:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003558:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800356e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357c:	2200      	movs	r2, #0
 800357e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	2200      	movs	r2, #0
 800358e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003590:	7cfb      	ldrb	r3, [r7, #19]
 8003592:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003596:	2b21      	cmp	r3, #33	@ 0x21
 8003598:	d007      	beq.n	80035aa <I2C_DMAXferCplt+0x6e>
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80035a0:	2b22      	cmp	r3, #34	@ 0x22
 80035a2:	d131      	bne.n	8003608 <I2C_DMAXferCplt+0xcc>
 80035a4:	7cbb      	ldrb	r3, [r7, #18]
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d12e      	bne.n	8003608 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035b8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80035c0:	7cfb      	ldrb	r3, [r7, #19]
 80035c2:	2b29      	cmp	r3, #41	@ 0x29
 80035c4:	d10a      	bne.n	80035dc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2221      	movs	r2, #33	@ 0x21
 80035ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2228      	movs	r2, #40	@ 0x28
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035d4:	6978      	ldr	r0, [r7, #20]
 80035d6:	f7ff fe15 	bl	8003204 <HAL_I2C_SlaveTxCpltCallback>
 80035da:	e00c      	b.n	80035f6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	2b2a      	cmp	r3, #42	@ 0x2a
 80035e0:	d109      	bne.n	80035f6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2222      	movs	r2, #34	@ 0x22
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2228      	movs	r2, #40	@ 0x28
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035f0:	6978      	ldr	r0, [r7, #20]
 80035f2:	f7ff fe11 	bl	8003218 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003604:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003606:	e074      	b.n	80036f2 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d06e      	beq.n	80036f2 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800362c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800363c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003644:	d009      	beq.n	800365a <I2C_DMAXferCplt+0x11e>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d006      	beq.n	800365a <I2C_DMAXferCplt+0x11e>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003652:	d002      	beq.n	800365a <I2C_DMAXferCplt+0x11e>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b20      	cmp	r3, #32
 8003658:	d107      	bne.n	800366a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003668:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003678:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003688:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2200      	movs	r2, #0
 800368e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003698:	6978      	ldr	r0, [r7, #20]
 800369a:	f7ff fdc7 	bl	800322c <HAL_I2C_ErrorCallback>
}
 800369e:	e028      	b.n	80036f2 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b40      	cmp	r3, #64	@ 0x40
 80036b2:	d10a      	bne.n	80036ca <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80036c2:	6978      	ldr	r0, [r7, #20]
 80036c4:	f7fd fe02 	bl	80012cc <HAL_I2C_MemRxCpltCallback>
}
 80036c8:	e013      	b.n	80036f2 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d002      	beq.n	80036de <I2C_DMAXferCplt+0x1a2>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d103      	bne.n	80036e6 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80036e4:	e002      	b.n	80036ec <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2212      	movs	r2, #18
 80036ea:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80036ec:	6978      	ldr	r0, [r7, #20]
 80036ee:	f7ff fd7f 	bl	80031f0 <HAL_I2C_MasterRxCpltCallback>
}
 80036f2:	bf00      	nop
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003706:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003714:	2200      	movs	r2, #0
 8003716:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003724:	2200      	movs	r2, #0
 8003726:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7fe fcd9 	bl	80020e0 <HAL_DMA_GetError>
 800372e:	4603      	mov	r3, r0
 8003730:	2b02      	cmp	r3, #2
 8003732:	d01b      	beq.n	800376c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003742:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	f043 0210 	orr.w	r2, r3, #16
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f7ff fd60 	bl	800322c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003784:	e048      	b.n	8003818 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d044      	beq.n	8003818 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378e:	f7fe f8b3 	bl	80018f8 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d139      	bne.n	8003818 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	0c1b      	lsrs	r3, r3, #16
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d10d      	bne.n	80037ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	43da      	mvns	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	4013      	ands	r3, r2
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bf0c      	ite	eq
 80037c0:	2301      	moveq	r3, #1
 80037c2:	2300      	movne	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	e00c      	b.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	43da      	mvns	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4013      	ands	r3, r2
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d116      	bne.n	8003818 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	f043 0220 	orr.w	r2, r3, #32
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e023      	b.n	8003860 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	0c1b      	lsrs	r3, r3, #16
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10d      	bne.n	800383e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	43da      	mvns	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4013      	ands	r3, r2
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	e00c      	b.n	8003858 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	43da      	mvns	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4013      	ands	r3, r2
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf0c      	ite	eq
 8003850:	2301      	moveq	r3, #1
 8003852:	2300      	movne	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	429a      	cmp	r2, r3
 800385c:	d093      	beq.n	8003786 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003876:	e071      	b.n	800395c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003886:	d123      	bne.n	80038d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003896:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	f043 0204 	orr.w	r2, r3, #4
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e067      	b.n	80039a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d6:	d041      	beq.n	800395c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d8:	f7fe f80e 	bl	80018f8 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d302      	bcc.n	80038ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d136      	bne.n	800395c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d10c      	bne.n	8003912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	43da      	mvns	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4013      	ands	r3, r2
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	bf14      	ite	ne
 800390a:	2301      	movne	r3, #1
 800390c:	2300      	moveq	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	e00b      	b.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	43da      	mvns	r2, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	4013      	ands	r3, r2
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	bf14      	ite	ne
 8003924:	2301      	movne	r3, #1
 8003926:	2300      	moveq	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d016      	beq.n	800395c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	f043 0220 	orr.w	r2, r3, #32
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e021      	b.n	80039a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	0c1b      	lsrs	r3, r3, #16
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b01      	cmp	r3, #1
 8003964:	d10c      	bne.n	8003980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	43da      	mvns	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	4013      	ands	r3, r2
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf14      	ite	ne
 8003978:	2301      	movne	r3, #1
 800397a:	2300      	moveq	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e00b      	b.n	8003998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	43da      	mvns	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4013      	ands	r3, r2
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	bf14      	ite	ne
 8003992:	2301      	movne	r3, #1
 8003994:	2300      	moveq	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	f47f af6d 	bne.w	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b4:	e034      	b.n	8003a20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f8e3 	bl	8003b82 <I2C_IsAcknowledgeFailed>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e034      	b.n	8003a30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d028      	beq.n	8003a20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ce:	f7fd ff93 	bl	80018f8 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d302      	bcc.n	80039e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d11d      	bne.n	8003a20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ee:	2b80      	cmp	r3, #128	@ 0x80
 80039f0:	d016      	beq.n	8003a20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	f043 0220 	orr.w	r2, r3, #32
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e007      	b.n	8003a30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a2a:	2b80      	cmp	r3, #128	@ 0x80
 8003a2c:	d1c3      	bne.n	80039b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a44:	e034      	b.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f89b 	bl	8003b82 <I2C_IsAcknowledgeFailed>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e034      	b.n	8003ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d028      	beq.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5e:	f7fd ff4b 	bl	80018f8 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d302      	bcc.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d11d      	bne.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d016      	beq.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	f043 0220 	orr.w	r2, r3, #32
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e007      	b.n	8003ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d1c3      	bne.n	8003a46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ad4:	e049      	b.n	8003b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d119      	bne.n	8003b18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0210 	mvn.w	r2, #16
 8003aec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e030      	b.n	8003b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b18:	f7fd feee 	bl	80018f8 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d11d      	bne.n	8003b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b38:	2b40      	cmp	r3, #64	@ 0x40
 8003b3a:	d016      	beq.n	8003b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e007      	b.n	8003b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b74:	2b40      	cmp	r3, #64	@ 0x40
 8003b76:	d1ae      	bne.n	8003ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b98:	d11b      	bne.n	8003bd2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ba2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	f043 0204 	orr.w	r2, r3, #4
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e101      	b.n	8003df6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f005 fbdd 	bl	80093cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2203      	movs	r2, #3
 8003c16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c20:	d102      	bne.n	8003c28 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f001 ffc4 	bl	8005bba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	7c1a      	ldrb	r2, [r3, #16]
 8003c3a:	f88d 2000 	strb.w	r2, [sp]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c42:	f001 fea3 	bl	800598c <USB_CoreInit>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0ce      	b.n	8003df6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 ffbc 	bl	8005bdc <USB_SetCurrentMode>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0bf      	b.n	8003df6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]
 8003c7a:	e04a      	b.n	8003d12 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c7c:	7bfa      	ldrb	r2, [r7, #15]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	3315      	adds	r3, #21
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c90:	7bfa      	ldrb	r2, [r7, #15]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	7bfa      	ldrb	r2, [r7, #15]
 8003ca2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ca4:	7bfa      	ldrb	r2, [r7, #15]
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	b298      	uxth	r0, r3
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	332e      	adds	r3, #46	@ 0x2e
 8003cb8:	4602      	mov	r2, r0
 8003cba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	3318      	adds	r3, #24
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cd0:	7bfa      	ldrb	r2, [r7, #15]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	331c      	adds	r3, #28
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ce4:	7bfa      	ldrb	r2, [r7, #15]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	3320      	adds	r3, #32
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cf8:	7bfa      	ldrb	r2, [r7, #15]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	3324      	adds	r3, #36	@ 0x24
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	791b      	ldrb	r3, [r3, #4]
 8003d16:	7bfa      	ldrb	r2, [r7, #15]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d3af      	bcc.n	8003c7c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	73fb      	strb	r3, [r7, #15]
 8003d20:	e044      	b.n	8003dac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d38:	7bfa      	ldrb	r2, [r7, #15]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003d4a:	7bfa      	ldrb	r2, [r7, #15]
 8003d4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d4e:	7bfa      	ldrb	r2, [r7, #15]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d64:	7bfa      	ldrb	r2, [r7, #15]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d7a:	7bfa      	ldrb	r2, [r7, #15]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	3301      	adds	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	791b      	ldrb	r3, [r3, #4]
 8003db0:	7bfa      	ldrb	r2, [r7, #15]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d3b5      	bcc.n	8003d22 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	7c1a      	ldrb	r2, [r3, #16]
 8003dbe:	f88d 2000 	strb.w	r2, [sp]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dc6:	f001 ff55 	bl	8005c74 <USB_DevInit>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e00c      	b.n	8003df6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f002 ff9f 	bl	8006d32 <USB_DevDisconnect>

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_PCD_Start+0x1c>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e022      	b.n	8003e60 <HAL_PCD_Start+0x62>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d105      	bne.n	8003e42 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 fea6 	bl	8005b98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f002 ff4d 	bl	8006cf0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b08d      	sub	sp, #52	@ 0x34
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f003 f80b 	bl	8006e9a <USB_GetMode>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f040 848c 	bne.w	80047a4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f002 ff6f 	bl	8006d74 <USB_ReadInterrupts>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8482 	beq.w	80047a2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f002 ff5c 	bl	8006d74 <USB_ReadInterrupts>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d107      	bne.n	8003ed6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f002 0202 	and.w	r2, r2, #2
 8003ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f002 ff4a 	bl	8006d74 <USB_ReadInterrupts>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d161      	bne.n	8003fae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0210 	bic.w	r2, r2, #16
 8003ef8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f003 020f 	and.w	r2, r3, #15
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	4413      	add	r3, r2
 8003f16:	3304      	adds	r3, #4
 8003f18:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	0c5b      	lsrs	r3, r3, #17
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d124      	bne.n	8003f70 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d035      	beq.n	8003f9e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	6a38      	ldr	r0, [r7, #32]
 8003f46:	f002 fd81 	bl	8006a4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f56:	441a      	add	r2, r3
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f68:	441a      	add	r2, r3
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	615a      	str	r2, [r3, #20]
 8003f6e:	e016      	b.n	8003f9e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	0c5b      	lsrs	r3, r3, #17
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	2b06      	cmp	r3, #6
 8003f7a:	d110      	bne.n	8003f9e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f82:	2208      	movs	r2, #8
 8003f84:	4619      	mov	r1, r3
 8003f86:	6a38      	ldr	r0, [r7, #32]
 8003f88:	f002 fd60 	bl	8006a4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	695a      	ldr	r2, [r3, #20]
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f98:	441a      	add	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699a      	ldr	r2, [r3, #24]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0210 	orr.w	r2, r2, #16
 8003fac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f002 fede 	bl	8006d74 <USB_ReadInterrupts>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fbe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003fc2:	f040 80a7 	bne.w	8004114 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f002 fee3 	bl	8006d9a <USB_ReadDevAllOutEpInterrupt>
 8003fd4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003fd6:	e099      	b.n	800410c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 808e 	beq.w	8004100 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	4611      	mov	r1, r2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f002 ff07 	bl	8006e02 <USB_ReadDevOutEPInterrupt>
 8003ff4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00c      	beq.n	800401a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800400c:	461a      	mov	r2, r3
 800400e:	2301      	movs	r3, #1
 8004010:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004012:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fea3 	bl	8004d60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00c      	beq.n	800403e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004030:	461a      	mov	r2, r3
 8004032:	2308      	movs	r3, #8
 8004034:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004036:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 ff79 	bl	8004f30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004054:	461a      	mov	r2, r3
 8004056:	2310      	movs	r3, #16
 8004058:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d030      	beq.n	80040c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406c:	2b80      	cmp	r3, #128	@ 0x80
 800406e:	d109      	bne.n	8004084 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800407e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004082:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4413      	add	r3, r2
 8004096:	3304      	adds	r3, #4
 8004098:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	78db      	ldrb	r3, [r3, #3]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d108      	bne.n	80040b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	4619      	mov	r1, r3
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f005 fa92 	bl	80095d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80040b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c0:	461a      	mov	r2, r3
 80040c2:	2302      	movs	r3, #2
 80040c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040dc:	461a      	mov	r2, r3
 80040de:	2320      	movs	r3, #32
 80040e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f8:	461a      	mov	r2, r3
 80040fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	3301      	adds	r3, #1
 8004104:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800410c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	f47f af62 	bne.w	8003fd8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f002 fe2b 	bl	8006d74 <USB_ReadInterrupts>
 800411e:	4603      	mov	r3, r0
 8004120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004124:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004128:	f040 80db 	bne.w	80042e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f002 fe4c 	bl	8006dce <USB_ReadDevAllInEpInterrupt>
 8004136:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800413c:	e0cd      	b.n	80042da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80c2 	beq.w	80042ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f002 fe72 	bl	8006e3e <USB_ReadDevInEPInterrupt>
 800415a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d057      	beq.n	8004216 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	2201      	movs	r2, #1
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800417a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	43db      	mvns	r3, r3
 8004180:	69f9      	ldr	r1, [r7, #28]
 8004182:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004186:	4013      	ands	r3, r2
 8004188:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004196:	461a      	mov	r2, r3
 8004198:	2301      	movs	r3, #1
 800419a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	799b      	ldrb	r3, [r3, #6]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d132      	bne.n	800420a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a8:	4613      	mov	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	3320      	adds	r3, #32
 80041b4:	6819      	ldr	r1, [r3, #0]
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4403      	add	r3, r0
 80041c4:	331c      	adds	r3, #28
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4419      	add	r1, r3
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4403      	add	r3, r0
 80041d8:	3320      	adds	r3, #32
 80041da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d113      	bne.n	800420a <HAL_PCD_IRQHandler+0x3a2>
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	3324      	adds	r3, #36	@ 0x24
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d108      	bne.n	800420a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004202:	461a      	mov	r2, r3
 8004204:	2101      	movs	r1, #1
 8004206:	f002 fe79 	bl	8006efc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	b2db      	uxtb	r3, r3
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f005 f95c 	bl	80094ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800422c:	461a      	mov	r2, r3
 800422e:	2308      	movs	r3, #8
 8004230:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004248:	461a      	mov	r2, r3
 800424a:	2310      	movs	r3, #16
 800424c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004264:	461a      	mov	r2, r3
 8004266:	2340      	movs	r3, #64	@ 0x40
 8004268:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d023      	beq.n	80042bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004274:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004276:	6a38      	ldr	r0, [r7, #32]
 8004278:	f001 fe60 	bl	8005f3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800427c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800427e:	4613      	mov	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	3310      	adds	r3, #16
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	3304      	adds	r3, #4
 800428e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	78db      	ldrb	r3, [r3, #3]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d108      	bne.n	80042aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2200      	movs	r2, #0
 800429c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	4619      	mov	r1, r3
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f005 f9a9 	bl	80095fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042b6:	461a      	mov	r2, r3
 80042b8:	2302      	movs	r3, #2
 80042ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80042c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fcbd 	bl	8004c48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	3301      	adds	r3, #1
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80042d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d6:	085b      	lsrs	r3, r3, #1
 80042d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80042da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f47f af2e 	bne.w	800413e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f002 fd44 	bl	8006d74 <USB_ReadInterrupts>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042f6:	d122      	bne.n	800433e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004312:	2b01      	cmp	r3, #1
 8004314:	d108      	bne.n	8004328 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800431e:	2100      	movs	r1, #0
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fea3 	bl	800506c <HAL_PCDEx_LPM_Callback>
 8004326:	e002      	b.n	800432e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f005 f947 	bl	80095bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800433c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f002 fd16 	bl	8006d74 <USB_ReadInterrupts>
 8004348:	4603      	mov	r3, r0
 800434a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800434e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004352:	d112      	bne.n	800437a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b01      	cmp	r3, #1
 8004362:	d102      	bne.n	800436a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f005 f903 	bl	8009570 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004378:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f002 fcf8 	bl	8006d74 <USB_ReadInterrupts>
 8004384:	4603      	mov	r3, r0
 8004386:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800438a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800438e:	f040 80b7 	bne.w	8004500 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2110      	movs	r1, #16
 80043ac:	4618      	mov	r0, r3
 80043ae:	f001 fdc5 	bl	8005f3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043b2:	2300      	movs	r3, #0
 80043b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043b6:	e046      	b.n	8004446 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043c4:	461a      	mov	r2, r3
 80043c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80043ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f8:	461a      	mov	r2, r3
 80043fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	440a      	add	r2, r1
 8004416:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800441a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800441e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004430:	0151      	lsls	r1, r2, #5
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	440a      	add	r2, r1
 8004436:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800443a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800443e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004442:	3301      	adds	r3, #1
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	791b      	ldrb	r3, [r3, #4]
 800444a:	461a      	mov	r2, r3
 800444c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444e:	4293      	cmp	r3, r2
 8004450:	d3b2      	bcc.n	80043b8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004460:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004464:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7bdb      	ldrb	r3, [r3, #15]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d016      	beq.n	800449c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800447e:	f043 030b 	orr.w	r3, r3, #11
 8004482:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800448c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004494:	f043 030b 	orr.w	r3, r3, #11
 8004498:	6453      	str	r3, [r2, #68]	@ 0x44
 800449a:	e015      	b.n	80044c8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	69fa      	ldr	r2, [r7, #28]
 80044a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044ae:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80044b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044c2:	f043 030b 	orr.w	r3, r3, #11
 80044c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80044da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044ea:	461a      	mov	r2, r3
 80044ec:	f002 fd06 	bl	8006efc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80044fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f002 fc35 	bl	8006d74 <USB_ReadInterrupts>
 800450a:	4603      	mov	r3, r0
 800450c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004514:	d123      	bne.n	800455e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f002 fccb 	bl	8006eb6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f001 fd82 	bl	800602e <USB_GetDevSpeed>
 800452a:	4603      	mov	r3, r0
 800452c:	461a      	mov	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681c      	ldr	r4, [r3, #0]
 8004536:	f001 fa09 	bl	800594c <HAL_RCC_GetHCLKFreq>
 800453a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004540:	461a      	mov	r2, r3
 8004542:	4620      	mov	r0, r4
 8004544:	f001 fa86 	bl	8005a54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f004 ffe8 	bl	800951e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800455c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f002 fc06 	bl	8006d74 <USB_ReadInterrupts>
 8004568:	4603      	mov	r3, r0
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b08      	cmp	r3, #8
 8004570:	d10a      	bne.n	8004588 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f004 ffc5 	bl	8009502 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f002 0208 	and.w	r2, r2, #8
 8004586:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f002 fbf1 	bl	8006d74 <USB_ReadInterrupts>
 8004592:	4603      	mov	r3, r0
 8004594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004598:	2b80      	cmp	r3, #128	@ 0x80
 800459a:	d123      	bne.n	80045e4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045a8:	2301      	movs	r3, #1
 80045aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ac:	e014      	b.n	80045d8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b2:	4613      	mov	r3, r2
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d105      	bne.n	80045d2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	4619      	mov	r1, r3
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fb0a 	bl	8004be6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	3301      	adds	r3, #1
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	791b      	ldrb	r3, [r3, #4]
 80045dc:	461a      	mov	r2, r3
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d3e4      	bcc.n	80045ae <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f002 fbc3 	bl	8006d74 <USB_ReadInterrupts>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045f8:	d13c      	bne.n	8004674 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045fa:	2301      	movs	r3, #1
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fe:	e02b      	b.n	8004658 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	3318      	adds	r3, #24
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d115      	bne.n	8004652 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004626:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004628:	2b00      	cmp	r3, #0
 800462a:	da12      	bge.n	8004652 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004630:	4613      	mov	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	3317      	adds	r3, #23
 800463c:	2201      	movs	r2, #1
 800463e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004648:	b2db      	uxtb	r3, r3
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 faca 	bl	8004be6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	3301      	adds	r3, #1
 8004656:	627b      	str	r3, [r7, #36]	@ 0x24
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	791b      	ldrb	r3, [r3, #4]
 800465c:	461a      	mov	r2, r3
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	4293      	cmp	r3, r2
 8004662:	d3cd      	bcc.n	8004600 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004672:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f002 fb7b 	bl	8006d74 <USB_ReadInterrupts>
 800467e:	4603      	mov	r3, r0
 8004680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004684:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004688:	d156      	bne.n	8004738 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800468a:	2301      	movs	r3, #1
 800468c:	627b      	str	r3, [r7, #36]	@ 0x24
 800468e:	e045      	b.n	800471c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d12e      	bne.n	8004716 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	da2b      	bge.n	8004716 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80046ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d121      	bne.n	8004716 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d6:	4613      	mov	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80046e4:	2201      	movs	r2, #1
 80046e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800470e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004712:	6053      	str	r3, [r2, #4]
            break;
 8004714:	e008      	b.n	8004728 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	3301      	adds	r3, #1
 800471a:	627b      	str	r3, [r7, #36]	@ 0x24
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	791b      	ldrb	r3, [r3, #4]
 8004720:	461a      	mov	r2, r3
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	4293      	cmp	r3, r2
 8004726:	d3b3      	bcc.n	8004690 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004736:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f002 fb19 	bl	8006d74 <USB_ReadInterrupts>
 8004742:	4603      	mov	r3, r0
 8004744:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474c:	d10a      	bne.n	8004764 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f004 ff66 	bl	8009620 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f002 fb03 	bl	8006d74 <USB_ReadInterrupts>
 800476e:	4603      	mov	r3, r0
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b04      	cmp	r3, #4
 8004776:	d115      	bne.n	80047a4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f004 ff56 	bl	800963c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6859      	ldr	r1, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]
 80047a0:	e000      	b.n	80047a4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80047a2:	bf00      	nop
    }
  }
}
 80047a4:	3734      	adds	r7, #52	@ 0x34
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd90      	pop	{r4, r7, pc}

080047aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_PCD_SetAddress+0x1a>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e012      	b.n	80047ea <HAL_PCD_SetAddress+0x40>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	78fa      	ldrb	r2, [r7, #3]
 80047d8:	4611      	mov	r1, r2
 80047da:	4618      	mov	r0, r3
 80047dc:	f002 fa62 	bl	8006ca4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	4608      	mov	r0, r1
 80047fc:	4611      	mov	r1, r2
 80047fe:	461a      	mov	r2, r3
 8004800:	4603      	mov	r3, r0
 8004802:	70fb      	strb	r3, [r7, #3]
 8004804:	460b      	mov	r3, r1
 8004806:	803b      	strh	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004814:	2b00      	cmp	r3, #0
 8004816:	da0f      	bge.n	8004838 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	f003 020f 	and.w	r2, r3, #15
 800481e:	4613      	mov	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	3310      	adds	r3, #16
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4413      	add	r3, r2
 800482c:	3304      	adds	r3, #4
 800482e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	705a      	strb	r2, [r3, #1]
 8004836:	e00f      	b.n	8004858 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	f003 020f 	and.w	r2, r3, #15
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	3304      	adds	r3, #4
 8004850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	b2da      	uxtb	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004864:	883b      	ldrh	r3, [r7, #0]
 8004866:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	78ba      	ldrb	r2, [r7, #2]
 8004872:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	785b      	ldrb	r3, [r3, #1]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d004      	beq.n	8004886 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004886:	78bb      	ldrb	r3, [r7, #2]
 8004888:	2b02      	cmp	r3, #2
 800488a:	d102      	bne.n	8004892 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_PCD_EP_Open+0xae>
 800489c:	2302      	movs	r3, #2
 800489e:	e00e      	b.n	80048be <HAL_PCD_EP_Open+0xcc>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68f9      	ldr	r1, [r7, #12]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 fbe2 	bl	8006078 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80048bc:	7afb      	ldrb	r3, [r7, #11]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	460b      	mov	r3, r1
 80048d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	da0f      	bge.n	80048fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	f003 020f 	and.w	r2, r3, #15
 80048e0:	4613      	mov	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	3310      	adds	r3, #16
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	3304      	adds	r3, #4
 80048f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	705a      	strb	r2, [r3, #1]
 80048f8:	e00f      	b.n	800491a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	f003 020f 	and.w	r2, r3, #15
 8004900:	4613      	mov	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4413      	add	r3, r2
 8004910:	3304      	adds	r3, #4
 8004912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_PCD_EP_Close+0x6e>
 8004930:	2302      	movs	r3, #2
 8004932:	e00e      	b.n	8004952 <HAL_PCD_EP_Close+0x8c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	4618      	mov	r0, r3
 8004944:	f001 fc20 	bl	8006188 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b086      	sub	sp, #24
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	460b      	mov	r3, r1
 8004968:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800496a:	7afb      	ldrb	r3, [r7, #11]
 800496c:	f003 020f 	and.w	r2, r3, #15
 8004970:	4613      	mov	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	3304      	adds	r3, #4
 8004982:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2200      	movs	r2, #0
 800499a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800499c:	7afb      	ldrb	r3, [r7, #11]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	799b      	ldrb	r3, [r3, #6]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d102      	bne.n	80049b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	799b      	ldrb	r3, [r3, #6]
 80049be:	461a      	mov	r2, r3
 80049c0:	6979      	ldr	r1, [r7, #20]
 80049c2:	f001 fcbd 	bl	8006340 <USB_EPStartXfer>

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	f003 020f 	and.w	r2, r3, #15
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80049f2:	681b      	ldr	r3, [r3, #0]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	607a      	str	r2, [r7, #4]
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a10:	7afb      	ldrb	r3, [r7, #11]
 8004a12:	f003 020f 	and.w	r2, r3, #15
 8004a16:	4613      	mov	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	3310      	adds	r3, #16
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	3304      	adds	r3, #4
 8004a26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2200      	movs	r2, #0
 8004a38:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a40:	7afb      	ldrb	r3, [r7, #11]
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	799b      	ldrb	r3, [r3, #6]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d102      	bne.n	8004a5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	799b      	ldrb	r3, [r3, #6]
 8004a62:	461a      	mov	r2, r3
 8004a64:	6979      	ldr	r1, [r7, #20]
 8004a66:	f001 fc6b 	bl	8006340 <USB_EPStartXfer>

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	7912      	ldrb	r2, [r2, #4]
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e04f      	b.n	8004b32 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	da0f      	bge.n	8004aba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	f003 020f 	and.w	r2, r3, #15
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	3310      	adds	r3, #16
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	4413      	add	r3, r2
 8004aae:	3304      	adds	r3, #4
 8004ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	705a      	strb	r2, [r3, #1]
 8004ab8:	e00d      	b.n	8004ad6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004aba:	78fa      	ldrb	r2, [r7, #3]
 8004abc:	4613      	mov	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4413      	add	r3, r2
 8004acc:	3304      	adds	r3, #4
 8004ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_PCD_EP_SetStall+0x82>
 8004af2:	2302      	movs	r3, #2
 8004af4:	e01d      	b.n	8004b32 <HAL_PCD_EP_SetStall+0xbe>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68f9      	ldr	r1, [r7, #12]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f001 fff9 	bl	8006afc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d109      	bne.n	8004b28 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	7999      	ldrb	r1, [r3, #6]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b22:	461a      	mov	r2, r3
 8004b24:	f002 f9ea 	bl	8006efc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	460b      	mov	r3, r1
 8004b44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b46:	78fb      	ldrb	r3, [r7, #3]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	7912      	ldrb	r2, [r2, #4]
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d901      	bls.n	8004b58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e042      	b.n	8004bde <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	da0f      	bge.n	8004b80 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	f003 020f 	and.w	r2, r3, #15
 8004b66:	4613      	mov	r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	3310      	adds	r3, #16
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	4413      	add	r3, r2
 8004b74:	3304      	adds	r3, #4
 8004b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	705a      	strb	r2, [r3, #1]
 8004b7e:	e00f      	b.n	8004ba0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	f003 020f 	and.w	r2, r3, #15
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4413      	add	r3, r2
 8004b96:	3304      	adds	r3, #4
 8004b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_PCD_EP_ClrStall+0x86>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e00e      	b.n	8004bde <HAL_PCD_EP_ClrStall+0xa4>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68f9      	ldr	r1, [r7, #12]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f002 f802 	bl	8006bd8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	da0c      	bge.n	8004c14 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	f003 020f 	and.w	r2, r3, #15
 8004c00:	4613      	mov	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	3310      	adds	r3, #16
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	3304      	adds	r3, #4
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e00c      	b.n	8004c2e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	f003 020f 	and.w	r2, r3, #15
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	4413      	add	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	4413      	add	r3, r2
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68f9      	ldr	r1, [r7, #12]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f001 fe21 	bl	800687c <USB_EPStopXfer>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004c3e:	7afb      	ldrb	r3, [r7, #11]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08a      	sub	sp, #40	@ 0x28
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	3310      	adds	r3, #16
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	695a      	ldr	r2, [r3, #20]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d901      	bls.n	8004c80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e06b      	b.n	8004d58 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d902      	bls.n	8004c9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	3303      	adds	r3, #3
 8004ca0:	089b      	lsrs	r3, r3, #2
 8004ca2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ca4:	e02a      	b.n	8004cfc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d902      	bls.n	8004cc2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	3303      	adds	r3, #3
 8004cc6:	089b      	lsrs	r3, r3, #2
 8004cc8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	68d9      	ldr	r1, [r3, #12]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	4603      	mov	r3, r0
 8004cde:	6978      	ldr	r0, [r7, #20]
 8004ce0:	f001 fe76 	bl	80069d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	441a      	add	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	441a      	add	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d809      	bhi.n	8004d26 <PCD_WriteEmptyTxFifo+0xde>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d203      	bcs.n	8004d26 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1bf      	bne.n	8004ca6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d811      	bhi.n	8004d56 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	2201      	movs	r2, #1
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	6939      	ldr	r1, [r7, #16]
 8004d4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d52:	4013      	ands	r3, r2
 8004d54:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	333c      	adds	r3, #60	@ 0x3c
 8004d78:	3304      	adds	r3, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	799b      	ldrb	r3, [r3, #6]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d17b      	bne.n	8004e8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d015      	beq.n	8004dcc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	4a61      	ldr	r2, [pc, #388]	@ (8004f28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	f240 80b9 	bls.w	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80b3 	beq.w	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dc8:	6093      	str	r3, [r2, #8]
 8004dca:	e0a7      	b.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d009      	beq.n	8004dea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de2:	461a      	mov	r2, r3
 8004de4:	2320      	movs	r3, #32
 8004de6:	6093      	str	r3, [r2, #8]
 8004de8:	e098      	b.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f040 8093 	bne.w	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	4a4b      	ldr	r2, [pc, #300]	@ (8004f28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d90f      	bls.n	8004e1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e14:	461a      	mov	r2, r3
 8004e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e1a:	6093      	str	r3, [r2, #8]
 8004e1c:	e07e      	b.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	4613      	mov	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	3304      	adds	r3, #4
 8004e32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a1a      	ldr	r2, [r3, #32]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	0159      	lsls	r1, r3, #5
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	440b      	add	r3, r1
 8004e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e4a:	1ad2      	subs	r2, r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d114      	bne.n	8004e80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d109      	bne.n	8004e72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e68:	461a      	mov	r2, r3
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	f002 f846 	bl	8006efc <USB_EP0_OutStart>
 8004e70:	e006      	b.n	8004e80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	441a      	add	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f004 fb06 	bl	8009498 <HAL_PCD_DataOutStageCallback>
 8004e8c:	e046      	b.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	4a26      	ldr	r2, [pc, #152]	@ (8004f2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d124      	bne.n	8004ee0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eac:	461a      	mov	r2, r3
 8004eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eb2:	6093      	str	r3, [r2, #8]
 8004eb4:	e032      	b.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2320      	movs	r3, #32
 8004ed0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f004 fadd 	bl	8009498 <HAL_PCD_DataOutStageCallback>
 8004ede:	e01d      	b.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d114      	bne.n	8004f10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	4613      	mov	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d108      	bne.n	8004f10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f08:	461a      	mov	r2, r3
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	f001 fff6 	bl	8006efc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f004 fabe 	bl	8009498 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3720      	adds	r7, #32
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	4f54300a 	.word	0x4f54300a
 8004f2c:	4f54310a 	.word	0x4f54310a

08004f30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	333c      	adds	r3, #60	@ 0x3c
 8004f48:	3304      	adds	r3, #4
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a15      	ldr	r2, [pc, #84]	@ (8004fb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d90e      	bls.n	8004f84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d009      	beq.n	8004f84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f004 fa75 	bl	8009474 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004fb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d90c      	bls.n	8004fac <PCD_EP_OutSetupPacket_int+0x7c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	799b      	ldrb	r3, [r3, #6]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d108      	bne.n	8004fac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	f001 ffa8 	bl	8006efc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	4f54300a 	.word	0x4f54300a

08004fbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d107      	bne.n	8004fea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004fda:	883b      	ldrh	r3, [r7, #0]
 8004fdc:	0419      	lsls	r1, r3, #16
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fe8:	e028      	b.n	800503c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff0:	0c1b      	lsrs	r3, r3, #16
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	73fb      	strb	r3, [r7, #15]
 8004ffc:	e00d      	b.n	800501a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	3340      	adds	r3, #64	@ 0x40
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	4413      	add	r3, r2
 8005012:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	3301      	adds	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
 800501a:	7bfa      	ldrb	r2, [r7, #15]
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	3b01      	subs	r3, #1
 8005020:	429a      	cmp	r2, r3
 8005022:	d3ec      	bcc.n	8004ffe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005024:	883b      	ldrh	r3, [r7, #0]
 8005026:	0418      	lsls	r0, r3, #16
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6819      	ldr	r1, [r3, #0]
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	3b01      	subs	r3, #1
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	4302      	orrs	r2, r0
 8005034:	3340      	adds	r3, #64	@ 0x40
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	887a      	ldrh	r2, [r7, #2]
 800505c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e267      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d075      	beq.n	800518e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050a2:	4b88      	ldr	r3, [pc, #544]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d00c      	beq.n	80050c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ae:	4b85      	ldr	r3, [pc, #532]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d112      	bne.n	80050e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ba:	4b82      	ldr	r3, [pc, #520]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050c6:	d10b      	bne.n	80050e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c8:	4b7e      	ldr	r3, [pc, #504]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d05b      	beq.n	800518c <HAL_RCC_OscConfig+0x108>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d157      	bne.n	800518c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e242      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e8:	d106      	bne.n	80050f8 <HAL_RCC_OscConfig+0x74>
 80050ea:	4b76      	ldr	r3, [pc, #472]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a75      	ldr	r2, [pc, #468]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	e01d      	b.n	8005134 <HAL_RCC_OscConfig+0xb0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005100:	d10c      	bne.n	800511c <HAL_RCC_OscConfig+0x98>
 8005102:	4b70      	ldr	r3, [pc, #448]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a6f      	ldr	r2, [pc, #444]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	4b6d      	ldr	r3, [pc, #436]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a6c      	ldr	r2, [pc, #432]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e00b      	b.n	8005134 <HAL_RCC_OscConfig+0xb0>
 800511c:	4b69      	ldr	r3, [pc, #420]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a68      	ldr	r2, [pc, #416]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	4b66      	ldr	r3, [pc, #408]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a65      	ldr	r2, [pc, #404]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 800512e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d013      	beq.n	8005164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fc fbdc 	bl	80018f8 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005144:	f7fc fbd8 	bl	80018f8 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	@ 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e207      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005156:	4b5b      	ldr	r3, [pc, #364]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0xc0>
 8005162:	e014      	b.n	800518e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005164:	f7fc fbc8 	bl	80018f8 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800516c:	f7fc fbc4 	bl	80018f8 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b64      	cmp	r3, #100	@ 0x64
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e1f3      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517e:	4b51      	ldr	r3, [pc, #324]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0xe8>
 800518a:	e000      	b.n	800518e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800518c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d063      	beq.n	8005262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800519a:	4b4a      	ldr	r3, [pc, #296]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051a6:	4b47      	ldr	r3, [pc, #284]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d11c      	bne.n	80051ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051b2:	4b44      	ldr	r3, [pc, #272]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d116      	bne.n	80051ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051be:	4b41      	ldr	r3, [pc, #260]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_RCC_OscConfig+0x152>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d001      	beq.n	80051d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e1c7      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d6:	4b3b      	ldr	r3, [pc, #236]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4937      	ldr	r1, [pc, #220]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ea:	e03a      	b.n	8005262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d020      	beq.n	8005236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051f4:	4b34      	ldr	r3, [pc, #208]	@ (80052c8 <HAL_RCC_OscConfig+0x244>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fa:	f7fc fb7d 	bl	80018f8 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005202:	f7fc fb79 	bl	80018f8 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e1a8      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005214:	4b2b      	ldr	r3, [pc, #172]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0f0      	beq.n	8005202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005220:	4b28      	ldr	r3, [pc, #160]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	4925      	ldr	r1, [pc, #148]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005230:	4313      	orrs	r3, r2
 8005232:	600b      	str	r3, [r1, #0]
 8005234:	e015      	b.n	8005262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005236:	4b24      	ldr	r3, [pc, #144]	@ (80052c8 <HAL_RCC_OscConfig+0x244>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7fc fb5c 	bl	80018f8 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005244:	f7fc fb58 	bl	80018f8 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e187      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005256:	4b1b      	ldr	r3, [pc, #108]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f0      	bne.n	8005244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d036      	beq.n	80052dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d016      	beq.n	80052a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005276:	4b15      	ldr	r3, [pc, #84]	@ (80052cc <HAL_RCC_OscConfig+0x248>)
 8005278:	2201      	movs	r2, #1
 800527a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527c:	f7fc fb3c 	bl	80018f8 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005284:	f7fc fb38 	bl	80018f8 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e167      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005296:	4b0b      	ldr	r3, [pc, #44]	@ (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCC_OscConfig+0x200>
 80052a2:	e01b      	b.n	80052dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052a4:	4b09      	ldr	r3, [pc, #36]	@ (80052cc <HAL_RCC_OscConfig+0x248>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052aa:	f7fc fb25 	bl	80018f8 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b0:	e00e      	b.n	80052d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b2:	f7fc fb21 	bl	80018f8 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d907      	bls.n	80052d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e150      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
 80052c4:	40023800 	.word	0x40023800
 80052c8:	42470000 	.word	0x42470000
 80052cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d0:	4b88      	ldr	r3, [pc, #544]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 80052d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1ea      	bne.n	80052b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8097 	beq.w	8005418 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ea:	2300      	movs	r3, #0
 80052ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ee:	4b81      	ldr	r3, [pc, #516]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10f      	bne.n	800531a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052fa:	2300      	movs	r3, #0
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	4b7d      	ldr	r3, [pc, #500]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	4a7c      	ldr	r2, [pc, #496]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005308:	6413      	str	r3, [r2, #64]	@ 0x40
 800530a:	4b7a      	ldr	r3, [pc, #488]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005312:	60bb      	str	r3, [r7, #8]
 8005314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005316:	2301      	movs	r3, #1
 8005318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531a:	4b77      	ldr	r3, [pc, #476]	@ (80054f8 <HAL_RCC_OscConfig+0x474>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005322:	2b00      	cmp	r3, #0
 8005324:	d118      	bne.n	8005358 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005326:	4b74      	ldr	r3, [pc, #464]	@ (80054f8 <HAL_RCC_OscConfig+0x474>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a73      	ldr	r2, [pc, #460]	@ (80054f8 <HAL_RCC_OscConfig+0x474>)
 800532c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005332:	f7fc fae1 	bl	80018f8 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800533a:	f7fc fadd 	bl	80018f8 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e10c      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534c:	4b6a      	ldr	r3, [pc, #424]	@ (80054f8 <HAL_RCC_OscConfig+0x474>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0f0      	beq.n	800533a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d106      	bne.n	800536e <HAL_RCC_OscConfig+0x2ea>
 8005360:	4b64      	ldr	r3, [pc, #400]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005364:	4a63      	ldr	r2, [pc, #396]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	6713      	str	r3, [r2, #112]	@ 0x70
 800536c:	e01c      	b.n	80053a8 <HAL_RCC_OscConfig+0x324>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2b05      	cmp	r3, #5
 8005374:	d10c      	bne.n	8005390 <HAL_RCC_OscConfig+0x30c>
 8005376:	4b5f      	ldr	r3, [pc, #380]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537a:	4a5e      	ldr	r2, [pc, #376]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 800537c:	f043 0304 	orr.w	r3, r3, #4
 8005380:	6713      	str	r3, [r2, #112]	@ 0x70
 8005382:	4b5c      	ldr	r3, [pc, #368]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005386:	4a5b      	ldr	r2, [pc, #364]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005388:	f043 0301 	orr.w	r3, r3, #1
 800538c:	6713      	str	r3, [r2, #112]	@ 0x70
 800538e:	e00b      	b.n	80053a8 <HAL_RCC_OscConfig+0x324>
 8005390:	4b58      	ldr	r3, [pc, #352]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005394:	4a57      	ldr	r2, [pc, #348]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005396:	f023 0301 	bic.w	r3, r3, #1
 800539a:	6713      	str	r3, [r2, #112]	@ 0x70
 800539c:	4b55      	ldr	r3, [pc, #340]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 800539e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a0:	4a54      	ldr	r2, [pc, #336]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 80053a2:	f023 0304 	bic.w	r3, r3, #4
 80053a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d015      	beq.n	80053dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b0:	f7fc faa2 	bl	80018f8 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b6:	e00a      	b.n	80053ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b8:	f7fc fa9e 	bl	80018f8 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e0cb      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ce:	4b49      	ldr	r3, [pc, #292]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0ee      	beq.n	80053b8 <HAL_RCC_OscConfig+0x334>
 80053da:	e014      	b.n	8005406 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053dc:	f7fc fa8c 	bl	80018f8 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e2:	e00a      	b.n	80053fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e4:	f7fc fa88 	bl	80018f8 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e0b5      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053fa:	4b3e      	ldr	r3, [pc, #248]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 80053fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1ee      	bne.n	80053e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005406:	7dfb      	ldrb	r3, [r7, #23]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d105      	bne.n	8005418 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800540c:	4b39      	ldr	r3, [pc, #228]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 800540e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005410:	4a38      	ldr	r2, [pc, #224]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005416:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80a1 	beq.w	8005564 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005422:	4b34      	ldr	r3, [pc, #208]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 030c 	and.w	r3, r3, #12
 800542a:	2b08      	cmp	r3, #8
 800542c:	d05c      	beq.n	80054e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d141      	bne.n	80054ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005436:	4b31      	ldr	r3, [pc, #196]	@ (80054fc <HAL_RCC_OscConfig+0x478>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543c:	f7fc fa5c 	bl	80018f8 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005444:	f7fc fa58 	bl	80018f8 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e087      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005456:	4b27      	ldr	r3, [pc, #156]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f0      	bne.n	8005444 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69da      	ldr	r2, [r3, #28]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005470:	019b      	lsls	r3, r3, #6
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005478:	085b      	lsrs	r3, r3, #1
 800547a:	3b01      	subs	r3, #1
 800547c:	041b      	lsls	r3, r3, #16
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005484:	061b      	lsls	r3, r3, #24
 8005486:	491b      	ldr	r1, [pc, #108]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005488:	4313      	orrs	r3, r2
 800548a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800548c:	4b1b      	ldr	r3, [pc, #108]	@ (80054fc <HAL_RCC_OscConfig+0x478>)
 800548e:	2201      	movs	r2, #1
 8005490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005492:	f7fc fa31 	bl	80018f8 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549a:	f7fc fa2d 	bl	80018f8 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e05c      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ac:	4b11      	ldr	r3, [pc, #68]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f0      	beq.n	800549a <HAL_RCC_OscConfig+0x416>
 80054b8:	e054      	b.n	8005564 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ba:	4b10      	ldr	r3, [pc, #64]	@ (80054fc <HAL_RCC_OscConfig+0x478>)
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c0:	f7fc fa1a 	bl	80018f8 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c8:	f7fc fa16 	bl	80018f8 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e045      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054da:	4b06      	ldr	r3, [pc, #24]	@ (80054f4 <HAL_RCC_OscConfig+0x470>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0x444>
 80054e6:	e03d      	b.n	8005564 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d107      	bne.n	8005500 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e038      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
 80054f4:	40023800 	.word	0x40023800
 80054f8:	40007000 	.word	0x40007000
 80054fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005500:	4b1b      	ldr	r3, [pc, #108]	@ (8005570 <HAL_RCC_OscConfig+0x4ec>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d028      	beq.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005518:	429a      	cmp	r2, r3
 800551a:	d121      	bne.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d11a      	bne.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005530:	4013      	ands	r3, r2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005536:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005538:	4293      	cmp	r3, r2
 800553a:	d111      	bne.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005546:	085b      	lsrs	r3, r3, #1
 8005548:	3b01      	subs	r3, #1
 800554a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800554c:	429a      	cmp	r2, r3
 800554e:	d107      	bne.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800555c:	429a      	cmp	r2, r3
 800555e:	d001      	beq.n	8005564 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	40023800 	.word	0x40023800

08005574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e0cc      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005588:	4b68      	ldr	r3, [pc, #416]	@ (800572c <HAL_RCC_ClockConfig+0x1b8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d90c      	bls.n	80055b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005596:	4b65      	ldr	r3, [pc, #404]	@ (800572c <HAL_RCC_ClockConfig+0x1b8>)
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	4b63      	ldr	r3, [pc, #396]	@ (800572c <HAL_RCC_ClockConfig+0x1b8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e0b8      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d020      	beq.n	80055fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055c8:	4b59      	ldr	r3, [pc, #356]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	4a58      	ldr	r2, [pc, #352]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055e0:	4b53      	ldr	r3, [pc, #332]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	4a52      	ldr	r2, [pc, #328]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055ec:	4b50      	ldr	r3, [pc, #320]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	494d      	ldr	r1, [pc, #308]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d044      	beq.n	8005694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d107      	bne.n	8005622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005612:	4b47      	ldr	r3, [pc, #284]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d119      	bne.n	8005652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e07f      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d003      	beq.n	8005632 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800562e:	2b03      	cmp	r3, #3
 8005630:	d107      	bne.n	8005642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005632:	4b3f      	ldr	r3, [pc, #252]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d109      	bne.n	8005652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e06f      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005642:	4b3b      	ldr	r3, [pc, #236]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e067      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005652:	4b37      	ldr	r3, [pc, #220]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f023 0203 	bic.w	r2, r3, #3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	4934      	ldr	r1, [pc, #208]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	4313      	orrs	r3, r2
 8005662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005664:	f7fc f948 	bl	80018f8 <HAL_GetTick>
 8005668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800566a:	e00a      	b.n	8005682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800566c:	f7fc f944 	bl	80018f8 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800567a:	4293      	cmp	r3, r2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e04f      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005682:	4b2b      	ldr	r3, [pc, #172]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 020c 	and.w	r2, r3, #12
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	429a      	cmp	r2, r3
 8005692:	d1eb      	bne.n	800566c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005694:	4b25      	ldr	r3, [pc, #148]	@ (800572c <HAL_RCC_ClockConfig+0x1b8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d20c      	bcs.n	80056bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a2:	4b22      	ldr	r3, [pc, #136]	@ (800572c <HAL_RCC_ClockConfig+0x1b8>)
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056aa:	4b20      	ldr	r3, [pc, #128]	@ (800572c <HAL_RCC_ClockConfig+0x1b8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d001      	beq.n	80056bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e032      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056c8:	4b19      	ldr	r3, [pc, #100]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4916      	ldr	r1, [pc, #88]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056e6:	4b12      	ldr	r3, [pc, #72]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	490e      	ldr	r1, [pc, #56]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056fa:	f000 f821 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80056fe:	4602      	mov	r2, r0
 8005700:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	490a      	ldr	r1, [pc, #40]	@ (8005734 <HAL_RCC_ClockConfig+0x1c0>)
 800570c:	5ccb      	ldrb	r3, [r1, r3]
 800570e:	fa22 f303 	lsr.w	r3, r2, r3
 8005712:	4a09      	ldr	r2, [pc, #36]	@ (8005738 <HAL_RCC_ClockConfig+0x1c4>)
 8005714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005716:	4b09      	ldr	r3, [pc, #36]	@ (800573c <HAL_RCC_ClockConfig+0x1c8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f7fc f8a8 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40023c00 	.word	0x40023c00
 8005730:	40023800 	.word	0x40023800
 8005734:	0800c740 	.word	0x0800c740
 8005738:	20000000 	.word	0x20000000
 800573c:	20000004 	.word	0x20000004

08005740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005744:	b094      	sub	sp, #80	@ 0x50
 8005746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005758:	4b79      	ldr	r3, [pc, #484]	@ (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 030c 	and.w	r3, r3, #12
 8005760:	2b08      	cmp	r3, #8
 8005762:	d00d      	beq.n	8005780 <HAL_RCC_GetSysClockFreq+0x40>
 8005764:	2b08      	cmp	r3, #8
 8005766:	f200 80e1 	bhi.w	800592c <HAL_RCC_GetSysClockFreq+0x1ec>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <HAL_RCC_GetSysClockFreq+0x34>
 800576e:	2b04      	cmp	r3, #4
 8005770:	d003      	beq.n	800577a <HAL_RCC_GetSysClockFreq+0x3a>
 8005772:	e0db      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005774:	4b73      	ldr	r3, [pc, #460]	@ (8005944 <HAL_RCC_GetSysClockFreq+0x204>)
 8005776:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005778:	e0db      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800577a:	4b73      	ldr	r3, [pc, #460]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x208>)
 800577c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800577e:	e0d8      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005780:	4b6f      	ldr	r3, [pc, #444]	@ (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005788:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800578a:	4b6d      	ldr	r3, [pc, #436]	@ (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d063      	beq.n	800585e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005796:	4b6a      	ldr	r3, [pc, #424]	@ (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	099b      	lsrs	r3, r3, #6
 800579c:	2200      	movs	r2, #0
 800579e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80057a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80057aa:	2300      	movs	r3, #0
 80057ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80057b2:	4622      	mov	r2, r4
 80057b4:	462b      	mov	r3, r5
 80057b6:	f04f 0000 	mov.w	r0, #0
 80057ba:	f04f 0100 	mov.w	r1, #0
 80057be:	0159      	lsls	r1, r3, #5
 80057c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057c4:	0150      	lsls	r0, r2, #5
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4621      	mov	r1, r4
 80057cc:	1a51      	subs	r1, r2, r1
 80057ce:	6139      	str	r1, [r7, #16]
 80057d0:	4629      	mov	r1, r5
 80057d2:	eb63 0301 	sbc.w	r3, r3, r1
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057e4:	4659      	mov	r1, fp
 80057e6:	018b      	lsls	r3, r1, #6
 80057e8:	4651      	mov	r1, sl
 80057ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057ee:	4651      	mov	r1, sl
 80057f0:	018a      	lsls	r2, r1, #6
 80057f2:	4651      	mov	r1, sl
 80057f4:	ebb2 0801 	subs.w	r8, r2, r1
 80057f8:	4659      	mov	r1, fp
 80057fa:	eb63 0901 	sbc.w	r9, r3, r1
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800580a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800580e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005812:	4690      	mov	r8, r2
 8005814:	4699      	mov	r9, r3
 8005816:	4623      	mov	r3, r4
 8005818:	eb18 0303 	adds.w	r3, r8, r3
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	462b      	mov	r3, r5
 8005820:	eb49 0303 	adc.w	r3, r9, r3
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	f04f 0200 	mov.w	r2, #0
 800582a:	f04f 0300 	mov.w	r3, #0
 800582e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005832:	4629      	mov	r1, r5
 8005834:	024b      	lsls	r3, r1, #9
 8005836:	4621      	mov	r1, r4
 8005838:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800583c:	4621      	mov	r1, r4
 800583e:	024a      	lsls	r2, r1, #9
 8005840:	4610      	mov	r0, r2
 8005842:	4619      	mov	r1, r3
 8005844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005846:	2200      	movs	r2, #0
 8005848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800584a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800584c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005850:	f7fb f9aa 	bl	8000ba8 <__aeabi_uldivmod>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4613      	mov	r3, r2
 800585a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800585c:	e058      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800585e:	4b38      	ldr	r3, [pc, #224]	@ (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	099b      	lsrs	r3, r3, #6
 8005864:	2200      	movs	r2, #0
 8005866:	4618      	mov	r0, r3
 8005868:	4611      	mov	r1, r2
 800586a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800586e:	623b      	str	r3, [r7, #32]
 8005870:	2300      	movs	r3, #0
 8005872:	627b      	str	r3, [r7, #36]	@ 0x24
 8005874:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005878:	4642      	mov	r2, r8
 800587a:	464b      	mov	r3, r9
 800587c:	f04f 0000 	mov.w	r0, #0
 8005880:	f04f 0100 	mov.w	r1, #0
 8005884:	0159      	lsls	r1, r3, #5
 8005886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800588a:	0150      	lsls	r0, r2, #5
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4641      	mov	r1, r8
 8005892:	ebb2 0a01 	subs.w	sl, r2, r1
 8005896:	4649      	mov	r1, r9
 8005898:	eb63 0b01 	sbc.w	fp, r3, r1
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058b0:	ebb2 040a 	subs.w	r4, r2, sl
 80058b4:	eb63 050b 	sbc.w	r5, r3, fp
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	00eb      	lsls	r3, r5, #3
 80058c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058c6:	00e2      	lsls	r2, r4, #3
 80058c8:	4614      	mov	r4, r2
 80058ca:	461d      	mov	r5, r3
 80058cc:	4643      	mov	r3, r8
 80058ce:	18e3      	adds	r3, r4, r3
 80058d0:	603b      	str	r3, [r7, #0]
 80058d2:	464b      	mov	r3, r9
 80058d4:	eb45 0303 	adc.w	r3, r5, r3
 80058d8:	607b      	str	r3, [r7, #4]
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058e6:	4629      	mov	r1, r5
 80058e8:	028b      	lsls	r3, r1, #10
 80058ea:	4621      	mov	r1, r4
 80058ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058f0:	4621      	mov	r1, r4
 80058f2:	028a      	lsls	r2, r1, #10
 80058f4:	4610      	mov	r0, r2
 80058f6:	4619      	mov	r1, r3
 80058f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058fa:	2200      	movs	r2, #0
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	61fa      	str	r2, [r7, #28]
 8005900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005904:	f7fb f950 	bl	8000ba8 <__aeabi_uldivmod>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4613      	mov	r3, r2
 800590e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005910:	4b0b      	ldr	r3, [pc, #44]	@ (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	0c1b      	lsrs	r3, r3, #16
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	3301      	adds	r3, #1
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005920:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800592a:	e002      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800592c:	4b05      	ldr	r3, [pc, #20]	@ (8005944 <HAL_RCC_GetSysClockFreq+0x204>)
 800592e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005934:	4618      	mov	r0, r3
 8005936:	3750      	adds	r7, #80	@ 0x50
 8005938:	46bd      	mov	sp, r7
 800593a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800593e:	bf00      	nop
 8005940:	40023800 	.word	0x40023800
 8005944:	00f42400 	.word	0x00f42400
 8005948:	007a1200 	.word	0x007a1200

0800594c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005950:	4b03      	ldr	r3, [pc, #12]	@ (8005960 <HAL_RCC_GetHCLKFreq+0x14>)
 8005952:	681b      	ldr	r3, [r3, #0]
}
 8005954:	4618      	mov	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	20000000 	.word	0x20000000

08005964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005968:	f7ff fff0 	bl	800594c <HAL_RCC_GetHCLKFreq>
 800596c:	4602      	mov	r2, r0
 800596e:	4b05      	ldr	r3, [pc, #20]	@ (8005984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	0a9b      	lsrs	r3, r3, #10
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	4903      	ldr	r1, [pc, #12]	@ (8005988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800597a:	5ccb      	ldrb	r3, [r1, r3]
 800597c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40023800 	.word	0x40023800
 8005988:	0800c750 	.word	0x0800c750

0800598c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800598c:	b084      	sub	sp, #16
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	f107 001c 	add.w	r0, r7, #28
 800599a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800599e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d123      	bne.n	80059ee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80059ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d105      	bne.n	80059e2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 fae8 	bl	8006fb8 <USB_CoreReset>
 80059e8:	4603      	mov	r3, r0
 80059ea:	73fb      	strb	r3, [r7, #15]
 80059ec:	e01b      	b.n	8005a26 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f001 fadc 	bl	8006fb8 <USB_CoreReset>
 8005a00:	4603      	mov	r3, r0
 8005a02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d106      	bne.n	8005a1a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a18:	e005      	b.n	8005a26 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a26:	7fbb      	ldrb	r3, [r7, #30]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d10b      	bne.n	8005a44 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f043 0206 	orr.w	r2, r3, #6
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f043 0220 	orr.w	r2, r3, #32
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a50:	b004      	add	sp, #16
 8005a52:	4770      	bx	lr

08005a54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d165      	bne.n	8005b34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4a41      	ldr	r2, [pc, #260]	@ (8005b70 <USB_SetTurnaroundTime+0x11c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d906      	bls.n	8005a7e <USB_SetTurnaroundTime+0x2a>
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	4a40      	ldr	r2, [pc, #256]	@ (8005b74 <USB_SetTurnaroundTime+0x120>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d202      	bcs.n	8005a7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a78:	230f      	movs	r3, #15
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	e062      	b.n	8005b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	4a3c      	ldr	r2, [pc, #240]	@ (8005b74 <USB_SetTurnaroundTime+0x120>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d306      	bcc.n	8005a94 <USB_SetTurnaroundTime+0x40>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	4a3b      	ldr	r2, [pc, #236]	@ (8005b78 <USB_SetTurnaroundTime+0x124>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d202      	bcs.n	8005a94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a8e:	230e      	movs	r3, #14
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	e057      	b.n	8005b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4a38      	ldr	r2, [pc, #224]	@ (8005b78 <USB_SetTurnaroundTime+0x124>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d306      	bcc.n	8005aaa <USB_SetTurnaroundTime+0x56>
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4a37      	ldr	r2, [pc, #220]	@ (8005b7c <USB_SetTurnaroundTime+0x128>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d202      	bcs.n	8005aaa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005aa4:	230d      	movs	r3, #13
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	e04c      	b.n	8005b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	4a33      	ldr	r2, [pc, #204]	@ (8005b7c <USB_SetTurnaroundTime+0x128>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d306      	bcc.n	8005ac0 <USB_SetTurnaroundTime+0x6c>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4a32      	ldr	r2, [pc, #200]	@ (8005b80 <USB_SetTurnaroundTime+0x12c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d802      	bhi.n	8005ac0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005aba:	230c      	movs	r3, #12
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	e041      	b.n	8005b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8005b80 <USB_SetTurnaroundTime+0x12c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d906      	bls.n	8005ad6 <USB_SetTurnaroundTime+0x82>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4a2e      	ldr	r2, [pc, #184]	@ (8005b84 <USB_SetTurnaroundTime+0x130>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d802      	bhi.n	8005ad6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ad0:	230b      	movs	r3, #11
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	e036      	b.n	8005b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8005b84 <USB_SetTurnaroundTime+0x130>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d906      	bls.n	8005aec <USB_SetTurnaroundTime+0x98>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4a29      	ldr	r2, [pc, #164]	@ (8005b88 <USB_SetTurnaroundTime+0x134>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d802      	bhi.n	8005aec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ae6:	230a      	movs	r3, #10
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	e02b      	b.n	8005b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4a26      	ldr	r2, [pc, #152]	@ (8005b88 <USB_SetTurnaroundTime+0x134>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d906      	bls.n	8005b02 <USB_SetTurnaroundTime+0xae>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4a25      	ldr	r2, [pc, #148]	@ (8005b8c <USB_SetTurnaroundTime+0x138>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d202      	bcs.n	8005b02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005afc:	2309      	movs	r3, #9
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e020      	b.n	8005b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	4a21      	ldr	r2, [pc, #132]	@ (8005b8c <USB_SetTurnaroundTime+0x138>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d306      	bcc.n	8005b18 <USB_SetTurnaroundTime+0xc4>
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	4a20      	ldr	r2, [pc, #128]	@ (8005b90 <USB_SetTurnaroundTime+0x13c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d802      	bhi.n	8005b18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b12:	2308      	movs	r3, #8
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	e015      	b.n	8005b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005b90 <USB_SetTurnaroundTime+0x13c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d906      	bls.n	8005b2e <USB_SetTurnaroundTime+0xda>
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4a1c      	ldr	r2, [pc, #112]	@ (8005b94 <USB_SetTurnaroundTime+0x140>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d202      	bcs.n	8005b2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b28:	2307      	movs	r3, #7
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	e00a      	b.n	8005b44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b2e:	2306      	movs	r3, #6
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	e007      	b.n	8005b44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d102      	bne.n	8005b40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005b3a:	2309      	movs	r3, #9
 8005b3c:	617b      	str	r3, [r7, #20]
 8005b3e:	e001      	b.n	8005b44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b40:	2309      	movs	r3, #9
 8005b42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	029b      	lsls	r3, r3, #10
 8005b58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	00d8acbf 	.word	0x00d8acbf
 8005b74:	00e4e1c0 	.word	0x00e4e1c0
 8005b78:	00f42400 	.word	0x00f42400
 8005b7c:	01067380 	.word	0x01067380
 8005b80:	011a499f 	.word	0x011a499f
 8005b84:	01312cff 	.word	0x01312cff
 8005b88:	014ca43f 	.word	0x014ca43f
 8005b8c:	016e3600 	.word	0x016e3600
 8005b90:	01a6ab1f 	.word	0x01a6ab1f
 8005b94:	01e84800 	.word	0x01e84800

08005b98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f043 0201 	orr.w	r2, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f023 0201 	bic.w	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d115      	bne.n	8005c2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c0a:	200a      	movs	r0, #10
 8005c0c:	f7fb fe80 	bl	8001910 <HAL_Delay>
      ms += 10U;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	330a      	adds	r3, #10
 8005c14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f001 f93f 	bl	8006e9a <USB_GetMode>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d01e      	beq.n	8005c60 <USB_SetCurrentMode+0x84>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c26:	d9f0      	bls.n	8005c0a <USB_SetCurrentMode+0x2e>
 8005c28:	e01a      	b.n	8005c60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d115      	bne.n	8005c5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c3c:	200a      	movs	r0, #10
 8005c3e:	f7fb fe67 	bl	8001910 <HAL_Delay>
      ms += 10U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	330a      	adds	r3, #10
 8005c46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 f926 	bl	8006e9a <USB_GetMode>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <USB_SetCurrentMode+0x84>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c58:	d9f0      	bls.n	8005c3c <USB_SetCurrentMode+0x60>
 8005c5a:	e001      	b.n	8005c60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e005      	b.n	8005c6c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2bc8      	cmp	r3, #200	@ 0xc8
 8005c64:	d101      	bne.n	8005c6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c74:	b084      	sub	sp, #16
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b086      	sub	sp, #24
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c8e:	2300      	movs	r3, #0
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	e009      	b.n	8005ca8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	3340      	adds	r3, #64	@ 0x40
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b0e      	cmp	r3, #14
 8005cac:	d9f2      	bls.n	8005c94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d11c      	bne.n	8005cf0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cc4:	f043 0302 	orr.w	r3, r3, #2
 8005cc8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cda:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	639a      	str	r2, [r3, #56]	@ 0x38
 8005cee:	e00b      	b.n	8005d08 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d00:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2300      	movs	r3, #0
 8005d12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d10d      	bne.n	8005d38 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d104      	bne.n	8005d2e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d24:	2100      	movs	r1, #0
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f968 	bl	8005ffc <USB_SetDevSpeed>
 8005d2c:	e008      	b.n	8005d40 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d2e:	2101      	movs	r1, #1
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f963 	bl	8005ffc <USB_SetDevSpeed>
 8005d36:	e003      	b.n	8005d40 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d38:	2103      	movs	r1, #3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f95e 	bl	8005ffc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d40:	2110      	movs	r1, #16
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f8fa 	bl	8005f3c <USB_FlushTxFifo>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f924 	bl	8005fa0 <USB_FlushRxFifo>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d74:	461a      	mov	r2, r3
 8005d76:	2300      	movs	r3, #0
 8005d78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d80:	461a      	mov	r2, r3
 8005d82:	2300      	movs	r3, #0
 8005d84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d86:	2300      	movs	r3, #0
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	e043      	b.n	8005e14 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005da2:	d118      	bne.n	8005dd6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10a      	bne.n	8005dc0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db6:	461a      	mov	r2, r3
 8005db8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	e013      	b.n	8005de8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	e008      	b.n	8005de8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de2:	461a      	mov	r2, r3
 8005de4:	2300      	movs	r3, #0
 8005de6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df4:	461a      	mov	r2, r3
 8005df6:	2300      	movs	r3, #0
 8005df8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e06:	461a      	mov	r2, r3
 8005e08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	3301      	adds	r3, #1
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e18:	461a      	mov	r2, r3
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d3b5      	bcc.n	8005d8c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e20:	2300      	movs	r3, #0
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	e043      	b.n	8005eae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e3c:	d118      	bne.n	8005e70 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e50:	461a      	mov	r2, r3
 8005e52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	e013      	b.n	8005e82 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e66:	461a      	mov	r2, r3
 8005e68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e008      	b.n	8005e82 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	2300      	movs	r3, #0
 8005e80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e8e:	461a      	mov	r2, r3
 8005e90:	2300      	movs	r3, #0
 8005e92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ea6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	613b      	str	r3, [r7, #16]
 8005eae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d3b5      	bcc.n	8005e26 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ecc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005eda:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005edc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d105      	bne.n	8005ef0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	f043 0210 	orr.w	r2, r3, #16
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699a      	ldr	r2, [r3, #24]
 8005ef4:	4b10      	ldr	r3, [pc, #64]	@ (8005f38 <USB_DevInit+0x2c4>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005efc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	f043 0208 	orr.w	r2, r3, #8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d107      	bne.n	8005f28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f20:	f043 0304 	orr.w	r3, r3, #4
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f34:	b004      	add	sp, #16
 8005f36:	4770      	bx	lr
 8005f38:	803c3800 	.word	0x803c3800

08005f3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f56:	d901      	bls.n	8005f5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e01b      	b.n	8005f94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	daf2      	bge.n	8005f4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	019b      	lsls	r3, r3, #6
 8005f6c:	f043 0220 	orr.w	r2, r3, #32
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3301      	adds	r3, #1
 8005f78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f80:	d901      	bls.n	8005f86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e006      	b.n	8005f94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d0f0      	beq.n	8005f74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fb8:	d901      	bls.n	8005fbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e018      	b.n	8005ff0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	daf2      	bge.n	8005fac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2210      	movs	r2, #16
 8005fce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fdc:	d901      	bls.n	8005fe2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e006      	b.n	8005ff0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f003 0310 	and.w	r3, r3, #16
 8005fea:	2b10      	cmp	r3, #16
 8005fec:	d0f0      	beq.n	8005fd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800601c:	4313      	orrs	r3, r2
 800601e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800602e:	b480      	push	{r7}
 8006030:	b087      	sub	sp, #28
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 0306 	and.w	r3, r3, #6
 8006046:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d102      	bne.n	8006054 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800604e:	2300      	movs	r3, #0
 8006050:	75fb      	strb	r3, [r7, #23]
 8006052:	e00a      	b.n	800606a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d002      	beq.n	8006060 <USB_GetDevSpeed+0x32>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b06      	cmp	r3, #6
 800605e:	d102      	bne.n	8006066 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006060:	2302      	movs	r3, #2
 8006062:	75fb      	strb	r3, [r7, #23]
 8006064:	e001      	b.n	800606a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006066:	230f      	movs	r3, #15
 8006068:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
}
 800606c:	4618      	mov	r0, r3
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	785b      	ldrb	r3, [r3, #1]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d13a      	bne.n	800610a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	2101      	movs	r1, #1
 80060a6:	fa01 f303 	lsl.w	r3, r1, r3
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	68f9      	ldr	r1, [r7, #12]
 80060ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060b2:	4313      	orrs	r3, r2
 80060b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d155      	bne.n	8006178 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	791b      	ldrb	r3, [r3, #4]
 80060e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	059b      	lsls	r3, r3, #22
 80060ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060f0:	4313      	orrs	r3, r2
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	e036      	b.n	8006178 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006110:	69da      	ldr	r2, [r3, #28]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	2101      	movs	r1, #1
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	041b      	lsls	r3, r3, #16
 8006122:	68f9      	ldr	r1, [r7, #12]
 8006124:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006128:	4313      	orrs	r3, r2
 800612a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d11a      	bne.n	8006178 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	791b      	ldrb	r3, [r3, #4]
 800615c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800615e:	430b      	orrs	r3, r1
 8006160:	4313      	orrs	r3, r2
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	440a      	add	r2, r1
 800616a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800616e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006176:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
	...

08006188 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	785b      	ldrb	r3, [r3, #1]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d161      	bne.n	8006268 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061ba:	d11f      	bne.n	80061fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	0151      	lsls	r1, r2, #5
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	440a      	add	r2, r1
 80061d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006202:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f003 030f 	and.w	r3, r3, #15
 800620c:	2101      	movs	r1, #1
 800620e:	fa01 f303 	lsl.w	r3, r1, r3
 8006212:	b29b      	uxth	r3, r3
 8006214:	43db      	mvns	r3, r3
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800621c:	4013      	ands	r3, r2
 800621e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	2101      	movs	r1, #1
 8006232:	fa01 f303 	lsl.w	r3, r1, r3
 8006236:	b29b      	uxth	r3, r3
 8006238:	43db      	mvns	r3, r3
 800623a:	68f9      	ldr	r1, [r7, #12]
 800623c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006240:	4013      	ands	r3, r2
 8006242:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	0159      	lsls	r1, r3, #5
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	440b      	add	r3, r1
 800625a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625e:	4619      	mov	r1, r3
 8006260:	4b35      	ldr	r3, [pc, #212]	@ (8006338 <USB_DeactivateEndpoint+0x1b0>)
 8006262:	4013      	ands	r3, r2
 8006264:	600b      	str	r3, [r1, #0]
 8006266:	e060      	b.n	800632a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800627a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800627e:	d11f      	bne.n	80062c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800629a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800629e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	2101      	movs	r1, #1
 80062d2:	fa01 f303 	lsl.w	r3, r1, r3
 80062d6:	041b      	lsls	r3, r3, #16
 80062d8:	43db      	mvns	r3, r3
 80062da:	68f9      	ldr	r1, [r7, #12]
 80062dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062e0:	4013      	ands	r3, r2
 80062e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	f003 030f 	and.w	r3, r3, #15
 80062f4:	2101      	movs	r1, #1
 80062f6:	fa01 f303 	lsl.w	r3, r1, r3
 80062fa:	041b      	lsls	r3, r3, #16
 80062fc:	43db      	mvns	r3, r3
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006304:	4013      	ands	r3, r2
 8006306:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	0159      	lsls	r1, r3, #5
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	440b      	add	r3, r1
 800631e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006322:	4619      	mov	r1, r3
 8006324:	4b05      	ldr	r3, [pc, #20]	@ (800633c <USB_DeactivateEndpoint+0x1b4>)
 8006326:	4013      	ands	r3, r2
 8006328:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	ec337800 	.word	0xec337800
 800633c:	eff37800 	.word	0xeff37800

08006340 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08a      	sub	sp, #40	@ 0x28
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	4613      	mov	r3, r2
 800634c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	785b      	ldrb	r3, [r3, #1]
 800635c:	2b01      	cmp	r3, #1
 800635e:	f040 817f 	bne.w	8006660 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d132      	bne.n	80063d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	69fa      	ldr	r2, [r7, #28]
 800637e:	440a      	add	r2, r1
 8006380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006384:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006388:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800638c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	0151      	lsls	r1, r2, #5
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	440a      	add	r2, r1
 80063a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	0151      	lsls	r1, r2, #5
 80063c0:	69fa      	ldr	r2, [r7, #28]
 80063c2:	440a      	add	r2, r1
 80063c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063c8:	0cdb      	lsrs	r3, r3, #19
 80063ca:	04db      	lsls	r3, r3, #19
 80063cc:	6113      	str	r3, [r2, #16]
 80063ce:	e097      	b.n	8006500 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063ea:	0cdb      	lsrs	r3, r3, #19
 80063ec:	04db      	lsls	r3, r3, #19
 80063ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	440a      	add	r2, r1
 8006406:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800640a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800640e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006412:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d11a      	bne.n	8006450 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	429a      	cmp	r2, r3
 8006424:	d903      	bls.n	800642e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	440a      	add	r2, r1
 8006444:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006448:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800644c:	6113      	str	r3, [r2, #16]
 800644e:	e044      	b.n	80064da <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	4413      	add	r3, r2
 800645a:	1e5a      	subs	r2, r3, #1
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	fbb2 f3f3 	udiv	r3, r2, r3
 8006464:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	8afb      	ldrh	r3, [r7, #22]
 8006476:	04d9      	lsls	r1, r3, #19
 8006478:	4ba4      	ldr	r3, [pc, #656]	@ (800670c <USB_EPStartXfer+0x3cc>)
 800647a:	400b      	ands	r3, r1
 800647c:	69b9      	ldr	r1, [r7, #24]
 800647e:	0148      	lsls	r0, r1, #5
 8006480:	69f9      	ldr	r1, [r7, #28]
 8006482:	4401      	add	r1, r0
 8006484:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006488:	4313      	orrs	r3, r2
 800648a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	791b      	ldrb	r3, [r3, #4]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d122      	bne.n	80064da <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	69fa      	ldr	r2, [r7, #28]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80064b2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	8afb      	ldrh	r3, [r7, #22]
 80064c4:	075b      	lsls	r3, r3, #29
 80064c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80064ca:	69b9      	ldr	r1, [r7, #24]
 80064cc:	0148      	lsls	r0, r1, #5
 80064ce:	69f9      	ldr	r1, [r7, #28]
 80064d0:	4401      	add	r1, r0
 80064d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80064d6:	4313      	orrs	r3, r2
 80064d8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064f0:	69b9      	ldr	r1, [r7, #24]
 80064f2:	0148      	lsls	r0, r1, #5
 80064f4:	69f9      	ldr	r1, [r7, #28]
 80064f6:	4401      	add	r1, r0
 80064f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80064fc:	4313      	orrs	r3, r2
 80064fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d14b      	bne.n	800659e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d009      	beq.n	8006522 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800651a:	461a      	mov	r2, r3
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	791b      	ldrb	r3, [r3, #4]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d128      	bne.n	800657c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006536:	2b00      	cmp	r3, #0
 8006538:	d110      	bne.n	800655c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	440a      	add	r2, r1
 8006550:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006554:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	e00f      	b.n	800657c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	440a      	add	r2, r1
 8006572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800657a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	69fa      	ldr	r2, [r7, #28]
 8006590:	440a      	add	r2, r1
 8006592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006596:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800659a:	6013      	str	r3, [r2, #0]
 800659c:	e166      	b.n	800686c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80065bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	791b      	ldrb	r3, [r3, #4]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d015      	beq.n	80065f2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 814e 	beq.w	800686c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	2101      	movs	r1, #1
 80065e2:	fa01 f303 	lsl.w	r3, r1, r3
 80065e6:	69f9      	ldr	r1, [r7, #28]
 80065e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065ec:	4313      	orrs	r3, r2
 80065ee:	634b      	str	r3, [r1, #52]	@ 0x34
 80065f0:	e13c      	b.n	800686c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d110      	bne.n	8006624 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	0151      	lsls	r1, r2, #5
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	440a      	add	r2, r1
 8006618:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800661c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	e00f      	b.n	8006644 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	0151      	lsls	r1, r2, #5
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	440a      	add	r2, r1
 800663a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800663e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006642:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	68d9      	ldr	r1, [r3, #12]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	781a      	ldrb	r2, [r3, #0]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	b298      	uxth	r0, r3
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	4603      	mov	r3, r0
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 f9b9 	bl	80069d0 <USB_WritePacket>
 800665e:	e105      	b.n	800686c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	440a      	add	r2, r1
 8006676:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800667a:	0cdb      	lsrs	r3, r3, #19
 800667c:	04db      	lsls	r3, r3, #19
 800667e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	440a      	add	r2, r1
 8006696:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800669a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800669e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80066a2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d132      	bne.n	8006710 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066d8:	69b9      	ldr	r1, [r7, #24]
 80066da:	0148      	lsls	r0, r1, #5
 80066dc:	69f9      	ldr	r1, [r7, #28]
 80066de:	4401      	add	r1, r0
 80066e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80066e4:	4313      	orrs	r3, r2
 80066e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	0151      	lsls	r1, r2, #5
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	440a      	add	r2, r1
 80066fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006702:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006706:	6113      	str	r3, [r2, #16]
 8006708:	e062      	b.n	80067d0 <USB_EPStartXfer+0x490>
 800670a:	bf00      	nop
 800670c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d123      	bne.n	8006760 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800672e:	69b9      	ldr	r1, [r7, #24]
 8006730:	0148      	lsls	r0, r1, #5
 8006732:	69f9      	ldr	r1, [r7, #28]
 8006734:	4401      	add	r1, r0
 8006736:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800673a:	4313      	orrs	r3, r2
 800673c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	0151      	lsls	r1, r2, #5
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	440a      	add	r2, r1
 8006754:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006758:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800675c:	6113      	str	r3, [r2, #16]
 800675e:	e037      	b.n	80067d0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	4413      	add	r3, r2
 800676a:	1e5a      	subs	r2, r3, #1
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	fbb2 f3f3 	udiv	r3, r2, r3
 8006774:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	8afa      	ldrh	r2, [r7, #22]
 800677c:	fb03 f202 	mul.w	r2, r3, r2
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006790:	691a      	ldr	r2, [r3, #16]
 8006792:	8afb      	ldrh	r3, [r7, #22]
 8006794:	04d9      	lsls	r1, r3, #19
 8006796:	4b38      	ldr	r3, [pc, #224]	@ (8006878 <USB_EPStartXfer+0x538>)
 8006798:	400b      	ands	r3, r1
 800679a:	69b9      	ldr	r1, [r7, #24]
 800679c:	0148      	lsls	r0, r1, #5
 800679e:	69f9      	ldr	r1, [r7, #28]
 80067a0:	4401      	add	r1, r0
 80067a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80067a6:	4313      	orrs	r3, r2
 80067a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b6:	691a      	ldr	r2, [r3, #16]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067c0:	69b9      	ldr	r1, [r7, #24]
 80067c2:	0148      	lsls	r0, r1, #5
 80067c4:	69f9      	ldr	r1, [r7, #28]
 80067c6:	4401      	add	r1, r0
 80067c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80067cc:	4313      	orrs	r3, r2
 80067ce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d10d      	bne.n	80067f2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d009      	beq.n	80067f2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	68d9      	ldr	r1, [r3, #12]
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ee:	460a      	mov	r2, r1
 80067f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	791b      	ldrb	r3, [r3, #4]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d128      	bne.n	800684c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006806:	2b00      	cmp	r3, #0
 8006808:	d110      	bne.n	800682c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006824:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	e00f      	b.n	800684c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	0151      	lsls	r1, r2, #5
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	440a      	add	r2, r1
 8006842:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800684a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	69fa      	ldr	r2, [r7, #28]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006866:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800686a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3720      	adds	r7, #32
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	1ff80000 	.word	0x1ff80000

0800687c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d14a      	bne.n	8006930 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068b2:	f040 8086 	bne.w	80069c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	7812      	ldrb	r2, [r2, #0]
 80068ca:	0151      	lsls	r1, r2, #5
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	440a      	add	r2, r1
 80068d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	7812      	ldrb	r2, [r2, #0]
 80068ee:	0151      	lsls	r1, r2, #5
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	440a      	add	r2, r1
 80068f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f242 7210 	movw	r2, #10000	@ 0x2710
 800690a:	4293      	cmp	r3, r2
 800690c:	d902      	bls.n	8006914 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	75fb      	strb	r3, [r7, #23]
          break;
 8006912:	e056      	b.n	80069c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006928:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800692c:	d0e7      	beq.n	80068fe <USB_EPStopXfer+0x82>
 800692e:	e048      	b.n	80069c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006944:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006948:	d13b      	bne.n	80069c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	7812      	ldrb	r2, [r2, #0]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	440a      	add	r2, r1
 8006964:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006968:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800696c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	7812      	ldrb	r2, [r2, #0]
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	440a      	add	r2, r1
 8006988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800698c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006990:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3301      	adds	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800699e:	4293      	cmp	r3, r2
 80069a0:	d902      	bls.n	80069a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]
          break;
 80069a6:	e00c      	b.n	80069c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069c0:	d0e7      	beq.n	8006992 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	371c      	adds	r7, #28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b089      	sub	sp, #36	@ 0x24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	4611      	mov	r1, r2
 80069dc:	461a      	mov	r2, r3
 80069de:	460b      	mov	r3, r1
 80069e0:	71fb      	strb	r3, [r7, #7]
 80069e2:	4613      	mov	r3, r2
 80069e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80069ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d123      	bne.n	8006a3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80069f6:	88bb      	ldrh	r3, [r7, #4]
 80069f8:	3303      	adds	r3, #3
 80069fa:	089b      	lsrs	r3, r3, #2
 80069fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80069fe:	2300      	movs	r3, #0
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	e018      	b.n	8006a36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	031a      	lsls	r2, r3, #12
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a10:	461a      	mov	r2, r3
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	3301      	adds	r3, #1
 8006a22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	3301      	adds	r3, #1
 8006a28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	3301      	adds	r3, #1
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d3e2      	bcc.n	8006a04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3724      	adds	r7, #36	@ 0x24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b08b      	sub	sp, #44	@ 0x2c
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	4613      	mov	r3, r2
 8006a58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a62:	88fb      	ldrh	r3, [r7, #6]
 8006a64:	089b      	lsrs	r3, r3, #2
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a6a:	88fb      	ldrh	r3, [r7, #6]
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a72:	2300      	movs	r3, #0
 8006a74:	623b      	str	r3, [r7, #32]
 8006a76:	e014      	b.n	8006aa2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	3301      	adds	r3, #1
 8006a88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a92:	3301      	adds	r3, #1
 8006a94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	3301      	adds	r3, #1
 8006a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	623b      	str	r3, [r7, #32]
 8006aa2:	6a3a      	ldr	r2, [r7, #32]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d3e6      	bcc.n	8006a78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006aaa:	8bfb      	ldrh	r3, [r7, #30]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01e      	beq.n	8006aee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aba:	461a      	mov	r2, r3
 8006abc:	f107 0310 	add.w	r3, r7, #16
 8006ac0:	6812      	ldr	r2, [r2, #0]
 8006ac2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	701a      	strb	r2, [r3, #0]
      i++;
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	623b      	str	r3, [r7, #32]
      pDest++;
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	3301      	adds	r3, #1
 8006ae0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006ae2:	8bfb      	ldrh	r3, [r7, #30]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ae8:	8bfb      	ldrh	r3, [r7, #30]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1ea      	bne.n	8006ac4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	372c      	adds	r7, #44	@ 0x2c
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	785b      	ldrb	r3, [r3, #1]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d12c      	bne.n	8006b72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	db12      	blt.n	8006b50 <USB_EPSetStall+0x54>
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00f      	beq.n	8006b50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	0151      	lsls	r1, r2, #5
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	440a      	add	r2, r1
 8006b46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	0151      	lsls	r1, r2, #5
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	440a      	add	r2, r1
 8006b66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b6e:	6013      	str	r3, [r2, #0]
 8006b70:	e02b      	b.n	8006bca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	db12      	blt.n	8006baa <USB_EPSetStall+0xae>
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00f      	beq.n	8006baa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	0151      	lsls	r1, r2, #5
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	440a      	add	r2, r1
 8006ba0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ba4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ba8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	0151      	lsls	r1, r2, #5
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006bc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	785b      	ldrb	r3, [r3, #1]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d128      	bne.n	8006c46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	791b      	ldrb	r3, [r3, #4]
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d003      	beq.n	8006c24 <USB_EPClearStall+0x4c>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	791b      	ldrb	r3, [r3, #4]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d138      	bne.n	8006c96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	0151      	lsls	r1, r2, #5
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	440a      	add	r2, r1
 8006c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	e027      	b.n	8006c96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	0151      	lsls	r1, r2, #5
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	440a      	add	r2, r1
 8006c5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	791b      	ldrb	r3, [r3, #4]
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d003      	beq.n	8006c76 <USB_EPClearStall+0x9e>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	791b      	ldrb	r3, [r3, #4]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d10f      	bne.n	8006c96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cc2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006cc6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	011b      	lsls	r3, r3, #4
 8006cd4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006cd8:	68f9      	ldr	r1, [r7, #12]
 8006cda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d0a:	f023 0303 	bic.w	r3, r3, #3
 8006d0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d1e:	f023 0302 	bic.w	r3, r3, #2
 8006d22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d4c:	f023 0303 	bic.w	r3, r3, #3
 8006d50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d60:	f043 0302 	orr.w	r3, r3, #2
 8006d64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	4013      	ands	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	0c1b      	lsrs	r3, r3, #16
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	4013      	ands	r3, r2
 8006df0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	b29b      	uxth	r3, r3
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b085      	sub	sp, #20
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e12:	78fb      	ldrb	r3, [r7, #3]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e30:	68bb      	ldr	r3, [r7, #8]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b087      	sub	sp, #28
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	460b      	mov	r3, r1
 8006e48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6e:	01db      	lsls	r3, r3, #7
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e78:	78fb      	ldrb	r3, [r7, #3]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4013      	ands	r3, r2
 8006e8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b085      	sub	sp, #20
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ed0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006ed4:	f023 0307 	bic.w	r3, r3, #7
 8006ed8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	460b      	mov	r3, r1
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	333c      	adds	r3, #60	@ 0x3c
 8006f12:	3304      	adds	r3, #4
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	4a26      	ldr	r2, [pc, #152]	@ (8006fb4 <USB_EP0_OutStart+0xb8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d90a      	bls.n	8006f36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f30:	d101      	bne.n	8006f36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	e037      	b.n	8006fa6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	2300      	movs	r3, #0
 8006f40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f64:	f043 0318 	orr.w	r3, r3, #24
 8006f68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f78:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006f7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f7e:	7afb      	ldrb	r3, [r7, #11]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d10f      	bne.n	8006fa4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f9e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006fa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	4f54300a 	.word	0x4f54300a

08006fb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fd0:	d901      	bls.n	8006fd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e01b      	b.n	800700e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	daf2      	bge.n	8006fc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f043 0201 	orr.w	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ffa:	d901      	bls.n	8007000 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e006      	b.n	800700e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b01      	cmp	r3, #1
 800700a:	d0f0      	beq.n	8006fee <USB_CoreReset+0x36>

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
	...

0800701c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007028:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800702c:	f002 fc9e 	bl	800996c <USBD_static_malloc>
 8007030:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	32b0      	adds	r2, #176	@ 0xb0
 8007042:	2100      	movs	r1, #0
 8007044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007048:	2302      	movs	r3, #2
 800704a:	e0d4      	b.n	80071f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800704c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007050:	2100      	movs	r1, #0
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f003 fa5f 	bl	800a516 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	32b0      	adds	r2, #176	@ 0xb0
 8007062:	68f9      	ldr	r1, [r7, #12]
 8007064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	32b0      	adds	r2, #176	@ 0xb0
 8007072:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	7c1b      	ldrb	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d138      	bne.n	80070f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007084:	4b5e      	ldr	r3, [pc, #376]	@ (8007200 <USBD_CDC_Init+0x1e4>)
 8007086:	7819      	ldrb	r1, [r3, #0]
 8007088:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800708c:	2202      	movs	r2, #2
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f002 fb49 	bl	8009726 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007094:	4b5a      	ldr	r3, [pc, #360]	@ (8007200 <USBD_CDC_Init+0x1e4>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	f003 020f 	and.w	r2, r3, #15
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	440b      	add	r3, r1
 80070a8:	3324      	adds	r3, #36	@ 0x24
 80070aa:	2201      	movs	r2, #1
 80070ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80070ae:	4b55      	ldr	r3, [pc, #340]	@ (8007204 <USBD_CDC_Init+0x1e8>)
 80070b0:	7819      	ldrb	r1, [r3, #0]
 80070b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070b6:	2202      	movs	r2, #2
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f002 fb34 	bl	8009726 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80070be:	4b51      	ldr	r3, [pc, #324]	@ (8007204 <USBD_CDC_Init+0x1e8>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	f003 020f 	and.w	r2, r3, #15
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	4613      	mov	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80070d6:	2201      	movs	r2, #1
 80070d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80070da:	4b4b      	ldr	r3, [pc, #300]	@ (8007208 <USBD_CDC_Init+0x1ec>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	f003 020f 	and.w	r2, r3, #15
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	4613      	mov	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	3326      	adds	r3, #38	@ 0x26
 80070f0:	2210      	movs	r2, #16
 80070f2:	801a      	strh	r2, [r3, #0]
 80070f4:	e035      	b.n	8007162 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80070f6:	4b42      	ldr	r3, [pc, #264]	@ (8007200 <USBD_CDC_Init+0x1e4>)
 80070f8:	7819      	ldrb	r1, [r3, #0]
 80070fa:	2340      	movs	r3, #64	@ 0x40
 80070fc:	2202      	movs	r2, #2
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f002 fb11 	bl	8009726 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007104:	4b3e      	ldr	r3, [pc, #248]	@ (8007200 <USBD_CDC_Init+0x1e4>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	f003 020f 	and.w	r2, r3, #15
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	4613      	mov	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	440b      	add	r3, r1
 8007118:	3324      	adds	r3, #36	@ 0x24
 800711a:	2201      	movs	r2, #1
 800711c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800711e:	4b39      	ldr	r3, [pc, #228]	@ (8007204 <USBD_CDC_Init+0x1e8>)
 8007120:	7819      	ldrb	r1, [r3, #0]
 8007122:	2340      	movs	r3, #64	@ 0x40
 8007124:	2202      	movs	r2, #2
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f002 fafd 	bl	8009726 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800712c:	4b35      	ldr	r3, [pc, #212]	@ (8007204 <USBD_CDC_Init+0x1e8>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	f003 020f 	and.w	r2, r3, #15
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	440b      	add	r3, r1
 8007140:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007144:	2201      	movs	r2, #1
 8007146:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007148:	4b2f      	ldr	r3, [pc, #188]	@ (8007208 <USBD_CDC_Init+0x1ec>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	f003 020f 	and.w	r2, r3, #15
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	3326      	adds	r3, #38	@ 0x26
 800715e:	2210      	movs	r2, #16
 8007160:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007162:	4b29      	ldr	r3, [pc, #164]	@ (8007208 <USBD_CDC_Init+0x1ec>)
 8007164:	7819      	ldrb	r1, [r3, #0]
 8007166:	2308      	movs	r3, #8
 8007168:	2203      	movs	r2, #3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f002 fadb 	bl	8009726 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007170:	4b25      	ldr	r3, [pc, #148]	@ (8007208 <USBD_CDC_Init+0x1ec>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	f003 020f 	and.w	r2, r3, #15
 8007178:	6879      	ldr	r1, [r7, #4]
 800717a:	4613      	mov	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	440b      	add	r3, r1
 8007184:	3324      	adds	r3, #36	@ 0x24
 8007186:	2201      	movs	r2, #1
 8007188:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	33b0      	adds	r3, #176	@ 0xb0
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80071c0:	2302      	movs	r3, #2
 80071c2:	e018      	b.n	80071f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	7c1b      	ldrb	r3, [r3, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007204 <USBD_CDC_Init+0x1e8>)
 80071ce:	7819      	ldrb	r1, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80071d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f002 fb92 	bl	8009904 <USBD_LL_PrepareReceive>
 80071e0:	e008      	b.n	80071f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071e2:	4b08      	ldr	r3, [pc, #32]	@ (8007204 <USBD_CDC_Init+0x1e8>)
 80071e4:	7819      	ldrb	r1, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80071ec:	2340      	movs	r3, #64	@ 0x40
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f002 fb88 	bl	8009904 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	20000093 	.word	0x20000093
 8007204:	20000094 	.word	0x20000094
 8007208:	20000095 	.word	0x20000095

0800720c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007218:	4b3a      	ldr	r3, [pc, #232]	@ (8007304 <USBD_CDC_DeInit+0xf8>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f002 faa7 	bl	8009772 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007224:	4b37      	ldr	r3, [pc, #220]	@ (8007304 <USBD_CDC_DeInit+0xf8>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	f003 020f 	and.w	r2, r3, #15
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	4613      	mov	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	440b      	add	r3, r1
 8007238:	3324      	adds	r3, #36	@ 0x24
 800723a:	2200      	movs	r2, #0
 800723c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800723e:	4b32      	ldr	r3, [pc, #200]	@ (8007308 <USBD_CDC_DeInit+0xfc>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f002 fa94 	bl	8009772 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800724a:	4b2f      	ldr	r3, [pc, #188]	@ (8007308 <USBD_CDC_DeInit+0xfc>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	f003 020f 	and.w	r2, r3, #15
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	4613      	mov	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	440b      	add	r3, r1
 800725e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007262:	2200      	movs	r2, #0
 8007264:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007266:	4b29      	ldr	r3, [pc, #164]	@ (800730c <USBD_CDC_DeInit+0x100>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f002 fa80 	bl	8009772 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007272:	4b26      	ldr	r3, [pc, #152]	@ (800730c <USBD_CDC_DeInit+0x100>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	f003 020f 	and.w	r2, r3, #15
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4613      	mov	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	3324      	adds	r3, #36	@ 0x24
 8007288:	2200      	movs	r2, #0
 800728a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800728c:	4b1f      	ldr	r3, [pc, #124]	@ (800730c <USBD_CDC_DeInit+0x100>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	f003 020f 	and.w	r2, r3, #15
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	3326      	adds	r3, #38	@ 0x26
 80072a2:	2200      	movs	r2, #0
 80072a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	32b0      	adds	r2, #176	@ 0xb0
 80072b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01f      	beq.n	80072f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	33b0      	adds	r3, #176	@ 0xb0
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	32b0      	adds	r2, #176	@ 0xb0
 80072d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072da:	4618      	mov	r0, r3
 80072dc:	f002 fb54 	bl	8009988 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	32b0      	adds	r2, #176	@ 0xb0
 80072ea:	2100      	movs	r1, #0
 80072ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	20000093 	.word	0x20000093
 8007308:	20000094 	.word	0x20000094
 800730c:	20000095 	.word	0x20000095

08007310 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	32b0      	adds	r2, #176	@ 0xb0
 8007324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007328:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800733c:	2303      	movs	r3, #3
 800733e:	e0bf      	b.n	80074c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007348:	2b00      	cmp	r3, #0
 800734a:	d050      	beq.n	80073ee <USBD_CDC_Setup+0xde>
 800734c:	2b20      	cmp	r3, #32
 800734e:	f040 80af 	bne.w	80074b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	88db      	ldrh	r3, [r3, #6]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d03a      	beq.n	80073d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	b25b      	sxtb	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	da1b      	bge.n	800739c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	33b0      	adds	r3, #176	@ 0xb0
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800737a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	88d2      	ldrh	r2, [r2, #6]
 8007380:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	88db      	ldrh	r3, [r3, #6]
 8007386:	2b07      	cmp	r3, #7
 8007388:	bf28      	it	cs
 800738a:	2307      	movcs	r3, #7
 800738c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	89fa      	ldrh	r2, [r7, #14]
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f001 fd93 	bl	8008ec0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800739a:	e090      	b.n	80074be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	785a      	ldrb	r2, [r3, #1]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	88db      	ldrh	r3, [r3, #6]
 80073aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80073ac:	d803      	bhi.n	80073b6 <USBD_CDC_Setup+0xa6>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	88db      	ldrh	r3, [r3, #6]
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	e000      	b.n	80073b8 <USBD_CDC_Setup+0xa8>
 80073b6:	2240      	movs	r2, #64	@ 0x40
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80073be:	6939      	ldr	r1, [r7, #16]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80073c6:	461a      	mov	r2, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 fda5 	bl	8008f18 <USBD_CtlPrepareRx>
      break;
 80073ce:	e076      	b.n	80074be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	33b0      	adds	r3, #176	@ 0xb0
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	7850      	ldrb	r0, [r2, #1]
 80073e6:	2200      	movs	r2, #0
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	4798      	blx	r3
      break;
 80073ec:	e067      	b.n	80074be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	785b      	ldrb	r3, [r3, #1]
 80073f2:	2b0b      	cmp	r3, #11
 80073f4:	d851      	bhi.n	800749a <USBD_CDC_Setup+0x18a>
 80073f6:	a201      	add	r2, pc, #4	@ (adr r2, 80073fc <USBD_CDC_Setup+0xec>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	0800742d 	.word	0x0800742d
 8007400:	080074a9 	.word	0x080074a9
 8007404:	0800749b 	.word	0x0800749b
 8007408:	0800749b 	.word	0x0800749b
 800740c:	0800749b 	.word	0x0800749b
 8007410:	0800749b 	.word	0x0800749b
 8007414:	0800749b 	.word	0x0800749b
 8007418:	0800749b 	.word	0x0800749b
 800741c:	0800749b 	.word	0x0800749b
 8007420:	0800749b 	.word	0x0800749b
 8007424:	08007457 	.word	0x08007457
 8007428:	08007481 	.word	0x08007481
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b03      	cmp	r3, #3
 8007436:	d107      	bne.n	8007448 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007438:	f107 030a 	add.w	r3, r7, #10
 800743c:	2202      	movs	r2, #2
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f001 fd3d 	bl	8008ec0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007446:	e032      	b.n	80074ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f001 fcbb 	bl	8008dc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007450:	2303      	movs	r3, #3
 8007452:	75fb      	strb	r3, [r7, #23]
          break;
 8007454:	e02b      	b.n	80074ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b03      	cmp	r3, #3
 8007460:	d107      	bne.n	8007472 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007462:	f107 030d 	add.w	r3, r7, #13
 8007466:	2201      	movs	r2, #1
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 fd28 	bl	8008ec0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007470:	e01d      	b.n	80074ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 fca6 	bl	8008dc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800747a:	2303      	movs	r3, #3
 800747c:	75fb      	strb	r3, [r7, #23]
          break;
 800747e:	e016      	b.n	80074ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b03      	cmp	r3, #3
 800748a:	d00f      	beq.n	80074ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 fc99 	bl	8008dc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007494:	2303      	movs	r3, #3
 8007496:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007498:	e008      	b.n	80074ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 fc92 	bl	8008dc6 <USBD_CtlError>
          ret = USBD_FAIL;
 80074a2:	2303      	movs	r3, #3
 80074a4:	75fb      	strb	r3, [r7, #23]
          break;
 80074a6:	e002      	b.n	80074ae <USBD_CDC_Setup+0x19e>
          break;
 80074a8:	bf00      	nop
 80074aa:	e008      	b.n	80074be <USBD_CDC_Setup+0x1ae>
          break;
 80074ac:	bf00      	nop
      }
      break;
 80074ae:	e006      	b.n	80074be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 fc87 	bl	8008dc6 <USBD_CtlError>
      ret = USBD_FAIL;
 80074b8:	2303      	movs	r3, #3
 80074ba:	75fb      	strb	r3, [r7, #23]
      break;
 80074bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80074be:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	32b0      	adds	r2, #176	@ 0xb0
 80074e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e065      	b.n	80075be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	32b0      	adds	r2, #176	@ 0xb0
 80074fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007500:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	f003 020f 	and.w	r2, r3, #15
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	440b      	add	r3, r1
 8007514:	3318      	adds	r3, #24
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d02f      	beq.n	800757c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	f003 020f 	and.w	r2, r3, #15
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	4613      	mov	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	440b      	add	r3, r1
 800752e:	3318      	adds	r3, #24
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	f003 010f 	and.w	r1, r3, #15
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	460b      	mov	r3, r1
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	440b      	add	r3, r1
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4403      	add	r3, r0
 8007544:	331c      	adds	r3, #28
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	fbb2 f1f3 	udiv	r1, r2, r3
 800754c:	fb01 f303 	mul.w	r3, r1, r3
 8007550:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007552:	2b00      	cmp	r3, #0
 8007554:	d112      	bne.n	800757c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007556:	78fb      	ldrb	r3, [r7, #3]
 8007558:	f003 020f 	and.w	r2, r3, #15
 800755c:	6879      	ldr	r1, [r7, #4]
 800755e:	4613      	mov	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	440b      	add	r3, r1
 8007568:	3318      	adds	r3, #24
 800756a:	2200      	movs	r2, #0
 800756c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800756e:	78f9      	ldrb	r1, [r7, #3]
 8007570:	2300      	movs	r3, #0
 8007572:	2200      	movs	r2, #0
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f002 f9a4 	bl	80098c2 <USBD_LL_Transmit>
 800757a:	e01f      	b.n	80075bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2200      	movs	r2, #0
 8007580:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	33b0      	adds	r3, #176	@ 0xb0
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d010      	beq.n	80075bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	33b0      	adds	r3, #176	@ 0xb0
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80075b8:	78fa      	ldrb	r2, [r7, #3]
 80075ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	32b0      	adds	r2, #176	@ 0xb0
 80075dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	32b0      	adds	r2, #176	@ 0xb0
 80075ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e01a      	b.n	800762e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f002 f9a2 	bl	8009946 <USBD_LL_GetRxDataSize>
 8007602:	4602      	mov	r2, r0
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	33b0      	adds	r3, #176	@ 0xb0
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007628:	4611      	mov	r1, r2
 800762a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	32b0      	adds	r2, #176	@ 0xb0
 8007648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007654:	2303      	movs	r3, #3
 8007656:	e024      	b.n	80076a2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	33b0      	adds	r3, #176	@ 0xb0
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d019      	beq.n	80076a0 <USBD_CDC_EP0_RxReady+0x6a>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007672:	2bff      	cmp	r3, #255	@ 0xff
 8007674:	d014      	beq.n	80076a0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	33b0      	adds	r3, #176	@ 0xb0
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800768e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007696:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	22ff      	movs	r2, #255	@ 0xff
 800769c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076b4:	2182      	movs	r1, #130	@ 0x82
 80076b6:	4818      	ldr	r0, [pc, #96]	@ (8007718 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076b8:	f000 fd4f 	bl	800815a <USBD_GetEpDesc>
 80076bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076be:	2101      	movs	r1, #1
 80076c0:	4815      	ldr	r0, [pc, #84]	@ (8007718 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076c2:	f000 fd4a 	bl	800815a <USBD_GetEpDesc>
 80076c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076c8:	2181      	movs	r1, #129	@ 0x81
 80076ca:	4813      	ldr	r0, [pc, #76]	@ (8007718 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076cc:	f000 fd45 	bl	800815a <USBD_GetEpDesc>
 80076d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2210      	movs	r2, #16
 80076dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d006      	beq.n	80076f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076ec:	711a      	strb	r2, [r3, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d006      	beq.n	8007706 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007700:	711a      	strb	r2, [r3, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2243      	movs	r2, #67	@ 0x43
 800770a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800770c:	4b02      	ldr	r3, [pc, #8]	@ (8007718 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800770e:	4618      	mov	r0, r3
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000050 	.word	0x20000050

0800771c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007724:	2182      	movs	r1, #130	@ 0x82
 8007726:	4818      	ldr	r0, [pc, #96]	@ (8007788 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007728:	f000 fd17 	bl	800815a <USBD_GetEpDesc>
 800772c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800772e:	2101      	movs	r1, #1
 8007730:	4815      	ldr	r0, [pc, #84]	@ (8007788 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007732:	f000 fd12 	bl	800815a <USBD_GetEpDesc>
 8007736:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007738:	2181      	movs	r1, #129	@ 0x81
 800773a:	4813      	ldr	r0, [pc, #76]	@ (8007788 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800773c:	f000 fd0d 	bl	800815a <USBD_GetEpDesc>
 8007740:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	2210      	movs	r2, #16
 800774c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d006      	beq.n	8007762 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	2200      	movs	r2, #0
 8007758:	711a      	strb	r2, [r3, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f042 0202 	orr.w	r2, r2, #2
 8007760:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d006      	beq.n	8007776 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	711a      	strb	r2, [r3, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f042 0202 	orr.w	r2, r2, #2
 8007774:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2243      	movs	r2, #67	@ 0x43
 800777a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800777c:	4b02      	ldr	r3, [pc, #8]	@ (8007788 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000050 	.word	0x20000050

0800778c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007794:	2182      	movs	r1, #130	@ 0x82
 8007796:	4818      	ldr	r0, [pc, #96]	@ (80077f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007798:	f000 fcdf 	bl	800815a <USBD_GetEpDesc>
 800779c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800779e:	2101      	movs	r1, #1
 80077a0:	4815      	ldr	r0, [pc, #84]	@ (80077f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077a2:	f000 fcda 	bl	800815a <USBD_GetEpDesc>
 80077a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077a8:	2181      	movs	r1, #129	@ 0x81
 80077aa:	4813      	ldr	r0, [pc, #76]	@ (80077f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077ac:	f000 fcd5 	bl	800815a <USBD_GetEpDesc>
 80077b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2210      	movs	r2, #16
 80077bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d006      	beq.n	80077d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077cc:	711a      	strb	r2, [r3, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d006      	beq.n	80077e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077e0:	711a      	strb	r2, [r3, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2243      	movs	r2, #67	@ 0x43
 80077ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80077ec:	4b02      	ldr	r3, [pc, #8]	@ (80077f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20000050 	.word	0x20000050

080077fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	220a      	movs	r2, #10
 8007808:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800780a:	4b03      	ldr	r3, [pc, #12]	@ (8007818 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800780c:	4618      	mov	r0, r3
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	2000000c 	.word	0x2000000c

0800781c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800782c:	2303      	movs	r3, #3
 800782e:	e009      	b.n	8007844 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	33b0      	adds	r3, #176	@ 0xb0
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	32b0      	adds	r2, #176	@ 0xb0
 8007866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007872:	2303      	movs	r3, #3
 8007874:	e008      	b.n	8007888 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	371c      	adds	r7, #28
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	32b0      	adds	r2, #176	@ 0xb0
 80078a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e004      	b.n	80078c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
	...

080078d0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	32b0      	adds	r2, #176	@ 0xb0
 80078e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80078e8:	2301      	movs	r3, #1
 80078ea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e025      	b.n	8007942 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d11f      	bne.n	8007940 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2201      	movs	r2, #1
 8007904:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007908:	4b10      	ldr	r3, [pc, #64]	@ (800794c <USBD_CDC_TransmitPacket+0x7c>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	f003 020f 	and.w	r2, r3, #15
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4403      	add	r3, r0
 8007922:	3318      	adds	r3, #24
 8007924:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007926:	4b09      	ldr	r3, [pc, #36]	@ (800794c <USBD_CDC_TransmitPacket+0x7c>)
 8007928:	7819      	ldrb	r1, [r3, #0]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 ffc3 	bl	80098c2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	20000093 	.word	0x20000093

08007950 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	32b0      	adds	r2, #176	@ 0xb0
 8007962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007966:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	32b0      	adds	r2, #176	@ 0xb0
 8007972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800797a:	2303      	movs	r3, #3
 800797c:	e018      	b.n	80079b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	7c1b      	ldrb	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10a      	bne.n	800799c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007986:	4b0c      	ldr	r3, [pc, #48]	@ (80079b8 <USBD_CDC_ReceivePacket+0x68>)
 8007988:	7819      	ldrb	r1, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007990:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 ffb5 	bl	8009904 <USBD_LL_PrepareReceive>
 800799a:	e008      	b.n	80079ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800799c:	4b06      	ldr	r3, [pc, #24]	@ (80079b8 <USBD_CDC_ReceivePacket+0x68>)
 800799e:	7819      	ldrb	r1, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079a6:	2340      	movs	r3, #64	@ 0x40
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 ffab 	bl	8009904 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	20000094 	.word	0x20000094

080079bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	4613      	mov	r3, r2
 80079c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e01f      	b.n	8007a14 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	79fa      	ldrb	r2, [r7, #7]
 8007a06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f001 fe25 	bl	8009658 <USBD_LL_Init>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e025      	b.n	8007a80 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	32ae      	adds	r2, #174	@ 0xae
 8007a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00f      	beq.n	8007a70 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	32ae      	adds	r2, #174	@ 0xae
 8007a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a60:	f107 020e 	add.w	r2, r7, #14
 8007a64:	4610      	mov	r0, r2
 8007a66:	4798      	blx	r3
 8007a68:	4602      	mov	r2, r0
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 fe2d 	bl	80096f0 <USBD_LL_Start>
 8007a96:	4603      	mov	r3, r0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007aa8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d009      	beq.n	8007ae4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	78fa      	ldrb	r2, [r7, #3]
 8007ada:	4611      	mov	r1, r2
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	4798      	blx	r3
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b084      	sub	sp, #16
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	460b      	mov	r3, r1
 8007af8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	78fa      	ldrb	r2, [r7, #3]
 8007b08:	4611      	mov	r1, r2
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	4798      	blx	r3
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b14:	2303      	movs	r3, #3
 8007b16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f001 f90c 	bl	8008d52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007b48:	461a      	mov	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b56:	f003 031f 	and.w	r3, r3, #31
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d01a      	beq.n	8007b94 <USBD_LL_SetupStage+0x72>
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d822      	bhi.n	8007ba8 <USBD_LL_SetupStage+0x86>
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <USBD_LL_SetupStage+0x4a>
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d00a      	beq.n	8007b80 <USBD_LL_SetupStage+0x5e>
 8007b6a:	e01d      	b.n	8007ba8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fb63 	bl	8008240 <USBD_StdDevReq>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b7e:	e020      	b.n	8007bc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fbcb 	bl	8008324 <USBD_StdItfReq>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	73fb      	strb	r3, [r7, #15]
      break;
 8007b92:	e016      	b.n	8007bc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fc2d 	bl	80083fc <USBD_StdEPReq>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba6:	e00c      	b.n	8007bc2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007bae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 fdfa 	bl	80097b0 <USBD_LL_StallEP>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc0:	bf00      	nop
  }

  return ret;
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	607a      	str	r2, [r7, #4]
 8007bd8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007bde:	7afb      	ldrb	r3, [r7, #11]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d16e      	bne.n	8007cc2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007bea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	f040 8098 	bne.w	8007d28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d913      	bls.n	8007c2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	689a      	ldr	r2, [r3, #8]
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	1ad2      	subs	r2, r2, r3
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	bf28      	it	cs
 8007c1e:	4613      	movcs	r3, r2
 8007c20:	461a      	mov	r2, r3
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f001 f994 	bl	8008f52 <USBD_CtlContinueRx>
 8007c2a:	e07d      	b.n	8007d28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c32:	f003 031f 	and.w	r3, r3, #31
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d014      	beq.n	8007c64 <USBD_LL_DataOutStage+0x98>
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d81d      	bhi.n	8007c7a <USBD_LL_DataOutStage+0xae>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <USBD_LL_DataOutStage+0x7c>
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d003      	beq.n	8007c4e <USBD_LL_DataOutStage+0x82>
 8007c46:	e018      	b.n	8007c7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	75bb      	strb	r3, [r7, #22]
            break;
 8007c4c:	e018      	b.n	8007c80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	4619      	mov	r1, r3
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 fa64 	bl	8008126 <USBD_CoreFindIF>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75bb      	strb	r3, [r7, #22]
            break;
 8007c62:	e00d      	b.n	8007c80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 fa66 	bl	8008140 <USBD_CoreFindEP>
 8007c74:	4603      	mov	r3, r0
 8007c76:	75bb      	strb	r3, [r7, #22]
            break;
 8007c78:	e002      	b.n	8007c80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75bb      	strb	r3, [r7, #22]
            break;
 8007c7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007c80:	7dbb      	ldrb	r3, [r7, #22]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d119      	bne.n	8007cba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	d113      	bne.n	8007cba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007c92:	7dba      	ldrb	r2, [r7, #22]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	32ae      	adds	r2, #174	@ 0xae
 8007c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00b      	beq.n	8007cba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007ca2:	7dba      	ldrb	r2, [r7, #22]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007caa:	7dba      	ldrb	r2, [r7, #22]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	32ae      	adds	r2, #174	@ 0xae
 8007cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f001 f95a 	bl	8008f74 <USBD_CtlSendStatus>
 8007cc0:	e032      	b.n	8007d28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007cc2:	7afb      	ldrb	r3, [r7, #11]
 8007cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	4619      	mov	r1, r3
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 fa37 	bl	8008140 <USBD_CoreFindEP>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cd6:	7dbb      	ldrb	r3, [r7, #22]
 8007cd8:	2bff      	cmp	r3, #255	@ 0xff
 8007cda:	d025      	beq.n	8007d28 <USBD_LL_DataOutStage+0x15c>
 8007cdc:	7dbb      	ldrb	r3, [r7, #22]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d122      	bne.n	8007d28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d117      	bne.n	8007d1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007cee:	7dba      	ldrb	r2, [r7, #22]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	32ae      	adds	r2, #174	@ 0xae
 8007cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00f      	beq.n	8007d1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007cfe:	7dba      	ldrb	r2, [r7, #22]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d06:	7dba      	ldrb	r2, [r7, #22]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	32ae      	adds	r2, #174	@ 0xae
 8007d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	7afa      	ldrb	r2, [r7, #11]
 8007d14:	4611      	mov	r1, r2
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	4798      	blx	r3
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	e000      	b.n	8007d2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3718      	adds	r7, #24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b086      	sub	sp, #24
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	607a      	str	r2, [r7, #4]
 8007d3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007d40:	7afb      	ldrb	r3, [r7, #11]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d16f      	bne.n	8007e26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3314      	adds	r3, #20
 8007d4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d15a      	bne.n	8007e0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	689a      	ldr	r2, [r3, #8]
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d914      	bls.n	8007d8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	1ad2      	subs	r2, r2, r3
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	461a      	mov	r2, r3
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f001 f8bc 	bl	8008ef6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d7e:	2300      	movs	r3, #0
 8007d80:	2200      	movs	r2, #0
 8007d82:	2100      	movs	r1, #0
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f001 fdbd 	bl	8009904 <USBD_LL_PrepareReceive>
 8007d8a:	e03f      	b.n	8007e0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d11c      	bne.n	8007dd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d316      	bcc.n	8007dd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d20f      	bcs.n	8007dd2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007db2:	2200      	movs	r2, #0
 8007db4:	2100      	movs	r1, #0
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f001 f89d 	bl	8008ef6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2100      	movs	r1, #0
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f001 fd9a 	bl	8009904 <USBD_LL_PrepareReceive>
 8007dd0:	e01c      	b.n	8007e0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d10f      	bne.n	8007dfe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d009      	beq.n	8007dfe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dfe:	2180      	movs	r1, #128	@ 0x80
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f001 fcd5 	bl	80097b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f001 f8c7 	bl	8008f9a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d03a      	beq.n	8007e8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7ff fe42 	bl	8007aa0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007e24:	e032      	b.n	8007e8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007e26:	7afb      	ldrb	r3, [r7, #11]
 8007e28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	4619      	mov	r1, r3
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 f985 	bl	8008140 <USBD_CoreFindEP>
 8007e36:	4603      	mov	r3, r0
 8007e38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
 8007e3c:	2bff      	cmp	r3, #255	@ 0xff
 8007e3e:	d025      	beq.n	8007e8c <USBD_LL_DataInStage+0x15a>
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d122      	bne.n	8007e8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d11c      	bne.n	8007e8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007e52:	7dfa      	ldrb	r2, [r7, #23]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	32ae      	adds	r2, #174	@ 0xae
 8007e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d014      	beq.n	8007e8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007e62:	7dfa      	ldrb	r2, [r7, #23]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007e6a:	7dfa      	ldrb	r2, [r7, #23]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	32ae      	adds	r2, #174	@ 0xae
 8007e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	7afa      	ldrb	r2, [r7, #11]
 8007e78:	4611      	mov	r1, r2
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	4798      	blx	r3
 8007e7e:	4603      	mov	r3, r0
 8007e80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007e82:	7dbb      	ldrb	r3, [r7, #22]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007e88:	7dbb      	ldrb	r3, [r7, #22]
 8007e8a:	e000      	b.n	8007e8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3718      	adds	r7, #24
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d014      	beq.n	8007efc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00e      	beq.n	8007efc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6852      	ldr	r2, [r2, #4]
 8007eea:	b2d2      	uxtb	r2, r2
 8007eec:	4611      	mov	r1, r2
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007efc:	2340      	movs	r3, #64	@ 0x40
 8007efe:	2200      	movs	r2, #0
 8007f00:	2100      	movs	r1, #0
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 fc0f 	bl	8009726 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2240      	movs	r2, #64	@ 0x40
 8007f14:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f18:	2340      	movs	r3, #64	@ 0x40
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2180      	movs	r1, #128	@ 0x80
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 fc01 	bl	8009726 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2240      	movs	r2, #64	@ 0x40
 8007f2e:	621a      	str	r2, [r3, #32]

  return ret;
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	460b      	mov	r3, r1
 8007f44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	78fa      	ldrb	r2, [r7, #3]
 8007f4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	d006      	beq.n	8007f7c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2204      	movs	r2, #4
 8007f80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d106      	bne.n	8007fb4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d110      	bne.n	8007ff8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00b      	beq.n	8007ff8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fe6:	69db      	ldr	r3, [r3, #28]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d005      	beq.n	8007ff8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	460b      	mov	r3, r1
 800800c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	32ae      	adds	r2, #174	@ 0xae
 8008018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008020:	2303      	movs	r3, #3
 8008022:	e01c      	b.n	800805e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b03      	cmp	r3, #3
 800802e:	d115      	bne.n	800805c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	32ae      	adds	r2, #174	@ 0xae
 800803a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00b      	beq.n	800805c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	32ae      	adds	r2, #174	@ 0xae
 800804e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008052:	6a1b      	ldr	r3, [r3, #32]
 8008054:	78fa      	ldrb	r2, [r7, #3]
 8008056:	4611      	mov	r1, r2
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b082      	sub	sp, #8
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	460b      	mov	r3, r1
 8008070:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	32ae      	adds	r2, #174	@ 0xae
 800807c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008084:	2303      	movs	r3, #3
 8008086:	e01c      	b.n	80080c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b03      	cmp	r3, #3
 8008092:	d115      	bne.n	80080c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	32ae      	adds	r2, #174	@ 0xae
 800809e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00b      	beq.n	80080c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	32ae      	adds	r2, #174	@ 0xae
 80080b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b8:	78fa      	ldrb	r2, [r7, #3]
 80080ba:	4611      	mov	r1, r2
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b083      	sub	sp, #12
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00e      	beq.n	800811c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	6852      	ldr	r2, [r2, #4]
 800810a:	b2d2      	uxtb	r2, r2
 800810c:	4611      	mov	r1, r2
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008118:	2303      	movs	r3, #3
 800811a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008132:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800814c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b086      	sub	sp, #24
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	460b      	mov	r3, r1
 8008164:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800816e:	2300      	movs	r3, #0
 8008170:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	885b      	ldrh	r3, [r3, #2]
 8008176:	b29b      	uxth	r3, r3
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	7812      	ldrb	r2, [r2, #0]
 800817c:	4293      	cmp	r3, r2
 800817e:	d91f      	bls.n	80081c0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008186:	e013      	b.n	80081b0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008188:	f107 030a 	add.w	r3, r7, #10
 800818c:	4619      	mov	r1, r3
 800818e:	6978      	ldr	r0, [r7, #20]
 8008190:	f000 f81b 	bl	80081ca <USBD_GetNextDesc>
 8008194:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	785b      	ldrb	r3, [r3, #1]
 800819a:	2b05      	cmp	r3, #5
 800819c:	d108      	bne.n	80081b0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	789b      	ldrb	r3, [r3, #2]
 80081a6:	78fa      	ldrb	r2, [r7, #3]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d008      	beq.n	80081be <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80081ac:	2300      	movs	r3, #0
 80081ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	885b      	ldrh	r3, [r3, #2]
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	897b      	ldrh	r3, [r7, #10]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d8e5      	bhi.n	8008188 <USBD_GetEpDesc+0x2e>
 80081bc:	e000      	b.n	80081c0 <USBD_GetEpDesc+0x66>
          break;
 80081be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80081c0:	693b      	ldr	r3, [r7, #16]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b085      	sub	sp, #20
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	881b      	ldrh	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	7812      	ldrb	r2, [r2, #0]
 80081e0:	4413      	add	r3, r2
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4413      	add	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80081f4:	68fb      	ldr	r3, [r7, #12]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008202:	b480      	push	{r7}
 8008204:	b087      	sub	sp, #28
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	3301      	adds	r3, #1
 8008218:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008220:	8a3b      	ldrh	r3, [r7, #16]
 8008222:	021b      	lsls	r3, r3, #8
 8008224:	b21a      	sxth	r2, r3
 8008226:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800822a:	4313      	orrs	r3, r2
 800822c:	b21b      	sxth	r3, r3
 800822e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008230:	89fb      	ldrh	r3, [r7, #14]
}
 8008232:	4618      	mov	r0, r3
 8008234:	371c      	adds	r7, #28
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
	...

08008240 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008256:	2b40      	cmp	r3, #64	@ 0x40
 8008258:	d005      	beq.n	8008266 <USBD_StdDevReq+0x26>
 800825a:	2b40      	cmp	r3, #64	@ 0x40
 800825c:	d857      	bhi.n	800830e <USBD_StdDevReq+0xce>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00f      	beq.n	8008282 <USBD_StdDevReq+0x42>
 8008262:	2b20      	cmp	r3, #32
 8008264:	d153      	bne.n	800830e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	32ae      	adds	r2, #174	@ 0xae
 8008270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	4798      	blx	r3
 800827c:	4603      	mov	r3, r0
 800827e:	73fb      	strb	r3, [r7, #15]
      break;
 8008280:	e04a      	b.n	8008318 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	2b09      	cmp	r3, #9
 8008288:	d83b      	bhi.n	8008302 <USBD_StdDevReq+0xc2>
 800828a:	a201      	add	r2, pc, #4	@ (adr r2, 8008290 <USBD_StdDevReq+0x50>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082e5 	.word	0x080082e5
 8008294:	080082f9 	.word	0x080082f9
 8008298:	08008303 	.word	0x08008303
 800829c:	080082ef 	.word	0x080082ef
 80082a0:	08008303 	.word	0x08008303
 80082a4:	080082c3 	.word	0x080082c3
 80082a8:	080082b9 	.word	0x080082b9
 80082ac:	08008303 	.word	0x08008303
 80082b0:	080082db 	.word	0x080082db
 80082b4:	080082cd 	.word	0x080082cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fa3c 	bl	8008738 <USBD_GetDescriptor>
          break;
 80082c0:	e024      	b.n	800830c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fba1 	bl	8008a0c <USBD_SetAddress>
          break;
 80082ca:	e01f      	b.n	800830c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fbe0 	bl	8008a94 <USBD_SetConfig>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73fb      	strb	r3, [r7, #15]
          break;
 80082d8:	e018      	b.n	800830c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fc83 	bl	8008be8 <USBD_GetConfig>
          break;
 80082e2:	e013      	b.n	800830c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fcb4 	bl	8008c54 <USBD_GetStatus>
          break;
 80082ec:	e00e      	b.n	800830c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fce3 	bl	8008cbc <USBD_SetFeature>
          break;
 80082f6:	e009      	b.n	800830c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fd07 	bl	8008d0e <USBD_ClrFeature>
          break;
 8008300:	e004      	b.n	800830c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fd5e 	bl	8008dc6 <USBD_CtlError>
          break;
 800830a:	bf00      	nop
      }
      break;
 800830c:	e004      	b.n	8008318 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fd58 	bl	8008dc6 <USBD_CtlError>
      break;
 8008316:	bf00      	nop
  }

  return ret;
 8008318:	7bfb      	ldrb	r3, [r7, #15]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop

08008324 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800833a:	2b40      	cmp	r3, #64	@ 0x40
 800833c:	d005      	beq.n	800834a <USBD_StdItfReq+0x26>
 800833e:	2b40      	cmp	r3, #64	@ 0x40
 8008340:	d852      	bhi.n	80083e8 <USBD_StdItfReq+0xc4>
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <USBD_StdItfReq+0x26>
 8008346:	2b20      	cmp	r3, #32
 8008348:	d14e      	bne.n	80083e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008350:	b2db      	uxtb	r3, r3
 8008352:	3b01      	subs	r3, #1
 8008354:	2b02      	cmp	r3, #2
 8008356:	d840      	bhi.n	80083da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	889b      	ldrh	r3, [r3, #4]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b01      	cmp	r3, #1
 8008360:	d836      	bhi.n	80083d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	889b      	ldrh	r3, [r3, #4]
 8008366:	b2db      	uxtb	r3, r3
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7ff fedb 	bl	8008126 <USBD_CoreFindIF>
 8008370:	4603      	mov	r3, r0
 8008372:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	2bff      	cmp	r3, #255	@ 0xff
 8008378:	d01d      	beq.n	80083b6 <USBD_StdItfReq+0x92>
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d11a      	bne.n	80083b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008380:	7bba      	ldrb	r2, [r7, #14]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	32ae      	adds	r2, #174	@ 0xae
 8008386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00f      	beq.n	80083b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008390:	7bba      	ldrb	r2, [r7, #14]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008398:	7bba      	ldrb	r2, [r7, #14]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	32ae      	adds	r2, #174	@ 0xae
 800839e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	4798      	blx	r3
 80083aa:	4603      	mov	r3, r0
 80083ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083ae:	e004      	b.n	80083ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80083b0:	2303      	movs	r3, #3
 80083b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083b4:	e001      	b.n	80083ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80083b6:	2303      	movs	r3, #3
 80083b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	88db      	ldrh	r3, [r3, #6]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d110      	bne.n	80083e4 <USBD_StdItfReq+0xc0>
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10d      	bne.n	80083e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fdd3 	bl	8008f74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083ce:	e009      	b.n	80083e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fcf7 	bl	8008dc6 <USBD_CtlError>
          break;
 80083d8:	e004      	b.n	80083e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fcf2 	bl	8008dc6 <USBD_CtlError>
          break;
 80083e2:	e000      	b.n	80083e6 <USBD_StdItfReq+0xc2>
          break;
 80083e4:	bf00      	nop
      }
      break;
 80083e6:	e004      	b.n	80083f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fceb 	bl	8008dc6 <USBD_CtlError>
      break;
 80083f0:	bf00      	nop
  }

  return ret;
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	889b      	ldrh	r3, [r3, #4]
 800840e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008418:	2b40      	cmp	r3, #64	@ 0x40
 800841a:	d007      	beq.n	800842c <USBD_StdEPReq+0x30>
 800841c:	2b40      	cmp	r3, #64	@ 0x40
 800841e:	f200 817f 	bhi.w	8008720 <USBD_StdEPReq+0x324>
 8008422:	2b00      	cmp	r3, #0
 8008424:	d02a      	beq.n	800847c <USBD_StdEPReq+0x80>
 8008426:	2b20      	cmp	r3, #32
 8008428:	f040 817a 	bne.w	8008720 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7ff fe85 	bl	8008140 <USBD_CoreFindEP>
 8008436:	4603      	mov	r3, r0
 8008438:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800843a:	7b7b      	ldrb	r3, [r7, #13]
 800843c:	2bff      	cmp	r3, #255	@ 0xff
 800843e:	f000 8174 	beq.w	800872a <USBD_StdEPReq+0x32e>
 8008442:	7b7b      	ldrb	r3, [r7, #13]
 8008444:	2b00      	cmp	r3, #0
 8008446:	f040 8170 	bne.w	800872a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800844a:	7b7a      	ldrb	r2, [r7, #13]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008452:	7b7a      	ldrb	r2, [r7, #13]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	32ae      	adds	r2, #174	@ 0xae
 8008458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 8163 	beq.w	800872a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008464:	7b7a      	ldrb	r2, [r7, #13]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	32ae      	adds	r2, #174	@ 0xae
 800846a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	4798      	blx	r3
 8008476:	4603      	mov	r3, r0
 8008478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800847a:	e156      	b.n	800872a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	785b      	ldrb	r3, [r3, #1]
 8008480:	2b03      	cmp	r3, #3
 8008482:	d008      	beq.n	8008496 <USBD_StdEPReq+0x9a>
 8008484:	2b03      	cmp	r3, #3
 8008486:	f300 8145 	bgt.w	8008714 <USBD_StdEPReq+0x318>
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 809b 	beq.w	80085c6 <USBD_StdEPReq+0x1ca>
 8008490:	2b01      	cmp	r3, #1
 8008492:	d03c      	beq.n	800850e <USBD_StdEPReq+0x112>
 8008494:	e13e      	b.n	8008714 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d002      	beq.n	80084a8 <USBD_StdEPReq+0xac>
 80084a2:	2b03      	cmp	r3, #3
 80084a4:	d016      	beq.n	80084d4 <USBD_StdEPReq+0xd8>
 80084a6:	e02c      	b.n	8008502 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00d      	beq.n	80084ca <USBD_StdEPReq+0xce>
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
 80084b0:	2b80      	cmp	r3, #128	@ 0x80
 80084b2:	d00a      	beq.n	80084ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 f979 	bl	80097b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084be:	2180      	movs	r1, #128	@ 0x80
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 f975 	bl	80097b0 <USBD_LL_StallEP>
 80084c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084c8:	e020      	b.n	800850c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fc7a 	bl	8008dc6 <USBD_CtlError>
              break;
 80084d2:	e01b      	b.n	800850c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	885b      	ldrh	r3, [r3, #2]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10e      	bne.n	80084fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00b      	beq.n	80084fa <USBD_StdEPReq+0xfe>
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	2b80      	cmp	r3, #128	@ 0x80
 80084e6:	d008      	beq.n	80084fa <USBD_StdEPReq+0xfe>
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	88db      	ldrh	r3, [r3, #6]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d104      	bne.n	80084fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	4619      	mov	r1, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 f95b 	bl	80097b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fd3a 	bl	8008f74 <USBD_CtlSendStatus>

              break;
 8008500:	e004      	b.n	800850c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fc5e 	bl	8008dc6 <USBD_CtlError>
              break;
 800850a:	bf00      	nop
          }
          break;
 800850c:	e107      	b.n	800871e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b02      	cmp	r3, #2
 8008518:	d002      	beq.n	8008520 <USBD_StdEPReq+0x124>
 800851a:	2b03      	cmp	r3, #3
 800851c:	d016      	beq.n	800854c <USBD_StdEPReq+0x150>
 800851e:	e04b      	b.n	80085b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00d      	beq.n	8008542 <USBD_StdEPReq+0x146>
 8008526:	7bbb      	ldrb	r3, [r7, #14]
 8008528:	2b80      	cmp	r3, #128	@ 0x80
 800852a:	d00a      	beq.n	8008542 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f001 f93d 	bl	80097b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008536:	2180      	movs	r1, #128	@ 0x80
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 f939 	bl	80097b0 <USBD_LL_StallEP>
 800853e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008540:	e040      	b.n	80085c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fc3e 	bl	8008dc6 <USBD_CtlError>
              break;
 800854a:	e03b      	b.n	80085c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	885b      	ldrh	r3, [r3, #2]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d136      	bne.n	80085c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008554:	7bbb      	ldrb	r3, [r7, #14]
 8008556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800855a:	2b00      	cmp	r3, #0
 800855c:	d004      	beq.n	8008568 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800855e:	7bbb      	ldrb	r3, [r7, #14]
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f001 f943 	bl	80097ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fd03 	bl	8008f74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7ff fde4 	bl	8008140 <USBD_CoreFindEP>
 8008578:	4603      	mov	r3, r0
 800857a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800857c:	7b7b      	ldrb	r3, [r7, #13]
 800857e:	2bff      	cmp	r3, #255	@ 0xff
 8008580:	d01f      	beq.n	80085c2 <USBD_StdEPReq+0x1c6>
 8008582:	7b7b      	ldrb	r3, [r7, #13]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d11c      	bne.n	80085c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008588:	7b7a      	ldrb	r2, [r7, #13]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008590:	7b7a      	ldrb	r2, [r7, #13]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	32ae      	adds	r2, #174	@ 0xae
 8008596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d010      	beq.n	80085c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80085a0:	7b7a      	ldrb	r2, [r7, #13]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	32ae      	adds	r2, #174	@ 0xae
 80085a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
 80085b2:	4603      	mov	r3, r0
 80085b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80085b6:	e004      	b.n	80085c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fc03 	bl	8008dc6 <USBD_CtlError>
              break;
 80085c0:	e000      	b.n	80085c4 <USBD_StdEPReq+0x1c8>
              break;
 80085c2:	bf00      	nop
          }
          break;
 80085c4:	e0ab      	b.n	800871e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d002      	beq.n	80085d8 <USBD_StdEPReq+0x1dc>
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d032      	beq.n	800863c <USBD_StdEPReq+0x240>
 80085d6:	e097      	b.n	8008708 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d007      	beq.n	80085ee <USBD_StdEPReq+0x1f2>
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	2b80      	cmp	r3, #128	@ 0x80
 80085e2:	d004      	beq.n	80085ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fbed 	bl	8008dc6 <USBD_CtlError>
                break;
 80085ec:	e091      	b.n	8008712 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	da0b      	bge.n	800860e <USBD_StdEPReq+0x212>
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	3310      	adds	r3, #16
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	4413      	add	r3, r2
 800860a:	3304      	adds	r3, #4
 800860c:	e00b      	b.n	8008626 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008614:	4613      	mov	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	4413      	add	r3, r2
 8008624:	3304      	adds	r3, #4
 8008626:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2202      	movs	r2, #2
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fc43 	bl	8008ec0 <USBD_CtlSendData>
              break;
 800863a:	e06a      	b.n	8008712 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800863c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008640:	2b00      	cmp	r3, #0
 8008642:	da11      	bge.n	8008668 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	f003 020f 	and.w	r2, r3, #15
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	4613      	mov	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	440b      	add	r3, r1
 8008656:	3324      	adds	r3, #36	@ 0x24
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d117      	bne.n	800868e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fbb0 	bl	8008dc6 <USBD_CtlError>
                  break;
 8008666:	e054      	b.n	8008712 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	f003 020f 	and.w	r2, r3, #15
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	4613      	mov	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	440b      	add	r3, r1
 800867a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d104      	bne.n	800868e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fb9d 	bl	8008dc6 <USBD_CtlError>
                  break;
 800868c:	e041      	b.n	8008712 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800868e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008692:	2b00      	cmp	r3, #0
 8008694:	da0b      	bge.n	80086ae <USBD_StdEPReq+0x2b2>
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800869c:	4613      	mov	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	3310      	adds	r3, #16
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	4413      	add	r3, r2
 80086aa:	3304      	adds	r3, #4
 80086ac:	e00b      	b.n	80086c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086b4:	4613      	mov	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	4413      	add	r3, r2
 80086c4:	3304      	adds	r3, #4
 80086c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d002      	beq.n	80086d4 <USBD_StdEPReq+0x2d8>
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	2b80      	cmp	r3, #128	@ 0x80
 80086d2:	d103      	bne.n	80086dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	e00e      	b.n	80086fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f001 f8a3 	bl	800982c <USBD_LL_IsStallEP>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d003      	beq.n	80086f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2201      	movs	r2, #1
 80086f0:	601a      	str	r2, [r3, #0]
 80086f2:	e002      	b.n	80086fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2202      	movs	r2, #2
 80086fe:	4619      	mov	r1, r3
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fbdd 	bl	8008ec0 <USBD_CtlSendData>
              break;
 8008706:	e004      	b.n	8008712 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fb5b 	bl	8008dc6 <USBD_CtlError>
              break;
 8008710:	bf00      	nop
          }
          break;
 8008712:	e004      	b.n	800871e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fb55 	bl	8008dc6 <USBD_CtlError>
          break;
 800871c:	bf00      	nop
      }
      break;
 800871e:	e005      	b.n	800872c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fb4f 	bl	8008dc6 <USBD_CtlError>
      break;
 8008728:	e000      	b.n	800872c <USBD_StdEPReq+0x330>
      break;
 800872a:	bf00      	nop
  }

  return ret;
 800872c:	7bfb      	ldrb	r3, [r7, #15]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	885b      	ldrh	r3, [r3, #2]
 8008752:	0a1b      	lsrs	r3, r3, #8
 8008754:	b29b      	uxth	r3, r3
 8008756:	3b01      	subs	r3, #1
 8008758:	2b06      	cmp	r3, #6
 800875a:	f200 8128 	bhi.w	80089ae <USBD_GetDescriptor+0x276>
 800875e:	a201      	add	r2, pc, #4	@ (adr r2, 8008764 <USBD_GetDescriptor+0x2c>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	08008781 	.word	0x08008781
 8008768:	08008799 	.word	0x08008799
 800876c:	080087d9 	.word	0x080087d9
 8008770:	080089af 	.word	0x080089af
 8008774:	080089af 	.word	0x080089af
 8008778:	0800894f 	.word	0x0800894f
 800877c:	0800897b 	.word	0x0800897b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	7c12      	ldrb	r2, [r2, #16]
 800878c:	f107 0108 	add.w	r1, r7, #8
 8008790:	4610      	mov	r0, r2
 8008792:	4798      	blx	r3
 8008794:	60f8      	str	r0, [r7, #12]
      break;
 8008796:	e112      	b.n	80089be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	7c1b      	ldrb	r3, [r3, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10d      	bne.n	80087bc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a8:	f107 0208 	add.w	r2, r7, #8
 80087ac:	4610      	mov	r0, r2
 80087ae:	4798      	blx	r3
 80087b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3301      	adds	r3, #1
 80087b6:	2202      	movs	r2, #2
 80087b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80087ba:	e100      	b.n	80089be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c4:	f107 0208 	add.w	r2, r7, #8
 80087c8:	4610      	mov	r0, r2
 80087ca:	4798      	blx	r3
 80087cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3301      	adds	r3, #1
 80087d2:	2202      	movs	r2, #2
 80087d4:	701a      	strb	r2, [r3, #0]
      break;
 80087d6:	e0f2      	b.n	80089be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	885b      	ldrh	r3, [r3, #2]
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b05      	cmp	r3, #5
 80087e0:	f200 80ac 	bhi.w	800893c <USBD_GetDescriptor+0x204>
 80087e4:	a201      	add	r2, pc, #4	@ (adr r2, 80087ec <USBD_GetDescriptor+0xb4>)
 80087e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ea:	bf00      	nop
 80087ec:	08008805 	.word	0x08008805
 80087f0:	08008839 	.word	0x08008839
 80087f4:	0800886d 	.word	0x0800886d
 80087f8:	080088a1 	.word	0x080088a1
 80087fc:	080088d5 	.word	0x080088d5
 8008800:	08008909 	.word	0x08008909
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00b      	beq.n	8008828 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	7c12      	ldrb	r2, [r2, #16]
 800881c:	f107 0108 	add.w	r1, r7, #8
 8008820:	4610      	mov	r0, r2
 8008822:	4798      	blx	r3
 8008824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008826:	e091      	b.n	800894c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 facb 	bl	8008dc6 <USBD_CtlError>
            err++;
 8008830:	7afb      	ldrb	r3, [r7, #11]
 8008832:	3301      	adds	r3, #1
 8008834:	72fb      	strb	r3, [r7, #11]
          break;
 8008836:	e089      	b.n	800894c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00b      	beq.n	800885c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	7c12      	ldrb	r2, [r2, #16]
 8008850:	f107 0108 	add.w	r1, r7, #8
 8008854:	4610      	mov	r0, r2
 8008856:	4798      	blx	r3
 8008858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800885a:	e077      	b.n	800894c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fab1 	bl	8008dc6 <USBD_CtlError>
            err++;
 8008864:	7afb      	ldrb	r3, [r7, #11]
 8008866:	3301      	adds	r3, #1
 8008868:	72fb      	strb	r3, [r7, #11]
          break;
 800886a:	e06f      	b.n	800894c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00b      	beq.n	8008890 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	7c12      	ldrb	r2, [r2, #16]
 8008884:	f107 0108 	add.w	r1, r7, #8
 8008888:	4610      	mov	r0, r2
 800888a:	4798      	blx	r3
 800888c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800888e:	e05d      	b.n	800894c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fa97 	bl	8008dc6 <USBD_CtlError>
            err++;
 8008898:	7afb      	ldrb	r3, [r7, #11]
 800889a:	3301      	adds	r3, #1
 800889c:	72fb      	strb	r3, [r7, #11]
          break;
 800889e:	e055      	b.n	800894c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00b      	beq.n	80088c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	7c12      	ldrb	r2, [r2, #16]
 80088b8:	f107 0108 	add.w	r1, r7, #8
 80088bc:	4610      	mov	r0, r2
 80088be:	4798      	blx	r3
 80088c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088c2:	e043      	b.n	800894c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fa7d 	bl	8008dc6 <USBD_CtlError>
            err++;
 80088cc:	7afb      	ldrb	r3, [r7, #11]
 80088ce:	3301      	adds	r3, #1
 80088d0:	72fb      	strb	r3, [r7, #11]
          break;
 80088d2:	e03b      	b.n	800894c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00b      	beq.n	80088f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	7c12      	ldrb	r2, [r2, #16]
 80088ec:	f107 0108 	add.w	r1, r7, #8
 80088f0:	4610      	mov	r0, r2
 80088f2:	4798      	blx	r3
 80088f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088f6:	e029      	b.n	800894c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fa63 	bl	8008dc6 <USBD_CtlError>
            err++;
 8008900:	7afb      	ldrb	r3, [r7, #11]
 8008902:	3301      	adds	r3, #1
 8008904:	72fb      	strb	r3, [r7, #11]
          break;
 8008906:	e021      	b.n	800894c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00b      	beq.n	800892c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	7c12      	ldrb	r2, [r2, #16]
 8008920:	f107 0108 	add.w	r1, r7, #8
 8008924:	4610      	mov	r0, r2
 8008926:	4798      	blx	r3
 8008928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800892a:	e00f      	b.n	800894c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fa49 	bl	8008dc6 <USBD_CtlError>
            err++;
 8008934:	7afb      	ldrb	r3, [r7, #11]
 8008936:	3301      	adds	r3, #1
 8008938:	72fb      	strb	r3, [r7, #11]
          break;
 800893a:	e007      	b.n	800894c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa41 	bl	8008dc6 <USBD_CtlError>
          err++;
 8008944:	7afb      	ldrb	r3, [r7, #11]
 8008946:	3301      	adds	r3, #1
 8008948:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800894a:	bf00      	nop
      }
      break;
 800894c:	e037      	b.n	80089be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	7c1b      	ldrb	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d109      	bne.n	800896a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800895c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800895e:	f107 0208 	add.w	r2, r7, #8
 8008962:	4610      	mov	r0, r2
 8008964:	4798      	blx	r3
 8008966:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008968:	e029      	b.n	80089be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fa2a 	bl	8008dc6 <USBD_CtlError>
        err++;
 8008972:	7afb      	ldrb	r3, [r7, #11]
 8008974:	3301      	adds	r3, #1
 8008976:	72fb      	strb	r3, [r7, #11]
      break;
 8008978:	e021      	b.n	80089be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	7c1b      	ldrb	r3, [r3, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10d      	bne.n	800899e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800898a:	f107 0208 	add.w	r2, r7, #8
 800898e:	4610      	mov	r0, r2
 8008990:	4798      	blx	r3
 8008992:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3301      	adds	r3, #1
 8008998:	2207      	movs	r2, #7
 800899a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800899c:	e00f      	b.n	80089be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fa10 	bl	8008dc6 <USBD_CtlError>
        err++;
 80089a6:	7afb      	ldrb	r3, [r7, #11]
 80089a8:	3301      	adds	r3, #1
 80089aa:	72fb      	strb	r3, [r7, #11]
      break;
 80089ac:	e007      	b.n	80089be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fa08 	bl	8008dc6 <USBD_CtlError>
      err++;
 80089b6:	7afb      	ldrb	r3, [r7, #11]
 80089b8:	3301      	adds	r3, #1
 80089ba:	72fb      	strb	r3, [r7, #11]
      break;
 80089bc:	bf00      	nop
  }

  if (err != 0U)
 80089be:	7afb      	ldrb	r3, [r7, #11]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d11e      	bne.n	8008a02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	88db      	ldrh	r3, [r3, #6]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d016      	beq.n	80089fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80089cc:	893b      	ldrh	r3, [r7, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00e      	beq.n	80089f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	88da      	ldrh	r2, [r3, #6]
 80089d6:	893b      	ldrh	r3, [r7, #8]
 80089d8:	4293      	cmp	r3, r2
 80089da:	bf28      	it	cs
 80089dc:	4613      	movcs	r3, r2
 80089de:	b29b      	uxth	r3, r3
 80089e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80089e2:	893b      	ldrh	r3, [r7, #8]
 80089e4:	461a      	mov	r2, r3
 80089e6:	68f9      	ldr	r1, [r7, #12]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fa69 	bl	8008ec0 <USBD_CtlSendData>
 80089ee:	e009      	b.n	8008a04 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f9e7 	bl	8008dc6 <USBD_CtlError>
 80089f8:	e004      	b.n	8008a04 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 faba 	bl	8008f74 <USBD_CtlSendStatus>
 8008a00:	e000      	b.n	8008a04 <USBD_GetDescriptor+0x2cc>
    return;
 8008a02:	bf00      	nop
  }
}
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop

08008a0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	889b      	ldrh	r3, [r3, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d131      	bne.n	8008a82 <USBD_SetAddress+0x76>
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	88db      	ldrh	r3, [r3, #6]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d12d      	bne.n	8008a82 <USBD_SetAddress+0x76>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	885b      	ldrh	r3, [r3, #2]
 8008a2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a2c:	d829      	bhi.n	8008a82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	885b      	ldrh	r3, [r3, #2]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d104      	bne.n	8008a50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f9bc 	bl	8008dc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a4e:	e01d      	b.n	8008a8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	7bfa      	ldrb	r2, [r7, #15]
 8008a54:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 ff11 	bl	8009884 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa86 	bl	8008f74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d004      	beq.n	8008a78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2202      	movs	r2, #2
 8008a72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a76:	e009      	b.n	8008a8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a80:	e004      	b.n	8008a8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f99e 	bl	8008dc6 <USBD_CtlError>
  }
}
 8008a8a:	bf00      	nop
 8008a8c:	bf00      	nop
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	885b      	ldrh	r3, [r3, #2]
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	4b4e      	ldr	r3, [pc, #312]	@ (8008be4 <USBD_SetConfig+0x150>)
 8008aaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008aac:	4b4d      	ldr	r3, [pc, #308]	@ (8008be4 <USBD_SetConfig+0x150>)
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d905      	bls.n	8008ac0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f985 	bl	8008dc6 <USBD_CtlError>
    return USBD_FAIL;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e08c      	b.n	8008bda <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d002      	beq.n	8008ad2 <USBD_SetConfig+0x3e>
 8008acc:	2b03      	cmp	r3, #3
 8008ace:	d029      	beq.n	8008b24 <USBD_SetConfig+0x90>
 8008ad0:	e075      	b.n	8008bbe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ad2:	4b44      	ldr	r3, [pc, #272]	@ (8008be4 <USBD_SetConfig+0x150>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d020      	beq.n	8008b1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008ada:	4b42      	ldr	r3, [pc, #264]	@ (8008be4 <USBD_SetConfig+0x150>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8008be4 <USBD_SetConfig+0x150>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7fe ffe3 	bl	8007ab6 <USBD_SetClassConfig>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d008      	beq.n	8008b0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f962 	bl	8008dc6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2202      	movs	r2, #2
 8008b06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b0a:	e065      	b.n	8008bd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fa31 	bl	8008f74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2203      	movs	r2, #3
 8008b16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008b1a:	e05d      	b.n	8008bd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fa29 	bl	8008f74 <USBD_CtlSendStatus>
      break;
 8008b22:	e059      	b.n	8008bd8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b24:	4b2f      	ldr	r3, [pc, #188]	@ (8008be4 <USBD_SetConfig+0x150>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d112      	bne.n	8008b52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008b34:	4b2b      	ldr	r3, [pc, #172]	@ (8008be4 <USBD_SetConfig+0x150>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b3e:	4b29      	ldr	r3, [pc, #164]	@ (8008be4 <USBD_SetConfig+0x150>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7fe ffd2 	bl	8007aee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fa12 	bl	8008f74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b50:	e042      	b.n	8008bd8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008b52:	4b24      	ldr	r3, [pc, #144]	@ (8008be4 <USBD_SetConfig+0x150>)
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d02a      	beq.n	8008bb6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7fe ffc0 	bl	8007aee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8008be4 <USBD_SetConfig+0x150>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	461a      	mov	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b78:	4b1a      	ldr	r3, [pc, #104]	@ (8008be4 <USBD_SetConfig+0x150>)
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7fe ff99 	bl	8007ab6 <USBD_SetClassConfig>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00f      	beq.n	8008bae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f918 	bl	8008dc6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7fe ffa5 	bl	8007aee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008bac:	e014      	b.n	8008bd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f9e0 	bl	8008f74 <USBD_CtlSendStatus>
      break;
 8008bb4:	e010      	b.n	8008bd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f9dc 	bl	8008f74 <USBD_CtlSendStatus>
      break;
 8008bbc:	e00c      	b.n	8008bd8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f900 	bl	8008dc6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bc6:	4b07      	ldr	r3, [pc, #28]	@ (8008be4 <USBD_SetConfig+0x150>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7fe ff8e 	bl	8007aee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8008bd6:	bf00      	nop
  }

  return ret;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000460 	.word	0x20000460

08008be8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	88db      	ldrh	r3, [r3, #6]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d004      	beq.n	8008c04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f8e2 	bl	8008dc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c02:	e023      	b.n	8008c4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	dc02      	bgt.n	8008c16 <USBD_GetConfig+0x2e>
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	dc03      	bgt.n	8008c1c <USBD_GetConfig+0x34>
 8008c14:	e015      	b.n	8008c42 <USBD_GetConfig+0x5a>
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d00b      	beq.n	8008c32 <USBD_GetConfig+0x4a>
 8008c1a:	e012      	b.n	8008c42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3308      	adds	r3, #8
 8008c26:	2201      	movs	r2, #1
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f948 	bl	8008ec0 <USBD_CtlSendData>
        break;
 8008c30:	e00c      	b.n	8008c4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	3304      	adds	r3, #4
 8008c36:	2201      	movs	r2, #1
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f940 	bl	8008ec0 <USBD_CtlSendData>
        break;
 8008c40:	e004      	b.n	8008c4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008c42:	6839      	ldr	r1, [r7, #0]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f8be 	bl	8008dc6 <USBD_CtlError>
        break;
 8008c4a:	bf00      	nop
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	3b01      	subs	r3, #1
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d81e      	bhi.n	8008caa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	88db      	ldrh	r3, [r3, #6]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d004      	beq.n	8008c7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f8a5 	bl	8008dc6 <USBD_CtlError>
        break;
 8008c7c:	e01a      	b.n	8008cb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d005      	beq.n	8008c9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f043 0202 	orr.w	r2, r3, #2
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	330c      	adds	r3, #12
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f90c 	bl	8008ec0 <USBD_CtlSendData>
      break;
 8008ca8:	e004      	b.n	8008cb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f88a 	bl	8008dc6 <USBD_CtlError>
      break;
 8008cb2:	bf00      	nop
  }
}
 8008cb4:	bf00      	nop
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	885b      	ldrh	r3, [r3, #2]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d107      	bne.n	8008cde <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f94c 	bl	8008f74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008cdc:	e013      	b.n	8008d06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	885b      	ldrh	r3, [r3, #2]
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d10b      	bne.n	8008cfe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	889b      	ldrh	r3, [r3, #4]
 8008cea:	0a1b      	lsrs	r3, r3, #8
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f93c 	bl	8008f74 <USBD_CtlSendStatus>
}
 8008cfc:	e003      	b.n	8008d06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f860 	bl	8008dc6 <USBD_CtlError>
}
 8008d06:	bf00      	nop
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	3b01      	subs	r3, #1
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d80b      	bhi.n	8008d3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	885b      	ldrh	r3, [r3, #2]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d10c      	bne.n	8008d48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f91c 	bl	8008f74 <USBD_CtlSendStatus>
      }
      break;
 8008d3c:	e004      	b.n	8008d48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f840 	bl	8008dc6 <USBD_CtlError>
      break;
 8008d46:	e000      	b.n	8008d4a <USBD_ClrFeature+0x3c>
      break;
 8008d48:	bf00      	nop
  }
}
 8008d4a:	bf00      	nop
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	781a      	ldrb	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	781a      	ldrb	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f7ff fa40 	bl	8008202 <SWAPBYTE>
 8008d82:	4603      	mov	r3, r0
 8008d84:	461a      	mov	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3301      	adds	r3, #1
 8008d94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f7ff fa33 	bl	8008202 <SWAPBYTE>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	461a      	mov	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	3301      	adds	r3, #1
 8008da8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	3301      	adds	r3, #1
 8008dae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f7ff fa26 	bl	8008202 <SWAPBYTE>
 8008db6:	4603      	mov	r3, r0
 8008db8:	461a      	mov	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	80da      	strh	r2, [r3, #6]
}
 8008dbe:	bf00      	nop
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dd0:	2180      	movs	r1, #128	@ 0x80
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fcec 	bl	80097b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008dd8:	2100      	movs	r1, #0
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fce8 	bl	80097b0 <USBD_LL_StallEP>
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d042      	beq.n	8008e84 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008e02:	6938      	ldr	r0, [r7, #16]
 8008e04:	f000 f842 	bl	8008e8c <USBD_GetLen>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e12:	d808      	bhi.n	8008e26 <USBD_GetString+0x3e>
 8008e14:	6938      	ldr	r0, [r7, #16]
 8008e16:	f000 f839 	bl	8008e8c <USBD_GetLen>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	e001      	b.n	8008e2a <USBD_GetString+0x42>
 8008e26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	4413      	add	r3, r2
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	7812      	ldrb	r2, [r2, #0]
 8008e38:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e40:	7dfb      	ldrb	r3, [r7, #23]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	4413      	add	r3, r2
 8008e46:	2203      	movs	r2, #3
 8008e48:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e50:	e013      	b.n	8008e7a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	4413      	add	r3, r2
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	7812      	ldrb	r2, [r2, #0]
 8008e5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	3301      	adds	r3, #1
 8008e62:	613b      	str	r3, [r7, #16]
    idx++;
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	3301      	adds	r3, #1
 8008e68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008e6a:	7dfb      	ldrb	r3, [r7, #23]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	4413      	add	r3, r2
 8008e70:	2200      	movs	r2, #0
 8008e72:	701a      	strb	r2, [r3, #0]
    idx++;
 8008e74:	7dfb      	ldrb	r3, [r7, #23]
 8008e76:	3301      	adds	r3, #1
 8008e78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1e7      	bne.n	8008e52 <USBD_GetString+0x6a>
 8008e82:	e000      	b.n	8008e86 <USBD_GetString+0x9e>
    return;
 8008e84:	bf00      	nop
  }
}
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008e9c:	e005      	b.n	8008eaa <USBD_GetLen+0x1e>
  {
    len++;
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1f5      	bne.n	8008e9e <USBD_GetLen+0x12>
  }

  return len;
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 fceb 	bl	80098c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	60f8      	str	r0, [r7, #12]
 8008efe:	60b9      	str	r1, [r7, #8]
 8008f00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	2100      	movs	r1, #0
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 fcda 	bl	80098c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2203      	movs	r2, #3
 8008f28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	2100      	movs	r1, #0
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 fcde 	bl	8009904 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	60f8      	str	r0, [r7, #12]
 8008f5a:	60b9      	str	r1, [r7, #8]
 8008f5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	2100      	movs	r1, #0
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 fccd 	bl	8009904 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2204      	movs	r2, #4
 8008f80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f84:	2300      	movs	r3, #0
 8008f86:	2200      	movs	r2, #0
 8008f88:	2100      	movs	r1, #0
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fc99 	bl	80098c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2205      	movs	r2, #5
 8008fa6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008faa:	2300      	movs	r3, #0
 8008fac:	2200      	movs	r2, #0
 8008fae:	2100      	movs	r1, #0
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fca7 	bl	8009904 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	4912      	ldr	r1, [pc, #72]	@ (8009010 <MX_USB_DEVICE_Init+0x50>)
 8008fc8:	4812      	ldr	r0, [pc, #72]	@ (8009014 <MX_USB_DEVICE_Init+0x54>)
 8008fca:	f7fe fcf7 	bl	80079bc <USBD_Init>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008fd4:	f7f8 f8c0 	bl	8001158 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008fd8:	490f      	ldr	r1, [pc, #60]	@ (8009018 <MX_USB_DEVICE_Init+0x58>)
 8008fda:	480e      	ldr	r0, [pc, #56]	@ (8009014 <MX_USB_DEVICE_Init+0x54>)
 8008fdc:	f7fe fd1e 	bl	8007a1c <USBD_RegisterClass>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008fe6:	f7f8 f8b7 	bl	8001158 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008fea:	490c      	ldr	r1, [pc, #48]	@ (800901c <MX_USB_DEVICE_Init+0x5c>)
 8008fec:	4809      	ldr	r0, [pc, #36]	@ (8009014 <MX_USB_DEVICE_Init+0x54>)
 8008fee:	f7fe fc15 	bl	800781c <USBD_CDC_RegisterInterface>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ff8:	f7f8 f8ae 	bl	8001158 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ffc:	4805      	ldr	r0, [pc, #20]	@ (8009014 <MX_USB_DEVICE_Init+0x54>)
 8008ffe:	f7fe fd43 	bl	8007a88 <USBD_Start>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009008:	f7f8 f8a6 	bl	8001158 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800900c:	bf00      	nop
 800900e:	bd80      	pop	{r7, pc}
 8009010:	200000ac 	.word	0x200000ac
 8009014:	20000464 	.word	0x20000464
 8009018:	20000018 	.word	0x20000018
 800901c:	20000098 	.word	0x20000098

08009020 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009024:	2200      	movs	r2, #0
 8009026:	4905      	ldr	r1, [pc, #20]	@ (800903c <CDC_Init_FS+0x1c>)
 8009028:	4805      	ldr	r0, [pc, #20]	@ (8009040 <CDC_Init_FS+0x20>)
 800902a:	f7fe fc11 	bl	8007850 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800902e:	4905      	ldr	r1, [pc, #20]	@ (8009044 <CDC_Init_FS+0x24>)
 8009030:	4803      	ldr	r0, [pc, #12]	@ (8009040 <CDC_Init_FS+0x20>)
 8009032:	f7fe fc2f 	bl	8007894 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009036:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009038:	4618      	mov	r0, r3
 800903a:	bd80      	pop	{r7, pc}
 800903c:	20000f40 	.word	0x20000f40
 8009040:	20000464 	.word	0x20000464
 8009044:	20000740 	.word	0x20000740

08009048 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009048:	b480      	push	{r7}
 800904a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800904c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800904e:	4618      	mov	r0, r3
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	6039      	str	r1, [r7, #0]
 8009062:	71fb      	strb	r3, [r7, #7]
 8009064:	4613      	mov	r3, r2
 8009066:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009068:	79fb      	ldrb	r3, [r7, #7]
 800906a:	2b23      	cmp	r3, #35	@ 0x23
 800906c:	d84a      	bhi.n	8009104 <CDC_Control_FS+0xac>
 800906e:	a201      	add	r2, pc, #4	@ (adr r2, 8009074 <CDC_Control_FS+0x1c>)
 8009070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009074:	08009105 	.word	0x08009105
 8009078:	08009105 	.word	0x08009105
 800907c:	08009105 	.word	0x08009105
 8009080:	08009105 	.word	0x08009105
 8009084:	08009105 	.word	0x08009105
 8009088:	08009105 	.word	0x08009105
 800908c:	08009105 	.word	0x08009105
 8009090:	08009105 	.word	0x08009105
 8009094:	08009105 	.word	0x08009105
 8009098:	08009105 	.word	0x08009105
 800909c:	08009105 	.word	0x08009105
 80090a0:	08009105 	.word	0x08009105
 80090a4:	08009105 	.word	0x08009105
 80090a8:	08009105 	.word	0x08009105
 80090ac:	08009105 	.word	0x08009105
 80090b0:	08009105 	.word	0x08009105
 80090b4:	08009105 	.word	0x08009105
 80090b8:	08009105 	.word	0x08009105
 80090bc:	08009105 	.word	0x08009105
 80090c0:	08009105 	.word	0x08009105
 80090c4:	08009105 	.word	0x08009105
 80090c8:	08009105 	.word	0x08009105
 80090cc:	08009105 	.word	0x08009105
 80090d0:	08009105 	.word	0x08009105
 80090d4:	08009105 	.word	0x08009105
 80090d8:	08009105 	.word	0x08009105
 80090dc:	08009105 	.word	0x08009105
 80090e0:	08009105 	.word	0x08009105
 80090e4:	08009105 	.word	0x08009105
 80090e8:	08009105 	.word	0x08009105
 80090ec:	08009105 	.word	0x08009105
 80090f0:	08009105 	.word	0x08009105
 80090f4:	08009105 	.word	0x08009105
 80090f8:	08009105 	.word	0x08009105
 80090fc:	08009105 	.word	0x08009105
 8009100:	08009105 	.word	0x08009105
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009104:	bf00      	nop
  }

  return (USBD_OK);
 8009106:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009108:	4618      	mov	r0, r3
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	4805      	ldr	r0, [pc, #20]	@ (8009138 <CDC_Receive_FS+0x24>)
 8009122:	f7fe fbb7 	bl	8007894 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009126:	4804      	ldr	r0, [pc, #16]	@ (8009138 <CDC_Receive_FS+0x24>)
 8009128:	f7fe fc12 	bl	8007950 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800912c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20000464 	.word	0x20000464

0800913c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800914c:	4b0d      	ldr	r3, [pc, #52]	@ (8009184 <CDC_Transmit_FS+0x48>)
 800914e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009152:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800915e:	2301      	movs	r3, #1
 8009160:	e00b      	b.n	800917a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009162:	887b      	ldrh	r3, [r7, #2]
 8009164:	461a      	mov	r2, r3
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	4806      	ldr	r0, [pc, #24]	@ (8009184 <CDC_Transmit_FS+0x48>)
 800916a:	f7fe fb71 	bl	8007850 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800916e:	4805      	ldr	r0, [pc, #20]	@ (8009184 <CDC_Transmit_FS+0x48>)
 8009170:	f7fe fbae 	bl	80078d0 <USBD_CDC_TransmitPacket>
 8009174:	4603      	mov	r3, r0
 8009176:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	20000464 	.word	0x20000464

08009188 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	4613      	mov	r3, r2
 8009194:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800919a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	371c      	adds	r7, #28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
	...

080091ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	6039      	str	r1, [r7, #0]
 80091b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	2212      	movs	r2, #18
 80091bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091be:	4b03      	ldr	r3, [pc, #12]	@ (80091cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	200000c8 	.word	0x200000c8

080091d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	6039      	str	r1, [r7, #0]
 80091da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	2204      	movs	r2, #4
 80091e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091e2:	4b03      	ldr	r3, [pc, #12]	@ (80091f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	200000dc 	.word	0x200000dc

080091f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	6039      	str	r1, [r7, #0]
 80091fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009200:	79fb      	ldrb	r3, [r7, #7]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d105      	bne.n	8009212 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	4907      	ldr	r1, [pc, #28]	@ (8009228 <USBD_FS_ProductStrDescriptor+0x34>)
 800920a:	4808      	ldr	r0, [pc, #32]	@ (800922c <USBD_FS_ProductStrDescriptor+0x38>)
 800920c:	f7ff fdec 	bl	8008de8 <USBD_GetString>
 8009210:	e004      	b.n	800921c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	4904      	ldr	r1, [pc, #16]	@ (8009228 <USBD_FS_ProductStrDescriptor+0x34>)
 8009216:	4805      	ldr	r0, [pc, #20]	@ (800922c <USBD_FS_ProductStrDescriptor+0x38>)
 8009218:	f7ff fde6 	bl	8008de8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800921c:	4b02      	ldr	r3, [pc, #8]	@ (8009228 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20001740 	.word	0x20001740
 800922c:	0800c6f8 	.word	0x0800c6f8

08009230 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	6039      	str	r1, [r7, #0]
 800923a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	4904      	ldr	r1, [pc, #16]	@ (8009250 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009240:	4804      	ldr	r0, [pc, #16]	@ (8009254 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009242:	f7ff fdd1 	bl	8008de8 <USBD_GetString>
  return USBD_StrDesc;
 8009246:	4b02      	ldr	r3, [pc, #8]	@ (8009250 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009248:	4618      	mov	r0, r3
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	20001740 	.word	0x20001740
 8009254:	0800c710 	.word	0x0800c710

08009258 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	221a      	movs	r2, #26
 8009268:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800926a:	f000 f843 	bl	80092f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800926e:	4b02      	ldr	r3, [pc, #8]	@ (8009278 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009270:	4618      	mov	r0, r3
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	200000e0 	.word	0x200000e0

0800927c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	6039      	str	r1, [r7, #0]
 8009286:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d105      	bne.n	800929a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	4907      	ldr	r1, [pc, #28]	@ (80092b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009292:	4808      	ldr	r0, [pc, #32]	@ (80092b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009294:	f7ff fda8 	bl	8008de8 <USBD_GetString>
 8009298:	e004      	b.n	80092a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	4904      	ldr	r1, [pc, #16]	@ (80092b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800929e:	4805      	ldr	r0, [pc, #20]	@ (80092b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092a0:	f7ff fda2 	bl	8008de8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092a4:	4b02      	ldr	r3, [pc, #8]	@ (80092b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20001740 	.word	0x20001740
 80092b4:	0800c724 	.word	0x0800c724

080092b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d105      	bne.n	80092d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	4907      	ldr	r1, [pc, #28]	@ (80092ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092ce:	4808      	ldr	r0, [pc, #32]	@ (80092f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092d0:	f7ff fd8a 	bl	8008de8 <USBD_GetString>
 80092d4:	e004      	b.n	80092e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	4904      	ldr	r1, [pc, #16]	@ (80092ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092da:	4805      	ldr	r0, [pc, #20]	@ (80092f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092dc:	f7ff fd84 	bl	8008de8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092e0:	4b02      	ldr	r3, [pc, #8]	@ (80092ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	20001740 	.word	0x20001740
 80092f0:	0800c730 	.word	0x0800c730

080092f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80092fa:	4b0f      	ldr	r3, [pc, #60]	@ (8009338 <Get_SerialNum+0x44>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009300:	4b0e      	ldr	r3, [pc, #56]	@ (800933c <Get_SerialNum+0x48>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009306:	4b0e      	ldr	r3, [pc, #56]	@ (8009340 <Get_SerialNum+0x4c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4413      	add	r3, r2
 8009312:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d009      	beq.n	800932e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800931a:	2208      	movs	r2, #8
 800931c:	4909      	ldr	r1, [pc, #36]	@ (8009344 <Get_SerialNum+0x50>)
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 f814 	bl	800934c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009324:	2204      	movs	r2, #4
 8009326:	4908      	ldr	r1, [pc, #32]	@ (8009348 <Get_SerialNum+0x54>)
 8009328:	68b8      	ldr	r0, [r7, #8]
 800932a:	f000 f80f 	bl	800934c <IntToUnicode>
  }
}
 800932e:	bf00      	nop
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	1fff7a10 	.word	0x1fff7a10
 800933c:	1fff7a14 	.word	0x1fff7a14
 8009340:	1fff7a18 	.word	0x1fff7a18
 8009344:	200000e2 	.word	0x200000e2
 8009348:	200000f2 	.word	0x200000f2

0800934c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	4613      	mov	r3, r2
 8009358:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800935e:	2300      	movs	r3, #0
 8009360:	75fb      	strb	r3, [r7, #23]
 8009362:	e027      	b.n	80093b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	0f1b      	lsrs	r3, r3, #28
 8009368:	2b09      	cmp	r3, #9
 800936a:	d80b      	bhi.n	8009384 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	0f1b      	lsrs	r3, r3, #28
 8009370:	b2da      	uxtb	r2, r3
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	4619      	mov	r1, r3
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	440b      	add	r3, r1
 800937c:	3230      	adds	r2, #48	@ 0x30
 800937e:	b2d2      	uxtb	r2, r2
 8009380:	701a      	strb	r2, [r3, #0]
 8009382:	e00a      	b.n	800939a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	0f1b      	lsrs	r3, r3, #28
 8009388:	b2da      	uxtb	r2, r3
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	4619      	mov	r1, r3
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	440b      	add	r3, r1
 8009394:	3237      	adds	r2, #55	@ 0x37
 8009396:	b2d2      	uxtb	r2, r2
 8009398:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	3301      	adds	r3, #1
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	4413      	add	r3, r2
 80093aa:	2200      	movs	r2, #0
 80093ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	3301      	adds	r3, #1
 80093b2:	75fb      	strb	r3, [r7, #23]
 80093b4:	7dfa      	ldrb	r2, [r7, #23]
 80093b6:	79fb      	ldrb	r3, [r7, #7]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d3d3      	bcc.n	8009364 <IntToUnicode+0x18>
  }
}
 80093bc:	bf00      	nop
 80093be:	bf00      	nop
 80093c0:	371c      	adds	r7, #28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
	...

080093cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08a      	sub	sp, #40	@ 0x28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093d4:	f107 0314 	add.w	r3, r7, #20
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	605a      	str	r2, [r3, #4]
 80093de:	609a      	str	r2, [r3, #8]
 80093e0:	60da      	str	r2, [r3, #12]
 80093e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093ec:	d13a      	bne.n	8009464 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093ee:	2300      	movs	r3, #0
 80093f0:	613b      	str	r3, [r7, #16]
 80093f2:	4b1e      	ldr	r3, [pc, #120]	@ (800946c <HAL_PCD_MspInit+0xa0>)
 80093f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093f6:	4a1d      	ldr	r2, [pc, #116]	@ (800946c <HAL_PCD_MspInit+0xa0>)
 80093f8:	f043 0301 	orr.w	r3, r3, #1
 80093fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80093fe:	4b1b      	ldr	r3, [pc, #108]	@ (800946c <HAL_PCD_MspInit+0xa0>)
 8009400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	613b      	str	r3, [r7, #16]
 8009408:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800940a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800940e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009410:	2302      	movs	r3, #2
 8009412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009414:	2300      	movs	r3, #0
 8009416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009418:	2303      	movs	r3, #3
 800941a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800941c:	230a      	movs	r3, #10
 800941e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009420:	f107 0314 	add.w	r3, r7, #20
 8009424:	4619      	mov	r1, r3
 8009426:	4812      	ldr	r0, [pc, #72]	@ (8009470 <HAL_PCD_MspInit+0xa4>)
 8009428:	f7f8 ff46 	bl	80022b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800942c:	4b0f      	ldr	r3, [pc, #60]	@ (800946c <HAL_PCD_MspInit+0xa0>)
 800942e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009430:	4a0e      	ldr	r2, [pc, #56]	@ (800946c <HAL_PCD_MspInit+0xa0>)
 8009432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009436:	6353      	str	r3, [r2, #52]	@ 0x34
 8009438:	2300      	movs	r3, #0
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	4b0b      	ldr	r3, [pc, #44]	@ (800946c <HAL_PCD_MspInit+0xa0>)
 800943e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009440:	4a0a      	ldr	r2, [pc, #40]	@ (800946c <HAL_PCD_MspInit+0xa0>)
 8009442:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009446:	6453      	str	r3, [r2, #68]	@ 0x44
 8009448:	4b08      	ldr	r3, [pc, #32]	@ (800946c <HAL_PCD_MspInit+0xa0>)
 800944a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800944c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009450:	60fb      	str	r3, [r7, #12]
 8009452:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009454:	2200      	movs	r2, #0
 8009456:	2100      	movs	r1, #0
 8009458:	2043      	movs	r0, #67	@ 0x43
 800945a:	f7f8 fb58 	bl	8001b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800945e:	2043      	movs	r0, #67	@ 0x43
 8009460:	f7f8 fb71 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009464:	bf00      	nop
 8009466:	3728      	adds	r7, #40	@ 0x28
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	40023800 	.word	0x40023800
 8009470:	40020000 	.word	0x40020000

08009474 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009488:	4619      	mov	r1, r3
 800948a:	4610      	mov	r0, r2
 800948c:	f7fe fb49 	bl	8007b22 <USBD_LL_SetupStage>
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	460b      	mov	r3, r1
 80094a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80094aa:	78fa      	ldrb	r2, [r7, #3]
 80094ac:	6879      	ldr	r1, [r7, #4]
 80094ae:	4613      	mov	r3, r2
 80094b0:	00db      	lsls	r3, r3, #3
 80094b2:	4413      	add	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	440b      	add	r3, r1
 80094b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	78fb      	ldrb	r3, [r7, #3]
 80094c0:	4619      	mov	r1, r3
 80094c2:	f7fe fb83 	bl	8007bcc <USBD_LL_DataOutStage>
}
 80094c6:	bf00      	nop
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b082      	sub	sp, #8
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	460b      	mov	r3, r1
 80094d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80094e0:	78fa      	ldrb	r2, [r7, #3]
 80094e2:	6879      	ldr	r1, [r7, #4]
 80094e4:	4613      	mov	r3, r2
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	4413      	add	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	3320      	adds	r3, #32
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	78fb      	ldrb	r3, [r7, #3]
 80094f4:	4619      	mov	r1, r3
 80094f6:	f7fe fc1c 	bl	8007d32 <USBD_LL_DataInStage>
}
 80094fa:	bf00      	nop
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b082      	sub	sp, #8
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009510:	4618      	mov	r0, r3
 8009512:	f7fe fd56 	bl	8007fc2 <USBD_LL_SOF>
}
 8009516:	bf00      	nop
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009526:	2301      	movs	r3, #1
 8009528:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	79db      	ldrb	r3, [r3, #7]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d102      	bne.n	8009538 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009532:	2300      	movs	r3, #0
 8009534:	73fb      	strb	r3, [r7, #15]
 8009536:	e008      	b.n	800954a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	79db      	ldrb	r3, [r3, #7]
 800953c:	2b02      	cmp	r3, #2
 800953e:	d102      	bne.n	8009546 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009540:	2301      	movs	r3, #1
 8009542:	73fb      	strb	r3, [r7, #15]
 8009544:	e001      	b.n	800954a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009546:	f7f7 fe07 	bl	8001158 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009550:	7bfa      	ldrb	r2, [r7, #15]
 8009552:	4611      	mov	r1, r2
 8009554:	4618      	mov	r0, r3
 8009556:	f7fe fcf0 	bl	8007f3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009560:	4618      	mov	r0, r3
 8009562:	f7fe fc98 	bl	8007e96 <USBD_LL_Reset>
}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe fceb 	bl	8007f5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	6812      	ldr	r2, [r2, #0]
 8009592:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009596:	f043 0301 	orr.w	r3, r3, #1
 800959a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	7adb      	ldrb	r3, [r3, #11]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d005      	beq.n	80095b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095a4:	4b04      	ldr	r3, [pc, #16]	@ (80095b8 <HAL_PCD_SuspendCallback+0x48>)
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	4a03      	ldr	r2, [pc, #12]	@ (80095b8 <HAL_PCD_SuspendCallback+0x48>)
 80095aa:	f043 0306 	orr.w	r3, r3, #6
 80095ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80095b0:	bf00      	nop
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	e000ed00 	.word	0xe000ed00

080095bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fe fce1 	bl	8007f92 <USBD_LL_Resume>
}
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095ea:	78fa      	ldrb	r2, [r7, #3]
 80095ec:	4611      	mov	r1, r2
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fe fd39 	bl	8008066 <USBD_LL_IsoOUTIncomplete>
}
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800960e:	78fa      	ldrb	r2, [r7, #3]
 8009610:	4611      	mov	r1, r2
 8009612:	4618      	mov	r0, r3
 8009614:	f7fe fcf5 	bl	8008002 <USBD_LL_IsoINIncomplete>
}
 8009618:	bf00      	nop
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe fd4b 	bl	80080ca <USBD_LL_DevConnected>
}
 8009634:	bf00      	nop
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800964a:	4618      	mov	r0, r3
 800964c:	f7fe fd48 	bl	80080e0 <USBD_LL_DevDisconnected>
}
 8009650:	bf00      	nop
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d13c      	bne.n	80096e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009668:	4a20      	ldr	r2, [pc, #128]	@ (80096ec <USBD_LL_Init+0x94>)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a1e      	ldr	r2, [pc, #120]	@ (80096ec <USBD_LL_Init+0x94>)
 8009674:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009678:	4b1c      	ldr	r3, [pc, #112]	@ (80096ec <USBD_LL_Init+0x94>)
 800967a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800967e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009680:	4b1a      	ldr	r3, [pc, #104]	@ (80096ec <USBD_LL_Init+0x94>)
 8009682:	2204      	movs	r2, #4
 8009684:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009686:	4b19      	ldr	r3, [pc, #100]	@ (80096ec <USBD_LL_Init+0x94>)
 8009688:	2202      	movs	r2, #2
 800968a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800968c:	4b17      	ldr	r3, [pc, #92]	@ (80096ec <USBD_LL_Init+0x94>)
 800968e:	2200      	movs	r2, #0
 8009690:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009692:	4b16      	ldr	r3, [pc, #88]	@ (80096ec <USBD_LL_Init+0x94>)
 8009694:	2202      	movs	r2, #2
 8009696:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009698:	4b14      	ldr	r3, [pc, #80]	@ (80096ec <USBD_LL_Init+0x94>)
 800969a:	2200      	movs	r2, #0
 800969c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800969e:	4b13      	ldr	r3, [pc, #76]	@ (80096ec <USBD_LL_Init+0x94>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80096a4:	4b11      	ldr	r3, [pc, #68]	@ (80096ec <USBD_LL_Init+0x94>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80096aa:	4b10      	ldr	r3, [pc, #64]	@ (80096ec <USBD_LL_Init+0x94>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80096b0:	4b0e      	ldr	r3, [pc, #56]	@ (80096ec <USBD_LL_Init+0x94>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80096b6:	480d      	ldr	r0, [pc, #52]	@ (80096ec <USBD_LL_Init+0x94>)
 80096b8:	f7fa fa92 	bl	8003be0 <HAL_PCD_Init>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80096c2:	f7f7 fd49 	bl	8001158 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80096c6:	2180      	movs	r1, #128	@ 0x80
 80096c8:	4808      	ldr	r0, [pc, #32]	@ (80096ec <USBD_LL_Init+0x94>)
 80096ca:	f7fb fcbe 	bl	800504a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80096ce:	2240      	movs	r2, #64	@ 0x40
 80096d0:	2100      	movs	r1, #0
 80096d2:	4806      	ldr	r0, [pc, #24]	@ (80096ec <USBD_LL_Init+0x94>)
 80096d4:	f7fb fc72 	bl	8004fbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80096d8:	2280      	movs	r2, #128	@ 0x80
 80096da:	2101      	movs	r1, #1
 80096dc:	4803      	ldr	r0, [pc, #12]	@ (80096ec <USBD_LL_Init+0x94>)
 80096de:	f7fb fc6d 	bl	8004fbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	20001940 	.word	0x20001940

080096f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009706:	4618      	mov	r0, r3
 8009708:	f7fa fb79 	bl	8003dfe <HAL_PCD_Start>
 800970c:	4603      	mov	r3, r0
 800970e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009710:	7bfb      	ldrb	r3, [r7, #15]
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f942 	bl	800999c <USBD_Get_USB_Status>
 8009718:	4603      	mov	r3, r0
 800971a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800971c:	7bbb      	ldrb	r3, [r7, #14]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	4608      	mov	r0, r1
 8009730:	4611      	mov	r1, r2
 8009732:	461a      	mov	r2, r3
 8009734:	4603      	mov	r3, r0
 8009736:	70fb      	strb	r3, [r7, #3]
 8009738:	460b      	mov	r3, r1
 800973a:	70bb      	strb	r3, [r7, #2]
 800973c:	4613      	mov	r3, r2
 800973e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800974e:	78bb      	ldrb	r3, [r7, #2]
 8009750:	883a      	ldrh	r2, [r7, #0]
 8009752:	78f9      	ldrb	r1, [r7, #3]
 8009754:	f7fb f84d 	bl	80047f2 <HAL_PCD_EP_Open>
 8009758:	4603      	mov	r3, r0
 800975a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 f91c 	bl	800999c <USBD_Get_USB_Status>
 8009764:	4603      	mov	r3, r0
 8009766:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009768:	7bbb      	ldrb	r3, [r7, #14]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b084      	sub	sp, #16
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	460b      	mov	r3, r1
 800977c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800978c:	78fa      	ldrb	r2, [r7, #3]
 800978e:	4611      	mov	r1, r2
 8009790:	4618      	mov	r0, r3
 8009792:	f7fb f898 	bl	80048c6 <HAL_PCD_EP_Close>
 8009796:	4603      	mov	r3, r0
 8009798:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	4618      	mov	r0, r3
 800979e:	f000 f8fd 	bl	800999c <USBD_Get_USB_Status>
 80097a2:	4603      	mov	r3, r0
 80097a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097ca:	78fa      	ldrb	r2, [r7, #3]
 80097cc:	4611      	mov	r1, r2
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fb f950 	bl	8004a74 <HAL_PCD_EP_SetStall>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f8de 	bl	800999c <USBD_Get_USB_Status>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009808:	78fa      	ldrb	r2, [r7, #3]
 800980a:	4611      	mov	r1, r2
 800980c:	4618      	mov	r0, r3
 800980e:	f7fb f994 	bl	8004b3a <HAL_PCD_EP_ClrStall>
 8009812:	4603      	mov	r3, r0
 8009814:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	4618      	mov	r0, r3
 800981a:	f000 f8bf 	bl	800999c <USBD_Get_USB_Status>
 800981e:	4603      	mov	r3, r0
 8009820:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009822:	7bbb      	ldrb	r3, [r7, #14]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800983e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009844:	2b00      	cmp	r3, #0
 8009846:	da0b      	bge.n	8009860 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800984e:	68f9      	ldr	r1, [r7, #12]
 8009850:	4613      	mov	r3, r2
 8009852:	00db      	lsls	r3, r3, #3
 8009854:	4413      	add	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	440b      	add	r3, r1
 800985a:	3316      	adds	r3, #22
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	e00b      	b.n	8009878 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009866:	68f9      	ldr	r1, [r7, #12]
 8009868:	4613      	mov	r3, r2
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	4413      	add	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	440b      	add	r3, r1
 8009872:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009876:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009878:	4618      	mov	r0, r3
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800989e:	78fa      	ldrb	r2, [r7, #3]
 80098a0:	4611      	mov	r1, r2
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fa ff81 	bl	80047aa <HAL_PCD_SetAddress>
 80098a8:	4603      	mov	r3, r0
 80098aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 f874 	bl	800999c <USBD_Get_USB_Status>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b086      	sub	sp, #24
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	60f8      	str	r0, [r7, #12]
 80098ca:	607a      	str	r2, [r7, #4]
 80098cc:	603b      	str	r3, [r7, #0]
 80098ce:	460b      	mov	r3, r1
 80098d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80098e0:	7af9      	ldrb	r1, [r7, #11]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	f7fb f88b 	bl	8004a00 <HAL_PCD_EP_Transmit>
 80098ea:	4603      	mov	r3, r0
 80098ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 f853 	bl	800999c <USBD_Get_USB_Status>
 80098f6:	4603      	mov	r3, r0
 80098f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3718      	adds	r7, #24
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	607a      	str	r2, [r7, #4]
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	460b      	mov	r3, r1
 8009912:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009922:	7af9      	ldrb	r1, [r7, #11]
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	f7fb f817 	bl	800495a <HAL_PCD_EP_Receive>
 800992c:	4603      	mov	r3, r0
 800992e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009930:	7dfb      	ldrb	r3, [r7, #23]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 f832 	bl	800999c <USBD_Get_USB_Status>
 8009938:	4603      	mov	r3, r0
 800993a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800993c:	7dbb      	ldrb	r3, [r7, #22]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b082      	sub	sp, #8
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	460b      	mov	r3, r1
 8009950:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009958:	78fa      	ldrb	r2, [r7, #3]
 800995a:	4611      	mov	r1, r2
 800995c:	4618      	mov	r0, r3
 800995e:	f7fb f837 	bl	80049d0 <HAL_PCD_EP_GetRxCount>
 8009962:	4603      	mov	r3, r0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009974:	4b03      	ldr	r3, [pc, #12]	@ (8009984 <USBD_static_malloc+0x18>)
}
 8009976:	4618      	mov	r0, r3
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	20001e24 	.word	0x20001e24

08009988 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]

}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	2b03      	cmp	r3, #3
 80099ae:	d817      	bhi.n	80099e0 <USBD_Get_USB_Status+0x44>
 80099b0:	a201      	add	r2, pc, #4	@ (adr r2, 80099b8 <USBD_Get_USB_Status+0x1c>)
 80099b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b6:	bf00      	nop
 80099b8:	080099c9 	.word	0x080099c9
 80099bc:	080099cf 	.word	0x080099cf
 80099c0:	080099d5 	.word	0x080099d5
 80099c4:	080099db 	.word	0x080099db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	73fb      	strb	r3, [r7, #15]
    break;
 80099cc:	e00b      	b.n	80099e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80099ce:	2303      	movs	r3, #3
 80099d0:	73fb      	strb	r3, [r7, #15]
    break;
 80099d2:	e008      	b.n	80099e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80099d4:	2301      	movs	r3, #1
 80099d6:	73fb      	strb	r3, [r7, #15]
    break;
 80099d8:	e005      	b.n	80099e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099da:	2303      	movs	r3, #3
 80099dc:	73fb      	strb	r3, [r7, #15]
    break;
 80099de:	e002      	b.n	80099e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099e0:	2303      	movs	r3, #3
 80099e2:	73fb      	strb	r3, [r7, #15]
    break;
 80099e4:	bf00      	nop
  }
  return usb_status;
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <__cvt>:
 80099f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099f8:	ec57 6b10 	vmov	r6, r7, d0
 80099fc:	2f00      	cmp	r7, #0
 80099fe:	460c      	mov	r4, r1
 8009a00:	4619      	mov	r1, r3
 8009a02:	463b      	mov	r3, r7
 8009a04:	bfbb      	ittet	lt
 8009a06:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009a0a:	461f      	movlt	r7, r3
 8009a0c:	2300      	movge	r3, #0
 8009a0e:	232d      	movlt	r3, #45	@ 0x2d
 8009a10:	700b      	strb	r3, [r1, #0]
 8009a12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a14:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009a18:	4691      	mov	r9, r2
 8009a1a:	f023 0820 	bic.w	r8, r3, #32
 8009a1e:	bfbc      	itt	lt
 8009a20:	4632      	movlt	r2, r6
 8009a22:	4616      	movlt	r6, r2
 8009a24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a28:	d005      	beq.n	8009a36 <__cvt+0x42>
 8009a2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009a2e:	d100      	bne.n	8009a32 <__cvt+0x3e>
 8009a30:	3401      	adds	r4, #1
 8009a32:	2102      	movs	r1, #2
 8009a34:	e000      	b.n	8009a38 <__cvt+0x44>
 8009a36:	2103      	movs	r1, #3
 8009a38:	ab03      	add	r3, sp, #12
 8009a3a:	9301      	str	r3, [sp, #4]
 8009a3c:	ab02      	add	r3, sp, #8
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	ec47 6b10 	vmov	d0, r6, r7
 8009a44:	4653      	mov	r3, sl
 8009a46:	4622      	mov	r2, r4
 8009a48:	f000 fe6e 	bl	800a728 <_dtoa_r>
 8009a4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a50:	4605      	mov	r5, r0
 8009a52:	d119      	bne.n	8009a88 <__cvt+0x94>
 8009a54:	f019 0f01 	tst.w	r9, #1
 8009a58:	d00e      	beq.n	8009a78 <__cvt+0x84>
 8009a5a:	eb00 0904 	add.w	r9, r0, r4
 8009a5e:	2200      	movs	r2, #0
 8009a60:	2300      	movs	r3, #0
 8009a62:	4630      	mov	r0, r6
 8009a64:	4639      	mov	r1, r7
 8009a66:	f7f7 f82f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a6a:	b108      	cbz	r0, 8009a70 <__cvt+0x7c>
 8009a6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a70:	2230      	movs	r2, #48	@ 0x30
 8009a72:	9b03      	ldr	r3, [sp, #12]
 8009a74:	454b      	cmp	r3, r9
 8009a76:	d31e      	bcc.n	8009ab6 <__cvt+0xc2>
 8009a78:	9b03      	ldr	r3, [sp, #12]
 8009a7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a7c:	1b5b      	subs	r3, r3, r5
 8009a7e:	4628      	mov	r0, r5
 8009a80:	6013      	str	r3, [r2, #0]
 8009a82:	b004      	add	sp, #16
 8009a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a8c:	eb00 0904 	add.w	r9, r0, r4
 8009a90:	d1e5      	bne.n	8009a5e <__cvt+0x6a>
 8009a92:	7803      	ldrb	r3, [r0, #0]
 8009a94:	2b30      	cmp	r3, #48	@ 0x30
 8009a96:	d10a      	bne.n	8009aae <__cvt+0xba>
 8009a98:	2200      	movs	r2, #0
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	4639      	mov	r1, r7
 8009aa0:	f7f7 f812 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aa4:	b918      	cbnz	r0, 8009aae <__cvt+0xba>
 8009aa6:	f1c4 0401 	rsb	r4, r4, #1
 8009aaa:	f8ca 4000 	str.w	r4, [sl]
 8009aae:	f8da 3000 	ldr.w	r3, [sl]
 8009ab2:	4499      	add	r9, r3
 8009ab4:	e7d3      	b.n	8009a5e <__cvt+0x6a>
 8009ab6:	1c59      	adds	r1, r3, #1
 8009ab8:	9103      	str	r1, [sp, #12]
 8009aba:	701a      	strb	r2, [r3, #0]
 8009abc:	e7d9      	b.n	8009a72 <__cvt+0x7e>

08009abe <__exponent>:
 8009abe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ac0:	2900      	cmp	r1, #0
 8009ac2:	bfba      	itte	lt
 8009ac4:	4249      	neglt	r1, r1
 8009ac6:	232d      	movlt	r3, #45	@ 0x2d
 8009ac8:	232b      	movge	r3, #43	@ 0x2b
 8009aca:	2909      	cmp	r1, #9
 8009acc:	7002      	strb	r2, [r0, #0]
 8009ace:	7043      	strb	r3, [r0, #1]
 8009ad0:	dd29      	ble.n	8009b26 <__exponent+0x68>
 8009ad2:	f10d 0307 	add.w	r3, sp, #7
 8009ad6:	461d      	mov	r5, r3
 8009ad8:	270a      	movs	r7, #10
 8009ada:	461a      	mov	r2, r3
 8009adc:	fbb1 f6f7 	udiv	r6, r1, r7
 8009ae0:	fb07 1416 	mls	r4, r7, r6, r1
 8009ae4:	3430      	adds	r4, #48	@ 0x30
 8009ae6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009aea:	460c      	mov	r4, r1
 8009aec:	2c63      	cmp	r4, #99	@ 0x63
 8009aee:	f103 33ff 	add.w	r3, r3, #4294967295
 8009af2:	4631      	mov	r1, r6
 8009af4:	dcf1      	bgt.n	8009ada <__exponent+0x1c>
 8009af6:	3130      	adds	r1, #48	@ 0x30
 8009af8:	1e94      	subs	r4, r2, #2
 8009afa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009afe:	1c41      	adds	r1, r0, #1
 8009b00:	4623      	mov	r3, r4
 8009b02:	42ab      	cmp	r3, r5
 8009b04:	d30a      	bcc.n	8009b1c <__exponent+0x5e>
 8009b06:	f10d 0309 	add.w	r3, sp, #9
 8009b0a:	1a9b      	subs	r3, r3, r2
 8009b0c:	42ac      	cmp	r4, r5
 8009b0e:	bf88      	it	hi
 8009b10:	2300      	movhi	r3, #0
 8009b12:	3302      	adds	r3, #2
 8009b14:	4403      	add	r3, r0
 8009b16:	1a18      	subs	r0, r3, r0
 8009b18:	b003      	add	sp, #12
 8009b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b1c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b20:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b24:	e7ed      	b.n	8009b02 <__exponent+0x44>
 8009b26:	2330      	movs	r3, #48	@ 0x30
 8009b28:	3130      	adds	r1, #48	@ 0x30
 8009b2a:	7083      	strb	r3, [r0, #2]
 8009b2c:	70c1      	strb	r1, [r0, #3]
 8009b2e:	1d03      	adds	r3, r0, #4
 8009b30:	e7f1      	b.n	8009b16 <__exponent+0x58>
	...

08009b34 <_printf_float>:
 8009b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b38:	b08d      	sub	sp, #52	@ 0x34
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009b40:	4616      	mov	r6, r2
 8009b42:	461f      	mov	r7, r3
 8009b44:	4605      	mov	r5, r0
 8009b46:	f000 fcef 	bl	800a528 <_localeconv_r>
 8009b4a:	6803      	ldr	r3, [r0, #0]
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7f6 fb8e 	bl	8000270 <strlen>
 8009b54:	2300      	movs	r3, #0
 8009b56:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b58:	f8d8 3000 	ldr.w	r3, [r8]
 8009b5c:	9005      	str	r0, [sp, #20]
 8009b5e:	3307      	adds	r3, #7
 8009b60:	f023 0307 	bic.w	r3, r3, #7
 8009b64:	f103 0208 	add.w	r2, r3, #8
 8009b68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b6c:	f8d4 b000 	ldr.w	fp, [r4]
 8009b70:	f8c8 2000 	str.w	r2, [r8]
 8009b74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b7c:	9307      	str	r3, [sp, #28]
 8009b7e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b8a:	4b9c      	ldr	r3, [pc, #624]	@ (8009dfc <_printf_float+0x2c8>)
 8009b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b90:	f7f6 ffcc 	bl	8000b2c <__aeabi_dcmpun>
 8009b94:	bb70      	cbnz	r0, 8009bf4 <_printf_float+0xc0>
 8009b96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b9a:	4b98      	ldr	r3, [pc, #608]	@ (8009dfc <_printf_float+0x2c8>)
 8009b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba0:	f7f6 ffa6 	bl	8000af0 <__aeabi_dcmple>
 8009ba4:	bb30      	cbnz	r0, 8009bf4 <_printf_float+0xc0>
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4640      	mov	r0, r8
 8009bac:	4649      	mov	r1, r9
 8009bae:	f7f6 ff95 	bl	8000adc <__aeabi_dcmplt>
 8009bb2:	b110      	cbz	r0, 8009bba <_printf_float+0x86>
 8009bb4:	232d      	movs	r3, #45	@ 0x2d
 8009bb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bba:	4a91      	ldr	r2, [pc, #580]	@ (8009e00 <_printf_float+0x2cc>)
 8009bbc:	4b91      	ldr	r3, [pc, #580]	@ (8009e04 <_printf_float+0x2d0>)
 8009bbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009bc2:	bf94      	ite	ls
 8009bc4:	4690      	movls	r8, r2
 8009bc6:	4698      	movhi	r8, r3
 8009bc8:	2303      	movs	r3, #3
 8009bca:	6123      	str	r3, [r4, #16]
 8009bcc:	f02b 0304 	bic.w	r3, fp, #4
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	f04f 0900 	mov.w	r9, #0
 8009bd6:	9700      	str	r7, [sp, #0]
 8009bd8:	4633      	mov	r3, r6
 8009bda:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4628      	mov	r0, r5
 8009be0:	f000 f9d2 	bl	8009f88 <_printf_common>
 8009be4:	3001      	adds	r0, #1
 8009be6:	f040 808d 	bne.w	8009d04 <_printf_float+0x1d0>
 8009bea:	f04f 30ff 	mov.w	r0, #4294967295
 8009bee:	b00d      	add	sp, #52	@ 0x34
 8009bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf4:	4642      	mov	r2, r8
 8009bf6:	464b      	mov	r3, r9
 8009bf8:	4640      	mov	r0, r8
 8009bfa:	4649      	mov	r1, r9
 8009bfc:	f7f6 ff96 	bl	8000b2c <__aeabi_dcmpun>
 8009c00:	b140      	cbz	r0, 8009c14 <_printf_float+0xe0>
 8009c02:	464b      	mov	r3, r9
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	bfbc      	itt	lt
 8009c08:	232d      	movlt	r3, #45	@ 0x2d
 8009c0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009c0e:	4a7e      	ldr	r2, [pc, #504]	@ (8009e08 <_printf_float+0x2d4>)
 8009c10:	4b7e      	ldr	r3, [pc, #504]	@ (8009e0c <_printf_float+0x2d8>)
 8009c12:	e7d4      	b.n	8009bbe <_printf_float+0x8a>
 8009c14:	6863      	ldr	r3, [r4, #4]
 8009c16:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009c1a:	9206      	str	r2, [sp, #24]
 8009c1c:	1c5a      	adds	r2, r3, #1
 8009c1e:	d13b      	bne.n	8009c98 <_printf_float+0x164>
 8009c20:	2306      	movs	r3, #6
 8009c22:	6063      	str	r3, [r4, #4]
 8009c24:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009c28:	2300      	movs	r3, #0
 8009c2a:	6022      	str	r2, [r4, #0]
 8009c2c:	9303      	str	r3, [sp, #12]
 8009c2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c30:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009c34:	ab09      	add	r3, sp, #36	@ 0x24
 8009c36:	9300      	str	r3, [sp, #0]
 8009c38:	6861      	ldr	r1, [r4, #4]
 8009c3a:	ec49 8b10 	vmov	d0, r8, r9
 8009c3e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009c42:	4628      	mov	r0, r5
 8009c44:	f7ff fed6 	bl	80099f4 <__cvt>
 8009c48:	9b06      	ldr	r3, [sp, #24]
 8009c4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c4c:	2b47      	cmp	r3, #71	@ 0x47
 8009c4e:	4680      	mov	r8, r0
 8009c50:	d129      	bne.n	8009ca6 <_printf_float+0x172>
 8009c52:	1cc8      	adds	r0, r1, #3
 8009c54:	db02      	blt.n	8009c5c <_printf_float+0x128>
 8009c56:	6863      	ldr	r3, [r4, #4]
 8009c58:	4299      	cmp	r1, r3
 8009c5a:	dd41      	ble.n	8009ce0 <_printf_float+0x1ac>
 8009c5c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c60:	fa5f fa8a 	uxtb.w	sl, sl
 8009c64:	3901      	subs	r1, #1
 8009c66:	4652      	mov	r2, sl
 8009c68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c6e:	f7ff ff26 	bl	8009abe <__exponent>
 8009c72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c74:	1813      	adds	r3, r2, r0
 8009c76:	2a01      	cmp	r2, #1
 8009c78:	4681      	mov	r9, r0
 8009c7a:	6123      	str	r3, [r4, #16]
 8009c7c:	dc02      	bgt.n	8009c84 <_printf_float+0x150>
 8009c7e:	6822      	ldr	r2, [r4, #0]
 8009c80:	07d2      	lsls	r2, r2, #31
 8009c82:	d501      	bpl.n	8009c88 <_printf_float+0x154>
 8009c84:	3301      	adds	r3, #1
 8009c86:	6123      	str	r3, [r4, #16]
 8009c88:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d0a2      	beq.n	8009bd6 <_printf_float+0xa2>
 8009c90:	232d      	movs	r3, #45	@ 0x2d
 8009c92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c96:	e79e      	b.n	8009bd6 <_printf_float+0xa2>
 8009c98:	9a06      	ldr	r2, [sp, #24]
 8009c9a:	2a47      	cmp	r2, #71	@ 0x47
 8009c9c:	d1c2      	bne.n	8009c24 <_printf_float+0xf0>
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1c0      	bne.n	8009c24 <_printf_float+0xf0>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e7bd      	b.n	8009c22 <_printf_float+0xee>
 8009ca6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009caa:	d9db      	bls.n	8009c64 <_printf_float+0x130>
 8009cac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009cb0:	d118      	bne.n	8009ce4 <_printf_float+0x1b0>
 8009cb2:	2900      	cmp	r1, #0
 8009cb4:	6863      	ldr	r3, [r4, #4]
 8009cb6:	dd0b      	ble.n	8009cd0 <_printf_float+0x19c>
 8009cb8:	6121      	str	r1, [r4, #16]
 8009cba:	b913      	cbnz	r3, 8009cc2 <_printf_float+0x18e>
 8009cbc:	6822      	ldr	r2, [r4, #0]
 8009cbe:	07d0      	lsls	r0, r2, #31
 8009cc0:	d502      	bpl.n	8009cc8 <_printf_float+0x194>
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	440b      	add	r3, r1
 8009cc6:	6123      	str	r3, [r4, #16]
 8009cc8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009cca:	f04f 0900 	mov.w	r9, #0
 8009cce:	e7db      	b.n	8009c88 <_printf_float+0x154>
 8009cd0:	b913      	cbnz	r3, 8009cd8 <_printf_float+0x1a4>
 8009cd2:	6822      	ldr	r2, [r4, #0]
 8009cd4:	07d2      	lsls	r2, r2, #31
 8009cd6:	d501      	bpl.n	8009cdc <_printf_float+0x1a8>
 8009cd8:	3302      	adds	r3, #2
 8009cda:	e7f4      	b.n	8009cc6 <_printf_float+0x192>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e7f2      	b.n	8009cc6 <_printf_float+0x192>
 8009ce0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009ce4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ce6:	4299      	cmp	r1, r3
 8009ce8:	db05      	blt.n	8009cf6 <_printf_float+0x1c2>
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	6121      	str	r1, [r4, #16]
 8009cee:	07d8      	lsls	r0, r3, #31
 8009cf0:	d5ea      	bpl.n	8009cc8 <_printf_float+0x194>
 8009cf2:	1c4b      	adds	r3, r1, #1
 8009cf4:	e7e7      	b.n	8009cc6 <_printf_float+0x192>
 8009cf6:	2900      	cmp	r1, #0
 8009cf8:	bfd4      	ite	le
 8009cfa:	f1c1 0202 	rsble	r2, r1, #2
 8009cfe:	2201      	movgt	r2, #1
 8009d00:	4413      	add	r3, r2
 8009d02:	e7e0      	b.n	8009cc6 <_printf_float+0x192>
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	055a      	lsls	r2, r3, #21
 8009d08:	d407      	bmi.n	8009d1a <_printf_float+0x1e6>
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	4631      	mov	r1, r6
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b8      	blx	r7
 8009d14:	3001      	adds	r0, #1
 8009d16:	d12b      	bne.n	8009d70 <_printf_float+0x23c>
 8009d18:	e767      	b.n	8009bea <_printf_float+0xb6>
 8009d1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d1e:	f240 80dd 	bls.w	8009edc <_printf_float+0x3a8>
 8009d22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d26:	2200      	movs	r2, #0
 8009d28:	2300      	movs	r3, #0
 8009d2a:	f7f6 fecd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d033      	beq.n	8009d9a <_printf_float+0x266>
 8009d32:	4a37      	ldr	r2, [pc, #220]	@ (8009e10 <_printf_float+0x2dc>)
 8009d34:	2301      	movs	r3, #1
 8009d36:	4631      	mov	r1, r6
 8009d38:	4628      	mov	r0, r5
 8009d3a:	47b8      	blx	r7
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	f43f af54 	beq.w	8009bea <_printf_float+0xb6>
 8009d42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009d46:	4543      	cmp	r3, r8
 8009d48:	db02      	blt.n	8009d50 <_printf_float+0x21c>
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	07d8      	lsls	r0, r3, #31
 8009d4e:	d50f      	bpl.n	8009d70 <_printf_float+0x23c>
 8009d50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	47b8      	blx	r7
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f43f af45 	beq.w	8009bea <_printf_float+0xb6>
 8009d60:	f04f 0900 	mov.w	r9, #0
 8009d64:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d68:	f104 0a1a 	add.w	sl, r4, #26
 8009d6c:	45c8      	cmp	r8, r9
 8009d6e:	dc09      	bgt.n	8009d84 <_printf_float+0x250>
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	079b      	lsls	r3, r3, #30
 8009d74:	f100 8103 	bmi.w	8009f7e <_printf_float+0x44a>
 8009d78:	68e0      	ldr	r0, [r4, #12]
 8009d7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d7c:	4298      	cmp	r0, r3
 8009d7e:	bfb8      	it	lt
 8009d80:	4618      	movlt	r0, r3
 8009d82:	e734      	b.n	8009bee <_printf_float+0xba>
 8009d84:	2301      	movs	r3, #1
 8009d86:	4652      	mov	r2, sl
 8009d88:	4631      	mov	r1, r6
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	47b8      	blx	r7
 8009d8e:	3001      	adds	r0, #1
 8009d90:	f43f af2b 	beq.w	8009bea <_printf_float+0xb6>
 8009d94:	f109 0901 	add.w	r9, r9, #1
 8009d98:	e7e8      	b.n	8009d6c <_printf_float+0x238>
 8009d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dc39      	bgt.n	8009e14 <_printf_float+0x2e0>
 8009da0:	4a1b      	ldr	r2, [pc, #108]	@ (8009e10 <_printf_float+0x2dc>)
 8009da2:	2301      	movs	r3, #1
 8009da4:	4631      	mov	r1, r6
 8009da6:	4628      	mov	r0, r5
 8009da8:	47b8      	blx	r7
 8009daa:	3001      	adds	r0, #1
 8009dac:	f43f af1d 	beq.w	8009bea <_printf_float+0xb6>
 8009db0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009db4:	ea59 0303 	orrs.w	r3, r9, r3
 8009db8:	d102      	bne.n	8009dc0 <_printf_float+0x28c>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	07d9      	lsls	r1, r3, #31
 8009dbe:	d5d7      	bpl.n	8009d70 <_printf_float+0x23c>
 8009dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	47b8      	blx	r7
 8009dca:	3001      	adds	r0, #1
 8009dcc:	f43f af0d 	beq.w	8009bea <_printf_float+0xb6>
 8009dd0:	f04f 0a00 	mov.w	sl, #0
 8009dd4:	f104 0b1a 	add.w	fp, r4, #26
 8009dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dda:	425b      	negs	r3, r3
 8009ddc:	4553      	cmp	r3, sl
 8009dde:	dc01      	bgt.n	8009de4 <_printf_float+0x2b0>
 8009de0:	464b      	mov	r3, r9
 8009de2:	e793      	b.n	8009d0c <_printf_float+0x1d8>
 8009de4:	2301      	movs	r3, #1
 8009de6:	465a      	mov	r2, fp
 8009de8:	4631      	mov	r1, r6
 8009dea:	4628      	mov	r0, r5
 8009dec:	47b8      	blx	r7
 8009dee:	3001      	adds	r0, #1
 8009df0:	f43f aefb 	beq.w	8009bea <_printf_float+0xb6>
 8009df4:	f10a 0a01 	add.w	sl, sl, #1
 8009df8:	e7ee      	b.n	8009dd8 <_printf_float+0x2a4>
 8009dfa:	bf00      	nop
 8009dfc:	7fefffff 	.word	0x7fefffff
 8009e00:	0800c760 	.word	0x0800c760
 8009e04:	0800c764 	.word	0x0800c764
 8009e08:	0800c768 	.word	0x0800c768
 8009e0c:	0800c76c 	.word	0x0800c76c
 8009e10:	0800c770 	.word	0x0800c770
 8009e14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e1a:	4553      	cmp	r3, sl
 8009e1c:	bfa8      	it	ge
 8009e1e:	4653      	movge	r3, sl
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	4699      	mov	r9, r3
 8009e24:	dc36      	bgt.n	8009e94 <_printf_float+0x360>
 8009e26:	f04f 0b00 	mov.w	fp, #0
 8009e2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e2e:	f104 021a 	add.w	r2, r4, #26
 8009e32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e34:	9306      	str	r3, [sp, #24]
 8009e36:	eba3 0309 	sub.w	r3, r3, r9
 8009e3a:	455b      	cmp	r3, fp
 8009e3c:	dc31      	bgt.n	8009ea2 <_printf_float+0x36e>
 8009e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e40:	459a      	cmp	sl, r3
 8009e42:	dc3a      	bgt.n	8009eba <_printf_float+0x386>
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	07da      	lsls	r2, r3, #31
 8009e48:	d437      	bmi.n	8009eba <_printf_float+0x386>
 8009e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e4c:	ebaa 0903 	sub.w	r9, sl, r3
 8009e50:	9b06      	ldr	r3, [sp, #24]
 8009e52:	ebaa 0303 	sub.w	r3, sl, r3
 8009e56:	4599      	cmp	r9, r3
 8009e58:	bfa8      	it	ge
 8009e5a:	4699      	movge	r9, r3
 8009e5c:	f1b9 0f00 	cmp.w	r9, #0
 8009e60:	dc33      	bgt.n	8009eca <_printf_float+0x396>
 8009e62:	f04f 0800 	mov.w	r8, #0
 8009e66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e6a:	f104 0b1a 	add.w	fp, r4, #26
 8009e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e70:	ebaa 0303 	sub.w	r3, sl, r3
 8009e74:	eba3 0309 	sub.w	r3, r3, r9
 8009e78:	4543      	cmp	r3, r8
 8009e7a:	f77f af79 	ble.w	8009d70 <_printf_float+0x23c>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	465a      	mov	r2, fp
 8009e82:	4631      	mov	r1, r6
 8009e84:	4628      	mov	r0, r5
 8009e86:	47b8      	blx	r7
 8009e88:	3001      	adds	r0, #1
 8009e8a:	f43f aeae 	beq.w	8009bea <_printf_float+0xb6>
 8009e8e:	f108 0801 	add.w	r8, r8, #1
 8009e92:	e7ec      	b.n	8009e6e <_printf_float+0x33a>
 8009e94:	4642      	mov	r2, r8
 8009e96:	4631      	mov	r1, r6
 8009e98:	4628      	mov	r0, r5
 8009e9a:	47b8      	blx	r7
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	d1c2      	bne.n	8009e26 <_printf_float+0x2f2>
 8009ea0:	e6a3      	b.n	8009bea <_printf_float+0xb6>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	9206      	str	r2, [sp, #24]
 8009eaa:	47b8      	blx	r7
 8009eac:	3001      	adds	r0, #1
 8009eae:	f43f ae9c 	beq.w	8009bea <_printf_float+0xb6>
 8009eb2:	9a06      	ldr	r2, [sp, #24]
 8009eb4:	f10b 0b01 	add.w	fp, fp, #1
 8009eb8:	e7bb      	b.n	8009e32 <_printf_float+0x2fe>
 8009eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	47b8      	blx	r7
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	d1c0      	bne.n	8009e4a <_printf_float+0x316>
 8009ec8:	e68f      	b.n	8009bea <_printf_float+0xb6>
 8009eca:	9a06      	ldr	r2, [sp, #24]
 8009ecc:	464b      	mov	r3, r9
 8009ece:	4442      	add	r2, r8
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	47b8      	blx	r7
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	d1c3      	bne.n	8009e62 <_printf_float+0x32e>
 8009eda:	e686      	b.n	8009bea <_printf_float+0xb6>
 8009edc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ee0:	f1ba 0f01 	cmp.w	sl, #1
 8009ee4:	dc01      	bgt.n	8009eea <_printf_float+0x3b6>
 8009ee6:	07db      	lsls	r3, r3, #31
 8009ee8:	d536      	bpl.n	8009f58 <_printf_float+0x424>
 8009eea:	2301      	movs	r3, #1
 8009eec:	4642      	mov	r2, r8
 8009eee:	4631      	mov	r1, r6
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	47b8      	blx	r7
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	f43f ae78 	beq.w	8009bea <_printf_float+0xb6>
 8009efa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009efe:	4631      	mov	r1, r6
 8009f00:	4628      	mov	r0, r5
 8009f02:	47b8      	blx	r7
 8009f04:	3001      	adds	r0, #1
 8009f06:	f43f ae70 	beq.w	8009bea <_printf_float+0xb6>
 8009f0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f0e:	2200      	movs	r2, #0
 8009f10:	2300      	movs	r3, #0
 8009f12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f16:	f7f6 fdd7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f1a:	b9c0      	cbnz	r0, 8009f4e <_printf_float+0x41a>
 8009f1c:	4653      	mov	r3, sl
 8009f1e:	f108 0201 	add.w	r2, r8, #1
 8009f22:	4631      	mov	r1, r6
 8009f24:	4628      	mov	r0, r5
 8009f26:	47b8      	blx	r7
 8009f28:	3001      	adds	r0, #1
 8009f2a:	d10c      	bne.n	8009f46 <_printf_float+0x412>
 8009f2c:	e65d      	b.n	8009bea <_printf_float+0xb6>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	465a      	mov	r2, fp
 8009f32:	4631      	mov	r1, r6
 8009f34:	4628      	mov	r0, r5
 8009f36:	47b8      	blx	r7
 8009f38:	3001      	adds	r0, #1
 8009f3a:	f43f ae56 	beq.w	8009bea <_printf_float+0xb6>
 8009f3e:	f108 0801 	add.w	r8, r8, #1
 8009f42:	45d0      	cmp	r8, sl
 8009f44:	dbf3      	blt.n	8009f2e <_printf_float+0x3fa>
 8009f46:	464b      	mov	r3, r9
 8009f48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f4c:	e6df      	b.n	8009d0e <_printf_float+0x1da>
 8009f4e:	f04f 0800 	mov.w	r8, #0
 8009f52:	f104 0b1a 	add.w	fp, r4, #26
 8009f56:	e7f4      	b.n	8009f42 <_printf_float+0x40e>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	4642      	mov	r2, r8
 8009f5c:	e7e1      	b.n	8009f22 <_printf_float+0x3ee>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	464a      	mov	r2, r9
 8009f62:	4631      	mov	r1, r6
 8009f64:	4628      	mov	r0, r5
 8009f66:	47b8      	blx	r7
 8009f68:	3001      	adds	r0, #1
 8009f6a:	f43f ae3e 	beq.w	8009bea <_printf_float+0xb6>
 8009f6e:	f108 0801 	add.w	r8, r8, #1
 8009f72:	68e3      	ldr	r3, [r4, #12]
 8009f74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f76:	1a5b      	subs	r3, r3, r1
 8009f78:	4543      	cmp	r3, r8
 8009f7a:	dcf0      	bgt.n	8009f5e <_printf_float+0x42a>
 8009f7c:	e6fc      	b.n	8009d78 <_printf_float+0x244>
 8009f7e:	f04f 0800 	mov.w	r8, #0
 8009f82:	f104 0919 	add.w	r9, r4, #25
 8009f86:	e7f4      	b.n	8009f72 <_printf_float+0x43e>

08009f88 <_printf_common>:
 8009f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f8c:	4616      	mov	r6, r2
 8009f8e:	4698      	mov	r8, r3
 8009f90:	688a      	ldr	r2, [r1, #8]
 8009f92:	690b      	ldr	r3, [r1, #16]
 8009f94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	bfb8      	it	lt
 8009f9c:	4613      	movlt	r3, r2
 8009f9e:	6033      	str	r3, [r6, #0]
 8009fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009fa4:	4607      	mov	r7, r0
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	b10a      	cbz	r2, 8009fae <_printf_common+0x26>
 8009faa:	3301      	adds	r3, #1
 8009fac:	6033      	str	r3, [r6, #0]
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	0699      	lsls	r1, r3, #26
 8009fb2:	bf42      	ittt	mi
 8009fb4:	6833      	ldrmi	r3, [r6, #0]
 8009fb6:	3302      	addmi	r3, #2
 8009fb8:	6033      	strmi	r3, [r6, #0]
 8009fba:	6825      	ldr	r5, [r4, #0]
 8009fbc:	f015 0506 	ands.w	r5, r5, #6
 8009fc0:	d106      	bne.n	8009fd0 <_printf_common+0x48>
 8009fc2:	f104 0a19 	add.w	sl, r4, #25
 8009fc6:	68e3      	ldr	r3, [r4, #12]
 8009fc8:	6832      	ldr	r2, [r6, #0]
 8009fca:	1a9b      	subs	r3, r3, r2
 8009fcc:	42ab      	cmp	r3, r5
 8009fce:	dc26      	bgt.n	800a01e <_printf_common+0x96>
 8009fd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009fd4:	6822      	ldr	r2, [r4, #0]
 8009fd6:	3b00      	subs	r3, #0
 8009fd8:	bf18      	it	ne
 8009fda:	2301      	movne	r3, #1
 8009fdc:	0692      	lsls	r2, r2, #26
 8009fde:	d42b      	bmi.n	800a038 <_printf_common+0xb0>
 8009fe0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009fe4:	4641      	mov	r1, r8
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	47c8      	blx	r9
 8009fea:	3001      	adds	r0, #1
 8009fec:	d01e      	beq.n	800a02c <_printf_common+0xa4>
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	6922      	ldr	r2, [r4, #16]
 8009ff2:	f003 0306 	and.w	r3, r3, #6
 8009ff6:	2b04      	cmp	r3, #4
 8009ff8:	bf02      	ittt	eq
 8009ffa:	68e5      	ldreq	r5, [r4, #12]
 8009ffc:	6833      	ldreq	r3, [r6, #0]
 8009ffe:	1aed      	subeq	r5, r5, r3
 800a000:	68a3      	ldr	r3, [r4, #8]
 800a002:	bf0c      	ite	eq
 800a004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a008:	2500      	movne	r5, #0
 800a00a:	4293      	cmp	r3, r2
 800a00c:	bfc4      	itt	gt
 800a00e:	1a9b      	subgt	r3, r3, r2
 800a010:	18ed      	addgt	r5, r5, r3
 800a012:	2600      	movs	r6, #0
 800a014:	341a      	adds	r4, #26
 800a016:	42b5      	cmp	r5, r6
 800a018:	d11a      	bne.n	800a050 <_printf_common+0xc8>
 800a01a:	2000      	movs	r0, #0
 800a01c:	e008      	b.n	800a030 <_printf_common+0xa8>
 800a01e:	2301      	movs	r3, #1
 800a020:	4652      	mov	r2, sl
 800a022:	4641      	mov	r1, r8
 800a024:	4638      	mov	r0, r7
 800a026:	47c8      	blx	r9
 800a028:	3001      	adds	r0, #1
 800a02a:	d103      	bne.n	800a034 <_printf_common+0xac>
 800a02c:	f04f 30ff 	mov.w	r0, #4294967295
 800a030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a034:	3501      	adds	r5, #1
 800a036:	e7c6      	b.n	8009fc6 <_printf_common+0x3e>
 800a038:	18e1      	adds	r1, r4, r3
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	2030      	movs	r0, #48	@ 0x30
 800a03e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a042:	4422      	add	r2, r4
 800a044:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a048:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a04c:	3302      	adds	r3, #2
 800a04e:	e7c7      	b.n	8009fe0 <_printf_common+0x58>
 800a050:	2301      	movs	r3, #1
 800a052:	4622      	mov	r2, r4
 800a054:	4641      	mov	r1, r8
 800a056:	4638      	mov	r0, r7
 800a058:	47c8      	blx	r9
 800a05a:	3001      	adds	r0, #1
 800a05c:	d0e6      	beq.n	800a02c <_printf_common+0xa4>
 800a05e:	3601      	adds	r6, #1
 800a060:	e7d9      	b.n	800a016 <_printf_common+0x8e>
	...

0800a064 <_printf_i>:
 800a064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a068:	7e0f      	ldrb	r7, [r1, #24]
 800a06a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a06c:	2f78      	cmp	r7, #120	@ 0x78
 800a06e:	4691      	mov	r9, r2
 800a070:	4680      	mov	r8, r0
 800a072:	460c      	mov	r4, r1
 800a074:	469a      	mov	sl, r3
 800a076:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a07a:	d807      	bhi.n	800a08c <_printf_i+0x28>
 800a07c:	2f62      	cmp	r7, #98	@ 0x62
 800a07e:	d80a      	bhi.n	800a096 <_printf_i+0x32>
 800a080:	2f00      	cmp	r7, #0
 800a082:	f000 80d2 	beq.w	800a22a <_printf_i+0x1c6>
 800a086:	2f58      	cmp	r7, #88	@ 0x58
 800a088:	f000 80b9 	beq.w	800a1fe <_printf_i+0x19a>
 800a08c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a090:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a094:	e03a      	b.n	800a10c <_printf_i+0xa8>
 800a096:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a09a:	2b15      	cmp	r3, #21
 800a09c:	d8f6      	bhi.n	800a08c <_printf_i+0x28>
 800a09e:	a101      	add	r1, pc, #4	@ (adr r1, 800a0a4 <_printf_i+0x40>)
 800a0a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0a4:	0800a0fd 	.word	0x0800a0fd
 800a0a8:	0800a111 	.word	0x0800a111
 800a0ac:	0800a08d 	.word	0x0800a08d
 800a0b0:	0800a08d 	.word	0x0800a08d
 800a0b4:	0800a08d 	.word	0x0800a08d
 800a0b8:	0800a08d 	.word	0x0800a08d
 800a0bc:	0800a111 	.word	0x0800a111
 800a0c0:	0800a08d 	.word	0x0800a08d
 800a0c4:	0800a08d 	.word	0x0800a08d
 800a0c8:	0800a08d 	.word	0x0800a08d
 800a0cc:	0800a08d 	.word	0x0800a08d
 800a0d0:	0800a211 	.word	0x0800a211
 800a0d4:	0800a13b 	.word	0x0800a13b
 800a0d8:	0800a1cb 	.word	0x0800a1cb
 800a0dc:	0800a08d 	.word	0x0800a08d
 800a0e0:	0800a08d 	.word	0x0800a08d
 800a0e4:	0800a233 	.word	0x0800a233
 800a0e8:	0800a08d 	.word	0x0800a08d
 800a0ec:	0800a13b 	.word	0x0800a13b
 800a0f0:	0800a08d 	.word	0x0800a08d
 800a0f4:	0800a08d 	.word	0x0800a08d
 800a0f8:	0800a1d3 	.word	0x0800a1d3
 800a0fc:	6833      	ldr	r3, [r6, #0]
 800a0fe:	1d1a      	adds	r2, r3, #4
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	6032      	str	r2, [r6, #0]
 800a104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a108:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a10c:	2301      	movs	r3, #1
 800a10e:	e09d      	b.n	800a24c <_printf_i+0x1e8>
 800a110:	6833      	ldr	r3, [r6, #0]
 800a112:	6820      	ldr	r0, [r4, #0]
 800a114:	1d19      	adds	r1, r3, #4
 800a116:	6031      	str	r1, [r6, #0]
 800a118:	0606      	lsls	r6, r0, #24
 800a11a:	d501      	bpl.n	800a120 <_printf_i+0xbc>
 800a11c:	681d      	ldr	r5, [r3, #0]
 800a11e:	e003      	b.n	800a128 <_printf_i+0xc4>
 800a120:	0645      	lsls	r5, r0, #25
 800a122:	d5fb      	bpl.n	800a11c <_printf_i+0xb8>
 800a124:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a128:	2d00      	cmp	r5, #0
 800a12a:	da03      	bge.n	800a134 <_printf_i+0xd0>
 800a12c:	232d      	movs	r3, #45	@ 0x2d
 800a12e:	426d      	negs	r5, r5
 800a130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a134:	4859      	ldr	r0, [pc, #356]	@ (800a29c <_printf_i+0x238>)
 800a136:	230a      	movs	r3, #10
 800a138:	e011      	b.n	800a15e <_printf_i+0xfa>
 800a13a:	6821      	ldr	r1, [r4, #0]
 800a13c:	6833      	ldr	r3, [r6, #0]
 800a13e:	0608      	lsls	r0, r1, #24
 800a140:	f853 5b04 	ldr.w	r5, [r3], #4
 800a144:	d402      	bmi.n	800a14c <_printf_i+0xe8>
 800a146:	0649      	lsls	r1, r1, #25
 800a148:	bf48      	it	mi
 800a14a:	b2ad      	uxthmi	r5, r5
 800a14c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a14e:	4853      	ldr	r0, [pc, #332]	@ (800a29c <_printf_i+0x238>)
 800a150:	6033      	str	r3, [r6, #0]
 800a152:	bf14      	ite	ne
 800a154:	230a      	movne	r3, #10
 800a156:	2308      	moveq	r3, #8
 800a158:	2100      	movs	r1, #0
 800a15a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a15e:	6866      	ldr	r6, [r4, #4]
 800a160:	60a6      	str	r6, [r4, #8]
 800a162:	2e00      	cmp	r6, #0
 800a164:	bfa2      	ittt	ge
 800a166:	6821      	ldrge	r1, [r4, #0]
 800a168:	f021 0104 	bicge.w	r1, r1, #4
 800a16c:	6021      	strge	r1, [r4, #0]
 800a16e:	b90d      	cbnz	r5, 800a174 <_printf_i+0x110>
 800a170:	2e00      	cmp	r6, #0
 800a172:	d04b      	beq.n	800a20c <_printf_i+0x1a8>
 800a174:	4616      	mov	r6, r2
 800a176:	fbb5 f1f3 	udiv	r1, r5, r3
 800a17a:	fb03 5711 	mls	r7, r3, r1, r5
 800a17e:	5dc7      	ldrb	r7, [r0, r7]
 800a180:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a184:	462f      	mov	r7, r5
 800a186:	42bb      	cmp	r3, r7
 800a188:	460d      	mov	r5, r1
 800a18a:	d9f4      	bls.n	800a176 <_printf_i+0x112>
 800a18c:	2b08      	cmp	r3, #8
 800a18e:	d10b      	bne.n	800a1a8 <_printf_i+0x144>
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	07df      	lsls	r7, r3, #31
 800a194:	d508      	bpl.n	800a1a8 <_printf_i+0x144>
 800a196:	6923      	ldr	r3, [r4, #16]
 800a198:	6861      	ldr	r1, [r4, #4]
 800a19a:	4299      	cmp	r1, r3
 800a19c:	bfde      	ittt	le
 800a19e:	2330      	movle	r3, #48	@ 0x30
 800a1a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1a8:	1b92      	subs	r2, r2, r6
 800a1aa:	6122      	str	r2, [r4, #16]
 800a1ac:	f8cd a000 	str.w	sl, [sp]
 800a1b0:	464b      	mov	r3, r9
 800a1b2:	aa03      	add	r2, sp, #12
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4640      	mov	r0, r8
 800a1b8:	f7ff fee6 	bl	8009f88 <_printf_common>
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d14a      	bne.n	800a256 <_printf_i+0x1f2>
 800a1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c4:	b004      	add	sp, #16
 800a1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	f043 0320 	orr.w	r3, r3, #32
 800a1d0:	6023      	str	r3, [r4, #0]
 800a1d2:	4833      	ldr	r0, [pc, #204]	@ (800a2a0 <_printf_i+0x23c>)
 800a1d4:	2778      	movs	r7, #120	@ 0x78
 800a1d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	6831      	ldr	r1, [r6, #0]
 800a1de:	061f      	lsls	r7, r3, #24
 800a1e0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1e4:	d402      	bmi.n	800a1ec <_printf_i+0x188>
 800a1e6:	065f      	lsls	r7, r3, #25
 800a1e8:	bf48      	it	mi
 800a1ea:	b2ad      	uxthmi	r5, r5
 800a1ec:	6031      	str	r1, [r6, #0]
 800a1ee:	07d9      	lsls	r1, r3, #31
 800a1f0:	bf44      	itt	mi
 800a1f2:	f043 0320 	orrmi.w	r3, r3, #32
 800a1f6:	6023      	strmi	r3, [r4, #0]
 800a1f8:	b11d      	cbz	r5, 800a202 <_printf_i+0x19e>
 800a1fa:	2310      	movs	r3, #16
 800a1fc:	e7ac      	b.n	800a158 <_printf_i+0xf4>
 800a1fe:	4827      	ldr	r0, [pc, #156]	@ (800a29c <_printf_i+0x238>)
 800a200:	e7e9      	b.n	800a1d6 <_printf_i+0x172>
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	f023 0320 	bic.w	r3, r3, #32
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	e7f6      	b.n	800a1fa <_printf_i+0x196>
 800a20c:	4616      	mov	r6, r2
 800a20e:	e7bd      	b.n	800a18c <_printf_i+0x128>
 800a210:	6833      	ldr	r3, [r6, #0]
 800a212:	6825      	ldr	r5, [r4, #0]
 800a214:	6961      	ldr	r1, [r4, #20]
 800a216:	1d18      	adds	r0, r3, #4
 800a218:	6030      	str	r0, [r6, #0]
 800a21a:	062e      	lsls	r6, r5, #24
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	d501      	bpl.n	800a224 <_printf_i+0x1c0>
 800a220:	6019      	str	r1, [r3, #0]
 800a222:	e002      	b.n	800a22a <_printf_i+0x1c6>
 800a224:	0668      	lsls	r0, r5, #25
 800a226:	d5fb      	bpl.n	800a220 <_printf_i+0x1bc>
 800a228:	8019      	strh	r1, [r3, #0]
 800a22a:	2300      	movs	r3, #0
 800a22c:	6123      	str	r3, [r4, #16]
 800a22e:	4616      	mov	r6, r2
 800a230:	e7bc      	b.n	800a1ac <_printf_i+0x148>
 800a232:	6833      	ldr	r3, [r6, #0]
 800a234:	1d1a      	adds	r2, r3, #4
 800a236:	6032      	str	r2, [r6, #0]
 800a238:	681e      	ldr	r6, [r3, #0]
 800a23a:	6862      	ldr	r2, [r4, #4]
 800a23c:	2100      	movs	r1, #0
 800a23e:	4630      	mov	r0, r6
 800a240:	f7f5 ffc6 	bl	80001d0 <memchr>
 800a244:	b108      	cbz	r0, 800a24a <_printf_i+0x1e6>
 800a246:	1b80      	subs	r0, r0, r6
 800a248:	6060      	str	r0, [r4, #4]
 800a24a:	6863      	ldr	r3, [r4, #4]
 800a24c:	6123      	str	r3, [r4, #16]
 800a24e:	2300      	movs	r3, #0
 800a250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a254:	e7aa      	b.n	800a1ac <_printf_i+0x148>
 800a256:	6923      	ldr	r3, [r4, #16]
 800a258:	4632      	mov	r2, r6
 800a25a:	4649      	mov	r1, r9
 800a25c:	4640      	mov	r0, r8
 800a25e:	47d0      	blx	sl
 800a260:	3001      	adds	r0, #1
 800a262:	d0ad      	beq.n	800a1c0 <_printf_i+0x15c>
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	079b      	lsls	r3, r3, #30
 800a268:	d413      	bmi.n	800a292 <_printf_i+0x22e>
 800a26a:	68e0      	ldr	r0, [r4, #12]
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	4298      	cmp	r0, r3
 800a270:	bfb8      	it	lt
 800a272:	4618      	movlt	r0, r3
 800a274:	e7a6      	b.n	800a1c4 <_printf_i+0x160>
 800a276:	2301      	movs	r3, #1
 800a278:	4632      	mov	r2, r6
 800a27a:	4649      	mov	r1, r9
 800a27c:	4640      	mov	r0, r8
 800a27e:	47d0      	blx	sl
 800a280:	3001      	adds	r0, #1
 800a282:	d09d      	beq.n	800a1c0 <_printf_i+0x15c>
 800a284:	3501      	adds	r5, #1
 800a286:	68e3      	ldr	r3, [r4, #12]
 800a288:	9903      	ldr	r1, [sp, #12]
 800a28a:	1a5b      	subs	r3, r3, r1
 800a28c:	42ab      	cmp	r3, r5
 800a28e:	dcf2      	bgt.n	800a276 <_printf_i+0x212>
 800a290:	e7eb      	b.n	800a26a <_printf_i+0x206>
 800a292:	2500      	movs	r5, #0
 800a294:	f104 0619 	add.w	r6, r4, #25
 800a298:	e7f5      	b.n	800a286 <_printf_i+0x222>
 800a29a:	bf00      	nop
 800a29c:	0800c772 	.word	0x0800c772
 800a2a0:	0800c783 	.word	0x0800c783

0800a2a4 <std>:
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	b510      	push	{r4, lr}
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	e9c0 3300 	strd	r3, r3, [r0]
 800a2ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2b2:	6083      	str	r3, [r0, #8]
 800a2b4:	8181      	strh	r1, [r0, #12]
 800a2b6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2b8:	81c2      	strh	r2, [r0, #14]
 800a2ba:	6183      	str	r3, [r0, #24]
 800a2bc:	4619      	mov	r1, r3
 800a2be:	2208      	movs	r2, #8
 800a2c0:	305c      	adds	r0, #92	@ 0x5c
 800a2c2:	f000 f928 	bl	800a516 <memset>
 800a2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2fc <std+0x58>)
 800a2c8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a300 <std+0x5c>)
 800a2cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a304 <std+0x60>)
 800a2d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a308 <std+0x64>)
 800a2d4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a30c <std+0x68>)
 800a2d8:	6224      	str	r4, [r4, #32]
 800a2da:	429c      	cmp	r4, r3
 800a2dc:	d006      	beq.n	800a2ec <std+0x48>
 800a2de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2e2:	4294      	cmp	r4, r2
 800a2e4:	d002      	beq.n	800a2ec <std+0x48>
 800a2e6:	33d0      	adds	r3, #208	@ 0xd0
 800a2e8:	429c      	cmp	r4, r3
 800a2ea:	d105      	bne.n	800a2f8 <std+0x54>
 800a2ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2f4:	f000 b98c 	b.w	800a610 <__retarget_lock_init_recursive>
 800a2f8:	bd10      	pop	{r4, pc}
 800a2fa:	bf00      	nop
 800a2fc:	0800a491 	.word	0x0800a491
 800a300:	0800a4b3 	.word	0x0800a4b3
 800a304:	0800a4eb 	.word	0x0800a4eb
 800a308:	0800a50f 	.word	0x0800a50f
 800a30c:	20002044 	.word	0x20002044

0800a310 <stdio_exit_handler>:
 800a310:	4a02      	ldr	r2, [pc, #8]	@ (800a31c <stdio_exit_handler+0xc>)
 800a312:	4903      	ldr	r1, [pc, #12]	@ (800a320 <stdio_exit_handler+0x10>)
 800a314:	4803      	ldr	r0, [pc, #12]	@ (800a324 <stdio_exit_handler+0x14>)
 800a316:	f000 b869 	b.w	800a3ec <_fwalk_sglue>
 800a31a:	bf00      	nop
 800a31c:	200000fc 	.word	0x200000fc
 800a320:	0800bf6d 	.word	0x0800bf6d
 800a324:	2000010c 	.word	0x2000010c

0800a328 <cleanup_stdio>:
 800a328:	6841      	ldr	r1, [r0, #4]
 800a32a:	4b0c      	ldr	r3, [pc, #48]	@ (800a35c <cleanup_stdio+0x34>)
 800a32c:	4299      	cmp	r1, r3
 800a32e:	b510      	push	{r4, lr}
 800a330:	4604      	mov	r4, r0
 800a332:	d001      	beq.n	800a338 <cleanup_stdio+0x10>
 800a334:	f001 fe1a 	bl	800bf6c <_fflush_r>
 800a338:	68a1      	ldr	r1, [r4, #8]
 800a33a:	4b09      	ldr	r3, [pc, #36]	@ (800a360 <cleanup_stdio+0x38>)
 800a33c:	4299      	cmp	r1, r3
 800a33e:	d002      	beq.n	800a346 <cleanup_stdio+0x1e>
 800a340:	4620      	mov	r0, r4
 800a342:	f001 fe13 	bl	800bf6c <_fflush_r>
 800a346:	68e1      	ldr	r1, [r4, #12]
 800a348:	4b06      	ldr	r3, [pc, #24]	@ (800a364 <cleanup_stdio+0x3c>)
 800a34a:	4299      	cmp	r1, r3
 800a34c:	d004      	beq.n	800a358 <cleanup_stdio+0x30>
 800a34e:	4620      	mov	r0, r4
 800a350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a354:	f001 be0a 	b.w	800bf6c <_fflush_r>
 800a358:	bd10      	pop	{r4, pc}
 800a35a:	bf00      	nop
 800a35c:	20002044 	.word	0x20002044
 800a360:	200020ac 	.word	0x200020ac
 800a364:	20002114 	.word	0x20002114

0800a368 <global_stdio_init.part.0>:
 800a368:	b510      	push	{r4, lr}
 800a36a:	4b0b      	ldr	r3, [pc, #44]	@ (800a398 <global_stdio_init.part.0+0x30>)
 800a36c:	4c0b      	ldr	r4, [pc, #44]	@ (800a39c <global_stdio_init.part.0+0x34>)
 800a36e:	4a0c      	ldr	r2, [pc, #48]	@ (800a3a0 <global_stdio_init.part.0+0x38>)
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	4620      	mov	r0, r4
 800a374:	2200      	movs	r2, #0
 800a376:	2104      	movs	r1, #4
 800a378:	f7ff ff94 	bl	800a2a4 <std>
 800a37c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a380:	2201      	movs	r2, #1
 800a382:	2109      	movs	r1, #9
 800a384:	f7ff ff8e 	bl	800a2a4 <std>
 800a388:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a38c:	2202      	movs	r2, #2
 800a38e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a392:	2112      	movs	r1, #18
 800a394:	f7ff bf86 	b.w	800a2a4 <std>
 800a398:	2000217c 	.word	0x2000217c
 800a39c:	20002044 	.word	0x20002044
 800a3a0:	0800a311 	.word	0x0800a311

0800a3a4 <__sfp_lock_acquire>:
 800a3a4:	4801      	ldr	r0, [pc, #4]	@ (800a3ac <__sfp_lock_acquire+0x8>)
 800a3a6:	f000 b934 	b.w	800a612 <__retarget_lock_acquire_recursive>
 800a3aa:	bf00      	nop
 800a3ac:	20002185 	.word	0x20002185

0800a3b0 <__sfp_lock_release>:
 800a3b0:	4801      	ldr	r0, [pc, #4]	@ (800a3b8 <__sfp_lock_release+0x8>)
 800a3b2:	f000 b92f 	b.w	800a614 <__retarget_lock_release_recursive>
 800a3b6:	bf00      	nop
 800a3b8:	20002185 	.word	0x20002185

0800a3bc <__sinit>:
 800a3bc:	b510      	push	{r4, lr}
 800a3be:	4604      	mov	r4, r0
 800a3c0:	f7ff fff0 	bl	800a3a4 <__sfp_lock_acquire>
 800a3c4:	6a23      	ldr	r3, [r4, #32]
 800a3c6:	b11b      	cbz	r3, 800a3d0 <__sinit+0x14>
 800a3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3cc:	f7ff bff0 	b.w	800a3b0 <__sfp_lock_release>
 800a3d0:	4b04      	ldr	r3, [pc, #16]	@ (800a3e4 <__sinit+0x28>)
 800a3d2:	6223      	str	r3, [r4, #32]
 800a3d4:	4b04      	ldr	r3, [pc, #16]	@ (800a3e8 <__sinit+0x2c>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1f5      	bne.n	800a3c8 <__sinit+0xc>
 800a3dc:	f7ff ffc4 	bl	800a368 <global_stdio_init.part.0>
 800a3e0:	e7f2      	b.n	800a3c8 <__sinit+0xc>
 800a3e2:	bf00      	nop
 800a3e4:	0800a329 	.word	0x0800a329
 800a3e8:	2000217c 	.word	0x2000217c

0800a3ec <_fwalk_sglue>:
 800a3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f0:	4607      	mov	r7, r0
 800a3f2:	4688      	mov	r8, r1
 800a3f4:	4614      	mov	r4, r2
 800a3f6:	2600      	movs	r6, #0
 800a3f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3fc:	f1b9 0901 	subs.w	r9, r9, #1
 800a400:	d505      	bpl.n	800a40e <_fwalk_sglue+0x22>
 800a402:	6824      	ldr	r4, [r4, #0]
 800a404:	2c00      	cmp	r4, #0
 800a406:	d1f7      	bne.n	800a3f8 <_fwalk_sglue+0xc>
 800a408:	4630      	mov	r0, r6
 800a40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a40e:	89ab      	ldrh	r3, [r5, #12]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d907      	bls.n	800a424 <_fwalk_sglue+0x38>
 800a414:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a418:	3301      	adds	r3, #1
 800a41a:	d003      	beq.n	800a424 <_fwalk_sglue+0x38>
 800a41c:	4629      	mov	r1, r5
 800a41e:	4638      	mov	r0, r7
 800a420:	47c0      	blx	r8
 800a422:	4306      	orrs	r6, r0
 800a424:	3568      	adds	r5, #104	@ 0x68
 800a426:	e7e9      	b.n	800a3fc <_fwalk_sglue+0x10>

0800a428 <sniprintf>:
 800a428:	b40c      	push	{r2, r3}
 800a42a:	b530      	push	{r4, r5, lr}
 800a42c:	4b17      	ldr	r3, [pc, #92]	@ (800a48c <sniprintf+0x64>)
 800a42e:	1e0c      	subs	r4, r1, #0
 800a430:	681d      	ldr	r5, [r3, #0]
 800a432:	b09d      	sub	sp, #116	@ 0x74
 800a434:	da08      	bge.n	800a448 <sniprintf+0x20>
 800a436:	238b      	movs	r3, #139	@ 0x8b
 800a438:	602b      	str	r3, [r5, #0]
 800a43a:	f04f 30ff 	mov.w	r0, #4294967295
 800a43e:	b01d      	add	sp, #116	@ 0x74
 800a440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a444:	b002      	add	sp, #8
 800a446:	4770      	bx	lr
 800a448:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a44c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a450:	bf14      	ite	ne
 800a452:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a456:	4623      	moveq	r3, r4
 800a458:	9304      	str	r3, [sp, #16]
 800a45a:	9307      	str	r3, [sp, #28]
 800a45c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a460:	9002      	str	r0, [sp, #8]
 800a462:	9006      	str	r0, [sp, #24]
 800a464:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a468:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a46a:	ab21      	add	r3, sp, #132	@ 0x84
 800a46c:	a902      	add	r1, sp, #8
 800a46e:	4628      	mov	r0, r5
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	f001 fbfb 	bl	800bc6c <_svfiprintf_r>
 800a476:	1c43      	adds	r3, r0, #1
 800a478:	bfbc      	itt	lt
 800a47a:	238b      	movlt	r3, #139	@ 0x8b
 800a47c:	602b      	strlt	r3, [r5, #0]
 800a47e:	2c00      	cmp	r4, #0
 800a480:	d0dd      	beq.n	800a43e <sniprintf+0x16>
 800a482:	9b02      	ldr	r3, [sp, #8]
 800a484:	2200      	movs	r2, #0
 800a486:	701a      	strb	r2, [r3, #0]
 800a488:	e7d9      	b.n	800a43e <sniprintf+0x16>
 800a48a:	bf00      	nop
 800a48c:	20000108 	.word	0x20000108

0800a490 <__sread>:
 800a490:	b510      	push	{r4, lr}
 800a492:	460c      	mov	r4, r1
 800a494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a498:	f000 f86c 	bl	800a574 <_read_r>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	bfab      	itete	ge
 800a4a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a4a2:	89a3      	ldrhlt	r3, [r4, #12]
 800a4a4:	181b      	addge	r3, r3, r0
 800a4a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a4aa:	bfac      	ite	ge
 800a4ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a4ae:	81a3      	strhlt	r3, [r4, #12]
 800a4b0:	bd10      	pop	{r4, pc}

0800a4b2 <__swrite>:
 800a4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b6:	461f      	mov	r7, r3
 800a4b8:	898b      	ldrh	r3, [r1, #12]
 800a4ba:	05db      	lsls	r3, r3, #23
 800a4bc:	4605      	mov	r5, r0
 800a4be:	460c      	mov	r4, r1
 800a4c0:	4616      	mov	r6, r2
 800a4c2:	d505      	bpl.n	800a4d0 <__swrite+0x1e>
 800a4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f000 f840 	bl	800a550 <_lseek_r>
 800a4d0:	89a3      	ldrh	r3, [r4, #12]
 800a4d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4da:	81a3      	strh	r3, [r4, #12]
 800a4dc:	4632      	mov	r2, r6
 800a4de:	463b      	mov	r3, r7
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e6:	f000 b857 	b.w	800a598 <_write_r>

0800a4ea <__sseek>:
 800a4ea:	b510      	push	{r4, lr}
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f2:	f000 f82d 	bl	800a550 <_lseek_r>
 800a4f6:	1c43      	adds	r3, r0, #1
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	bf15      	itete	ne
 800a4fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a4fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a502:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a506:	81a3      	strheq	r3, [r4, #12]
 800a508:	bf18      	it	ne
 800a50a:	81a3      	strhne	r3, [r4, #12]
 800a50c:	bd10      	pop	{r4, pc}

0800a50e <__sclose>:
 800a50e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a512:	f000 b80d 	b.w	800a530 <_close_r>

0800a516 <memset>:
 800a516:	4402      	add	r2, r0
 800a518:	4603      	mov	r3, r0
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d100      	bne.n	800a520 <memset+0xa>
 800a51e:	4770      	bx	lr
 800a520:	f803 1b01 	strb.w	r1, [r3], #1
 800a524:	e7f9      	b.n	800a51a <memset+0x4>
	...

0800a528 <_localeconv_r>:
 800a528:	4800      	ldr	r0, [pc, #0]	@ (800a52c <_localeconv_r+0x4>)
 800a52a:	4770      	bx	lr
 800a52c:	20000248 	.word	0x20000248

0800a530 <_close_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4d06      	ldr	r5, [pc, #24]	@ (800a54c <_close_r+0x1c>)
 800a534:	2300      	movs	r3, #0
 800a536:	4604      	mov	r4, r0
 800a538:	4608      	mov	r0, r1
 800a53a:	602b      	str	r3, [r5, #0]
 800a53c:	f7f7 f8d0 	bl	80016e0 <_close>
 800a540:	1c43      	adds	r3, r0, #1
 800a542:	d102      	bne.n	800a54a <_close_r+0x1a>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	b103      	cbz	r3, 800a54a <_close_r+0x1a>
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	20002180 	.word	0x20002180

0800a550 <_lseek_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4d07      	ldr	r5, [pc, #28]	@ (800a570 <_lseek_r+0x20>)
 800a554:	4604      	mov	r4, r0
 800a556:	4608      	mov	r0, r1
 800a558:	4611      	mov	r1, r2
 800a55a:	2200      	movs	r2, #0
 800a55c:	602a      	str	r2, [r5, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	f7f7 f8e5 	bl	800172e <_lseek>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_lseek_r+0x1e>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_lseek_r+0x1e>
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	20002180 	.word	0x20002180

0800a574 <_read_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4d07      	ldr	r5, [pc, #28]	@ (800a594 <_read_r+0x20>)
 800a578:	4604      	mov	r4, r0
 800a57a:	4608      	mov	r0, r1
 800a57c:	4611      	mov	r1, r2
 800a57e:	2200      	movs	r2, #0
 800a580:	602a      	str	r2, [r5, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	f7f7 f873 	bl	800166e <_read>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d102      	bne.n	800a592 <_read_r+0x1e>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	b103      	cbz	r3, 800a592 <_read_r+0x1e>
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	bd38      	pop	{r3, r4, r5, pc}
 800a594:	20002180 	.word	0x20002180

0800a598 <_write_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4d07      	ldr	r5, [pc, #28]	@ (800a5b8 <_write_r+0x20>)
 800a59c:	4604      	mov	r4, r0
 800a59e:	4608      	mov	r0, r1
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	602a      	str	r2, [r5, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	f7f7 f87e 	bl	80016a8 <_write>
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	d102      	bne.n	800a5b6 <_write_r+0x1e>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	b103      	cbz	r3, 800a5b6 <_write_r+0x1e>
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
 800a5b8:	20002180 	.word	0x20002180

0800a5bc <__errno>:
 800a5bc:	4b01      	ldr	r3, [pc, #4]	@ (800a5c4 <__errno+0x8>)
 800a5be:	6818      	ldr	r0, [r3, #0]
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	20000108 	.word	0x20000108

0800a5c8 <__libc_init_array>:
 800a5c8:	b570      	push	{r4, r5, r6, lr}
 800a5ca:	4d0d      	ldr	r5, [pc, #52]	@ (800a600 <__libc_init_array+0x38>)
 800a5cc:	4c0d      	ldr	r4, [pc, #52]	@ (800a604 <__libc_init_array+0x3c>)
 800a5ce:	1b64      	subs	r4, r4, r5
 800a5d0:	10a4      	asrs	r4, r4, #2
 800a5d2:	2600      	movs	r6, #0
 800a5d4:	42a6      	cmp	r6, r4
 800a5d6:	d109      	bne.n	800a5ec <__libc_init_array+0x24>
 800a5d8:	4d0b      	ldr	r5, [pc, #44]	@ (800a608 <__libc_init_array+0x40>)
 800a5da:	4c0c      	ldr	r4, [pc, #48]	@ (800a60c <__libc_init_array+0x44>)
 800a5dc:	f002 f864 	bl	800c6a8 <_init>
 800a5e0:	1b64      	subs	r4, r4, r5
 800a5e2:	10a4      	asrs	r4, r4, #2
 800a5e4:	2600      	movs	r6, #0
 800a5e6:	42a6      	cmp	r6, r4
 800a5e8:	d105      	bne.n	800a5f6 <__libc_init_array+0x2e>
 800a5ea:	bd70      	pop	{r4, r5, r6, pc}
 800a5ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5f0:	4798      	blx	r3
 800a5f2:	3601      	adds	r6, #1
 800a5f4:	e7ee      	b.n	800a5d4 <__libc_init_array+0xc>
 800a5f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5fa:	4798      	blx	r3
 800a5fc:	3601      	adds	r6, #1
 800a5fe:	e7f2      	b.n	800a5e6 <__libc_init_array+0x1e>
 800a600:	0800cad8 	.word	0x0800cad8
 800a604:	0800cad8 	.word	0x0800cad8
 800a608:	0800cad8 	.word	0x0800cad8
 800a60c:	0800cadc 	.word	0x0800cadc

0800a610 <__retarget_lock_init_recursive>:
 800a610:	4770      	bx	lr

0800a612 <__retarget_lock_acquire_recursive>:
 800a612:	4770      	bx	lr

0800a614 <__retarget_lock_release_recursive>:
 800a614:	4770      	bx	lr

0800a616 <quorem>:
 800a616:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61a:	6903      	ldr	r3, [r0, #16]
 800a61c:	690c      	ldr	r4, [r1, #16]
 800a61e:	42a3      	cmp	r3, r4
 800a620:	4607      	mov	r7, r0
 800a622:	db7e      	blt.n	800a722 <quorem+0x10c>
 800a624:	3c01      	subs	r4, #1
 800a626:	f101 0814 	add.w	r8, r1, #20
 800a62a:	00a3      	lsls	r3, r4, #2
 800a62c:	f100 0514 	add.w	r5, r0, #20
 800a630:	9300      	str	r3, [sp, #0]
 800a632:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a63c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a640:	3301      	adds	r3, #1
 800a642:	429a      	cmp	r2, r3
 800a644:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a648:	fbb2 f6f3 	udiv	r6, r2, r3
 800a64c:	d32e      	bcc.n	800a6ac <quorem+0x96>
 800a64e:	f04f 0a00 	mov.w	sl, #0
 800a652:	46c4      	mov	ip, r8
 800a654:	46ae      	mov	lr, r5
 800a656:	46d3      	mov	fp, sl
 800a658:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a65c:	b298      	uxth	r0, r3
 800a65e:	fb06 a000 	mla	r0, r6, r0, sl
 800a662:	0c02      	lsrs	r2, r0, #16
 800a664:	0c1b      	lsrs	r3, r3, #16
 800a666:	fb06 2303 	mla	r3, r6, r3, r2
 800a66a:	f8de 2000 	ldr.w	r2, [lr]
 800a66e:	b280      	uxth	r0, r0
 800a670:	b292      	uxth	r2, r2
 800a672:	1a12      	subs	r2, r2, r0
 800a674:	445a      	add	r2, fp
 800a676:	f8de 0000 	ldr.w	r0, [lr]
 800a67a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a67e:	b29b      	uxth	r3, r3
 800a680:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a684:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a688:	b292      	uxth	r2, r2
 800a68a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a68e:	45e1      	cmp	r9, ip
 800a690:	f84e 2b04 	str.w	r2, [lr], #4
 800a694:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a698:	d2de      	bcs.n	800a658 <quorem+0x42>
 800a69a:	9b00      	ldr	r3, [sp, #0]
 800a69c:	58eb      	ldr	r3, [r5, r3]
 800a69e:	b92b      	cbnz	r3, 800a6ac <quorem+0x96>
 800a6a0:	9b01      	ldr	r3, [sp, #4]
 800a6a2:	3b04      	subs	r3, #4
 800a6a4:	429d      	cmp	r5, r3
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	d32f      	bcc.n	800a70a <quorem+0xf4>
 800a6aa:	613c      	str	r4, [r7, #16]
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	f001 f979 	bl	800b9a4 <__mcmp>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	db25      	blt.n	800a702 <quorem+0xec>
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6be:	f8d1 c000 	ldr.w	ip, [r1]
 800a6c2:	fa1f fe82 	uxth.w	lr, r2
 800a6c6:	fa1f f38c 	uxth.w	r3, ip
 800a6ca:	eba3 030e 	sub.w	r3, r3, lr
 800a6ce:	4403      	add	r3, r0
 800a6d0:	0c12      	lsrs	r2, r2, #16
 800a6d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a6d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6e0:	45c1      	cmp	r9, r8
 800a6e2:	f841 3b04 	str.w	r3, [r1], #4
 800a6e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a6ea:	d2e6      	bcs.n	800a6ba <quorem+0xa4>
 800a6ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6f4:	b922      	cbnz	r2, 800a700 <quorem+0xea>
 800a6f6:	3b04      	subs	r3, #4
 800a6f8:	429d      	cmp	r5, r3
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	d30b      	bcc.n	800a716 <quorem+0x100>
 800a6fe:	613c      	str	r4, [r7, #16]
 800a700:	3601      	adds	r6, #1
 800a702:	4630      	mov	r0, r6
 800a704:	b003      	add	sp, #12
 800a706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70a:	6812      	ldr	r2, [r2, #0]
 800a70c:	3b04      	subs	r3, #4
 800a70e:	2a00      	cmp	r2, #0
 800a710:	d1cb      	bne.n	800a6aa <quorem+0x94>
 800a712:	3c01      	subs	r4, #1
 800a714:	e7c6      	b.n	800a6a4 <quorem+0x8e>
 800a716:	6812      	ldr	r2, [r2, #0]
 800a718:	3b04      	subs	r3, #4
 800a71a:	2a00      	cmp	r2, #0
 800a71c:	d1ef      	bne.n	800a6fe <quorem+0xe8>
 800a71e:	3c01      	subs	r4, #1
 800a720:	e7ea      	b.n	800a6f8 <quorem+0xe2>
 800a722:	2000      	movs	r0, #0
 800a724:	e7ee      	b.n	800a704 <quorem+0xee>
	...

0800a728 <_dtoa_r>:
 800a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72c:	69c7      	ldr	r7, [r0, #28]
 800a72e:	b099      	sub	sp, #100	@ 0x64
 800a730:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a734:	ec55 4b10 	vmov	r4, r5, d0
 800a738:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a73a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a73c:	4683      	mov	fp, r0
 800a73e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a740:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a742:	b97f      	cbnz	r7, 800a764 <_dtoa_r+0x3c>
 800a744:	2010      	movs	r0, #16
 800a746:	f000 fdfd 	bl	800b344 <malloc>
 800a74a:	4602      	mov	r2, r0
 800a74c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a750:	b920      	cbnz	r0, 800a75c <_dtoa_r+0x34>
 800a752:	4ba7      	ldr	r3, [pc, #668]	@ (800a9f0 <_dtoa_r+0x2c8>)
 800a754:	21ef      	movs	r1, #239	@ 0xef
 800a756:	48a7      	ldr	r0, [pc, #668]	@ (800a9f4 <_dtoa_r+0x2cc>)
 800a758:	f001 fc68 	bl	800c02c <__assert_func>
 800a75c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a760:	6007      	str	r7, [r0, #0]
 800a762:	60c7      	str	r7, [r0, #12]
 800a764:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a768:	6819      	ldr	r1, [r3, #0]
 800a76a:	b159      	cbz	r1, 800a784 <_dtoa_r+0x5c>
 800a76c:	685a      	ldr	r2, [r3, #4]
 800a76e:	604a      	str	r2, [r1, #4]
 800a770:	2301      	movs	r3, #1
 800a772:	4093      	lsls	r3, r2
 800a774:	608b      	str	r3, [r1, #8]
 800a776:	4658      	mov	r0, fp
 800a778:	f000 feda 	bl	800b530 <_Bfree>
 800a77c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	1e2b      	subs	r3, r5, #0
 800a786:	bfb9      	ittee	lt
 800a788:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a78c:	9303      	strlt	r3, [sp, #12]
 800a78e:	2300      	movge	r3, #0
 800a790:	6033      	strge	r3, [r6, #0]
 800a792:	9f03      	ldr	r7, [sp, #12]
 800a794:	4b98      	ldr	r3, [pc, #608]	@ (800a9f8 <_dtoa_r+0x2d0>)
 800a796:	bfbc      	itt	lt
 800a798:	2201      	movlt	r2, #1
 800a79a:	6032      	strlt	r2, [r6, #0]
 800a79c:	43bb      	bics	r3, r7
 800a79e:	d112      	bne.n	800a7c6 <_dtoa_r+0x9e>
 800a7a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a7a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7ac:	4323      	orrs	r3, r4
 800a7ae:	f000 854d 	beq.w	800b24c <_dtoa_r+0xb24>
 800a7b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800aa0c <_dtoa_r+0x2e4>
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 854f 	beq.w	800b25c <_dtoa_r+0xb34>
 800a7be:	f10a 0303 	add.w	r3, sl, #3
 800a7c2:	f000 bd49 	b.w	800b258 <_dtoa_r+0xb30>
 800a7c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	ec51 0b17 	vmov	r0, r1, d7
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a7d6:	f7f6 f977 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7da:	4680      	mov	r8, r0
 800a7dc:	b158      	cbz	r0, 800a7f6 <_dtoa_r+0xce>
 800a7de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	6013      	str	r3, [r2, #0]
 800a7e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7e6:	b113      	cbz	r3, 800a7ee <_dtoa_r+0xc6>
 800a7e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a7ea:	4b84      	ldr	r3, [pc, #528]	@ (800a9fc <_dtoa_r+0x2d4>)
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800aa10 <_dtoa_r+0x2e8>
 800a7f2:	f000 bd33 	b.w	800b25c <_dtoa_r+0xb34>
 800a7f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a7fa:	aa16      	add	r2, sp, #88	@ 0x58
 800a7fc:	a917      	add	r1, sp, #92	@ 0x5c
 800a7fe:	4658      	mov	r0, fp
 800a800:	f001 f980 	bl	800bb04 <__d2b>
 800a804:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a808:	4681      	mov	r9, r0
 800a80a:	2e00      	cmp	r6, #0
 800a80c:	d077      	beq.n	800a8fe <_dtoa_r+0x1d6>
 800a80e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a810:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a81c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a820:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a824:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a828:	4619      	mov	r1, r3
 800a82a:	2200      	movs	r2, #0
 800a82c:	4b74      	ldr	r3, [pc, #464]	@ (800aa00 <_dtoa_r+0x2d8>)
 800a82e:	f7f5 fd2b 	bl	8000288 <__aeabi_dsub>
 800a832:	a369      	add	r3, pc, #420	@ (adr r3, 800a9d8 <_dtoa_r+0x2b0>)
 800a834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a838:	f7f5 fede 	bl	80005f8 <__aeabi_dmul>
 800a83c:	a368      	add	r3, pc, #416	@ (adr r3, 800a9e0 <_dtoa_r+0x2b8>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f7f5 fd23 	bl	800028c <__adddf3>
 800a846:	4604      	mov	r4, r0
 800a848:	4630      	mov	r0, r6
 800a84a:	460d      	mov	r5, r1
 800a84c:	f7f5 fe6a 	bl	8000524 <__aeabi_i2d>
 800a850:	a365      	add	r3, pc, #404	@ (adr r3, 800a9e8 <_dtoa_r+0x2c0>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	f7f5 fecf 	bl	80005f8 <__aeabi_dmul>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	4620      	mov	r0, r4
 800a860:	4629      	mov	r1, r5
 800a862:	f7f5 fd13 	bl	800028c <__adddf3>
 800a866:	4604      	mov	r4, r0
 800a868:	460d      	mov	r5, r1
 800a86a:	f7f6 f975 	bl	8000b58 <__aeabi_d2iz>
 800a86e:	2200      	movs	r2, #0
 800a870:	4607      	mov	r7, r0
 800a872:	2300      	movs	r3, #0
 800a874:	4620      	mov	r0, r4
 800a876:	4629      	mov	r1, r5
 800a878:	f7f6 f930 	bl	8000adc <__aeabi_dcmplt>
 800a87c:	b140      	cbz	r0, 800a890 <_dtoa_r+0x168>
 800a87e:	4638      	mov	r0, r7
 800a880:	f7f5 fe50 	bl	8000524 <__aeabi_i2d>
 800a884:	4622      	mov	r2, r4
 800a886:	462b      	mov	r3, r5
 800a888:	f7f6 f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a88c:	b900      	cbnz	r0, 800a890 <_dtoa_r+0x168>
 800a88e:	3f01      	subs	r7, #1
 800a890:	2f16      	cmp	r7, #22
 800a892:	d851      	bhi.n	800a938 <_dtoa_r+0x210>
 800a894:	4b5b      	ldr	r3, [pc, #364]	@ (800aa04 <_dtoa_r+0x2dc>)
 800a896:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8a2:	f7f6 f91b 	bl	8000adc <__aeabi_dcmplt>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d048      	beq.n	800a93c <_dtoa_r+0x214>
 800a8aa:	3f01      	subs	r7, #1
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	9312      	str	r3, [sp, #72]	@ 0x48
 800a8b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a8b2:	1b9b      	subs	r3, r3, r6
 800a8b4:	1e5a      	subs	r2, r3, #1
 800a8b6:	bf44      	itt	mi
 800a8b8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a8bc:	2300      	movmi	r3, #0
 800a8be:	9208      	str	r2, [sp, #32]
 800a8c0:	bf54      	ite	pl
 800a8c2:	f04f 0800 	movpl.w	r8, #0
 800a8c6:	9308      	strmi	r3, [sp, #32]
 800a8c8:	2f00      	cmp	r7, #0
 800a8ca:	db39      	blt.n	800a940 <_dtoa_r+0x218>
 800a8cc:	9b08      	ldr	r3, [sp, #32]
 800a8ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a8d0:	443b      	add	r3, r7
 800a8d2:	9308      	str	r3, [sp, #32]
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8da:	2b09      	cmp	r3, #9
 800a8dc:	d864      	bhi.n	800a9a8 <_dtoa_r+0x280>
 800a8de:	2b05      	cmp	r3, #5
 800a8e0:	bfc4      	itt	gt
 800a8e2:	3b04      	subgt	r3, #4
 800a8e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a8e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8e8:	f1a3 0302 	sub.w	r3, r3, #2
 800a8ec:	bfcc      	ite	gt
 800a8ee:	2400      	movgt	r4, #0
 800a8f0:	2401      	movle	r4, #1
 800a8f2:	2b03      	cmp	r3, #3
 800a8f4:	d863      	bhi.n	800a9be <_dtoa_r+0x296>
 800a8f6:	e8df f003 	tbb	[pc, r3]
 800a8fa:	372a      	.short	0x372a
 800a8fc:	5535      	.short	0x5535
 800a8fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a902:	441e      	add	r6, r3
 800a904:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a908:	2b20      	cmp	r3, #32
 800a90a:	bfc1      	itttt	gt
 800a90c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a910:	409f      	lslgt	r7, r3
 800a912:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a916:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a91a:	bfd6      	itet	le
 800a91c:	f1c3 0320 	rsble	r3, r3, #32
 800a920:	ea47 0003 	orrgt.w	r0, r7, r3
 800a924:	fa04 f003 	lslle.w	r0, r4, r3
 800a928:	f7f5 fdec 	bl	8000504 <__aeabi_ui2d>
 800a92c:	2201      	movs	r2, #1
 800a92e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a932:	3e01      	subs	r6, #1
 800a934:	9214      	str	r2, [sp, #80]	@ 0x50
 800a936:	e777      	b.n	800a828 <_dtoa_r+0x100>
 800a938:	2301      	movs	r3, #1
 800a93a:	e7b8      	b.n	800a8ae <_dtoa_r+0x186>
 800a93c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a93e:	e7b7      	b.n	800a8b0 <_dtoa_r+0x188>
 800a940:	427b      	negs	r3, r7
 800a942:	930a      	str	r3, [sp, #40]	@ 0x28
 800a944:	2300      	movs	r3, #0
 800a946:	eba8 0807 	sub.w	r8, r8, r7
 800a94a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a94c:	e7c4      	b.n	800a8d8 <_dtoa_r+0x1b0>
 800a94e:	2300      	movs	r3, #0
 800a950:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a954:	2b00      	cmp	r3, #0
 800a956:	dc35      	bgt.n	800a9c4 <_dtoa_r+0x29c>
 800a958:	2301      	movs	r3, #1
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	9307      	str	r3, [sp, #28]
 800a95e:	461a      	mov	r2, r3
 800a960:	920e      	str	r2, [sp, #56]	@ 0x38
 800a962:	e00b      	b.n	800a97c <_dtoa_r+0x254>
 800a964:	2301      	movs	r3, #1
 800a966:	e7f3      	b.n	800a950 <_dtoa_r+0x228>
 800a968:	2300      	movs	r3, #0
 800a96a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a96c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a96e:	18fb      	adds	r3, r7, r3
 800a970:	9300      	str	r3, [sp, #0]
 800a972:	3301      	adds	r3, #1
 800a974:	2b01      	cmp	r3, #1
 800a976:	9307      	str	r3, [sp, #28]
 800a978:	bfb8      	it	lt
 800a97a:	2301      	movlt	r3, #1
 800a97c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a980:	2100      	movs	r1, #0
 800a982:	2204      	movs	r2, #4
 800a984:	f102 0514 	add.w	r5, r2, #20
 800a988:	429d      	cmp	r5, r3
 800a98a:	d91f      	bls.n	800a9cc <_dtoa_r+0x2a4>
 800a98c:	6041      	str	r1, [r0, #4]
 800a98e:	4658      	mov	r0, fp
 800a990:	f000 fd8e 	bl	800b4b0 <_Balloc>
 800a994:	4682      	mov	sl, r0
 800a996:	2800      	cmp	r0, #0
 800a998:	d13c      	bne.n	800aa14 <_dtoa_r+0x2ec>
 800a99a:	4b1b      	ldr	r3, [pc, #108]	@ (800aa08 <_dtoa_r+0x2e0>)
 800a99c:	4602      	mov	r2, r0
 800a99e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a9a2:	e6d8      	b.n	800a756 <_dtoa_r+0x2e>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e7e0      	b.n	800a96a <_dtoa_r+0x242>
 800a9a8:	2401      	movs	r4, #1
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	9307      	str	r3, [sp, #28]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2312      	movs	r3, #18
 800a9bc:	e7d0      	b.n	800a960 <_dtoa_r+0x238>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9c2:	e7f5      	b.n	800a9b0 <_dtoa_r+0x288>
 800a9c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	9307      	str	r3, [sp, #28]
 800a9ca:	e7d7      	b.n	800a97c <_dtoa_r+0x254>
 800a9cc:	3101      	adds	r1, #1
 800a9ce:	0052      	lsls	r2, r2, #1
 800a9d0:	e7d8      	b.n	800a984 <_dtoa_r+0x25c>
 800a9d2:	bf00      	nop
 800a9d4:	f3af 8000 	nop.w
 800a9d8:	636f4361 	.word	0x636f4361
 800a9dc:	3fd287a7 	.word	0x3fd287a7
 800a9e0:	8b60c8b3 	.word	0x8b60c8b3
 800a9e4:	3fc68a28 	.word	0x3fc68a28
 800a9e8:	509f79fb 	.word	0x509f79fb
 800a9ec:	3fd34413 	.word	0x3fd34413
 800a9f0:	0800c7a1 	.word	0x0800c7a1
 800a9f4:	0800c7b8 	.word	0x0800c7b8
 800a9f8:	7ff00000 	.word	0x7ff00000
 800a9fc:	0800c771 	.word	0x0800c771
 800aa00:	3ff80000 	.word	0x3ff80000
 800aa04:	0800c8b0 	.word	0x0800c8b0
 800aa08:	0800c810 	.word	0x0800c810
 800aa0c:	0800c79d 	.word	0x0800c79d
 800aa10:	0800c770 	.word	0x0800c770
 800aa14:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa18:	6018      	str	r0, [r3, #0]
 800aa1a:	9b07      	ldr	r3, [sp, #28]
 800aa1c:	2b0e      	cmp	r3, #14
 800aa1e:	f200 80a4 	bhi.w	800ab6a <_dtoa_r+0x442>
 800aa22:	2c00      	cmp	r4, #0
 800aa24:	f000 80a1 	beq.w	800ab6a <_dtoa_r+0x442>
 800aa28:	2f00      	cmp	r7, #0
 800aa2a:	dd33      	ble.n	800aa94 <_dtoa_r+0x36c>
 800aa2c:	4bad      	ldr	r3, [pc, #692]	@ (800ace4 <_dtoa_r+0x5bc>)
 800aa2e:	f007 020f 	and.w	r2, r7, #15
 800aa32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa36:	ed93 7b00 	vldr	d7, [r3]
 800aa3a:	05f8      	lsls	r0, r7, #23
 800aa3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aa40:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aa44:	d516      	bpl.n	800aa74 <_dtoa_r+0x34c>
 800aa46:	4ba8      	ldr	r3, [pc, #672]	@ (800ace8 <_dtoa_r+0x5c0>)
 800aa48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa50:	f7f5 fefc 	bl	800084c <__aeabi_ddiv>
 800aa54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa58:	f004 040f 	and.w	r4, r4, #15
 800aa5c:	2603      	movs	r6, #3
 800aa5e:	4da2      	ldr	r5, [pc, #648]	@ (800ace8 <_dtoa_r+0x5c0>)
 800aa60:	b954      	cbnz	r4, 800aa78 <_dtoa_r+0x350>
 800aa62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa6a:	f7f5 feef 	bl	800084c <__aeabi_ddiv>
 800aa6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa72:	e028      	b.n	800aac6 <_dtoa_r+0x39e>
 800aa74:	2602      	movs	r6, #2
 800aa76:	e7f2      	b.n	800aa5e <_dtoa_r+0x336>
 800aa78:	07e1      	lsls	r1, r4, #31
 800aa7a:	d508      	bpl.n	800aa8e <_dtoa_r+0x366>
 800aa7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa80:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa84:	f7f5 fdb8 	bl	80005f8 <__aeabi_dmul>
 800aa88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa8c:	3601      	adds	r6, #1
 800aa8e:	1064      	asrs	r4, r4, #1
 800aa90:	3508      	adds	r5, #8
 800aa92:	e7e5      	b.n	800aa60 <_dtoa_r+0x338>
 800aa94:	f000 80d2 	beq.w	800ac3c <_dtoa_r+0x514>
 800aa98:	427c      	negs	r4, r7
 800aa9a:	4b92      	ldr	r3, [pc, #584]	@ (800ace4 <_dtoa_r+0x5bc>)
 800aa9c:	4d92      	ldr	r5, [pc, #584]	@ (800ace8 <_dtoa_r+0x5c0>)
 800aa9e:	f004 020f 	and.w	r2, r4, #15
 800aaa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaae:	f7f5 fda3 	bl	80005f8 <__aeabi_dmul>
 800aab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aab6:	1124      	asrs	r4, r4, #4
 800aab8:	2300      	movs	r3, #0
 800aaba:	2602      	movs	r6, #2
 800aabc:	2c00      	cmp	r4, #0
 800aabe:	f040 80b2 	bne.w	800ac26 <_dtoa_r+0x4fe>
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1d3      	bne.n	800aa6e <_dtoa_r+0x346>
 800aac6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aac8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f000 80b7 	beq.w	800ac40 <_dtoa_r+0x518>
 800aad2:	4b86      	ldr	r3, [pc, #536]	@ (800acec <_dtoa_r+0x5c4>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	4620      	mov	r0, r4
 800aad8:	4629      	mov	r1, r5
 800aada:	f7f5 ffff 	bl	8000adc <__aeabi_dcmplt>
 800aade:	2800      	cmp	r0, #0
 800aae0:	f000 80ae 	beq.w	800ac40 <_dtoa_r+0x518>
 800aae4:	9b07      	ldr	r3, [sp, #28]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f000 80aa 	beq.w	800ac40 <_dtoa_r+0x518>
 800aaec:	9b00      	ldr	r3, [sp, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	dd37      	ble.n	800ab62 <_dtoa_r+0x43a>
 800aaf2:	1e7b      	subs	r3, r7, #1
 800aaf4:	9304      	str	r3, [sp, #16]
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	4b7d      	ldr	r3, [pc, #500]	@ (800acf0 <_dtoa_r+0x5c8>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	4629      	mov	r1, r5
 800aafe:	f7f5 fd7b 	bl	80005f8 <__aeabi_dmul>
 800ab02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab06:	9c00      	ldr	r4, [sp, #0]
 800ab08:	3601      	adds	r6, #1
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	f7f5 fd0a 	bl	8000524 <__aeabi_i2d>
 800ab10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab14:	f7f5 fd70 	bl	80005f8 <__aeabi_dmul>
 800ab18:	4b76      	ldr	r3, [pc, #472]	@ (800acf4 <_dtoa_r+0x5cc>)
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f7f5 fbb6 	bl	800028c <__adddf3>
 800ab20:	4605      	mov	r5, r0
 800ab22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ab26:	2c00      	cmp	r4, #0
 800ab28:	f040 808d 	bne.w	800ac46 <_dtoa_r+0x51e>
 800ab2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab30:	4b71      	ldr	r3, [pc, #452]	@ (800acf8 <_dtoa_r+0x5d0>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	f7f5 fba8 	bl	8000288 <__aeabi_dsub>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab40:	462a      	mov	r2, r5
 800ab42:	4633      	mov	r3, r6
 800ab44:	f7f5 ffe8 	bl	8000b18 <__aeabi_dcmpgt>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	f040 828b 	bne.w	800b064 <_dtoa_r+0x93c>
 800ab4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab52:	462a      	mov	r2, r5
 800ab54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ab58:	f7f5 ffc0 	bl	8000adc <__aeabi_dcmplt>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	f040 8128 	bne.w	800adb2 <_dtoa_r+0x68a>
 800ab62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ab66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ab6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f2c0 815a 	blt.w	800ae26 <_dtoa_r+0x6fe>
 800ab72:	2f0e      	cmp	r7, #14
 800ab74:	f300 8157 	bgt.w	800ae26 <_dtoa_r+0x6fe>
 800ab78:	4b5a      	ldr	r3, [pc, #360]	@ (800ace4 <_dtoa_r+0x5bc>)
 800ab7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab7e:	ed93 7b00 	vldr	d7, [r3]
 800ab82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	ed8d 7b00 	vstr	d7, [sp]
 800ab8a:	da03      	bge.n	800ab94 <_dtoa_r+0x46c>
 800ab8c:	9b07      	ldr	r3, [sp, #28]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f340 8101 	ble.w	800ad96 <_dtoa_r+0x66e>
 800ab94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ab98:	4656      	mov	r6, sl
 800ab9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab9e:	4620      	mov	r0, r4
 800aba0:	4629      	mov	r1, r5
 800aba2:	f7f5 fe53 	bl	800084c <__aeabi_ddiv>
 800aba6:	f7f5 ffd7 	bl	8000b58 <__aeabi_d2iz>
 800abaa:	4680      	mov	r8, r0
 800abac:	f7f5 fcba 	bl	8000524 <__aeabi_i2d>
 800abb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abb4:	f7f5 fd20 	bl	80005f8 <__aeabi_dmul>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	4620      	mov	r0, r4
 800abbe:	4629      	mov	r1, r5
 800abc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800abc4:	f7f5 fb60 	bl	8000288 <__aeabi_dsub>
 800abc8:	f806 4b01 	strb.w	r4, [r6], #1
 800abcc:	9d07      	ldr	r5, [sp, #28]
 800abce:	eba6 040a 	sub.w	r4, r6, sl
 800abd2:	42a5      	cmp	r5, r4
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	f040 8117 	bne.w	800ae0a <_dtoa_r+0x6e2>
 800abdc:	f7f5 fb56 	bl	800028c <__adddf3>
 800abe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abe4:	4604      	mov	r4, r0
 800abe6:	460d      	mov	r5, r1
 800abe8:	f7f5 ff96 	bl	8000b18 <__aeabi_dcmpgt>
 800abec:	2800      	cmp	r0, #0
 800abee:	f040 80f9 	bne.w	800ade4 <_dtoa_r+0x6bc>
 800abf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abf6:	4620      	mov	r0, r4
 800abf8:	4629      	mov	r1, r5
 800abfa:	f7f5 ff65 	bl	8000ac8 <__aeabi_dcmpeq>
 800abfe:	b118      	cbz	r0, 800ac08 <_dtoa_r+0x4e0>
 800ac00:	f018 0f01 	tst.w	r8, #1
 800ac04:	f040 80ee 	bne.w	800ade4 <_dtoa_r+0x6bc>
 800ac08:	4649      	mov	r1, r9
 800ac0a:	4658      	mov	r0, fp
 800ac0c:	f000 fc90 	bl	800b530 <_Bfree>
 800ac10:	2300      	movs	r3, #0
 800ac12:	7033      	strb	r3, [r6, #0]
 800ac14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac16:	3701      	adds	r7, #1
 800ac18:	601f      	str	r7, [r3, #0]
 800ac1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 831d 	beq.w	800b25c <_dtoa_r+0xb34>
 800ac22:	601e      	str	r6, [r3, #0]
 800ac24:	e31a      	b.n	800b25c <_dtoa_r+0xb34>
 800ac26:	07e2      	lsls	r2, r4, #31
 800ac28:	d505      	bpl.n	800ac36 <_dtoa_r+0x50e>
 800ac2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac2e:	f7f5 fce3 	bl	80005f8 <__aeabi_dmul>
 800ac32:	3601      	adds	r6, #1
 800ac34:	2301      	movs	r3, #1
 800ac36:	1064      	asrs	r4, r4, #1
 800ac38:	3508      	adds	r5, #8
 800ac3a:	e73f      	b.n	800aabc <_dtoa_r+0x394>
 800ac3c:	2602      	movs	r6, #2
 800ac3e:	e742      	b.n	800aac6 <_dtoa_r+0x39e>
 800ac40:	9c07      	ldr	r4, [sp, #28]
 800ac42:	9704      	str	r7, [sp, #16]
 800ac44:	e761      	b.n	800ab0a <_dtoa_r+0x3e2>
 800ac46:	4b27      	ldr	r3, [pc, #156]	@ (800ace4 <_dtoa_r+0x5bc>)
 800ac48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac52:	4454      	add	r4, sl
 800ac54:	2900      	cmp	r1, #0
 800ac56:	d053      	beq.n	800ad00 <_dtoa_r+0x5d8>
 800ac58:	4928      	ldr	r1, [pc, #160]	@ (800acfc <_dtoa_r+0x5d4>)
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	f7f5 fdf6 	bl	800084c <__aeabi_ddiv>
 800ac60:	4633      	mov	r3, r6
 800ac62:	462a      	mov	r2, r5
 800ac64:	f7f5 fb10 	bl	8000288 <__aeabi_dsub>
 800ac68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac6c:	4656      	mov	r6, sl
 800ac6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac72:	f7f5 ff71 	bl	8000b58 <__aeabi_d2iz>
 800ac76:	4605      	mov	r5, r0
 800ac78:	f7f5 fc54 	bl	8000524 <__aeabi_i2d>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	460b      	mov	r3, r1
 800ac80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac84:	f7f5 fb00 	bl	8000288 <__aeabi_dsub>
 800ac88:	3530      	adds	r5, #48	@ 0x30
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac92:	f806 5b01 	strb.w	r5, [r6], #1
 800ac96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac9a:	f7f5 ff1f 	bl	8000adc <__aeabi_dcmplt>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d171      	bne.n	800ad86 <_dtoa_r+0x65e>
 800aca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aca6:	4911      	ldr	r1, [pc, #68]	@ (800acec <_dtoa_r+0x5c4>)
 800aca8:	2000      	movs	r0, #0
 800acaa:	f7f5 faed 	bl	8000288 <__aeabi_dsub>
 800acae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800acb2:	f7f5 ff13 	bl	8000adc <__aeabi_dcmplt>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	f040 8095 	bne.w	800ade6 <_dtoa_r+0x6be>
 800acbc:	42a6      	cmp	r6, r4
 800acbe:	f43f af50 	beq.w	800ab62 <_dtoa_r+0x43a>
 800acc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800acc6:	4b0a      	ldr	r3, [pc, #40]	@ (800acf0 <_dtoa_r+0x5c8>)
 800acc8:	2200      	movs	r2, #0
 800acca:	f7f5 fc95 	bl	80005f8 <__aeabi_dmul>
 800acce:	4b08      	ldr	r3, [pc, #32]	@ (800acf0 <_dtoa_r+0x5c8>)
 800acd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800acd4:	2200      	movs	r2, #0
 800acd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acda:	f7f5 fc8d 	bl	80005f8 <__aeabi_dmul>
 800acde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ace2:	e7c4      	b.n	800ac6e <_dtoa_r+0x546>
 800ace4:	0800c8b0 	.word	0x0800c8b0
 800ace8:	0800c888 	.word	0x0800c888
 800acec:	3ff00000 	.word	0x3ff00000
 800acf0:	40240000 	.word	0x40240000
 800acf4:	401c0000 	.word	0x401c0000
 800acf8:	40140000 	.word	0x40140000
 800acfc:	3fe00000 	.word	0x3fe00000
 800ad00:	4631      	mov	r1, r6
 800ad02:	4628      	mov	r0, r5
 800ad04:	f7f5 fc78 	bl	80005f8 <__aeabi_dmul>
 800ad08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad0c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ad0e:	4656      	mov	r6, sl
 800ad10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad14:	f7f5 ff20 	bl	8000b58 <__aeabi_d2iz>
 800ad18:	4605      	mov	r5, r0
 800ad1a:	f7f5 fc03 	bl	8000524 <__aeabi_i2d>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad26:	f7f5 faaf 	bl	8000288 <__aeabi_dsub>
 800ad2a:	3530      	adds	r5, #48	@ 0x30
 800ad2c:	f806 5b01 	strb.w	r5, [r6], #1
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	42a6      	cmp	r6, r4
 800ad36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad3a:	f04f 0200 	mov.w	r2, #0
 800ad3e:	d124      	bne.n	800ad8a <_dtoa_r+0x662>
 800ad40:	4bac      	ldr	r3, [pc, #688]	@ (800aff4 <_dtoa_r+0x8cc>)
 800ad42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ad46:	f7f5 faa1 	bl	800028c <__adddf3>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad52:	f7f5 fee1 	bl	8000b18 <__aeabi_dcmpgt>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d145      	bne.n	800ade6 <_dtoa_r+0x6be>
 800ad5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad5e:	49a5      	ldr	r1, [pc, #660]	@ (800aff4 <_dtoa_r+0x8cc>)
 800ad60:	2000      	movs	r0, #0
 800ad62:	f7f5 fa91 	bl	8000288 <__aeabi_dsub>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad6e:	f7f5 feb5 	bl	8000adc <__aeabi_dcmplt>
 800ad72:	2800      	cmp	r0, #0
 800ad74:	f43f aef5 	beq.w	800ab62 <_dtoa_r+0x43a>
 800ad78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ad7a:	1e73      	subs	r3, r6, #1
 800ad7c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad82:	2b30      	cmp	r3, #48	@ 0x30
 800ad84:	d0f8      	beq.n	800ad78 <_dtoa_r+0x650>
 800ad86:	9f04      	ldr	r7, [sp, #16]
 800ad88:	e73e      	b.n	800ac08 <_dtoa_r+0x4e0>
 800ad8a:	4b9b      	ldr	r3, [pc, #620]	@ (800aff8 <_dtoa_r+0x8d0>)
 800ad8c:	f7f5 fc34 	bl	80005f8 <__aeabi_dmul>
 800ad90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad94:	e7bc      	b.n	800ad10 <_dtoa_r+0x5e8>
 800ad96:	d10c      	bne.n	800adb2 <_dtoa_r+0x68a>
 800ad98:	4b98      	ldr	r3, [pc, #608]	@ (800affc <_dtoa_r+0x8d4>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ada0:	f7f5 fc2a 	bl	80005f8 <__aeabi_dmul>
 800ada4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ada8:	f7f5 feac 	bl	8000b04 <__aeabi_dcmpge>
 800adac:	2800      	cmp	r0, #0
 800adae:	f000 8157 	beq.w	800b060 <_dtoa_r+0x938>
 800adb2:	2400      	movs	r4, #0
 800adb4:	4625      	mov	r5, r4
 800adb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adb8:	43db      	mvns	r3, r3
 800adba:	9304      	str	r3, [sp, #16]
 800adbc:	4656      	mov	r6, sl
 800adbe:	2700      	movs	r7, #0
 800adc0:	4621      	mov	r1, r4
 800adc2:	4658      	mov	r0, fp
 800adc4:	f000 fbb4 	bl	800b530 <_Bfree>
 800adc8:	2d00      	cmp	r5, #0
 800adca:	d0dc      	beq.n	800ad86 <_dtoa_r+0x65e>
 800adcc:	b12f      	cbz	r7, 800adda <_dtoa_r+0x6b2>
 800adce:	42af      	cmp	r7, r5
 800add0:	d003      	beq.n	800adda <_dtoa_r+0x6b2>
 800add2:	4639      	mov	r1, r7
 800add4:	4658      	mov	r0, fp
 800add6:	f000 fbab 	bl	800b530 <_Bfree>
 800adda:	4629      	mov	r1, r5
 800addc:	4658      	mov	r0, fp
 800adde:	f000 fba7 	bl	800b530 <_Bfree>
 800ade2:	e7d0      	b.n	800ad86 <_dtoa_r+0x65e>
 800ade4:	9704      	str	r7, [sp, #16]
 800ade6:	4633      	mov	r3, r6
 800ade8:	461e      	mov	r6, r3
 800adea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adee:	2a39      	cmp	r2, #57	@ 0x39
 800adf0:	d107      	bne.n	800ae02 <_dtoa_r+0x6da>
 800adf2:	459a      	cmp	sl, r3
 800adf4:	d1f8      	bne.n	800ade8 <_dtoa_r+0x6c0>
 800adf6:	9a04      	ldr	r2, [sp, #16]
 800adf8:	3201      	adds	r2, #1
 800adfa:	9204      	str	r2, [sp, #16]
 800adfc:	2230      	movs	r2, #48	@ 0x30
 800adfe:	f88a 2000 	strb.w	r2, [sl]
 800ae02:	781a      	ldrb	r2, [r3, #0]
 800ae04:	3201      	adds	r2, #1
 800ae06:	701a      	strb	r2, [r3, #0]
 800ae08:	e7bd      	b.n	800ad86 <_dtoa_r+0x65e>
 800ae0a:	4b7b      	ldr	r3, [pc, #492]	@ (800aff8 <_dtoa_r+0x8d0>)
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f7f5 fbf3 	bl	80005f8 <__aeabi_dmul>
 800ae12:	2200      	movs	r2, #0
 800ae14:	2300      	movs	r3, #0
 800ae16:	4604      	mov	r4, r0
 800ae18:	460d      	mov	r5, r1
 800ae1a:	f7f5 fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	f43f aebb 	beq.w	800ab9a <_dtoa_r+0x472>
 800ae24:	e6f0      	b.n	800ac08 <_dtoa_r+0x4e0>
 800ae26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ae28:	2a00      	cmp	r2, #0
 800ae2a:	f000 80db 	beq.w	800afe4 <_dtoa_r+0x8bc>
 800ae2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae30:	2a01      	cmp	r2, #1
 800ae32:	f300 80bf 	bgt.w	800afb4 <_dtoa_r+0x88c>
 800ae36:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ae38:	2a00      	cmp	r2, #0
 800ae3a:	f000 80b7 	beq.w	800afac <_dtoa_r+0x884>
 800ae3e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ae42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ae44:	4646      	mov	r6, r8
 800ae46:	9a08      	ldr	r2, [sp, #32]
 800ae48:	2101      	movs	r1, #1
 800ae4a:	441a      	add	r2, r3
 800ae4c:	4658      	mov	r0, fp
 800ae4e:	4498      	add	r8, r3
 800ae50:	9208      	str	r2, [sp, #32]
 800ae52:	f000 fc21 	bl	800b698 <__i2b>
 800ae56:	4605      	mov	r5, r0
 800ae58:	b15e      	cbz	r6, 800ae72 <_dtoa_r+0x74a>
 800ae5a:	9b08      	ldr	r3, [sp, #32]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	dd08      	ble.n	800ae72 <_dtoa_r+0x74a>
 800ae60:	42b3      	cmp	r3, r6
 800ae62:	9a08      	ldr	r2, [sp, #32]
 800ae64:	bfa8      	it	ge
 800ae66:	4633      	movge	r3, r6
 800ae68:	eba8 0803 	sub.w	r8, r8, r3
 800ae6c:	1af6      	subs	r6, r6, r3
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	9308      	str	r3, [sp, #32]
 800ae72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae74:	b1f3      	cbz	r3, 800aeb4 <_dtoa_r+0x78c>
 800ae76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f000 80b7 	beq.w	800afec <_dtoa_r+0x8c4>
 800ae7e:	b18c      	cbz	r4, 800aea4 <_dtoa_r+0x77c>
 800ae80:	4629      	mov	r1, r5
 800ae82:	4622      	mov	r2, r4
 800ae84:	4658      	mov	r0, fp
 800ae86:	f000 fcc7 	bl	800b818 <__pow5mult>
 800ae8a:	464a      	mov	r2, r9
 800ae8c:	4601      	mov	r1, r0
 800ae8e:	4605      	mov	r5, r0
 800ae90:	4658      	mov	r0, fp
 800ae92:	f000 fc17 	bl	800b6c4 <__multiply>
 800ae96:	4649      	mov	r1, r9
 800ae98:	9004      	str	r0, [sp, #16]
 800ae9a:	4658      	mov	r0, fp
 800ae9c:	f000 fb48 	bl	800b530 <_Bfree>
 800aea0:	9b04      	ldr	r3, [sp, #16]
 800aea2:	4699      	mov	r9, r3
 800aea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aea6:	1b1a      	subs	r2, r3, r4
 800aea8:	d004      	beq.n	800aeb4 <_dtoa_r+0x78c>
 800aeaa:	4649      	mov	r1, r9
 800aeac:	4658      	mov	r0, fp
 800aeae:	f000 fcb3 	bl	800b818 <__pow5mult>
 800aeb2:	4681      	mov	r9, r0
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	4658      	mov	r0, fp
 800aeb8:	f000 fbee 	bl	800b698 <__i2b>
 800aebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aebe:	4604      	mov	r4, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f000 81cf 	beq.w	800b264 <_dtoa_r+0xb3c>
 800aec6:	461a      	mov	r2, r3
 800aec8:	4601      	mov	r1, r0
 800aeca:	4658      	mov	r0, fp
 800aecc:	f000 fca4 	bl	800b818 <__pow5mult>
 800aed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	4604      	mov	r4, r0
 800aed6:	f300 8095 	bgt.w	800b004 <_dtoa_r+0x8dc>
 800aeda:	9b02      	ldr	r3, [sp, #8]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f040 8087 	bne.w	800aff0 <_dtoa_r+0x8c8>
 800aee2:	9b03      	ldr	r3, [sp, #12]
 800aee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f040 8089 	bne.w	800b000 <_dtoa_r+0x8d8>
 800aeee:	9b03      	ldr	r3, [sp, #12]
 800aef0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aef4:	0d1b      	lsrs	r3, r3, #20
 800aef6:	051b      	lsls	r3, r3, #20
 800aef8:	b12b      	cbz	r3, 800af06 <_dtoa_r+0x7de>
 800aefa:	9b08      	ldr	r3, [sp, #32]
 800aefc:	3301      	adds	r3, #1
 800aefe:	9308      	str	r3, [sp, #32]
 800af00:	f108 0801 	add.w	r8, r8, #1
 800af04:	2301      	movs	r3, #1
 800af06:	930a      	str	r3, [sp, #40]	@ 0x28
 800af08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 81b0 	beq.w	800b270 <_dtoa_r+0xb48>
 800af10:	6923      	ldr	r3, [r4, #16]
 800af12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af16:	6918      	ldr	r0, [r3, #16]
 800af18:	f000 fb72 	bl	800b600 <__hi0bits>
 800af1c:	f1c0 0020 	rsb	r0, r0, #32
 800af20:	9b08      	ldr	r3, [sp, #32]
 800af22:	4418      	add	r0, r3
 800af24:	f010 001f 	ands.w	r0, r0, #31
 800af28:	d077      	beq.n	800b01a <_dtoa_r+0x8f2>
 800af2a:	f1c0 0320 	rsb	r3, r0, #32
 800af2e:	2b04      	cmp	r3, #4
 800af30:	dd6b      	ble.n	800b00a <_dtoa_r+0x8e2>
 800af32:	9b08      	ldr	r3, [sp, #32]
 800af34:	f1c0 001c 	rsb	r0, r0, #28
 800af38:	4403      	add	r3, r0
 800af3a:	4480      	add	r8, r0
 800af3c:	4406      	add	r6, r0
 800af3e:	9308      	str	r3, [sp, #32]
 800af40:	f1b8 0f00 	cmp.w	r8, #0
 800af44:	dd05      	ble.n	800af52 <_dtoa_r+0x82a>
 800af46:	4649      	mov	r1, r9
 800af48:	4642      	mov	r2, r8
 800af4a:	4658      	mov	r0, fp
 800af4c:	f000 fcbe 	bl	800b8cc <__lshift>
 800af50:	4681      	mov	r9, r0
 800af52:	9b08      	ldr	r3, [sp, #32]
 800af54:	2b00      	cmp	r3, #0
 800af56:	dd05      	ble.n	800af64 <_dtoa_r+0x83c>
 800af58:	4621      	mov	r1, r4
 800af5a:	461a      	mov	r2, r3
 800af5c:	4658      	mov	r0, fp
 800af5e:	f000 fcb5 	bl	800b8cc <__lshift>
 800af62:	4604      	mov	r4, r0
 800af64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af66:	2b00      	cmp	r3, #0
 800af68:	d059      	beq.n	800b01e <_dtoa_r+0x8f6>
 800af6a:	4621      	mov	r1, r4
 800af6c:	4648      	mov	r0, r9
 800af6e:	f000 fd19 	bl	800b9a4 <__mcmp>
 800af72:	2800      	cmp	r0, #0
 800af74:	da53      	bge.n	800b01e <_dtoa_r+0x8f6>
 800af76:	1e7b      	subs	r3, r7, #1
 800af78:	9304      	str	r3, [sp, #16]
 800af7a:	4649      	mov	r1, r9
 800af7c:	2300      	movs	r3, #0
 800af7e:	220a      	movs	r2, #10
 800af80:	4658      	mov	r0, fp
 800af82:	f000 faf7 	bl	800b574 <__multadd>
 800af86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af88:	4681      	mov	r9, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f000 8172 	beq.w	800b274 <_dtoa_r+0xb4c>
 800af90:	2300      	movs	r3, #0
 800af92:	4629      	mov	r1, r5
 800af94:	220a      	movs	r2, #10
 800af96:	4658      	mov	r0, fp
 800af98:	f000 faec 	bl	800b574 <__multadd>
 800af9c:	9b00      	ldr	r3, [sp, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	4605      	mov	r5, r0
 800afa2:	dc67      	bgt.n	800b074 <_dtoa_r+0x94c>
 800afa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	dc41      	bgt.n	800b02e <_dtoa_r+0x906>
 800afaa:	e063      	b.n	800b074 <_dtoa_r+0x94c>
 800afac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800afae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800afb2:	e746      	b.n	800ae42 <_dtoa_r+0x71a>
 800afb4:	9b07      	ldr	r3, [sp, #28]
 800afb6:	1e5c      	subs	r4, r3, #1
 800afb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afba:	42a3      	cmp	r3, r4
 800afbc:	bfbf      	itttt	lt
 800afbe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800afc0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800afc2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800afc4:	1ae3      	sublt	r3, r4, r3
 800afc6:	bfb4      	ite	lt
 800afc8:	18d2      	addlt	r2, r2, r3
 800afca:	1b1c      	subge	r4, r3, r4
 800afcc:	9b07      	ldr	r3, [sp, #28]
 800afce:	bfbc      	itt	lt
 800afd0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800afd2:	2400      	movlt	r4, #0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	bfb5      	itete	lt
 800afd8:	eba8 0603 	sublt.w	r6, r8, r3
 800afdc:	9b07      	ldrge	r3, [sp, #28]
 800afde:	2300      	movlt	r3, #0
 800afe0:	4646      	movge	r6, r8
 800afe2:	e730      	b.n	800ae46 <_dtoa_r+0x71e>
 800afe4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800afe6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800afe8:	4646      	mov	r6, r8
 800afea:	e735      	b.n	800ae58 <_dtoa_r+0x730>
 800afec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afee:	e75c      	b.n	800aeaa <_dtoa_r+0x782>
 800aff0:	2300      	movs	r3, #0
 800aff2:	e788      	b.n	800af06 <_dtoa_r+0x7de>
 800aff4:	3fe00000 	.word	0x3fe00000
 800aff8:	40240000 	.word	0x40240000
 800affc:	40140000 	.word	0x40140000
 800b000:	9b02      	ldr	r3, [sp, #8]
 800b002:	e780      	b.n	800af06 <_dtoa_r+0x7de>
 800b004:	2300      	movs	r3, #0
 800b006:	930a      	str	r3, [sp, #40]	@ 0x28
 800b008:	e782      	b.n	800af10 <_dtoa_r+0x7e8>
 800b00a:	d099      	beq.n	800af40 <_dtoa_r+0x818>
 800b00c:	9a08      	ldr	r2, [sp, #32]
 800b00e:	331c      	adds	r3, #28
 800b010:	441a      	add	r2, r3
 800b012:	4498      	add	r8, r3
 800b014:	441e      	add	r6, r3
 800b016:	9208      	str	r2, [sp, #32]
 800b018:	e792      	b.n	800af40 <_dtoa_r+0x818>
 800b01a:	4603      	mov	r3, r0
 800b01c:	e7f6      	b.n	800b00c <_dtoa_r+0x8e4>
 800b01e:	9b07      	ldr	r3, [sp, #28]
 800b020:	9704      	str	r7, [sp, #16]
 800b022:	2b00      	cmp	r3, #0
 800b024:	dc20      	bgt.n	800b068 <_dtoa_r+0x940>
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b02a:	2b02      	cmp	r3, #2
 800b02c:	dd1e      	ble.n	800b06c <_dtoa_r+0x944>
 800b02e:	9b00      	ldr	r3, [sp, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	f47f aec0 	bne.w	800adb6 <_dtoa_r+0x68e>
 800b036:	4621      	mov	r1, r4
 800b038:	2205      	movs	r2, #5
 800b03a:	4658      	mov	r0, fp
 800b03c:	f000 fa9a 	bl	800b574 <__multadd>
 800b040:	4601      	mov	r1, r0
 800b042:	4604      	mov	r4, r0
 800b044:	4648      	mov	r0, r9
 800b046:	f000 fcad 	bl	800b9a4 <__mcmp>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	f77f aeb3 	ble.w	800adb6 <_dtoa_r+0x68e>
 800b050:	4656      	mov	r6, sl
 800b052:	2331      	movs	r3, #49	@ 0x31
 800b054:	f806 3b01 	strb.w	r3, [r6], #1
 800b058:	9b04      	ldr	r3, [sp, #16]
 800b05a:	3301      	adds	r3, #1
 800b05c:	9304      	str	r3, [sp, #16]
 800b05e:	e6ae      	b.n	800adbe <_dtoa_r+0x696>
 800b060:	9c07      	ldr	r4, [sp, #28]
 800b062:	9704      	str	r7, [sp, #16]
 800b064:	4625      	mov	r5, r4
 800b066:	e7f3      	b.n	800b050 <_dtoa_r+0x928>
 800b068:	9b07      	ldr	r3, [sp, #28]
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 8104 	beq.w	800b27c <_dtoa_r+0xb54>
 800b074:	2e00      	cmp	r6, #0
 800b076:	dd05      	ble.n	800b084 <_dtoa_r+0x95c>
 800b078:	4629      	mov	r1, r5
 800b07a:	4632      	mov	r2, r6
 800b07c:	4658      	mov	r0, fp
 800b07e:	f000 fc25 	bl	800b8cc <__lshift>
 800b082:	4605      	mov	r5, r0
 800b084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b086:	2b00      	cmp	r3, #0
 800b088:	d05a      	beq.n	800b140 <_dtoa_r+0xa18>
 800b08a:	6869      	ldr	r1, [r5, #4]
 800b08c:	4658      	mov	r0, fp
 800b08e:	f000 fa0f 	bl	800b4b0 <_Balloc>
 800b092:	4606      	mov	r6, r0
 800b094:	b928      	cbnz	r0, 800b0a2 <_dtoa_r+0x97a>
 800b096:	4b84      	ldr	r3, [pc, #528]	@ (800b2a8 <_dtoa_r+0xb80>)
 800b098:	4602      	mov	r2, r0
 800b09a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b09e:	f7ff bb5a 	b.w	800a756 <_dtoa_r+0x2e>
 800b0a2:	692a      	ldr	r2, [r5, #16]
 800b0a4:	3202      	adds	r2, #2
 800b0a6:	0092      	lsls	r2, r2, #2
 800b0a8:	f105 010c 	add.w	r1, r5, #12
 800b0ac:	300c      	adds	r0, #12
 800b0ae:	f000 ffaf 	bl	800c010 <memcpy>
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	4631      	mov	r1, r6
 800b0b6:	4658      	mov	r0, fp
 800b0b8:	f000 fc08 	bl	800b8cc <__lshift>
 800b0bc:	f10a 0301 	add.w	r3, sl, #1
 800b0c0:	9307      	str	r3, [sp, #28]
 800b0c2:	9b00      	ldr	r3, [sp, #0]
 800b0c4:	4453      	add	r3, sl
 800b0c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0c8:	9b02      	ldr	r3, [sp, #8]
 800b0ca:	f003 0301 	and.w	r3, r3, #1
 800b0ce:	462f      	mov	r7, r5
 800b0d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	9b07      	ldr	r3, [sp, #28]
 800b0d6:	4621      	mov	r1, r4
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	4648      	mov	r0, r9
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	f7ff fa9a 	bl	800a616 <quorem>
 800b0e2:	4639      	mov	r1, r7
 800b0e4:	9002      	str	r0, [sp, #8]
 800b0e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b0ea:	4648      	mov	r0, r9
 800b0ec:	f000 fc5a 	bl	800b9a4 <__mcmp>
 800b0f0:	462a      	mov	r2, r5
 800b0f2:	9008      	str	r0, [sp, #32]
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	4658      	mov	r0, fp
 800b0f8:	f000 fc70 	bl	800b9dc <__mdiff>
 800b0fc:	68c2      	ldr	r2, [r0, #12]
 800b0fe:	4606      	mov	r6, r0
 800b100:	bb02      	cbnz	r2, 800b144 <_dtoa_r+0xa1c>
 800b102:	4601      	mov	r1, r0
 800b104:	4648      	mov	r0, r9
 800b106:	f000 fc4d 	bl	800b9a4 <__mcmp>
 800b10a:	4602      	mov	r2, r0
 800b10c:	4631      	mov	r1, r6
 800b10e:	4658      	mov	r0, fp
 800b110:	920e      	str	r2, [sp, #56]	@ 0x38
 800b112:	f000 fa0d 	bl	800b530 <_Bfree>
 800b116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b118:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b11a:	9e07      	ldr	r6, [sp, #28]
 800b11c:	ea43 0102 	orr.w	r1, r3, r2
 800b120:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b122:	4319      	orrs	r1, r3
 800b124:	d110      	bne.n	800b148 <_dtoa_r+0xa20>
 800b126:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b12a:	d029      	beq.n	800b180 <_dtoa_r+0xa58>
 800b12c:	9b08      	ldr	r3, [sp, #32]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	dd02      	ble.n	800b138 <_dtoa_r+0xa10>
 800b132:	9b02      	ldr	r3, [sp, #8]
 800b134:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b138:	9b00      	ldr	r3, [sp, #0]
 800b13a:	f883 8000 	strb.w	r8, [r3]
 800b13e:	e63f      	b.n	800adc0 <_dtoa_r+0x698>
 800b140:	4628      	mov	r0, r5
 800b142:	e7bb      	b.n	800b0bc <_dtoa_r+0x994>
 800b144:	2201      	movs	r2, #1
 800b146:	e7e1      	b.n	800b10c <_dtoa_r+0x9e4>
 800b148:	9b08      	ldr	r3, [sp, #32]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	db04      	blt.n	800b158 <_dtoa_r+0xa30>
 800b14e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b150:	430b      	orrs	r3, r1
 800b152:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b154:	430b      	orrs	r3, r1
 800b156:	d120      	bne.n	800b19a <_dtoa_r+0xa72>
 800b158:	2a00      	cmp	r2, #0
 800b15a:	dded      	ble.n	800b138 <_dtoa_r+0xa10>
 800b15c:	4649      	mov	r1, r9
 800b15e:	2201      	movs	r2, #1
 800b160:	4658      	mov	r0, fp
 800b162:	f000 fbb3 	bl	800b8cc <__lshift>
 800b166:	4621      	mov	r1, r4
 800b168:	4681      	mov	r9, r0
 800b16a:	f000 fc1b 	bl	800b9a4 <__mcmp>
 800b16e:	2800      	cmp	r0, #0
 800b170:	dc03      	bgt.n	800b17a <_dtoa_r+0xa52>
 800b172:	d1e1      	bne.n	800b138 <_dtoa_r+0xa10>
 800b174:	f018 0f01 	tst.w	r8, #1
 800b178:	d0de      	beq.n	800b138 <_dtoa_r+0xa10>
 800b17a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b17e:	d1d8      	bne.n	800b132 <_dtoa_r+0xa0a>
 800b180:	9a00      	ldr	r2, [sp, #0]
 800b182:	2339      	movs	r3, #57	@ 0x39
 800b184:	7013      	strb	r3, [r2, #0]
 800b186:	4633      	mov	r3, r6
 800b188:	461e      	mov	r6, r3
 800b18a:	3b01      	subs	r3, #1
 800b18c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b190:	2a39      	cmp	r2, #57	@ 0x39
 800b192:	d052      	beq.n	800b23a <_dtoa_r+0xb12>
 800b194:	3201      	adds	r2, #1
 800b196:	701a      	strb	r2, [r3, #0]
 800b198:	e612      	b.n	800adc0 <_dtoa_r+0x698>
 800b19a:	2a00      	cmp	r2, #0
 800b19c:	dd07      	ble.n	800b1ae <_dtoa_r+0xa86>
 800b19e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b1a2:	d0ed      	beq.n	800b180 <_dtoa_r+0xa58>
 800b1a4:	9a00      	ldr	r2, [sp, #0]
 800b1a6:	f108 0301 	add.w	r3, r8, #1
 800b1aa:	7013      	strb	r3, [r2, #0]
 800b1ac:	e608      	b.n	800adc0 <_dtoa_r+0x698>
 800b1ae:	9b07      	ldr	r3, [sp, #28]
 800b1b0:	9a07      	ldr	r2, [sp, #28]
 800b1b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b1b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d028      	beq.n	800b20e <_dtoa_r+0xae6>
 800b1bc:	4649      	mov	r1, r9
 800b1be:	2300      	movs	r3, #0
 800b1c0:	220a      	movs	r2, #10
 800b1c2:	4658      	mov	r0, fp
 800b1c4:	f000 f9d6 	bl	800b574 <__multadd>
 800b1c8:	42af      	cmp	r7, r5
 800b1ca:	4681      	mov	r9, r0
 800b1cc:	f04f 0300 	mov.w	r3, #0
 800b1d0:	f04f 020a 	mov.w	r2, #10
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	4658      	mov	r0, fp
 800b1d8:	d107      	bne.n	800b1ea <_dtoa_r+0xac2>
 800b1da:	f000 f9cb 	bl	800b574 <__multadd>
 800b1de:	4607      	mov	r7, r0
 800b1e0:	4605      	mov	r5, r0
 800b1e2:	9b07      	ldr	r3, [sp, #28]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	9307      	str	r3, [sp, #28]
 800b1e8:	e774      	b.n	800b0d4 <_dtoa_r+0x9ac>
 800b1ea:	f000 f9c3 	bl	800b574 <__multadd>
 800b1ee:	4629      	mov	r1, r5
 800b1f0:	4607      	mov	r7, r0
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	220a      	movs	r2, #10
 800b1f6:	4658      	mov	r0, fp
 800b1f8:	f000 f9bc 	bl	800b574 <__multadd>
 800b1fc:	4605      	mov	r5, r0
 800b1fe:	e7f0      	b.n	800b1e2 <_dtoa_r+0xaba>
 800b200:	9b00      	ldr	r3, [sp, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	bfcc      	ite	gt
 800b206:	461e      	movgt	r6, r3
 800b208:	2601      	movle	r6, #1
 800b20a:	4456      	add	r6, sl
 800b20c:	2700      	movs	r7, #0
 800b20e:	4649      	mov	r1, r9
 800b210:	2201      	movs	r2, #1
 800b212:	4658      	mov	r0, fp
 800b214:	f000 fb5a 	bl	800b8cc <__lshift>
 800b218:	4621      	mov	r1, r4
 800b21a:	4681      	mov	r9, r0
 800b21c:	f000 fbc2 	bl	800b9a4 <__mcmp>
 800b220:	2800      	cmp	r0, #0
 800b222:	dcb0      	bgt.n	800b186 <_dtoa_r+0xa5e>
 800b224:	d102      	bne.n	800b22c <_dtoa_r+0xb04>
 800b226:	f018 0f01 	tst.w	r8, #1
 800b22a:	d1ac      	bne.n	800b186 <_dtoa_r+0xa5e>
 800b22c:	4633      	mov	r3, r6
 800b22e:	461e      	mov	r6, r3
 800b230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b234:	2a30      	cmp	r2, #48	@ 0x30
 800b236:	d0fa      	beq.n	800b22e <_dtoa_r+0xb06>
 800b238:	e5c2      	b.n	800adc0 <_dtoa_r+0x698>
 800b23a:	459a      	cmp	sl, r3
 800b23c:	d1a4      	bne.n	800b188 <_dtoa_r+0xa60>
 800b23e:	9b04      	ldr	r3, [sp, #16]
 800b240:	3301      	adds	r3, #1
 800b242:	9304      	str	r3, [sp, #16]
 800b244:	2331      	movs	r3, #49	@ 0x31
 800b246:	f88a 3000 	strb.w	r3, [sl]
 800b24a:	e5b9      	b.n	800adc0 <_dtoa_r+0x698>
 800b24c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b24e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b2ac <_dtoa_r+0xb84>
 800b252:	b11b      	cbz	r3, 800b25c <_dtoa_r+0xb34>
 800b254:	f10a 0308 	add.w	r3, sl, #8
 800b258:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b25a:	6013      	str	r3, [r2, #0]
 800b25c:	4650      	mov	r0, sl
 800b25e:	b019      	add	sp, #100	@ 0x64
 800b260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b266:	2b01      	cmp	r3, #1
 800b268:	f77f ae37 	ble.w	800aeda <_dtoa_r+0x7b2>
 800b26c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b26e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b270:	2001      	movs	r0, #1
 800b272:	e655      	b.n	800af20 <_dtoa_r+0x7f8>
 800b274:	9b00      	ldr	r3, [sp, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	f77f aed6 	ble.w	800b028 <_dtoa_r+0x900>
 800b27c:	4656      	mov	r6, sl
 800b27e:	4621      	mov	r1, r4
 800b280:	4648      	mov	r0, r9
 800b282:	f7ff f9c8 	bl	800a616 <quorem>
 800b286:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b28a:	f806 8b01 	strb.w	r8, [r6], #1
 800b28e:	9b00      	ldr	r3, [sp, #0]
 800b290:	eba6 020a 	sub.w	r2, r6, sl
 800b294:	4293      	cmp	r3, r2
 800b296:	ddb3      	ble.n	800b200 <_dtoa_r+0xad8>
 800b298:	4649      	mov	r1, r9
 800b29a:	2300      	movs	r3, #0
 800b29c:	220a      	movs	r2, #10
 800b29e:	4658      	mov	r0, fp
 800b2a0:	f000 f968 	bl	800b574 <__multadd>
 800b2a4:	4681      	mov	r9, r0
 800b2a6:	e7ea      	b.n	800b27e <_dtoa_r+0xb56>
 800b2a8:	0800c810 	.word	0x0800c810
 800b2ac:	0800c794 	.word	0x0800c794

0800b2b0 <_free_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	2900      	cmp	r1, #0
 800b2b6:	d041      	beq.n	800b33c <_free_r+0x8c>
 800b2b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2bc:	1f0c      	subs	r4, r1, #4
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	bfb8      	it	lt
 800b2c2:	18e4      	addlt	r4, r4, r3
 800b2c4:	f000 f8e8 	bl	800b498 <__malloc_lock>
 800b2c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b340 <_free_r+0x90>)
 800b2ca:	6813      	ldr	r3, [r2, #0]
 800b2cc:	b933      	cbnz	r3, 800b2dc <_free_r+0x2c>
 800b2ce:	6063      	str	r3, [r4, #4]
 800b2d0:	6014      	str	r4, [r2, #0]
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2d8:	f000 b8e4 	b.w	800b4a4 <__malloc_unlock>
 800b2dc:	42a3      	cmp	r3, r4
 800b2de:	d908      	bls.n	800b2f2 <_free_r+0x42>
 800b2e0:	6820      	ldr	r0, [r4, #0]
 800b2e2:	1821      	adds	r1, r4, r0
 800b2e4:	428b      	cmp	r3, r1
 800b2e6:	bf01      	itttt	eq
 800b2e8:	6819      	ldreq	r1, [r3, #0]
 800b2ea:	685b      	ldreq	r3, [r3, #4]
 800b2ec:	1809      	addeq	r1, r1, r0
 800b2ee:	6021      	streq	r1, [r4, #0]
 800b2f0:	e7ed      	b.n	800b2ce <_free_r+0x1e>
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	b10b      	cbz	r3, 800b2fc <_free_r+0x4c>
 800b2f8:	42a3      	cmp	r3, r4
 800b2fa:	d9fa      	bls.n	800b2f2 <_free_r+0x42>
 800b2fc:	6811      	ldr	r1, [r2, #0]
 800b2fe:	1850      	adds	r0, r2, r1
 800b300:	42a0      	cmp	r0, r4
 800b302:	d10b      	bne.n	800b31c <_free_r+0x6c>
 800b304:	6820      	ldr	r0, [r4, #0]
 800b306:	4401      	add	r1, r0
 800b308:	1850      	adds	r0, r2, r1
 800b30a:	4283      	cmp	r3, r0
 800b30c:	6011      	str	r1, [r2, #0]
 800b30e:	d1e0      	bne.n	800b2d2 <_free_r+0x22>
 800b310:	6818      	ldr	r0, [r3, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	6053      	str	r3, [r2, #4]
 800b316:	4408      	add	r0, r1
 800b318:	6010      	str	r0, [r2, #0]
 800b31a:	e7da      	b.n	800b2d2 <_free_r+0x22>
 800b31c:	d902      	bls.n	800b324 <_free_r+0x74>
 800b31e:	230c      	movs	r3, #12
 800b320:	602b      	str	r3, [r5, #0]
 800b322:	e7d6      	b.n	800b2d2 <_free_r+0x22>
 800b324:	6820      	ldr	r0, [r4, #0]
 800b326:	1821      	adds	r1, r4, r0
 800b328:	428b      	cmp	r3, r1
 800b32a:	bf04      	itt	eq
 800b32c:	6819      	ldreq	r1, [r3, #0]
 800b32e:	685b      	ldreq	r3, [r3, #4]
 800b330:	6063      	str	r3, [r4, #4]
 800b332:	bf04      	itt	eq
 800b334:	1809      	addeq	r1, r1, r0
 800b336:	6021      	streq	r1, [r4, #0]
 800b338:	6054      	str	r4, [r2, #4]
 800b33a:	e7ca      	b.n	800b2d2 <_free_r+0x22>
 800b33c:	bd38      	pop	{r3, r4, r5, pc}
 800b33e:	bf00      	nop
 800b340:	2000218c 	.word	0x2000218c

0800b344 <malloc>:
 800b344:	4b02      	ldr	r3, [pc, #8]	@ (800b350 <malloc+0xc>)
 800b346:	4601      	mov	r1, r0
 800b348:	6818      	ldr	r0, [r3, #0]
 800b34a:	f000 b825 	b.w	800b398 <_malloc_r>
 800b34e:	bf00      	nop
 800b350:	20000108 	.word	0x20000108

0800b354 <sbrk_aligned>:
 800b354:	b570      	push	{r4, r5, r6, lr}
 800b356:	4e0f      	ldr	r6, [pc, #60]	@ (800b394 <sbrk_aligned+0x40>)
 800b358:	460c      	mov	r4, r1
 800b35a:	6831      	ldr	r1, [r6, #0]
 800b35c:	4605      	mov	r5, r0
 800b35e:	b911      	cbnz	r1, 800b366 <sbrk_aligned+0x12>
 800b360:	f000 fe46 	bl	800bff0 <_sbrk_r>
 800b364:	6030      	str	r0, [r6, #0]
 800b366:	4621      	mov	r1, r4
 800b368:	4628      	mov	r0, r5
 800b36a:	f000 fe41 	bl	800bff0 <_sbrk_r>
 800b36e:	1c43      	adds	r3, r0, #1
 800b370:	d103      	bne.n	800b37a <sbrk_aligned+0x26>
 800b372:	f04f 34ff 	mov.w	r4, #4294967295
 800b376:	4620      	mov	r0, r4
 800b378:	bd70      	pop	{r4, r5, r6, pc}
 800b37a:	1cc4      	adds	r4, r0, #3
 800b37c:	f024 0403 	bic.w	r4, r4, #3
 800b380:	42a0      	cmp	r0, r4
 800b382:	d0f8      	beq.n	800b376 <sbrk_aligned+0x22>
 800b384:	1a21      	subs	r1, r4, r0
 800b386:	4628      	mov	r0, r5
 800b388:	f000 fe32 	bl	800bff0 <_sbrk_r>
 800b38c:	3001      	adds	r0, #1
 800b38e:	d1f2      	bne.n	800b376 <sbrk_aligned+0x22>
 800b390:	e7ef      	b.n	800b372 <sbrk_aligned+0x1e>
 800b392:	bf00      	nop
 800b394:	20002188 	.word	0x20002188

0800b398 <_malloc_r>:
 800b398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b39c:	1ccd      	adds	r5, r1, #3
 800b39e:	f025 0503 	bic.w	r5, r5, #3
 800b3a2:	3508      	adds	r5, #8
 800b3a4:	2d0c      	cmp	r5, #12
 800b3a6:	bf38      	it	cc
 800b3a8:	250c      	movcc	r5, #12
 800b3aa:	2d00      	cmp	r5, #0
 800b3ac:	4606      	mov	r6, r0
 800b3ae:	db01      	blt.n	800b3b4 <_malloc_r+0x1c>
 800b3b0:	42a9      	cmp	r1, r5
 800b3b2:	d904      	bls.n	800b3be <_malloc_r+0x26>
 800b3b4:	230c      	movs	r3, #12
 800b3b6:	6033      	str	r3, [r6, #0]
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b494 <_malloc_r+0xfc>
 800b3c2:	f000 f869 	bl	800b498 <__malloc_lock>
 800b3c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b3ca:	461c      	mov	r4, r3
 800b3cc:	bb44      	cbnz	r4, 800b420 <_malloc_r+0x88>
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	f7ff ffbf 	bl	800b354 <sbrk_aligned>
 800b3d6:	1c43      	adds	r3, r0, #1
 800b3d8:	4604      	mov	r4, r0
 800b3da:	d158      	bne.n	800b48e <_malloc_r+0xf6>
 800b3dc:	f8d8 4000 	ldr.w	r4, [r8]
 800b3e0:	4627      	mov	r7, r4
 800b3e2:	2f00      	cmp	r7, #0
 800b3e4:	d143      	bne.n	800b46e <_malloc_r+0xd6>
 800b3e6:	2c00      	cmp	r4, #0
 800b3e8:	d04b      	beq.n	800b482 <_malloc_r+0xea>
 800b3ea:	6823      	ldr	r3, [r4, #0]
 800b3ec:	4639      	mov	r1, r7
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	eb04 0903 	add.w	r9, r4, r3
 800b3f4:	f000 fdfc 	bl	800bff0 <_sbrk_r>
 800b3f8:	4581      	cmp	r9, r0
 800b3fa:	d142      	bne.n	800b482 <_malloc_r+0xea>
 800b3fc:	6821      	ldr	r1, [r4, #0]
 800b3fe:	1a6d      	subs	r5, r5, r1
 800b400:	4629      	mov	r1, r5
 800b402:	4630      	mov	r0, r6
 800b404:	f7ff ffa6 	bl	800b354 <sbrk_aligned>
 800b408:	3001      	adds	r0, #1
 800b40a:	d03a      	beq.n	800b482 <_malloc_r+0xea>
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	442b      	add	r3, r5
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	f8d8 3000 	ldr.w	r3, [r8]
 800b416:	685a      	ldr	r2, [r3, #4]
 800b418:	bb62      	cbnz	r2, 800b474 <_malloc_r+0xdc>
 800b41a:	f8c8 7000 	str.w	r7, [r8]
 800b41e:	e00f      	b.n	800b440 <_malloc_r+0xa8>
 800b420:	6822      	ldr	r2, [r4, #0]
 800b422:	1b52      	subs	r2, r2, r5
 800b424:	d420      	bmi.n	800b468 <_malloc_r+0xd0>
 800b426:	2a0b      	cmp	r2, #11
 800b428:	d917      	bls.n	800b45a <_malloc_r+0xc2>
 800b42a:	1961      	adds	r1, r4, r5
 800b42c:	42a3      	cmp	r3, r4
 800b42e:	6025      	str	r5, [r4, #0]
 800b430:	bf18      	it	ne
 800b432:	6059      	strne	r1, [r3, #4]
 800b434:	6863      	ldr	r3, [r4, #4]
 800b436:	bf08      	it	eq
 800b438:	f8c8 1000 	streq.w	r1, [r8]
 800b43c:	5162      	str	r2, [r4, r5]
 800b43e:	604b      	str	r3, [r1, #4]
 800b440:	4630      	mov	r0, r6
 800b442:	f000 f82f 	bl	800b4a4 <__malloc_unlock>
 800b446:	f104 000b 	add.w	r0, r4, #11
 800b44a:	1d23      	adds	r3, r4, #4
 800b44c:	f020 0007 	bic.w	r0, r0, #7
 800b450:	1ac2      	subs	r2, r0, r3
 800b452:	bf1c      	itt	ne
 800b454:	1a1b      	subne	r3, r3, r0
 800b456:	50a3      	strne	r3, [r4, r2]
 800b458:	e7af      	b.n	800b3ba <_malloc_r+0x22>
 800b45a:	6862      	ldr	r2, [r4, #4]
 800b45c:	42a3      	cmp	r3, r4
 800b45e:	bf0c      	ite	eq
 800b460:	f8c8 2000 	streq.w	r2, [r8]
 800b464:	605a      	strne	r2, [r3, #4]
 800b466:	e7eb      	b.n	800b440 <_malloc_r+0xa8>
 800b468:	4623      	mov	r3, r4
 800b46a:	6864      	ldr	r4, [r4, #4]
 800b46c:	e7ae      	b.n	800b3cc <_malloc_r+0x34>
 800b46e:	463c      	mov	r4, r7
 800b470:	687f      	ldr	r7, [r7, #4]
 800b472:	e7b6      	b.n	800b3e2 <_malloc_r+0x4a>
 800b474:	461a      	mov	r2, r3
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	42a3      	cmp	r3, r4
 800b47a:	d1fb      	bne.n	800b474 <_malloc_r+0xdc>
 800b47c:	2300      	movs	r3, #0
 800b47e:	6053      	str	r3, [r2, #4]
 800b480:	e7de      	b.n	800b440 <_malloc_r+0xa8>
 800b482:	230c      	movs	r3, #12
 800b484:	6033      	str	r3, [r6, #0]
 800b486:	4630      	mov	r0, r6
 800b488:	f000 f80c 	bl	800b4a4 <__malloc_unlock>
 800b48c:	e794      	b.n	800b3b8 <_malloc_r+0x20>
 800b48e:	6005      	str	r5, [r0, #0]
 800b490:	e7d6      	b.n	800b440 <_malloc_r+0xa8>
 800b492:	bf00      	nop
 800b494:	2000218c 	.word	0x2000218c

0800b498 <__malloc_lock>:
 800b498:	4801      	ldr	r0, [pc, #4]	@ (800b4a0 <__malloc_lock+0x8>)
 800b49a:	f7ff b8ba 	b.w	800a612 <__retarget_lock_acquire_recursive>
 800b49e:	bf00      	nop
 800b4a0:	20002184 	.word	0x20002184

0800b4a4 <__malloc_unlock>:
 800b4a4:	4801      	ldr	r0, [pc, #4]	@ (800b4ac <__malloc_unlock+0x8>)
 800b4a6:	f7ff b8b5 	b.w	800a614 <__retarget_lock_release_recursive>
 800b4aa:	bf00      	nop
 800b4ac:	20002184 	.word	0x20002184

0800b4b0 <_Balloc>:
 800b4b0:	b570      	push	{r4, r5, r6, lr}
 800b4b2:	69c6      	ldr	r6, [r0, #28]
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	460d      	mov	r5, r1
 800b4b8:	b976      	cbnz	r6, 800b4d8 <_Balloc+0x28>
 800b4ba:	2010      	movs	r0, #16
 800b4bc:	f7ff ff42 	bl	800b344 <malloc>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	61e0      	str	r0, [r4, #28]
 800b4c4:	b920      	cbnz	r0, 800b4d0 <_Balloc+0x20>
 800b4c6:	4b18      	ldr	r3, [pc, #96]	@ (800b528 <_Balloc+0x78>)
 800b4c8:	4818      	ldr	r0, [pc, #96]	@ (800b52c <_Balloc+0x7c>)
 800b4ca:	216b      	movs	r1, #107	@ 0x6b
 800b4cc:	f000 fdae 	bl	800c02c <__assert_func>
 800b4d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4d4:	6006      	str	r6, [r0, #0]
 800b4d6:	60c6      	str	r6, [r0, #12]
 800b4d8:	69e6      	ldr	r6, [r4, #28]
 800b4da:	68f3      	ldr	r3, [r6, #12]
 800b4dc:	b183      	cbz	r3, 800b500 <_Balloc+0x50>
 800b4de:	69e3      	ldr	r3, [r4, #28]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4e6:	b9b8      	cbnz	r0, 800b518 <_Balloc+0x68>
 800b4e8:	2101      	movs	r1, #1
 800b4ea:	fa01 f605 	lsl.w	r6, r1, r5
 800b4ee:	1d72      	adds	r2, r6, #5
 800b4f0:	0092      	lsls	r2, r2, #2
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f000 fdb8 	bl	800c068 <_calloc_r>
 800b4f8:	b160      	cbz	r0, 800b514 <_Balloc+0x64>
 800b4fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4fe:	e00e      	b.n	800b51e <_Balloc+0x6e>
 800b500:	2221      	movs	r2, #33	@ 0x21
 800b502:	2104      	movs	r1, #4
 800b504:	4620      	mov	r0, r4
 800b506:	f000 fdaf 	bl	800c068 <_calloc_r>
 800b50a:	69e3      	ldr	r3, [r4, #28]
 800b50c:	60f0      	str	r0, [r6, #12]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1e4      	bne.n	800b4de <_Balloc+0x2e>
 800b514:	2000      	movs	r0, #0
 800b516:	bd70      	pop	{r4, r5, r6, pc}
 800b518:	6802      	ldr	r2, [r0, #0]
 800b51a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b51e:	2300      	movs	r3, #0
 800b520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b524:	e7f7      	b.n	800b516 <_Balloc+0x66>
 800b526:	bf00      	nop
 800b528:	0800c7a1 	.word	0x0800c7a1
 800b52c:	0800c821 	.word	0x0800c821

0800b530 <_Bfree>:
 800b530:	b570      	push	{r4, r5, r6, lr}
 800b532:	69c6      	ldr	r6, [r0, #28]
 800b534:	4605      	mov	r5, r0
 800b536:	460c      	mov	r4, r1
 800b538:	b976      	cbnz	r6, 800b558 <_Bfree+0x28>
 800b53a:	2010      	movs	r0, #16
 800b53c:	f7ff ff02 	bl	800b344 <malloc>
 800b540:	4602      	mov	r2, r0
 800b542:	61e8      	str	r0, [r5, #28]
 800b544:	b920      	cbnz	r0, 800b550 <_Bfree+0x20>
 800b546:	4b09      	ldr	r3, [pc, #36]	@ (800b56c <_Bfree+0x3c>)
 800b548:	4809      	ldr	r0, [pc, #36]	@ (800b570 <_Bfree+0x40>)
 800b54a:	218f      	movs	r1, #143	@ 0x8f
 800b54c:	f000 fd6e 	bl	800c02c <__assert_func>
 800b550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b554:	6006      	str	r6, [r0, #0]
 800b556:	60c6      	str	r6, [r0, #12]
 800b558:	b13c      	cbz	r4, 800b56a <_Bfree+0x3a>
 800b55a:	69eb      	ldr	r3, [r5, #28]
 800b55c:	6862      	ldr	r2, [r4, #4]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b564:	6021      	str	r1, [r4, #0]
 800b566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b56a:	bd70      	pop	{r4, r5, r6, pc}
 800b56c:	0800c7a1 	.word	0x0800c7a1
 800b570:	0800c821 	.word	0x0800c821

0800b574 <__multadd>:
 800b574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b578:	690d      	ldr	r5, [r1, #16]
 800b57a:	4607      	mov	r7, r0
 800b57c:	460c      	mov	r4, r1
 800b57e:	461e      	mov	r6, r3
 800b580:	f101 0c14 	add.w	ip, r1, #20
 800b584:	2000      	movs	r0, #0
 800b586:	f8dc 3000 	ldr.w	r3, [ip]
 800b58a:	b299      	uxth	r1, r3
 800b58c:	fb02 6101 	mla	r1, r2, r1, r6
 800b590:	0c1e      	lsrs	r6, r3, #16
 800b592:	0c0b      	lsrs	r3, r1, #16
 800b594:	fb02 3306 	mla	r3, r2, r6, r3
 800b598:	b289      	uxth	r1, r1
 800b59a:	3001      	adds	r0, #1
 800b59c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5a0:	4285      	cmp	r5, r0
 800b5a2:	f84c 1b04 	str.w	r1, [ip], #4
 800b5a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b5aa:	dcec      	bgt.n	800b586 <__multadd+0x12>
 800b5ac:	b30e      	cbz	r6, 800b5f2 <__multadd+0x7e>
 800b5ae:	68a3      	ldr	r3, [r4, #8]
 800b5b0:	42ab      	cmp	r3, r5
 800b5b2:	dc19      	bgt.n	800b5e8 <__multadd+0x74>
 800b5b4:	6861      	ldr	r1, [r4, #4]
 800b5b6:	4638      	mov	r0, r7
 800b5b8:	3101      	adds	r1, #1
 800b5ba:	f7ff ff79 	bl	800b4b0 <_Balloc>
 800b5be:	4680      	mov	r8, r0
 800b5c0:	b928      	cbnz	r0, 800b5ce <__multadd+0x5a>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f8 <__multadd+0x84>)
 800b5c6:	480d      	ldr	r0, [pc, #52]	@ (800b5fc <__multadd+0x88>)
 800b5c8:	21ba      	movs	r1, #186	@ 0xba
 800b5ca:	f000 fd2f 	bl	800c02c <__assert_func>
 800b5ce:	6922      	ldr	r2, [r4, #16]
 800b5d0:	3202      	adds	r2, #2
 800b5d2:	f104 010c 	add.w	r1, r4, #12
 800b5d6:	0092      	lsls	r2, r2, #2
 800b5d8:	300c      	adds	r0, #12
 800b5da:	f000 fd19 	bl	800c010 <memcpy>
 800b5de:	4621      	mov	r1, r4
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f7ff ffa5 	bl	800b530 <_Bfree>
 800b5e6:	4644      	mov	r4, r8
 800b5e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5ec:	3501      	adds	r5, #1
 800b5ee:	615e      	str	r6, [r3, #20]
 800b5f0:	6125      	str	r5, [r4, #16]
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5f8:	0800c810 	.word	0x0800c810
 800b5fc:	0800c821 	.word	0x0800c821

0800b600 <__hi0bits>:
 800b600:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b604:	4603      	mov	r3, r0
 800b606:	bf36      	itet	cc
 800b608:	0403      	lslcc	r3, r0, #16
 800b60a:	2000      	movcs	r0, #0
 800b60c:	2010      	movcc	r0, #16
 800b60e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b612:	bf3c      	itt	cc
 800b614:	021b      	lslcc	r3, r3, #8
 800b616:	3008      	addcc	r0, #8
 800b618:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b61c:	bf3c      	itt	cc
 800b61e:	011b      	lslcc	r3, r3, #4
 800b620:	3004      	addcc	r0, #4
 800b622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b626:	bf3c      	itt	cc
 800b628:	009b      	lslcc	r3, r3, #2
 800b62a:	3002      	addcc	r0, #2
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	db05      	blt.n	800b63c <__hi0bits+0x3c>
 800b630:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b634:	f100 0001 	add.w	r0, r0, #1
 800b638:	bf08      	it	eq
 800b63a:	2020      	moveq	r0, #32
 800b63c:	4770      	bx	lr

0800b63e <__lo0bits>:
 800b63e:	6803      	ldr	r3, [r0, #0]
 800b640:	4602      	mov	r2, r0
 800b642:	f013 0007 	ands.w	r0, r3, #7
 800b646:	d00b      	beq.n	800b660 <__lo0bits+0x22>
 800b648:	07d9      	lsls	r1, r3, #31
 800b64a:	d421      	bmi.n	800b690 <__lo0bits+0x52>
 800b64c:	0798      	lsls	r0, r3, #30
 800b64e:	bf49      	itett	mi
 800b650:	085b      	lsrmi	r3, r3, #1
 800b652:	089b      	lsrpl	r3, r3, #2
 800b654:	2001      	movmi	r0, #1
 800b656:	6013      	strmi	r3, [r2, #0]
 800b658:	bf5c      	itt	pl
 800b65a:	6013      	strpl	r3, [r2, #0]
 800b65c:	2002      	movpl	r0, #2
 800b65e:	4770      	bx	lr
 800b660:	b299      	uxth	r1, r3
 800b662:	b909      	cbnz	r1, 800b668 <__lo0bits+0x2a>
 800b664:	0c1b      	lsrs	r3, r3, #16
 800b666:	2010      	movs	r0, #16
 800b668:	b2d9      	uxtb	r1, r3
 800b66a:	b909      	cbnz	r1, 800b670 <__lo0bits+0x32>
 800b66c:	3008      	adds	r0, #8
 800b66e:	0a1b      	lsrs	r3, r3, #8
 800b670:	0719      	lsls	r1, r3, #28
 800b672:	bf04      	itt	eq
 800b674:	091b      	lsreq	r3, r3, #4
 800b676:	3004      	addeq	r0, #4
 800b678:	0799      	lsls	r1, r3, #30
 800b67a:	bf04      	itt	eq
 800b67c:	089b      	lsreq	r3, r3, #2
 800b67e:	3002      	addeq	r0, #2
 800b680:	07d9      	lsls	r1, r3, #31
 800b682:	d403      	bmi.n	800b68c <__lo0bits+0x4e>
 800b684:	085b      	lsrs	r3, r3, #1
 800b686:	f100 0001 	add.w	r0, r0, #1
 800b68a:	d003      	beq.n	800b694 <__lo0bits+0x56>
 800b68c:	6013      	str	r3, [r2, #0]
 800b68e:	4770      	bx	lr
 800b690:	2000      	movs	r0, #0
 800b692:	4770      	bx	lr
 800b694:	2020      	movs	r0, #32
 800b696:	4770      	bx	lr

0800b698 <__i2b>:
 800b698:	b510      	push	{r4, lr}
 800b69a:	460c      	mov	r4, r1
 800b69c:	2101      	movs	r1, #1
 800b69e:	f7ff ff07 	bl	800b4b0 <_Balloc>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	b928      	cbnz	r0, 800b6b2 <__i2b+0x1a>
 800b6a6:	4b05      	ldr	r3, [pc, #20]	@ (800b6bc <__i2b+0x24>)
 800b6a8:	4805      	ldr	r0, [pc, #20]	@ (800b6c0 <__i2b+0x28>)
 800b6aa:	f240 1145 	movw	r1, #325	@ 0x145
 800b6ae:	f000 fcbd 	bl	800c02c <__assert_func>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	6144      	str	r4, [r0, #20]
 800b6b6:	6103      	str	r3, [r0, #16]
 800b6b8:	bd10      	pop	{r4, pc}
 800b6ba:	bf00      	nop
 800b6bc:	0800c810 	.word	0x0800c810
 800b6c0:	0800c821 	.word	0x0800c821

0800b6c4 <__multiply>:
 800b6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c8:	4614      	mov	r4, r2
 800b6ca:	690a      	ldr	r2, [r1, #16]
 800b6cc:	6923      	ldr	r3, [r4, #16]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	bfa8      	it	ge
 800b6d2:	4623      	movge	r3, r4
 800b6d4:	460f      	mov	r7, r1
 800b6d6:	bfa4      	itt	ge
 800b6d8:	460c      	movge	r4, r1
 800b6da:	461f      	movge	r7, r3
 800b6dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b6e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b6e4:	68a3      	ldr	r3, [r4, #8]
 800b6e6:	6861      	ldr	r1, [r4, #4]
 800b6e8:	eb0a 0609 	add.w	r6, sl, r9
 800b6ec:	42b3      	cmp	r3, r6
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	bfb8      	it	lt
 800b6f2:	3101      	addlt	r1, #1
 800b6f4:	f7ff fedc 	bl	800b4b0 <_Balloc>
 800b6f8:	b930      	cbnz	r0, 800b708 <__multiply+0x44>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	4b44      	ldr	r3, [pc, #272]	@ (800b810 <__multiply+0x14c>)
 800b6fe:	4845      	ldr	r0, [pc, #276]	@ (800b814 <__multiply+0x150>)
 800b700:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b704:	f000 fc92 	bl	800c02c <__assert_func>
 800b708:	f100 0514 	add.w	r5, r0, #20
 800b70c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b710:	462b      	mov	r3, r5
 800b712:	2200      	movs	r2, #0
 800b714:	4543      	cmp	r3, r8
 800b716:	d321      	bcc.n	800b75c <__multiply+0x98>
 800b718:	f107 0114 	add.w	r1, r7, #20
 800b71c:	f104 0214 	add.w	r2, r4, #20
 800b720:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b724:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b728:	9302      	str	r3, [sp, #8]
 800b72a:	1b13      	subs	r3, r2, r4
 800b72c:	3b15      	subs	r3, #21
 800b72e:	f023 0303 	bic.w	r3, r3, #3
 800b732:	3304      	adds	r3, #4
 800b734:	f104 0715 	add.w	r7, r4, #21
 800b738:	42ba      	cmp	r2, r7
 800b73a:	bf38      	it	cc
 800b73c:	2304      	movcc	r3, #4
 800b73e:	9301      	str	r3, [sp, #4]
 800b740:	9b02      	ldr	r3, [sp, #8]
 800b742:	9103      	str	r1, [sp, #12]
 800b744:	428b      	cmp	r3, r1
 800b746:	d80c      	bhi.n	800b762 <__multiply+0x9e>
 800b748:	2e00      	cmp	r6, #0
 800b74a:	dd03      	ble.n	800b754 <__multiply+0x90>
 800b74c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b750:	2b00      	cmp	r3, #0
 800b752:	d05b      	beq.n	800b80c <__multiply+0x148>
 800b754:	6106      	str	r6, [r0, #16]
 800b756:	b005      	add	sp, #20
 800b758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b75c:	f843 2b04 	str.w	r2, [r3], #4
 800b760:	e7d8      	b.n	800b714 <__multiply+0x50>
 800b762:	f8b1 a000 	ldrh.w	sl, [r1]
 800b766:	f1ba 0f00 	cmp.w	sl, #0
 800b76a:	d024      	beq.n	800b7b6 <__multiply+0xf2>
 800b76c:	f104 0e14 	add.w	lr, r4, #20
 800b770:	46a9      	mov	r9, r5
 800b772:	f04f 0c00 	mov.w	ip, #0
 800b776:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b77a:	f8d9 3000 	ldr.w	r3, [r9]
 800b77e:	fa1f fb87 	uxth.w	fp, r7
 800b782:	b29b      	uxth	r3, r3
 800b784:	fb0a 330b 	mla	r3, sl, fp, r3
 800b788:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b78c:	f8d9 7000 	ldr.w	r7, [r9]
 800b790:	4463      	add	r3, ip
 800b792:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b796:	fb0a c70b 	mla	r7, sl, fp, ip
 800b79a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b7a4:	4572      	cmp	r2, lr
 800b7a6:	f849 3b04 	str.w	r3, [r9], #4
 800b7aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b7ae:	d8e2      	bhi.n	800b776 <__multiply+0xb2>
 800b7b0:	9b01      	ldr	r3, [sp, #4]
 800b7b2:	f845 c003 	str.w	ip, [r5, r3]
 800b7b6:	9b03      	ldr	r3, [sp, #12]
 800b7b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b7bc:	3104      	adds	r1, #4
 800b7be:	f1b9 0f00 	cmp.w	r9, #0
 800b7c2:	d021      	beq.n	800b808 <__multiply+0x144>
 800b7c4:	682b      	ldr	r3, [r5, #0]
 800b7c6:	f104 0c14 	add.w	ip, r4, #20
 800b7ca:	46ae      	mov	lr, r5
 800b7cc:	f04f 0a00 	mov.w	sl, #0
 800b7d0:	f8bc b000 	ldrh.w	fp, [ip]
 800b7d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b7d8:	fb09 770b 	mla	r7, r9, fp, r7
 800b7dc:	4457      	add	r7, sl
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b7e4:	f84e 3b04 	str.w	r3, [lr], #4
 800b7e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b7ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7f0:	f8be 3000 	ldrh.w	r3, [lr]
 800b7f4:	fb09 330a 	mla	r3, r9, sl, r3
 800b7f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b7fc:	4562      	cmp	r2, ip
 800b7fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b802:	d8e5      	bhi.n	800b7d0 <__multiply+0x10c>
 800b804:	9f01      	ldr	r7, [sp, #4]
 800b806:	51eb      	str	r3, [r5, r7]
 800b808:	3504      	adds	r5, #4
 800b80a:	e799      	b.n	800b740 <__multiply+0x7c>
 800b80c:	3e01      	subs	r6, #1
 800b80e:	e79b      	b.n	800b748 <__multiply+0x84>
 800b810:	0800c810 	.word	0x0800c810
 800b814:	0800c821 	.word	0x0800c821

0800b818 <__pow5mult>:
 800b818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b81c:	4615      	mov	r5, r2
 800b81e:	f012 0203 	ands.w	r2, r2, #3
 800b822:	4607      	mov	r7, r0
 800b824:	460e      	mov	r6, r1
 800b826:	d007      	beq.n	800b838 <__pow5mult+0x20>
 800b828:	4c25      	ldr	r4, [pc, #148]	@ (800b8c0 <__pow5mult+0xa8>)
 800b82a:	3a01      	subs	r2, #1
 800b82c:	2300      	movs	r3, #0
 800b82e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b832:	f7ff fe9f 	bl	800b574 <__multadd>
 800b836:	4606      	mov	r6, r0
 800b838:	10ad      	asrs	r5, r5, #2
 800b83a:	d03d      	beq.n	800b8b8 <__pow5mult+0xa0>
 800b83c:	69fc      	ldr	r4, [r7, #28]
 800b83e:	b97c      	cbnz	r4, 800b860 <__pow5mult+0x48>
 800b840:	2010      	movs	r0, #16
 800b842:	f7ff fd7f 	bl	800b344 <malloc>
 800b846:	4602      	mov	r2, r0
 800b848:	61f8      	str	r0, [r7, #28]
 800b84a:	b928      	cbnz	r0, 800b858 <__pow5mult+0x40>
 800b84c:	4b1d      	ldr	r3, [pc, #116]	@ (800b8c4 <__pow5mult+0xac>)
 800b84e:	481e      	ldr	r0, [pc, #120]	@ (800b8c8 <__pow5mult+0xb0>)
 800b850:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b854:	f000 fbea 	bl	800c02c <__assert_func>
 800b858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b85c:	6004      	str	r4, [r0, #0]
 800b85e:	60c4      	str	r4, [r0, #12]
 800b860:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b864:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b868:	b94c      	cbnz	r4, 800b87e <__pow5mult+0x66>
 800b86a:	f240 2171 	movw	r1, #625	@ 0x271
 800b86e:	4638      	mov	r0, r7
 800b870:	f7ff ff12 	bl	800b698 <__i2b>
 800b874:	2300      	movs	r3, #0
 800b876:	f8c8 0008 	str.w	r0, [r8, #8]
 800b87a:	4604      	mov	r4, r0
 800b87c:	6003      	str	r3, [r0, #0]
 800b87e:	f04f 0900 	mov.w	r9, #0
 800b882:	07eb      	lsls	r3, r5, #31
 800b884:	d50a      	bpl.n	800b89c <__pow5mult+0x84>
 800b886:	4631      	mov	r1, r6
 800b888:	4622      	mov	r2, r4
 800b88a:	4638      	mov	r0, r7
 800b88c:	f7ff ff1a 	bl	800b6c4 <__multiply>
 800b890:	4631      	mov	r1, r6
 800b892:	4680      	mov	r8, r0
 800b894:	4638      	mov	r0, r7
 800b896:	f7ff fe4b 	bl	800b530 <_Bfree>
 800b89a:	4646      	mov	r6, r8
 800b89c:	106d      	asrs	r5, r5, #1
 800b89e:	d00b      	beq.n	800b8b8 <__pow5mult+0xa0>
 800b8a0:	6820      	ldr	r0, [r4, #0]
 800b8a2:	b938      	cbnz	r0, 800b8b4 <__pow5mult+0x9c>
 800b8a4:	4622      	mov	r2, r4
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	4638      	mov	r0, r7
 800b8aa:	f7ff ff0b 	bl	800b6c4 <__multiply>
 800b8ae:	6020      	str	r0, [r4, #0]
 800b8b0:	f8c0 9000 	str.w	r9, [r0]
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	e7e4      	b.n	800b882 <__pow5mult+0x6a>
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8be:	bf00      	nop
 800b8c0:	0800c87c 	.word	0x0800c87c
 800b8c4:	0800c7a1 	.word	0x0800c7a1
 800b8c8:	0800c821 	.word	0x0800c821

0800b8cc <__lshift>:
 800b8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	6849      	ldr	r1, [r1, #4]
 800b8d4:	6923      	ldr	r3, [r4, #16]
 800b8d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8da:	68a3      	ldr	r3, [r4, #8]
 800b8dc:	4607      	mov	r7, r0
 800b8de:	4691      	mov	r9, r2
 800b8e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8e4:	f108 0601 	add.w	r6, r8, #1
 800b8e8:	42b3      	cmp	r3, r6
 800b8ea:	db0b      	blt.n	800b904 <__lshift+0x38>
 800b8ec:	4638      	mov	r0, r7
 800b8ee:	f7ff fddf 	bl	800b4b0 <_Balloc>
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	b948      	cbnz	r0, 800b90a <__lshift+0x3e>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	4b28      	ldr	r3, [pc, #160]	@ (800b99c <__lshift+0xd0>)
 800b8fa:	4829      	ldr	r0, [pc, #164]	@ (800b9a0 <__lshift+0xd4>)
 800b8fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b900:	f000 fb94 	bl	800c02c <__assert_func>
 800b904:	3101      	adds	r1, #1
 800b906:	005b      	lsls	r3, r3, #1
 800b908:	e7ee      	b.n	800b8e8 <__lshift+0x1c>
 800b90a:	2300      	movs	r3, #0
 800b90c:	f100 0114 	add.w	r1, r0, #20
 800b910:	f100 0210 	add.w	r2, r0, #16
 800b914:	4618      	mov	r0, r3
 800b916:	4553      	cmp	r3, sl
 800b918:	db33      	blt.n	800b982 <__lshift+0xb6>
 800b91a:	6920      	ldr	r0, [r4, #16]
 800b91c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b920:	f104 0314 	add.w	r3, r4, #20
 800b924:	f019 091f 	ands.w	r9, r9, #31
 800b928:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b92c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b930:	d02b      	beq.n	800b98a <__lshift+0xbe>
 800b932:	f1c9 0e20 	rsb	lr, r9, #32
 800b936:	468a      	mov	sl, r1
 800b938:	2200      	movs	r2, #0
 800b93a:	6818      	ldr	r0, [r3, #0]
 800b93c:	fa00 f009 	lsl.w	r0, r0, r9
 800b940:	4310      	orrs	r0, r2
 800b942:	f84a 0b04 	str.w	r0, [sl], #4
 800b946:	f853 2b04 	ldr.w	r2, [r3], #4
 800b94a:	459c      	cmp	ip, r3
 800b94c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b950:	d8f3      	bhi.n	800b93a <__lshift+0x6e>
 800b952:	ebac 0304 	sub.w	r3, ip, r4
 800b956:	3b15      	subs	r3, #21
 800b958:	f023 0303 	bic.w	r3, r3, #3
 800b95c:	3304      	adds	r3, #4
 800b95e:	f104 0015 	add.w	r0, r4, #21
 800b962:	4584      	cmp	ip, r0
 800b964:	bf38      	it	cc
 800b966:	2304      	movcc	r3, #4
 800b968:	50ca      	str	r2, [r1, r3]
 800b96a:	b10a      	cbz	r2, 800b970 <__lshift+0xa4>
 800b96c:	f108 0602 	add.w	r6, r8, #2
 800b970:	3e01      	subs	r6, #1
 800b972:	4638      	mov	r0, r7
 800b974:	612e      	str	r6, [r5, #16]
 800b976:	4621      	mov	r1, r4
 800b978:	f7ff fdda 	bl	800b530 <_Bfree>
 800b97c:	4628      	mov	r0, r5
 800b97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b982:	f842 0f04 	str.w	r0, [r2, #4]!
 800b986:	3301      	adds	r3, #1
 800b988:	e7c5      	b.n	800b916 <__lshift+0x4a>
 800b98a:	3904      	subs	r1, #4
 800b98c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b990:	f841 2f04 	str.w	r2, [r1, #4]!
 800b994:	459c      	cmp	ip, r3
 800b996:	d8f9      	bhi.n	800b98c <__lshift+0xc0>
 800b998:	e7ea      	b.n	800b970 <__lshift+0xa4>
 800b99a:	bf00      	nop
 800b99c:	0800c810 	.word	0x0800c810
 800b9a0:	0800c821 	.word	0x0800c821

0800b9a4 <__mcmp>:
 800b9a4:	690a      	ldr	r2, [r1, #16]
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	6900      	ldr	r0, [r0, #16]
 800b9aa:	1a80      	subs	r0, r0, r2
 800b9ac:	b530      	push	{r4, r5, lr}
 800b9ae:	d10e      	bne.n	800b9ce <__mcmp+0x2a>
 800b9b0:	3314      	adds	r3, #20
 800b9b2:	3114      	adds	r1, #20
 800b9b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b9b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b9bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9c4:	4295      	cmp	r5, r2
 800b9c6:	d003      	beq.n	800b9d0 <__mcmp+0x2c>
 800b9c8:	d205      	bcs.n	800b9d6 <__mcmp+0x32>
 800b9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ce:	bd30      	pop	{r4, r5, pc}
 800b9d0:	42a3      	cmp	r3, r4
 800b9d2:	d3f3      	bcc.n	800b9bc <__mcmp+0x18>
 800b9d4:	e7fb      	b.n	800b9ce <__mcmp+0x2a>
 800b9d6:	2001      	movs	r0, #1
 800b9d8:	e7f9      	b.n	800b9ce <__mcmp+0x2a>
	...

0800b9dc <__mdiff>:
 800b9dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e0:	4689      	mov	r9, r1
 800b9e2:	4606      	mov	r6, r0
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4648      	mov	r0, r9
 800b9e8:	4614      	mov	r4, r2
 800b9ea:	f7ff ffdb 	bl	800b9a4 <__mcmp>
 800b9ee:	1e05      	subs	r5, r0, #0
 800b9f0:	d112      	bne.n	800ba18 <__mdiff+0x3c>
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	f7ff fd5b 	bl	800b4b0 <_Balloc>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	b928      	cbnz	r0, 800ba0a <__mdiff+0x2e>
 800b9fe:	4b3f      	ldr	r3, [pc, #252]	@ (800bafc <__mdiff+0x120>)
 800ba00:	f240 2137 	movw	r1, #567	@ 0x237
 800ba04:	483e      	ldr	r0, [pc, #248]	@ (800bb00 <__mdiff+0x124>)
 800ba06:	f000 fb11 	bl	800c02c <__assert_func>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba10:	4610      	mov	r0, r2
 800ba12:	b003      	add	sp, #12
 800ba14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba18:	bfbc      	itt	lt
 800ba1a:	464b      	movlt	r3, r9
 800ba1c:	46a1      	movlt	r9, r4
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba24:	bfba      	itte	lt
 800ba26:	461c      	movlt	r4, r3
 800ba28:	2501      	movlt	r5, #1
 800ba2a:	2500      	movge	r5, #0
 800ba2c:	f7ff fd40 	bl	800b4b0 <_Balloc>
 800ba30:	4602      	mov	r2, r0
 800ba32:	b918      	cbnz	r0, 800ba3c <__mdiff+0x60>
 800ba34:	4b31      	ldr	r3, [pc, #196]	@ (800bafc <__mdiff+0x120>)
 800ba36:	f240 2145 	movw	r1, #581	@ 0x245
 800ba3a:	e7e3      	b.n	800ba04 <__mdiff+0x28>
 800ba3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba40:	6926      	ldr	r6, [r4, #16]
 800ba42:	60c5      	str	r5, [r0, #12]
 800ba44:	f109 0310 	add.w	r3, r9, #16
 800ba48:	f109 0514 	add.w	r5, r9, #20
 800ba4c:	f104 0e14 	add.w	lr, r4, #20
 800ba50:	f100 0b14 	add.w	fp, r0, #20
 800ba54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ba5c:	9301      	str	r3, [sp, #4]
 800ba5e:	46d9      	mov	r9, fp
 800ba60:	f04f 0c00 	mov.w	ip, #0
 800ba64:	9b01      	ldr	r3, [sp, #4]
 800ba66:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba6e:	9301      	str	r3, [sp, #4]
 800ba70:	fa1f f38a 	uxth.w	r3, sl
 800ba74:	4619      	mov	r1, r3
 800ba76:	b283      	uxth	r3, r0
 800ba78:	1acb      	subs	r3, r1, r3
 800ba7a:	0c00      	lsrs	r0, r0, #16
 800ba7c:	4463      	add	r3, ip
 800ba7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba8c:	4576      	cmp	r6, lr
 800ba8e:	f849 3b04 	str.w	r3, [r9], #4
 800ba92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba96:	d8e5      	bhi.n	800ba64 <__mdiff+0x88>
 800ba98:	1b33      	subs	r3, r6, r4
 800ba9a:	3b15      	subs	r3, #21
 800ba9c:	f023 0303 	bic.w	r3, r3, #3
 800baa0:	3415      	adds	r4, #21
 800baa2:	3304      	adds	r3, #4
 800baa4:	42a6      	cmp	r6, r4
 800baa6:	bf38      	it	cc
 800baa8:	2304      	movcc	r3, #4
 800baaa:	441d      	add	r5, r3
 800baac:	445b      	add	r3, fp
 800baae:	461e      	mov	r6, r3
 800bab0:	462c      	mov	r4, r5
 800bab2:	4544      	cmp	r4, r8
 800bab4:	d30e      	bcc.n	800bad4 <__mdiff+0xf8>
 800bab6:	f108 0103 	add.w	r1, r8, #3
 800baba:	1b49      	subs	r1, r1, r5
 800babc:	f021 0103 	bic.w	r1, r1, #3
 800bac0:	3d03      	subs	r5, #3
 800bac2:	45a8      	cmp	r8, r5
 800bac4:	bf38      	it	cc
 800bac6:	2100      	movcc	r1, #0
 800bac8:	440b      	add	r3, r1
 800baca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bace:	b191      	cbz	r1, 800baf6 <__mdiff+0x11a>
 800bad0:	6117      	str	r7, [r2, #16]
 800bad2:	e79d      	b.n	800ba10 <__mdiff+0x34>
 800bad4:	f854 1b04 	ldr.w	r1, [r4], #4
 800bad8:	46e6      	mov	lr, ip
 800bada:	0c08      	lsrs	r0, r1, #16
 800badc:	fa1c fc81 	uxtah	ip, ip, r1
 800bae0:	4471      	add	r1, lr
 800bae2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bae6:	b289      	uxth	r1, r1
 800bae8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800baec:	f846 1b04 	str.w	r1, [r6], #4
 800baf0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800baf4:	e7dd      	b.n	800bab2 <__mdiff+0xd6>
 800baf6:	3f01      	subs	r7, #1
 800baf8:	e7e7      	b.n	800baca <__mdiff+0xee>
 800bafa:	bf00      	nop
 800bafc:	0800c810 	.word	0x0800c810
 800bb00:	0800c821 	.word	0x0800c821

0800bb04 <__d2b>:
 800bb04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb08:	460f      	mov	r7, r1
 800bb0a:	2101      	movs	r1, #1
 800bb0c:	ec59 8b10 	vmov	r8, r9, d0
 800bb10:	4616      	mov	r6, r2
 800bb12:	f7ff fccd 	bl	800b4b0 <_Balloc>
 800bb16:	4604      	mov	r4, r0
 800bb18:	b930      	cbnz	r0, 800bb28 <__d2b+0x24>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	4b23      	ldr	r3, [pc, #140]	@ (800bbac <__d2b+0xa8>)
 800bb1e:	4824      	ldr	r0, [pc, #144]	@ (800bbb0 <__d2b+0xac>)
 800bb20:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb24:	f000 fa82 	bl	800c02c <__assert_func>
 800bb28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb30:	b10d      	cbz	r5, 800bb36 <__d2b+0x32>
 800bb32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb36:	9301      	str	r3, [sp, #4]
 800bb38:	f1b8 0300 	subs.w	r3, r8, #0
 800bb3c:	d023      	beq.n	800bb86 <__d2b+0x82>
 800bb3e:	4668      	mov	r0, sp
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	f7ff fd7c 	bl	800b63e <__lo0bits>
 800bb46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb4a:	b1d0      	cbz	r0, 800bb82 <__d2b+0x7e>
 800bb4c:	f1c0 0320 	rsb	r3, r0, #32
 800bb50:	fa02 f303 	lsl.w	r3, r2, r3
 800bb54:	430b      	orrs	r3, r1
 800bb56:	40c2      	lsrs	r2, r0
 800bb58:	6163      	str	r3, [r4, #20]
 800bb5a:	9201      	str	r2, [sp, #4]
 800bb5c:	9b01      	ldr	r3, [sp, #4]
 800bb5e:	61a3      	str	r3, [r4, #24]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	bf0c      	ite	eq
 800bb64:	2201      	moveq	r2, #1
 800bb66:	2202      	movne	r2, #2
 800bb68:	6122      	str	r2, [r4, #16]
 800bb6a:	b1a5      	cbz	r5, 800bb96 <__d2b+0x92>
 800bb6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb70:	4405      	add	r5, r0
 800bb72:	603d      	str	r5, [r7, #0]
 800bb74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb78:	6030      	str	r0, [r6, #0]
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	b003      	add	sp, #12
 800bb7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb82:	6161      	str	r1, [r4, #20]
 800bb84:	e7ea      	b.n	800bb5c <__d2b+0x58>
 800bb86:	a801      	add	r0, sp, #4
 800bb88:	f7ff fd59 	bl	800b63e <__lo0bits>
 800bb8c:	9b01      	ldr	r3, [sp, #4]
 800bb8e:	6163      	str	r3, [r4, #20]
 800bb90:	3020      	adds	r0, #32
 800bb92:	2201      	movs	r2, #1
 800bb94:	e7e8      	b.n	800bb68 <__d2b+0x64>
 800bb96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb9e:	6038      	str	r0, [r7, #0]
 800bba0:	6918      	ldr	r0, [r3, #16]
 800bba2:	f7ff fd2d 	bl	800b600 <__hi0bits>
 800bba6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bbaa:	e7e5      	b.n	800bb78 <__d2b+0x74>
 800bbac:	0800c810 	.word	0x0800c810
 800bbb0:	0800c821 	.word	0x0800c821

0800bbb4 <__ssputs_r>:
 800bbb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb8:	688e      	ldr	r6, [r1, #8]
 800bbba:	461f      	mov	r7, r3
 800bbbc:	42be      	cmp	r6, r7
 800bbbe:	680b      	ldr	r3, [r1, #0]
 800bbc0:	4682      	mov	sl, r0
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	4690      	mov	r8, r2
 800bbc6:	d82d      	bhi.n	800bc24 <__ssputs_r+0x70>
 800bbc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bbcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bbd0:	d026      	beq.n	800bc20 <__ssputs_r+0x6c>
 800bbd2:	6965      	ldr	r5, [r4, #20]
 800bbd4:	6909      	ldr	r1, [r1, #16]
 800bbd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbda:	eba3 0901 	sub.w	r9, r3, r1
 800bbde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbe2:	1c7b      	adds	r3, r7, #1
 800bbe4:	444b      	add	r3, r9
 800bbe6:	106d      	asrs	r5, r5, #1
 800bbe8:	429d      	cmp	r5, r3
 800bbea:	bf38      	it	cc
 800bbec:	461d      	movcc	r5, r3
 800bbee:	0553      	lsls	r3, r2, #21
 800bbf0:	d527      	bpl.n	800bc42 <__ssputs_r+0x8e>
 800bbf2:	4629      	mov	r1, r5
 800bbf4:	f7ff fbd0 	bl	800b398 <_malloc_r>
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	b360      	cbz	r0, 800bc56 <__ssputs_r+0xa2>
 800bbfc:	6921      	ldr	r1, [r4, #16]
 800bbfe:	464a      	mov	r2, r9
 800bc00:	f000 fa06 	bl	800c010 <memcpy>
 800bc04:	89a3      	ldrh	r3, [r4, #12]
 800bc06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bc0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc0e:	81a3      	strh	r3, [r4, #12]
 800bc10:	6126      	str	r6, [r4, #16]
 800bc12:	6165      	str	r5, [r4, #20]
 800bc14:	444e      	add	r6, r9
 800bc16:	eba5 0509 	sub.w	r5, r5, r9
 800bc1a:	6026      	str	r6, [r4, #0]
 800bc1c:	60a5      	str	r5, [r4, #8]
 800bc1e:	463e      	mov	r6, r7
 800bc20:	42be      	cmp	r6, r7
 800bc22:	d900      	bls.n	800bc26 <__ssputs_r+0x72>
 800bc24:	463e      	mov	r6, r7
 800bc26:	6820      	ldr	r0, [r4, #0]
 800bc28:	4632      	mov	r2, r6
 800bc2a:	4641      	mov	r1, r8
 800bc2c:	f000 f9c6 	bl	800bfbc <memmove>
 800bc30:	68a3      	ldr	r3, [r4, #8]
 800bc32:	1b9b      	subs	r3, r3, r6
 800bc34:	60a3      	str	r3, [r4, #8]
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	4433      	add	r3, r6
 800bc3a:	6023      	str	r3, [r4, #0]
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc42:	462a      	mov	r2, r5
 800bc44:	f000 fa36 	bl	800c0b4 <_realloc_r>
 800bc48:	4606      	mov	r6, r0
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	d1e0      	bne.n	800bc10 <__ssputs_r+0x5c>
 800bc4e:	6921      	ldr	r1, [r4, #16]
 800bc50:	4650      	mov	r0, sl
 800bc52:	f7ff fb2d 	bl	800b2b0 <_free_r>
 800bc56:	230c      	movs	r3, #12
 800bc58:	f8ca 3000 	str.w	r3, [sl]
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc62:	81a3      	strh	r3, [r4, #12]
 800bc64:	f04f 30ff 	mov.w	r0, #4294967295
 800bc68:	e7e9      	b.n	800bc3e <__ssputs_r+0x8a>
	...

0800bc6c <_svfiprintf_r>:
 800bc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc70:	4698      	mov	r8, r3
 800bc72:	898b      	ldrh	r3, [r1, #12]
 800bc74:	061b      	lsls	r3, r3, #24
 800bc76:	b09d      	sub	sp, #116	@ 0x74
 800bc78:	4607      	mov	r7, r0
 800bc7a:	460d      	mov	r5, r1
 800bc7c:	4614      	mov	r4, r2
 800bc7e:	d510      	bpl.n	800bca2 <_svfiprintf_r+0x36>
 800bc80:	690b      	ldr	r3, [r1, #16]
 800bc82:	b973      	cbnz	r3, 800bca2 <_svfiprintf_r+0x36>
 800bc84:	2140      	movs	r1, #64	@ 0x40
 800bc86:	f7ff fb87 	bl	800b398 <_malloc_r>
 800bc8a:	6028      	str	r0, [r5, #0]
 800bc8c:	6128      	str	r0, [r5, #16]
 800bc8e:	b930      	cbnz	r0, 800bc9e <_svfiprintf_r+0x32>
 800bc90:	230c      	movs	r3, #12
 800bc92:	603b      	str	r3, [r7, #0]
 800bc94:	f04f 30ff 	mov.w	r0, #4294967295
 800bc98:	b01d      	add	sp, #116	@ 0x74
 800bc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9e:	2340      	movs	r3, #64	@ 0x40
 800bca0:	616b      	str	r3, [r5, #20]
 800bca2:	2300      	movs	r3, #0
 800bca4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bca6:	2320      	movs	r3, #32
 800bca8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bcac:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcb0:	2330      	movs	r3, #48	@ 0x30
 800bcb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800be50 <_svfiprintf_r+0x1e4>
 800bcb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bcba:	f04f 0901 	mov.w	r9, #1
 800bcbe:	4623      	mov	r3, r4
 800bcc0:	469a      	mov	sl, r3
 800bcc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcc6:	b10a      	cbz	r2, 800bccc <_svfiprintf_r+0x60>
 800bcc8:	2a25      	cmp	r2, #37	@ 0x25
 800bcca:	d1f9      	bne.n	800bcc0 <_svfiprintf_r+0x54>
 800bccc:	ebba 0b04 	subs.w	fp, sl, r4
 800bcd0:	d00b      	beq.n	800bcea <_svfiprintf_r+0x7e>
 800bcd2:	465b      	mov	r3, fp
 800bcd4:	4622      	mov	r2, r4
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	4638      	mov	r0, r7
 800bcda:	f7ff ff6b 	bl	800bbb4 <__ssputs_r>
 800bcde:	3001      	adds	r0, #1
 800bce0:	f000 80a7 	beq.w	800be32 <_svfiprintf_r+0x1c6>
 800bce4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bce6:	445a      	add	r2, fp
 800bce8:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcea:	f89a 3000 	ldrb.w	r3, [sl]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f000 809f 	beq.w	800be32 <_svfiprintf_r+0x1c6>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcfe:	f10a 0a01 	add.w	sl, sl, #1
 800bd02:	9304      	str	r3, [sp, #16]
 800bd04:	9307      	str	r3, [sp, #28]
 800bd06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd0c:	4654      	mov	r4, sl
 800bd0e:	2205      	movs	r2, #5
 800bd10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd14:	484e      	ldr	r0, [pc, #312]	@ (800be50 <_svfiprintf_r+0x1e4>)
 800bd16:	f7f4 fa5b 	bl	80001d0 <memchr>
 800bd1a:	9a04      	ldr	r2, [sp, #16]
 800bd1c:	b9d8      	cbnz	r0, 800bd56 <_svfiprintf_r+0xea>
 800bd1e:	06d0      	lsls	r0, r2, #27
 800bd20:	bf44      	itt	mi
 800bd22:	2320      	movmi	r3, #32
 800bd24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd28:	0711      	lsls	r1, r2, #28
 800bd2a:	bf44      	itt	mi
 800bd2c:	232b      	movmi	r3, #43	@ 0x2b
 800bd2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd32:	f89a 3000 	ldrb.w	r3, [sl]
 800bd36:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd38:	d015      	beq.n	800bd66 <_svfiprintf_r+0xfa>
 800bd3a:	9a07      	ldr	r2, [sp, #28]
 800bd3c:	4654      	mov	r4, sl
 800bd3e:	2000      	movs	r0, #0
 800bd40:	f04f 0c0a 	mov.w	ip, #10
 800bd44:	4621      	mov	r1, r4
 800bd46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd4a:	3b30      	subs	r3, #48	@ 0x30
 800bd4c:	2b09      	cmp	r3, #9
 800bd4e:	d94b      	bls.n	800bde8 <_svfiprintf_r+0x17c>
 800bd50:	b1b0      	cbz	r0, 800bd80 <_svfiprintf_r+0x114>
 800bd52:	9207      	str	r2, [sp, #28]
 800bd54:	e014      	b.n	800bd80 <_svfiprintf_r+0x114>
 800bd56:	eba0 0308 	sub.w	r3, r0, r8
 800bd5a:	fa09 f303 	lsl.w	r3, r9, r3
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	9304      	str	r3, [sp, #16]
 800bd62:	46a2      	mov	sl, r4
 800bd64:	e7d2      	b.n	800bd0c <_svfiprintf_r+0xa0>
 800bd66:	9b03      	ldr	r3, [sp, #12]
 800bd68:	1d19      	adds	r1, r3, #4
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	9103      	str	r1, [sp, #12]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	bfbb      	ittet	lt
 800bd72:	425b      	neglt	r3, r3
 800bd74:	f042 0202 	orrlt.w	r2, r2, #2
 800bd78:	9307      	strge	r3, [sp, #28]
 800bd7a:	9307      	strlt	r3, [sp, #28]
 800bd7c:	bfb8      	it	lt
 800bd7e:	9204      	strlt	r2, [sp, #16]
 800bd80:	7823      	ldrb	r3, [r4, #0]
 800bd82:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd84:	d10a      	bne.n	800bd9c <_svfiprintf_r+0x130>
 800bd86:	7863      	ldrb	r3, [r4, #1]
 800bd88:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd8a:	d132      	bne.n	800bdf2 <_svfiprintf_r+0x186>
 800bd8c:	9b03      	ldr	r3, [sp, #12]
 800bd8e:	1d1a      	adds	r2, r3, #4
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	9203      	str	r2, [sp, #12]
 800bd94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd98:	3402      	adds	r4, #2
 800bd9a:	9305      	str	r3, [sp, #20]
 800bd9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800be60 <_svfiprintf_r+0x1f4>
 800bda0:	7821      	ldrb	r1, [r4, #0]
 800bda2:	2203      	movs	r2, #3
 800bda4:	4650      	mov	r0, sl
 800bda6:	f7f4 fa13 	bl	80001d0 <memchr>
 800bdaa:	b138      	cbz	r0, 800bdbc <_svfiprintf_r+0x150>
 800bdac:	9b04      	ldr	r3, [sp, #16]
 800bdae:	eba0 000a 	sub.w	r0, r0, sl
 800bdb2:	2240      	movs	r2, #64	@ 0x40
 800bdb4:	4082      	lsls	r2, r0
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	3401      	adds	r4, #1
 800bdba:	9304      	str	r3, [sp, #16]
 800bdbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdc0:	4824      	ldr	r0, [pc, #144]	@ (800be54 <_svfiprintf_r+0x1e8>)
 800bdc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bdc6:	2206      	movs	r2, #6
 800bdc8:	f7f4 fa02 	bl	80001d0 <memchr>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d036      	beq.n	800be3e <_svfiprintf_r+0x1d2>
 800bdd0:	4b21      	ldr	r3, [pc, #132]	@ (800be58 <_svfiprintf_r+0x1ec>)
 800bdd2:	bb1b      	cbnz	r3, 800be1c <_svfiprintf_r+0x1b0>
 800bdd4:	9b03      	ldr	r3, [sp, #12]
 800bdd6:	3307      	adds	r3, #7
 800bdd8:	f023 0307 	bic.w	r3, r3, #7
 800bddc:	3308      	adds	r3, #8
 800bdde:	9303      	str	r3, [sp, #12]
 800bde0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bde2:	4433      	add	r3, r6
 800bde4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bde6:	e76a      	b.n	800bcbe <_svfiprintf_r+0x52>
 800bde8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdec:	460c      	mov	r4, r1
 800bdee:	2001      	movs	r0, #1
 800bdf0:	e7a8      	b.n	800bd44 <_svfiprintf_r+0xd8>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	3401      	adds	r4, #1
 800bdf6:	9305      	str	r3, [sp, #20]
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	f04f 0c0a 	mov.w	ip, #10
 800bdfe:	4620      	mov	r0, r4
 800be00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be04:	3a30      	subs	r2, #48	@ 0x30
 800be06:	2a09      	cmp	r2, #9
 800be08:	d903      	bls.n	800be12 <_svfiprintf_r+0x1a6>
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d0c6      	beq.n	800bd9c <_svfiprintf_r+0x130>
 800be0e:	9105      	str	r1, [sp, #20]
 800be10:	e7c4      	b.n	800bd9c <_svfiprintf_r+0x130>
 800be12:	fb0c 2101 	mla	r1, ip, r1, r2
 800be16:	4604      	mov	r4, r0
 800be18:	2301      	movs	r3, #1
 800be1a:	e7f0      	b.n	800bdfe <_svfiprintf_r+0x192>
 800be1c:	ab03      	add	r3, sp, #12
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	462a      	mov	r2, r5
 800be22:	4b0e      	ldr	r3, [pc, #56]	@ (800be5c <_svfiprintf_r+0x1f0>)
 800be24:	a904      	add	r1, sp, #16
 800be26:	4638      	mov	r0, r7
 800be28:	f7fd fe84 	bl	8009b34 <_printf_float>
 800be2c:	1c42      	adds	r2, r0, #1
 800be2e:	4606      	mov	r6, r0
 800be30:	d1d6      	bne.n	800bde0 <_svfiprintf_r+0x174>
 800be32:	89ab      	ldrh	r3, [r5, #12]
 800be34:	065b      	lsls	r3, r3, #25
 800be36:	f53f af2d 	bmi.w	800bc94 <_svfiprintf_r+0x28>
 800be3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be3c:	e72c      	b.n	800bc98 <_svfiprintf_r+0x2c>
 800be3e:	ab03      	add	r3, sp, #12
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	462a      	mov	r2, r5
 800be44:	4b05      	ldr	r3, [pc, #20]	@ (800be5c <_svfiprintf_r+0x1f0>)
 800be46:	a904      	add	r1, sp, #16
 800be48:	4638      	mov	r0, r7
 800be4a:	f7fe f90b 	bl	800a064 <_printf_i>
 800be4e:	e7ed      	b.n	800be2c <_svfiprintf_r+0x1c0>
 800be50:	0800c978 	.word	0x0800c978
 800be54:	0800c982 	.word	0x0800c982
 800be58:	08009b35 	.word	0x08009b35
 800be5c:	0800bbb5 	.word	0x0800bbb5
 800be60:	0800c97e 	.word	0x0800c97e

0800be64 <__sflush_r>:
 800be64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be6c:	0716      	lsls	r6, r2, #28
 800be6e:	4605      	mov	r5, r0
 800be70:	460c      	mov	r4, r1
 800be72:	d454      	bmi.n	800bf1e <__sflush_r+0xba>
 800be74:	684b      	ldr	r3, [r1, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	dc02      	bgt.n	800be80 <__sflush_r+0x1c>
 800be7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	dd48      	ble.n	800bf12 <__sflush_r+0xae>
 800be80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be82:	2e00      	cmp	r6, #0
 800be84:	d045      	beq.n	800bf12 <__sflush_r+0xae>
 800be86:	2300      	movs	r3, #0
 800be88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be8c:	682f      	ldr	r7, [r5, #0]
 800be8e:	6a21      	ldr	r1, [r4, #32]
 800be90:	602b      	str	r3, [r5, #0]
 800be92:	d030      	beq.n	800bef6 <__sflush_r+0x92>
 800be94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be96:	89a3      	ldrh	r3, [r4, #12]
 800be98:	0759      	lsls	r1, r3, #29
 800be9a:	d505      	bpl.n	800bea8 <__sflush_r+0x44>
 800be9c:	6863      	ldr	r3, [r4, #4]
 800be9e:	1ad2      	subs	r2, r2, r3
 800bea0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bea2:	b10b      	cbz	r3, 800bea8 <__sflush_r+0x44>
 800bea4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bea6:	1ad2      	subs	r2, r2, r3
 800bea8:	2300      	movs	r3, #0
 800beaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800beac:	6a21      	ldr	r1, [r4, #32]
 800beae:	4628      	mov	r0, r5
 800beb0:	47b0      	blx	r6
 800beb2:	1c43      	adds	r3, r0, #1
 800beb4:	89a3      	ldrh	r3, [r4, #12]
 800beb6:	d106      	bne.n	800bec6 <__sflush_r+0x62>
 800beb8:	6829      	ldr	r1, [r5, #0]
 800beba:	291d      	cmp	r1, #29
 800bebc:	d82b      	bhi.n	800bf16 <__sflush_r+0xb2>
 800bebe:	4a2a      	ldr	r2, [pc, #168]	@ (800bf68 <__sflush_r+0x104>)
 800bec0:	410a      	asrs	r2, r1
 800bec2:	07d6      	lsls	r6, r2, #31
 800bec4:	d427      	bmi.n	800bf16 <__sflush_r+0xb2>
 800bec6:	2200      	movs	r2, #0
 800bec8:	6062      	str	r2, [r4, #4]
 800beca:	04d9      	lsls	r1, r3, #19
 800becc:	6922      	ldr	r2, [r4, #16]
 800bece:	6022      	str	r2, [r4, #0]
 800bed0:	d504      	bpl.n	800bedc <__sflush_r+0x78>
 800bed2:	1c42      	adds	r2, r0, #1
 800bed4:	d101      	bne.n	800beda <__sflush_r+0x76>
 800bed6:	682b      	ldr	r3, [r5, #0]
 800bed8:	b903      	cbnz	r3, 800bedc <__sflush_r+0x78>
 800beda:	6560      	str	r0, [r4, #84]	@ 0x54
 800bedc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bede:	602f      	str	r7, [r5, #0]
 800bee0:	b1b9      	cbz	r1, 800bf12 <__sflush_r+0xae>
 800bee2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bee6:	4299      	cmp	r1, r3
 800bee8:	d002      	beq.n	800bef0 <__sflush_r+0x8c>
 800beea:	4628      	mov	r0, r5
 800beec:	f7ff f9e0 	bl	800b2b0 <_free_r>
 800bef0:	2300      	movs	r3, #0
 800bef2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bef4:	e00d      	b.n	800bf12 <__sflush_r+0xae>
 800bef6:	2301      	movs	r3, #1
 800bef8:	4628      	mov	r0, r5
 800befa:	47b0      	blx	r6
 800befc:	4602      	mov	r2, r0
 800befe:	1c50      	adds	r0, r2, #1
 800bf00:	d1c9      	bne.n	800be96 <__sflush_r+0x32>
 800bf02:	682b      	ldr	r3, [r5, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d0c6      	beq.n	800be96 <__sflush_r+0x32>
 800bf08:	2b1d      	cmp	r3, #29
 800bf0a:	d001      	beq.n	800bf10 <__sflush_r+0xac>
 800bf0c:	2b16      	cmp	r3, #22
 800bf0e:	d11e      	bne.n	800bf4e <__sflush_r+0xea>
 800bf10:	602f      	str	r7, [r5, #0]
 800bf12:	2000      	movs	r0, #0
 800bf14:	e022      	b.n	800bf5c <__sflush_r+0xf8>
 800bf16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf1a:	b21b      	sxth	r3, r3
 800bf1c:	e01b      	b.n	800bf56 <__sflush_r+0xf2>
 800bf1e:	690f      	ldr	r7, [r1, #16]
 800bf20:	2f00      	cmp	r7, #0
 800bf22:	d0f6      	beq.n	800bf12 <__sflush_r+0xae>
 800bf24:	0793      	lsls	r3, r2, #30
 800bf26:	680e      	ldr	r6, [r1, #0]
 800bf28:	bf08      	it	eq
 800bf2a:	694b      	ldreq	r3, [r1, #20]
 800bf2c:	600f      	str	r7, [r1, #0]
 800bf2e:	bf18      	it	ne
 800bf30:	2300      	movne	r3, #0
 800bf32:	eba6 0807 	sub.w	r8, r6, r7
 800bf36:	608b      	str	r3, [r1, #8]
 800bf38:	f1b8 0f00 	cmp.w	r8, #0
 800bf3c:	dde9      	ble.n	800bf12 <__sflush_r+0xae>
 800bf3e:	6a21      	ldr	r1, [r4, #32]
 800bf40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf42:	4643      	mov	r3, r8
 800bf44:	463a      	mov	r2, r7
 800bf46:	4628      	mov	r0, r5
 800bf48:	47b0      	blx	r6
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	dc08      	bgt.n	800bf60 <__sflush_r+0xfc>
 800bf4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf56:	81a3      	strh	r3, [r4, #12]
 800bf58:	f04f 30ff 	mov.w	r0, #4294967295
 800bf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf60:	4407      	add	r7, r0
 800bf62:	eba8 0800 	sub.w	r8, r8, r0
 800bf66:	e7e7      	b.n	800bf38 <__sflush_r+0xd4>
 800bf68:	dfbffffe 	.word	0xdfbffffe

0800bf6c <_fflush_r>:
 800bf6c:	b538      	push	{r3, r4, r5, lr}
 800bf6e:	690b      	ldr	r3, [r1, #16]
 800bf70:	4605      	mov	r5, r0
 800bf72:	460c      	mov	r4, r1
 800bf74:	b913      	cbnz	r3, 800bf7c <_fflush_r+0x10>
 800bf76:	2500      	movs	r5, #0
 800bf78:	4628      	mov	r0, r5
 800bf7a:	bd38      	pop	{r3, r4, r5, pc}
 800bf7c:	b118      	cbz	r0, 800bf86 <_fflush_r+0x1a>
 800bf7e:	6a03      	ldr	r3, [r0, #32]
 800bf80:	b90b      	cbnz	r3, 800bf86 <_fflush_r+0x1a>
 800bf82:	f7fe fa1b 	bl	800a3bc <__sinit>
 800bf86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d0f3      	beq.n	800bf76 <_fflush_r+0xa>
 800bf8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf90:	07d0      	lsls	r0, r2, #31
 800bf92:	d404      	bmi.n	800bf9e <_fflush_r+0x32>
 800bf94:	0599      	lsls	r1, r3, #22
 800bf96:	d402      	bmi.n	800bf9e <_fflush_r+0x32>
 800bf98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf9a:	f7fe fb3a 	bl	800a612 <__retarget_lock_acquire_recursive>
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	f7ff ff5f 	bl	800be64 <__sflush_r>
 800bfa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfa8:	07da      	lsls	r2, r3, #31
 800bfaa:	4605      	mov	r5, r0
 800bfac:	d4e4      	bmi.n	800bf78 <_fflush_r+0xc>
 800bfae:	89a3      	ldrh	r3, [r4, #12]
 800bfb0:	059b      	lsls	r3, r3, #22
 800bfb2:	d4e1      	bmi.n	800bf78 <_fflush_r+0xc>
 800bfb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfb6:	f7fe fb2d 	bl	800a614 <__retarget_lock_release_recursive>
 800bfba:	e7dd      	b.n	800bf78 <_fflush_r+0xc>

0800bfbc <memmove>:
 800bfbc:	4288      	cmp	r0, r1
 800bfbe:	b510      	push	{r4, lr}
 800bfc0:	eb01 0402 	add.w	r4, r1, r2
 800bfc4:	d902      	bls.n	800bfcc <memmove+0x10>
 800bfc6:	4284      	cmp	r4, r0
 800bfc8:	4623      	mov	r3, r4
 800bfca:	d807      	bhi.n	800bfdc <memmove+0x20>
 800bfcc:	1e43      	subs	r3, r0, #1
 800bfce:	42a1      	cmp	r1, r4
 800bfd0:	d008      	beq.n	800bfe4 <memmove+0x28>
 800bfd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfda:	e7f8      	b.n	800bfce <memmove+0x12>
 800bfdc:	4402      	add	r2, r0
 800bfde:	4601      	mov	r1, r0
 800bfe0:	428a      	cmp	r2, r1
 800bfe2:	d100      	bne.n	800bfe6 <memmove+0x2a>
 800bfe4:	bd10      	pop	{r4, pc}
 800bfe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfee:	e7f7      	b.n	800bfe0 <memmove+0x24>

0800bff0 <_sbrk_r>:
 800bff0:	b538      	push	{r3, r4, r5, lr}
 800bff2:	4d06      	ldr	r5, [pc, #24]	@ (800c00c <_sbrk_r+0x1c>)
 800bff4:	2300      	movs	r3, #0
 800bff6:	4604      	mov	r4, r0
 800bff8:	4608      	mov	r0, r1
 800bffa:	602b      	str	r3, [r5, #0]
 800bffc:	f7f5 fba4 	bl	8001748 <_sbrk>
 800c000:	1c43      	adds	r3, r0, #1
 800c002:	d102      	bne.n	800c00a <_sbrk_r+0x1a>
 800c004:	682b      	ldr	r3, [r5, #0]
 800c006:	b103      	cbz	r3, 800c00a <_sbrk_r+0x1a>
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	bd38      	pop	{r3, r4, r5, pc}
 800c00c:	20002180 	.word	0x20002180

0800c010 <memcpy>:
 800c010:	440a      	add	r2, r1
 800c012:	4291      	cmp	r1, r2
 800c014:	f100 33ff 	add.w	r3, r0, #4294967295
 800c018:	d100      	bne.n	800c01c <memcpy+0xc>
 800c01a:	4770      	bx	lr
 800c01c:	b510      	push	{r4, lr}
 800c01e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c022:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c026:	4291      	cmp	r1, r2
 800c028:	d1f9      	bne.n	800c01e <memcpy+0xe>
 800c02a:	bd10      	pop	{r4, pc}

0800c02c <__assert_func>:
 800c02c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c02e:	4614      	mov	r4, r2
 800c030:	461a      	mov	r2, r3
 800c032:	4b09      	ldr	r3, [pc, #36]	@ (800c058 <__assert_func+0x2c>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4605      	mov	r5, r0
 800c038:	68d8      	ldr	r0, [r3, #12]
 800c03a:	b954      	cbnz	r4, 800c052 <__assert_func+0x26>
 800c03c:	4b07      	ldr	r3, [pc, #28]	@ (800c05c <__assert_func+0x30>)
 800c03e:	461c      	mov	r4, r3
 800c040:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c044:	9100      	str	r1, [sp, #0]
 800c046:	462b      	mov	r3, r5
 800c048:	4905      	ldr	r1, [pc, #20]	@ (800c060 <__assert_func+0x34>)
 800c04a:	f000 f86f 	bl	800c12c <fiprintf>
 800c04e:	f000 f87f 	bl	800c150 <abort>
 800c052:	4b04      	ldr	r3, [pc, #16]	@ (800c064 <__assert_func+0x38>)
 800c054:	e7f4      	b.n	800c040 <__assert_func+0x14>
 800c056:	bf00      	nop
 800c058:	20000108 	.word	0x20000108
 800c05c:	0800c9ce 	.word	0x0800c9ce
 800c060:	0800c9a0 	.word	0x0800c9a0
 800c064:	0800c993 	.word	0x0800c993

0800c068 <_calloc_r>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	fba1 5402 	umull	r5, r4, r1, r2
 800c06e:	b93c      	cbnz	r4, 800c080 <_calloc_r+0x18>
 800c070:	4629      	mov	r1, r5
 800c072:	f7ff f991 	bl	800b398 <_malloc_r>
 800c076:	4606      	mov	r6, r0
 800c078:	b928      	cbnz	r0, 800c086 <_calloc_r+0x1e>
 800c07a:	2600      	movs	r6, #0
 800c07c:	4630      	mov	r0, r6
 800c07e:	bd70      	pop	{r4, r5, r6, pc}
 800c080:	220c      	movs	r2, #12
 800c082:	6002      	str	r2, [r0, #0]
 800c084:	e7f9      	b.n	800c07a <_calloc_r+0x12>
 800c086:	462a      	mov	r2, r5
 800c088:	4621      	mov	r1, r4
 800c08a:	f7fe fa44 	bl	800a516 <memset>
 800c08e:	e7f5      	b.n	800c07c <_calloc_r+0x14>

0800c090 <__ascii_mbtowc>:
 800c090:	b082      	sub	sp, #8
 800c092:	b901      	cbnz	r1, 800c096 <__ascii_mbtowc+0x6>
 800c094:	a901      	add	r1, sp, #4
 800c096:	b142      	cbz	r2, 800c0aa <__ascii_mbtowc+0x1a>
 800c098:	b14b      	cbz	r3, 800c0ae <__ascii_mbtowc+0x1e>
 800c09a:	7813      	ldrb	r3, [r2, #0]
 800c09c:	600b      	str	r3, [r1, #0]
 800c09e:	7812      	ldrb	r2, [r2, #0]
 800c0a0:	1e10      	subs	r0, r2, #0
 800c0a2:	bf18      	it	ne
 800c0a4:	2001      	movne	r0, #1
 800c0a6:	b002      	add	sp, #8
 800c0a8:	4770      	bx	lr
 800c0aa:	4610      	mov	r0, r2
 800c0ac:	e7fb      	b.n	800c0a6 <__ascii_mbtowc+0x16>
 800c0ae:	f06f 0001 	mvn.w	r0, #1
 800c0b2:	e7f8      	b.n	800c0a6 <__ascii_mbtowc+0x16>

0800c0b4 <_realloc_r>:
 800c0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b8:	4680      	mov	r8, r0
 800c0ba:	4615      	mov	r5, r2
 800c0bc:	460c      	mov	r4, r1
 800c0be:	b921      	cbnz	r1, 800c0ca <_realloc_r+0x16>
 800c0c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c4:	4611      	mov	r1, r2
 800c0c6:	f7ff b967 	b.w	800b398 <_malloc_r>
 800c0ca:	b92a      	cbnz	r2, 800c0d8 <_realloc_r+0x24>
 800c0cc:	f7ff f8f0 	bl	800b2b0 <_free_r>
 800c0d0:	2400      	movs	r4, #0
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d8:	f000 f841 	bl	800c15e <_malloc_usable_size_r>
 800c0dc:	4285      	cmp	r5, r0
 800c0de:	4606      	mov	r6, r0
 800c0e0:	d802      	bhi.n	800c0e8 <_realloc_r+0x34>
 800c0e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c0e6:	d8f4      	bhi.n	800c0d2 <_realloc_r+0x1e>
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	4640      	mov	r0, r8
 800c0ec:	f7ff f954 	bl	800b398 <_malloc_r>
 800c0f0:	4607      	mov	r7, r0
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d0ec      	beq.n	800c0d0 <_realloc_r+0x1c>
 800c0f6:	42b5      	cmp	r5, r6
 800c0f8:	462a      	mov	r2, r5
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	bf28      	it	cs
 800c0fe:	4632      	movcs	r2, r6
 800c100:	f7ff ff86 	bl	800c010 <memcpy>
 800c104:	4621      	mov	r1, r4
 800c106:	4640      	mov	r0, r8
 800c108:	f7ff f8d2 	bl	800b2b0 <_free_r>
 800c10c:	463c      	mov	r4, r7
 800c10e:	e7e0      	b.n	800c0d2 <_realloc_r+0x1e>

0800c110 <__ascii_wctomb>:
 800c110:	4603      	mov	r3, r0
 800c112:	4608      	mov	r0, r1
 800c114:	b141      	cbz	r1, 800c128 <__ascii_wctomb+0x18>
 800c116:	2aff      	cmp	r2, #255	@ 0xff
 800c118:	d904      	bls.n	800c124 <__ascii_wctomb+0x14>
 800c11a:	228a      	movs	r2, #138	@ 0x8a
 800c11c:	601a      	str	r2, [r3, #0]
 800c11e:	f04f 30ff 	mov.w	r0, #4294967295
 800c122:	4770      	bx	lr
 800c124:	700a      	strb	r2, [r1, #0]
 800c126:	2001      	movs	r0, #1
 800c128:	4770      	bx	lr
	...

0800c12c <fiprintf>:
 800c12c:	b40e      	push	{r1, r2, r3}
 800c12e:	b503      	push	{r0, r1, lr}
 800c130:	4601      	mov	r1, r0
 800c132:	ab03      	add	r3, sp, #12
 800c134:	4805      	ldr	r0, [pc, #20]	@ (800c14c <fiprintf+0x20>)
 800c136:	f853 2b04 	ldr.w	r2, [r3], #4
 800c13a:	6800      	ldr	r0, [r0, #0]
 800c13c:	9301      	str	r3, [sp, #4]
 800c13e:	f000 f83f 	bl	800c1c0 <_vfiprintf_r>
 800c142:	b002      	add	sp, #8
 800c144:	f85d eb04 	ldr.w	lr, [sp], #4
 800c148:	b003      	add	sp, #12
 800c14a:	4770      	bx	lr
 800c14c:	20000108 	.word	0x20000108

0800c150 <abort>:
 800c150:	b508      	push	{r3, lr}
 800c152:	2006      	movs	r0, #6
 800c154:	f000 fa08 	bl	800c568 <raise>
 800c158:	2001      	movs	r0, #1
 800c15a:	f7f5 fa7d 	bl	8001658 <_exit>

0800c15e <_malloc_usable_size_r>:
 800c15e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c162:	1f18      	subs	r0, r3, #4
 800c164:	2b00      	cmp	r3, #0
 800c166:	bfbc      	itt	lt
 800c168:	580b      	ldrlt	r3, [r1, r0]
 800c16a:	18c0      	addlt	r0, r0, r3
 800c16c:	4770      	bx	lr

0800c16e <__sfputc_r>:
 800c16e:	6893      	ldr	r3, [r2, #8]
 800c170:	3b01      	subs	r3, #1
 800c172:	2b00      	cmp	r3, #0
 800c174:	b410      	push	{r4}
 800c176:	6093      	str	r3, [r2, #8]
 800c178:	da08      	bge.n	800c18c <__sfputc_r+0x1e>
 800c17a:	6994      	ldr	r4, [r2, #24]
 800c17c:	42a3      	cmp	r3, r4
 800c17e:	db01      	blt.n	800c184 <__sfputc_r+0x16>
 800c180:	290a      	cmp	r1, #10
 800c182:	d103      	bne.n	800c18c <__sfputc_r+0x1e>
 800c184:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c188:	f000 b932 	b.w	800c3f0 <__swbuf_r>
 800c18c:	6813      	ldr	r3, [r2, #0]
 800c18e:	1c58      	adds	r0, r3, #1
 800c190:	6010      	str	r0, [r2, #0]
 800c192:	7019      	strb	r1, [r3, #0]
 800c194:	4608      	mov	r0, r1
 800c196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <__sfputs_r>:
 800c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19e:	4606      	mov	r6, r0
 800c1a0:	460f      	mov	r7, r1
 800c1a2:	4614      	mov	r4, r2
 800c1a4:	18d5      	adds	r5, r2, r3
 800c1a6:	42ac      	cmp	r4, r5
 800c1a8:	d101      	bne.n	800c1ae <__sfputs_r+0x12>
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	e007      	b.n	800c1be <__sfputs_r+0x22>
 800c1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1b2:	463a      	mov	r2, r7
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	f7ff ffda 	bl	800c16e <__sfputc_r>
 800c1ba:	1c43      	adds	r3, r0, #1
 800c1bc:	d1f3      	bne.n	800c1a6 <__sfputs_r+0xa>
 800c1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c1c0 <_vfiprintf_r>:
 800c1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c4:	460d      	mov	r5, r1
 800c1c6:	b09d      	sub	sp, #116	@ 0x74
 800c1c8:	4614      	mov	r4, r2
 800c1ca:	4698      	mov	r8, r3
 800c1cc:	4606      	mov	r6, r0
 800c1ce:	b118      	cbz	r0, 800c1d8 <_vfiprintf_r+0x18>
 800c1d0:	6a03      	ldr	r3, [r0, #32]
 800c1d2:	b90b      	cbnz	r3, 800c1d8 <_vfiprintf_r+0x18>
 800c1d4:	f7fe f8f2 	bl	800a3bc <__sinit>
 800c1d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1da:	07d9      	lsls	r1, r3, #31
 800c1dc:	d405      	bmi.n	800c1ea <_vfiprintf_r+0x2a>
 800c1de:	89ab      	ldrh	r3, [r5, #12]
 800c1e0:	059a      	lsls	r2, r3, #22
 800c1e2:	d402      	bmi.n	800c1ea <_vfiprintf_r+0x2a>
 800c1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1e6:	f7fe fa14 	bl	800a612 <__retarget_lock_acquire_recursive>
 800c1ea:	89ab      	ldrh	r3, [r5, #12]
 800c1ec:	071b      	lsls	r3, r3, #28
 800c1ee:	d501      	bpl.n	800c1f4 <_vfiprintf_r+0x34>
 800c1f0:	692b      	ldr	r3, [r5, #16]
 800c1f2:	b99b      	cbnz	r3, 800c21c <_vfiprintf_r+0x5c>
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f000 f938 	bl	800c46c <__swsetup_r>
 800c1fc:	b170      	cbz	r0, 800c21c <_vfiprintf_r+0x5c>
 800c1fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c200:	07dc      	lsls	r4, r3, #31
 800c202:	d504      	bpl.n	800c20e <_vfiprintf_r+0x4e>
 800c204:	f04f 30ff 	mov.w	r0, #4294967295
 800c208:	b01d      	add	sp, #116	@ 0x74
 800c20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20e:	89ab      	ldrh	r3, [r5, #12]
 800c210:	0598      	lsls	r0, r3, #22
 800c212:	d4f7      	bmi.n	800c204 <_vfiprintf_r+0x44>
 800c214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c216:	f7fe f9fd 	bl	800a614 <__retarget_lock_release_recursive>
 800c21a:	e7f3      	b.n	800c204 <_vfiprintf_r+0x44>
 800c21c:	2300      	movs	r3, #0
 800c21e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c220:	2320      	movs	r3, #32
 800c222:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c226:	f8cd 800c 	str.w	r8, [sp, #12]
 800c22a:	2330      	movs	r3, #48	@ 0x30
 800c22c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c3dc <_vfiprintf_r+0x21c>
 800c230:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c234:	f04f 0901 	mov.w	r9, #1
 800c238:	4623      	mov	r3, r4
 800c23a:	469a      	mov	sl, r3
 800c23c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c240:	b10a      	cbz	r2, 800c246 <_vfiprintf_r+0x86>
 800c242:	2a25      	cmp	r2, #37	@ 0x25
 800c244:	d1f9      	bne.n	800c23a <_vfiprintf_r+0x7a>
 800c246:	ebba 0b04 	subs.w	fp, sl, r4
 800c24a:	d00b      	beq.n	800c264 <_vfiprintf_r+0xa4>
 800c24c:	465b      	mov	r3, fp
 800c24e:	4622      	mov	r2, r4
 800c250:	4629      	mov	r1, r5
 800c252:	4630      	mov	r0, r6
 800c254:	f7ff ffa2 	bl	800c19c <__sfputs_r>
 800c258:	3001      	adds	r0, #1
 800c25a:	f000 80a7 	beq.w	800c3ac <_vfiprintf_r+0x1ec>
 800c25e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c260:	445a      	add	r2, fp
 800c262:	9209      	str	r2, [sp, #36]	@ 0x24
 800c264:	f89a 3000 	ldrb.w	r3, [sl]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f000 809f 	beq.w	800c3ac <_vfiprintf_r+0x1ec>
 800c26e:	2300      	movs	r3, #0
 800c270:	f04f 32ff 	mov.w	r2, #4294967295
 800c274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c278:	f10a 0a01 	add.w	sl, sl, #1
 800c27c:	9304      	str	r3, [sp, #16]
 800c27e:	9307      	str	r3, [sp, #28]
 800c280:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c284:	931a      	str	r3, [sp, #104]	@ 0x68
 800c286:	4654      	mov	r4, sl
 800c288:	2205      	movs	r2, #5
 800c28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c28e:	4853      	ldr	r0, [pc, #332]	@ (800c3dc <_vfiprintf_r+0x21c>)
 800c290:	f7f3 ff9e 	bl	80001d0 <memchr>
 800c294:	9a04      	ldr	r2, [sp, #16]
 800c296:	b9d8      	cbnz	r0, 800c2d0 <_vfiprintf_r+0x110>
 800c298:	06d1      	lsls	r1, r2, #27
 800c29a:	bf44      	itt	mi
 800c29c:	2320      	movmi	r3, #32
 800c29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2a2:	0713      	lsls	r3, r2, #28
 800c2a4:	bf44      	itt	mi
 800c2a6:	232b      	movmi	r3, #43	@ 0x2b
 800c2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c2b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2b2:	d015      	beq.n	800c2e0 <_vfiprintf_r+0x120>
 800c2b4:	9a07      	ldr	r2, [sp, #28]
 800c2b6:	4654      	mov	r4, sl
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	f04f 0c0a 	mov.w	ip, #10
 800c2be:	4621      	mov	r1, r4
 800c2c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2c4:	3b30      	subs	r3, #48	@ 0x30
 800c2c6:	2b09      	cmp	r3, #9
 800c2c8:	d94b      	bls.n	800c362 <_vfiprintf_r+0x1a2>
 800c2ca:	b1b0      	cbz	r0, 800c2fa <_vfiprintf_r+0x13a>
 800c2cc:	9207      	str	r2, [sp, #28]
 800c2ce:	e014      	b.n	800c2fa <_vfiprintf_r+0x13a>
 800c2d0:	eba0 0308 	sub.w	r3, r0, r8
 800c2d4:	fa09 f303 	lsl.w	r3, r9, r3
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	9304      	str	r3, [sp, #16]
 800c2dc:	46a2      	mov	sl, r4
 800c2de:	e7d2      	b.n	800c286 <_vfiprintf_r+0xc6>
 800c2e0:	9b03      	ldr	r3, [sp, #12]
 800c2e2:	1d19      	adds	r1, r3, #4
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	9103      	str	r1, [sp, #12]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	bfbb      	ittet	lt
 800c2ec:	425b      	neglt	r3, r3
 800c2ee:	f042 0202 	orrlt.w	r2, r2, #2
 800c2f2:	9307      	strge	r3, [sp, #28]
 800c2f4:	9307      	strlt	r3, [sp, #28]
 800c2f6:	bfb8      	it	lt
 800c2f8:	9204      	strlt	r2, [sp, #16]
 800c2fa:	7823      	ldrb	r3, [r4, #0]
 800c2fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2fe:	d10a      	bne.n	800c316 <_vfiprintf_r+0x156>
 800c300:	7863      	ldrb	r3, [r4, #1]
 800c302:	2b2a      	cmp	r3, #42	@ 0x2a
 800c304:	d132      	bne.n	800c36c <_vfiprintf_r+0x1ac>
 800c306:	9b03      	ldr	r3, [sp, #12]
 800c308:	1d1a      	adds	r2, r3, #4
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	9203      	str	r2, [sp, #12]
 800c30e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c312:	3402      	adds	r4, #2
 800c314:	9305      	str	r3, [sp, #20]
 800c316:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c3ec <_vfiprintf_r+0x22c>
 800c31a:	7821      	ldrb	r1, [r4, #0]
 800c31c:	2203      	movs	r2, #3
 800c31e:	4650      	mov	r0, sl
 800c320:	f7f3 ff56 	bl	80001d0 <memchr>
 800c324:	b138      	cbz	r0, 800c336 <_vfiprintf_r+0x176>
 800c326:	9b04      	ldr	r3, [sp, #16]
 800c328:	eba0 000a 	sub.w	r0, r0, sl
 800c32c:	2240      	movs	r2, #64	@ 0x40
 800c32e:	4082      	lsls	r2, r0
 800c330:	4313      	orrs	r3, r2
 800c332:	3401      	adds	r4, #1
 800c334:	9304      	str	r3, [sp, #16]
 800c336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c33a:	4829      	ldr	r0, [pc, #164]	@ (800c3e0 <_vfiprintf_r+0x220>)
 800c33c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c340:	2206      	movs	r2, #6
 800c342:	f7f3 ff45 	bl	80001d0 <memchr>
 800c346:	2800      	cmp	r0, #0
 800c348:	d03f      	beq.n	800c3ca <_vfiprintf_r+0x20a>
 800c34a:	4b26      	ldr	r3, [pc, #152]	@ (800c3e4 <_vfiprintf_r+0x224>)
 800c34c:	bb1b      	cbnz	r3, 800c396 <_vfiprintf_r+0x1d6>
 800c34e:	9b03      	ldr	r3, [sp, #12]
 800c350:	3307      	adds	r3, #7
 800c352:	f023 0307 	bic.w	r3, r3, #7
 800c356:	3308      	adds	r3, #8
 800c358:	9303      	str	r3, [sp, #12]
 800c35a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c35c:	443b      	add	r3, r7
 800c35e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c360:	e76a      	b.n	800c238 <_vfiprintf_r+0x78>
 800c362:	fb0c 3202 	mla	r2, ip, r2, r3
 800c366:	460c      	mov	r4, r1
 800c368:	2001      	movs	r0, #1
 800c36a:	e7a8      	b.n	800c2be <_vfiprintf_r+0xfe>
 800c36c:	2300      	movs	r3, #0
 800c36e:	3401      	adds	r4, #1
 800c370:	9305      	str	r3, [sp, #20]
 800c372:	4619      	mov	r1, r3
 800c374:	f04f 0c0a 	mov.w	ip, #10
 800c378:	4620      	mov	r0, r4
 800c37a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c37e:	3a30      	subs	r2, #48	@ 0x30
 800c380:	2a09      	cmp	r2, #9
 800c382:	d903      	bls.n	800c38c <_vfiprintf_r+0x1cc>
 800c384:	2b00      	cmp	r3, #0
 800c386:	d0c6      	beq.n	800c316 <_vfiprintf_r+0x156>
 800c388:	9105      	str	r1, [sp, #20]
 800c38a:	e7c4      	b.n	800c316 <_vfiprintf_r+0x156>
 800c38c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c390:	4604      	mov	r4, r0
 800c392:	2301      	movs	r3, #1
 800c394:	e7f0      	b.n	800c378 <_vfiprintf_r+0x1b8>
 800c396:	ab03      	add	r3, sp, #12
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	462a      	mov	r2, r5
 800c39c:	4b12      	ldr	r3, [pc, #72]	@ (800c3e8 <_vfiprintf_r+0x228>)
 800c39e:	a904      	add	r1, sp, #16
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f7fd fbc7 	bl	8009b34 <_printf_float>
 800c3a6:	4607      	mov	r7, r0
 800c3a8:	1c78      	adds	r0, r7, #1
 800c3aa:	d1d6      	bne.n	800c35a <_vfiprintf_r+0x19a>
 800c3ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3ae:	07d9      	lsls	r1, r3, #31
 800c3b0:	d405      	bmi.n	800c3be <_vfiprintf_r+0x1fe>
 800c3b2:	89ab      	ldrh	r3, [r5, #12]
 800c3b4:	059a      	lsls	r2, r3, #22
 800c3b6:	d402      	bmi.n	800c3be <_vfiprintf_r+0x1fe>
 800c3b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3ba:	f7fe f92b 	bl	800a614 <__retarget_lock_release_recursive>
 800c3be:	89ab      	ldrh	r3, [r5, #12]
 800c3c0:	065b      	lsls	r3, r3, #25
 800c3c2:	f53f af1f 	bmi.w	800c204 <_vfiprintf_r+0x44>
 800c3c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3c8:	e71e      	b.n	800c208 <_vfiprintf_r+0x48>
 800c3ca:	ab03      	add	r3, sp, #12
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	462a      	mov	r2, r5
 800c3d0:	4b05      	ldr	r3, [pc, #20]	@ (800c3e8 <_vfiprintf_r+0x228>)
 800c3d2:	a904      	add	r1, sp, #16
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	f7fd fe45 	bl	800a064 <_printf_i>
 800c3da:	e7e4      	b.n	800c3a6 <_vfiprintf_r+0x1e6>
 800c3dc:	0800c978 	.word	0x0800c978
 800c3e0:	0800c982 	.word	0x0800c982
 800c3e4:	08009b35 	.word	0x08009b35
 800c3e8:	0800c19d 	.word	0x0800c19d
 800c3ec:	0800c97e 	.word	0x0800c97e

0800c3f0 <__swbuf_r>:
 800c3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3f2:	460e      	mov	r6, r1
 800c3f4:	4614      	mov	r4, r2
 800c3f6:	4605      	mov	r5, r0
 800c3f8:	b118      	cbz	r0, 800c402 <__swbuf_r+0x12>
 800c3fa:	6a03      	ldr	r3, [r0, #32]
 800c3fc:	b90b      	cbnz	r3, 800c402 <__swbuf_r+0x12>
 800c3fe:	f7fd ffdd 	bl	800a3bc <__sinit>
 800c402:	69a3      	ldr	r3, [r4, #24]
 800c404:	60a3      	str	r3, [r4, #8]
 800c406:	89a3      	ldrh	r3, [r4, #12]
 800c408:	071a      	lsls	r2, r3, #28
 800c40a:	d501      	bpl.n	800c410 <__swbuf_r+0x20>
 800c40c:	6923      	ldr	r3, [r4, #16]
 800c40e:	b943      	cbnz	r3, 800c422 <__swbuf_r+0x32>
 800c410:	4621      	mov	r1, r4
 800c412:	4628      	mov	r0, r5
 800c414:	f000 f82a 	bl	800c46c <__swsetup_r>
 800c418:	b118      	cbz	r0, 800c422 <__swbuf_r+0x32>
 800c41a:	f04f 37ff 	mov.w	r7, #4294967295
 800c41e:	4638      	mov	r0, r7
 800c420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c422:	6823      	ldr	r3, [r4, #0]
 800c424:	6922      	ldr	r2, [r4, #16]
 800c426:	1a98      	subs	r0, r3, r2
 800c428:	6963      	ldr	r3, [r4, #20]
 800c42a:	b2f6      	uxtb	r6, r6
 800c42c:	4283      	cmp	r3, r0
 800c42e:	4637      	mov	r7, r6
 800c430:	dc05      	bgt.n	800c43e <__swbuf_r+0x4e>
 800c432:	4621      	mov	r1, r4
 800c434:	4628      	mov	r0, r5
 800c436:	f7ff fd99 	bl	800bf6c <_fflush_r>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d1ed      	bne.n	800c41a <__swbuf_r+0x2a>
 800c43e:	68a3      	ldr	r3, [r4, #8]
 800c440:	3b01      	subs	r3, #1
 800c442:	60a3      	str	r3, [r4, #8]
 800c444:	6823      	ldr	r3, [r4, #0]
 800c446:	1c5a      	adds	r2, r3, #1
 800c448:	6022      	str	r2, [r4, #0]
 800c44a:	701e      	strb	r6, [r3, #0]
 800c44c:	6962      	ldr	r2, [r4, #20]
 800c44e:	1c43      	adds	r3, r0, #1
 800c450:	429a      	cmp	r2, r3
 800c452:	d004      	beq.n	800c45e <__swbuf_r+0x6e>
 800c454:	89a3      	ldrh	r3, [r4, #12]
 800c456:	07db      	lsls	r3, r3, #31
 800c458:	d5e1      	bpl.n	800c41e <__swbuf_r+0x2e>
 800c45a:	2e0a      	cmp	r6, #10
 800c45c:	d1df      	bne.n	800c41e <__swbuf_r+0x2e>
 800c45e:	4621      	mov	r1, r4
 800c460:	4628      	mov	r0, r5
 800c462:	f7ff fd83 	bl	800bf6c <_fflush_r>
 800c466:	2800      	cmp	r0, #0
 800c468:	d0d9      	beq.n	800c41e <__swbuf_r+0x2e>
 800c46a:	e7d6      	b.n	800c41a <__swbuf_r+0x2a>

0800c46c <__swsetup_r>:
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	4b29      	ldr	r3, [pc, #164]	@ (800c514 <__swsetup_r+0xa8>)
 800c470:	4605      	mov	r5, r0
 800c472:	6818      	ldr	r0, [r3, #0]
 800c474:	460c      	mov	r4, r1
 800c476:	b118      	cbz	r0, 800c480 <__swsetup_r+0x14>
 800c478:	6a03      	ldr	r3, [r0, #32]
 800c47a:	b90b      	cbnz	r3, 800c480 <__swsetup_r+0x14>
 800c47c:	f7fd ff9e 	bl	800a3bc <__sinit>
 800c480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c484:	0719      	lsls	r1, r3, #28
 800c486:	d422      	bmi.n	800c4ce <__swsetup_r+0x62>
 800c488:	06da      	lsls	r2, r3, #27
 800c48a:	d407      	bmi.n	800c49c <__swsetup_r+0x30>
 800c48c:	2209      	movs	r2, #9
 800c48e:	602a      	str	r2, [r5, #0]
 800c490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c494:	81a3      	strh	r3, [r4, #12]
 800c496:	f04f 30ff 	mov.w	r0, #4294967295
 800c49a:	e033      	b.n	800c504 <__swsetup_r+0x98>
 800c49c:	0758      	lsls	r0, r3, #29
 800c49e:	d512      	bpl.n	800c4c6 <__swsetup_r+0x5a>
 800c4a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4a2:	b141      	cbz	r1, 800c4b6 <__swsetup_r+0x4a>
 800c4a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4a8:	4299      	cmp	r1, r3
 800c4aa:	d002      	beq.n	800c4b2 <__swsetup_r+0x46>
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	f7fe feff 	bl	800b2b0 <_free_r>
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4b6:	89a3      	ldrh	r3, [r4, #12]
 800c4b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c4bc:	81a3      	strh	r3, [r4, #12]
 800c4be:	2300      	movs	r3, #0
 800c4c0:	6063      	str	r3, [r4, #4]
 800c4c2:	6923      	ldr	r3, [r4, #16]
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	89a3      	ldrh	r3, [r4, #12]
 800c4c8:	f043 0308 	orr.w	r3, r3, #8
 800c4cc:	81a3      	strh	r3, [r4, #12]
 800c4ce:	6923      	ldr	r3, [r4, #16]
 800c4d0:	b94b      	cbnz	r3, 800c4e6 <__swsetup_r+0x7a>
 800c4d2:	89a3      	ldrh	r3, [r4, #12]
 800c4d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c4d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4dc:	d003      	beq.n	800c4e6 <__swsetup_r+0x7a>
 800c4de:	4621      	mov	r1, r4
 800c4e0:	4628      	mov	r0, r5
 800c4e2:	f000 f883 	bl	800c5ec <__smakebuf_r>
 800c4e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ea:	f013 0201 	ands.w	r2, r3, #1
 800c4ee:	d00a      	beq.n	800c506 <__swsetup_r+0x9a>
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	60a2      	str	r2, [r4, #8]
 800c4f4:	6962      	ldr	r2, [r4, #20]
 800c4f6:	4252      	negs	r2, r2
 800c4f8:	61a2      	str	r2, [r4, #24]
 800c4fa:	6922      	ldr	r2, [r4, #16]
 800c4fc:	b942      	cbnz	r2, 800c510 <__swsetup_r+0xa4>
 800c4fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c502:	d1c5      	bne.n	800c490 <__swsetup_r+0x24>
 800c504:	bd38      	pop	{r3, r4, r5, pc}
 800c506:	0799      	lsls	r1, r3, #30
 800c508:	bf58      	it	pl
 800c50a:	6962      	ldrpl	r2, [r4, #20]
 800c50c:	60a2      	str	r2, [r4, #8]
 800c50e:	e7f4      	b.n	800c4fa <__swsetup_r+0x8e>
 800c510:	2000      	movs	r0, #0
 800c512:	e7f7      	b.n	800c504 <__swsetup_r+0x98>
 800c514:	20000108 	.word	0x20000108

0800c518 <_raise_r>:
 800c518:	291f      	cmp	r1, #31
 800c51a:	b538      	push	{r3, r4, r5, lr}
 800c51c:	4605      	mov	r5, r0
 800c51e:	460c      	mov	r4, r1
 800c520:	d904      	bls.n	800c52c <_raise_r+0x14>
 800c522:	2316      	movs	r3, #22
 800c524:	6003      	str	r3, [r0, #0]
 800c526:	f04f 30ff 	mov.w	r0, #4294967295
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c52e:	b112      	cbz	r2, 800c536 <_raise_r+0x1e>
 800c530:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c534:	b94b      	cbnz	r3, 800c54a <_raise_r+0x32>
 800c536:	4628      	mov	r0, r5
 800c538:	f000 f830 	bl	800c59c <_getpid_r>
 800c53c:	4622      	mov	r2, r4
 800c53e:	4601      	mov	r1, r0
 800c540:	4628      	mov	r0, r5
 800c542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c546:	f000 b817 	b.w	800c578 <_kill_r>
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d00a      	beq.n	800c564 <_raise_r+0x4c>
 800c54e:	1c59      	adds	r1, r3, #1
 800c550:	d103      	bne.n	800c55a <_raise_r+0x42>
 800c552:	2316      	movs	r3, #22
 800c554:	6003      	str	r3, [r0, #0]
 800c556:	2001      	movs	r0, #1
 800c558:	e7e7      	b.n	800c52a <_raise_r+0x12>
 800c55a:	2100      	movs	r1, #0
 800c55c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c560:	4620      	mov	r0, r4
 800c562:	4798      	blx	r3
 800c564:	2000      	movs	r0, #0
 800c566:	e7e0      	b.n	800c52a <_raise_r+0x12>

0800c568 <raise>:
 800c568:	4b02      	ldr	r3, [pc, #8]	@ (800c574 <raise+0xc>)
 800c56a:	4601      	mov	r1, r0
 800c56c:	6818      	ldr	r0, [r3, #0]
 800c56e:	f7ff bfd3 	b.w	800c518 <_raise_r>
 800c572:	bf00      	nop
 800c574:	20000108 	.word	0x20000108

0800c578 <_kill_r>:
 800c578:	b538      	push	{r3, r4, r5, lr}
 800c57a:	4d07      	ldr	r5, [pc, #28]	@ (800c598 <_kill_r+0x20>)
 800c57c:	2300      	movs	r3, #0
 800c57e:	4604      	mov	r4, r0
 800c580:	4608      	mov	r0, r1
 800c582:	4611      	mov	r1, r2
 800c584:	602b      	str	r3, [r5, #0]
 800c586:	f7f5 f857 	bl	8001638 <_kill>
 800c58a:	1c43      	adds	r3, r0, #1
 800c58c:	d102      	bne.n	800c594 <_kill_r+0x1c>
 800c58e:	682b      	ldr	r3, [r5, #0]
 800c590:	b103      	cbz	r3, 800c594 <_kill_r+0x1c>
 800c592:	6023      	str	r3, [r4, #0]
 800c594:	bd38      	pop	{r3, r4, r5, pc}
 800c596:	bf00      	nop
 800c598:	20002180 	.word	0x20002180

0800c59c <_getpid_r>:
 800c59c:	f7f5 b844 	b.w	8001628 <_getpid>

0800c5a0 <__swhatbuf_r>:
 800c5a0:	b570      	push	{r4, r5, r6, lr}
 800c5a2:	460c      	mov	r4, r1
 800c5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a8:	2900      	cmp	r1, #0
 800c5aa:	b096      	sub	sp, #88	@ 0x58
 800c5ac:	4615      	mov	r5, r2
 800c5ae:	461e      	mov	r6, r3
 800c5b0:	da0d      	bge.n	800c5ce <__swhatbuf_r+0x2e>
 800c5b2:	89a3      	ldrh	r3, [r4, #12]
 800c5b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5b8:	f04f 0100 	mov.w	r1, #0
 800c5bc:	bf14      	ite	ne
 800c5be:	2340      	movne	r3, #64	@ 0x40
 800c5c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	6031      	str	r1, [r6, #0]
 800c5c8:	602b      	str	r3, [r5, #0]
 800c5ca:	b016      	add	sp, #88	@ 0x58
 800c5cc:	bd70      	pop	{r4, r5, r6, pc}
 800c5ce:	466a      	mov	r2, sp
 800c5d0:	f000 f848 	bl	800c664 <_fstat_r>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	dbec      	blt.n	800c5b2 <__swhatbuf_r+0x12>
 800c5d8:	9901      	ldr	r1, [sp, #4]
 800c5da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c5de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c5e2:	4259      	negs	r1, r3
 800c5e4:	4159      	adcs	r1, r3
 800c5e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5ea:	e7eb      	b.n	800c5c4 <__swhatbuf_r+0x24>

0800c5ec <__smakebuf_r>:
 800c5ec:	898b      	ldrh	r3, [r1, #12]
 800c5ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5f0:	079d      	lsls	r5, r3, #30
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	460c      	mov	r4, r1
 800c5f6:	d507      	bpl.n	800c608 <__smakebuf_r+0x1c>
 800c5f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c5fc:	6023      	str	r3, [r4, #0]
 800c5fe:	6123      	str	r3, [r4, #16]
 800c600:	2301      	movs	r3, #1
 800c602:	6163      	str	r3, [r4, #20]
 800c604:	b003      	add	sp, #12
 800c606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c608:	ab01      	add	r3, sp, #4
 800c60a:	466a      	mov	r2, sp
 800c60c:	f7ff ffc8 	bl	800c5a0 <__swhatbuf_r>
 800c610:	9f00      	ldr	r7, [sp, #0]
 800c612:	4605      	mov	r5, r0
 800c614:	4639      	mov	r1, r7
 800c616:	4630      	mov	r0, r6
 800c618:	f7fe febe 	bl	800b398 <_malloc_r>
 800c61c:	b948      	cbnz	r0, 800c632 <__smakebuf_r+0x46>
 800c61e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c622:	059a      	lsls	r2, r3, #22
 800c624:	d4ee      	bmi.n	800c604 <__smakebuf_r+0x18>
 800c626:	f023 0303 	bic.w	r3, r3, #3
 800c62a:	f043 0302 	orr.w	r3, r3, #2
 800c62e:	81a3      	strh	r3, [r4, #12]
 800c630:	e7e2      	b.n	800c5f8 <__smakebuf_r+0xc>
 800c632:	89a3      	ldrh	r3, [r4, #12]
 800c634:	6020      	str	r0, [r4, #0]
 800c636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c63a:	81a3      	strh	r3, [r4, #12]
 800c63c:	9b01      	ldr	r3, [sp, #4]
 800c63e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c642:	b15b      	cbz	r3, 800c65c <__smakebuf_r+0x70>
 800c644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c648:	4630      	mov	r0, r6
 800c64a:	f000 f81d 	bl	800c688 <_isatty_r>
 800c64e:	b128      	cbz	r0, 800c65c <__smakebuf_r+0x70>
 800c650:	89a3      	ldrh	r3, [r4, #12]
 800c652:	f023 0303 	bic.w	r3, r3, #3
 800c656:	f043 0301 	orr.w	r3, r3, #1
 800c65a:	81a3      	strh	r3, [r4, #12]
 800c65c:	89a3      	ldrh	r3, [r4, #12]
 800c65e:	431d      	orrs	r5, r3
 800c660:	81a5      	strh	r5, [r4, #12]
 800c662:	e7cf      	b.n	800c604 <__smakebuf_r+0x18>

0800c664 <_fstat_r>:
 800c664:	b538      	push	{r3, r4, r5, lr}
 800c666:	4d07      	ldr	r5, [pc, #28]	@ (800c684 <_fstat_r+0x20>)
 800c668:	2300      	movs	r3, #0
 800c66a:	4604      	mov	r4, r0
 800c66c:	4608      	mov	r0, r1
 800c66e:	4611      	mov	r1, r2
 800c670:	602b      	str	r3, [r5, #0]
 800c672:	f7f5 f841 	bl	80016f8 <_fstat>
 800c676:	1c43      	adds	r3, r0, #1
 800c678:	d102      	bne.n	800c680 <_fstat_r+0x1c>
 800c67a:	682b      	ldr	r3, [r5, #0]
 800c67c:	b103      	cbz	r3, 800c680 <_fstat_r+0x1c>
 800c67e:	6023      	str	r3, [r4, #0]
 800c680:	bd38      	pop	{r3, r4, r5, pc}
 800c682:	bf00      	nop
 800c684:	20002180 	.word	0x20002180

0800c688 <_isatty_r>:
 800c688:	b538      	push	{r3, r4, r5, lr}
 800c68a:	4d06      	ldr	r5, [pc, #24]	@ (800c6a4 <_isatty_r+0x1c>)
 800c68c:	2300      	movs	r3, #0
 800c68e:	4604      	mov	r4, r0
 800c690:	4608      	mov	r0, r1
 800c692:	602b      	str	r3, [r5, #0]
 800c694:	f7f5 f840 	bl	8001718 <_isatty>
 800c698:	1c43      	adds	r3, r0, #1
 800c69a:	d102      	bne.n	800c6a2 <_isatty_r+0x1a>
 800c69c:	682b      	ldr	r3, [r5, #0]
 800c69e:	b103      	cbz	r3, 800c6a2 <_isatty_r+0x1a>
 800c6a0:	6023      	str	r3, [r4, #0]
 800c6a2:	bd38      	pop	{r3, r4, r5, pc}
 800c6a4:	20002180 	.word	0x20002180

0800c6a8 <_init>:
 800c6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6aa:	bf00      	nop
 800c6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ae:	bc08      	pop	{r3}
 800c6b0:	469e      	mov	lr, r3
 800c6b2:	4770      	bx	lr

0800c6b4 <_fini>:
 800c6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b6:	bf00      	nop
 800c6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ba:	bc08      	pop	{r3}
 800c6bc:	469e      	mov	lr, r3
 800c6be:	4770      	bx	lr
