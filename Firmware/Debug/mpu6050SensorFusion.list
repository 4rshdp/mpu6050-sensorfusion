
mpu6050SensorFusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f0  0800dbb8  0800dbb8  0000ebb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3a8  0800e3a8  000102d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3a8  0800e3a8  0000f3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3b0  0800e3b0  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3b0  0800e3b0  0000f3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e3b4  0800e3b4  0000f3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  0800e3b8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102d8  2**0
                  CONTENTS
 10 .bss          00001ecc  200002d8  200002d8  000102d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200021a4  200021a4  000102d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125df  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003504  00000000  00000000  000228e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00025df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bfd  00000000  00000000  00026dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022605  00000000  00000000  000279d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ecf  00000000  00000000  00049fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be9eb  00000000  00000000  0005fea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e894  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005560  00000000  00000000  0011e8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00123e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db9c 	.word	0x0800db9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800db9c 	.word	0x0800db9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	ed2d 8b02 	vpush	{d8}
 8000f3e:	b094      	sub	sp, #80	@ 0x50
 8000f40:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f000 fde7 	bl	8001b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f95b 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f000 fa11 	bl	8001370 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4e:	f000 f9ef 	bl	8001330 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f52:	f000 f9bf 	bl	80012d4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000f56:	f008 f9a7 	bl	80092a8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  mpu6050Config();
 8000f5a:	f000 faef 	bl	800153c <mpu6050Config>
  mpu6050Read_DMA();
 8000f5e:	f000 fb07 	bl	8001570 <mpu6050Read_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t timerUSB = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	63fb      	str	r3, [r7, #60]	@ 0x3c



  float roll_estimate_rad = 0.0f;
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  float pitch_estimate_rad = 0.0f;
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	637b      	str	r3, [r7, #52]	@ 0x34


  while (1)
  {
	  /* Log data via USB */
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 8000f72:	f000 fe35 	bl	8001be0 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b13      	cmp	r3, #19
 8000f7e:	d9f8      	bls.n	8000f72 <main+0x3a>
		   *
		   * Both angles are then converted from radians to degrees.
		   */

	      // Compute roll using atan2 for proper quadrant handling
	      float phiHat_acc_rad = atan2f(Ay, Az);
 8000f80:	4b93      	ldr	r3, [pc, #588]	@ (80011d0 <main+0x298>)
 8000f82:	edd3 7a00 	vldr	s15, [r3]
 8000f86:	4b93      	ldr	r3, [pc, #588]	@ (80011d4 <main+0x29c>)
 8000f88:	ed93 7a00 	vldr	s14, [r3]
 8000f8c:	eef0 0a47 	vmov.f32	s1, s14
 8000f90:	eeb0 0a67 	vmov.f32	s0, s15
 8000f94:	f00b fd28 	bl	800c9e8 <atan2f>
 8000f98:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
	      // Compute pitch using both Ax and the combination of Ay and Az
	      float thetaHat_acc_rad = atan2f(-Ax, sqrt(Ay * Ay + Az * Az));
 8000f9c:	4b8e      	ldr	r3, [pc, #568]	@ (80011d8 <main+0x2a0>)
 8000f9e:	edd3 7a00 	vldr	s15, [r3]
 8000fa2:	eeb1 8a67 	vneg.f32	s16, s15
 8000fa6:	4b8a      	ldr	r3, [pc, #552]	@ (80011d0 <main+0x298>)
 8000fa8:	ed93 7a00 	vldr	s14, [r3]
 8000fac:	4b88      	ldr	r3, [pc, #544]	@ (80011d0 <main+0x298>)
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb6:	4b87      	ldr	r3, [pc, #540]	@ (80011d4 <main+0x29c>)
 8000fb8:	edd3 6a00 	vldr	s13, [r3]
 8000fbc:	4b85      	ldr	r3, [pc, #532]	@ (80011d4 <main+0x29c>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fca:	ee17 0a90 	vmov	r0, s15
 8000fce:	f7ff fabb 	bl	8000548 <__aeabi_f2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	ec43 2b10 	vmov	d0, r2, r3
 8000fda:	f00b fcd9 	bl	800c990 <sqrt>
 8000fde:	ec53 2b10 	vmov	r2, r3, d0
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fddf 	bl	8000ba8 <__aeabi_d2f>
 8000fea:	4603      	mov	r3, r0
 8000fec:	ee00 3a90 	vmov	s1, r3
 8000ff0:	eeb0 0a48 	vmov.f32	s0, s16
 8000ff4:	f00b fcf8 	bl	800c9e8 <atan2f>
 8000ff8:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

	      float phiHat_acc_deg = phiHat_acc_rad * RAD_TO_DEG;
 8000ffc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001000:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80011dc <main+0x2a4>
 8001004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001008:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	      float thetaHat_acc_deg = thetaHat_acc_rad * RAD_TO_DEG;
 800100c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001010:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80011dc <main+0x2a4>
 8001014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001018:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24


		  // Assume Gx, Gy, Gz are measured gyro values in deg/s
		  // Convert them to rad/s:
		  float p_rps = Gx * (M_PI / 180.0f);
 800101c:	4b70      	ldr	r3, [pc, #448]	@ (80011e0 <main+0x2a8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa91 	bl	8000548 <__aeabi_f2d>
 8001026:	a368      	add	r3, pc, #416	@ (adr r3, 80011c8 <main+0x290>)
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	f7ff fae4 	bl	80005f8 <__aeabi_dmul>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fdb6 	bl	8000ba8 <__aeabi_d2f>
 800103c:	4603      	mov	r3, r0
 800103e:	623b      	str	r3, [r7, #32]
		  float q_rps = Gy * (M_PI / 180.0f);
 8001040:	4b68      	ldr	r3, [pc, #416]	@ (80011e4 <main+0x2ac>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa7f 	bl	8000548 <__aeabi_f2d>
 800104a:	a35f      	add	r3, pc, #380	@ (adr r3, 80011c8 <main+0x290>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff fad2 	bl	80005f8 <__aeabi_dmul>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fda4 	bl	8000ba8 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	61fb      	str	r3, [r7, #28]
		  float r_rps = Gz * (M_PI / 180.0f);
 8001064:	4b60      	ldr	r3, [pc, #384]	@ (80011e8 <main+0x2b0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa6d 	bl	8000548 <__aeabi_f2d>
 800106e:	a356      	add	r3, pc, #344	@ (adr r3, 80011c8 <main+0x290>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fac0 	bl	80005f8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fd92 	bl	8000ba8 <__aeabi_d2f>
 8001084:	4603      	mov	r3, r0
 8001086:	61bb      	str	r3, [r7, #24]

		  // dt is the sampling time in seconds (e.g., 50 ms -> 0.05 s)
		  float dt = SAMPLE_TIME_MS_USB / 1000.0f;
 8001088:	4b58      	ldr	r3, [pc, #352]	@ (80011ec <main+0x2b4>)
 800108a:	617b      	str	r3, [r7, #20]
		  // Current estimates of roll and pitch (roll_estimate_rad and pitch_estimate_rad)
		  // Should be initialized to some starting values, possibly 0 or from an accelerometer.


		  // Calculate the Euler angle derivatives from the gyro rates:
		  float phiDot_rps = p_rps + tanf(pitch_estimate_rad) * (sinf(roll_estimate_rad) * q_rps + cosf(roll_estimate_rad) * r_rps);
 800108c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001090:	f00b fd36 	bl	800cb00 <tanf>
 8001094:	eef0 8a40 	vmov.f32	s17, s0
 8001098:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 800109c:	f00b fcea 	bl	800ca74 <sinf>
 80010a0:	eeb0 7a40 	vmov.f32	s14, s0
 80010a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80010a8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80010ac:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80010b0:	f00b fc9c 	bl	800c9ec <cosf>
 80010b4:	eeb0 7a40 	vmov.f32	s14, s0
 80010b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80010bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80010c4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80010c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80010cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d0:	edc7 7a04 	vstr	s15, [r7, #16]
		  float thetaDot_rps = cosf(roll_estimate_rad) * q_rps - sinf(roll_estimate_rad) * r_rps;
 80010d4:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80010d8:	f00b fc88 	bl	800c9ec <cosf>
 80010dc:	eeb0 7a40 	vmov.f32	s14, s0
 80010e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80010e8:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80010ec:	f00b fcc2 	bl	800ca74 <sinf>
 80010f0:	eeb0 7a40 	vmov.f32	s14, s0
 80010f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80010f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fc:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001100:	edc7 7a03 	vstr	s15, [r7, #12]



		  // Combine accelerometer estimates with integral readings of gyro
		  roll_estimate_rad = COMP_FILT_ALPHA * phiHat_acc_rad + (1.0f - COMP_FILT_ALPHA) * (roll_estimate_rad + dt) * phiDot_rps;
 8001104:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001108:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80011f0 <main+0x2b8>
 800110c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001110:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001114:	edd7 7a05 	vldr	s15, [r7, #20]
 8001118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800111c:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80011f4 <main+0x2bc>
 8001120:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001124:	edd7 7a04 	vldr	s15, [r7, #16]
 8001128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001130:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		  pitch_estimate_rad = COMP_FILT_ALPHA * thetaHat_acc_rad + (1.0f - COMP_FILT_ALPHA) * (pitch_estimate_rad + dt) * thetaDot_rps;
 8001134:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001138:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80011f0 <main+0x2b8>
 800113c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001140:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001144:	edd7 7a05 	vldr	s15, [r7, #20]
 8001148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800114c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80011f4 <main+0x2bc>
 8001150:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001154:	edd7 7a03 	vldr	s15, [r7, #12]
 8001158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001160:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  // convert to degrees for display:
		  float roll_estimate_deg  = roll_estimate_rad * RAD_TO_DEG;
 8001164:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001168:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80011dc <main+0x2a4>
 800116c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001170:	edc7 7a02 	vstr	s15, [r7, #8]
		  float pitch_estimate_deg = pitch_estimate_rad * RAD_TO_DEG;
 8001174:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001178:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80011dc <main+0x2a4>
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001180:	edc7 7a01 	vstr	s15, [r7, #4]

		  // Now, phiHat_deg and thetaHat_deg are your estimated roll and pitch angles.


	      snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f7ff f9df 	bl	8000548 <__aeabi_f2d>
 800118a:	4604      	mov	r4, r0
 800118c:	460d      	mov	r5, r1
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff f9da 	bl	8000548 <__aeabi_f2d>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800119c:	e9cd 4500 	strd	r4, r5, [sp]
 80011a0:	4a15      	ldr	r2, [pc, #84]	@ (80011f8 <main+0x2c0>)
 80011a2:	2196      	movs	r1, #150	@ 0x96
 80011a4:	4815      	ldr	r0, [pc, #84]	@ (80011fc <main+0x2c4>)
 80011a6:	f009 fab3 	bl	800a710 <sniprintf>
	               "%.3f, %.3f\r\n",
				   roll_estimate_deg,
				   pitch_estimate_deg );


	      CDC_Transmit_FS((uint8_t*)usb_tx_buffer, strlen(usb_tx_buffer));
 80011aa:	4814      	ldr	r0, [pc, #80]	@ (80011fc <main+0x2c4>)
 80011ac:	f7ff f860 	bl	8000270 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	4619      	mov	r1, r3
 80011b6:	4811      	ldr	r0, [pc, #68]	@ (80011fc <main+0x2c4>)
 80011b8:	f008 f934 	bl	8009424 <CDC_Transmit_FS>
	      timerUSB = HAL_GetTick();
 80011bc:	f000 fd10 	bl	8001be0 <HAL_GetTick>
 80011c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 80011c2:	e6d6      	b.n	8000f72 <main+0x3a>
 80011c4:	f3af 8000 	nop.w
 80011c8:	a2529d39 	.word	0xa2529d39
 80011cc:	3f91df46 	.word	0x3f91df46
 80011d0:	20000444 	.word	0x20000444
 80011d4:	20000448 	.word	0x20000448
 80011d8:	20000440 	.word	0x20000440
 80011dc:	42652ee1 	.word	0x42652ee1
 80011e0:	2000044c 	.word	0x2000044c
 80011e4:	20000450 	.word	0x20000450
 80011e8:	20000454 	.word	0x20000454
 80011ec:	3ca3d70a 	.word	0x3ca3d70a
 80011f0:	3d4ccccd 	.word	0x3d4ccccd
 80011f4:	3f733333 	.word	0x3f733333
 80011f8:	0800dbb8 	.word	0x0800dbb8
 80011fc:	200003a8 	.word	0x200003a8

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	@ 0x50
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	2230      	movs	r2, #48	@ 0x30
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f009 faf5 	bl	800a7fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <SystemClock_Config+0xcc>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	4a27      	ldr	r2, [pc, #156]	@ (80012cc <SystemClock_Config+0xcc>)
 800122e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001232:	6413      	str	r3, [r2, #64]	@ 0x40
 8001234:	4b25      	ldr	r3, [pc, #148]	@ (80012cc <SystemClock_Config+0xcc>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	4b22      	ldr	r3, [pc, #136]	@ (80012d0 <SystemClock_Config+0xd0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a21      	ldr	r2, [pc, #132]	@ (80012d0 <SystemClock_Config+0xd0>)
 800124a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <SystemClock_Config+0xd0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001260:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001266:	2302      	movs	r3, #2
 8001268:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800126e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001270:	2304      	movs	r3, #4
 8001272:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001274:	23a8      	movs	r3, #168	@ 0xa8
 8001276:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001278:	2302      	movs	r3, #2
 800127a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800127c:	2307      	movs	r3, #7
 800127e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	4618      	mov	r0, r3
 8001286:	f004 f871 	bl	800536c <HAL_RCC_OscConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001290:	f000 f8a4 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001294:	230f      	movs	r3, #15
 8001296:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001298:	2302      	movs	r3, #2
 800129a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80012a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2105      	movs	r1, #5
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 fad2 	bl	800585c <HAL_RCC_ClockConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012be:	f000 f88d 	bl	80013dc <Error_Handler>
  }
}
 80012c2:	bf00      	nop
 80012c4:	3750      	adds	r7, #80	@ 0x50
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40007000 	.word	0x40007000

080012d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <MX_I2C1_Init+0x50>)
 80012da:	4a13      	ldr	r2, [pc, #76]	@ (8001328 <MX_I2C1_Init+0x54>)
 80012dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012de:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <MX_I2C1_Init+0x50>)
 80012e0:	4a12      	ldr	r2, [pc, #72]	@ (800132c <MX_I2C1_Init+0x58>)
 80012e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <MX_I2C1_Init+0x50>)
 80012f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001304:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	@ (8001324 <MX_I2C1_Init+0x50>)
 8001312:	f001 fae1 	bl	80028d8 <HAL_I2C_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800131c:	f000 f85e 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200002f4 	.word	0x200002f4
 8001328:	40005400 	.word	0x40005400
 800132c:	000186a0 	.word	0x000186a0

08001330 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_DMA_Init+0x3c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a0b      	ldr	r2, [pc, #44]	@ (800136c <MX_DMA_Init+0x3c>)
 8001340:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <MX_DMA_Init+0x3c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	200b      	movs	r0, #11
 8001358:	f000 fd4d 	bl	8001df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800135c:	200b      	movs	r0, #11
 800135e:	f000 fd66 	bl	8001e2e <HAL_NVIC_EnableIRQ>

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <MX_GPIO_Init+0x68>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a16      	ldr	r2, [pc, #88]	@ (80013d8 <MX_GPIO_Init+0x68>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <MX_GPIO_Init+0x68>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <MX_GPIO_Init+0x68>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <MX_GPIO_Init+0x68>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <MX_GPIO_Init+0x68>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <MX_GPIO_Init+0x68>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <MX_GPIO_Init+0x68>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <MX_GPIO_Init+0x68>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <Error_Handler+0x8>

080013e8 <mpu6050Init>:
uint8_t mpu6050Data[14];




void mpu6050Init(void){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(
 80013ee:	2364      	movs	r3, #100	@ 0x64
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	2301      	movs	r3, #1
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <mpu6050Init+0x24>)
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2301      	movs	r3, #1
 80013fc:	2275      	movs	r2, #117	@ 0x75
 80013fe:	21d0      	movs	r1, #208	@ 0xd0
 8001400:	4803      	ldr	r0, [pc, #12]	@ (8001410 <mpu6050Init+0x28>)
 8001402:	f001 fca7 	bl	8002d54 <HAL_I2C_Mem_Read>
				1,
				&whoAreYou,
				1,
				100
				);
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000043e 	.word	0x2000043e
 8001410:	200002f4 	.word	0x200002f4

08001414 <mpu6050powerOn>:

void mpu6050powerOn(void){
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af04      	add	r7, sp, #16
	MemData = 0x00;
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <mpu6050powerOn+0x2c>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(
 8001420:	2364      	movs	r3, #100	@ 0x64
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	2301      	movs	r3, #1
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <mpu6050powerOn+0x2c>)
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	226b      	movs	r2, #107	@ 0x6b
 8001430:	21d0      	movs	r1, #208	@ 0xd0
 8001432:	4804      	ldr	r0, [pc, #16]	@ (8001444 <mpu6050powerOn+0x30>)
 8001434:	f001 fb94 	bl	8002b60 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000043f 	.word	0x2000043f
 8001444:	200002f4 	.word	0x200002f4

08001448 <mpu6050Sampling>:

void mpu6050Sampling(void){
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af04      	add	r7, sp, #16
	MemData = 0x07;
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <mpu6050Sampling+0x2c>)
 8001450:	2207      	movs	r2, #7
 8001452:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(
 8001454:	2364      	movs	r3, #100	@ 0x64
 8001456:	9302      	str	r3, [sp, #8]
 8001458:	2301      	movs	r3, #1
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <mpu6050Sampling+0x2c>)
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2301      	movs	r3, #1
 8001462:	2219      	movs	r2, #25
 8001464:	21d0      	movs	r1, #208	@ 0xd0
 8001466:	4804      	ldr	r0, [pc, #16]	@ (8001478 <mpu6050Sampling+0x30>)
 8001468:	f001 fb7a 	bl	8002b60 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000043f 	.word	0x2000043f
 8001478:	200002f4 	.word	0x200002f4

0800147c <mpu6050GyroScale>:

void mpu6050GyroScale(gyroScale_t scale){
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af04      	add	r7, sp, #16
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	MemData = 0x00 | (scale << 3);
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <mpu6050GyroScale+0x34>)
 800148e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(
 8001490:	2364      	movs	r3, #100	@ 0x64
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2301      	movs	r3, #1
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <mpu6050GyroScale+0x34>)
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	221b      	movs	r2, #27
 80014a0:	21d0      	movs	r1, #208	@ 0xd0
 80014a2:	4804      	ldr	r0, [pc, #16]	@ (80014b4 <mpu6050GyroScale+0x38>)
 80014a4:	f001 fb5c 	bl	8002b60 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000043f 	.word	0x2000043f
 80014b4:	200002f4 	.word	0x200002f4

080014b8 <mpu6050AccelScale>:

void mpu6050AccelScale(accelScale_t scale){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af04      	add	r7, sp, #16
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	MemData = 0x00 | (scale << 3);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <mpu6050AccelScale+0x34>)
 80014ca:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(
 80014cc:	2364      	movs	r3, #100	@ 0x64
 80014ce:	9302      	str	r3, [sp, #8]
 80014d0:	2301      	movs	r3, #1
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <mpu6050AccelScale+0x34>)
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2301      	movs	r3, #1
 80014da:	221c      	movs	r2, #28
 80014dc:	21d0      	movs	r1, #208	@ 0xd0
 80014de:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <mpu6050AccelScale+0x38>)
 80014e0:	f001 fb3e 	bl	8002b60 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000043f 	.word	0x2000043f
 80014f0:	200002f4 	.word	0x200002f4

080014f4 <mpu6050ConfigFilter>:

void mpu6050ConfigFilter(uint8_t ext_sync, dlpfCfg_t dlpf_cfg) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af04      	add	r7, sp, #16
 80014fa:	4603      	mov	r3, r0
 80014fc:	460a      	mov	r2, r1
 80014fe:	71fb      	strb	r3, [r7, #7]
 8001500:	4613      	mov	r3, r2
 8001502:	71bb      	strb	r3, [r7, #6]
    // The CONFIG register (address 0x1A) combines EXT_SYNC_SET (bits 5–3) and DLPF_CFG (bits 2–0).
    // ext_sync: external sync setting (0 if not used).
    // dlpf_cfg: desired digital low pass filter configuration.
    uint8_t config = (ext_sync << 3) | (uint8_t)dlpf_cfg;
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	b25a      	sxtb	r2, r3
 800150a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800150e:	4313      	orrs	r3, r2
 8001510:	b25b      	sxtb	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Mem_Write(
 8001516:	2364      	movs	r3, #100	@ 0x64
 8001518:	9302      	str	r3, [sp, #8]
 800151a:	2301      	movs	r3, #1
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	f107 030f 	add.w	r3, r7, #15
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2301      	movs	r3, #1
 8001526:	221a      	movs	r2, #26
 8001528:	21d0      	movs	r1, #208	@ 0xd0
 800152a:	4803      	ldr	r0, [pc, #12]	@ (8001538 <mpu6050ConfigFilter+0x44>)
 800152c:	f001 fb18 	bl	8002b60 <HAL_I2C_Mem_Write>
        1,
        &config,
        1,
        100
    );
}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200002f4 	.word	0x200002f4

0800153c <mpu6050Config>:


void mpu6050Config(void){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	// is valid Condition true 0x68
	mpu6050Init();
 8001540:	f7ff ff52 	bl	80013e8 <mpu6050Init>

	if(validCondition1){
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <mpu6050Config+0x30>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b68      	cmp	r3, #104	@ 0x68
 800154a:	d10d      	bne.n	8001568 <mpu6050Config+0x2c>
	// power on
		mpu6050powerOn();
 800154c:	f7ff ff62 	bl	8001414 <mpu6050powerOn>
	// sampling data ratio
		mpu6050Sampling();
 8001550:	f7ff ff7a 	bl	8001448 <mpu6050Sampling>
	// gyro scale   (RAW)
		mpu6050GyroScale(degS500);
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff ff91 	bl	800147c <mpu6050GyroScale>
	// accel scale  (RAW)
		mpu6050AccelScale(g4);
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff ffac 	bl	80014b8 <mpu6050AccelScale>
	// using low pass filter
		mpu6050ConfigFilter(0, DLPF_CFG_10HZ);
 8001560:	2105      	movs	r1, #5
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff ffc6 	bl	80014f4 <mpu6050ConfigFilter>

	}
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000043e 	.word	0x2000043e

08001570 <mpu6050Read_DMA>:
	Ay = RAWaccelY/2048.0;
	Az = RAWaccelZ/2048.0;
}


void mpu6050Read_DMA(void) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(&hi2c1,
 8001576:	230e      	movs	r3, #14
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <mpu6050Read_DMA+0x28>)
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2301      	movs	r3, #1
 8001580:	223b      	movs	r2, #59	@ 0x3b
 8001582:	21d0      	movs	r1, #208	@ 0xd0
 8001584:	4805      	ldr	r0, [pc, #20]	@ (800159c <mpu6050Read_DMA+0x2c>)
 8001586:	f001 fe17 	bl	80031b8 <HAL_I2C_Mem_Read_DMA>
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
                                                    mpu6050Data,// Buffer to store the 14 bytes
                                                    14);        // Number of bytes to read
    if(status != HAL_OK) {
        // Handle error here, e.g., log or trigger an error flag.
    }
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000045c 	.word	0x2000045c
 800159c:	200002f4 	.word	0x200002f4

080015a0 <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
    if(hi2c->Instance == I2C1) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a58      	ldr	r2, [pc, #352]	@ (8001710 <HAL_I2C_MemRxCpltCallback+0x170>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	f040 80a6 	bne.w	8001700 <HAL_I2C_MemRxCpltCallback+0x160>
        // Accelerometer data conversion
        int16_t rawAccelX = (int16_t)((mpu6050Data[0] << 8) | mpu6050Data[1]);
 80015b4:	4b57      	ldr	r3, [pc, #348]	@ (8001714 <HAL_I2C_MemRxCpltCallback+0x174>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	4b55      	ldr	r3, [pc, #340]	@ (8001714 <HAL_I2C_MemRxCpltCallback+0x174>)
 80015be:	785b      	ldrb	r3, [r3, #1]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	82fb      	strh	r3, [r7, #22]
        int16_t rawAccelY = (int16_t)((mpu6050Data[2] << 8) | mpu6050Data[3]);
 80015c6:	4b53      	ldr	r3, [pc, #332]	@ (8001714 <HAL_I2C_MemRxCpltCallback+0x174>)
 80015c8:	789b      	ldrb	r3, [r3, #2]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	4b51      	ldr	r3, [pc, #324]	@ (8001714 <HAL_I2C_MemRxCpltCallback+0x174>)
 80015d0:	78db      	ldrb	r3, [r3, #3]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	82bb      	strh	r3, [r7, #20]
        int16_t rawAccelZ = (int16_t)((mpu6050Data[4] << 8) | mpu6050Data[5]);
 80015d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001714 <HAL_I2C_MemRxCpltCallback+0x174>)
 80015da:	791b      	ldrb	r3, [r3, #4]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b21a      	sxth	r2, r3
 80015e0:	4b4c      	ldr	r3, [pc, #304]	@ (8001714 <HAL_I2C_MemRxCpltCallback+0x174>)
 80015e2:	795b      	ldrb	r3, [r3, #5]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	827b      	strh	r3, [r7, #18]

        // Temperature data conversion
        int16_t rawTemp = (int16_t)((mpu6050Data[6] << 8) | mpu6050Data[7]);
 80015ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001714 <HAL_I2C_MemRxCpltCallback+0x174>)
 80015ec:	799b      	ldrb	r3, [r3, #6]
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	4b48      	ldr	r3, [pc, #288]	@ (8001714 <HAL_I2C_MemRxCpltCallback+0x174>)
 80015f4:	79db      	ldrb	r3, [r3, #7]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	823b      	strh	r3, [r7, #16]
        // Conversion formula example: actualTemp = (rawTemp / 340.0) + 36.53

        // Gyro data conversion
        int16_t rawGyroX = (int16_t)((mpu6050Data[8]  << 8) | mpu6050Data[9]);
 80015fc:	4b45      	ldr	r3, [pc, #276]	@ (8001714 <HAL_I2C_MemRxCpltCallback+0x174>)
 80015fe:	7a1b      	ldrb	r3, [r3, #8]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21a      	sxth	r2, r3
 8001604:	4b43      	ldr	r3, [pc, #268]	@ (8001714 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001606:	7a5b      	ldrb	r3, [r3, #9]
 8001608:	b21b      	sxth	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	81fb      	strh	r3, [r7, #14]
        int16_t rawGyroY = (int16_t)((mpu6050Data[10] << 8) | mpu6050Data[11]);
 800160e:	4b41      	ldr	r3, [pc, #260]	@ (8001714 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001610:	7a9b      	ldrb	r3, [r3, #10]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b3f      	ldr	r3, [pc, #252]	@ (8001714 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001618:	7adb      	ldrb	r3, [r3, #11]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	81bb      	strh	r3, [r7, #12]
        int16_t rawGyroZ = (int16_t)((mpu6050Data[12] << 8) | mpu6050Data[13]);
 8001620:	4b3c      	ldr	r3, [pc, #240]	@ (8001714 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001622:	7b1b      	ldrb	r3, [r3, #12]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	b21a      	sxth	r2, r3
 8001628:	4b3a      	ldr	r3, [pc, #232]	@ (8001714 <HAL_I2C_MemRxCpltCallback+0x174>)
 800162a:	7b5b      	ldrb	r3, [r3, #13]
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	817b      	strh	r3, [r7, #10]


        Ax = rawAccelX / 8192.0f;
 8001632:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800163e:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001718 <HAL_I2C_MemRxCpltCallback+0x178>
 8001642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001646:	4b35      	ldr	r3, [pc, #212]	@ (800171c <HAL_I2C_MemRxCpltCallback+0x17c>)
 8001648:	edc3 7a00 	vstr	s15, [r3]
        Ay = rawAccelY / 8192.0f;
 800164c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001658:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001718 <HAL_I2C_MemRxCpltCallback+0x178>
 800165c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001660:	4b2f      	ldr	r3, [pc, #188]	@ (8001720 <HAL_I2C_MemRxCpltCallback+0x180>)
 8001662:	edc3 7a00 	vstr	s15, [r3]
        Az = rawAccelZ / 8192.0f;
 8001666:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001672:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001718 <HAL_I2C_MemRxCpltCallback+0x178>
 8001676:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167a:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <HAL_I2C_MemRxCpltCallback+0x184>)
 800167c:	edc3 7a00 	vstr	s15, [r3]

        temperature = (rawTemp / 340.0f) + 36.53f; // Example conversion formula
 8001680:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800168c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001728 <HAL_I2C_MemRxCpltCallback+0x188>
 8001690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001694:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800172c <HAL_I2C_MemRxCpltCallback+0x18c>
 8001698:	ee77 7a87 	vadd.f32	s15, s15, s14
 800169c:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <HAL_I2C_MemRxCpltCallback+0x190>)
 800169e:	edc3 7a00 	vstr	s15, [r3]

        Gx = rawGyroX / 65.5f;
 80016a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016a6:	ee07 3a90 	vmov	s15, r3
 80016aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ae:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001734 <HAL_I2C_MemRxCpltCallback+0x194>
 80016b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b6:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <HAL_I2C_MemRxCpltCallback+0x198>)
 80016b8:	edc3 7a00 	vstr	s15, [r3]
        Gy = rawGyroY / 65.5;
 80016bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ff2f 	bl	8000524 <__aeabi_i2d>
 80016c6:	a310      	add	r3, pc, #64	@ (adr r3, 8001708 <HAL_I2C_MemRxCpltCallback+0x168>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7ff f8be 	bl	800084c <__aeabi_ddiv>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f7ff fa66 	bl	8000ba8 <__aeabi_d2f>
 80016dc:	4603      	mov	r3, r0
 80016de:	4a17      	ldr	r2, [pc, #92]	@ (800173c <HAL_I2C_MemRxCpltCallback+0x19c>)
 80016e0:	6013      	str	r3, [r2, #0]
        Gz = rawGyroZ / 65.5f;
 80016e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ee:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001734 <HAL_I2C_MemRxCpltCallback+0x194>
 80016f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f6:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_I2C_MemRxCpltCallback+0x1a0>)
 80016f8:	edc3 7a00 	vstr	s15, [r3]
        // Process or store these values as needed
        // For example, update global variables or send them to another module

        // If you need continuous reading and are not using circular mode,
        // you can re-initiate the DMA read here.
        mpu6050Read_DMA();
 80016fc:	f7ff ff38 	bl	8001570 <mpu6050Read_DMA>
    }
}
 8001700:	bf00      	nop
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	00000000 	.word	0x00000000
 800170c:	40506000 	.word	0x40506000
 8001710:	40005400 	.word	0x40005400
 8001714:	2000045c 	.word	0x2000045c
 8001718:	46000000 	.word	0x46000000
 800171c:	20000440 	.word	0x20000440
 8001720:	20000444 	.word	0x20000444
 8001724:	20000448 	.word	0x20000448
 8001728:	43aa0000 	.word	0x43aa0000
 800172c:	42121eb8 	.word	0x42121eb8
 8001730:	20000458 	.word	0x20000458
 8001734:	42830000 	.word	0x42830000
 8001738:	2000044c 	.word	0x2000044c
 800173c:	20000450 	.word	0x20000450
 8001740:	20000454 	.word	0x20000454

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001752:	4a0f      	ldr	r2, [pc, #60]	@ (8001790 <HAL_MspInit+0x4c>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001758:	6453      	str	r3, [r2, #68]	@ 0x44
 800175a:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <HAL_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <HAL_MspInit+0x4c>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001774:	6413      	str	r3, [r2, #64]	@ 0x40
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_MspInit+0x4c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a30      	ldr	r2, [pc, #192]	@ (8001874 <HAL_I2C_MspInit+0xe0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d15a      	bne.n	800186c <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001878 <HAL_I2C_MspInit+0xe4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a2e      	ldr	r2, [pc, #184]	@ (8001878 <HAL_I2C_MspInit+0xe4>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001878 <HAL_I2C_MspInit+0xe4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017d2:	23c0      	movs	r3, #192	@ 0xc0
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d6:	2312      	movs	r3, #18
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e2:	2304      	movs	r3, #4
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4823      	ldr	r0, [pc, #140]	@ (800187c <HAL_I2C_MspInit+0xe8>)
 80017ee:	f000 fed7 	bl	80025a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <HAL_I2C_MspInit+0xe4>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001878 <HAL_I2C_MspInit+0xe4>)
 80017fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001800:	6413      	str	r3, [r2, #64]	@ 0x40
 8001802:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <HAL_I2C_MspInit+0xe4>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800180e:	4b1c      	ldr	r3, [pc, #112]	@ (8001880 <HAL_I2C_MspInit+0xec>)
 8001810:	4a1c      	ldr	r2, [pc, #112]	@ (8001884 <HAL_I2C_MspInit+0xf0>)
 8001812:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001814:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <HAL_I2C_MspInit+0xec>)
 8001816:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800181a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800181c:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <HAL_I2C_MspInit+0xec>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <HAL_I2C_MspInit+0xec>)
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001828:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <HAL_I2C_MspInit+0xec>)
 800182a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800182e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <HAL_I2C_MspInit+0xec>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001836:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <HAL_I2C_MspInit+0xec>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800183c:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <HAL_I2C_MspInit+0xec>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001842:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <HAL_I2C_MspInit+0xec>)
 8001844:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001848:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800184a:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <HAL_I2C_MspInit+0xec>)
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001850:	480b      	ldr	r0, [pc, #44]	@ (8001880 <HAL_I2C_MspInit+0xec>)
 8001852:	f000 fb07 	bl	8001e64 <HAL_DMA_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800185c:	f7ff fdbe 	bl	80013dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a07      	ldr	r2, [pc, #28]	@ (8001880 <HAL_I2C_MspInit+0xec>)
 8001864:	639a      	str	r2, [r3, #56]	@ 0x38
 8001866:	4a06      	ldr	r2, [pc, #24]	@ (8001880 <HAL_I2C_MspInit+0xec>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	@ 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40005400 	.word	0x40005400
 8001878:	40023800 	.word	0x40023800
 800187c:	40020400 	.word	0x40020400
 8001880:	20000348 	.word	0x20000348
 8001884:	40026010 	.word	0x40026010

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <NMI_Handler+0x4>

08001890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <MemManage_Handler+0x4>

080018a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <BusFault_Handler+0x4>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <UsageFault_Handler+0x4>

080018b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018de:	f000 f96b 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018ec:	4802      	ldr	r0, [pc, #8]	@ (80018f8 <DMA1_Stream0_IRQHandler+0x10>)
 80018ee:	f000 fbe1 	bl	80020b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000348 	.word	0x20000348

080018fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001900:	4802      	ldr	r0, [pc, #8]	@ (800190c <OTG_FS_IRQHandler+0x10>)
 8001902:	f002 fc25 	bl	8004150 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20001954 	.word	0x20001954

08001910 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return 1;
 8001914:	2301      	movs	r3, #1
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_kill>:

int _kill(int pid, int sig)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800192a:	f008 ffbb 	bl	800a8a4 <__errno>
 800192e:	4603      	mov	r3, r0
 8001930:	2216      	movs	r2, #22
 8001932:	601a      	str	r2, [r3, #0]
  return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_exit>:

void _exit (int status)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001948:	f04f 31ff 	mov.w	r1, #4294967295
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ffe7 	bl	8001920 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001952:	bf00      	nop
 8001954:	e7fd      	b.n	8001952 <_exit+0x12>

08001956 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e00a      	b.n	800197e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001968:	f3af 8000 	nop.w
 800196c:	4601      	mov	r1, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	60ba      	str	r2, [r7, #8]
 8001974:	b2ca      	uxtb	r2, r1
 8001976:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	3301      	adds	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	429a      	cmp	r2, r3
 8001984:	dbf0      	blt.n	8001968 <_read+0x12>
  }

  return len;
 8001986:	687b      	ldr	r3, [r7, #4]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e009      	b.n	80019b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	60ba      	str	r2, [r7, #8]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	3301      	adds	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	dbf1      	blt.n	80019a2 <_write+0x12>
  }
  return len;
 80019be:	687b      	ldr	r3, [r7, #4]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_close>:

int _close(int file)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019f0:	605a      	str	r2, [r3, #4]
  return 0;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_isatty>:

int _isatty(int file)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a08:	2301      	movs	r3, #1
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a38:	4a14      	ldr	r2, [pc, #80]	@ (8001a8c <_sbrk+0x5c>)
 8001a3a:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <_sbrk+0x60>)
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a44:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <_sbrk+0x64>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	@ (8001a98 <_sbrk+0x68>)
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d207      	bcs.n	8001a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a60:	f008 ff20 	bl	800a8a4 <__errno>
 8001a64:	4603      	mov	r3, r0
 8001a66:	220c      	movs	r2, #12
 8001a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	e009      	b.n	8001a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a76:	4b07      	ldr	r3, [pc, #28]	@ (8001a94 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a05      	ldr	r2, [pc, #20]	@ (8001a94 <_sbrk+0x64>)
 8001a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20020000 	.word	0x20020000
 8001a90:	00000400 	.word	0x00000400
 8001a94:	2000046c 	.word	0x2000046c
 8001a98:	200021a8 	.word	0x200021a8

08001a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <SystemInit+0x20>)
 8001aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aa6:	4a05      	ldr	r2, [pc, #20]	@ (8001abc <SystemInit+0x20>)
 8001aa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ac4:	f7ff ffea 	bl	8001a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac8:	480c      	ldr	r0, [pc, #48]	@ (8001afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aca:	490d      	ldr	r1, [pc, #52]	@ (8001b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001acc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8001b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001aee:	f008 fedf 	bl	800a8b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af2:	f7ff fa21 	bl	8000f38 <main>
  bx  lr    
 8001af6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b00:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8001b04:	0800e3b8 	.word	0x0800e3b8
  ldr r2, =_sbss
 8001b08:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001b0c:	200021a4 	.word	0x200021a4

08001b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b18:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <HAL_Init+0x40>)
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b24:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <HAL_Init+0x40>)
 8001b2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <HAL_Init+0x40>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f94f 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	200f      	movs	r0, #15
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fdfc 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f967 	bl	8001e4a <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f92f 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	@ (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000470 	.word	0x20000470

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000470 	.word	0x20000470

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <HAL_Delay+0x44>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000008 	.word	0x20000008

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	@ (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	@ (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	@ (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	@ 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	@ 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff29 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff3e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff8e 	bl	8001d34 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff31 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa2 	bl	8001d9c <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff feb6 	bl	8001be0 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e099      	b.n	8001fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea0:	e00f      	b.n	8001ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ea2:	f7ff fe9d 	bl	8001be0 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d908      	bls.n	8001ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e078      	b.n	8001fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e8      	bne.n	8001ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4b38      	ldr	r3, [pc, #224]	@ (8001fbc <HAL_DMA_Init+0x158>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	4313      	orrs	r3, r2
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f023 0307 	bic.w	r3, r3, #7
 8001f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d117      	bne.n	8001f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00e      	beq.n	8001f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fa9d 	bl	80024a8 <DMA_CheckFifoParam>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2240      	movs	r2, #64	@ 0x40
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f82:	2301      	movs	r3, #1
 8001f84:	e016      	b.n	8001fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa54 	bl	800243c <DMA_CalcBaseAndBitshift>
 8001f94:	4603      	mov	r3, r0
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9c:	223f      	movs	r2, #63	@ 0x3f
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	f010803f 	.word	0xf010803f

08001fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_DMA_Start_IT+0x26>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e040      	b.n	8002068 <HAL_DMA_Start_IT+0xa8>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d12f      	bne.n	800205a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f9e6 	bl	80023e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002018:	223f      	movs	r2, #63	@ 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0216 	orr.w	r2, r2, #22
 800202e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0208 	orr.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e005      	b.n	8002066 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d004      	beq.n	800208e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2280      	movs	r2, #128	@ 0x80
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e00c      	b.n	80020a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2205      	movs	r2, #5
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020c0:	4b8e      	ldr	r3, [pc, #568]	@ (80022fc <HAL_DMA_IRQHandler+0x248>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a8e      	ldr	r2, [pc, #568]	@ (8002300 <HAL_DMA_IRQHandler+0x24c>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0a9b      	lsrs	r3, r3, #10
 80020cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020de:	2208      	movs	r2, #8
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01a      	beq.n	8002120 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d013      	beq.n	8002120 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0204 	bic.w	r2, r2, #4
 8002106:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210c:	2208      	movs	r2, #8
 800210e:	409a      	lsls	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002124:	2201      	movs	r2, #1
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002142:	2201      	movs	r2, #1
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214e:	f043 0202 	orr.w	r2, r3, #2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215a:	2204      	movs	r2, #4
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d012      	beq.n	800218c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002178:	2204      	movs	r2, #4
 800217a:	409a      	lsls	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002184:	f043 0204 	orr.w	r2, r3, #4
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002190:	2210      	movs	r2, #16
 8002192:	409a      	lsls	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d043      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d03c      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ae:	2210      	movs	r2, #16
 80021b0:	409a      	lsls	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d018      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d108      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d024      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
 80021e2:	e01f      	b.n	8002224 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
 80021f4:	e016      	b.n	8002224 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0208 	bic.w	r2, r2, #8
 8002212:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002228:	2220      	movs	r2, #32
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 808f 	beq.w	8002354 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8087 	beq.w	8002354 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224a:	2220      	movs	r2, #32
 800224c:	409a      	lsls	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b05      	cmp	r3, #5
 800225c:	d136      	bne.n	80022cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0216 	bic.w	r2, r2, #22
 800226c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800227c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_DMA_IRQHandler+0x1da>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0208 	bic.w	r2, r2, #8
 800229c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a2:	223f      	movs	r2, #63	@ 0x3f
 80022a4:	409a      	lsls	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d07e      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
        }
        return;
 80022ca:	e079      	b.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01d      	beq.n	8002316 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d031      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
 80022f8:	e02c      	b.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
 80022fa:	bf00      	nop
 80022fc:	20000000 	.word	0x20000000
 8002300:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d023      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
 8002314:	e01e      	b.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10f      	bne.n	8002344 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0210 	bic.w	r2, r2, #16
 8002332:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002358:	2b00      	cmp	r3, #0
 800235a:	d032      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d022      	beq.n	80023ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2205      	movs	r2, #5
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	3301      	adds	r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	429a      	cmp	r2, r3
 800238a:	d307      	bcc.n	800239c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f2      	bne.n	8002380 <HAL_DMA_IRQHandler+0x2cc>
 800239a:	e000      	b.n	800239e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800239c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	4798      	blx	r3
 80023be:	e000      	b.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023c0:	bf00      	nop
    }
  }
}
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80023fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b40      	cmp	r3, #64	@ 0x40
 800240c:	d108      	bne.n	8002420 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800241e:	e007      	b.n	8002430 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	60da      	str	r2, [r3, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	3b10      	subs	r3, #16
 800244c:	4a14      	ldr	r2, [pc, #80]	@ (80024a0 <DMA_CalcBaseAndBitshift+0x64>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002456:	4a13      	ldr	r2, [pc, #76]	@ (80024a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b03      	cmp	r3, #3
 8002468:	d909      	bls.n	800247e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002472:	f023 0303 	bic.w	r3, r3, #3
 8002476:	1d1a      	adds	r2, r3, #4
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	659a      	str	r2, [r3, #88]	@ 0x58
 800247c:	e007      	b.n	800248e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002486:	f023 0303 	bic.w	r3, r3, #3
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	aaaaaaab 	.word	0xaaaaaaab
 80024a4:	0800dc28 	.word	0x0800dc28

080024a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d11f      	bne.n	8002502 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d856      	bhi.n	8002576 <DMA_CheckFifoParam+0xce>
 80024c8:	a201      	add	r2, pc, #4	@ (adr r2, 80024d0 <DMA_CheckFifoParam+0x28>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	080024f3 	.word	0x080024f3
 80024d8:	080024e1 	.word	0x080024e1
 80024dc:	08002577 	.word	0x08002577
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d046      	beq.n	800257a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f0:	e043      	b.n	800257a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024fa:	d140      	bne.n	800257e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002500:	e03d      	b.n	800257e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800250a:	d121      	bne.n	8002550 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d837      	bhi.n	8002582 <DMA_CheckFifoParam+0xda>
 8002512:	a201      	add	r2, pc, #4	@ (adr r2, 8002518 <DMA_CheckFifoParam+0x70>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	08002529 	.word	0x08002529
 800251c:	0800252f 	.word	0x0800252f
 8002520:	08002529 	.word	0x08002529
 8002524:	08002541 	.word	0x08002541
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      break;
 800252c:	e030      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002532:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d025      	beq.n	8002586 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253e:	e022      	b.n	8002586 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002544:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002548:	d11f      	bne.n	800258a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800254e:	e01c      	b.n	800258a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d903      	bls.n	800255e <DMA_CheckFifoParam+0xb6>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b03      	cmp	r3, #3
 800255a:	d003      	beq.n	8002564 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800255c:	e018      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
      break;
 8002562:	e015      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002568:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00e      	beq.n	800258e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      break;
 8002574:	e00b      	b.n	800258e <DMA_CheckFifoParam+0xe6>
      break;
 8002576:	bf00      	nop
 8002578:	e00a      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 800257a:	bf00      	nop
 800257c:	e008      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 800257e:	bf00      	nop
 8002580:	e006      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 8002582:	bf00      	nop
 8002584:	e004      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 8002586:	bf00      	nop
 8002588:	e002      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;   
 800258a:	bf00      	nop
 800258c:	e000      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 800258e:	bf00      	nop
    }
  } 
  
  return status; 
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop

080025a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	@ 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	e16b      	b.n	8002894 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025bc:	2201      	movs	r2, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	f040 815a 	bne.w	800288e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d005      	beq.n	80025f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d130      	bne.n	8002654 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	2203      	movs	r2, #3
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002628:	2201      	movs	r2, #1
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 0201 	and.w	r2, r3, #1
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b03      	cmp	r3, #3
 800265e:	d017      	beq.n	8002690 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d123      	bne.n	80026e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	08da      	lsrs	r2, r3, #3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3208      	adds	r2, #8
 80026a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	220f      	movs	r2, #15
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	08da      	lsrs	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3208      	adds	r2, #8
 80026de:	69b9      	ldr	r1, [r7, #24]
 80026e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2203      	movs	r2, #3
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0203 	and.w	r2, r3, #3
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80b4 	beq.w	800288e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b60      	ldr	r3, [pc, #384]	@ (80028ac <HAL_GPIO_Init+0x30c>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272e:	4a5f      	ldr	r2, [pc, #380]	@ (80028ac <HAL_GPIO_Init+0x30c>)
 8002730:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002734:	6453      	str	r3, [r2, #68]	@ 0x44
 8002736:	4b5d      	ldr	r3, [pc, #372]	@ (80028ac <HAL_GPIO_Init+0x30c>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002742:	4a5b      	ldr	r2, [pc, #364]	@ (80028b0 <HAL_GPIO_Init+0x310>)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	3302      	adds	r3, #2
 800274a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	220f      	movs	r2, #15
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a52      	ldr	r2, [pc, #328]	@ (80028b4 <HAL_GPIO_Init+0x314>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d02b      	beq.n	80027c6 <HAL_GPIO_Init+0x226>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a51      	ldr	r2, [pc, #324]	@ (80028b8 <HAL_GPIO_Init+0x318>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d025      	beq.n	80027c2 <HAL_GPIO_Init+0x222>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a50      	ldr	r2, [pc, #320]	@ (80028bc <HAL_GPIO_Init+0x31c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d01f      	beq.n	80027be <HAL_GPIO_Init+0x21e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a4f      	ldr	r2, [pc, #316]	@ (80028c0 <HAL_GPIO_Init+0x320>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d019      	beq.n	80027ba <HAL_GPIO_Init+0x21a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4e      	ldr	r2, [pc, #312]	@ (80028c4 <HAL_GPIO_Init+0x324>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d013      	beq.n	80027b6 <HAL_GPIO_Init+0x216>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4d      	ldr	r2, [pc, #308]	@ (80028c8 <HAL_GPIO_Init+0x328>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00d      	beq.n	80027b2 <HAL_GPIO_Init+0x212>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a4c      	ldr	r2, [pc, #304]	@ (80028cc <HAL_GPIO_Init+0x32c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <HAL_GPIO_Init+0x20e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4b      	ldr	r2, [pc, #300]	@ (80028d0 <HAL_GPIO_Init+0x330>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d101      	bne.n	80027aa <HAL_GPIO_Init+0x20a>
 80027a6:	2307      	movs	r3, #7
 80027a8:	e00e      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027aa:	2308      	movs	r3, #8
 80027ac:	e00c      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027ae:	2306      	movs	r3, #6
 80027b0:	e00a      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027b2:	2305      	movs	r3, #5
 80027b4:	e008      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027b6:	2304      	movs	r3, #4
 80027b8:	e006      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027ba:	2303      	movs	r3, #3
 80027bc:	e004      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027be:	2302      	movs	r3, #2
 80027c0:	e002      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027c6:	2300      	movs	r3, #0
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	f002 0203 	and.w	r2, r2, #3
 80027ce:	0092      	lsls	r2, r2, #2
 80027d0:	4093      	lsls	r3, r2
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d8:	4935      	ldr	r1, [pc, #212]	@ (80028b0 <HAL_GPIO_Init+0x310>)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	3302      	adds	r3, #2
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e6:	4b3b      	ldr	r3, [pc, #236]	@ (80028d4 <HAL_GPIO_Init+0x334>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800280a:	4a32      	ldr	r2, [pc, #200]	@ (80028d4 <HAL_GPIO_Init+0x334>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002810:	4b30      	ldr	r3, [pc, #192]	@ (80028d4 <HAL_GPIO_Init+0x334>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002834:	4a27      	ldr	r2, [pc, #156]	@ (80028d4 <HAL_GPIO_Init+0x334>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800283a:	4b26      	ldr	r3, [pc, #152]	@ (80028d4 <HAL_GPIO_Init+0x334>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800285e:	4a1d      	ldr	r2, [pc, #116]	@ (80028d4 <HAL_GPIO_Init+0x334>)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002864:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <HAL_GPIO_Init+0x334>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002888:	4a12      	ldr	r2, [pc, #72]	@ (80028d4 <HAL_GPIO_Init+0x334>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3301      	adds	r3, #1
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b0f      	cmp	r3, #15
 8002898:	f67f ae90 	bls.w	80025bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3724      	adds	r7, #36	@ 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40013800 	.word	0x40013800
 80028b4:	40020000 	.word	0x40020000
 80028b8:	40020400 	.word	0x40020400
 80028bc:	40020800 	.word	0x40020800
 80028c0:	40020c00 	.word	0x40020c00
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40021400 	.word	0x40021400
 80028cc:	40021800 	.word	0x40021800
 80028d0:	40021c00 	.word	0x40021c00
 80028d4:	40013c00 	.word	0x40013c00

080028d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e12b      	b.n	8002b42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe ff48 	bl	8001794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	@ 0x24
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0201 	bic.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800292a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800293a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800293c:	f003 f986 	bl	8005c4c <HAL_RCC_GetPCLK1Freq>
 8002940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4a81      	ldr	r2, [pc, #516]	@ (8002b4c <HAL_I2C_Init+0x274>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d807      	bhi.n	800295c <HAL_I2C_Init+0x84>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4a80      	ldr	r2, [pc, #512]	@ (8002b50 <HAL_I2C_Init+0x278>)
 8002950:	4293      	cmp	r3, r2
 8002952:	bf94      	ite	ls
 8002954:	2301      	movls	r3, #1
 8002956:	2300      	movhi	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e006      	b.n	800296a <HAL_I2C_Init+0x92>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a7d      	ldr	r2, [pc, #500]	@ (8002b54 <HAL_I2C_Init+0x27c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	bf94      	ite	ls
 8002964:	2301      	movls	r3, #1
 8002966:	2300      	movhi	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0e7      	b.n	8002b42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4a78      	ldr	r2, [pc, #480]	@ (8002b58 <HAL_I2C_Init+0x280>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0c9b      	lsrs	r3, r3, #18
 800297c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a6a      	ldr	r2, [pc, #424]	@ (8002b4c <HAL_I2C_Init+0x274>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d802      	bhi.n	80029ac <HAL_I2C_Init+0xd4>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3301      	adds	r3, #1
 80029aa:	e009      	b.n	80029c0 <HAL_I2C_Init+0xe8>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	4a69      	ldr	r2, [pc, #420]	@ (8002b5c <HAL_I2C_Init+0x284>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	099b      	lsrs	r3, r3, #6
 80029be:	3301      	adds	r3, #1
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	495c      	ldr	r1, [pc, #368]	@ (8002b4c <HAL_I2C_Init+0x274>)
 80029dc:	428b      	cmp	r3, r1
 80029de:	d819      	bhi.n	8002a14 <HAL_I2C_Init+0x13c>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1e59      	subs	r1, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ee:	1c59      	adds	r1, r3, #1
 80029f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029f4:	400b      	ands	r3, r1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_I2C_Init+0x138>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1e59      	subs	r1, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0e:	e051      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a10:	2304      	movs	r3, #4
 8002a12:	e04f      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d111      	bne.n	8002a40 <HAL_I2C_Init+0x168>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1e58      	subs	r0, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	440b      	add	r3, r1
 8002a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	e012      	b.n	8002a66 <HAL_I2C_Init+0x18e>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1e58      	subs	r0, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	0099      	lsls	r1, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Init+0x196>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e022      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10e      	bne.n	8002a94 <HAL_I2C_Init+0x1bc>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1e58      	subs	r0, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6859      	ldr	r1, [r3, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	440b      	add	r3, r1
 8002a84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a92:	e00f      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e58      	subs	r0, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	0099      	lsls	r1, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	6809      	ldr	r1, [r1, #0]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ae2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6911      	ldr	r1, [r2, #16]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68d2      	ldr	r2, [r2, #12]
 8002aee:	4311      	orrs	r1, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	430b      	orrs	r3, r1
 8002af6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	000186a0 	.word	0x000186a0
 8002b50:	001e847f 	.word	0x001e847f
 8002b54:	003d08ff 	.word	0x003d08ff
 8002b58:	431bde83 	.word	0x431bde83
 8002b5c:	10624dd3 	.word	0x10624dd3

08002b60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	4608      	mov	r0, r1
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	817b      	strh	r3, [r7, #10]
 8002b72:	460b      	mov	r3, r1
 8002b74:	813b      	strh	r3, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b7a:	f7ff f831 	bl	8001be0 <HAL_GetTick>
 8002b7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	f040 80d9 	bne.w	8002d40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	2319      	movs	r3, #25
 8002b94:	2201      	movs	r2, #1
 8002b96:	496d      	ldr	r1, [pc, #436]	@ (8002d4c <HAL_I2C_Mem_Write+0x1ec>)
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 ff5f 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e0cc      	b.n	8002d42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2C_Mem_Write+0x56>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e0c5      	b.n	8002d42 <HAL_I2C_Mem_Write+0x1e2>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d007      	beq.n	8002bdc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2221      	movs	r2, #33	@ 0x21
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2240      	movs	r2, #64	@ 0x40
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4a4d      	ldr	r2, [pc, #308]	@ (8002d50 <HAL_I2C_Mem_Write+0x1f0>)
 8002c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c1e:	88f8      	ldrh	r0, [r7, #6]
 8002c20:	893a      	ldrh	r2, [r7, #8]
 8002c22:	8979      	ldrh	r1, [r7, #10]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fc7a 	bl	8003528 <I2C_RequestMemoryWrite>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d052      	beq.n	8002ce0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e081      	b.n	8002d42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f001 f824 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00d      	beq.n	8002c6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d107      	bne.n	8002c66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e06b      	b.n	8002d42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	781a      	ldrb	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_I2C_Mem_Write+0x180>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d017      	beq.n	8002ce0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1aa      	bne.n	8002c3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f001 f817 	bl	8003d20 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00d      	beq.n	8002d14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d107      	bne.n	8002d10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e016      	b.n	8002d42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	00100002 	.word	0x00100002
 8002d50:	ffff0000 	.word	0xffff0000

08002d54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08c      	sub	sp, #48	@ 0x30
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	4611      	mov	r1, r2
 8002d60:	461a      	mov	r2, r3
 8002d62:	4603      	mov	r3, r0
 8002d64:	817b      	strh	r3, [r7, #10]
 8002d66:	460b      	mov	r3, r1
 8002d68:	813b      	strh	r3, [r7, #8]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d6e:	f7fe ff37 	bl	8001be0 <HAL_GetTick>
 8002d72:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	f040 8214 	bne.w	80031aa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2319      	movs	r3, #25
 8002d88:	2201      	movs	r2, #1
 8002d8a:	497b      	ldr	r1, [pc, #492]	@ (8002f78 <HAL_I2C_Mem_Read+0x224>)
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fe65 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e207      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_I2C_Mem_Read+0x56>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e200      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d007      	beq.n	8002dd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2222      	movs	r2, #34	@ 0x22
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2240      	movs	r2, #64	@ 0x40
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002e00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a5b      	ldr	r2, [pc, #364]	@ (8002f7c <HAL_I2C_Mem_Read+0x228>)
 8002e10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e12:	88f8      	ldrh	r0, [r7, #6]
 8002e14:	893a      	ldrh	r2, [r7, #8]
 8002e16:	8979      	ldrh	r1, [r7, #10]
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	4603      	mov	r3, r0
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fc16 	bl	8003654 <I2C_RequestMemoryRead>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e1bc      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d113      	bne.n	8002e62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	623b      	str	r3, [r7, #32]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	623b      	str	r3, [r7, #32]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	623b      	str	r3, [r7, #32]
 8002e4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e190      	b.n	8003184 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d11b      	bne.n	8002ea2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e170      	b.n	8003184 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d11b      	bne.n	8002ee2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	e150      	b.n	8003184 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ef8:	e144      	b.n	8003184 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	f200 80f1 	bhi.w	80030e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d123      	bne.n	8002f54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 ff4d 	bl	8003db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e145      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f52:	e117      	b.n	8003184 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d14e      	bne.n	8002ffa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f62:	2200      	movs	r2, #0
 8002f64:	4906      	ldr	r1, [pc, #24]	@ (8002f80 <HAL_I2C_Mem_Read+0x22c>)
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fd78 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e11a      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
 8002f76:	bf00      	nop
 8002f78:	00100002 	.word	0x00100002
 8002f7c:	ffff0000 	.word	0xffff0000
 8002f80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ff8:	e0c4      	b.n	8003184 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003000:	2200      	movs	r2, #0
 8003002:	496c      	ldr	r1, [pc, #432]	@ (80031b4 <HAL_I2C_Mem_Read+0x460>)
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fd29 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0cb      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800305c:	2200      	movs	r2, #0
 800305e:	4955      	ldr	r1, [pc, #340]	@ (80031b4 <HAL_I2C_Mem_Read+0x460>)
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fcfb 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e09d      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800307e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030e4:	e04e      	b.n	8003184 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fe60 	bl	8003db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e058      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d124      	bne.n	8003184 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313e:	2b03      	cmp	r3, #3
 8003140:	d107      	bne.n	8003152 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003150:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	f47f aeb6 	bne.w	8002efa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e000      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
  }
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3728      	adds	r7, #40	@ 0x28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	00010004 	.word	0x00010004

080031b8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08c      	sub	sp, #48	@ 0x30
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	461a      	mov	r2, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	817b      	strh	r3, [r7, #10]
 80031ca:	460b      	mov	r3, r1
 80031cc:	813b      	strh	r3, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031d2:	f7fe fd05 	bl	8001be0 <HAL_GetTick>
 80031d6:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	f040 8172 	bne.w	80034ce <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80031ea:	4b93      	ldr	r3, [pc, #588]	@ (8003438 <HAL_I2C_Mem_Read_DMA+0x280>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	08db      	lsrs	r3, r3, #3
 80031f0:	4a92      	ldr	r2, [pc, #584]	@ (800343c <HAL_I2C_Mem_Read_DMA+0x284>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	0a1a      	lsrs	r2, r3, #8
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	009a      	lsls	r2, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	3b01      	subs	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d112      	bne.n	8003236 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322a:	f043 0220 	orr.w	r2, r3, #32
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
 8003234:	e14c      	b.n	80034d0 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b02      	cmp	r3, #2
 8003242:	d0df      	beq.n	8003204 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_I2C_Mem_Read_DMA+0x9a>
 800324e:	2302      	movs	r3, #2
 8003250:	e13e      	b.n	80034d0 <HAL_I2C_Mem_Read_DMA+0x318>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b01      	cmp	r3, #1
 8003266:	d007      	beq.n	8003278 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003286:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2222      	movs	r2, #34	@ 0x22
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2240      	movs	r2, #64	@ 0x40
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80032a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a62      	ldr	r2, [pc, #392]	@ (8003440 <HAL_I2C_Mem_Read_DMA+0x288>)
 80032b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80032ba:	897a      	ldrh	r2, [r7, #10]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80032c0:	893a      	ldrh	r2, [r7, #8]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80032c6:	88fa      	ldrh	r2, [r7, #6]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80cc 	beq.w	8003474 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d02d      	beq.n	8003340 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e8:	4a56      	ldr	r2, [pc, #344]	@ (8003444 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80032ea:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f0:	4a55      	ldr	r2, [pc, #340]	@ (8003448 <HAL_I2C_Mem_Read_DMA+0x290>)
 80032f2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f8:	2200      	movs	r2, #0
 80032fa:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	2200      	movs	r2, #0
 8003302:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003308:	2200      	movs	r2, #0
 800330a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003310:	2200      	movs	r2, #0
 8003312:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3310      	adds	r3, #16
 800331e:	4619      	mov	r1, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	461a      	mov	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332a:	f7fe fe49 	bl	8001fc0 <HAL_DMA_Start_IT>
 800332e:	4603      	mov	r3, r0
 8003330:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003334:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003338:	2b00      	cmp	r3, #0
 800333a:	f040 8087 	bne.w	800344c <HAL_I2C_Mem_Read_DMA+0x294>
 800333e:	e013      	b.n	8003368 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0b3      	b.n	80034d0 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003368:	88f8      	ldrh	r0, [r7, #6]
 800336a:	893a      	ldrh	r2, [r7, #8]
 800336c:	8979      	ldrh	r1, [r7, #10]
 800336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	2323      	movs	r3, #35	@ 0x23
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	4603      	mov	r3, r0
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f96b 	bl	8003654 <I2C_RequestMemoryRead>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d023      	beq.n	80033cc <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe fe71 	bl	8002070 <HAL_DMA_Abort_IT>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003398:	2200      	movs	r2, #0
 800339a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033aa:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0201 	bic.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e081      	b.n	80034d0 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d108      	bne.n	80033e6 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e007      	b.n	80033f6 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f6:	2300      	movs	r3, #0
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003422:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	e049      	b.n	80034ca <HAL_I2C_Mem_Read_DMA+0x312>
 8003436:	bf00      	nop
 8003438:	20000000 	.word	0x20000000
 800343c:	14f8b589 	.word	0x14f8b589
 8003440:	ffff0000 	.word	0xffff0000
 8003444:	08003825 	.word	0x08003825
 8003448:	080039e3 	.word	0x080039e3
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	f043 0210 	orr.w	r2, r3, #16
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e02d      	b.n	80034d0 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003474:	88f8      	ldrh	r0, [r7, #6]
 8003476:	893a      	ldrh	r2, [r7, #8]
 8003478:	8979      	ldrh	r1, [r7, #10]
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	2323      	movs	r3, #35	@ 0x23
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	4603      	mov	r3, r0
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f8e5 	bl	8003654 <I2C_RequestMemoryRead>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e01d      	b.n	80034d0 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3728      	adds	r7, #40	@ 0x28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	4608      	mov	r0, r1
 8003532:	4611      	mov	r1, r2
 8003534:	461a      	mov	r2, r3
 8003536:	4603      	mov	r3, r0
 8003538:	817b      	strh	r3, [r7, #10]
 800353a:	460b      	mov	r3, r1
 800353c:	813b      	strh	r3, [r7, #8]
 800353e:	4613      	mov	r3, r2
 8003540:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003550:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	2200      	movs	r2, #0
 800355a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fa7c 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00d      	beq.n	8003586 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003578:	d103      	bne.n	8003582 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003580:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e05f      	b.n	8003646 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003586:	897b      	ldrh	r3, [r7, #10]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003594:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	6a3a      	ldr	r2, [r7, #32]
 800359a:	492d      	ldr	r1, [pc, #180]	@ (8003650 <I2C_RequestMemoryWrite+0x128>)
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 fad7 	bl	8003b50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e04c      	b.n	8003646 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c4:	6a39      	ldr	r1, [r7, #32]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 fb62 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00d      	beq.n	80035ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d107      	bne.n	80035ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e02b      	b.n	8003646 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d105      	bne.n	8003600 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035f4:	893b      	ldrh	r3, [r7, #8]
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	611a      	str	r2, [r3, #16]
 80035fe:	e021      	b.n	8003644 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003600:	893b      	ldrh	r3, [r7, #8]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	b29b      	uxth	r3, r3
 8003606:	b2da      	uxtb	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800360e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003610:	6a39      	ldr	r1, [r7, #32]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fb3c 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	2b04      	cmp	r3, #4
 8003624:	d107      	bne.n	8003636 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003634:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e005      	b.n	8003646 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800363a:	893b      	ldrh	r3, [r7, #8]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	00010002 	.word	0x00010002

08003654 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	4608      	mov	r0, r1
 800365e:	4611      	mov	r1, r2
 8003660:	461a      	mov	r2, r3
 8003662:	4603      	mov	r3, r0
 8003664:	817b      	strh	r3, [r7, #10]
 8003666:	460b      	mov	r3, r1
 8003668:	813b      	strh	r3, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800367c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800368c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	2200      	movs	r2, #0
 8003696:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f9de 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00d      	beq.n	80036c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036b4:	d103      	bne.n	80036be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e0aa      	b.n	8003818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036c2:	897b      	ldrh	r3, [r7, #10]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	6a3a      	ldr	r2, [r7, #32]
 80036d6:	4952      	ldr	r1, [pc, #328]	@ (8003820 <I2C_RequestMemoryRead+0x1cc>)
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fa39 	bl	8003b50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e097      	b.n	8003818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003700:	6a39      	ldr	r1, [r7, #32]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fac4 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00d      	beq.n	800372a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	2b04      	cmp	r3, #4
 8003714:	d107      	bne.n	8003726 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003724:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e076      	b.n	8003818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d105      	bne.n	800373c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003730:	893b      	ldrh	r3, [r7, #8]
 8003732:	b2da      	uxtb	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	611a      	str	r2, [r3, #16]
 800373a:	e021      	b.n	8003780 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800373c:	893b      	ldrh	r3, [r7, #8]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	b29b      	uxth	r3, r3
 8003742:	b2da      	uxtb	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800374a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374c:	6a39      	ldr	r1, [r7, #32]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fa9e 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00d      	beq.n	8003776 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	2b04      	cmp	r3, #4
 8003760:	d107      	bne.n	8003772 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003770:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e050      	b.n	8003818 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003776:	893b      	ldrh	r3, [r7, #8]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003782:	6a39      	ldr	r1, [r7, #32]
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fa83 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00d      	beq.n	80037ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	2b04      	cmp	r3, #4
 8003796:	d107      	bne.n	80037a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e035      	b.n	8003818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f947 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00d      	beq.n	80037f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037e2:	d103      	bne.n	80037ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e013      	b.n	8003818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037f0:	897b      	ldrh	r3, [r7, #10]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	6a3a      	ldr	r2, [r7, #32]
 8003804:	4906      	ldr	r1, [pc, #24]	@ (8003820 <I2C_RequestMemoryRead+0x1cc>)
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f9a2 	bl	8003b50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	00010002 	.word	0x00010002

08003824 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003830:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003838:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003840:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003846:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003856:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003864:	2200      	movs	r2, #0
 8003866:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003874:	2200      	movs	r2, #0
 8003876:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800387e:	2b21      	cmp	r3, #33	@ 0x21
 8003880:	d007      	beq.n	8003892 <I2C_DMAXferCplt+0x6e>
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003888:	2b22      	cmp	r3, #34	@ 0x22
 800388a:	d131      	bne.n	80038f0 <I2C_DMAXferCplt+0xcc>
 800388c:	7cbb      	ldrb	r3, [r7, #18]
 800388e:	2b20      	cmp	r3, #32
 8003890:	d12e      	bne.n	80038f0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2200      	movs	r2, #0
 80038a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	2b29      	cmp	r3, #41	@ 0x29
 80038ac:	d10a      	bne.n	80038c4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2221      	movs	r2, #33	@ 0x21
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2228      	movs	r2, #40	@ 0x28
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038bc:	6978      	ldr	r0, [r7, #20]
 80038be:	f7ff fe15 	bl	80034ec <HAL_I2C_SlaveTxCpltCallback>
 80038c2:	e00c      	b.n	80038de <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80038c8:	d109      	bne.n	80038de <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2222      	movs	r2, #34	@ 0x22
 80038ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2228      	movs	r2, #40	@ 0x28
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038d8:	6978      	ldr	r0, [r7, #20]
 80038da:	f7ff fe11 	bl	8003500 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80038ec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80038ee:	e074      	b.n	80039da <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d06e      	beq.n	80039da <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003914:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003924:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800392c:	d009      	beq.n	8003942 <I2C_DMAXferCplt+0x11e>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d006      	beq.n	8003942 <I2C_DMAXferCplt+0x11e>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800393a:	d002      	beq.n	8003942 <I2C_DMAXferCplt+0x11e>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b20      	cmp	r3, #32
 8003940:	d107      	bne.n	8003952 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003950:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003960:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003970:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2200      	movs	r2, #0
 8003976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003980:	6978      	ldr	r0, [r7, #20]
 8003982:	f7ff fdc7 	bl	8003514 <HAL_I2C_ErrorCallback>
}
 8003986:	e028      	b.n	80039da <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b40      	cmp	r3, #64	@ 0x40
 800399a:	d10a      	bne.n	80039b2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80039aa:	6978      	ldr	r0, [r7, #20]
 80039ac:	f7fd fdf8 	bl	80015a0 <HAL_I2C_MemRxCpltCallback>
}
 80039b0:	e013      	b.n	80039da <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d002      	beq.n	80039c6 <I2C_DMAXferCplt+0x1a2>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d103      	bne.n	80039ce <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80039cc:	e002      	b.n	80039d4 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2212      	movs	r2, #18
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80039d4:	6978      	ldr	r0, [r7, #20]
 80039d6:	f7ff fd7f 	bl	80034d8 <HAL_I2C_MasterRxCpltCallback>
}
 80039da:	bf00      	nop
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fc:	2200      	movs	r2, #0
 80039fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7fe fcd9 	bl	80023c8 <HAL_DMA_GetError>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d01b      	beq.n	8003a54 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a2a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	f043 0210 	orr.w	r2, r3, #16
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f7ff fd60 	bl	8003514 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a6c:	e048      	b.n	8003b00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d044      	beq.n	8003b00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7fe f8b3 	bl	8001be0 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d139      	bne.n	8003b00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	0c1b      	lsrs	r3, r3, #16
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d10d      	bne.n	8003ab2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	43da      	mvns	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2301      	moveq	r3, #1
 8003aaa:	2300      	movne	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	e00c      	b.n	8003acc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	43da      	mvns	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	4013      	ands	r3, r2
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d116      	bne.n	8003b00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	f043 0220 	orr.w	r2, r3, #32
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e023      	b.n	8003b48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	0c1b      	lsrs	r3, r3, #16
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d10d      	bne.n	8003b26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	43da      	mvns	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	4013      	ands	r3, r2
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	e00c      	b.n	8003b40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	43da      	mvns	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4013      	ands	r3, r2
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d093      	beq.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b5e:	e071      	b.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b6e:	d123      	bne.n	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	f043 0204 	orr.w	r2, r3, #4
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e067      	b.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbe:	d041      	beq.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc0:	f7fe f80e 	bl	8001be0 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d302      	bcc.n	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d136      	bne.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d10c      	bne.n	8003bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	43da      	mvns	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4013      	ands	r3, r2
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	bf14      	ite	ne
 8003bf2:	2301      	movne	r3, #1
 8003bf4:	2300      	moveq	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	e00b      	b.n	8003c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	43da      	mvns	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	4013      	ands	r3, r2
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d016      	beq.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c30:	f043 0220 	orr.w	r2, r3, #32
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e021      	b.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	0c1b      	lsrs	r3, r3, #16
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d10c      	bne.n	8003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	43da      	mvns	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e00b      	b.n	8003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	43da      	mvns	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4013      	ands	r3, r2
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	bf14      	ite	ne
 8003c7a:	2301      	movne	r3, #1
 8003c7c:	2300      	moveq	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f47f af6d 	bne.w	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c9c:	e034      	b.n	8003d08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f8e3 	bl	8003e6a <I2C_IsAcknowledgeFailed>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e034      	b.n	8003d18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb4:	d028      	beq.n	8003d08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb6:	f7fd ff93 	bl	8001be0 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d302      	bcc.n	8003ccc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d11d      	bne.n	8003d08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd6:	2b80      	cmp	r3, #128	@ 0x80
 8003cd8:	d016      	beq.n	8003d08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e007      	b.n	8003d18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d12:	2b80      	cmp	r3, #128	@ 0x80
 8003d14:	d1c3      	bne.n	8003c9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d2c:	e034      	b.n	8003d98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f89b 	bl	8003e6a <I2C_IsAcknowledgeFailed>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e034      	b.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d028      	beq.n	8003d98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d46:	f7fd ff4b 	bl	8001be0 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d302      	bcc.n	8003d5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d11d      	bne.n	8003d98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d016      	beq.n	8003d98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e007      	b.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d1c3      	bne.n	8003d2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dbc:	e049      	b.n	8003e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d119      	bne.n	8003e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0210 	mvn.w	r2, #16
 8003dd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e030      	b.n	8003e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e00:	f7fd feee 	bl	8001be0 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d302      	bcc.n	8003e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d11d      	bne.n	8003e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e20:	2b40      	cmp	r3, #64	@ 0x40
 8003e22:	d016      	beq.n	8003e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	f043 0220 	orr.w	r2, r3, #32
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e007      	b.n	8003e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5c:	2b40      	cmp	r3, #64	@ 0x40
 8003e5e:	d1ae      	bne.n	8003dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e80:	d11b      	bne.n	8003eba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e8a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	f043 0204 	orr.w	r2, r3, #4
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e101      	b.n	80040de <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d106      	bne.n	8003efa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f005 fbdd 	bl	80096b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2203      	movs	r2, #3
 8003efe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f08:	d102      	bne.n	8003f10 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f001 ffc4 	bl	8005ea2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	7c1a      	ldrb	r2, [r3, #16]
 8003f22:	f88d 2000 	strb.w	r2, [sp]
 8003f26:	3304      	adds	r3, #4
 8003f28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f2a:	f001 fea3 	bl	8005c74 <USB_CoreInit>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0ce      	b.n	80040de <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 ffbc 	bl	8005ec4 <USB_SetCurrentMode>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e0bf      	b.n	80040de <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]
 8003f62:	e04a      	b.n	8003ffa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f64:	7bfa      	ldrb	r2, [r7, #15]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	3315      	adds	r3, #21
 8003f74:	2201      	movs	r2, #1
 8003f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f78:	7bfa      	ldrb	r2, [r7, #15]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	3314      	adds	r3, #20
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f8c:	7bfa      	ldrb	r2, [r7, #15]
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	b298      	uxth	r0, r3
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	332e      	adds	r3, #46	@ 0x2e
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fa4:	7bfa      	ldrb	r2, [r7, #15]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	3318      	adds	r3, #24
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fb8:	7bfa      	ldrb	r2, [r7, #15]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	331c      	adds	r3, #28
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	3320      	adds	r3, #32
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fe0:	7bfa      	ldrb	r2, [r7, #15]
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	3324      	adds	r3, #36	@ 0x24
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	791b      	ldrb	r3, [r3, #4]
 8003ffe:	7bfa      	ldrb	r2, [r7, #15]
 8004000:	429a      	cmp	r2, r3
 8004002:	d3af      	bcc.n	8003f64 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004004:	2300      	movs	r3, #0
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e044      	b.n	8004094 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800400a:	7bfa      	ldrb	r2, [r7, #15]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004020:	7bfa      	ldrb	r2, [r7, #15]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004048:	2200      	movs	r2, #0
 800404a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800404c:	7bfa      	ldrb	r2, [r7, #15]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004062:	7bfa      	ldrb	r2, [r7, #15]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004078:	7bfa      	ldrb	r2, [r7, #15]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	3301      	adds	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	791b      	ldrb	r3, [r3, #4]
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	429a      	cmp	r2, r3
 800409c:	d3b5      	bcc.n	800400a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	7c1a      	ldrb	r2, [r3, #16]
 80040a6:	f88d 2000 	strb.w	r2, [sp]
 80040aa:	3304      	adds	r3, #4
 80040ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ae:	f001 ff55 	bl	8005f5c <USB_DevInit>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e00c      	b.n	80040de <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f002 ff9f 	bl	800701a <USB_DevDisconnect>

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_PCD_Start+0x1c>
 80040fe:	2302      	movs	r3, #2
 8004100:	e022      	b.n	8004148 <HAL_PCD_Start+0x62>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800411a:	2b01      	cmp	r3, #1
 800411c:	d105      	bne.n	800412a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004122:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f001 fea6 	bl	8005e80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f002 ff4d 	bl	8006fd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b08d      	sub	sp, #52	@ 0x34
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f003 f80b 	bl	8007182 <USB_GetMode>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	f040 848c 	bne.w	8004a8c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f002 ff6f 	bl	800705c <USB_ReadInterrupts>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8482 	beq.w	8004a8a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	0a1b      	lsrs	r3, r3, #8
 8004190:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f002 ff5c 	bl	800705c <USB_ReadInterrupts>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d107      	bne.n	80041be <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695a      	ldr	r2, [r3, #20]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f002 0202 	and.w	r2, r2, #2
 80041bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f002 ff4a 	bl	800705c <USB_ReadInterrupts>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b10      	cmp	r3, #16
 80041d0:	d161      	bne.n	8004296 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0210 	bic.w	r2, r2, #16
 80041e0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	f003 020f 	and.w	r2, r3, #15
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	3304      	adds	r3, #4
 8004200:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	0c5b      	lsrs	r3, r3, #17
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	2b02      	cmp	r3, #2
 800420c:	d124      	bne.n	8004258 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d035      	beq.n	8004286 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004224:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004228:	b29b      	uxth	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	6a38      	ldr	r0, [r7, #32]
 800422e:	f002 fd81 	bl	8006d34 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800423e:	441a      	add	r2, r3
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	695a      	ldr	r2, [r3, #20]
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004250:	441a      	add	r2, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	615a      	str	r2, [r3, #20]
 8004256:	e016      	b.n	8004286 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	0c5b      	lsrs	r3, r3, #17
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	2b06      	cmp	r3, #6
 8004262:	d110      	bne.n	8004286 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800426a:	2208      	movs	r2, #8
 800426c:	4619      	mov	r1, r3
 800426e:	6a38      	ldr	r0, [r7, #32]
 8004270:	f002 fd60 	bl	8006d34 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	091b      	lsrs	r3, r3, #4
 800427c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004280:	441a      	add	r2, r3
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0210 	orr.w	r2, r2, #16
 8004294:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f002 fede 	bl	800705c <USB_ReadInterrupts>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80042aa:	f040 80a7 	bne.w	80043fc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f002 fee3 	bl	8007082 <USB_ReadDevAllOutEpInterrupt>
 80042bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80042be:	e099      	b.n	80043f4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 808e 	beq.w	80043e8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f002 ff07 	bl	80070ea <USB_ReadDevOutEPInterrupt>
 80042dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00c      	beq.n	8004302 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f4:	461a      	mov	r2, r3
 80042f6:	2301      	movs	r3, #1
 80042f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80042fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fea3 	bl	8005048 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00c      	beq.n	8004326 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004318:	461a      	mov	r2, r3
 800431a:	2308      	movs	r3, #8
 800431c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800431e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 ff79 	bl	8005218 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800433c:	461a      	mov	r2, r3
 800433e:	2310      	movs	r3, #16
 8004340:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d030      	beq.n	80043ae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004354:	2b80      	cmp	r3, #128	@ 0x80
 8004356:	d109      	bne.n	800436c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004366:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800436a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800436c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436e:	4613      	mov	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	3304      	adds	r3, #4
 8004380:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	78db      	ldrb	r3, [r3, #3]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d108      	bne.n	800439c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2200      	movs	r2, #0
 800438e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	b2db      	uxtb	r3, r3
 8004394:	4619      	mov	r1, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f005 fa92 	bl	80098c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a8:	461a      	mov	r2, r3
 80043aa:	2302      	movs	r3, #2
 80043ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c4:	461a      	mov	r2, r3
 80043c6:	2320      	movs	r3, #32
 80043c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d009      	beq.n	80043e8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e0:	461a      	mov	r2, r3
 80043e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ea:	3301      	adds	r3, #1
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80043f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f47f af62 	bne.w	80042c0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f002 fe2b 	bl	800705c <USB_ReadInterrupts>
 8004406:	4603      	mov	r3, r0
 8004408:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800440c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004410:	f040 80db 	bne.w	80045ca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f002 fe4c 	bl	80070b6 <USB_ReadDevAllInEpInterrupt>
 800441e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004424:	e0cd      	b.n	80045c2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80c2 	beq.w	80045b6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	4611      	mov	r1, r2
 800443c:	4618      	mov	r0, r3
 800443e:	f002 fe72 	bl	8007126 <USB_ReadDevInEPInterrupt>
 8004442:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d057      	beq.n	80044fe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	2201      	movs	r2, #1
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	43db      	mvns	r3, r3
 8004468:	69f9      	ldr	r1, [r7, #28]
 800446a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800446e:	4013      	ands	r3, r2
 8004470:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800447e:	461a      	mov	r2, r3
 8004480:	2301      	movs	r3, #1
 8004482:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	799b      	ldrb	r3, [r3, #6]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d132      	bne.n	80044f2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004490:	4613      	mov	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	3320      	adds	r3, #32
 800449c:	6819      	ldr	r1, [r3, #0]
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a2:	4613      	mov	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4403      	add	r3, r0
 80044ac:	331c      	adds	r3, #28
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4419      	add	r1, r3
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4403      	add	r3, r0
 80044c0:	3320      	adds	r3, #32
 80044c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d113      	bne.n	80044f2 <HAL_PCD_IRQHandler+0x3a2>
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ce:	4613      	mov	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	3324      	adds	r3, #36	@ 0x24
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d108      	bne.n	80044f2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044ea:	461a      	mov	r2, r3
 80044ec:	2101      	movs	r1, #1
 80044ee:	f002 fe79 	bl	80071e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	4619      	mov	r1, r3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f005 f95c 	bl	80097b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004514:	461a      	mov	r2, r3
 8004516:	2308      	movs	r3, #8
 8004518:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004530:	461a      	mov	r2, r3
 8004532:	2310      	movs	r3, #16
 8004534:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800454c:	461a      	mov	r2, r3
 800454e:	2340      	movs	r3, #64	@ 0x40
 8004550:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d023      	beq.n	80045a4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800455c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800455e:	6a38      	ldr	r0, [r7, #32]
 8004560:	f001 fe60 	bl	8006224 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004566:	4613      	mov	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	3310      	adds	r3, #16
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	4413      	add	r3, r2
 8004574:	3304      	adds	r3, #4
 8004576:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	78db      	ldrb	r3, [r3, #3]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d108      	bne.n	8004592 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2200      	movs	r2, #0
 8004584:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	b2db      	uxtb	r3, r3
 800458a:	4619      	mov	r1, r3
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f005 f9a9 	bl	80098e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800459e:	461a      	mov	r2, r3
 80045a0:	2302      	movs	r3, #2
 80045a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80045ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fcbd 	bl	8004f30 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	3301      	adds	r3, #1
 80045ba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80045bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045be:	085b      	lsrs	r3, r3, #1
 80045c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80045c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f47f af2e 	bne.w	8004426 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f002 fd44 	bl	800705c <USB_ReadInterrupts>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045de:	d122      	bne.n	8004626 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d108      	bne.n	8004610 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004606:	2100      	movs	r1, #0
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fea3 	bl	8005354 <HAL_PCDEx_LPM_Callback>
 800460e:	e002      	b.n	8004616 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f005 f947 	bl	80098a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695a      	ldr	r2, [r3, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004624:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f002 fd16 	bl	800705c <USB_ReadInterrupts>
 8004630:	4603      	mov	r3, r0
 8004632:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004636:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800463a:	d112      	bne.n	8004662 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b01      	cmp	r3, #1
 800464a:	d102      	bne.n	8004652 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f005 f903 	bl	8009858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695a      	ldr	r2, [r3, #20]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004660:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f002 fcf8 	bl	800705c <USB_ReadInterrupts>
 800466c:	4603      	mov	r3, r0
 800466e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004676:	f040 80b7 	bne.w	80047e8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2110      	movs	r1, #16
 8004694:	4618      	mov	r0, r3
 8004696:	f001 fdc5 	bl	8006224 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800469a:	2300      	movs	r3, #0
 800469c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800469e:	e046      	b.n	800472e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ac:	461a      	mov	r2, r3
 80046ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046b2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80046d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e0:	461a      	mov	r2, r3
 80046e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046f8:	0151      	lsls	r1, r2, #5
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	440a      	add	r2, r1
 80046fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004702:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004706:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	69fa      	ldr	r2, [r7, #28]
 800471c:	440a      	add	r2, r1
 800471e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004722:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004726:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472a:	3301      	adds	r3, #1
 800472c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	791b      	ldrb	r3, [r3, #4]
 8004732:	461a      	mov	r2, r3
 8004734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004736:	4293      	cmp	r3, r2
 8004738:	d3b2      	bcc.n	80046a0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004748:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800474c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	7bdb      	ldrb	r3, [r3, #15]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d016      	beq.n	8004784 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800475c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004766:	f043 030b 	orr.w	r3, r3, #11
 800476a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800477c:	f043 030b 	orr.w	r3, r3, #11
 8004780:	6453      	str	r3, [r2, #68]	@ 0x44
 8004782:	e015      	b.n	80047b0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004792:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004796:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800479a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047aa:	f043 030b 	orr.w	r3, r3, #11
 80047ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80047c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047d2:	461a      	mov	r2, r3
 80047d4:	f002 fd06 	bl	80071e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80047e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f002 fc35 	bl	800705c <USB_ReadInterrupts>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047fc:	d123      	bne.n	8004846 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f002 fccb 	bl	800719e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f001 fd82 	bl	8006316 <USB_GetDevSpeed>
 8004812:	4603      	mov	r3, r0
 8004814:	461a      	mov	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681c      	ldr	r4, [r3, #0]
 800481e:	f001 fa09 	bl	8005c34 <HAL_RCC_GetHCLKFreq>
 8004822:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004828:	461a      	mov	r2, r3
 800482a:	4620      	mov	r0, r4
 800482c:	f001 fa86 	bl	8005d3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f004 ffe8 	bl	8009806 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004844:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f002 fc06 	bl	800705c <USB_ReadInterrupts>
 8004850:	4603      	mov	r3, r0
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b08      	cmp	r3, #8
 8004858:	d10a      	bne.n	8004870 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f004 ffc5 	bl	80097ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f002 0208 	and.w	r2, r2, #8
 800486e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f002 fbf1 	bl	800705c <USB_ReadInterrupts>
 800487a:	4603      	mov	r3, r0
 800487c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004880:	2b80      	cmp	r3, #128	@ 0x80
 8004882:	d123      	bne.n	80048cc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004890:	2301      	movs	r3, #1
 8004892:	627b      	str	r3, [r7, #36]	@ 0x24
 8004894:	e014      	b.n	80048c0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489a:	4613      	mov	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4413      	add	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	440b      	add	r3, r1
 80048a4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d105      	bne.n	80048ba <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fb0a 	bl	8004ece <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	3301      	adds	r3, #1
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	791b      	ldrb	r3, [r3, #4]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d3e4      	bcc.n	8004896 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f002 fbc3 	bl	800705c <USB_ReadInterrupts>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048e0:	d13c      	bne.n	800495c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048e2:	2301      	movs	r3, #1
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048e6:	e02b      	b.n	8004940 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80048e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048fc:	4613      	mov	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	3318      	adds	r3, #24
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d115      	bne.n	800493a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800490e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004910:	2b00      	cmp	r3, #0
 8004912:	da12      	bge.n	800493a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004918:	4613      	mov	r3, r2
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	3317      	adds	r3, #23
 8004924:	2201      	movs	r2, #1
 8004926:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004930:	b2db      	uxtb	r3, r3
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 faca 	bl	8004ece <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	3301      	adds	r3, #1
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	791b      	ldrb	r3, [r3, #4]
 8004944:	461a      	mov	r2, r3
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	4293      	cmp	r3, r2
 800494a:	d3cd      	bcc.n	80048e8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800495a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f002 fb7b 	bl	800705c <USB_ReadInterrupts>
 8004966:	4603      	mov	r3, r0
 8004968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800496c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004970:	d156      	bne.n	8004a20 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004972:	2301      	movs	r3, #1
 8004974:	627b      	str	r3, [r7, #36]	@ 0x24
 8004976:	e045      	b.n	8004a04 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800498c:	4613      	mov	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d12e      	bne.n	80049fe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	da2b      	bge.n	80049fe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80049b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d121      	bne.n	80049fe <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049be:	4613      	mov	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80049cc:	2201      	movs	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049fa:	6053      	str	r3, [r2, #4]
            break;
 80049fc:	e008      	b.n	8004a10 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	3301      	adds	r3, #1
 8004a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	791b      	ldrb	r3, [r3, #4]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d3b3      	bcc.n	8004978 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f002 fb19 	bl	800705c <USB_ReadInterrupts>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a34:	d10a      	bne.n	8004a4c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f004 ff66 	bl	8009908 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f002 fb03 	bl	800705c <USB_ReadInterrupts>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d115      	bne.n	8004a8c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f004 ff56 	bl	8009924 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6859      	ldr	r1, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	605a      	str	r2, [r3, #4]
 8004a88:	e000      	b.n	8004a8c <HAL_PCD_IRQHandler+0x93c>
      return;
 8004a8a:	bf00      	nop
    }
  }
}
 8004a8c:	3734      	adds	r7, #52	@ 0x34
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd90      	pop	{r4, r7, pc}

08004a92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_PCD_SetAddress+0x1a>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e012      	b.n	8004ad2 <HAL_PCD_SetAddress+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f002 fa62 	bl	8006f8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	4608      	mov	r0, r1
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4603      	mov	r3, r0
 8004aea:	70fb      	strb	r3, [r7, #3]
 8004aec:	460b      	mov	r3, r1
 8004aee:	803b      	strh	r3, [r7, #0]
 8004af0:	4613      	mov	r3, r2
 8004af2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	da0f      	bge.n	8004b20 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	f003 020f 	and.w	r2, r3, #15
 8004b06:	4613      	mov	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	3310      	adds	r3, #16
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	4413      	add	r3, r2
 8004b14:	3304      	adds	r3, #4
 8004b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	705a      	strb	r2, [r3, #1]
 8004b1e:	e00f      	b.n	8004b40 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	f003 020f 	and.w	r2, r3, #15
 8004b26:	4613      	mov	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4413      	add	r3, r2
 8004b36:	3304      	adds	r3, #4
 8004b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004b4c:	883b      	ldrh	r3, [r7, #0]
 8004b4e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	78ba      	ldrb	r2, [r7, #2]
 8004b5a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	785b      	ldrb	r3, [r3, #1]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d004      	beq.n	8004b6e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b6e:	78bb      	ldrb	r3, [r7, #2]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d102      	bne.n	8004b7a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_PCD_EP_Open+0xae>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e00e      	b.n	8004ba6 <HAL_PCD_EP_Open+0xcc>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68f9      	ldr	r1, [r7, #12]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 fbe2 	bl	8006360 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004ba4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	da0f      	bge.n	8004be2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	f003 020f 	and.w	r2, r3, #15
 8004bc8:	4613      	mov	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	3310      	adds	r3, #16
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	705a      	strb	r2, [r3, #1]
 8004be0:	e00f      	b.n	8004c02 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	f003 020f 	and.w	r2, r3, #15
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_PCD_EP_Close+0x6e>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e00e      	b.n	8004c3a <HAL_PCD_EP_Close+0x8c>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68f9      	ldr	r1, [r7, #12]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 fc20 	bl	8006470 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b086      	sub	sp, #24
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c52:	7afb      	ldrb	r3, [r7, #11]
 8004c54:	f003 020f 	and.w	r2, r3, #15
 8004c58:	4613      	mov	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	3304      	adds	r3, #4
 8004c6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c84:	7afb      	ldrb	r3, [r7, #11]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	799b      	ldrb	r3, [r3, #6]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d102      	bne.n	8004c9e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	799b      	ldrb	r3, [r3, #6]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	6979      	ldr	r1, [r7, #20]
 8004caa:	f001 fcbd 	bl	8006628 <USB_EPStartXfer>

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	f003 020f 	and.w	r2, r3, #15
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004cda:	681b      	ldr	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cf8:	7afb      	ldrb	r3, [r7, #11]
 8004cfa:	f003 020f 	and.w	r2, r3, #15
 8004cfe:	4613      	mov	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	3310      	adds	r3, #16
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2201      	movs	r2, #1
 8004d26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d28:	7afb      	ldrb	r3, [r7, #11]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	799b      	ldrb	r3, [r3, #6]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d102      	bne.n	8004d42 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	799b      	ldrb	r3, [r3, #6]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	6979      	ldr	r1, [r7, #20]
 8004d4e:	f001 fc6b 	bl	8006628 <USB_EPStartXfer>

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	7912      	ldrb	r2, [r2, #4]
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e04f      	b.n	8004e1a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	da0f      	bge.n	8004da2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	f003 020f 	and.w	r2, r3, #15
 8004d88:	4613      	mov	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	3310      	adds	r3, #16
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4413      	add	r3, r2
 8004d96:	3304      	adds	r3, #4
 8004d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	705a      	strb	r2, [r3, #1]
 8004da0:	e00d      	b.n	8004dbe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	4613      	mov	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	4413      	add	r3, r2
 8004db4:	3304      	adds	r3, #4
 8004db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_PCD_EP_SetStall+0x82>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e01d      	b.n	8004e1a <HAL_PCD_EP_SetStall+0xbe>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68f9      	ldr	r1, [r7, #12]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f001 fff9 	bl	8006de4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d109      	bne.n	8004e10 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	7999      	ldrb	r1, [r3, #6]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f002 f9ea 	bl	80071e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e2e:	78fb      	ldrb	r3, [r7, #3]
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	7912      	ldrb	r2, [r2, #4]
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d901      	bls.n	8004e40 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e042      	b.n	8004ec6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	da0f      	bge.n	8004e68 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	f003 020f 	and.w	r2, r3, #15
 8004e4e:	4613      	mov	r3, r2
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	3310      	adds	r3, #16
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	705a      	strb	r2, [r3, #1]
 8004e66:	e00f      	b.n	8004e88 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	f003 020f 	and.w	r2, r3, #15
 8004e6e:	4613      	mov	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3304      	adds	r3, #4
 8004e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e8e:	78fb      	ldrb	r3, [r7, #3]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_PCD_EP_ClrStall+0x86>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e00e      	b.n	8004ec6 <HAL_PCD_EP_ClrStall+0xa4>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68f9      	ldr	r1, [r7, #12]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f002 f802 	bl	8006ec0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004eda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	da0c      	bge.n	8004efc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	f003 020f 	and.w	r2, r3, #15
 8004ee8:	4613      	mov	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	3310      	adds	r3, #16
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	e00c      	b.n	8004f16 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	f003 020f 	and.w	r2, r3, #15
 8004f02:	4613      	mov	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	4413      	add	r3, r2
 8004f12:	3304      	adds	r3, #4
 8004f14:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 fe21 	bl	8006b64 <USB_EPStopXfer>
 8004f22:	4603      	mov	r3, r0
 8004f24:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f26:	7afb      	ldrb	r3, [r7, #11]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	@ 0x28
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	3310      	adds	r3, #16
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	4413      	add	r3, r2
 8004f54:	3304      	adds	r3, #4
 8004f56:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	695a      	ldr	r2, [r3, #20]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d901      	bls.n	8004f68 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e06b      	b.n	8005040 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d902      	bls.n	8004f84 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	3303      	adds	r3, #3
 8004f88:	089b      	lsrs	r3, r3, #2
 8004f8a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f8c:	e02a      	b.n	8004fe4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d902      	bls.n	8004faa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	3303      	adds	r3, #3
 8004fae:	089b      	lsrs	r3, r3, #2
 8004fb0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68d9      	ldr	r1, [r3, #12]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	6978      	ldr	r0, [r7, #20]
 8004fc8:	f001 fe76 	bl	8006cb8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	441a      	add	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	441a      	add	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d809      	bhi.n	800500e <PCD_WriteEmptyTxFifo+0xde>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	695a      	ldr	r2, [r3, #20]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005002:	429a      	cmp	r2, r3
 8005004:	d203      	bcs.n	800500e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1bf      	bne.n	8004f8e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	429a      	cmp	r2, r3
 8005018:	d811      	bhi.n	800503e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	2201      	movs	r2, #1
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800502e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	43db      	mvns	r3, r3
 8005034:	6939      	ldr	r1, [r7, #16]
 8005036:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800503a:	4013      	ands	r3, r2
 800503c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3720      	adds	r7, #32
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	333c      	adds	r3, #60	@ 0x3c
 8005060:	3304      	adds	r3, #4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	799b      	ldrb	r3, [r3, #6]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d17b      	bne.n	8005176 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d015      	beq.n	80050b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	4a61      	ldr	r2, [pc, #388]	@ (8005210 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	f240 80b9 	bls.w	8005204 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80b3 	beq.w	8005204 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050aa:	461a      	mov	r2, r3
 80050ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050b0:	6093      	str	r3, [r2, #8]
 80050b2:	e0a7      	b.n	8005204 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ca:	461a      	mov	r2, r3
 80050cc:	2320      	movs	r3, #32
 80050ce:	6093      	str	r3, [r2, #8]
 80050d0:	e098      	b.n	8005204 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f040 8093 	bne.w	8005204 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	4a4b      	ldr	r2, [pc, #300]	@ (8005210 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d90f      	bls.n	8005106 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fc:	461a      	mov	r2, r3
 80050fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005102:	6093      	str	r3, [r2, #8]
 8005104:	e07e      	b.n	8005204 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	4413      	add	r3, r2
 8005118:	3304      	adds	r3, #4
 800511a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1a      	ldr	r2, [r3, #32]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	0159      	lsls	r1, r3, #5
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	440b      	add	r3, r1
 8005128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005132:	1ad2      	subs	r2, r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d114      	bne.n	8005168 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d109      	bne.n	800515a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005150:	461a      	mov	r2, r3
 8005152:	2101      	movs	r1, #1
 8005154:	f002 f846 	bl	80071e4 <USB_EP0_OutStart>
 8005158:	e006      	b.n	8005168 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	441a      	add	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	4619      	mov	r1, r3
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f004 fb06 	bl	8009780 <HAL_PCD_DataOutStageCallback>
 8005174:	e046      	b.n	8005204 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4a26      	ldr	r2, [pc, #152]	@ (8005214 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d124      	bne.n	80051c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005194:	461a      	mov	r2, r3
 8005196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800519a:	6093      	str	r3, [r2, #8]
 800519c:	e032      	b.n	8005204 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b4:	461a      	mov	r2, r3
 80051b6:	2320      	movs	r3, #32
 80051b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f004 fadd 	bl	8009780 <HAL_PCD_DataOutStageCallback>
 80051c6:	e01d      	b.n	8005204 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d114      	bne.n	80051f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	4613      	mov	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d108      	bne.n	80051f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80051f0:	461a      	mov	r2, r3
 80051f2:	2100      	movs	r1, #0
 80051f4:	f001 fff6 	bl	80071e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f004 fabe 	bl	8009780 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3720      	adds	r7, #32
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	4f54300a 	.word	0x4f54300a
 8005214:	4f54310a 	.word	0x4f54310a

08005218 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	333c      	adds	r3, #60	@ 0x3c
 8005230:	3304      	adds	r3, #4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4a15      	ldr	r2, [pc, #84]	@ (80052a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d90e      	bls.n	800526c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005254:	2b00      	cmp	r3, #0
 8005256:	d009      	beq.n	800526c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005264:	461a      	mov	r2, r3
 8005266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800526a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f004 fa75 	bl	800975c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4a0a      	ldr	r2, [pc, #40]	@ (80052a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d90c      	bls.n	8005294 <PCD_EP_OutSetupPacket_int+0x7c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	799b      	ldrb	r3, [r3, #6]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d108      	bne.n	8005294 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800528c:	461a      	mov	r2, r3
 800528e:	2101      	movs	r1, #1
 8005290:	f001 ffa8 	bl	80071e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	4f54300a 	.word	0x4f54300a

080052a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
 80052b0:	4613      	mov	r3, r2
 80052b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d107      	bne.n	80052d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80052c2:	883b      	ldrh	r3, [r7, #0]
 80052c4:	0419      	lsls	r1, r3, #16
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80052d0:	e028      	b.n	8005324 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d8:	0c1b      	lsrs	r3, r3, #16
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	4413      	add	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052e0:	2300      	movs	r3, #0
 80052e2:	73fb      	strb	r3, [r7, #15]
 80052e4:	e00d      	b.n	8005302 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	3340      	adds	r3, #64	@ 0x40
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	0c1b      	lsrs	r3, r3, #16
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	4413      	add	r3, r2
 80052fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	3301      	adds	r3, #1
 8005300:	73fb      	strb	r3, [r7, #15]
 8005302:	7bfa      	ldrb	r2, [r7, #15]
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	3b01      	subs	r3, #1
 8005308:	429a      	cmp	r2, r3
 800530a:	d3ec      	bcc.n	80052e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800530c:	883b      	ldrh	r3, [r7, #0]
 800530e:	0418      	lsls	r0, r3, #16
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	3b01      	subs	r3, #1
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	4302      	orrs	r2, r0
 800531c:	3340      	adds	r3, #64	@ 0x40
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	887a      	ldrh	r2, [r7, #2]
 8005344:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e267      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d075      	beq.n	8005476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800538a:	4b88      	ldr	r3, [pc, #544]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 030c 	and.w	r3, r3, #12
 8005392:	2b04      	cmp	r3, #4
 8005394:	d00c      	beq.n	80053b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005396:	4b85      	ldr	r3, [pc, #532]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d112      	bne.n	80053c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053a2:	4b82      	ldr	r3, [pc, #520]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053ae:	d10b      	bne.n	80053c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b0:	4b7e      	ldr	r3, [pc, #504]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d05b      	beq.n	8005474 <HAL_RCC_OscConfig+0x108>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d157      	bne.n	8005474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e242      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053d0:	d106      	bne.n	80053e0 <HAL_RCC_OscConfig+0x74>
 80053d2:	4b76      	ldr	r3, [pc, #472]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a75      	ldr	r2, [pc, #468]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 80053d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	e01d      	b.n	800541c <HAL_RCC_OscConfig+0xb0>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053e8:	d10c      	bne.n	8005404 <HAL_RCC_OscConfig+0x98>
 80053ea:	4b70      	ldr	r3, [pc, #448]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a6f      	ldr	r2, [pc, #444]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 80053f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	4b6d      	ldr	r3, [pc, #436]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a6c      	ldr	r2, [pc, #432]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 80053fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	e00b      	b.n	800541c <HAL_RCC_OscConfig+0xb0>
 8005404:	4b69      	ldr	r3, [pc, #420]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a68      	ldr	r2, [pc, #416]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 800540a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	4b66      	ldr	r3, [pc, #408]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a65      	ldr	r2, [pc, #404]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 8005416:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800541a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d013      	beq.n	800544c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005424:	f7fc fbdc 	bl	8001be0 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800542c:	f7fc fbd8 	bl	8001be0 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b64      	cmp	r3, #100	@ 0x64
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e207      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543e:	4b5b      	ldr	r3, [pc, #364]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0f0      	beq.n	800542c <HAL_RCC_OscConfig+0xc0>
 800544a:	e014      	b.n	8005476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544c:	f7fc fbc8 	bl	8001be0 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005454:	f7fc fbc4 	bl	8001be0 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b64      	cmp	r3, #100	@ 0x64
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e1f3      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005466:	4b51      	ldr	r3, [pc, #324]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f0      	bne.n	8005454 <HAL_RCC_OscConfig+0xe8>
 8005472:	e000      	b.n	8005476 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d063      	beq.n	800554a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005482:	4b4a      	ldr	r3, [pc, #296]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800548e:	4b47      	ldr	r3, [pc, #284]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005496:	2b08      	cmp	r3, #8
 8005498:	d11c      	bne.n	80054d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800549a:	4b44      	ldr	r3, [pc, #272]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d116      	bne.n	80054d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054a6:	4b41      	ldr	r3, [pc, #260]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_RCC_OscConfig+0x152>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d001      	beq.n	80054be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e1c7      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054be:	4b3b      	ldr	r3, [pc, #236]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	4937      	ldr	r1, [pc, #220]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d2:	e03a      	b.n	800554a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d020      	beq.n	800551e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054dc:	4b34      	ldr	r3, [pc, #208]	@ (80055b0 <HAL_RCC_OscConfig+0x244>)
 80054de:	2201      	movs	r2, #1
 80054e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e2:	f7fc fb7d 	bl	8001be0 <HAL_GetTick>
 80054e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e8:	e008      	b.n	80054fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ea:	f7fc fb79 	bl	8001be0 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d901      	bls.n	80054fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e1a8      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fc:	4b2b      	ldr	r3, [pc, #172]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0f0      	beq.n	80054ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005508:	4b28      	ldr	r3, [pc, #160]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	4925      	ldr	r1, [pc, #148]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 8005518:	4313      	orrs	r3, r2
 800551a:	600b      	str	r3, [r1, #0]
 800551c:	e015      	b.n	800554a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800551e:	4b24      	ldr	r3, [pc, #144]	@ (80055b0 <HAL_RCC_OscConfig+0x244>)
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005524:	f7fc fb5c 	bl	8001be0 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800552c:	f7fc fb58 	bl	8001be0 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e187      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800553e:	4b1b      	ldr	r3, [pc, #108]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1f0      	bne.n	800552c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	2b00      	cmp	r3, #0
 8005554:	d036      	beq.n	80055c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d016      	beq.n	800558c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800555e:	4b15      	ldr	r3, [pc, #84]	@ (80055b4 <HAL_RCC_OscConfig+0x248>)
 8005560:	2201      	movs	r2, #1
 8005562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005564:	f7fc fb3c 	bl	8001be0 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800556c:	f7fc fb38 	bl	8001be0 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e167      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800557e:	4b0b      	ldr	r3, [pc, #44]	@ (80055ac <HAL_RCC_OscConfig+0x240>)
 8005580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0x200>
 800558a:	e01b      	b.n	80055c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800558c:	4b09      	ldr	r3, [pc, #36]	@ (80055b4 <HAL_RCC_OscConfig+0x248>)
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005592:	f7fc fb25 	bl	8001be0 <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005598:	e00e      	b.n	80055b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800559a:	f7fc fb21 	bl	8001be0 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d907      	bls.n	80055b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e150      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
 80055ac:	40023800 	.word	0x40023800
 80055b0:	42470000 	.word	0x42470000
 80055b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b8:	4b88      	ldr	r3, [pc, #544]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 80055ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1ea      	bne.n	800559a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 8097 	beq.w	8005700 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055d2:	2300      	movs	r3, #0
 80055d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055d6:	4b81      	ldr	r3, [pc, #516]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 80055d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10f      	bne.n	8005602 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055e2:	2300      	movs	r3, #0
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	4b7d      	ldr	r3, [pc, #500]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	4a7c      	ldr	r2, [pc, #496]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 80055ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80055f2:	4b7a      	ldr	r3, [pc, #488]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055fa:	60bb      	str	r3, [r7, #8]
 80055fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055fe:	2301      	movs	r3, #1
 8005600:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005602:	4b77      	ldr	r3, [pc, #476]	@ (80057e0 <HAL_RCC_OscConfig+0x474>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560a:	2b00      	cmp	r3, #0
 800560c:	d118      	bne.n	8005640 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800560e:	4b74      	ldr	r3, [pc, #464]	@ (80057e0 <HAL_RCC_OscConfig+0x474>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a73      	ldr	r2, [pc, #460]	@ (80057e0 <HAL_RCC_OscConfig+0x474>)
 8005614:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800561a:	f7fc fae1 	bl	8001be0 <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005622:	f7fc fadd 	bl	8001be0 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e10c      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005634:	4b6a      	ldr	r3, [pc, #424]	@ (80057e0 <HAL_RCC_OscConfig+0x474>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0f0      	beq.n	8005622 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d106      	bne.n	8005656 <HAL_RCC_OscConfig+0x2ea>
 8005648:	4b64      	ldr	r3, [pc, #400]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 800564a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564c:	4a63      	ldr	r2, [pc, #396]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 800564e:	f043 0301 	orr.w	r3, r3, #1
 8005652:	6713      	str	r3, [r2, #112]	@ 0x70
 8005654:	e01c      	b.n	8005690 <HAL_RCC_OscConfig+0x324>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	2b05      	cmp	r3, #5
 800565c:	d10c      	bne.n	8005678 <HAL_RCC_OscConfig+0x30c>
 800565e:	4b5f      	ldr	r3, [pc, #380]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 8005660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005662:	4a5e      	ldr	r2, [pc, #376]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 8005664:	f043 0304 	orr.w	r3, r3, #4
 8005668:	6713      	str	r3, [r2, #112]	@ 0x70
 800566a:	4b5c      	ldr	r3, [pc, #368]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566e:	4a5b      	ldr	r2, [pc, #364]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	6713      	str	r3, [r2, #112]	@ 0x70
 8005676:	e00b      	b.n	8005690 <HAL_RCC_OscConfig+0x324>
 8005678:	4b58      	ldr	r3, [pc, #352]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 800567a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567c:	4a57      	ldr	r2, [pc, #348]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 800567e:	f023 0301 	bic.w	r3, r3, #1
 8005682:	6713      	str	r3, [r2, #112]	@ 0x70
 8005684:	4b55      	ldr	r3, [pc, #340]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005688:	4a54      	ldr	r2, [pc, #336]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 800568a:	f023 0304 	bic.w	r3, r3, #4
 800568e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d015      	beq.n	80056c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005698:	f7fc faa2 	bl	8001be0 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800569e:	e00a      	b.n	80056b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a0:	f7fc fa9e 	bl	8001be0 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e0cb      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b6:	4b49      	ldr	r3, [pc, #292]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 80056b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0ee      	beq.n	80056a0 <HAL_RCC_OscConfig+0x334>
 80056c2:	e014      	b.n	80056ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056c4:	f7fc fa8c 	bl	8001be0 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ca:	e00a      	b.n	80056e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056cc:	f7fc fa88 	bl	8001be0 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e0b5      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e2:	4b3e      	ldr	r3, [pc, #248]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1ee      	bne.n	80056cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d105      	bne.n	8005700 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056f4:	4b39      	ldr	r3, [pc, #228]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	4a38      	ldr	r2, [pc, #224]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 80056fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 80a1 	beq.w	800584c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800570a:	4b34      	ldr	r3, [pc, #208]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 030c 	and.w	r3, r3, #12
 8005712:	2b08      	cmp	r3, #8
 8005714:	d05c      	beq.n	80057d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	2b02      	cmp	r3, #2
 800571c:	d141      	bne.n	80057a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800571e:	4b31      	ldr	r3, [pc, #196]	@ (80057e4 <HAL_RCC_OscConfig+0x478>)
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005724:	f7fc fa5c 	bl	8001be0 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800572c:	f7fc fa58 	bl	8001be0 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e087      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573e:	4b27      	ldr	r3, [pc, #156]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f0      	bne.n	800572c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69da      	ldr	r2, [r3, #28]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005758:	019b      	lsls	r3, r3, #6
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005760:	085b      	lsrs	r3, r3, #1
 8005762:	3b01      	subs	r3, #1
 8005764:	041b      	lsls	r3, r3, #16
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	061b      	lsls	r3, r3, #24
 800576e:	491b      	ldr	r1, [pc, #108]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 8005770:	4313      	orrs	r3, r2
 8005772:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005774:	4b1b      	ldr	r3, [pc, #108]	@ (80057e4 <HAL_RCC_OscConfig+0x478>)
 8005776:	2201      	movs	r2, #1
 8005778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577a:	f7fc fa31 	bl	8001be0 <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005780:	e008      	b.n	8005794 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005782:	f7fc fa2d 	bl	8001be0 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e05c      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005794:	4b11      	ldr	r3, [pc, #68]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0f0      	beq.n	8005782 <HAL_RCC_OscConfig+0x416>
 80057a0:	e054      	b.n	800584c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a2:	4b10      	ldr	r3, [pc, #64]	@ (80057e4 <HAL_RCC_OscConfig+0x478>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a8:	f7fc fa1a 	bl	8001be0 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fc fa16 	bl	8001be0 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e045      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c2:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <HAL_RCC_OscConfig+0x470>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x444>
 80057ce:	e03d      	b.n	800584c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d107      	bne.n	80057e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e038      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
 80057dc:	40023800 	.word	0x40023800
 80057e0:	40007000 	.word	0x40007000
 80057e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005858 <HAL_RCC_OscConfig+0x4ec>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d028      	beq.n	8005848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005800:	429a      	cmp	r2, r3
 8005802:	d121      	bne.n	8005848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580e:	429a      	cmp	r2, r3
 8005810:	d11a      	bne.n	8005848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005818:	4013      	ands	r3, r2
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800581e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005820:	4293      	cmp	r3, r2
 8005822:	d111      	bne.n	8005848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	3b01      	subs	r3, #1
 8005832:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005834:	429a      	cmp	r2, r3
 8005836:	d107      	bne.n	8005848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005842:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005844:	429a      	cmp	r2, r3
 8005846:	d001      	beq.n	800584c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40023800 	.word	0x40023800

0800585c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0cc      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005870:	4b68      	ldr	r3, [pc, #416]	@ (8005a14 <HAL_RCC_ClockConfig+0x1b8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d90c      	bls.n	8005898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587e:	4b65      	ldr	r3, [pc, #404]	@ (8005a14 <HAL_RCC_ClockConfig+0x1b8>)
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005886:	4b63      	ldr	r3, [pc, #396]	@ (8005a14 <HAL_RCC_ClockConfig+0x1b8>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d001      	beq.n	8005898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e0b8      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d020      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b0:	4b59      	ldr	r3, [pc, #356]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	4a58      	ldr	r2, [pc, #352]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058c8:	4b53      	ldr	r3, [pc, #332]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	4a52      	ldr	r2, [pc, #328]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80058d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d4:	4b50      	ldr	r3, [pc, #320]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	494d      	ldr	r1, [pc, #308]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d044      	beq.n	800597c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d107      	bne.n	800590a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fa:	4b47      	ldr	r3, [pc, #284]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d119      	bne.n	800593a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e07f      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d003      	beq.n	800591a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005916:	2b03      	cmp	r3, #3
 8005918:	d107      	bne.n	800592a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800591a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e06f      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800592a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e067      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800593a:	4b37      	ldr	r3, [pc, #220]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f023 0203 	bic.w	r2, r3, #3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	4934      	ldr	r1, [pc, #208]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 8005948:	4313      	orrs	r3, r2
 800594a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800594c:	f7fc f948 	bl	8001be0 <HAL_GetTick>
 8005950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005952:	e00a      	b.n	800596a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005954:	f7fc f944 	bl	8001be0 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e04f      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596a:	4b2b      	ldr	r3, [pc, #172]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 020c 	and.w	r2, r3, #12
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	429a      	cmp	r2, r3
 800597a:	d1eb      	bne.n	8005954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800597c:	4b25      	ldr	r3, [pc, #148]	@ (8005a14 <HAL_RCC_ClockConfig+0x1b8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d20c      	bcs.n	80059a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598a:	4b22      	ldr	r3, [pc, #136]	@ (8005a14 <HAL_RCC_ClockConfig+0x1b8>)
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005992:	4b20      	ldr	r3, [pc, #128]	@ (8005a14 <HAL_RCC_ClockConfig+0x1b8>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d001      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e032      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b0:	4b19      	ldr	r3, [pc, #100]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4916      	ldr	r1, [pc, #88]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d009      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ce:	4b12      	ldr	r3, [pc, #72]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	490e      	ldr	r1, [pc, #56]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059e2:	f000 f821 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 80059e6:	4602      	mov	r2, r0
 80059e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005a18 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	490a      	ldr	r1, [pc, #40]	@ (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 80059f4:	5ccb      	ldrb	r3, [r1, r3]
 80059f6:	fa22 f303 	lsr.w	r3, r2, r3
 80059fa:	4a09      	ldr	r2, [pc, #36]	@ (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80059fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80059fe:	4b09      	ldr	r3, [pc, #36]	@ (8005a24 <HAL_RCC_ClockConfig+0x1c8>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fc f8a8 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40023c00 	.word	0x40023c00
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	0800dc10 	.word	0x0800dc10
 8005a20:	20000000 	.word	0x20000000
 8005a24:	20000004 	.word	0x20000004

08005a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a2c:	b094      	sub	sp, #80	@ 0x50
 8005a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a40:	4b79      	ldr	r3, [pc, #484]	@ (8005c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 030c 	and.w	r3, r3, #12
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d00d      	beq.n	8005a68 <HAL_RCC_GetSysClockFreq+0x40>
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	f200 80e1 	bhi.w	8005c14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <HAL_RCC_GetSysClockFreq+0x34>
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d003      	beq.n	8005a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a5a:	e0db      	b.n	8005c14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a5c:	4b73      	ldr	r3, [pc, #460]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a60:	e0db      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a62:	4b73      	ldr	r3, [pc, #460]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a66:	e0d8      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a68:	4b6f      	ldr	r3, [pc, #444]	@ (8005c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a70:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a72:	4b6d      	ldr	r3, [pc, #436]	@ (8005c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d063      	beq.n	8005b46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8005c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	099b      	lsrs	r3, r3, #6
 8005a84:	2200      	movs	r2, #0
 8005a86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a92:	2300      	movs	r3, #0
 8005a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005a9a:	4622      	mov	r2, r4
 8005a9c:	462b      	mov	r3, r5
 8005a9e:	f04f 0000 	mov.w	r0, #0
 8005aa2:	f04f 0100 	mov.w	r1, #0
 8005aa6:	0159      	lsls	r1, r3, #5
 8005aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aac:	0150      	lsls	r0, r2, #5
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	1a51      	subs	r1, r2, r1
 8005ab6:	6139      	str	r1, [r7, #16]
 8005ab8:	4629      	mov	r1, r5
 8005aba:	eb63 0301 	sbc.w	r3, r3, r1
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005acc:	4659      	mov	r1, fp
 8005ace:	018b      	lsls	r3, r1, #6
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ad6:	4651      	mov	r1, sl
 8005ad8:	018a      	lsls	r2, r1, #6
 8005ada:	4651      	mov	r1, sl
 8005adc:	ebb2 0801 	subs.w	r8, r2, r1
 8005ae0:	4659      	mov	r1, fp
 8005ae2:	eb63 0901 	sbc.w	r9, r3, r1
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	f04f 0300 	mov.w	r3, #0
 8005aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005afa:	4690      	mov	r8, r2
 8005afc:	4699      	mov	r9, r3
 8005afe:	4623      	mov	r3, r4
 8005b00:	eb18 0303 	adds.w	r3, r8, r3
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	462b      	mov	r3, r5
 8005b08:	eb49 0303 	adc.w	r3, r9, r3
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	024b      	lsls	r3, r1, #9
 8005b1e:	4621      	mov	r1, r4
 8005b20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b24:	4621      	mov	r1, r4
 8005b26:	024a      	lsls	r2, r1, #9
 8005b28:	4610      	mov	r0, r2
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b2e:	2200      	movs	r2, #0
 8005b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b38:	f7fb f886 	bl	8000c48 <__aeabi_uldivmod>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4613      	mov	r3, r2
 8005b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b44:	e058      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b46:	4b38      	ldr	r3, [pc, #224]	@ (8005c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	099b      	lsrs	r3, r3, #6
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	4611      	mov	r1, r2
 8005b52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b56:	623b      	str	r3, [r7, #32]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b60:	4642      	mov	r2, r8
 8005b62:	464b      	mov	r3, r9
 8005b64:	f04f 0000 	mov.w	r0, #0
 8005b68:	f04f 0100 	mov.w	r1, #0
 8005b6c:	0159      	lsls	r1, r3, #5
 8005b6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b72:	0150      	lsls	r0, r2, #5
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4641      	mov	r1, r8
 8005b7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b7e:	4649      	mov	r1, r9
 8005b80:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	f04f 0300 	mov.w	r3, #0
 8005b8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b98:	ebb2 040a 	subs.w	r4, r2, sl
 8005b9c:	eb63 050b 	sbc.w	r5, r3, fp
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	00eb      	lsls	r3, r5, #3
 8005baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bae:	00e2      	lsls	r2, r4, #3
 8005bb0:	4614      	mov	r4, r2
 8005bb2:	461d      	mov	r5, r3
 8005bb4:	4643      	mov	r3, r8
 8005bb6:	18e3      	adds	r3, r4, r3
 8005bb8:	603b      	str	r3, [r7, #0]
 8005bba:	464b      	mov	r3, r9
 8005bbc:	eb45 0303 	adc.w	r3, r5, r3
 8005bc0:	607b      	str	r3, [r7, #4]
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bce:	4629      	mov	r1, r5
 8005bd0:	028b      	lsls	r3, r1, #10
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bd8:	4621      	mov	r1, r4
 8005bda:	028a      	lsls	r2, r1, #10
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4619      	mov	r1, r3
 8005be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005be2:	2200      	movs	r2, #0
 8005be4:	61bb      	str	r3, [r7, #24]
 8005be6:	61fa      	str	r2, [r7, #28]
 8005be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bec:	f7fb f82c 	bl	8000c48 <__aeabi_uldivmod>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	0c1b      	lsrs	r3, r3, #16
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	3301      	adds	r3, #1
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c12:	e002      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c14:	4b05      	ldr	r3, [pc, #20]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3750      	adds	r7, #80	@ 0x50
 8005c20:	46bd      	mov	sp, r7
 8005c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c26:	bf00      	nop
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	00f42400 	.word	0x00f42400
 8005c30:	007a1200 	.word	0x007a1200

08005c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c38:	4b03      	ldr	r3, [pc, #12]	@ (8005c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	20000000 	.word	0x20000000

08005c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c50:	f7ff fff0 	bl	8005c34 <HAL_RCC_GetHCLKFreq>
 8005c54:	4602      	mov	r2, r0
 8005c56:	4b05      	ldr	r3, [pc, #20]	@ (8005c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	0a9b      	lsrs	r3, r3, #10
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	4903      	ldr	r1, [pc, #12]	@ (8005c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c62:	5ccb      	ldrb	r3, [r1, r3]
 8005c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40023800 	.word	0x40023800
 8005c70:	0800dc20 	.word	0x0800dc20

08005c74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c74:	b084      	sub	sp, #16
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	f107 001c 	add.w	r0, r7, #28
 8005c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c86:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d123      	bne.n	8005cd6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c92:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005ca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d105      	bne.n	8005cca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 fae8 	bl	80072a0 <USB_CoreReset>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	73fb      	strb	r3, [r7, #15]
 8005cd4:	e01b      	b.n	8005d0e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 fadc 	bl	80072a0 <USB_CoreReset>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005cec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d106      	bne.n	8005d02 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d00:	e005      	b.n	8005d0e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d0e:	7fbb      	ldrb	r3, [r7, #30]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d10b      	bne.n	8005d2c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f043 0206 	orr.w	r2, r3, #6
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f043 0220 	orr.w	r2, r3, #32
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d38:	b004      	add	sp, #16
 8005d3a:	4770      	bx	lr

08005d3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	4613      	mov	r3, r2
 8005d48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005d4a:	79fb      	ldrb	r3, [r7, #7]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d165      	bne.n	8005e1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4a41      	ldr	r2, [pc, #260]	@ (8005e58 <USB_SetTurnaroundTime+0x11c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d906      	bls.n	8005d66 <USB_SetTurnaroundTime+0x2a>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4a40      	ldr	r2, [pc, #256]	@ (8005e5c <USB_SetTurnaroundTime+0x120>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d202      	bcs.n	8005d66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005d60:	230f      	movs	r3, #15
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e062      	b.n	8005e2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	4a3c      	ldr	r2, [pc, #240]	@ (8005e5c <USB_SetTurnaroundTime+0x120>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d306      	bcc.n	8005d7c <USB_SetTurnaroundTime+0x40>
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	4a3b      	ldr	r2, [pc, #236]	@ (8005e60 <USB_SetTurnaroundTime+0x124>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d202      	bcs.n	8005d7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005d76:	230e      	movs	r3, #14
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	e057      	b.n	8005e2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	4a38      	ldr	r2, [pc, #224]	@ (8005e60 <USB_SetTurnaroundTime+0x124>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d306      	bcc.n	8005d92 <USB_SetTurnaroundTime+0x56>
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4a37      	ldr	r2, [pc, #220]	@ (8005e64 <USB_SetTurnaroundTime+0x128>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d202      	bcs.n	8005d92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005d8c:	230d      	movs	r3, #13
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	e04c      	b.n	8005e2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	4a33      	ldr	r2, [pc, #204]	@ (8005e64 <USB_SetTurnaroundTime+0x128>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d306      	bcc.n	8005da8 <USB_SetTurnaroundTime+0x6c>
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4a32      	ldr	r2, [pc, #200]	@ (8005e68 <USB_SetTurnaroundTime+0x12c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d802      	bhi.n	8005da8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005da2:	230c      	movs	r3, #12
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	e041      	b.n	8005e2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	4a2f      	ldr	r2, [pc, #188]	@ (8005e68 <USB_SetTurnaroundTime+0x12c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d906      	bls.n	8005dbe <USB_SetTurnaroundTime+0x82>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4a2e      	ldr	r2, [pc, #184]	@ (8005e6c <USB_SetTurnaroundTime+0x130>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d802      	bhi.n	8005dbe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005db8:	230b      	movs	r3, #11
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	e036      	b.n	8005e2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8005e6c <USB_SetTurnaroundTime+0x130>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d906      	bls.n	8005dd4 <USB_SetTurnaroundTime+0x98>
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	4a29      	ldr	r2, [pc, #164]	@ (8005e70 <USB_SetTurnaroundTime+0x134>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d802      	bhi.n	8005dd4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005dce:	230a      	movs	r3, #10
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	e02b      	b.n	8005e2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4a26      	ldr	r2, [pc, #152]	@ (8005e70 <USB_SetTurnaroundTime+0x134>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d906      	bls.n	8005dea <USB_SetTurnaroundTime+0xae>
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4a25      	ldr	r2, [pc, #148]	@ (8005e74 <USB_SetTurnaroundTime+0x138>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d202      	bcs.n	8005dea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005de4:	2309      	movs	r3, #9
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	e020      	b.n	8005e2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4a21      	ldr	r2, [pc, #132]	@ (8005e74 <USB_SetTurnaroundTime+0x138>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d306      	bcc.n	8005e00 <USB_SetTurnaroundTime+0xc4>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4a20      	ldr	r2, [pc, #128]	@ (8005e78 <USB_SetTurnaroundTime+0x13c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d802      	bhi.n	8005e00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	e015      	b.n	8005e2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4a1d      	ldr	r2, [pc, #116]	@ (8005e78 <USB_SetTurnaroundTime+0x13c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d906      	bls.n	8005e16 <USB_SetTurnaroundTime+0xda>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005e7c <USB_SetTurnaroundTime+0x140>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d202      	bcs.n	8005e16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e10:	2307      	movs	r3, #7
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	e00a      	b.n	8005e2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e16:	2306      	movs	r3, #6
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	e007      	b.n	8005e2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d102      	bne.n	8005e28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005e22:	2309      	movs	r3, #9
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	e001      	b.n	8005e2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005e28:	2309      	movs	r3, #9
 8005e2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	029b      	lsls	r3, r3, #10
 8005e40:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005e44:	431a      	orrs	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	00d8acbf 	.word	0x00d8acbf
 8005e5c:	00e4e1c0 	.word	0x00e4e1c0
 8005e60:	00f42400 	.word	0x00f42400
 8005e64:	01067380 	.word	0x01067380
 8005e68:	011a499f 	.word	0x011a499f
 8005e6c:	01312cff 	.word	0x01312cff
 8005e70:	014ca43f 	.word	0x014ca43f
 8005e74:	016e3600 	.word	0x016e3600
 8005e78:	01a6ab1f 	.word	0x01a6ab1f
 8005e7c:	01e84800 	.word	0x01e84800

08005e80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f043 0201 	orr.w	r2, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f023 0201 	bic.w	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d115      	bne.n	8005f12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ef2:	200a      	movs	r0, #10
 8005ef4:	f7fb fe80 	bl	8001bf8 <HAL_Delay>
      ms += 10U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	330a      	adds	r3, #10
 8005efc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f001 f93f 	bl	8007182 <USB_GetMode>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d01e      	beq.n	8005f48 <USB_SetCurrentMode+0x84>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f0e:	d9f0      	bls.n	8005ef2 <USB_SetCurrentMode+0x2e>
 8005f10:	e01a      	b.n	8005f48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f12:	78fb      	ldrb	r3, [r7, #3]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d115      	bne.n	8005f44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f24:	200a      	movs	r0, #10
 8005f26:	f7fb fe67 	bl	8001bf8 <HAL_Delay>
      ms += 10U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	330a      	adds	r3, #10
 8005f2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f001 f926 	bl	8007182 <USB_GetMode>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d005      	beq.n	8005f48 <USB_SetCurrentMode+0x84>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f40:	d9f0      	bls.n	8005f24 <USB_SetCurrentMode+0x60>
 8005f42:	e001      	b.n	8005f48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e005      	b.n	8005f54 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2bc8      	cmp	r3, #200	@ 0xc8
 8005f4c:	d101      	bne.n	8005f52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b086      	sub	sp, #24
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005f6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f76:	2300      	movs	r3, #0
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	e009      	b.n	8005f90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	3340      	adds	r3, #64	@ 0x40
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	2200      	movs	r2, #0
 8005f88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	613b      	str	r3, [r7, #16]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2b0e      	cmp	r3, #14
 8005f94:	d9f2      	bls.n	8005f7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d11c      	bne.n	8005fd8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fac:	f043 0302 	orr.w	r3, r3, #2
 8005fb0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fce:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8005fd6:	e00b      	b.n	8005ff0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fdc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ffc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006000:	2b01      	cmp	r3, #1
 8006002:	d10d      	bne.n	8006020 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800600c:	2100      	movs	r1, #0
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f968 	bl	80062e4 <USB_SetDevSpeed>
 8006014:	e008      	b.n	8006028 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006016:	2101      	movs	r1, #1
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f963 	bl	80062e4 <USB_SetDevSpeed>
 800601e:	e003      	b.n	8006028 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006020:	2103      	movs	r1, #3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f95e 	bl	80062e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006028:	2110      	movs	r1, #16
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f8fa 	bl	8006224 <USB_FlushTxFifo>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f924 	bl	8006288 <USB_FlushRxFifo>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006050:	461a      	mov	r2, r3
 8006052:	2300      	movs	r3, #0
 8006054:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800605c:	461a      	mov	r2, r3
 800605e:	2300      	movs	r3, #0
 8006060:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006068:	461a      	mov	r2, r3
 800606a:	2300      	movs	r3, #0
 800606c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800606e:	2300      	movs	r3, #0
 8006070:	613b      	str	r3, [r7, #16]
 8006072:	e043      	b.n	80060fc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006086:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800608a:	d118      	bne.n	80060be <USB_DevInit+0x162>
    {
      if (i == 0U)
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800609e:	461a      	mov	r2, r3
 80060a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	e013      	b.n	80060d0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b4:	461a      	mov	r2, r3
 80060b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	e008      	b.n	80060d0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ca:	461a      	mov	r2, r3
 80060cc:	2300      	movs	r3, #0
 80060ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060dc:	461a      	mov	r2, r3
 80060de:	2300      	movs	r3, #0
 80060e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ee:	461a      	mov	r2, r3
 80060f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80060f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	3301      	adds	r3, #1
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006100:	461a      	mov	r2, r3
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	4293      	cmp	r3, r2
 8006106:	d3b5      	bcc.n	8006074 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	e043      	b.n	8006196 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006120:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006124:	d118      	bne.n	8006158 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006138:	461a      	mov	r2, r3
 800613a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	e013      	b.n	800616a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800614e:	461a      	mov	r2, r3
 8006150:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	e008      	b.n	800616a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006164:	461a      	mov	r2, r3
 8006166:	2300      	movs	r3, #0
 8006168:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006176:	461a      	mov	r2, r3
 8006178:	2300      	movs	r3, #0
 800617a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006188:	461a      	mov	r2, r3
 800618a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800618e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	3301      	adds	r3, #1
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800619a:	461a      	mov	r2, r3
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4293      	cmp	r3, r2
 80061a0:	d3b5      	bcc.n	800610e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80061c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	f043 0210 	orr.w	r2, r3, #16
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	4b10      	ldr	r3, [pc, #64]	@ (8006220 <USB_DevInit+0x2c4>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80061e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f043 0208 	orr.w	r2, r3, #8
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d107      	bne.n	8006210 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006208:	f043 0304 	orr.w	r3, r3, #4
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006210:	7dfb      	ldrb	r3, [r7, #23]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800621c:	b004      	add	sp, #16
 800621e:	4770      	bx	lr
 8006220:	803c3800 	.word	0x803c3800

08006224 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3301      	adds	r3, #1
 8006236:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800623e:	d901      	bls.n	8006244 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e01b      	b.n	800627c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	daf2      	bge.n	8006232 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	019b      	lsls	r3, r3, #6
 8006254:	f043 0220 	orr.w	r2, r3, #32
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3301      	adds	r3, #1
 8006260:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006268:	d901      	bls.n	800626e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e006      	b.n	800627c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b20      	cmp	r3, #32
 8006278:	d0f0      	beq.n	800625c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062a0:	d901      	bls.n	80062a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e018      	b.n	80062d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	daf2      	bge.n	8006294 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2210      	movs	r2, #16
 80062b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3301      	adds	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062c4:	d901      	bls.n	80062ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e006      	b.n	80062d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f003 0310 	and.w	r3, r3, #16
 80062d2:	2b10      	cmp	r3, #16
 80062d4:	d0f0      	beq.n	80062b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006304:	4313      	orrs	r3, r2
 8006306:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006316:	b480      	push	{r7}
 8006318:	b087      	sub	sp, #28
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 0306 	and.w	r3, r3, #6
 800632e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d102      	bne.n	800633c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006336:	2300      	movs	r3, #0
 8006338:	75fb      	strb	r3, [r7, #23]
 800633a:	e00a      	b.n	8006352 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b02      	cmp	r3, #2
 8006340:	d002      	beq.n	8006348 <USB_GetDevSpeed+0x32>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b06      	cmp	r3, #6
 8006346:	d102      	bne.n	800634e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006348:	2302      	movs	r3, #2
 800634a:	75fb      	strb	r3, [r7, #23]
 800634c:	e001      	b.n	8006352 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800634e:	230f      	movs	r3, #15
 8006350:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006352:	7dfb      	ldrb	r3, [r7, #23]
}
 8006354:	4618      	mov	r0, r3
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d13a      	bne.n	80063f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	f003 030f 	and.w	r3, r3, #15
 800638c:	2101      	movs	r1, #1
 800638e:	fa01 f303 	lsl.w	r3, r1, r3
 8006392:	b29b      	uxth	r3, r3
 8006394:	68f9      	ldr	r1, [r7, #12]
 8006396:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800639a:	4313      	orrs	r3, r2
 800639c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d155      	bne.n	8006460 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	791b      	ldrb	r3, [r3, #4]
 80063ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	059b      	lsls	r3, r3, #22
 80063d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063d8:	4313      	orrs	r3, r2
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	e036      	b.n	8006460 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f8:	69da      	ldr	r2, [r3, #28]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	2101      	movs	r1, #1
 8006404:	fa01 f303 	lsl.w	r3, r1, r3
 8006408:	041b      	lsls	r3, r3, #16
 800640a:	68f9      	ldr	r1, [r7, #12]
 800640c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006410:	4313      	orrs	r3, r2
 8006412:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d11a      	bne.n	8006460 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	791b      	ldrb	r3, [r3, #4]
 8006444:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006446:	430b      	orrs	r3, r1
 8006448:	4313      	orrs	r3, r2
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	440a      	add	r2, r1
 8006452:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800645a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800645e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
	...

08006470 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d161      	bne.n	8006550 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800649e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064a2:	d11f      	bne.n	80064e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	0151      	lsls	r1, r2, #5
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	440a      	add	r2, r1
 80064ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80064c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	2101      	movs	r1, #1
 80064f6:	fa01 f303 	lsl.w	r3, r1, r3
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	43db      	mvns	r3, r3
 80064fe:	68f9      	ldr	r1, [r7, #12]
 8006500:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006504:	4013      	ands	r3, r2
 8006506:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650e:	69da      	ldr	r2, [r3, #28]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	2101      	movs	r1, #1
 800651a:	fa01 f303 	lsl.w	r3, r1, r3
 800651e:	b29b      	uxth	r3, r3
 8006520:	43db      	mvns	r3, r3
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006528:	4013      	ands	r3, r2
 800652a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	0159      	lsls	r1, r3, #5
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	440b      	add	r3, r1
 8006542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006546:	4619      	mov	r1, r3
 8006548:	4b35      	ldr	r3, [pc, #212]	@ (8006620 <USB_DeactivateEndpoint+0x1b0>)
 800654a:	4013      	ands	r3, r2
 800654c:	600b      	str	r3, [r1, #0]
 800654e:	e060      	b.n	8006612 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006562:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006566:	d11f      	bne.n	80065a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	440a      	add	r2, r1
 800657e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006582:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006586:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	440a      	add	r2, r1
 800659e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	f003 030f 	and.w	r3, r3, #15
 80065b8:	2101      	movs	r1, #1
 80065ba:	fa01 f303 	lsl.w	r3, r1, r3
 80065be:	041b      	lsls	r3, r3, #16
 80065c0:	43db      	mvns	r3, r3
 80065c2:	68f9      	ldr	r1, [r7, #12]
 80065c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065c8:	4013      	ands	r3, r2
 80065ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f003 030f 	and.w	r3, r3, #15
 80065dc:	2101      	movs	r1, #1
 80065de:	fa01 f303 	lsl.w	r3, r1, r3
 80065e2:	041b      	lsls	r3, r3, #16
 80065e4:	43db      	mvns	r3, r3
 80065e6:	68f9      	ldr	r1, [r7, #12]
 80065e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065ec:	4013      	ands	r3, r2
 80065ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	0159      	lsls	r1, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	440b      	add	r3, r1
 8006606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660a:	4619      	mov	r1, r3
 800660c:	4b05      	ldr	r3, [pc, #20]	@ (8006624 <USB_DeactivateEndpoint+0x1b4>)
 800660e:	4013      	ands	r3, r2
 8006610:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	ec337800 	.word	0xec337800
 8006624:	eff37800 	.word	0xeff37800

08006628 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08a      	sub	sp, #40	@ 0x28
 800662c:	af02      	add	r7, sp, #8
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b01      	cmp	r3, #1
 8006646:	f040 817f 	bne.w	8006948 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d132      	bne.n	80066b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	0151      	lsls	r1, r2, #5
 8006664:	69fa      	ldr	r2, [r7, #28]
 8006666:	440a      	add	r2, r1
 8006668:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800666c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006670:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006674:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	69fa      	ldr	r2, [r7, #28]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006690:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006694:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	69fa      	ldr	r2, [r7, #28]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066b0:	0cdb      	lsrs	r3, r3, #19
 80066b2:	04db      	lsls	r3, r3, #19
 80066b4:	6113      	str	r3, [r2, #16]
 80066b6:	e097      	b.n	80067e8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066d2:	0cdb      	lsrs	r3, r3, #19
 80066d4:	04db      	lsls	r3, r3, #19
 80066d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	69fa      	ldr	r2, [r7, #28]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80066f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80066fa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d11a      	bne.n	8006738 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	691a      	ldr	r2, [r3, #16]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	429a      	cmp	r2, r3
 800670c:	d903      	bls.n	8006716 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	69fa      	ldr	r2, [r7, #28]
 800672a:	440a      	add	r2, r1
 800672c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006730:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006734:	6113      	str	r3, [r2, #16]
 8006736:	e044      	b.n	80067c2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	691a      	ldr	r2, [r3, #16]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	4413      	add	r3, r2
 8006742:	1e5a      	subs	r2, r3, #1
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	fbb2 f3f3 	udiv	r3, r2, r3
 800674c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	8afb      	ldrh	r3, [r7, #22]
 800675e:	04d9      	lsls	r1, r3, #19
 8006760:	4ba4      	ldr	r3, [pc, #656]	@ (80069f4 <USB_EPStartXfer+0x3cc>)
 8006762:	400b      	ands	r3, r1
 8006764:	69b9      	ldr	r1, [r7, #24]
 8006766:	0148      	lsls	r0, r1, #5
 8006768:	69f9      	ldr	r1, [r7, #28]
 800676a:	4401      	add	r1, r0
 800676c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006770:	4313      	orrs	r3, r2
 8006772:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	791b      	ldrb	r3, [r3, #4]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d122      	bne.n	80067c2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	0151      	lsls	r1, r2, #5
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	440a      	add	r2, r1
 8006792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006796:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800679a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	8afb      	ldrh	r3, [r7, #22]
 80067ac:	075b      	lsls	r3, r3, #29
 80067ae:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80067b2:	69b9      	ldr	r1, [r7, #24]
 80067b4:	0148      	lsls	r0, r1, #5
 80067b6:	69f9      	ldr	r1, [r7, #28]
 80067b8:	4401      	add	r1, r0
 80067ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80067be:	4313      	orrs	r3, r2
 80067c0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067d8:	69b9      	ldr	r1, [r7, #24]
 80067da:	0148      	lsls	r0, r1, #5
 80067dc:	69f9      	ldr	r1, [r7, #28]
 80067de:	4401      	add	r1, r0
 80067e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80067e4:	4313      	orrs	r3, r2
 80067e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d14b      	bne.n	8006886 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d009      	beq.n	800680a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006802:	461a      	mov	r2, r3
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	791b      	ldrb	r3, [r3, #4]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d128      	bne.n	8006864 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681e:	2b00      	cmp	r3, #0
 8006820:	d110      	bne.n	8006844 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	0151      	lsls	r1, r2, #5
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	440a      	add	r2, r1
 8006838:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800683c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e00f      	b.n	8006864 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	0151      	lsls	r1, r2, #5
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	440a      	add	r2, r1
 800685a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800685e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006862:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	69fa      	ldr	r2, [r7, #28]
 8006878:	440a      	add	r2, r1
 800687a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800687e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	e166      	b.n	8006b54 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	0151      	lsls	r1, r2, #5
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	440a      	add	r2, r1
 800689c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80068a4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	791b      	ldrb	r3, [r3, #4]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d015      	beq.n	80068da <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 814e 	beq.w	8006b54 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	2101      	movs	r1, #1
 80068ca:	fa01 f303 	lsl.w	r3, r1, r3
 80068ce:	69f9      	ldr	r1, [r7, #28]
 80068d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068d4:	4313      	orrs	r3, r2
 80068d6:	634b      	str	r3, [r1, #52]	@ 0x34
 80068d8:	e13c      	b.n	8006b54 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d110      	bne.n	800690c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	0151      	lsls	r1, r2, #5
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	440a      	add	r2, r1
 8006900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006904:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006908:	6013      	str	r3, [r2, #0]
 800690a:	e00f      	b.n	800692c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	4413      	add	r3, r2
 8006914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	0151      	lsls	r1, r2, #5
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	440a      	add	r2, r1
 8006922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800692a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	68d9      	ldr	r1, [r3, #12]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	781a      	ldrb	r2, [r3, #0]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	b298      	uxth	r0, r3
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	4603      	mov	r3, r0
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 f9b9 	bl	8006cb8 <USB_WritePacket>
 8006946:	e105      	b.n	8006b54 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	0151      	lsls	r1, r2, #5
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	440a      	add	r2, r1
 800695e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006962:	0cdb      	lsrs	r3, r3, #19
 8006964:	04db      	lsls	r3, r3, #19
 8006966:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	0151      	lsls	r1, r2, #5
 800697a:	69fa      	ldr	r2, [r7, #28]
 800697c:	440a      	add	r2, r1
 800697e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006982:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006986:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800698a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d132      	bne.n	80069f8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	689a      	ldr	r2, [r3, #8]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069c0:	69b9      	ldr	r1, [r7, #24]
 80069c2:	0148      	lsls	r0, r1, #5
 80069c4:	69f9      	ldr	r1, [r7, #28]
 80069c6:	4401      	add	r1, r0
 80069c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80069cc:	4313      	orrs	r3, r2
 80069ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069ee:	6113      	str	r3, [r2, #16]
 80069f0:	e062      	b.n	8006ab8 <USB_EPStartXfer+0x490>
 80069f2:	bf00      	nop
 80069f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d123      	bne.n	8006a48 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a16:	69b9      	ldr	r1, [r7, #24]
 8006a18:	0148      	lsls	r0, r1, #5
 8006a1a:	69f9      	ldr	r1, [r7, #28]
 8006a1c:	4401      	add	r1, r0
 8006a1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006a22:	4313      	orrs	r3, r2
 8006a24:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	0151      	lsls	r1, r2, #5
 8006a38:	69fa      	ldr	r2, [r7, #28]
 8006a3a:	440a      	add	r2, r1
 8006a3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a44:	6113      	str	r3, [r2, #16]
 8006a46:	e037      	b.n	8006ab8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	691a      	ldr	r2, [r3, #16]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	4413      	add	r3, r2
 8006a52:	1e5a      	subs	r2, r3, #1
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	8afa      	ldrh	r2, [r7, #22]
 8006a64:	fb03 f202 	mul.w	r2, r3, r2
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	8afb      	ldrh	r3, [r7, #22]
 8006a7c:	04d9      	lsls	r1, r3, #19
 8006a7e:	4b38      	ldr	r3, [pc, #224]	@ (8006b60 <USB_EPStartXfer+0x538>)
 8006a80:	400b      	ands	r3, r1
 8006a82:	69b9      	ldr	r1, [r7, #24]
 8006a84:	0148      	lsls	r0, r1, #5
 8006a86:	69f9      	ldr	r1, [r7, #28]
 8006a88:	4401      	add	r1, r0
 8006a8a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a9e:	691a      	ldr	r2, [r3, #16]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aa8:	69b9      	ldr	r1, [r7, #24]
 8006aaa:	0148      	lsls	r0, r1, #5
 8006aac:	69f9      	ldr	r1, [r7, #28]
 8006aae:	4401      	add	r1, r0
 8006ab0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006ab8:	79fb      	ldrb	r3, [r7, #7]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d10d      	bne.n	8006ada <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d009      	beq.n	8006ada <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	68d9      	ldr	r1, [r3, #12]
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad6:	460a      	mov	r2, r1
 8006ad8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	791b      	ldrb	r3, [r3, #4]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d128      	bne.n	8006b34 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d110      	bne.n	8006b14 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	0151      	lsls	r1, r2, #5
 8006b04:	69fa      	ldr	r2, [r7, #28]
 8006b06:	440a      	add	r2, r1
 8006b08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	e00f      	b.n	8006b34 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	0151      	lsls	r1, r2, #5
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	440a      	add	r2, r1
 8006b2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	0151      	lsls	r1, r2, #5
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	440a      	add	r2, r1
 8006b4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b4e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3720      	adds	r7, #32
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	1ff80000 	.word	0x1ff80000

08006b64 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	785b      	ldrb	r3, [r3, #1]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d14a      	bne.n	8006c18 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b9a:	f040 8086 	bne.w	8006caa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	7812      	ldrb	r2, [r2, #0]
 8006bb2:	0151      	lsls	r1, r2, #5
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	440a      	add	r2, r1
 8006bb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bbc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006bc0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	7812      	ldrb	r2, [r2, #0]
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006be0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006be4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3301      	adds	r3, #1
 8006bea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d902      	bls.n	8006bfc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	75fb      	strb	r3, [r7, #23]
          break;
 8006bfa:	e056      	b.n	8006caa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c14:	d0e7      	beq.n	8006be6 <USB_EPStopXfer+0x82>
 8006c16:	e048      	b.n	8006caa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c30:	d13b      	bne.n	8006caa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	7812      	ldrb	r2, [r2, #0]
 8006c46:	0151      	lsls	r1, r2, #5
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	440a      	add	r2, r1
 8006c4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c54:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	7812      	ldrb	r2, [r2, #0]
 8006c6a:	0151      	lsls	r1, r2, #5
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	440a      	add	r2, r1
 8006c70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d902      	bls.n	8006c90 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c8e:	e00c      	b.n	8006caa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ca8:	d0e7      	beq.n	8006c7a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	371c      	adds	r7, #28
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b089      	sub	sp, #36	@ 0x24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	71fb      	strb	r3, [r7, #7]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006cd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d123      	bne.n	8006d26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006cde:	88bb      	ldrh	r3, [r7, #4]
 8006ce0:	3303      	adds	r3, #3
 8006ce2:	089b      	lsrs	r3, r3, #2
 8006ce4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	e018      	b.n	8006d1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	031a      	lsls	r2, r3, #12
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	3301      	adds	r3, #1
 8006d04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	3301      	adds	r3, #1
 8006d16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	61bb      	str	r3, [r7, #24]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d3e2      	bcc.n	8006cec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3724      	adds	r7, #36	@ 0x24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b08b      	sub	sp, #44	@ 0x2c
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d4a:	88fb      	ldrh	r3, [r7, #6]
 8006d4c:	089b      	lsrs	r3, r3, #2
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	f003 0303 	and.w	r3, r3, #3
 8006d58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	623b      	str	r3, [r7, #32]
 8006d5e:	e014      	b.n	8006d8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	3301      	adds	r3, #1
 8006d70:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d74:	3301      	adds	r3, #1
 8006d76:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	3301      	adds	r3, #1
 8006d82:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	3301      	adds	r3, #1
 8006d88:	623b      	str	r3, [r7, #32]
 8006d8a:	6a3a      	ldr	r2, [r7, #32]
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d3e6      	bcc.n	8006d60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d92:	8bfb      	ldrh	r3, [r7, #30]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d01e      	beq.n	8006dd6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006da2:	461a      	mov	r2, r3
 8006da4:	f107 0310 	add.w	r3, r7, #16
 8006da8:	6812      	ldr	r2, [r2, #0]
 8006daa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	fa22 f303 	lsr.w	r3, r2, r3
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	701a      	strb	r2, [r3, #0]
      i++;
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006dca:	8bfb      	ldrh	r3, [r7, #30]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006dd0:	8bfb      	ldrh	r3, [r7, #30]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1ea      	bne.n	8006dac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	372c      	adds	r7, #44	@ 0x2c
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	785b      	ldrb	r3, [r3, #1]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d12c      	bne.n	8006e5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	db12      	blt.n	8006e38 <USB_EPSetStall+0x54>
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00f      	beq.n	8006e38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	0151      	lsls	r1, r2, #5
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	440a      	add	r2, r1
 8006e2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	0151      	lsls	r1, r2, #5
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	440a      	add	r2, r1
 8006e4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	e02b      	b.n	8006eb2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	db12      	blt.n	8006e92 <USB_EPSetStall+0xae>
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00f      	beq.n	8006e92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	0151      	lsls	r1, r2, #5
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	440a      	add	r2, r1
 8006e88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	0151      	lsls	r1, r2, #5
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	440a      	add	r2, r1
 8006ea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006eb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	785b      	ldrb	r3, [r3, #1]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d128      	bne.n	8006f2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ef6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006efa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	791b      	ldrb	r3, [r3, #4]
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d003      	beq.n	8006f0c <USB_EPClearStall+0x4c>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	791b      	ldrb	r3, [r3, #4]
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d138      	bne.n	8006f7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	0151      	lsls	r1, r2, #5
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	440a      	add	r2, r1
 8006f22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	e027      	b.n	8006f7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	0151      	lsls	r1, r2, #5
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	440a      	add	r2, r1
 8006f44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	791b      	ldrb	r3, [r3, #4]
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d003      	beq.n	8006f5e <USB_EPClearStall+0x9e>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	791b      	ldrb	r3, [r3, #4]
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d10f      	bne.n	8006f7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	0151      	lsls	r1, r2, #5
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	440a      	add	r2, r1
 8006f74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006faa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006fae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006fc0:	68f9      	ldr	r1, [r7, #12]
 8006fc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ff2:	f023 0303 	bic.w	r3, r3, #3
 8006ff6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007006:	f023 0302 	bic.w	r3, r3, #2
 800700a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800701a:	b480      	push	{r7}
 800701c:	b085      	sub	sp, #20
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007034:	f023 0303 	bic.w	r3, r3, #3
 8007038:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007048:	f043 0302 	orr.w	r3, r3, #2
 800704c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	4013      	ands	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007074:	68fb      	ldr	r3, [r7, #12]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	4013      	ands	r3, r2
 80070a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	0c1b      	lsrs	r3, r3, #16
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b085      	sub	sp, #20
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	4013      	ands	r3, r2
 80070d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	b29b      	uxth	r3, r3
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b085      	sub	sp, #20
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	460b      	mov	r3, r1
 80070f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	4013      	ands	r3, r2
 8007116:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007118:	68bb      	ldr	r3, [r7, #8]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007126:	b480      	push	{r7}
 8007128:	b087      	sub	sp, #28
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	460b      	mov	r3, r1
 8007130:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007148:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	fa22 f303 	lsr.w	r3, r2, r3
 8007156:	01db      	lsls	r3, r3, #7
 8007158:	b2db      	uxtb	r3, r3
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	4313      	orrs	r3, r2
 800715e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	4013      	ands	r3, r2
 8007172:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007174:	68bb      	ldr	r3, [r7, #8]
}
 8007176:	4618      	mov	r0, r3
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	f003 0301 	and.w	r3, r3, #1
}
 8007192:	4618      	mov	r0, r3
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80071bc:	f023 0307 	bic.w	r3, r3, #7
 80071c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	460b      	mov	r3, r1
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	333c      	adds	r3, #60	@ 0x3c
 80071fa:	3304      	adds	r3, #4
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	4a26      	ldr	r2, [pc, #152]	@ (800729c <USB_EP0_OutStart+0xb8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d90a      	bls.n	800721e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007214:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007218:	d101      	bne.n	800721e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	e037      	b.n	800728e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007224:	461a      	mov	r2, r3
 8007226:	2300      	movs	r3, #0
 8007228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007238:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800723c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800724c:	f043 0318 	orr.w	r3, r3, #24
 8007250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007260:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007264:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007266:	7afb      	ldrb	r3, [r7, #11]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d10f      	bne.n	800728c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007272:	461a      	mov	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007286:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800728a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	4f54300a 	.word	0x4f54300a

080072a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3301      	adds	r3, #1
 80072b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072b8:	d901      	bls.n	80072be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e01b      	b.n	80072f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	daf2      	bge.n	80072ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f043 0201 	orr.w	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3301      	adds	r3, #1
 80072da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072e2:	d901      	bls.n	80072e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e006      	b.n	80072f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d0f0      	beq.n	80072d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
	...

08007304 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007310:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007314:	f002 fc9e 	bl	8009c54 <USBD_static_malloc>
 8007318:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d109      	bne.n	8007334 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	32b0      	adds	r2, #176	@ 0xb0
 800732a:	2100      	movs	r1, #0
 800732c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007330:	2302      	movs	r3, #2
 8007332:	e0d4      	b.n	80074de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007334:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007338:	2100      	movs	r1, #0
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f003 fa5f 	bl	800a7fe <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	32b0      	adds	r2, #176	@ 0xb0
 800734a:	68f9      	ldr	r1, [r7, #12]
 800734c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	32b0      	adds	r2, #176	@ 0xb0
 800735a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	7c1b      	ldrb	r3, [r3, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d138      	bne.n	80073de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800736c:	4b5e      	ldr	r3, [pc, #376]	@ (80074e8 <USBD_CDC_Init+0x1e4>)
 800736e:	7819      	ldrb	r1, [r3, #0]
 8007370:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007374:	2202      	movs	r2, #2
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f002 fb49 	bl	8009a0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800737c:	4b5a      	ldr	r3, [pc, #360]	@ (80074e8 <USBD_CDC_Init+0x1e4>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	f003 020f 	and.w	r2, r3, #15
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	440b      	add	r3, r1
 8007390:	3324      	adds	r3, #36	@ 0x24
 8007392:	2201      	movs	r2, #1
 8007394:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007396:	4b55      	ldr	r3, [pc, #340]	@ (80074ec <USBD_CDC_Init+0x1e8>)
 8007398:	7819      	ldrb	r1, [r3, #0]
 800739a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800739e:	2202      	movs	r2, #2
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f002 fb34 	bl	8009a0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80073a6:	4b51      	ldr	r3, [pc, #324]	@ (80074ec <USBD_CDC_Init+0x1e8>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f003 020f 	and.w	r2, r3, #15
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	440b      	add	r3, r1
 80073ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80073be:	2201      	movs	r2, #1
 80073c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80073c2:	4b4b      	ldr	r3, [pc, #300]	@ (80074f0 <USBD_CDC_Init+0x1ec>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	f003 020f 	and.w	r2, r3, #15
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	4613      	mov	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	440b      	add	r3, r1
 80073d6:	3326      	adds	r3, #38	@ 0x26
 80073d8:	2210      	movs	r2, #16
 80073da:	801a      	strh	r2, [r3, #0]
 80073dc:	e035      	b.n	800744a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80073de:	4b42      	ldr	r3, [pc, #264]	@ (80074e8 <USBD_CDC_Init+0x1e4>)
 80073e0:	7819      	ldrb	r1, [r3, #0]
 80073e2:	2340      	movs	r3, #64	@ 0x40
 80073e4:	2202      	movs	r2, #2
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f002 fb11 	bl	8009a0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80073ec:	4b3e      	ldr	r3, [pc, #248]	@ (80074e8 <USBD_CDC_Init+0x1e4>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	f003 020f 	and.w	r2, r3, #15
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	4613      	mov	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	440b      	add	r3, r1
 8007400:	3324      	adds	r3, #36	@ 0x24
 8007402:	2201      	movs	r2, #1
 8007404:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007406:	4b39      	ldr	r3, [pc, #228]	@ (80074ec <USBD_CDC_Init+0x1e8>)
 8007408:	7819      	ldrb	r1, [r3, #0]
 800740a:	2340      	movs	r3, #64	@ 0x40
 800740c:	2202      	movs	r2, #2
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f002 fafd 	bl	8009a0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007414:	4b35      	ldr	r3, [pc, #212]	@ (80074ec <USBD_CDC_Init+0x1e8>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	f003 020f 	and.w	r2, r3, #15
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	440b      	add	r3, r1
 8007428:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800742c:	2201      	movs	r2, #1
 800742e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007430:	4b2f      	ldr	r3, [pc, #188]	@ (80074f0 <USBD_CDC_Init+0x1ec>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	f003 020f 	and.w	r2, r3, #15
 8007438:	6879      	ldr	r1, [r7, #4]
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	440b      	add	r3, r1
 8007444:	3326      	adds	r3, #38	@ 0x26
 8007446:	2210      	movs	r2, #16
 8007448:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800744a:	4b29      	ldr	r3, [pc, #164]	@ (80074f0 <USBD_CDC_Init+0x1ec>)
 800744c:	7819      	ldrb	r1, [r3, #0]
 800744e:	2308      	movs	r3, #8
 8007450:	2203      	movs	r2, #3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f002 fadb 	bl	8009a0e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007458:	4b25      	ldr	r3, [pc, #148]	@ (80074f0 <USBD_CDC_Init+0x1ec>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	f003 020f 	and.w	r2, r3, #15
 8007460:	6879      	ldr	r1, [r7, #4]
 8007462:	4613      	mov	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	440b      	add	r3, r1
 800746c:	3324      	adds	r3, #36	@ 0x24
 800746e:	2201      	movs	r2, #1
 8007470:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	33b0      	adds	r3, #176	@ 0xb0
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80074a8:	2302      	movs	r3, #2
 80074aa:	e018      	b.n	80074de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	7c1b      	ldrb	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10a      	bne.n	80074ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074b4:	4b0d      	ldr	r3, [pc, #52]	@ (80074ec <USBD_CDC_Init+0x1e8>)
 80074b6:	7819      	ldrb	r1, [r3, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80074be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f002 fb92 	bl	8009bec <USBD_LL_PrepareReceive>
 80074c8:	e008      	b.n	80074dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074ca:	4b08      	ldr	r3, [pc, #32]	@ (80074ec <USBD_CDC_Init+0x1e8>)
 80074cc:	7819      	ldrb	r1, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80074d4:	2340      	movs	r3, #64	@ 0x40
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f002 fb88 	bl	8009bec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000093 	.word	0x20000093
 80074ec:	20000094 	.word	0x20000094
 80074f0:	20000095 	.word	0x20000095

080074f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007500:	4b3a      	ldr	r3, [pc, #232]	@ (80075ec <USBD_CDC_DeInit+0xf8>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f002 faa7 	bl	8009a5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800750c:	4b37      	ldr	r3, [pc, #220]	@ (80075ec <USBD_CDC_DeInit+0xf8>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	f003 020f 	and.w	r2, r3, #15
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	4613      	mov	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	440b      	add	r3, r1
 8007520:	3324      	adds	r3, #36	@ 0x24
 8007522:	2200      	movs	r2, #0
 8007524:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007526:	4b32      	ldr	r3, [pc, #200]	@ (80075f0 <USBD_CDC_DeInit+0xfc>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f002 fa94 	bl	8009a5a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007532:	4b2f      	ldr	r3, [pc, #188]	@ (80075f0 <USBD_CDC_DeInit+0xfc>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	f003 020f 	and.w	r2, r3, #15
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800754a:	2200      	movs	r2, #0
 800754c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800754e:	4b29      	ldr	r3, [pc, #164]	@ (80075f4 <USBD_CDC_DeInit+0x100>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f002 fa80 	bl	8009a5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800755a:	4b26      	ldr	r3, [pc, #152]	@ (80075f4 <USBD_CDC_DeInit+0x100>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	f003 020f 	and.w	r2, r3, #15
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	440b      	add	r3, r1
 800756e:	3324      	adds	r3, #36	@ 0x24
 8007570:	2200      	movs	r2, #0
 8007572:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007574:	4b1f      	ldr	r3, [pc, #124]	@ (80075f4 <USBD_CDC_DeInit+0x100>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	f003 020f 	and.w	r2, r3, #15
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	440b      	add	r3, r1
 8007588:	3326      	adds	r3, #38	@ 0x26
 800758a:	2200      	movs	r2, #0
 800758c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	32b0      	adds	r2, #176	@ 0xb0
 8007598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01f      	beq.n	80075e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	33b0      	adds	r3, #176	@ 0xb0
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	32b0      	adds	r2, #176	@ 0xb0
 80075be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f002 fb54 	bl	8009c70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	32b0      	adds	r2, #176	@ 0xb0
 80075d2:	2100      	movs	r1, #0
 80075d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20000093 	.word	0x20000093
 80075f0:	20000094 	.word	0x20000094
 80075f4:	20000095 	.word	0x20000095

080075f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	32b0      	adds	r2, #176	@ 0xb0
 800760c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007610:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007624:	2303      	movs	r3, #3
 8007626:	e0bf      	b.n	80077a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007630:	2b00      	cmp	r3, #0
 8007632:	d050      	beq.n	80076d6 <USBD_CDC_Setup+0xde>
 8007634:	2b20      	cmp	r3, #32
 8007636:	f040 80af 	bne.w	8007798 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	88db      	ldrh	r3, [r3, #6]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d03a      	beq.n	80076b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	b25b      	sxtb	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	da1b      	bge.n	8007684 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	33b0      	adds	r3, #176	@ 0xb0
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007662:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	88d2      	ldrh	r2, [r2, #6]
 8007668:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	88db      	ldrh	r3, [r3, #6]
 800766e:	2b07      	cmp	r3, #7
 8007670:	bf28      	it	cs
 8007672:	2307      	movcs	r3, #7
 8007674:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	89fa      	ldrh	r2, [r7, #14]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 fd93 	bl	80091a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007682:	e090      	b.n	80077a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	785a      	ldrb	r2, [r3, #1]
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	88db      	ldrh	r3, [r3, #6]
 8007692:	2b3f      	cmp	r3, #63	@ 0x3f
 8007694:	d803      	bhi.n	800769e <USBD_CDC_Setup+0xa6>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	88db      	ldrh	r3, [r3, #6]
 800769a:	b2da      	uxtb	r2, r3
 800769c:	e000      	b.n	80076a0 <USBD_CDC_Setup+0xa8>
 800769e:	2240      	movs	r2, #64	@ 0x40
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80076a6:	6939      	ldr	r1, [r7, #16]
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80076ae:	461a      	mov	r2, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 fda5 	bl	8009200 <USBD_CtlPrepareRx>
      break;
 80076b6:	e076      	b.n	80077a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	33b0      	adds	r3, #176	@ 0xb0
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	7850      	ldrb	r0, [r2, #1]
 80076ce:	2200      	movs	r2, #0
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	4798      	blx	r3
      break;
 80076d4:	e067      	b.n	80077a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	785b      	ldrb	r3, [r3, #1]
 80076da:	2b0b      	cmp	r3, #11
 80076dc:	d851      	bhi.n	8007782 <USBD_CDC_Setup+0x18a>
 80076de:	a201      	add	r2, pc, #4	@ (adr r2, 80076e4 <USBD_CDC_Setup+0xec>)
 80076e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e4:	08007715 	.word	0x08007715
 80076e8:	08007791 	.word	0x08007791
 80076ec:	08007783 	.word	0x08007783
 80076f0:	08007783 	.word	0x08007783
 80076f4:	08007783 	.word	0x08007783
 80076f8:	08007783 	.word	0x08007783
 80076fc:	08007783 	.word	0x08007783
 8007700:	08007783 	.word	0x08007783
 8007704:	08007783 	.word	0x08007783
 8007708:	08007783 	.word	0x08007783
 800770c:	0800773f 	.word	0x0800773f
 8007710:	08007769 	.word	0x08007769
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b03      	cmp	r3, #3
 800771e:	d107      	bne.n	8007730 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007720:	f107 030a 	add.w	r3, r7, #10
 8007724:	2202      	movs	r2, #2
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 fd3d 	bl	80091a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800772e:	e032      	b.n	8007796 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 fcbb 	bl	80090ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007738:	2303      	movs	r3, #3
 800773a:	75fb      	strb	r3, [r7, #23]
          break;
 800773c:	e02b      	b.n	8007796 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b03      	cmp	r3, #3
 8007748:	d107      	bne.n	800775a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800774a:	f107 030d 	add.w	r3, r7, #13
 800774e:	2201      	movs	r2, #1
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 fd28 	bl	80091a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007758:	e01d      	b.n	8007796 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 fca6 	bl	80090ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007762:	2303      	movs	r3, #3
 8007764:	75fb      	strb	r3, [r7, #23]
          break;
 8007766:	e016      	b.n	8007796 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b03      	cmp	r3, #3
 8007772:	d00f      	beq.n	8007794 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f001 fc99 	bl	80090ae <USBD_CtlError>
            ret = USBD_FAIL;
 800777c:	2303      	movs	r3, #3
 800777e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007780:	e008      	b.n	8007794 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 fc92 	bl	80090ae <USBD_CtlError>
          ret = USBD_FAIL;
 800778a:	2303      	movs	r3, #3
 800778c:	75fb      	strb	r3, [r7, #23]
          break;
 800778e:	e002      	b.n	8007796 <USBD_CDC_Setup+0x19e>
          break;
 8007790:	bf00      	nop
 8007792:	e008      	b.n	80077a6 <USBD_CDC_Setup+0x1ae>
          break;
 8007794:	bf00      	nop
      }
      break;
 8007796:	e006      	b.n	80077a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 fc87 	bl	80090ae <USBD_CtlError>
      ret = USBD_FAIL;
 80077a0:	2303      	movs	r3, #3
 80077a2:	75fb      	strb	r3, [r7, #23]
      break;
 80077a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80077c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	32b0      	adds	r2, #176	@ 0xb0
 80077ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e065      	b.n	80078a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	32b0      	adds	r2, #176	@ 0xb0
 80077e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80077ea:	78fb      	ldrb	r3, [r7, #3]
 80077ec:	f003 020f 	and.w	r2, r3, #15
 80077f0:	6879      	ldr	r1, [r7, #4]
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	440b      	add	r3, r1
 80077fc:	3318      	adds	r3, #24
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d02f      	beq.n	8007864 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	f003 020f 	and.w	r2, r3, #15
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	4613      	mov	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	440b      	add	r3, r1
 8007816:	3318      	adds	r3, #24
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	f003 010f 	and.w	r1, r3, #15
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	460b      	mov	r3, r1
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	440b      	add	r3, r1
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4403      	add	r3, r0
 800782c:	331c      	adds	r3, #28
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	fbb2 f1f3 	udiv	r1, r2, r3
 8007834:	fb01 f303 	mul.w	r3, r1, r3
 8007838:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800783a:	2b00      	cmp	r3, #0
 800783c:	d112      	bne.n	8007864 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	f003 020f 	and.w	r2, r3, #15
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	4613      	mov	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4413      	add	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	440b      	add	r3, r1
 8007850:	3318      	adds	r3, #24
 8007852:	2200      	movs	r2, #0
 8007854:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007856:	78f9      	ldrb	r1, [r7, #3]
 8007858:	2300      	movs	r3, #0
 800785a:	2200      	movs	r2, #0
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f002 f9a4 	bl	8009baa <USBD_LL_Transmit>
 8007862:	e01f      	b.n	80078a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	33b0      	adds	r3, #176	@ 0xb0
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d010      	beq.n	80078a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	33b0      	adds	r3, #176	@ 0xb0
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80078a0:	78fa      	ldrb	r2, [r7, #3]
 80078a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	460b      	mov	r3, r1
 80078b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	32b0      	adds	r2, #176	@ 0xb0
 80078c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	32b0      	adds	r2, #176	@ 0xb0
 80078d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80078dc:	2303      	movs	r3, #3
 80078de:	e01a      	b.n	8007916 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f002 f9a2 	bl	8009c2e <USBD_LL_GetRxDataSize>
 80078ea:	4602      	mov	r2, r0
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	33b0      	adds	r3, #176	@ 0xb0
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007910:	4611      	mov	r1, r2
 8007912:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	32b0      	adds	r2, #176	@ 0xb0
 8007930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007934:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	e024      	b.n	800798a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	33b0      	adds	r3, #176	@ 0xb0
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d019      	beq.n	8007988 <USBD_CDC_EP0_RxReady+0x6a>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800795a:	2bff      	cmp	r3, #255	@ 0xff
 800795c:	d014      	beq.n	8007988 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	33b0      	adds	r3, #176	@ 0xb0
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007976:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800797e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	22ff      	movs	r2, #255	@ 0xff
 8007984:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800799c:	2182      	movs	r1, #130	@ 0x82
 800799e:	4818      	ldr	r0, [pc, #96]	@ (8007a00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079a0:	f000 fd4f 	bl	8008442 <USBD_GetEpDesc>
 80079a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079a6:	2101      	movs	r1, #1
 80079a8:	4815      	ldr	r0, [pc, #84]	@ (8007a00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079aa:	f000 fd4a 	bl	8008442 <USBD_GetEpDesc>
 80079ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079b0:	2181      	movs	r1, #129	@ 0x81
 80079b2:	4813      	ldr	r0, [pc, #76]	@ (8007a00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079b4:	f000 fd45 	bl	8008442 <USBD_GetEpDesc>
 80079b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2210      	movs	r2, #16
 80079c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d006      	beq.n	80079da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079d4:	711a      	strb	r2, [r3, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d006      	beq.n	80079ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079e8:	711a      	strb	r2, [r3, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2243      	movs	r2, #67	@ 0x43
 80079f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079f4:	4b02      	ldr	r3, [pc, #8]	@ (8007a00 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000050 	.word	0x20000050

08007a04 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a0c:	2182      	movs	r1, #130	@ 0x82
 8007a0e:	4818      	ldr	r0, [pc, #96]	@ (8007a70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a10:	f000 fd17 	bl	8008442 <USBD_GetEpDesc>
 8007a14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a16:	2101      	movs	r1, #1
 8007a18:	4815      	ldr	r0, [pc, #84]	@ (8007a70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a1a:	f000 fd12 	bl	8008442 <USBD_GetEpDesc>
 8007a1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a20:	2181      	movs	r1, #129	@ 0x81
 8007a22:	4813      	ldr	r0, [pc, #76]	@ (8007a70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a24:	f000 fd0d 	bl	8008442 <USBD_GetEpDesc>
 8007a28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	2210      	movs	r2, #16
 8007a34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d006      	beq.n	8007a4a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	711a      	strb	r2, [r3, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f042 0202 	orr.w	r2, r2, #2
 8007a48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d006      	beq.n	8007a5e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	711a      	strb	r2, [r3, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f042 0202 	orr.w	r2, r2, #2
 8007a5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2243      	movs	r2, #67	@ 0x43
 8007a62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a64:	4b02      	ldr	r3, [pc, #8]	@ (8007a70 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20000050 	.word	0x20000050

08007a74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a7c:	2182      	movs	r1, #130	@ 0x82
 8007a7e:	4818      	ldr	r0, [pc, #96]	@ (8007ae0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a80:	f000 fcdf 	bl	8008442 <USBD_GetEpDesc>
 8007a84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a86:	2101      	movs	r1, #1
 8007a88:	4815      	ldr	r0, [pc, #84]	@ (8007ae0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a8a:	f000 fcda 	bl	8008442 <USBD_GetEpDesc>
 8007a8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a90:	2181      	movs	r1, #129	@ 0x81
 8007a92:	4813      	ldr	r0, [pc, #76]	@ (8007ae0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a94:	f000 fcd5 	bl	8008442 <USBD_GetEpDesc>
 8007a98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2210      	movs	r2, #16
 8007aa4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d006      	beq.n	8007aba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ab4:	711a      	strb	r2, [r3, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d006      	beq.n	8007ace <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ac8:	711a      	strb	r2, [r3, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2243      	movs	r2, #67	@ 0x43
 8007ad2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ad4:	4b02      	ldr	r3, [pc, #8]	@ (8007ae0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20000050 	.word	0x20000050

08007ae4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	220a      	movs	r2, #10
 8007af0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007af2:	4b03      	ldr	r3, [pc, #12]	@ (8007b00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	2000000c 	.word	0x2000000c

08007b04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e009      	b.n	8007b2c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	33b0      	adds	r3, #176	@ 0xb0
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	32b0      	adds	r2, #176	@ 0xb0
 8007b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b52:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e008      	b.n	8007b70 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	371c      	adds	r7, #28
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	32b0      	adds	r2, #176	@ 0xb0
 8007b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e004      	b.n	8007baa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
	...

08007bb8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	32b0      	adds	r2, #176	@ 0xb0
 8007bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bce:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e025      	b.n	8007c2a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d11f      	bne.n	8007c28 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007bf0:	4b10      	ldr	r3, [pc, #64]	@ (8007c34 <USBD_CDC_TransmitPacket+0x7c>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	f003 020f 	and.w	r2, r3, #15
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4403      	add	r3, r0
 8007c0a:	3318      	adds	r3, #24
 8007c0c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007c0e:	4b09      	ldr	r3, [pc, #36]	@ (8007c34 <USBD_CDC_TransmitPacket+0x7c>)
 8007c10:	7819      	ldrb	r1, [r3, #0]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 ffc3 	bl	8009baa <USBD_LL_Transmit>

    ret = USBD_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20000093 	.word	0x20000093

08007c38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	32b0      	adds	r2, #176	@ 0xb0
 8007c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	32b0      	adds	r2, #176	@ 0xb0
 8007c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e018      	b.n	8007c98 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	7c1b      	ldrb	r3, [r3, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10a      	bne.n	8007c84 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca0 <USBD_CDC_ReceivePacket+0x68>)
 8007c70:	7819      	ldrb	r1, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f001 ffb5 	bl	8009bec <USBD_LL_PrepareReceive>
 8007c82:	e008      	b.n	8007c96 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c84:	4b06      	ldr	r3, [pc, #24]	@ (8007ca0 <USBD_CDC_ReceivePacket+0x68>)
 8007c86:	7819      	ldrb	r1, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c8e:	2340      	movs	r3, #64	@ 0x40
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 ffab 	bl	8009bec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20000094 	.word	0x20000094

08007ca4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e01f      	b.n	8007cfc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	79fa      	ldrb	r2, [r7, #7]
 8007cee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f001 fe25 	bl	8009940 <USBD_LL_Init>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e025      	b.n	8007d68 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	32ae      	adds	r2, #174	@ 0xae
 8007d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00f      	beq.n	8007d58 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	32ae      	adds	r2, #174	@ 0xae
 8007d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d48:	f107 020e 	add.w	r2, r7, #14
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4798      	blx	r3
 8007d50:	4602      	mov	r2, r0
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007d5e:	1c5a      	adds	r2, r3, #1
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 fe2d 	bl	80099d8 <USBD_LL_Start>
 8007d7e:	4603      	mov	r3, r0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d90:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	460b      	mov	r3, r1
 8007da8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d009      	beq.n	8007dcc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	78fa      	ldrb	r2, [r7, #3]
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	4798      	blx	r3
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	78fa      	ldrb	r2, [r7, #3]
 8007df0:	4611      	mov	r1, r2
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	4798      	blx	r3
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f001 f90c 	bl	800903a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007e30:	461a      	mov	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007e3e:	f003 031f 	and.w	r3, r3, #31
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d01a      	beq.n	8007e7c <USBD_LL_SetupStage+0x72>
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d822      	bhi.n	8007e90 <USBD_LL_SetupStage+0x86>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <USBD_LL_SetupStage+0x4a>
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d00a      	beq.n	8007e68 <USBD_LL_SetupStage+0x5e>
 8007e52:	e01d      	b.n	8007e90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fb63 	bl	8008528 <USBD_StdDevReq>
 8007e62:	4603      	mov	r3, r0
 8007e64:	73fb      	strb	r3, [r7, #15]
      break;
 8007e66:	e020      	b.n	8007eaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fbcb 	bl	800860c <USBD_StdItfReq>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]
      break;
 8007e7a:	e016      	b.n	8007eaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fc2d 	bl	80086e4 <USBD_StdEPReq>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e8e:	e00c      	b.n	8007eaa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007e96:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fdfa 	bl	8009a98 <USBD_LL_StallEP>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea8:	bf00      	nop
  }

  return ret;
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007ec6:	7afb      	ldrb	r3, [r7, #11]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d16e      	bne.n	8007faa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007ed2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	f040 8098 	bne.w	8008010 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d913      	bls.n	8007f14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	689a      	ldr	r2, [r3, #8]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	1ad2      	subs	r2, r2, r3
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	4293      	cmp	r3, r2
 8007f04:	bf28      	it	cs
 8007f06:	4613      	movcs	r3, r2
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f001 f994 	bl	800923a <USBD_CtlContinueRx>
 8007f12:	e07d      	b.n	8008010 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f1a:	f003 031f 	and.w	r3, r3, #31
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d014      	beq.n	8007f4c <USBD_LL_DataOutStage+0x98>
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d81d      	bhi.n	8007f62 <USBD_LL_DataOutStage+0xae>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <USBD_LL_DataOutStage+0x7c>
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d003      	beq.n	8007f36 <USBD_LL_DataOutStage+0x82>
 8007f2e:	e018      	b.n	8007f62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	75bb      	strb	r3, [r7, #22]
            break;
 8007f34:	e018      	b.n	8007f68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	4619      	mov	r1, r3
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 fa64 	bl	800840e <USBD_CoreFindIF>
 8007f46:	4603      	mov	r3, r0
 8007f48:	75bb      	strb	r3, [r7, #22]
            break;
 8007f4a:	e00d      	b.n	8007f68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	4619      	mov	r1, r3
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 fa66 	bl	8008428 <USBD_CoreFindEP>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	75bb      	strb	r3, [r7, #22]
            break;
 8007f60:	e002      	b.n	8007f68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	75bb      	strb	r3, [r7, #22]
            break;
 8007f66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007f68:	7dbb      	ldrb	r3, [r7, #22]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d119      	bne.n	8007fa2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d113      	bne.n	8007fa2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007f7a:	7dba      	ldrb	r2, [r7, #22]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	32ae      	adds	r2, #174	@ 0xae
 8007f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00b      	beq.n	8007fa2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007f8a:	7dba      	ldrb	r2, [r7, #22]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007f92:	7dba      	ldrb	r2, [r7, #22]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	32ae      	adds	r2, #174	@ 0xae
 8007f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f001 f95a 	bl	800925c <USBD_CtlSendStatus>
 8007fa8:	e032      	b.n	8008010 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007faa:	7afb      	ldrb	r3, [r7, #11]
 8007fac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fa37 	bl	8008428 <USBD_CoreFindEP>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fbe:	7dbb      	ldrb	r3, [r7, #22]
 8007fc0:	2bff      	cmp	r3, #255	@ 0xff
 8007fc2:	d025      	beq.n	8008010 <USBD_LL_DataOutStage+0x15c>
 8007fc4:	7dbb      	ldrb	r3, [r7, #22]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d122      	bne.n	8008010 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d117      	bne.n	8008006 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007fd6:	7dba      	ldrb	r2, [r7, #22]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	32ae      	adds	r2, #174	@ 0xae
 8007fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00f      	beq.n	8008006 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007fe6:	7dba      	ldrb	r2, [r7, #22]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007fee:	7dba      	ldrb	r2, [r7, #22]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	32ae      	adds	r2, #174	@ 0xae
 8007ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	7afa      	ldrb	r2, [r7, #11]
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	4798      	blx	r3
 8008002:	4603      	mov	r3, r0
 8008004:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	e000      	b.n	8008012 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b086      	sub	sp, #24
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	460b      	mov	r3, r1
 8008024:	607a      	str	r2, [r7, #4]
 8008026:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008028:	7afb      	ldrb	r3, [r7, #11]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d16f      	bne.n	800810e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3314      	adds	r3, #20
 8008032:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800803a:	2b02      	cmp	r3, #2
 800803c:	d15a      	bne.n	80080f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	689a      	ldr	r2, [r3, #8]
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	429a      	cmp	r2, r3
 8008048:	d914      	bls.n	8008074 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	689a      	ldr	r2, [r3, #8]
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	1ad2      	subs	r2, r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	461a      	mov	r2, r3
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f001 f8bc 	bl	80091de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008066:	2300      	movs	r3, #0
 8008068:	2200      	movs	r2, #0
 800806a:	2100      	movs	r1, #0
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f001 fdbd 	bl	8009bec <USBD_LL_PrepareReceive>
 8008072:	e03f      	b.n	80080f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	429a      	cmp	r2, r3
 800807e:	d11c      	bne.n	80080ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008088:	429a      	cmp	r2, r3
 800808a:	d316      	bcc.n	80080ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008096:	429a      	cmp	r2, r3
 8008098:	d20f      	bcs.n	80080ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800809a:	2200      	movs	r2, #0
 800809c:	2100      	movs	r1, #0
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f001 f89d 	bl	80091de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080ac:	2300      	movs	r3, #0
 80080ae:	2200      	movs	r2, #0
 80080b0:	2100      	movs	r1, #0
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f001 fd9a 	bl	8009bec <USBD_LL_PrepareReceive>
 80080b8:	e01c      	b.n	80080f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d10f      	bne.n	80080e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d009      	beq.n	80080e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80080e6:	2180      	movs	r1, #128	@ 0x80
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f001 fcd5 	bl	8009a98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f001 f8c7 	bl	8009282 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d03a      	beq.n	8008174 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7ff fe42 	bl	8007d88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800810c:	e032      	b.n	8008174 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800810e:	7afb      	ldrb	r3, [r7, #11]
 8008110:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008114:	b2db      	uxtb	r3, r3
 8008116:	4619      	mov	r1, r3
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 f985 	bl	8008428 <USBD_CoreFindEP>
 800811e:	4603      	mov	r3, r0
 8008120:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	2bff      	cmp	r3, #255	@ 0xff
 8008126:	d025      	beq.n	8008174 <USBD_LL_DataInStage+0x15a>
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d122      	bne.n	8008174 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b03      	cmp	r3, #3
 8008138:	d11c      	bne.n	8008174 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800813a:	7dfa      	ldrb	r2, [r7, #23]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	32ae      	adds	r2, #174	@ 0xae
 8008140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d014      	beq.n	8008174 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800814a:	7dfa      	ldrb	r2, [r7, #23]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008152:	7dfa      	ldrb	r2, [r7, #23]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	32ae      	adds	r2, #174	@ 0xae
 8008158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	7afa      	ldrb	r2, [r7, #11]
 8008160:	4611      	mov	r1, r2
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	4798      	blx	r3
 8008166:	4603      	mov	r3, r0
 8008168:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800816a:	7dbb      	ldrb	r3, [r7, #22]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008170:	7dbb      	ldrb	r3, [r7, #22]
 8008172:	e000      	b.n	8008176 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d014      	beq.n	80081e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00e      	beq.n	80081e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	6852      	ldr	r2, [r2, #4]
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	4611      	mov	r1, r2
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80081e0:	2303      	movs	r3, #3
 80081e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081e4:	2340      	movs	r3, #64	@ 0x40
 80081e6:	2200      	movs	r2, #0
 80081e8:	2100      	movs	r1, #0
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f001 fc0f 	bl	8009a0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2240      	movs	r2, #64	@ 0x40
 80081fc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008200:	2340      	movs	r3, #64	@ 0x40
 8008202:	2200      	movs	r2, #0
 8008204:	2180      	movs	r1, #128	@ 0x80
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 fc01 	bl	8009a0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2240      	movs	r2, #64	@ 0x40
 8008216:	621a      	str	r2, [r3, #32]

  return ret;
 8008218:	7bfb      	ldrb	r3, [r7, #15]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	78fa      	ldrb	r2, [r7, #3]
 8008232:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b04      	cmp	r3, #4
 8008254:	d006      	beq.n	8008264 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800825c:	b2da      	uxtb	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2204      	movs	r2, #4
 8008268:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b04      	cmp	r3, #4
 800828c:	d106      	bne.n	800829c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008294:	b2da      	uxtb	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d110      	bne.n	80082e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d005      	beq.n	80082e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	460b      	mov	r3, r1
 80082f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	32ae      	adds	r2, #174	@ 0xae
 8008300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008308:	2303      	movs	r3, #3
 800830a:	e01c      	b.n	8008346 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b03      	cmp	r3, #3
 8008316:	d115      	bne.n	8008344 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	32ae      	adds	r2, #174	@ 0xae
 8008322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00b      	beq.n	8008344 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	32ae      	adds	r2, #174	@ 0xae
 8008336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	78fa      	ldrb	r2, [r7, #3]
 800833e:	4611      	mov	r1, r2
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	460b      	mov	r3, r1
 8008358:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	32ae      	adds	r2, #174	@ 0xae
 8008364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800836c:	2303      	movs	r3, #3
 800836e:	e01c      	b.n	80083aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b03      	cmp	r3, #3
 800837a:	d115      	bne.n	80083a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	32ae      	adds	r2, #174	@ 0xae
 8008386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00b      	beq.n	80083a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	32ae      	adds	r2, #174	@ 0xae
 800839a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a0:	78fa      	ldrb	r2, [r7, #3]
 80083a2:	4611      	mov	r1, r2
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00e      	beq.n	8008404 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	6852      	ldr	r2, [r2, #4]
 80083f2:	b2d2      	uxtb	r2, r2
 80083f4:	4611      	mov	r1, r2
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	4798      	blx	r3
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008400:	2303      	movs	r3, #3
 8008402:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008404:	7bfb      	ldrb	r3, [r7, #15]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	460b      	mov	r3, r1
 8008418:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800841a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800841c:	4618      	mov	r0, r3
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	460b      	mov	r3, r1
 8008432:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008434:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008436:	4618      	mov	r0, r3
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b086      	sub	sp, #24
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008456:	2300      	movs	r3, #0
 8008458:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	885b      	ldrh	r3, [r3, #2]
 800845e:	b29b      	uxth	r3, r3
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	7812      	ldrb	r2, [r2, #0]
 8008464:	4293      	cmp	r3, r2
 8008466:	d91f      	bls.n	80084a8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800846e:	e013      	b.n	8008498 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008470:	f107 030a 	add.w	r3, r7, #10
 8008474:	4619      	mov	r1, r3
 8008476:	6978      	ldr	r0, [r7, #20]
 8008478:	f000 f81b 	bl	80084b2 <USBD_GetNextDesc>
 800847c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	2b05      	cmp	r3, #5
 8008484:	d108      	bne.n	8008498 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	789b      	ldrb	r3, [r3, #2]
 800848e:	78fa      	ldrb	r2, [r7, #3]
 8008490:	429a      	cmp	r2, r3
 8008492:	d008      	beq.n	80084a6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008494:	2300      	movs	r3, #0
 8008496:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	885b      	ldrh	r3, [r3, #2]
 800849c:	b29a      	uxth	r2, r3
 800849e:	897b      	ldrh	r3, [r7, #10]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d8e5      	bhi.n	8008470 <USBD_GetEpDesc+0x2e>
 80084a4:	e000      	b.n	80084a8 <USBD_GetEpDesc+0x66>
          break;
 80084a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80084a8:	693b      	ldr	r3, [r7, #16]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b085      	sub	sp, #20
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	7812      	ldrb	r2, [r2, #0]
 80084c8:	4413      	add	r3, r2
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4413      	add	r3, r2
 80084da:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80084dc:	68fb      	ldr	r3, [r7, #12]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b087      	sub	sp, #28
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	3301      	adds	r3, #1
 8008500:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008508:	8a3b      	ldrh	r3, [r7, #16]
 800850a:	021b      	lsls	r3, r3, #8
 800850c:	b21a      	sxth	r2, r3
 800850e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008512:	4313      	orrs	r3, r2
 8008514:	b21b      	sxth	r3, r3
 8008516:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008518:	89fb      	ldrh	r3, [r7, #14]
}
 800851a:	4618      	mov	r0, r3
 800851c:	371c      	adds	r7, #28
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
	...

08008528 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800853e:	2b40      	cmp	r3, #64	@ 0x40
 8008540:	d005      	beq.n	800854e <USBD_StdDevReq+0x26>
 8008542:	2b40      	cmp	r3, #64	@ 0x40
 8008544:	d857      	bhi.n	80085f6 <USBD_StdDevReq+0xce>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00f      	beq.n	800856a <USBD_StdDevReq+0x42>
 800854a:	2b20      	cmp	r3, #32
 800854c:	d153      	bne.n	80085f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	32ae      	adds	r2, #174	@ 0xae
 8008558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	4798      	blx	r3
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]
      break;
 8008568:	e04a      	b.n	8008600 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	785b      	ldrb	r3, [r3, #1]
 800856e:	2b09      	cmp	r3, #9
 8008570:	d83b      	bhi.n	80085ea <USBD_StdDevReq+0xc2>
 8008572:	a201      	add	r2, pc, #4	@ (adr r2, 8008578 <USBD_StdDevReq+0x50>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	080085cd 	.word	0x080085cd
 800857c:	080085e1 	.word	0x080085e1
 8008580:	080085eb 	.word	0x080085eb
 8008584:	080085d7 	.word	0x080085d7
 8008588:	080085eb 	.word	0x080085eb
 800858c:	080085ab 	.word	0x080085ab
 8008590:	080085a1 	.word	0x080085a1
 8008594:	080085eb 	.word	0x080085eb
 8008598:	080085c3 	.word	0x080085c3
 800859c:	080085b5 	.word	0x080085b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fa3c 	bl	8008a20 <USBD_GetDescriptor>
          break;
 80085a8:	e024      	b.n	80085f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fba1 	bl	8008cf4 <USBD_SetAddress>
          break;
 80085b2:	e01f      	b.n	80085f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fbe0 	bl	8008d7c <USBD_SetConfig>
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]
          break;
 80085c0:	e018      	b.n	80085f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fc83 	bl	8008ed0 <USBD_GetConfig>
          break;
 80085ca:	e013      	b.n	80085f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fcb4 	bl	8008f3c <USBD_GetStatus>
          break;
 80085d4:	e00e      	b.n	80085f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fce3 	bl	8008fa4 <USBD_SetFeature>
          break;
 80085de:	e009      	b.n	80085f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fd07 	bl	8008ff6 <USBD_ClrFeature>
          break;
 80085e8:	e004      	b.n	80085f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fd5e 	bl	80090ae <USBD_CtlError>
          break;
 80085f2:	bf00      	nop
      }
      break;
 80085f4:	e004      	b.n	8008600 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fd58 	bl	80090ae <USBD_CtlError>
      break;
 80085fe:	bf00      	nop
  }

  return ret;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop

0800860c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008622:	2b40      	cmp	r3, #64	@ 0x40
 8008624:	d005      	beq.n	8008632 <USBD_StdItfReq+0x26>
 8008626:	2b40      	cmp	r3, #64	@ 0x40
 8008628:	d852      	bhi.n	80086d0 <USBD_StdItfReq+0xc4>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <USBD_StdItfReq+0x26>
 800862e:	2b20      	cmp	r3, #32
 8008630:	d14e      	bne.n	80086d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008638:	b2db      	uxtb	r3, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	2b02      	cmp	r3, #2
 800863e:	d840      	bhi.n	80086c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	889b      	ldrh	r3, [r3, #4]
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b01      	cmp	r3, #1
 8008648:	d836      	bhi.n	80086b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	889b      	ldrh	r3, [r3, #4]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7ff fedb 	bl	800840e <USBD_CoreFindIF>
 8008658:	4603      	mov	r3, r0
 800865a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	2bff      	cmp	r3, #255	@ 0xff
 8008660:	d01d      	beq.n	800869e <USBD_StdItfReq+0x92>
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d11a      	bne.n	800869e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008668:	7bba      	ldrb	r2, [r7, #14]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	32ae      	adds	r2, #174	@ 0xae
 800866e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00f      	beq.n	8008698 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008678:	7bba      	ldrb	r2, [r7, #14]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008680:	7bba      	ldrb	r2, [r7, #14]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	32ae      	adds	r2, #174	@ 0xae
 8008686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	4798      	blx	r3
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008696:	e004      	b.n	80086a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008698:	2303      	movs	r3, #3
 800869a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800869c:	e001      	b.n	80086a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800869e:	2303      	movs	r3, #3
 80086a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	88db      	ldrh	r3, [r3, #6]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d110      	bne.n	80086cc <USBD_StdItfReq+0xc0>
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10d      	bne.n	80086cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fdd3 	bl	800925c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80086b6:	e009      	b.n	80086cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fcf7 	bl	80090ae <USBD_CtlError>
          break;
 80086c0:	e004      	b.n	80086cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fcf2 	bl	80090ae <USBD_CtlError>
          break;
 80086ca:	e000      	b.n	80086ce <USBD_StdItfReq+0xc2>
          break;
 80086cc:	bf00      	nop
      }
      break;
 80086ce:	e004      	b.n	80086da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fceb 	bl	80090ae <USBD_CtlError>
      break;
 80086d8:	bf00      	nop
  }

  return ret;
 80086da:	7bfb      	ldrb	r3, [r7, #15]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	889b      	ldrh	r3, [r3, #4]
 80086f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008700:	2b40      	cmp	r3, #64	@ 0x40
 8008702:	d007      	beq.n	8008714 <USBD_StdEPReq+0x30>
 8008704:	2b40      	cmp	r3, #64	@ 0x40
 8008706:	f200 817f 	bhi.w	8008a08 <USBD_StdEPReq+0x324>
 800870a:	2b00      	cmp	r3, #0
 800870c:	d02a      	beq.n	8008764 <USBD_StdEPReq+0x80>
 800870e:	2b20      	cmp	r3, #32
 8008710:	f040 817a 	bne.w	8008a08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff fe85 	bl	8008428 <USBD_CoreFindEP>
 800871e:	4603      	mov	r3, r0
 8008720:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008722:	7b7b      	ldrb	r3, [r7, #13]
 8008724:	2bff      	cmp	r3, #255	@ 0xff
 8008726:	f000 8174 	beq.w	8008a12 <USBD_StdEPReq+0x32e>
 800872a:	7b7b      	ldrb	r3, [r7, #13]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f040 8170 	bne.w	8008a12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008732:	7b7a      	ldrb	r2, [r7, #13]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800873a:	7b7a      	ldrb	r2, [r7, #13]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	32ae      	adds	r2, #174	@ 0xae
 8008740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 8163 	beq.w	8008a12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800874c:	7b7a      	ldrb	r2, [r7, #13]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	32ae      	adds	r2, #174	@ 0xae
 8008752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	4798      	blx	r3
 800875e:	4603      	mov	r3, r0
 8008760:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008762:	e156      	b.n	8008a12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	785b      	ldrb	r3, [r3, #1]
 8008768:	2b03      	cmp	r3, #3
 800876a:	d008      	beq.n	800877e <USBD_StdEPReq+0x9a>
 800876c:	2b03      	cmp	r3, #3
 800876e:	f300 8145 	bgt.w	80089fc <USBD_StdEPReq+0x318>
 8008772:	2b00      	cmp	r3, #0
 8008774:	f000 809b 	beq.w	80088ae <USBD_StdEPReq+0x1ca>
 8008778:	2b01      	cmp	r3, #1
 800877a:	d03c      	beq.n	80087f6 <USBD_StdEPReq+0x112>
 800877c:	e13e      	b.n	80089fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d002      	beq.n	8008790 <USBD_StdEPReq+0xac>
 800878a:	2b03      	cmp	r3, #3
 800878c:	d016      	beq.n	80087bc <USBD_StdEPReq+0xd8>
 800878e:	e02c      	b.n	80087ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00d      	beq.n	80087b2 <USBD_StdEPReq+0xce>
 8008796:	7bbb      	ldrb	r3, [r7, #14]
 8008798:	2b80      	cmp	r3, #128	@ 0x80
 800879a:	d00a      	beq.n	80087b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 f979 	bl	8009a98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80087a6:	2180      	movs	r1, #128	@ 0x80
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 f975 	bl	8009a98 <USBD_LL_StallEP>
 80087ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087b0:	e020      	b.n	80087f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fc7a 	bl	80090ae <USBD_CtlError>
              break;
 80087ba:	e01b      	b.n	80087f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	885b      	ldrh	r3, [r3, #2]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10e      	bne.n	80087e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00b      	beq.n	80087e2 <USBD_StdEPReq+0xfe>
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	2b80      	cmp	r3, #128	@ 0x80
 80087ce:	d008      	beq.n	80087e2 <USBD_StdEPReq+0xfe>
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	88db      	ldrh	r3, [r3, #6]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d104      	bne.n	80087e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 f95b 	bl	8009a98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fd3a 	bl	800925c <USBD_CtlSendStatus>

              break;
 80087e8:	e004      	b.n	80087f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fc5e 	bl	80090ae <USBD_CtlError>
              break;
 80087f2:	bf00      	nop
          }
          break;
 80087f4:	e107      	b.n	8008a06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d002      	beq.n	8008808 <USBD_StdEPReq+0x124>
 8008802:	2b03      	cmp	r3, #3
 8008804:	d016      	beq.n	8008834 <USBD_StdEPReq+0x150>
 8008806:	e04b      	b.n	80088a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008808:	7bbb      	ldrb	r3, [r7, #14]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00d      	beq.n	800882a <USBD_StdEPReq+0x146>
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	2b80      	cmp	r3, #128	@ 0x80
 8008812:	d00a      	beq.n	800882a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f001 f93d 	bl	8009a98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800881e:	2180      	movs	r1, #128	@ 0x80
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 f939 	bl	8009a98 <USBD_LL_StallEP>
 8008826:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008828:	e040      	b.n	80088ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fc3e 	bl	80090ae <USBD_CtlError>
              break;
 8008832:	e03b      	b.n	80088ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	885b      	ldrh	r3, [r3, #2]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d136      	bne.n	80088aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800883c:	7bbb      	ldrb	r3, [r7, #14]
 800883e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008842:	2b00      	cmp	r3, #0
 8008844:	d004      	beq.n	8008850 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 f943 	bl	8009ad6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fd03 	bl	800925c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff fde4 	bl	8008428 <USBD_CoreFindEP>
 8008860:	4603      	mov	r3, r0
 8008862:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008864:	7b7b      	ldrb	r3, [r7, #13]
 8008866:	2bff      	cmp	r3, #255	@ 0xff
 8008868:	d01f      	beq.n	80088aa <USBD_StdEPReq+0x1c6>
 800886a:	7b7b      	ldrb	r3, [r7, #13]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d11c      	bne.n	80088aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008870:	7b7a      	ldrb	r2, [r7, #13]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008878:	7b7a      	ldrb	r2, [r7, #13]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	32ae      	adds	r2, #174	@ 0xae
 800887e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d010      	beq.n	80088aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008888:	7b7a      	ldrb	r2, [r7, #13]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	32ae      	adds	r2, #174	@ 0xae
 800888e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	4798      	blx	r3
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800889e:	e004      	b.n	80088aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fc03 	bl	80090ae <USBD_CtlError>
              break;
 80088a8:	e000      	b.n	80088ac <USBD_StdEPReq+0x1c8>
              break;
 80088aa:	bf00      	nop
          }
          break;
 80088ac:	e0ab      	b.n	8008a06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d002      	beq.n	80088c0 <USBD_StdEPReq+0x1dc>
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d032      	beq.n	8008924 <USBD_StdEPReq+0x240>
 80088be:	e097      	b.n	80089f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d007      	beq.n	80088d6 <USBD_StdEPReq+0x1f2>
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	2b80      	cmp	r3, #128	@ 0x80
 80088ca:	d004      	beq.n	80088d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fbed 	bl	80090ae <USBD_CtlError>
                break;
 80088d4:	e091      	b.n	80089fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	da0b      	bge.n	80088f6 <USBD_StdEPReq+0x212>
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	3310      	adds	r3, #16
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	4413      	add	r3, r2
 80088f2:	3304      	adds	r3, #4
 80088f4:	e00b      	b.n	800890e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	4413      	add	r3, r2
 800890c:	3304      	adds	r3, #4
 800890e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2202      	movs	r2, #2
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fc43 	bl	80091a8 <USBD_CtlSendData>
              break;
 8008922:	e06a      	b.n	80089fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008928:	2b00      	cmp	r3, #0
 800892a:	da11      	bge.n	8008950 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	f003 020f 	and.w	r2, r3, #15
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	4613      	mov	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	440b      	add	r3, r1
 800893e:	3324      	adds	r3, #36	@ 0x24
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d117      	bne.n	8008976 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fbb0 	bl	80090ae <USBD_CtlError>
                  break;
 800894e:	e054      	b.n	80089fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008950:	7bbb      	ldrb	r3, [r7, #14]
 8008952:	f003 020f 	and.w	r2, r3, #15
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d104      	bne.n	8008976 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fb9d 	bl	80090ae <USBD_CtlError>
                  break;
 8008974:	e041      	b.n	80089fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800897a:	2b00      	cmp	r3, #0
 800897c:	da0b      	bge.n	8008996 <USBD_StdEPReq+0x2b2>
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008984:	4613      	mov	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	3310      	adds	r3, #16
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	4413      	add	r3, r2
 8008992:	3304      	adds	r3, #4
 8008994:	e00b      	b.n	80089ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	4413      	add	r3, r2
 80089ac:	3304      	adds	r3, #4
 80089ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d002      	beq.n	80089bc <USBD_StdEPReq+0x2d8>
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
 80089b8:	2b80      	cmp	r3, #128	@ 0x80
 80089ba:	d103      	bne.n	80089c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	e00e      	b.n	80089e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80089c4:	7bbb      	ldrb	r3, [r7, #14]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 f8a3 	bl	8009b14 <USBD_LL_IsStallEP>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2201      	movs	r2, #1
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	e002      	b.n	80089e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2202      	movs	r2, #2
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fbdd 	bl	80091a8 <USBD_CtlSendData>
              break;
 80089ee:	e004      	b.n	80089fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fb5b 	bl	80090ae <USBD_CtlError>
              break;
 80089f8:	bf00      	nop
          }
          break;
 80089fa:	e004      	b.n	8008a06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fb55 	bl	80090ae <USBD_CtlError>
          break;
 8008a04:	bf00      	nop
      }
      break;
 8008a06:	e005      	b.n	8008a14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fb4f 	bl	80090ae <USBD_CtlError>
      break;
 8008a10:	e000      	b.n	8008a14 <USBD_StdEPReq+0x330>
      break;
 8008a12:	bf00      	nop
  }

  return ret;
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	885b      	ldrh	r3, [r3, #2]
 8008a3a:	0a1b      	lsrs	r3, r3, #8
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	2b06      	cmp	r3, #6
 8008a42:	f200 8128 	bhi.w	8008c96 <USBD_GetDescriptor+0x276>
 8008a46:	a201      	add	r2, pc, #4	@ (adr r2, 8008a4c <USBD_GetDescriptor+0x2c>)
 8008a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4c:	08008a69 	.word	0x08008a69
 8008a50:	08008a81 	.word	0x08008a81
 8008a54:	08008ac1 	.word	0x08008ac1
 8008a58:	08008c97 	.word	0x08008c97
 8008a5c:	08008c97 	.word	0x08008c97
 8008a60:	08008c37 	.word	0x08008c37
 8008a64:	08008c63 	.word	0x08008c63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	7c12      	ldrb	r2, [r2, #16]
 8008a74:	f107 0108 	add.w	r1, r7, #8
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4798      	blx	r3
 8008a7c:	60f8      	str	r0, [r7, #12]
      break;
 8008a7e:	e112      	b.n	8008ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	7c1b      	ldrb	r3, [r3, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10d      	bne.n	8008aa4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a90:	f107 0208 	add.w	r2, r7, #8
 8008a94:	4610      	mov	r0, r2
 8008a96:	4798      	blx	r3
 8008a98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008aa2:	e100      	b.n	8008ca6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aac:	f107 0208 	add.w	r2, r7, #8
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4798      	blx	r3
 8008ab4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	2202      	movs	r2, #2
 8008abc:	701a      	strb	r2, [r3, #0]
      break;
 8008abe:	e0f2      	b.n	8008ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	885b      	ldrh	r3, [r3, #2]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b05      	cmp	r3, #5
 8008ac8:	f200 80ac 	bhi.w	8008c24 <USBD_GetDescriptor+0x204>
 8008acc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ad4 <USBD_GetDescriptor+0xb4>)
 8008ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad2:	bf00      	nop
 8008ad4:	08008aed 	.word	0x08008aed
 8008ad8:	08008b21 	.word	0x08008b21
 8008adc:	08008b55 	.word	0x08008b55
 8008ae0:	08008b89 	.word	0x08008b89
 8008ae4:	08008bbd 	.word	0x08008bbd
 8008ae8:	08008bf1 	.word	0x08008bf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00b      	beq.n	8008b10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	7c12      	ldrb	r2, [r2, #16]
 8008b04:	f107 0108 	add.w	r1, r7, #8
 8008b08:	4610      	mov	r0, r2
 8008b0a:	4798      	blx	r3
 8008b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b0e:	e091      	b.n	8008c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 facb 	bl	80090ae <USBD_CtlError>
            err++;
 8008b18:	7afb      	ldrb	r3, [r7, #11]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b1e:	e089      	b.n	8008c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	7c12      	ldrb	r2, [r2, #16]
 8008b38:	f107 0108 	add.w	r1, r7, #8
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	4798      	blx	r3
 8008b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b42:	e077      	b.n	8008c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fab1 	bl	80090ae <USBD_CtlError>
            err++;
 8008b4c:	7afb      	ldrb	r3, [r7, #11]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	72fb      	strb	r3, [r7, #11]
          break;
 8008b52:	e06f      	b.n	8008c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00b      	beq.n	8008b78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	7c12      	ldrb	r2, [r2, #16]
 8008b6c:	f107 0108 	add.w	r1, r7, #8
 8008b70:	4610      	mov	r0, r2
 8008b72:	4798      	blx	r3
 8008b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b76:	e05d      	b.n	8008c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fa97 	bl	80090ae <USBD_CtlError>
            err++;
 8008b80:	7afb      	ldrb	r3, [r7, #11]
 8008b82:	3301      	adds	r3, #1
 8008b84:	72fb      	strb	r3, [r7, #11]
          break;
 8008b86:	e055      	b.n	8008c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	7c12      	ldrb	r2, [r2, #16]
 8008ba0:	f107 0108 	add.w	r1, r7, #8
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	4798      	blx	r3
 8008ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008baa:	e043      	b.n	8008c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa7d 	bl	80090ae <USBD_CtlError>
            err++;
 8008bb4:	7afb      	ldrb	r3, [r7, #11]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008bba:	e03b      	b.n	8008c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00b      	beq.n	8008be0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	7c12      	ldrb	r2, [r2, #16]
 8008bd4:	f107 0108 	add.w	r1, r7, #8
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4798      	blx	r3
 8008bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bde:	e029      	b.n	8008c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fa63 	bl	80090ae <USBD_CtlError>
            err++;
 8008be8:	7afb      	ldrb	r3, [r7, #11]
 8008bea:	3301      	adds	r3, #1
 8008bec:	72fb      	strb	r3, [r7, #11]
          break;
 8008bee:	e021      	b.n	8008c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00b      	beq.n	8008c14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	7c12      	ldrb	r2, [r2, #16]
 8008c08:	f107 0108 	add.w	r1, r7, #8
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4798      	blx	r3
 8008c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c12:	e00f      	b.n	8008c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fa49 	bl	80090ae <USBD_CtlError>
            err++;
 8008c1c:	7afb      	ldrb	r3, [r7, #11]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	72fb      	strb	r3, [r7, #11]
          break;
 8008c22:	e007      	b.n	8008c34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fa41 	bl	80090ae <USBD_CtlError>
          err++;
 8008c2c:	7afb      	ldrb	r3, [r7, #11]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008c32:	bf00      	nop
      }
      break;
 8008c34:	e037      	b.n	8008ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	7c1b      	ldrb	r3, [r3, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d109      	bne.n	8008c52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c46:	f107 0208 	add.w	r2, r7, #8
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	4798      	blx	r3
 8008c4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c50:	e029      	b.n	8008ca6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fa2a 	bl	80090ae <USBD_CtlError>
        err++;
 8008c5a:	7afb      	ldrb	r3, [r7, #11]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	72fb      	strb	r3, [r7, #11]
      break;
 8008c60:	e021      	b.n	8008ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	7c1b      	ldrb	r3, [r3, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10d      	bne.n	8008c86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c72:	f107 0208 	add.w	r2, r7, #8
 8008c76:	4610      	mov	r0, r2
 8008c78:	4798      	blx	r3
 8008c7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	2207      	movs	r2, #7
 8008c82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c84:	e00f      	b.n	8008ca6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fa10 	bl	80090ae <USBD_CtlError>
        err++;
 8008c8e:	7afb      	ldrb	r3, [r7, #11]
 8008c90:	3301      	adds	r3, #1
 8008c92:	72fb      	strb	r3, [r7, #11]
      break;
 8008c94:	e007      	b.n	8008ca6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fa08 	bl	80090ae <USBD_CtlError>
      err++;
 8008c9e:	7afb      	ldrb	r3, [r7, #11]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ca4:	bf00      	nop
  }

  if (err != 0U)
 8008ca6:	7afb      	ldrb	r3, [r7, #11]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d11e      	bne.n	8008cea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	88db      	ldrh	r3, [r3, #6]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d016      	beq.n	8008ce2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008cb4:	893b      	ldrh	r3, [r7, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00e      	beq.n	8008cd8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	88da      	ldrh	r2, [r3, #6]
 8008cbe:	893b      	ldrh	r3, [r7, #8]
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	bf28      	it	cs
 8008cc4:	4613      	movcs	r3, r2
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cca:	893b      	ldrh	r3, [r7, #8]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	68f9      	ldr	r1, [r7, #12]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fa69 	bl	80091a8 <USBD_CtlSendData>
 8008cd6:	e009      	b.n	8008cec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f9e7 	bl	80090ae <USBD_CtlError>
 8008ce0:	e004      	b.n	8008cec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 faba 	bl	800925c <USBD_CtlSendStatus>
 8008ce8:	e000      	b.n	8008cec <USBD_GetDescriptor+0x2cc>
    return;
 8008cea:	bf00      	nop
  }
}
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop

08008cf4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	889b      	ldrh	r3, [r3, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d131      	bne.n	8008d6a <USBD_SetAddress+0x76>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	88db      	ldrh	r3, [r3, #6]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d12d      	bne.n	8008d6a <USBD_SetAddress+0x76>
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	885b      	ldrh	r3, [r3, #2]
 8008d12:	2b7f      	cmp	r3, #127	@ 0x7f
 8008d14:	d829      	bhi.n	8008d6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	885b      	ldrh	r3, [r3, #2]
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d104      	bne.n	8008d38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f9bc 	bl	80090ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d36:	e01d      	b.n	8008d74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	7bfa      	ldrb	r2, [r7, #15]
 8008d3c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 ff11 	bl	8009b6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fa86 	bl	800925c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d004      	beq.n	8008d60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2202      	movs	r2, #2
 8008d5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d5e:	e009      	b.n	8008d74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d68:	e004      	b.n	8008d74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f99e 	bl	80090ae <USBD_CtlError>
  }
}
 8008d72:	bf00      	nop
 8008d74:	bf00      	nop
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	885b      	ldrh	r3, [r3, #2]
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	4b4e      	ldr	r3, [pc, #312]	@ (8008ecc <USBD_SetConfig+0x150>)
 8008d92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d94:	4b4d      	ldr	r3, [pc, #308]	@ (8008ecc <USBD_SetConfig+0x150>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d905      	bls.n	8008da8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f985 	bl	80090ae <USBD_CtlError>
    return USBD_FAIL;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e08c      	b.n	8008ec2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d002      	beq.n	8008dba <USBD_SetConfig+0x3e>
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d029      	beq.n	8008e0c <USBD_SetConfig+0x90>
 8008db8:	e075      	b.n	8008ea6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008dba:	4b44      	ldr	r3, [pc, #272]	@ (8008ecc <USBD_SetConfig+0x150>)
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d020      	beq.n	8008e04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008dc2:	4b42      	ldr	r3, [pc, #264]	@ (8008ecc <USBD_SetConfig+0x150>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8008ecc <USBD_SetConfig+0x150>)
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7fe ffe3 	bl	8007d9e <USBD_SetClassConfig>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d008      	beq.n	8008df4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f962 	bl	80090ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2202      	movs	r2, #2
 8008dee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008df2:	e065      	b.n	8008ec0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fa31 	bl	800925c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2203      	movs	r2, #3
 8008dfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008e02:	e05d      	b.n	8008ec0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fa29 	bl	800925c <USBD_CtlSendStatus>
      break;
 8008e0a:	e059      	b.n	8008ec0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8008ecc <USBD_SetConfig+0x150>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d112      	bne.n	8008e3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8008ecc <USBD_SetConfig+0x150>)
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	461a      	mov	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e26:	4b29      	ldr	r3, [pc, #164]	@ (8008ecc <USBD_SetConfig+0x150>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7fe ffd2 	bl	8007dd6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fa12 	bl	800925c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e38:	e042      	b.n	8008ec0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008e3a:	4b24      	ldr	r3, [pc, #144]	@ (8008ecc <USBD_SetConfig+0x150>)
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d02a      	beq.n	8008e9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7fe ffc0 	bl	8007dd6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008e56:	4b1d      	ldr	r3, [pc, #116]	@ (8008ecc <USBD_SetConfig+0x150>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e60:	4b1a      	ldr	r3, [pc, #104]	@ (8008ecc <USBD_SetConfig+0x150>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	4619      	mov	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7fe ff99 	bl	8007d9e <USBD_SetClassConfig>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00f      	beq.n	8008e96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f918 	bl	80090ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7fe ffa5 	bl	8007dd6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2202      	movs	r2, #2
 8008e90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008e94:	e014      	b.n	8008ec0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f9e0 	bl	800925c <USBD_CtlSendStatus>
      break;
 8008e9c:	e010      	b.n	8008ec0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f9dc 	bl	800925c <USBD_CtlSendStatus>
      break;
 8008ea4:	e00c      	b.n	8008ec0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f900 	bl	80090ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008eae:	4b07      	ldr	r3, [pc, #28]	@ (8008ecc <USBD_SetConfig+0x150>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7fe ff8e 	bl	8007dd6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ebe:	bf00      	nop
  }

  return ret;
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	20000474 	.word	0x20000474

08008ed0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	88db      	ldrh	r3, [r3, #6]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d004      	beq.n	8008eec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f8e2 	bl	80090ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008eea:	e023      	b.n	8008f34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	dc02      	bgt.n	8008efe <USBD_GetConfig+0x2e>
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	dc03      	bgt.n	8008f04 <USBD_GetConfig+0x34>
 8008efc:	e015      	b.n	8008f2a <USBD_GetConfig+0x5a>
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d00b      	beq.n	8008f1a <USBD_GetConfig+0x4a>
 8008f02:	e012      	b.n	8008f2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	2201      	movs	r2, #1
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f948 	bl	80091a8 <USBD_CtlSendData>
        break;
 8008f18:	e00c      	b.n	8008f34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	2201      	movs	r2, #1
 8008f20:	4619      	mov	r1, r3
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f940 	bl	80091a8 <USBD_CtlSendData>
        break;
 8008f28:	e004      	b.n	8008f34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f8be 	bl	80090ae <USBD_CtlError>
        break;
 8008f32:	bf00      	nop
}
 8008f34:	bf00      	nop
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d81e      	bhi.n	8008f92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	88db      	ldrh	r3, [r3, #6]
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d004      	beq.n	8008f66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f8a5 	bl	80090ae <USBD_CtlError>
        break;
 8008f64:	e01a      	b.n	8008f9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d005      	beq.n	8008f82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f043 0202 	orr.w	r2, r3, #2
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	330c      	adds	r3, #12
 8008f86:	2202      	movs	r2, #2
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f90c 	bl	80091a8 <USBD_CtlSendData>
      break;
 8008f90:	e004      	b.n	8008f9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f88a 	bl	80090ae <USBD_CtlError>
      break;
 8008f9a:	bf00      	nop
  }
}
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	885b      	ldrh	r3, [r3, #2]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d107      	bne.n	8008fc6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f94c 	bl	800925c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008fc4:	e013      	b.n	8008fee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	885b      	ldrh	r3, [r3, #2]
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d10b      	bne.n	8008fe6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	889b      	ldrh	r3, [r3, #4]
 8008fd2:	0a1b      	lsrs	r3, r3, #8
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f93c 	bl	800925c <USBD_CtlSendStatus>
}
 8008fe4:	e003      	b.n	8008fee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008fe6:	6839      	ldr	r1, [r7, #0]
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f860 	bl	80090ae <USBD_CtlError>
}
 8008fee:	bf00      	nop
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009006:	b2db      	uxtb	r3, r3
 8009008:	3b01      	subs	r3, #1
 800900a:	2b02      	cmp	r3, #2
 800900c:	d80b      	bhi.n	8009026 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	885b      	ldrh	r3, [r3, #2]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d10c      	bne.n	8009030 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f91c 	bl	800925c <USBD_CtlSendStatus>
      }
      break;
 8009024:	e004      	b.n	8009030 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f840 	bl	80090ae <USBD_CtlError>
      break;
 800902e:	e000      	b.n	8009032 <USBD_ClrFeature+0x3c>
      break;
 8009030:	bf00      	nop
  }
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	781a      	ldrb	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	3301      	adds	r3, #1
 8009054:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	781a      	ldrb	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	3301      	adds	r3, #1
 8009062:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f7ff fa40 	bl	80084ea <SWAPBYTE>
 800906a:	4603      	mov	r3, r0
 800906c:	461a      	mov	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3301      	adds	r3, #1
 8009076:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	3301      	adds	r3, #1
 800907c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f7ff fa33 	bl	80084ea <SWAPBYTE>
 8009084:	4603      	mov	r3, r0
 8009086:	461a      	mov	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	3301      	adds	r3, #1
 8009090:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3301      	adds	r3, #1
 8009096:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f7ff fa26 	bl	80084ea <SWAPBYTE>
 800909e:	4603      	mov	r3, r0
 80090a0:	461a      	mov	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	80da      	strh	r2, [r3, #6]
}
 80090a6:	bf00      	nop
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b082      	sub	sp, #8
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80090b8:	2180      	movs	r1, #128	@ 0x80
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fcec 	bl	8009a98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80090c0:	2100      	movs	r1, #0
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fce8 	bl	8009a98 <USBD_LL_StallEP>
}
 80090c8:	bf00      	nop
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d042      	beq.n	800916c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80090ea:	6938      	ldr	r0, [r7, #16]
 80090ec:	f000 f842 	bl	8009174 <USBD_GetLen>
 80090f0:	4603      	mov	r3, r0
 80090f2:	3301      	adds	r3, #1
 80090f4:	005b      	lsls	r3, r3, #1
 80090f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090fa:	d808      	bhi.n	800910e <USBD_GetString+0x3e>
 80090fc:	6938      	ldr	r0, [r7, #16]
 80090fe:	f000 f839 	bl	8009174 <USBD_GetLen>
 8009102:	4603      	mov	r3, r0
 8009104:	3301      	adds	r3, #1
 8009106:	b29b      	uxth	r3, r3
 8009108:	005b      	lsls	r3, r3, #1
 800910a:	b29a      	uxth	r2, r3
 800910c:	e001      	b.n	8009112 <USBD_GetString+0x42>
 800910e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	4413      	add	r3, r2
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	7812      	ldrb	r2, [r2, #0]
 8009120:	701a      	strb	r2, [r3, #0]
  idx++;
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	3301      	adds	r3, #1
 8009126:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	4413      	add	r3, r2
 800912e:	2203      	movs	r2, #3
 8009130:	701a      	strb	r2, [r3, #0]
  idx++;
 8009132:	7dfb      	ldrb	r3, [r7, #23]
 8009134:	3301      	adds	r3, #1
 8009136:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009138:	e013      	b.n	8009162 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	4413      	add	r3, r2
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	7812      	ldrb	r2, [r2, #0]
 8009144:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	3301      	adds	r3, #1
 800914a:	613b      	str	r3, [r7, #16]
    idx++;
 800914c:	7dfb      	ldrb	r3, [r7, #23]
 800914e:	3301      	adds	r3, #1
 8009150:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009152:	7dfb      	ldrb	r3, [r7, #23]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	4413      	add	r3, r2
 8009158:	2200      	movs	r2, #0
 800915a:	701a      	strb	r2, [r3, #0]
    idx++;
 800915c:	7dfb      	ldrb	r3, [r7, #23]
 800915e:	3301      	adds	r3, #1
 8009160:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1e7      	bne.n	800913a <USBD_GetString+0x6a>
 800916a:	e000      	b.n	800916e <USBD_GetString+0x9e>
    return;
 800916c:	bf00      	nop
  }
}
 800916e:	3718      	adds	r7, #24
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800917c:	2300      	movs	r3, #0
 800917e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009184:	e005      	b.n	8009192 <USBD_GetLen+0x1e>
  {
    len++;
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	3301      	adds	r3, #1
 800918a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	3301      	adds	r3, #1
 8009190:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1f5      	bne.n	8009186 <USBD_GetLen+0x12>
  }

  return len;
 800919a:	7bfb      	ldrb	r3, [r7, #15]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2202      	movs	r2, #2
 80091b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	2100      	movs	r1, #0
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 fceb 	bl	8009baa <USBD_LL_Transmit>

  return USBD_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b084      	sub	sp, #16
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	2100      	movs	r1, #0
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f000 fcda 	bl	8009baa <USBD_LL_Transmit>

  return USBD_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2203      	movs	r2, #3
 8009210:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	2100      	movs	r1, #0
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f000 fcde 	bl	8009bec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	60f8      	str	r0, [r7, #12]
 8009242:	60b9      	str	r1, [r7, #8]
 8009244:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	2100      	movs	r1, #0
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 fccd 	bl	8009bec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2204      	movs	r2, #4
 8009268:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800926c:	2300      	movs	r3, #0
 800926e:	2200      	movs	r2, #0
 8009270:	2100      	movs	r1, #0
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fc99 	bl	8009baa <USBD_LL_Transmit>

  return USBD_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b082      	sub	sp, #8
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2205      	movs	r2, #5
 800928e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009292:	2300      	movs	r3, #0
 8009294:	2200      	movs	r2, #0
 8009296:	2100      	movs	r1, #0
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fca7 	bl	8009bec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80092ac:	2200      	movs	r2, #0
 80092ae:	4912      	ldr	r1, [pc, #72]	@ (80092f8 <MX_USB_DEVICE_Init+0x50>)
 80092b0:	4812      	ldr	r0, [pc, #72]	@ (80092fc <MX_USB_DEVICE_Init+0x54>)
 80092b2:	f7fe fcf7 	bl	8007ca4 <USBD_Init>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80092bc:	f7f8 f88e 	bl	80013dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80092c0:	490f      	ldr	r1, [pc, #60]	@ (8009300 <MX_USB_DEVICE_Init+0x58>)
 80092c2:	480e      	ldr	r0, [pc, #56]	@ (80092fc <MX_USB_DEVICE_Init+0x54>)
 80092c4:	f7fe fd1e 	bl	8007d04 <USBD_RegisterClass>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80092ce:	f7f8 f885 	bl	80013dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80092d2:	490c      	ldr	r1, [pc, #48]	@ (8009304 <MX_USB_DEVICE_Init+0x5c>)
 80092d4:	4809      	ldr	r0, [pc, #36]	@ (80092fc <MX_USB_DEVICE_Init+0x54>)
 80092d6:	f7fe fc15 	bl	8007b04 <USBD_CDC_RegisterInterface>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d001      	beq.n	80092e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80092e0:	f7f8 f87c 	bl	80013dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80092e4:	4805      	ldr	r0, [pc, #20]	@ (80092fc <MX_USB_DEVICE_Init+0x54>)
 80092e6:	f7fe fd43 	bl	8007d70 <USBD_Start>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80092f0:	f7f8 f874 	bl	80013dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80092f4:	bf00      	nop
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	200000ac 	.word	0x200000ac
 80092fc:	20000478 	.word	0x20000478
 8009300:	20000018 	.word	0x20000018
 8009304:	20000098 	.word	0x20000098

08009308 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800930c:	2200      	movs	r2, #0
 800930e:	4905      	ldr	r1, [pc, #20]	@ (8009324 <CDC_Init_FS+0x1c>)
 8009310:	4805      	ldr	r0, [pc, #20]	@ (8009328 <CDC_Init_FS+0x20>)
 8009312:	f7fe fc11 	bl	8007b38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009316:	4905      	ldr	r1, [pc, #20]	@ (800932c <CDC_Init_FS+0x24>)
 8009318:	4803      	ldr	r0, [pc, #12]	@ (8009328 <CDC_Init_FS+0x20>)
 800931a:	f7fe fc2f 	bl	8007b7c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800931e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009320:	4618      	mov	r0, r3
 8009322:	bd80      	pop	{r7, pc}
 8009324:	20000f54 	.word	0x20000f54
 8009328:	20000478 	.word	0x20000478
 800932c:	20000754 	.word	0x20000754

08009330 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009330:	b480      	push	{r7}
 8009332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009334:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009336:	4618      	mov	r0, r3
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	6039      	str	r1, [r7, #0]
 800934a:	71fb      	strb	r3, [r7, #7]
 800934c:	4613      	mov	r3, r2
 800934e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	2b23      	cmp	r3, #35	@ 0x23
 8009354:	d84a      	bhi.n	80093ec <CDC_Control_FS+0xac>
 8009356:	a201      	add	r2, pc, #4	@ (adr r2, 800935c <CDC_Control_FS+0x1c>)
 8009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935c:	080093ed 	.word	0x080093ed
 8009360:	080093ed 	.word	0x080093ed
 8009364:	080093ed 	.word	0x080093ed
 8009368:	080093ed 	.word	0x080093ed
 800936c:	080093ed 	.word	0x080093ed
 8009370:	080093ed 	.word	0x080093ed
 8009374:	080093ed 	.word	0x080093ed
 8009378:	080093ed 	.word	0x080093ed
 800937c:	080093ed 	.word	0x080093ed
 8009380:	080093ed 	.word	0x080093ed
 8009384:	080093ed 	.word	0x080093ed
 8009388:	080093ed 	.word	0x080093ed
 800938c:	080093ed 	.word	0x080093ed
 8009390:	080093ed 	.word	0x080093ed
 8009394:	080093ed 	.word	0x080093ed
 8009398:	080093ed 	.word	0x080093ed
 800939c:	080093ed 	.word	0x080093ed
 80093a0:	080093ed 	.word	0x080093ed
 80093a4:	080093ed 	.word	0x080093ed
 80093a8:	080093ed 	.word	0x080093ed
 80093ac:	080093ed 	.word	0x080093ed
 80093b0:	080093ed 	.word	0x080093ed
 80093b4:	080093ed 	.word	0x080093ed
 80093b8:	080093ed 	.word	0x080093ed
 80093bc:	080093ed 	.word	0x080093ed
 80093c0:	080093ed 	.word	0x080093ed
 80093c4:	080093ed 	.word	0x080093ed
 80093c8:	080093ed 	.word	0x080093ed
 80093cc:	080093ed 	.word	0x080093ed
 80093d0:	080093ed 	.word	0x080093ed
 80093d4:	080093ed 	.word	0x080093ed
 80093d8:	080093ed 	.word	0x080093ed
 80093dc:	080093ed 	.word	0x080093ed
 80093e0:	080093ed 	.word	0x080093ed
 80093e4:	080093ed 	.word	0x080093ed
 80093e8:	080093ed 	.word	0x080093ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80093ec:	bf00      	nop
  }

  return (USBD_OK);
 80093ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	4805      	ldr	r0, [pc, #20]	@ (8009420 <CDC_Receive_FS+0x24>)
 800940a:	f7fe fbb7 	bl	8007b7c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800940e:	4804      	ldr	r0, [pc, #16]	@ (8009420 <CDC_Receive_FS+0x24>)
 8009410:	f7fe fc12 	bl	8007c38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009414:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009416:	4618      	mov	r0, r3
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20000478 	.word	0x20000478

08009424 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009434:	4b0d      	ldr	r3, [pc, #52]	@ (800946c <CDC_Transmit_FS+0x48>)
 8009436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800943a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009446:	2301      	movs	r3, #1
 8009448:	e00b      	b.n	8009462 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800944a:	887b      	ldrh	r3, [r7, #2]
 800944c:	461a      	mov	r2, r3
 800944e:	6879      	ldr	r1, [r7, #4]
 8009450:	4806      	ldr	r0, [pc, #24]	@ (800946c <CDC_Transmit_FS+0x48>)
 8009452:	f7fe fb71 	bl	8007b38 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009456:	4805      	ldr	r0, [pc, #20]	@ (800946c <CDC_Transmit_FS+0x48>)
 8009458:	f7fe fbae 	bl	8007bb8 <USBD_CDC_TransmitPacket>
 800945c:	4603      	mov	r3, r0
 800945e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009460:	7bfb      	ldrb	r3, [r7, #15]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20000478 	.word	0x20000478

08009470 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009470:	b480      	push	{r7}
 8009472:	b087      	sub	sp, #28
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	4613      	mov	r3, r2
 800947c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009482:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009486:	4618      	mov	r0, r3
 8009488:	371c      	adds	r7, #28
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
	...

08009494 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	6039      	str	r1, [r7, #0]
 800949e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2212      	movs	r2, #18
 80094a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094a6:	4b03      	ldr	r3, [pc, #12]	@ (80094b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	200000c8 	.word	0x200000c8

080094b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	4603      	mov	r3, r0
 80094c0:	6039      	str	r1, [r7, #0]
 80094c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2204      	movs	r2, #4
 80094c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094ca:	4b03      	ldr	r3, [pc, #12]	@ (80094d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	200000dc 	.word	0x200000dc

080094dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	4603      	mov	r3, r0
 80094e4:	6039      	str	r1, [r7, #0]
 80094e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d105      	bne.n	80094fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	4907      	ldr	r1, [pc, #28]	@ (8009510 <USBD_FS_ProductStrDescriptor+0x34>)
 80094f2:	4808      	ldr	r0, [pc, #32]	@ (8009514 <USBD_FS_ProductStrDescriptor+0x38>)
 80094f4:	f7ff fdec 	bl	80090d0 <USBD_GetString>
 80094f8:	e004      	b.n	8009504 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	4904      	ldr	r1, [pc, #16]	@ (8009510 <USBD_FS_ProductStrDescriptor+0x34>)
 80094fe:	4805      	ldr	r0, [pc, #20]	@ (8009514 <USBD_FS_ProductStrDescriptor+0x38>)
 8009500:	f7ff fde6 	bl	80090d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009504:	4b02      	ldr	r3, [pc, #8]	@ (8009510 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009506:	4618      	mov	r0, r3
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	20001754 	.word	0x20001754
 8009514:	0800dbc8 	.word	0x0800dbc8

08009518 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	4603      	mov	r3, r0
 8009520:	6039      	str	r1, [r7, #0]
 8009522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	4904      	ldr	r1, [pc, #16]	@ (8009538 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009528:	4804      	ldr	r0, [pc, #16]	@ (800953c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800952a:	f7ff fdd1 	bl	80090d0 <USBD_GetString>
  return USBD_StrDesc;
 800952e:	4b02      	ldr	r3, [pc, #8]	@ (8009538 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20001754 	.word	0x20001754
 800953c:	0800dbe0 	.word	0x0800dbe0

08009540 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	4603      	mov	r3, r0
 8009548:	6039      	str	r1, [r7, #0]
 800954a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	221a      	movs	r2, #26
 8009550:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009552:	f000 f843 	bl	80095dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009556:	4b02      	ldr	r3, [pc, #8]	@ (8009560 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	200000e0 	.word	0x200000e0

08009564 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	6039      	str	r1, [r7, #0]
 800956e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d105      	bne.n	8009582 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	4907      	ldr	r1, [pc, #28]	@ (8009598 <USBD_FS_ConfigStrDescriptor+0x34>)
 800957a:	4808      	ldr	r0, [pc, #32]	@ (800959c <USBD_FS_ConfigStrDescriptor+0x38>)
 800957c:	f7ff fda8 	bl	80090d0 <USBD_GetString>
 8009580:	e004      	b.n	800958c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	4904      	ldr	r1, [pc, #16]	@ (8009598 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009586:	4805      	ldr	r0, [pc, #20]	@ (800959c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009588:	f7ff fda2 	bl	80090d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800958c:	4b02      	ldr	r3, [pc, #8]	@ (8009598 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	20001754 	.word	0x20001754
 800959c:	0800dbf4 	.word	0x0800dbf4

080095a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	4603      	mov	r3, r0
 80095a8:	6039      	str	r1, [r7, #0]
 80095aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d105      	bne.n	80095be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095b2:	683a      	ldr	r2, [r7, #0]
 80095b4:	4907      	ldr	r1, [pc, #28]	@ (80095d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095b6:	4808      	ldr	r0, [pc, #32]	@ (80095d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095b8:	f7ff fd8a 	bl	80090d0 <USBD_GetString>
 80095bc:	e004      	b.n	80095c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	4904      	ldr	r1, [pc, #16]	@ (80095d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095c2:	4805      	ldr	r0, [pc, #20]	@ (80095d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095c4:	f7ff fd84 	bl	80090d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095c8:	4b02      	ldr	r3, [pc, #8]	@ (80095d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20001754 	.word	0x20001754
 80095d8:	0800dc00 	.word	0x0800dc00

080095dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009620 <Get_SerialNum+0x44>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009624 <Get_SerialNum+0x48>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009628 <Get_SerialNum+0x4c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4413      	add	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d009      	beq.n	8009616 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009602:	2208      	movs	r2, #8
 8009604:	4909      	ldr	r1, [pc, #36]	@ (800962c <Get_SerialNum+0x50>)
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f000 f814 	bl	8009634 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800960c:	2204      	movs	r2, #4
 800960e:	4908      	ldr	r1, [pc, #32]	@ (8009630 <Get_SerialNum+0x54>)
 8009610:	68b8      	ldr	r0, [r7, #8]
 8009612:	f000 f80f 	bl	8009634 <IntToUnicode>
  }
}
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	1fff7a10 	.word	0x1fff7a10
 8009624:	1fff7a14 	.word	0x1fff7a14
 8009628:	1fff7a18 	.word	0x1fff7a18
 800962c:	200000e2 	.word	0x200000e2
 8009630:	200000f2 	.word	0x200000f2

08009634 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009634:	b480      	push	{r7}
 8009636:	b087      	sub	sp, #28
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	4613      	mov	r3, r2
 8009640:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009646:	2300      	movs	r3, #0
 8009648:	75fb      	strb	r3, [r7, #23]
 800964a:	e027      	b.n	800969c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	0f1b      	lsrs	r3, r3, #28
 8009650:	2b09      	cmp	r3, #9
 8009652:	d80b      	bhi.n	800966c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	0f1b      	lsrs	r3, r3, #28
 8009658:	b2da      	uxtb	r2, r3
 800965a:	7dfb      	ldrb	r3, [r7, #23]
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	4619      	mov	r1, r3
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	440b      	add	r3, r1
 8009664:	3230      	adds	r2, #48	@ 0x30
 8009666:	b2d2      	uxtb	r2, r2
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	e00a      	b.n	8009682 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	0f1b      	lsrs	r3, r3, #28
 8009670:	b2da      	uxtb	r2, r3
 8009672:	7dfb      	ldrb	r3, [r7, #23]
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	4619      	mov	r1, r3
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	440b      	add	r3, r1
 800967c:	3237      	adds	r2, #55	@ 0x37
 800967e:	b2d2      	uxtb	r2, r2
 8009680:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	011b      	lsls	r3, r3, #4
 8009686:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009688:	7dfb      	ldrb	r3, [r7, #23]
 800968a:	005b      	lsls	r3, r3, #1
 800968c:	3301      	adds	r3, #1
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	4413      	add	r3, r2
 8009692:	2200      	movs	r2, #0
 8009694:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009696:	7dfb      	ldrb	r3, [r7, #23]
 8009698:	3301      	adds	r3, #1
 800969a:	75fb      	strb	r3, [r7, #23]
 800969c:	7dfa      	ldrb	r2, [r7, #23]
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d3d3      	bcc.n	800964c <IntToUnicode+0x18>
  }
}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop
 80096a8:	371c      	adds	r7, #28
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
	...

080096b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08a      	sub	sp, #40	@ 0x28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096bc:	f107 0314 	add.w	r3, r7, #20
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	605a      	str	r2, [r3, #4]
 80096c6:	609a      	str	r2, [r3, #8]
 80096c8:	60da      	str	r2, [r3, #12]
 80096ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096d4:	d13a      	bne.n	800974c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096d6:	2300      	movs	r3, #0
 80096d8:	613b      	str	r3, [r7, #16]
 80096da:	4b1e      	ldr	r3, [pc, #120]	@ (8009754 <HAL_PCD_MspInit+0xa0>)
 80096dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096de:	4a1d      	ldr	r2, [pc, #116]	@ (8009754 <HAL_PCD_MspInit+0xa0>)
 80096e0:	f043 0301 	orr.w	r3, r3, #1
 80096e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80096e6:	4b1b      	ldr	r3, [pc, #108]	@ (8009754 <HAL_PCD_MspInit+0xa0>)
 80096e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	613b      	str	r3, [r7, #16]
 80096f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80096f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80096f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096f8:	2302      	movs	r3, #2
 80096fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096fc:	2300      	movs	r3, #0
 80096fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009700:	2303      	movs	r3, #3
 8009702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009704:	230a      	movs	r3, #10
 8009706:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009708:	f107 0314 	add.w	r3, r7, #20
 800970c:	4619      	mov	r1, r3
 800970e:	4812      	ldr	r0, [pc, #72]	@ (8009758 <HAL_PCD_MspInit+0xa4>)
 8009710:	f7f8 ff46 	bl	80025a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009714:	4b0f      	ldr	r3, [pc, #60]	@ (8009754 <HAL_PCD_MspInit+0xa0>)
 8009716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009718:	4a0e      	ldr	r2, [pc, #56]	@ (8009754 <HAL_PCD_MspInit+0xa0>)
 800971a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800971e:	6353      	str	r3, [r2, #52]	@ 0x34
 8009720:	2300      	movs	r3, #0
 8009722:	60fb      	str	r3, [r7, #12]
 8009724:	4b0b      	ldr	r3, [pc, #44]	@ (8009754 <HAL_PCD_MspInit+0xa0>)
 8009726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009728:	4a0a      	ldr	r2, [pc, #40]	@ (8009754 <HAL_PCD_MspInit+0xa0>)
 800972a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800972e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009730:	4b08      	ldr	r3, [pc, #32]	@ (8009754 <HAL_PCD_MspInit+0xa0>)
 8009732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009738:	60fb      	str	r3, [r7, #12]
 800973a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800973c:	2200      	movs	r2, #0
 800973e:	2100      	movs	r1, #0
 8009740:	2043      	movs	r0, #67	@ 0x43
 8009742:	f7f8 fb58 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009746:	2043      	movs	r0, #67	@ 0x43
 8009748:	f7f8 fb71 	bl	8001e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800974c:	bf00      	nop
 800974e:	3728      	adds	r7, #40	@ 0x28
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	40023800 	.word	0x40023800
 8009758:	40020000 	.word	0x40020000

0800975c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009770:	4619      	mov	r1, r3
 8009772:	4610      	mov	r0, r2
 8009774:	f7fe fb49 	bl	8007e0a <USBD_LL_SetupStage>
}
 8009778:	bf00      	nop
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009792:	78fa      	ldrb	r2, [r7, #3]
 8009794:	6879      	ldr	r1, [r7, #4]
 8009796:	4613      	mov	r3, r2
 8009798:	00db      	lsls	r3, r3, #3
 800979a:	4413      	add	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	440b      	add	r3, r1
 80097a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	78fb      	ldrb	r3, [r7, #3]
 80097a8:	4619      	mov	r1, r3
 80097aa:	f7fe fb83 	bl	8007eb4 <USBD_LL_DataOutStage>
}
 80097ae:	bf00      	nop
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b082      	sub	sp, #8
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80097c8:	78fa      	ldrb	r2, [r7, #3]
 80097ca:	6879      	ldr	r1, [r7, #4]
 80097cc:	4613      	mov	r3, r2
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	4413      	add	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	440b      	add	r3, r1
 80097d6:	3320      	adds	r3, #32
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	78fb      	ldrb	r3, [r7, #3]
 80097dc:	4619      	mov	r1, r3
 80097de:	f7fe fc1c 	bl	800801a <USBD_LL_DataInStage>
}
 80097e2:	bf00      	nop
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fe fd56 	bl	80082aa <USBD_LL_SOF>
}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b084      	sub	sp, #16
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800980e:	2301      	movs	r3, #1
 8009810:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	79db      	ldrb	r3, [r3, #7]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d102      	bne.n	8009820 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800981a:	2300      	movs	r3, #0
 800981c:	73fb      	strb	r3, [r7, #15]
 800981e:	e008      	b.n	8009832 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	79db      	ldrb	r3, [r3, #7]
 8009824:	2b02      	cmp	r3, #2
 8009826:	d102      	bne.n	800982e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009828:	2301      	movs	r3, #1
 800982a:	73fb      	strb	r3, [r7, #15]
 800982c:	e001      	b.n	8009832 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800982e:	f7f7 fdd5 	bl	80013dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009838:	7bfa      	ldrb	r2, [r7, #15]
 800983a:	4611      	mov	r1, r2
 800983c:	4618      	mov	r0, r3
 800983e:	f7fe fcf0 	bl	8008222 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009848:	4618      	mov	r0, r3
 800984a:	f7fe fc98 	bl	800817e <USBD_LL_Reset>
}
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
	...

08009858 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe fceb 	bl	8008242 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	6812      	ldr	r2, [r2, #0]
 800987a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800987e:	f043 0301 	orr.w	r3, r3, #1
 8009882:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	7adb      	ldrb	r3, [r3, #11]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800988c:	4b04      	ldr	r3, [pc, #16]	@ (80098a0 <HAL_PCD_SuspendCallback+0x48>)
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	4a03      	ldr	r2, [pc, #12]	@ (80098a0 <HAL_PCD_SuspendCallback+0x48>)
 8009892:	f043 0306 	orr.w	r3, r3, #6
 8009896:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	e000ed00 	.word	0xe000ed00

080098a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe fce1 	bl	800827a <USBD_LL_Resume>
}
 80098b8:	bf00      	nop
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	460b      	mov	r3, r1
 80098ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098d2:	78fa      	ldrb	r2, [r7, #3]
 80098d4:	4611      	mov	r1, r2
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fe fd39 	bl	800834e <USBD_LL_IsoOUTIncomplete>
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	460b      	mov	r3, r1
 80098ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098f6:	78fa      	ldrb	r2, [r7, #3]
 80098f8:	4611      	mov	r1, r2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe fcf5 	bl	80082ea <USBD_LL_IsoINIncomplete>
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe fd4b 	bl	80083b2 <USBD_LL_DevConnected>
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009932:	4618      	mov	r0, r3
 8009934:	f7fe fd48 	bl	80083c8 <USBD_LL_DevDisconnected>
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d13c      	bne.n	80099ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009950:	4a20      	ldr	r2, [pc, #128]	@ (80099d4 <USBD_LL_Init+0x94>)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a1e      	ldr	r2, [pc, #120]	@ (80099d4 <USBD_LL_Init+0x94>)
 800995c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009960:	4b1c      	ldr	r3, [pc, #112]	@ (80099d4 <USBD_LL_Init+0x94>)
 8009962:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009966:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009968:	4b1a      	ldr	r3, [pc, #104]	@ (80099d4 <USBD_LL_Init+0x94>)
 800996a:	2204      	movs	r2, #4
 800996c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800996e:	4b19      	ldr	r3, [pc, #100]	@ (80099d4 <USBD_LL_Init+0x94>)
 8009970:	2202      	movs	r2, #2
 8009972:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009974:	4b17      	ldr	r3, [pc, #92]	@ (80099d4 <USBD_LL_Init+0x94>)
 8009976:	2200      	movs	r2, #0
 8009978:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800997a:	4b16      	ldr	r3, [pc, #88]	@ (80099d4 <USBD_LL_Init+0x94>)
 800997c:	2202      	movs	r2, #2
 800997e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009980:	4b14      	ldr	r3, [pc, #80]	@ (80099d4 <USBD_LL_Init+0x94>)
 8009982:	2200      	movs	r2, #0
 8009984:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009986:	4b13      	ldr	r3, [pc, #76]	@ (80099d4 <USBD_LL_Init+0x94>)
 8009988:	2200      	movs	r2, #0
 800998a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800998c:	4b11      	ldr	r3, [pc, #68]	@ (80099d4 <USBD_LL_Init+0x94>)
 800998e:	2200      	movs	r2, #0
 8009990:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009992:	4b10      	ldr	r3, [pc, #64]	@ (80099d4 <USBD_LL_Init+0x94>)
 8009994:	2200      	movs	r2, #0
 8009996:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009998:	4b0e      	ldr	r3, [pc, #56]	@ (80099d4 <USBD_LL_Init+0x94>)
 800999a:	2200      	movs	r2, #0
 800999c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800999e:	480d      	ldr	r0, [pc, #52]	@ (80099d4 <USBD_LL_Init+0x94>)
 80099a0:	f7fa fa92 	bl	8003ec8 <HAL_PCD_Init>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80099aa:	f7f7 fd17 	bl	80013dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80099ae:	2180      	movs	r1, #128	@ 0x80
 80099b0:	4808      	ldr	r0, [pc, #32]	@ (80099d4 <USBD_LL_Init+0x94>)
 80099b2:	f7fb fcbe 	bl	8005332 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80099b6:	2240      	movs	r2, #64	@ 0x40
 80099b8:	2100      	movs	r1, #0
 80099ba:	4806      	ldr	r0, [pc, #24]	@ (80099d4 <USBD_LL_Init+0x94>)
 80099bc:	f7fb fc72 	bl	80052a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80099c0:	2280      	movs	r2, #128	@ 0x80
 80099c2:	2101      	movs	r1, #1
 80099c4:	4803      	ldr	r0, [pc, #12]	@ (80099d4 <USBD_LL_Init+0x94>)
 80099c6:	f7fb fc6d 	bl	80052a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	20001954 	.word	0x20001954

080099d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fa fb79 	bl	80040e6 <HAL_PCD_Start>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f000 f942 	bl	8009c84 <USBD_Get_USB_Status>
 8009a00:	4603      	mov	r3, r0
 8009a02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a04:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	4608      	mov	r0, r1
 8009a18:	4611      	mov	r1, r2
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	70fb      	strb	r3, [r7, #3]
 8009a20:	460b      	mov	r3, r1
 8009a22:	70bb      	strb	r3, [r7, #2]
 8009a24:	4613      	mov	r3, r2
 8009a26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009a36:	78bb      	ldrb	r3, [r7, #2]
 8009a38:	883a      	ldrh	r2, [r7, #0]
 8009a3a:	78f9      	ldrb	r1, [r7, #3]
 8009a3c:	f7fb f84d 	bl	8004ada <HAL_PCD_EP_Open>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 f91c 	bl	8009c84 <USBD_Get_USB_Status>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a50:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	460b      	mov	r3, r1
 8009a64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a66:	2300      	movs	r3, #0
 8009a68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a74:	78fa      	ldrb	r2, [r7, #3]
 8009a76:	4611      	mov	r1, r2
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fb f898 	bl	8004bae <HAL_PCD_EP_Close>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 f8fd 	bl	8009c84 <USBD_Get_USB_Status>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ab2:	78fa      	ldrb	r2, [r7, #3]
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fb f950 	bl	8004d5c <HAL_PCD_EP_SetStall>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 f8de 	bl	8009c84 <USBD_Get_USB_Status>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009acc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b084      	sub	sp, #16
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	460b      	mov	r3, r1
 8009ae0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009af0:	78fa      	ldrb	r2, [r7, #3]
 8009af2:	4611      	mov	r1, r2
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7fb f994 	bl	8004e22 <HAL_PCD_EP_ClrStall>
 8009afa:	4603      	mov	r3, r0
 8009afc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 f8bf 	bl	8009c84 <USBD_Get_USB_Status>
 8009b06:	4603      	mov	r3, r0
 8009b08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	da0b      	bge.n	8009b48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b30:	78fb      	ldrb	r3, [r7, #3]
 8009b32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b36:	68f9      	ldr	r1, [r7, #12]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	4413      	add	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	440b      	add	r3, r1
 8009b42:	3316      	adds	r3, #22
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	e00b      	b.n	8009b60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b48:	78fb      	ldrb	r3, [r7, #3]
 8009b4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b4e:	68f9      	ldr	r1, [r7, #12]
 8009b50:	4613      	mov	r3, r2
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	4413      	add	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	440b      	add	r3, r1
 8009b5a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009b5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	460b      	mov	r3, r1
 8009b76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b86:	78fa      	ldrb	r2, [r7, #3]
 8009b88:	4611      	mov	r1, r2
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fa ff81 	bl	8004a92 <HAL_PCD_SetAddress>
 8009b90:	4603      	mov	r3, r0
 8009b92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f000 f874 	bl	8009c84 <USBD_Get_USB_Status>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ba0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b086      	sub	sp, #24
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	60f8      	str	r0, [r7, #12]
 8009bb2:	607a      	str	r2, [r7, #4]
 8009bb4:	603b      	str	r3, [r7, #0]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009bc8:	7af9      	ldrb	r1, [r7, #11]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	f7fb f88b 	bl	8004ce8 <HAL_PCD_EP_Transmit>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 f853 	bl	8009c84 <USBD_Get_USB_Status>
 8009bde:	4603      	mov	r3, r0
 8009be0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009be2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3718      	adds	r7, #24
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b086      	sub	sp, #24
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	607a      	str	r2, [r7, #4]
 8009bf6:	603b      	str	r3, [r7, #0]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009c0a:	7af9      	ldrb	r1, [r7, #11]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	f7fb f817 	bl	8004c42 <HAL_PCD_EP_Receive>
 8009c14:	4603      	mov	r3, r0
 8009c16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c18:	7dfb      	ldrb	r3, [r7, #23]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f000 f832 	bl	8009c84 <USBD_Get_USB_Status>
 8009c20:	4603      	mov	r3, r0
 8009c22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c24:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3718      	adds	r7, #24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b082      	sub	sp, #8
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
 8009c36:	460b      	mov	r3, r1
 8009c38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c40:	78fa      	ldrb	r2, [r7, #3]
 8009c42:	4611      	mov	r1, r2
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fb f837 	bl	8004cb8 <HAL_PCD_EP_GetRxCount>
 8009c4a:	4603      	mov	r3, r0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c5c:	4b03      	ldr	r3, [pc, #12]	@ (8009c6c <USBD_static_malloc+0x18>)
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	370c      	adds	r7, #12
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	20001e38 	.word	0x20001e38

08009c70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]

}
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c92:	79fb      	ldrb	r3, [r7, #7]
 8009c94:	2b03      	cmp	r3, #3
 8009c96:	d817      	bhi.n	8009cc8 <USBD_Get_USB_Status+0x44>
 8009c98:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca0 <USBD_Get_USB_Status+0x1c>)
 8009c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9e:	bf00      	nop
 8009ca0:	08009cb1 	.word	0x08009cb1
 8009ca4:	08009cb7 	.word	0x08009cb7
 8009ca8:	08009cbd 	.word	0x08009cbd
 8009cac:	08009cc3 	.word	0x08009cc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb4:	e00b      	b.n	8009cce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	73fb      	strb	r3, [r7, #15]
    break;
 8009cba:	e008      	b.n	8009cce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009cc0:	e005      	b.n	8009cce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	73fb      	strb	r3, [r7, #15]
    break;
 8009cc6:	e002      	b.n	8009cce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	73fb      	strb	r3, [r7, #15]
    break;
 8009ccc:	bf00      	nop
  }
  return usb_status;
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <__cvt>:
 8009cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce0:	ec57 6b10 	vmov	r6, r7, d0
 8009ce4:	2f00      	cmp	r7, #0
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	4619      	mov	r1, r3
 8009cea:	463b      	mov	r3, r7
 8009cec:	bfbb      	ittet	lt
 8009cee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009cf2:	461f      	movlt	r7, r3
 8009cf4:	2300      	movge	r3, #0
 8009cf6:	232d      	movlt	r3, #45	@ 0x2d
 8009cf8:	700b      	strb	r3, [r1, #0]
 8009cfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cfc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009d00:	4691      	mov	r9, r2
 8009d02:	f023 0820 	bic.w	r8, r3, #32
 8009d06:	bfbc      	itt	lt
 8009d08:	4632      	movlt	r2, r6
 8009d0a:	4616      	movlt	r6, r2
 8009d0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d10:	d005      	beq.n	8009d1e <__cvt+0x42>
 8009d12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009d16:	d100      	bne.n	8009d1a <__cvt+0x3e>
 8009d18:	3401      	adds	r4, #1
 8009d1a:	2102      	movs	r1, #2
 8009d1c:	e000      	b.n	8009d20 <__cvt+0x44>
 8009d1e:	2103      	movs	r1, #3
 8009d20:	ab03      	add	r3, sp, #12
 8009d22:	9301      	str	r3, [sp, #4]
 8009d24:	ab02      	add	r3, sp, #8
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	ec47 6b10 	vmov	d0, r6, r7
 8009d2c:	4653      	mov	r3, sl
 8009d2e:	4622      	mov	r2, r4
 8009d30:	f000 fe6e 	bl	800aa10 <_dtoa_r>
 8009d34:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009d38:	4605      	mov	r5, r0
 8009d3a:	d119      	bne.n	8009d70 <__cvt+0x94>
 8009d3c:	f019 0f01 	tst.w	r9, #1
 8009d40:	d00e      	beq.n	8009d60 <__cvt+0x84>
 8009d42:	eb00 0904 	add.w	r9, r0, r4
 8009d46:	2200      	movs	r2, #0
 8009d48:	2300      	movs	r3, #0
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	4639      	mov	r1, r7
 8009d4e:	f7f6 febb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d52:	b108      	cbz	r0, 8009d58 <__cvt+0x7c>
 8009d54:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d58:	2230      	movs	r2, #48	@ 0x30
 8009d5a:	9b03      	ldr	r3, [sp, #12]
 8009d5c:	454b      	cmp	r3, r9
 8009d5e:	d31e      	bcc.n	8009d9e <__cvt+0xc2>
 8009d60:	9b03      	ldr	r3, [sp, #12]
 8009d62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d64:	1b5b      	subs	r3, r3, r5
 8009d66:	4628      	mov	r0, r5
 8009d68:	6013      	str	r3, [r2, #0]
 8009d6a:	b004      	add	sp, #16
 8009d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d74:	eb00 0904 	add.w	r9, r0, r4
 8009d78:	d1e5      	bne.n	8009d46 <__cvt+0x6a>
 8009d7a:	7803      	ldrb	r3, [r0, #0]
 8009d7c:	2b30      	cmp	r3, #48	@ 0x30
 8009d7e:	d10a      	bne.n	8009d96 <__cvt+0xba>
 8009d80:	2200      	movs	r2, #0
 8009d82:	2300      	movs	r3, #0
 8009d84:	4630      	mov	r0, r6
 8009d86:	4639      	mov	r1, r7
 8009d88:	f7f6 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d8c:	b918      	cbnz	r0, 8009d96 <__cvt+0xba>
 8009d8e:	f1c4 0401 	rsb	r4, r4, #1
 8009d92:	f8ca 4000 	str.w	r4, [sl]
 8009d96:	f8da 3000 	ldr.w	r3, [sl]
 8009d9a:	4499      	add	r9, r3
 8009d9c:	e7d3      	b.n	8009d46 <__cvt+0x6a>
 8009d9e:	1c59      	adds	r1, r3, #1
 8009da0:	9103      	str	r1, [sp, #12]
 8009da2:	701a      	strb	r2, [r3, #0]
 8009da4:	e7d9      	b.n	8009d5a <__cvt+0x7e>

08009da6 <__exponent>:
 8009da6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009da8:	2900      	cmp	r1, #0
 8009daa:	bfba      	itte	lt
 8009dac:	4249      	neglt	r1, r1
 8009dae:	232d      	movlt	r3, #45	@ 0x2d
 8009db0:	232b      	movge	r3, #43	@ 0x2b
 8009db2:	2909      	cmp	r1, #9
 8009db4:	7002      	strb	r2, [r0, #0]
 8009db6:	7043      	strb	r3, [r0, #1]
 8009db8:	dd29      	ble.n	8009e0e <__exponent+0x68>
 8009dba:	f10d 0307 	add.w	r3, sp, #7
 8009dbe:	461d      	mov	r5, r3
 8009dc0:	270a      	movs	r7, #10
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	fbb1 f6f7 	udiv	r6, r1, r7
 8009dc8:	fb07 1416 	mls	r4, r7, r6, r1
 8009dcc:	3430      	adds	r4, #48	@ 0x30
 8009dce:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	2c63      	cmp	r4, #99	@ 0x63
 8009dd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8009dda:	4631      	mov	r1, r6
 8009ddc:	dcf1      	bgt.n	8009dc2 <__exponent+0x1c>
 8009dde:	3130      	adds	r1, #48	@ 0x30
 8009de0:	1e94      	subs	r4, r2, #2
 8009de2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009de6:	1c41      	adds	r1, r0, #1
 8009de8:	4623      	mov	r3, r4
 8009dea:	42ab      	cmp	r3, r5
 8009dec:	d30a      	bcc.n	8009e04 <__exponent+0x5e>
 8009dee:	f10d 0309 	add.w	r3, sp, #9
 8009df2:	1a9b      	subs	r3, r3, r2
 8009df4:	42ac      	cmp	r4, r5
 8009df6:	bf88      	it	hi
 8009df8:	2300      	movhi	r3, #0
 8009dfa:	3302      	adds	r3, #2
 8009dfc:	4403      	add	r3, r0
 8009dfe:	1a18      	subs	r0, r3, r0
 8009e00:	b003      	add	sp, #12
 8009e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e04:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009e08:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009e0c:	e7ed      	b.n	8009dea <__exponent+0x44>
 8009e0e:	2330      	movs	r3, #48	@ 0x30
 8009e10:	3130      	adds	r1, #48	@ 0x30
 8009e12:	7083      	strb	r3, [r0, #2]
 8009e14:	70c1      	strb	r1, [r0, #3]
 8009e16:	1d03      	adds	r3, r0, #4
 8009e18:	e7f1      	b.n	8009dfe <__exponent+0x58>
	...

08009e1c <_printf_float>:
 8009e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	b08d      	sub	sp, #52	@ 0x34
 8009e22:	460c      	mov	r4, r1
 8009e24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009e28:	4616      	mov	r6, r2
 8009e2a:	461f      	mov	r7, r3
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	f000 fcef 	bl	800a810 <_localeconv_r>
 8009e32:	6803      	ldr	r3, [r0, #0]
 8009e34:	9304      	str	r3, [sp, #16]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7f6 fa1a 	bl	8000270 <strlen>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e40:	f8d8 3000 	ldr.w	r3, [r8]
 8009e44:	9005      	str	r0, [sp, #20]
 8009e46:	3307      	adds	r3, #7
 8009e48:	f023 0307 	bic.w	r3, r3, #7
 8009e4c:	f103 0208 	add.w	r2, r3, #8
 8009e50:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009e54:	f8d4 b000 	ldr.w	fp, [r4]
 8009e58:	f8c8 2000 	str.w	r2, [r8]
 8009e5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009e64:	9307      	str	r3, [sp, #28]
 8009e66:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009e6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e72:	4b9c      	ldr	r3, [pc, #624]	@ (800a0e4 <_printf_float+0x2c8>)
 8009e74:	f04f 32ff 	mov.w	r2, #4294967295
 8009e78:	f7f6 fe58 	bl	8000b2c <__aeabi_dcmpun>
 8009e7c:	bb70      	cbnz	r0, 8009edc <_printf_float+0xc0>
 8009e7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e82:	4b98      	ldr	r3, [pc, #608]	@ (800a0e4 <_printf_float+0x2c8>)
 8009e84:	f04f 32ff 	mov.w	r2, #4294967295
 8009e88:	f7f6 fe32 	bl	8000af0 <__aeabi_dcmple>
 8009e8c:	bb30      	cbnz	r0, 8009edc <_printf_float+0xc0>
 8009e8e:	2200      	movs	r2, #0
 8009e90:	2300      	movs	r3, #0
 8009e92:	4640      	mov	r0, r8
 8009e94:	4649      	mov	r1, r9
 8009e96:	f7f6 fe21 	bl	8000adc <__aeabi_dcmplt>
 8009e9a:	b110      	cbz	r0, 8009ea2 <_printf_float+0x86>
 8009e9c:	232d      	movs	r3, #45	@ 0x2d
 8009e9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ea2:	4a91      	ldr	r2, [pc, #580]	@ (800a0e8 <_printf_float+0x2cc>)
 8009ea4:	4b91      	ldr	r3, [pc, #580]	@ (800a0ec <_printf_float+0x2d0>)
 8009ea6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009eaa:	bf94      	ite	ls
 8009eac:	4690      	movls	r8, r2
 8009eae:	4698      	movhi	r8, r3
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	6123      	str	r3, [r4, #16]
 8009eb4:	f02b 0304 	bic.w	r3, fp, #4
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	f04f 0900 	mov.w	r9, #0
 8009ebe:	9700      	str	r7, [sp, #0]
 8009ec0:	4633      	mov	r3, r6
 8009ec2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	f000 f9d2 	bl	800a270 <_printf_common>
 8009ecc:	3001      	adds	r0, #1
 8009ece:	f040 808d 	bne.w	8009fec <_printf_float+0x1d0>
 8009ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed6:	b00d      	add	sp, #52	@ 0x34
 8009ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009edc:	4642      	mov	r2, r8
 8009ede:	464b      	mov	r3, r9
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	4649      	mov	r1, r9
 8009ee4:	f7f6 fe22 	bl	8000b2c <__aeabi_dcmpun>
 8009ee8:	b140      	cbz	r0, 8009efc <_printf_float+0xe0>
 8009eea:	464b      	mov	r3, r9
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	bfbc      	itt	lt
 8009ef0:	232d      	movlt	r3, #45	@ 0x2d
 8009ef2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009ef6:	4a7e      	ldr	r2, [pc, #504]	@ (800a0f0 <_printf_float+0x2d4>)
 8009ef8:	4b7e      	ldr	r3, [pc, #504]	@ (800a0f4 <_printf_float+0x2d8>)
 8009efa:	e7d4      	b.n	8009ea6 <_printf_float+0x8a>
 8009efc:	6863      	ldr	r3, [r4, #4]
 8009efe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009f02:	9206      	str	r2, [sp, #24]
 8009f04:	1c5a      	adds	r2, r3, #1
 8009f06:	d13b      	bne.n	8009f80 <_printf_float+0x164>
 8009f08:	2306      	movs	r3, #6
 8009f0a:	6063      	str	r3, [r4, #4]
 8009f0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009f10:	2300      	movs	r3, #0
 8009f12:	6022      	str	r2, [r4, #0]
 8009f14:	9303      	str	r3, [sp, #12]
 8009f16:	ab0a      	add	r3, sp, #40	@ 0x28
 8009f18:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009f1c:	ab09      	add	r3, sp, #36	@ 0x24
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	6861      	ldr	r1, [r4, #4]
 8009f22:	ec49 8b10 	vmov	d0, r8, r9
 8009f26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f7ff fed6 	bl	8009cdc <__cvt>
 8009f30:	9b06      	ldr	r3, [sp, #24]
 8009f32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f34:	2b47      	cmp	r3, #71	@ 0x47
 8009f36:	4680      	mov	r8, r0
 8009f38:	d129      	bne.n	8009f8e <_printf_float+0x172>
 8009f3a:	1cc8      	adds	r0, r1, #3
 8009f3c:	db02      	blt.n	8009f44 <_printf_float+0x128>
 8009f3e:	6863      	ldr	r3, [r4, #4]
 8009f40:	4299      	cmp	r1, r3
 8009f42:	dd41      	ble.n	8009fc8 <_printf_float+0x1ac>
 8009f44:	f1aa 0a02 	sub.w	sl, sl, #2
 8009f48:	fa5f fa8a 	uxtb.w	sl, sl
 8009f4c:	3901      	subs	r1, #1
 8009f4e:	4652      	mov	r2, sl
 8009f50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009f54:	9109      	str	r1, [sp, #36]	@ 0x24
 8009f56:	f7ff ff26 	bl	8009da6 <__exponent>
 8009f5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f5c:	1813      	adds	r3, r2, r0
 8009f5e:	2a01      	cmp	r2, #1
 8009f60:	4681      	mov	r9, r0
 8009f62:	6123      	str	r3, [r4, #16]
 8009f64:	dc02      	bgt.n	8009f6c <_printf_float+0x150>
 8009f66:	6822      	ldr	r2, [r4, #0]
 8009f68:	07d2      	lsls	r2, r2, #31
 8009f6a:	d501      	bpl.n	8009f70 <_printf_float+0x154>
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	6123      	str	r3, [r4, #16]
 8009f70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0a2      	beq.n	8009ebe <_printf_float+0xa2>
 8009f78:	232d      	movs	r3, #45	@ 0x2d
 8009f7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f7e:	e79e      	b.n	8009ebe <_printf_float+0xa2>
 8009f80:	9a06      	ldr	r2, [sp, #24]
 8009f82:	2a47      	cmp	r2, #71	@ 0x47
 8009f84:	d1c2      	bne.n	8009f0c <_printf_float+0xf0>
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1c0      	bne.n	8009f0c <_printf_float+0xf0>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e7bd      	b.n	8009f0a <_printf_float+0xee>
 8009f8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f92:	d9db      	bls.n	8009f4c <_printf_float+0x130>
 8009f94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009f98:	d118      	bne.n	8009fcc <_printf_float+0x1b0>
 8009f9a:	2900      	cmp	r1, #0
 8009f9c:	6863      	ldr	r3, [r4, #4]
 8009f9e:	dd0b      	ble.n	8009fb8 <_printf_float+0x19c>
 8009fa0:	6121      	str	r1, [r4, #16]
 8009fa2:	b913      	cbnz	r3, 8009faa <_printf_float+0x18e>
 8009fa4:	6822      	ldr	r2, [r4, #0]
 8009fa6:	07d0      	lsls	r0, r2, #31
 8009fa8:	d502      	bpl.n	8009fb0 <_printf_float+0x194>
 8009faa:	3301      	adds	r3, #1
 8009fac:	440b      	add	r3, r1
 8009fae:	6123      	str	r3, [r4, #16]
 8009fb0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009fb2:	f04f 0900 	mov.w	r9, #0
 8009fb6:	e7db      	b.n	8009f70 <_printf_float+0x154>
 8009fb8:	b913      	cbnz	r3, 8009fc0 <_printf_float+0x1a4>
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	07d2      	lsls	r2, r2, #31
 8009fbe:	d501      	bpl.n	8009fc4 <_printf_float+0x1a8>
 8009fc0:	3302      	adds	r3, #2
 8009fc2:	e7f4      	b.n	8009fae <_printf_float+0x192>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e7f2      	b.n	8009fae <_printf_float+0x192>
 8009fc8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fce:	4299      	cmp	r1, r3
 8009fd0:	db05      	blt.n	8009fde <_printf_float+0x1c2>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	6121      	str	r1, [r4, #16]
 8009fd6:	07d8      	lsls	r0, r3, #31
 8009fd8:	d5ea      	bpl.n	8009fb0 <_printf_float+0x194>
 8009fda:	1c4b      	adds	r3, r1, #1
 8009fdc:	e7e7      	b.n	8009fae <_printf_float+0x192>
 8009fde:	2900      	cmp	r1, #0
 8009fe0:	bfd4      	ite	le
 8009fe2:	f1c1 0202 	rsble	r2, r1, #2
 8009fe6:	2201      	movgt	r2, #1
 8009fe8:	4413      	add	r3, r2
 8009fea:	e7e0      	b.n	8009fae <_printf_float+0x192>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	055a      	lsls	r2, r3, #21
 8009ff0:	d407      	bmi.n	800a002 <_printf_float+0x1e6>
 8009ff2:	6923      	ldr	r3, [r4, #16]
 8009ff4:	4642      	mov	r2, r8
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	47b8      	blx	r7
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	d12b      	bne.n	800a058 <_printf_float+0x23c>
 800a000:	e767      	b.n	8009ed2 <_printf_float+0xb6>
 800a002:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a006:	f240 80dd 	bls.w	800a1c4 <_printf_float+0x3a8>
 800a00a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a00e:	2200      	movs	r2, #0
 800a010:	2300      	movs	r3, #0
 800a012:	f7f6 fd59 	bl	8000ac8 <__aeabi_dcmpeq>
 800a016:	2800      	cmp	r0, #0
 800a018:	d033      	beq.n	800a082 <_printf_float+0x266>
 800a01a:	4a37      	ldr	r2, [pc, #220]	@ (800a0f8 <_printf_float+0x2dc>)
 800a01c:	2301      	movs	r3, #1
 800a01e:	4631      	mov	r1, r6
 800a020:	4628      	mov	r0, r5
 800a022:	47b8      	blx	r7
 800a024:	3001      	adds	r0, #1
 800a026:	f43f af54 	beq.w	8009ed2 <_printf_float+0xb6>
 800a02a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a02e:	4543      	cmp	r3, r8
 800a030:	db02      	blt.n	800a038 <_printf_float+0x21c>
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	07d8      	lsls	r0, r3, #31
 800a036:	d50f      	bpl.n	800a058 <_printf_float+0x23c>
 800a038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a03c:	4631      	mov	r1, r6
 800a03e:	4628      	mov	r0, r5
 800a040:	47b8      	blx	r7
 800a042:	3001      	adds	r0, #1
 800a044:	f43f af45 	beq.w	8009ed2 <_printf_float+0xb6>
 800a048:	f04f 0900 	mov.w	r9, #0
 800a04c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a050:	f104 0a1a 	add.w	sl, r4, #26
 800a054:	45c8      	cmp	r8, r9
 800a056:	dc09      	bgt.n	800a06c <_printf_float+0x250>
 800a058:	6823      	ldr	r3, [r4, #0]
 800a05a:	079b      	lsls	r3, r3, #30
 800a05c:	f100 8103 	bmi.w	800a266 <_printf_float+0x44a>
 800a060:	68e0      	ldr	r0, [r4, #12]
 800a062:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a064:	4298      	cmp	r0, r3
 800a066:	bfb8      	it	lt
 800a068:	4618      	movlt	r0, r3
 800a06a:	e734      	b.n	8009ed6 <_printf_float+0xba>
 800a06c:	2301      	movs	r3, #1
 800a06e:	4652      	mov	r2, sl
 800a070:	4631      	mov	r1, r6
 800a072:	4628      	mov	r0, r5
 800a074:	47b8      	blx	r7
 800a076:	3001      	adds	r0, #1
 800a078:	f43f af2b 	beq.w	8009ed2 <_printf_float+0xb6>
 800a07c:	f109 0901 	add.w	r9, r9, #1
 800a080:	e7e8      	b.n	800a054 <_printf_float+0x238>
 800a082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a084:	2b00      	cmp	r3, #0
 800a086:	dc39      	bgt.n	800a0fc <_printf_float+0x2e0>
 800a088:	4a1b      	ldr	r2, [pc, #108]	@ (800a0f8 <_printf_float+0x2dc>)
 800a08a:	2301      	movs	r3, #1
 800a08c:	4631      	mov	r1, r6
 800a08e:	4628      	mov	r0, r5
 800a090:	47b8      	blx	r7
 800a092:	3001      	adds	r0, #1
 800a094:	f43f af1d 	beq.w	8009ed2 <_printf_float+0xb6>
 800a098:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a09c:	ea59 0303 	orrs.w	r3, r9, r3
 800a0a0:	d102      	bne.n	800a0a8 <_printf_float+0x28c>
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	07d9      	lsls	r1, r3, #31
 800a0a6:	d5d7      	bpl.n	800a058 <_printf_float+0x23c>
 800a0a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	47b8      	blx	r7
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	f43f af0d 	beq.w	8009ed2 <_printf_float+0xb6>
 800a0b8:	f04f 0a00 	mov.w	sl, #0
 800a0bc:	f104 0b1a 	add.w	fp, r4, #26
 800a0c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c2:	425b      	negs	r3, r3
 800a0c4:	4553      	cmp	r3, sl
 800a0c6:	dc01      	bgt.n	800a0cc <_printf_float+0x2b0>
 800a0c8:	464b      	mov	r3, r9
 800a0ca:	e793      	b.n	8009ff4 <_printf_float+0x1d8>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	465a      	mov	r2, fp
 800a0d0:	4631      	mov	r1, r6
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	47b8      	blx	r7
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	f43f aefb 	beq.w	8009ed2 <_printf_float+0xb6>
 800a0dc:	f10a 0a01 	add.w	sl, sl, #1
 800a0e0:	e7ee      	b.n	800a0c0 <_printf_float+0x2a4>
 800a0e2:	bf00      	nop
 800a0e4:	7fefffff 	.word	0x7fefffff
 800a0e8:	0800dc30 	.word	0x0800dc30
 800a0ec:	0800dc34 	.word	0x0800dc34
 800a0f0:	0800dc38 	.word	0x0800dc38
 800a0f4:	0800dc3c 	.word	0x0800dc3c
 800a0f8:	0800dc40 	.word	0x0800dc40
 800a0fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a102:	4553      	cmp	r3, sl
 800a104:	bfa8      	it	ge
 800a106:	4653      	movge	r3, sl
 800a108:	2b00      	cmp	r3, #0
 800a10a:	4699      	mov	r9, r3
 800a10c:	dc36      	bgt.n	800a17c <_printf_float+0x360>
 800a10e:	f04f 0b00 	mov.w	fp, #0
 800a112:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a116:	f104 021a 	add.w	r2, r4, #26
 800a11a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a11c:	9306      	str	r3, [sp, #24]
 800a11e:	eba3 0309 	sub.w	r3, r3, r9
 800a122:	455b      	cmp	r3, fp
 800a124:	dc31      	bgt.n	800a18a <_printf_float+0x36e>
 800a126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a128:	459a      	cmp	sl, r3
 800a12a:	dc3a      	bgt.n	800a1a2 <_printf_float+0x386>
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	07da      	lsls	r2, r3, #31
 800a130:	d437      	bmi.n	800a1a2 <_printf_float+0x386>
 800a132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a134:	ebaa 0903 	sub.w	r9, sl, r3
 800a138:	9b06      	ldr	r3, [sp, #24]
 800a13a:	ebaa 0303 	sub.w	r3, sl, r3
 800a13e:	4599      	cmp	r9, r3
 800a140:	bfa8      	it	ge
 800a142:	4699      	movge	r9, r3
 800a144:	f1b9 0f00 	cmp.w	r9, #0
 800a148:	dc33      	bgt.n	800a1b2 <_printf_float+0x396>
 800a14a:	f04f 0800 	mov.w	r8, #0
 800a14e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a152:	f104 0b1a 	add.w	fp, r4, #26
 800a156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a158:	ebaa 0303 	sub.w	r3, sl, r3
 800a15c:	eba3 0309 	sub.w	r3, r3, r9
 800a160:	4543      	cmp	r3, r8
 800a162:	f77f af79 	ble.w	800a058 <_printf_float+0x23c>
 800a166:	2301      	movs	r3, #1
 800a168:	465a      	mov	r2, fp
 800a16a:	4631      	mov	r1, r6
 800a16c:	4628      	mov	r0, r5
 800a16e:	47b8      	blx	r7
 800a170:	3001      	adds	r0, #1
 800a172:	f43f aeae 	beq.w	8009ed2 <_printf_float+0xb6>
 800a176:	f108 0801 	add.w	r8, r8, #1
 800a17a:	e7ec      	b.n	800a156 <_printf_float+0x33a>
 800a17c:	4642      	mov	r2, r8
 800a17e:	4631      	mov	r1, r6
 800a180:	4628      	mov	r0, r5
 800a182:	47b8      	blx	r7
 800a184:	3001      	adds	r0, #1
 800a186:	d1c2      	bne.n	800a10e <_printf_float+0x2f2>
 800a188:	e6a3      	b.n	8009ed2 <_printf_float+0xb6>
 800a18a:	2301      	movs	r3, #1
 800a18c:	4631      	mov	r1, r6
 800a18e:	4628      	mov	r0, r5
 800a190:	9206      	str	r2, [sp, #24]
 800a192:	47b8      	blx	r7
 800a194:	3001      	adds	r0, #1
 800a196:	f43f ae9c 	beq.w	8009ed2 <_printf_float+0xb6>
 800a19a:	9a06      	ldr	r2, [sp, #24]
 800a19c:	f10b 0b01 	add.w	fp, fp, #1
 800a1a0:	e7bb      	b.n	800a11a <_printf_float+0x2fe>
 800a1a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1a6:	4631      	mov	r1, r6
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	47b8      	blx	r7
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d1c0      	bne.n	800a132 <_printf_float+0x316>
 800a1b0:	e68f      	b.n	8009ed2 <_printf_float+0xb6>
 800a1b2:	9a06      	ldr	r2, [sp, #24]
 800a1b4:	464b      	mov	r3, r9
 800a1b6:	4442      	add	r2, r8
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	47b8      	blx	r7
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d1c3      	bne.n	800a14a <_printf_float+0x32e>
 800a1c2:	e686      	b.n	8009ed2 <_printf_float+0xb6>
 800a1c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a1c8:	f1ba 0f01 	cmp.w	sl, #1
 800a1cc:	dc01      	bgt.n	800a1d2 <_printf_float+0x3b6>
 800a1ce:	07db      	lsls	r3, r3, #31
 800a1d0:	d536      	bpl.n	800a240 <_printf_float+0x424>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	4642      	mov	r2, r8
 800a1d6:	4631      	mov	r1, r6
 800a1d8:	4628      	mov	r0, r5
 800a1da:	47b8      	blx	r7
 800a1dc:	3001      	adds	r0, #1
 800a1de:	f43f ae78 	beq.w	8009ed2 <_printf_float+0xb6>
 800a1e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1e6:	4631      	mov	r1, r6
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	47b8      	blx	r7
 800a1ec:	3001      	adds	r0, #1
 800a1ee:	f43f ae70 	beq.w	8009ed2 <_printf_float+0xb6>
 800a1f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1fe:	f7f6 fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 800a202:	b9c0      	cbnz	r0, 800a236 <_printf_float+0x41a>
 800a204:	4653      	mov	r3, sl
 800a206:	f108 0201 	add.w	r2, r8, #1
 800a20a:	4631      	mov	r1, r6
 800a20c:	4628      	mov	r0, r5
 800a20e:	47b8      	blx	r7
 800a210:	3001      	adds	r0, #1
 800a212:	d10c      	bne.n	800a22e <_printf_float+0x412>
 800a214:	e65d      	b.n	8009ed2 <_printf_float+0xb6>
 800a216:	2301      	movs	r3, #1
 800a218:	465a      	mov	r2, fp
 800a21a:	4631      	mov	r1, r6
 800a21c:	4628      	mov	r0, r5
 800a21e:	47b8      	blx	r7
 800a220:	3001      	adds	r0, #1
 800a222:	f43f ae56 	beq.w	8009ed2 <_printf_float+0xb6>
 800a226:	f108 0801 	add.w	r8, r8, #1
 800a22a:	45d0      	cmp	r8, sl
 800a22c:	dbf3      	blt.n	800a216 <_printf_float+0x3fa>
 800a22e:	464b      	mov	r3, r9
 800a230:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a234:	e6df      	b.n	8009ff6 <_printf_float+0x1da>
 800a236:	f04f 0800 	mov.w	r8, #0
 800a23a:	f104 0b1a 	add.w	fp, r4, #26
 800a23e:	e7f4      	b.n	800a22a <_printf_float+0x40e>
 800a240:	2301      	movs	r3, #1
 800a242:	4642      	mov	r2, r8
 800a244:	e7e1      	b.n	800a20a <_printf_float+0x3ee>
 800a246:	2301      	movs	r3, #1
 800a248:	464a      	mov	r2, r9
 800a24a:	4631      	mov	r1, r6
 800a24c:	4628      	mov	r0, r5
 800a24e:	47b8      	blx	r7
 800a250:	3001      	adds	r0, #1
 800a252:	f43f ae3e 	beq.w	8009ed2 <_printf_float+0xb6>
 800a256:	f108 0801 	add.w	r8, r8, #1
 800a25a:	68e3      	ldr	r3, [r4, #12]
 800a25c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a25e:	1a5b      	subs	r3, r3, r1
 800a260:	4543      	cmp	r3, r8
 800a262:	dcf0      	bgt.n	800a246 <_printf_float+0x42a>
 800a264:	e6fc      	b.n	800a060 <_printf_float+0x244>
 800a266:	f04f 0800 	mov.w	r8, #0
 800a26a:	f104 0919 	add.w	r9, r4, #25
 800a26e:	e7f4      	b.n	800a25a <_printf_float+0x43e>

0800a270 <_printf_common>:
 800a270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a274:	4616      	mov	r6, r2
 800a276:	4698      	mov	r8, r3
 800a278:	688a      	ldr	r2, [r1, #8]
 800a27a:	690b      	ldr	r3, [r1, #16]
 800a27c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a280:	4293      	cmp	r3, r2
 800a282:	bfb8      	it	lt
 800a284:	4613      	movlt	r3, r2
 800a286:	6033      	str	r3, [r6, #0]
 800a288:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a28c:	4607      	mov	r7, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	b10a      	cbz	r2, 800a296 <_printf_common+0x26>
 800a292:	3301      	adds	r3, #1
 800a294:	6033      	str	r3, [r6, #0]
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	0699      	lsls	r1, r3, #26
 800a29a:	bf42      	ittt	mi
 800a29c:	6833      	ldrmi	r3, [r6, #0]
 800a29e:	3302      	addmi	r3, #2
 800a2a0:	6033      	strmi	r3, [r6, #0]
 800a2a2:	6825      	ldr	r5, [r4, #0]
 800a2a4:	f015 0506 	ands.w	r5, r5, #6
 800a2a8:	d106      	bne.n	800a2b8 <_printf_common+0x48>
 800a2aa:	f104 0a19 	add.w	sl, r4, #25
 800a2ae:	68e3      	ldr	r3, [r4, #12]
 800a2b0:	6832      	ldr	r2, [r6, #0]
 800a2b2:	1a9b      	subs	r3, r3, r2
 800a2b4:	42ab      	cmp	r3, r5
 800a2b6:	dc26      	bgt.n	800a306 <_printf_common+0x96>
 800a2b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a2bc:	6822      	ldr	r2, [r4, #0]
 800a2be:	3b00      	subs	r3, #0
 800a2c0:	bf18      	it	ne
 800a2c2:	2301      	movne	r3, #1
 800a2c4:	0692      	lsls	r2, r2, #26
 800a2c6:	d42b      	bmi.n	800a320 <_printf_common+0xb0>
 800a2c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a2cc:	4641      	mov	r1, r8
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	47c8      	blx	r9
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	d01e      	beq.n	800a314 <_printf_common+0xa4>
 800a2d6:	6823      	ldr	r3, [r4, #0]
 800a2d8:	6922      	ldr	r2, [r4, #16]
 800a2da:	f003 0306 	and.w	r3, r3, #6
 800a2de:	2b04      	cmp	r3, #4
 800a2e0:	bf02      	ittt	eq
 800a2e2:	68e5      	ldreq	r5, [r4, #12]
 800a2e4:	6833      	ldreq	r3, [r6, #0]
 800a2e6:	1aed      	subeq	r5, r5, r3
 800a2e8:	68a3      	ldr	r3, [r4, #8]
 800a2ea:	bf0c      	ite	eq
 800a2ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2f0:	2500      	movne	r5, #0
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	bfc4      	itt	gt
 800a2f6:	1a9b      	subgt	r3, r3, r2
 800a2f8:	18ed      	addgt	r5, r5, r3
 800a2fa:	2600      	movs	r6, #0
 800a2fc:	341a      	adds	r4, #26
 800a2fe:	42b5      	cmp	r5, r6
 800a300:	d11a      	bne.n	800a338 <_printf_common+0xc8>
 800a302:	2000      	movs	r0, #0
 800a304:	e008      	b.n	800a318 <_printf_common+0xa8>
 800a306:	2301      	movs	r3, #1
 800a308:	4652      	mov	r2, sl
 800a30a:	4641      	mov	r1, r8
 800a30c:	4638      	mov	r0, r7
 800a30e:	47c8      	blx	r9
 800a310:	3001      	adds	r0, #1
 800a312:	d103      	bne.n	800a31c <_printf_common+0xac>
 800a314:	f04f 30ff 	mov.w	r0, #4294967295
 800a318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a31c:	3501      	adds	r5, #1
 800a31e:	e7c6      	b.n	800a2ae <_printf_common+0x3e>
 800a320:	18e1      	adds	r1, r4, r3
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	2030      	movs	r0, #48	@ 0x30
 800a326:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a32a:	4422      	add	r2, r4
 800a32c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a330:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a334:	3302      	adds	r3, #2
 800a336:	e7c7      	b.n	800a2c8 <_printf_common+0x58>
 800a338:	2301      	movs	r3, #1
 800a33a:	4622      	mov	r2, r4
 800a33c:	4641      	mov	r1, r8
 800a33e:	4638      	mov	r0, r7
 800a340:	47c8      	blx	r9
 800a342:	3001      	adds	r0, #1
 800a344:	d0e6      	beq.n	800a314 <_printf_common+0xa4>
 800a346:	3601      	adds	r6, #1
 800a348:	e7d9      	b.n	800a2fe <_printf_common+0x8e>
	...

0800a34c <_printf_i>:
 800a34c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a350:	7e0f      	ldrb	r7, [r1, #24]
 800a352:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a354:	2f78      	cmp	r7, #120	@ 0x78
 800a356:	4691      	mov	r9, r2
 800a358:	4680      	mov	r8, r0
 800a35a:	460c      	mov	r4, r1
 800a35c:	469a      	mov	sl, r3
 800a35e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a362:	d807      	bhi.n	800a374 <_printf_i+0x28>
 800a364:	2f62      	cmp	r7, #98	@ 0x62
 800a366:	d80a      	bhi.n	800a37e <_printf_i+0x32>
 800a368:	2f00      	cmp	r7, #0
 800a36a:	f000 80d2 	beq.w	800a512 <_printf_i+0x1c6>
 800a36e:	2f58      	cmp	r7, #88	@ 0x58
 800a370:	f000 80b9 	beq.w	800a4e6 <_printf_i+0x19a>
 800a374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a378:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a37c:	e03a      	b.n	800a3f4 <_printf_i+0xa8>
 800a37e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a382:	2b15      	cmp	r3, #21
 800a384:	d8f6      	bhi.n	800a374 <_printf_i+0x28>
 800a386:	a101      	add	r1, pc, #4	@ (adr r1, 800a38c <_printf_i+0x40>)
 800a388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a38c:	0800a3e5 	.word	0x0800a3e5
 800a390:	0800a3f9 	.word	0x0800a3f9
 800a394:	0800a375 	.word	0x0800a375
 800a398:	0800a375 	.word	0x0800a375
 800a39c:	0800a375 	.word	0x0800a375
 800a3a0:	0800a375 	.word	0x0800a375
 800a3a4:	0800a3f9 	.word	0x0800a3f9
 800a3a8:	0800a375 	.word	0x0800a375
 800a3ac:	0800a375 	.word	0x0800a375
 800a3b0:	0800a375 	.word	0x0800a375
 800a3b4:	0800a375 	.word	0x0800a375
 800a3b8:	0800a4f9 	.word	0x0800a4f9
 800a3bc:	0800a423 	.word	0x0800a423
 800a3c0:	0800a4b3 	.word	0x0800a4b3
 800a3c4:	0800a375 	.word	0x0800a375
 800a3c8:	0800a375 	.word	0x0800a375
 800a3cc:	0800a51b 	.word	0x0800a51b
 800a3d0:	0800a375 	.word	0x0800a375
 800a3d4:	0800a423 	.word	0x0800a423
 800a3d8:	0800a375 	.word	0x0800a375
 800a3dc:	0800a375 	.word	0x0800a375
 800a3e0:	0800a4bb 	.word	0x0800a4bb
 800a3e4:	6833      	ldr	r3, [r6, #0]
 800a3e6:	1d1a      	adds	r2, r3, #4
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6032      	str	r2, [r6, #0]
 800a3ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e09d      	b.n	800a534 <_printf_i+0x1e8>
 800a3f8:	6833      	ldr	r3, [r6, #0]
 800a3fa:	6820      	ldr	r0, [r4, #0]
 800a3fc:	1d19      	adds	r1, r3, #4
 800a3fe:	6031      	str	r1, [r6, #0]
 800a400:	0606      	lsls	r6, r0, #24
 800a402:	d501      	bpl.n	800a408 <_printf_i+0xbc>
 800a404:	681d      	ldr	r5, [r3, #0]
 800a406:	e003      	b.n	800a410 <_printf_i+0xc4>
 800a408:	0645      	lsls	r5, r0, #25
 800a40a:	d5fb      	bpl.n	800a404 <_printf_i+0xb8>
 800a40c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a410:	2d00      	cmp	r5, #0
 800a412:	da03      	bge.n	800a41c <_printf_i+0xd0>
 800a414:	232d      	movs	r3, #45	@ 0x2d
 800a416:	426d      	negs	r5, r5
 800a418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a41c:	4859      	ldr	r0, [pc, #356]	@ (800a584 <_printf_i+0x238>)
 800a41e:	230a      	movs	r3, #10
 800a420:	e011      	b.n	800a446 <_printf_i+0xfa>
 800a422:	6821      	ldr	r1, [r4, #0]
 800a424:	6833      	ldr	r3, [r6, #0]
 800a426:	0608      	lsls	r0, r1, #24
 800a428:	f853 5b04 	ldr.w	r5, [r3], #4
 800a42c:	d402      	bmi.n	800a434 <_printf_i+0xe8>
 800a42e:	0649      	lsls	r1, r1, #25
 800a430:	bf48      	it	mi
 800a432:	b2ad      	uxthmi	r5, r5
 800a434:	2f6f      	cmp	r7, #111	@ 0x6f
 800a436:	4853      	ldr	r0, [pc, #332]	@ (800a584 <_printf_i+0x238>)
 800a438:	6033      	str	r3, [r6, #0]
 800a43a:	bf14      	ite	ne
 800a43c:	230a      	movne	r3, #10
 800a43e:	2308      	moveq	r3, #8
 800a440:	2100      	movs	r1, #0
 800a442:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a446:	6866      	ldr	r6, [r4, #4]
 800a448:	60a6      	str	r6, [r4, #8]
 800a44a:	2e00      	cmp	r6, #0
 800a44c:	bfa2      	ittt	ge
 800a44e:	6821      	ldrge	r1, [r4, #0]
 800a450:	f021 0104 	bicge.w	r1, r1, #4
 800a454:	6021      	strge	r1, [r4, #0]
 800a456:	b90d      	cbnz	r5, 800a45c <_printf_i+0x110>
 800a458:	2e00      	cmp	r6, #0
 800a45a:	d04b      	beq.n	800a4f4 <_printf_i+0x1a8>
 800a45c:	4616      	mov	r6, r2
 800a45e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a462:	fb03 5711 	mls	r7, r3, r1, r5
 800a466:	5dc7      	ldrb	r7, [r0, r7]
 800a468:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a46c:	462f      	mov	r7, r5
 800a46e:	42bb      	cmp	r3, r7
 800a470:	460d      	mov	r5, r1
 800a472:	d9f4      	bls.n	800a45e <_printf_i+0x112>
 800a474:	2b08      	cmp	r3, #8
 800a476:	d10b      	bne.n	800a490 <_printf_i+0x144>
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	07df      	lsls	r7, r3, #31
 800a47c:	d508      	bpl.n	800a490 <_printf_i+0x144>
 800a47e:	6923      	ldr	r3, [r4, #16]
 800a480:	6861      	ldr	r1, [r4, #4]
 800a482:	4299      	cmp	r1, r3
 800a484:	bfde      	ittt	le
 800a486:	2330      	movle	r3, #48	@ 0x30
 800a488:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a48c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a490:	1b92      	subs	r2, r2, r6
 800a492:	6122      	str	r2, [r4, #16]
 800a494:	f8cd a000 	str.w	sl, [sp]
 800a498:	464b      	mov	r3, r9
 800a49a:	aa03      	add	r2, sp, #12
 800a49c:	4621      	mov	r1, r4
 800a49e:	4640      	mov	r0, r8
 800a4a0:	f7ff fee6 	bl	800a270 <_printf_common>
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	d14a      	bne.n	800a53e <_printf_i+0x1f2>
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	b004      	add	sp, #16
 800a4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	f043 0320 	orr.w	r3, r3, #32
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	4833      	ldr	r0, [pc, #204]	@ (800a588 <_printf_i+0x23c>)
 800a4bc:	2778      	movs	r7, #120	@ 0x78
 800a4be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	6831      	ldr	r1, [r6, #0]
 800a4c6:	061f      	lsls	r7, r3, #24
 800a4c8:	f851 5b04 	ldr.w	r5, [r1], #4
 800a4cc:	d402      	bmi.n	800a4d4 <_printf_i+0x188>
 800a4ce:	065f      	lsls	r7, r3, #25
 800a4d0:	bf48      	it	mi
 800a4d2:	b2ad      	uxthmi	r5, r5
 800a4d4:	6031      	str	r1, [r6, #0]
 800a4d6:	07d9      	lsls	r1, r3, #31
 800a4d8:	bf44      	itt	mi
 800a4da:	f043 0320 	orrmi.w	r3, r3, #32
 800a4de:	6023      	strmi	r3, [r4, #0]
 800a4e0:	b11d      	cbz	r5, 800a4ea <_printf_i+0x19e>
 800a4e2:	2310      	movs	r3, #16
 800a4e4:	e7ac      	b.n	800a440 <_printf_i+0xf4>
 800a4e6:	4827      	ldr	r0, [pc, #156]	@ (800a584 <_printf_i+0x238>)
 800a4e8:	e7e9      	b.n	800a4be <_printf_i+0x172>
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	f023 0320 	bic.w	r3, r3, #32
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	e7f6      	b.n	800a4e2 <_printf_i+0x196>
 800a4f4:	4616      	mov	r6, r2
 800a4f6:	e7bd      	b.n	800a474 <_printf_i+0x128>
 800a4f8:	6833      	ldr	r3, [r6, #0]
 800a4fa:	6825      	ldr	r5, [r4, #0]
 800a4fc:	6961      	ldr	r1, [r4, #20]
 800a4fe:	1d18      	adds	r0, r3, #4
 800a500:	6030      	str	r0, [r6, #0]
 800a502:	062e      	lsls	r6, r5, #24
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	d501      	bpl.n	800a50c <_printf_i+0x1c0>
 800a508:	6019      	str	r1, [r3, #0]
 800a50a:	e002      	b.n	800a512 <_printf_i+0x1c6>
 800a50c:	0668      	lsls	r0, r5, #25
 800a50e:	d5fb      	bpl.n	800a508 <_printf_i+0x1bc>
 800a510:	8019      	strh	r1, [r3, #0]
 800a512:	2300      	movs	r3, #0
 800a514:	6123      	str	r3, [r4, #16]
 800a516:	4616      	mov	r6, r2
 800a518:	e7bc      	b.n	800a494 <_printf_i+0x148>
 800a51a:	6833      	ldr	r3, [r6, #0]
 800a51c:	1d1a      	adds	r2, r3, #4
 800a51e:	6032      	str	r2, [r6, #0]
 800a520:	681e      	ldr	r6, [r3, #0]
 800a522:	6862      	ldr	r2, [r4, #4]
 800a524:	2100      	movs	r1, #0
 800a526:	4630      	mov	r0, r6
 800a528:	f7f5 fe52 	bl	80001d0 <memchr>
 800a52c:	b108      	cbz	r0, 800a532 <_printf_i+0x1e6>
 800a52e:	1b80      	subs	r0, r0, r6
 800a530:	6060      	str	r0, [r4, #4]
 800a532:	6863      	ldr	r3, [r4, #4]
 800a534:	6123      	str	r3, [r4, #16]
 800a536:	2300      	movs	r3, #0
 800a538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a53c:	e7aa      	b.n	800a494 <_printf_i+0x148>
 800a53e:	6923      	ldr	r3, [r4, #16]
 800a540:	4632      	mov	r2, r6
 800a542:	4649      	mov	r1, r9
 800a544:	4640      	mov	r0, r8
 800a546:	47d0      	blx	sl
 800a548:	3001      	adds	r0, #1
 800a54a:	d0ad      	beq.n	800a4a8 <_printf_i+0x15c>
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	079b      	lsls	r3, r3, #30
 800a550:	d413      	bmi.n	800a57a <_printf_i+0x22e>
 800a552:	68e0      	ldr	r0, [r4, #12]
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	4298      	cmp	r0, r3
 800a558:	bfb8      	it	lt
 800a55a:	4618      	movlt	r0, r3
 800a55c:	e7a6      	b.n	800a4ac <_printf_i+0x160>
 800a55e:	2301      	movs	r3, #1
 800a560:	4632      	mov	r2, r6
 800a562:	4649      	mov	r1, r9
 800a564:	4640      	mov	r0, r8
 800a566:	47d0      	blx	sl
 800a568:	3001      	adds	r0, #1
 800a56a:	d09d      	beq.n	800a4a8 <_printf_i+0x15c>
 800a56c:	3501      	adds	r5, #1
 800a56e:	68e3      	ldr	r3, [r4, #12]
 800a570:	9903      	ldr	r1, [sp, #12]
 800a572:	1a5b      	subs	r3, r3, r1
 800a574:	42ab      	cmp	r3, r5
 800a576:	dcf2      	bgt.n	800a55e <_printf_i+0x212>
 800a578:	e7eb      	b.n	800a552 <_printf_i+0x206>
 800a57a:	2500      	movs	r5, #0
 800a57c:	f104 0619 	add.w	r6, r4, #25
 800a580:	e7f5      	b.n	800a56e <_printf_i+0x222>
 800a582:	bf00      	nop
 800a584:	0800dc42 	.word	0x0800dc42
 800a588:	0800dc53 	.word	0x0800dc53

0800a58c <std>:
 800a58c:	2300      	movs	r3, #0
 800a58e:	b510      	push	{r4, lr}
 800a590:	4604      	mov	r4, r0
 800a592:	e9c0 3300 	strd	r3, r3, [r0]
 800a596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a59a:	6083      	str	r3, [r0, #8]
 800a59c:	8181      	strh	r1, [r0, #12]
 800a59e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a5a0:	81c2      	strh	r2, [r0, #14]
 800a5a2:	6183      	str	r3, [r0, #24]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	2208      	movs	r2, #8
 800a5a8:	305c      	adds	r0, #92	@ 0x5c
 800a5aa:	f000 f928 	bl	800a7fe <memset>
 800a5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e4 <std+0x58>)
 800a5b0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e8 <std+0x5c>)
 800a5b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5ec <std+0x60>)
 800a5b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f0 <std+0x64>)
 800a5bc:	6323      	str	r3, [r4, #48]	@ 0x30
 800a5be:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f4 <std+0x68>)
 800a5c0:	6224      	str	r4, [r4, #32]
 800a5c2:	429c      	cmp	r4, r3
 800a5c4:	d006      	beq.n	800a5d4 <std+0x48>
 800a5c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a5ca:	4294      	cmp	r4, r2
 800a5cc:	d002      	beq.n	800a5d4 <std+0x48>
 800a5ce:	33d0      	adds	r3, #208	@ 0xd0
 800a5d0:	429c      	cmp	r4, r3
 800a5d2:	d105      	bne.n	800a5e0 <std+0x54>
 800a5d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5dc:	f000 b98c 	b.w	800a8f8 <__retarget_lock_init_recursive>
 800a5e0:	bd10      	pop	{r4, pc}
 800a5e2:	bf00      	nop
 800a5e4:	0800a779 	.word	0x0800a779
 800a5e8:	0800a79b 	.word	0x0800a79b
 800a5ec:	0800a7d3 	.word	0x0800a7d3
 800a5f0:	0800a7f7 	.word	0x0800a7f7
 800a5f4:	20002058 	.word	0x20002058

0800a5f8 <stdio_exit_handler>:
 800a5f8:	4a02      	ldr	r2, [pc, #8]	@ (800a604 <stdio_exit_handler+0xc>)
 800a5fa:	4903      	ldr	r1, [pc, #12]	@ (800a608 <stdio_exit_handler+0x10>)
 800a5fc:	4803      	ldr	r0, [pc, #12]	@ (800a60c <stdio_exit_handler+0x14>)
 800a5fe:	f000 b869 	b.w	800a6d4 <_fwalk_sglue>
 800a602:	bf00      	nop
 800a604:	200000fc 	.word	0x200000fc
 800a608:	0800c255 	.word	0x0800c255
 800a60c:	2000010c 	.word	0x2000010c

0800a610 <cleanup_stdio>:
 800a610:	6841      	ldr	r1, [r0, #4]
 800a612:	4b0c      	ldr	r3, [pc, #48]	@ (800a644 <cleanup_stdio+0x34>)
 800a614:	4299      	cmp	r1, r3
 800a616:	b510      	push	{r4, lr}
 800a618:	4604      	mov	r4, r0
 800a61a:	d001      	beq.n	800a620 <cleanup_stdio+0x10>
 800a61c:	f001 fe1a 	bl	800c254 <_fflush_r>
 800a620:	68a1      	ldr	r1, [r4, #8]
 800a622:	4b09      	ldr	r3, [pc, #36]	@ (800a648 <cleanup_stdio+0x38>)
 800a624:	4299      	cmp	r1, r3
 800a626:	d002      	beq.n	800a62e <cleanup_stdio+0x1e>
 800a628:	4620      	mov	r0, r4
 800a62a:	f001 fe13 	bl	800c254 <_fflush_r>
 800a62e:	68e1      	ldr	r1, [r4, #12]
 800a630:	4b06      	ldr	r3, [pc, #24]	@ (800a64c <cleanup_stdio+0x3c>)
 800a632:	4299      	cmp	r1, r3
 800a634:	d004      	beq.n	800a640 <cleanup_stdio+0x30>
 800a636:	4620      	mov	r0, r4
 800a638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a63c:	f001 be0a 	b.w	800c254 <_fflush_r>
 800a640:	bd10      	pop	{r4, pc}
 800a642:	bf00      	nop
 800a644:	20002058 	.word	0x20002058
 800a648:	200020c0 	.word	0x200020c0
 800a64c:	20002128 	.word	0x20002128

0800a650 <global_stdio_init.part.0>:
 800a650:	b510      	push	{r4, lr}
 800a652:	4b0b      	ldr	r3, [pc, #44]	@ (800a680 <global_stdio_init.part.0+0x30>)
 800a654:	4c0b      	ldr	r4, [pc, #44]	@ (800a684 <global_stdio_init.part.0+0x34>)
 800a656:	4a0c      	ldr	r2, [pc, #48]	@ (800a688 <global_stdio_init.part.0+0x38>)
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	4620      	mov	r0, r4
 800a65c:	2200      	movs	r2, #0
 800a65e:	2104      	movs	r1, #4
 800a660:	f7ff ff94 	bl	800a58c <std>
 800a664:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a668:	2201      	movs	r2, #1
 800a66a:	2109      	movs	r1, #9
 800a66c:	f7ff ff8e 	bl	800a58c <std>
 800a670:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a674:	2202      	movs	r2, #2
 800a676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a67a:	2112      	movs	r1, #18
 800a67c:	f7ff bf86 	b.w	800a58c <std>
 800a680:	20002190 	.word	0x20002190
 800a684:	20002058 	.word	0x20002058
 800a688:	0800a5f9 	.word	0x0800a5f9

0800a68c <__sfp_lock_acquire>:
 800a68c:	4801      	ldr	r0, [pc, #4]	@ (800a694 <__sfp_lock_acquire+0x8>)
 800a68e:	f000 b934 	b.w	800a8fa <__retarget_lock_acquire_recursive>
 800a692:	bf00      	nop
 800a694:	20002199 	.word	0x20002199

0800a698 <__sfp_lock_release>:
 800a698:	4801      	ldr	r0, [pc, #4]	@ (800a6a0 <__sfp_lock_release+0x8>)
 800a69a:	f000 b92f 	b.w	800a8fc <__retarget_lock_release_recursive>
 800a69e:	bf00      	nop
 800a6a0:	20002199 	.word	0x20002199

0800a6a4 <__sinit>:
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	f7ff fff0 	bl	800a68c <__sfp_lock_acquire>
 800a6ac:	6a23      	ldr	r3, [r4, #32]
 800a6ae:	b11b      	cbz	r3, 800a6b8 <__sinit+0x14>
 800a6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b4:	f7ff bff0 	b.w	800a698 <__sfp_lock_release>
 800a6b8:	4b04      	ldr	r3, [pc, #16]	@ (800a6cc <__sinit+0x28>)
 800a6ba:	6223      	str	r3, [r4, #32]
 800a6bc:	4b04      	ldr	r3, [pc, #16]	@ (800a6d0 <__sinit+0x2c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1f5      	bne.n	800a6b0 <__sinit+0xc>
 800a6c4:	f7ff ffc4 	bl	800a650 <global_stdio_init.part.0>
 800a6c8:	e7f2      	b.n	800a6b0 <__sinit+0xc>
 800a6ca:	bf00      	nop
 800a6cc:	0800a611 	.word	0x0800a611
 800a6d0:	20002190 	.word	0x20002190

0800a6d4 <_fwalk_sglue>:
 800a6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d8:	4607      	mov	r7, r0
 800a6da:	4688      	mov	r8, r1
 800a6dc:	4614      	mov	r4, r2
 800a6de:	2600      	movs	r6, #0
 800a6e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6e4:	f1b9 0901 	subs.w	r9, r9, #1
 800a6e8:	d505      	bpl.n	800a6f6 <_fwalk_sglue+0x22>
 800a6ea:	6824      	ldr	r4, [r4, #0]
 800a6ec:	2c00      	cmp	r4, #0
 800a6ee:	d1f7      	bne.n	800a6e0 <_fwalk_sglue+0xc>
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6f6:	89ab      	ldrh	r3, [r5, #12]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d907      	bls.n	800a70c <_fwalk_sglue+0x38>
 800a6fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a700:	3301      	adds	r3, #1
 800a702:	d003      	beq.n	800a70c <_fwalk_sglue+0x38>
 800a704:	4629      	mov	r1, r5
 800a706:	4638      	mov	r0, r7
 800a708:	47c0      	blx	r8
 800a70a:	4306      	orrs	r6, r0
 800a70c:	3568      	adds	r5, #104	@ 0x68
 800a70e:	e7e9      	b.n	800a6e4 <_fwalk_sglue+0x10>

0800a710 <sniprintf>:
 800a710:	b40c      	push	{r2, r3}
 800a712:	b530      	push	{r4, r5, lr}
 800a714:	4b17      	ldr	r3, [pc, #92]	@ (800a774 <sniprintf+0x64>)
 800a716:	1e0c      	subs	r4, r1, #0
 800a718:	681d      	ldr	r5, [r3, #0]
 800a71a:	b09d      	sub	sp, #116	@ 0x74
 800a71c:	da08      	bge.n	800a730 <sniprintf+0x20>
 800a71e:	238b      	movs	r3, #139	@ 0x8b
 800a720:	602b      	str	r3, [r5, #0]
 800a722:	f04f 30ff 	mov.w	r0, #4294967295
 800a726:	b01d      	add	sp, #116	@ 0x74
 800a728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a72c:	b002      	add	sp, #8
 800a72e:	4770      	bx	lr
 800a730:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a734:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a738:	bf14      	ite	ne
 800a73a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a73e:	4623      	moveq	r3, r4
 800a740:	9304      	str	r3, [sp, #16]
 800a742:	9307      	str	r3, [sp, #28]
 800a744:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a748:	9002      	str	r0, [sp, #8]
 800a74a:	9006      	str	r0, [sp, #24]
 800a74c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a750:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a752:	ab21      	add	r3, sp, #132	@ 0x84
 800a754:	a902      	add	r1, sp, #8
 800a756:	4628      	mov	r0, r5
 800a758:	9301      	str	r3, [sp, #4]
 800a75a:	f001 fbfb 	bl	800bf54 <_svfiprintf_r>
 800a75e:	1c43      	adds	r3, r0, #1
 800a760:	bfbc      	itt	lt
 800a762:	238b      	movlt	r3, #139	@ 0x8b
 800a764:	602b      	strlt	r3, [r5, #0]
 800a766:	2c00      	cmp	r4, #0
 800a768:	d0dd      	beq.n	800a726 <sniprintf+0x16>
 800a76a:	9b02      	ldr	r3, [sp, #8]
 800a76c:	2200      	movs	r2, #0
 800a76e:	701a      	strb	r2, [r3, #0]
 800a770:	e7d9      	b.n	800a726 <sniprintf+0x16>
 800a772:	bf00      	nop
 800a774:	20000108 	.word	0x20000108

0800a778 <__sread>:
 800a778:	b510      	push	{r4, lr}
 800a77a:	460c      	mov	r4, r1
 800a77c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a780:	f000 f86c 	bl	800a85c <_read_r>
 800a784:	2800      	cmp	r0, #0
 800a786:	bfab      	itete	ge
 800a788:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a78a:	89a3      	ldrhlt	r3, [r4, #12]
 800a78c:	181b      	addge	r3, r3, r0
 800a78e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a792:	bfac      	ite	ge
 800a794:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a796:	81a3      	strhlt	r3, [r4, #12]
 800a798:	bd10      	pop	{r4, pc}

0800a79a <__swrite>:
 800a79a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a79e:	461f      	mov	r7, r3
 800a7a0:	898b      	ldrh	r3, [r1, #12]
 800a7a2:	05db      	lsls	r3, r3, #23
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	4616      	mov	r6, r2
 800a7aa:	d505      	bpl.n	800a7b8 <__swrite+0x1e>
 800a7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f000 f840 	bl	800a838 <_lseek_r>
 800a7b8:	89a3      	ldrh	r3, [r4, #12]
 800a7ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a7c2:	81a3      	strh	r3, [r4, #12]
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	463b      	mov	r3, r7
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ce:	f000 b857 	b.w	800a880 <_write_r>

0800a7d2 <__sseek>:
 800a7d2:	b510      	push	{r4, lr}
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7da:	f000 f82d 	bl	800a838 <_lseek_r>
 800a7de:	1c43      	adds	r3, r0, #1
 800a7e0:	89a3      	ldrh	r3, [r4, #12]
 800a7e2:	bf15      	itete	ne
 800a7e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a7e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a7ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a7ee:	81a3      	strheq	r3, [r4, #12]
 800a7f0:	bf18      	it	ne
 800a7f2:	81a3      	strhne	r3, [r4, #12]
 800a7f4:	bd10      	pop	{r4, pc}

0800a7f6 <__sclose>:
 800a7f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7fa:	f000 b80d 	b.w	800a818 <_close_r>

0800a7fe <memset>:
 800a7fe:	4402      	add	r2, r0
 800a800:	4603      	mov	r3, r0
 800a802:	4293      	cmp	r3, r2
 800a804:	d100      	bne.n	800a808 <memset+0xa>
 800a806:	4770      	bx	lr
 800a808:	f803 1b01 	strb.w	r1, [r3], #1
 800a80c:	e7f9      	b.n	800a802 <memset+0x4>
	...

0800a810 <_localeconv_r>:
 800a810:	4800      	ldr	r0, [pc, #0]	@ (800a814 <_localeconv_r+0x4>)
 800a812:	4770      	bx	lr
 800a814:	20000248 	.word	0x20000248

0800a818 <_close_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	4d06      	ldr	r5, [pc, #24]	@ (800a834 <_close_r+0x1c>)
 800a81c:	2300      	movs	r3, #0
 800a81e:	4604      	mov	r4, r0
 800a820:	4608      	mov	r0, r1
 800a822:	602b      	str	r3, [r5, #0]
 800a824:	f7f7 f8d0 	bl	80019c8 <_close>
 800a828:	1c43      	adds	r3, r0, #1
 800a82a:	d102      	bne.n	800a832 <_close_r+0x1a>
 800a82c:	682b      	ldr	r3, [r5, #0]
 800a82e:	b103      	cbz	r3, 800a832 <_close_r+0x1a>
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	bd38      	pop	{r3, r4, r5, pc}
 800a834:	20002194 	.word	0x20002194

0800a838 <_lseek_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	4d07      	ldr	r5, [pc, #28]	@ (800a858 <_lseek_r+0x20>)
 800a83c:	4604      	mov	r4, r0
 800a83e:	4608      	mov	r0, r1
 800a840:	4611      	mov	r1, r2
 800a842:	2200      	movs	r2, #0
 800a844:	602a      	str	r2, [r5, #0]
 800a846:	461a      	mov	r2, r3
 800a848:	f7f7 f8e5 	bl	8001a16 <_lseek>
 800a84c:	1c43      	adds	r3, r0, #1
 800a84e:	d102      	bne.n	800a856 <_lseek_r+0x1e>
 800a850:	682b      	ldr	r3, [r5, #0]
 800a852:	b103      	cbz	r3, 800a856 <_lseek_r+0x1e>
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	bd38      	pop	{r3, r4, r5, pc}
 800a858:	20002194 	.word	0x20002194

0800a85c <_read_r>:
 800a85c:	b538      	push	{r3, r4, r5, lr}
 800a85e:	4d07      	ldr	r5, [pc, #28]	@ (800a87c <_read_r+0x20>)
 800a860:	4604      	mov	r4, r0
 800a862:	4608      	mov	r0, r1
 800a864:	4611      	mov	r1, r2
 800a866:	2200      	movs	r2, #0
 800a868:	602a      	str	r2, [r5, #0]
 800a86a:	461a      	mov	r2, r3
 800a86c:	f7f7 f873 	bl	8001956 <_read>
 800a870:	1c43      	adds	r3, r0, #1
 800a872:	d102      	bne.n	800a87a <_read_r+0x1e>
 800a874:	682b      	ldr	r3, [r5, #0]
 800a876:	b103      	cbz	r3, 800a87a <_read_r+0x1e>
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	20002194 	.word	0x20002194

0800a880 <_write_r>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	4d07      	ldr	r5, [pc, #28]	@ (800a8a0 <_write_r+0x20>)
 800a884:	4604      	mov	r4, r0
 800a886:	4608      	mov	r0, r1
 800a888:	4611      	mov	r1, r2
 800a88a:	2200      	movs	r2, #0
 800a88c:	602a      	str	r2, [r5, #0]
 800a88e:	461a      	mov	r2, r3
 800a890:	f7f7 f87e 	bl	8001990 <_write>
 800a894:	1c43      	adds	r3, r0, #1
 800a896:	d102      	bne.n	800a89e <_write_r+0x1e>
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	b103      	cbz	r3, 800a89e <_write_r+0x1e>
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	bd38      	pop	{r3, r4, r5, pc}
 800a8a0:	20002194 	.word	0x20002194

0800a8a4 <__errno>:
 800a8a4:	4b01      	ldr	r3, [pc, #4]	@ (800a8ac <__errno+0x8>)
 800a8a6:	6818      	ldr	r0, [r3, #0]
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	20000108 	.word	0x20000108

0800a8b0 <__libc_init_array>:
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	4d0d      	ldr	r5, [pc, #52]	@ (800a8e8 <__libc_init_array+0x38>)
 800a8b4:	4c0d      	ldr	r4, [pc, #52]	@ (800a8ec <__libc_init_array+0x3c>)
 800a8b6:	1b64      	subs	r4, r4, r5
 800a8b8:	10a4      	asrs	r4, r4, #2
 800a8ba:	2600      	movs	r6, #0
 800a8bc:	42a6      	cmp	r6, r4
 800a8be:	d109      	bne.n	800a8d4 <__libc_init_array+0x24>
 800a8c0:	4d0b      	ldr	r5, [pc, #44]	@ (800a8f0 <__libc_init_array+0x40>)
 800a8c2:	4c0c      	ldr	r4, [pc, #48]	@ (800a8f4 <__libc_init_array+0x44>)
 800a8c4:	f003 f96a 	bl	800db9c <_init>
 800a8c8:	1b64      	subs	r4, r4, r5
 800a8ca:	10a4      	asrs	r4, r4, #2
 800a8cc:	2600      	movs	r6, #0
 800a8ce:	42a6      	cmp	r6, r4
 800a8d0:	d105      	bne.n	800a8de <__libc_init_array+0x2e>
 800a8d2:	bd70      	pop	{r4, r5, r6, pc}
 800a8d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8d8:	4798      	blx	r3
 800a8da:	3601      	adds	r6, #1
 800a8dc:	e7ee      	b.n	800a8bc <__libc_init_array+0xc>
 800a8de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8e2:	4798      	blx	r3
 800a8e4:	3601      	adds	r6, #1
 800a8e6:	e7f2      	b.n	800a8ce <__libc_init_array+0x1e>
 800a8e8:	0800e3b0 	.word	0x0800e3b0
 800a8ec:	0800e3b0 	.word	0x0800e3b0
 800a8f0:	0800e3b0 	.word	0x0800e3b0
 800a8f4:	0800e3b4 	.word	0x0800e3b4

0800a8f8 <__retarget_lock_init_recursive>:
 800a8f8:	4770      	bx	lr

0800a8fa <__retarget_lock_acquire_recursive>:
 800a8fa:	4770      	bx	lr

0800a8fc <__retarget_lock_release_recursive>:
 800a8fc:	4770      	bx	lr

0800a8fe <quorem>:
 800a8fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a902:	6903      	ldr	r3, [r0, #16]
 800a904:	690c      	ldr	r4, [r1, #16]
 800a906:	42a3      	cmp	r3, r4
 800a908:	4607      	mov	r7, r0
 800a90a:	db7e      	blt.n	800aa0a <quorem+0x10c>
 800a90c:	3c01      	subs	r4, #1
 800a90e:	f101 0814 	add.w	r8, r1, #20
 800a912:	00a3      	lsls	r3, r4, #2
 800a914:	f100 0514 	add.w	r5, r0, #20
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a91e:	9301      	str	r3, [sp, #4]
 800a920:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a924:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a928:	3301      	adds	r3, #1
 800a92a:	429a      	cmp	r2, r3
 800a92c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a930:	fbb2 f6f3 	udiv	r6, r2, r3
 800a934:	d32e      	bcc.n	800a994 <quorem+0x96>
 800a936:	f04f 0a00 	mov.w	sl, #0
 800a93a:	46c4      	mov	ip, r8
 800a93c:	46ae      	mov	lr, r5
 800a93e:	46d3      	mov	fp, sl
 800a940:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a944:	b298      	uxth	r0, r3
 800a946:	fb06 a000 	mla	r0, r6, r0, sl
 800a94a:	0c02      	lsrs	r2, r0, #16
 800a94c:	0c1b      	lsrs	r3, r3, #16
 800a94e:	fb06 2303 	mla	r3, r6, r3, r2
 800a952:	f8de 2000 	ldr.w	r2, [lr]
 800a956:	b280      	uxth	r0, r0
 800a958:	b292      	uxth	r2, r2
 800a95a:	1a12      	subs	r2, r2, r0
 800a95c:	445a      	add	r2, fp
 800a95e:	f8de 0000 	ldr.w	r0, [lr]
 800a962:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a966:	b29b      	uxth	r3, r3
 800a968:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a96c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a970:	b292      	uxth	r2, r2
 800a972:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a976:	45e1      	cmp	r9, ip
 800a978:	f84e 2b04 	str.w	r2, [lr], #4
 800a97c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a980:	d2de      	bcs.n	800a940 <quorem+0x42>
 800a982:	9b00      	ldr	r3, [sp, #0]
 800a984:	58eb      	ldr	r3, [r5, r3]
 800a986:	b92b      	cbnz	r3, 800a994 <quorem+0x96>
 800a988:	9b01      	ldr	r3, [sp, #4]
 800a98a:	3b04      	subs	r3, #4
 800a98c:	429d      	cmp	r5, r3
 800a98e:	461a      	mov	r2, r3
 800a990:	d32f      	bcc.n	800a9f2 <quorem+0xf4>
 800a992:	613c      	str	r4, [r7, #16]
 800a994:	4638      	mov	r0, r7
 800a996:	f001 f979 	bl	800bc8c <__mcmp>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	db25      	blt.n	800a9ea <quorem+0xec>
 800a99e:	4629      	mov	r1, r5
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9a6:	f8d1 c000 	ldr.w	ip, [r1]
 800a9aa:	fa1f fe82 	uxth.w	lr, r2
 800a9ae:	fa1f f38c 	uxth.w	r3, ip
 800a9b2:	eba3 030e 	sub.w	r3, r3, lr
 800a9b6:	4403      	add	r3, r0
 800a9b8:	0c12      	lsrs	r2, r2, #16
 800a9ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a9be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9c8:	45c1      	cmp	r9, r8
 800a9ca:	f841 3b04 	str.w	r3, [r1], #4
 800a9ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a9d2:	d2e6      	bcs.n	800a9a2 <quorem+0xa4>
 800a9d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9dc:	b922      	cbnz	r2, 800a9e8 <quorem+0xea>
 800a9de:	3b04      	subs	r3, #4
 800a9e0:	429d      	cmp	r5, r3
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	d30b      	bcc.n	800a9fe <quorem+0x100>
 800a9e6:	613c      	str	r4, [r7, #16]
 800a9e8:	3601      	adds	r6, #1
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	b003      	add	sp, #12
 800a9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f2:	6812      	ldr	r2, [r2, #0]
 800a9f4:	3b04      	subs	r3, #4
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	d1cb      	bne.n	800a992 <quorem+0x94>
 800a9fa:	3c01      	subs	r4, #1
 800a9fc:	e7c6      	b.n	800a98c <quorem+0x8e>
 800a9fe:	6812      	ldr	r2, [r2, #0]
 800aa00:	3b04      	subs	r3, #4
 800aa02:	2a00      	cmp	r2, #0
 800aa04:	d1ef      	bne.n	800a9e6 <quorem+0xe8>
 800aa06:	3c01      	subs	r4, #1
 800aa08:	e7ea      	b.n	800a9e0 <quorem+0xe2>
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	e7ee      	b.n	800a9ec <quorem+0xee>
	...

0800aa10 <_dtoa_r>:
 800aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	69c7      	ldr	r7, [r0, #28]
 800aa16:	b099      	sub	sp, #100	@ 0x64
 800aa18:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aa1c:	ec55 4b10 	vmov	r4, r5, d0
 800aa20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800aa22:	9109      	str	r1, [sp, #36]	@ 0x24
 800aa24:	4683      	mov	fp, r0
 800aa26:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa28:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa2a:	b97f      	cbnz	r7, 800aa4c <_dtoa_r+0x3c>
 800aa2c:	2010      	movs	r0, #16
 800aa2e:	f000 fdfd 	bl	800b62c <malloc>
 800aa32:	4602      	mov	r2, r0
 800aa34:	f8cb 001c 	str.w	r0, [fp, #28]
 800aa38:	b920      	cbnz	r0, 800aa44 <_dtoa_r+0x34>
 800aa3a:	4ba7      	ldr	r3, [pc, #668]	@ (800acd8 <_dtoa_r+0x2c8>)
 800aa3c:	21ef      	movs	r1, #239	@ 0xef
 800aa3e:	48a7      	ldr	r0, [pc, #668]	@ (800acdc <_dtoa_r+0x2cc>)
 800aa40:	f001 fc68 	bl	800c314 <__assert_func>
 800aa44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aa48:	6007      	str	r7, [r0, #0]
 800aa4a:	60c7      	str	r7, [r0, #12]
 800aa4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa50:	6819      	ldr	r1, [r3, #0]
 800aa52:	b159      	cbz	r1, 800aa6c <_dtoa_r+0x5c>
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	604a      	str	r2, [r1, #4]
 800aa58:	2301      	movs	r3, #1
 800aa5a:	4093      	lsls	r3, r2
 800aa5c:	608b      	str	r3, [r1, #8]
 800aa5e:	4658      	mov	r0, fp
 800aa60:	f000 feda 	bl	800b818 <_Bfree>
 800aa64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	1e2b      	subs	r3, r5, #0
 800aa6e:	bfb9      	ittee	lt
 800aa70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa74:	9303      	strlt	r3, [sp, #12]
 800aa76:	2300      	movge	r3, #0
 800aa78:	6033      	strge	r3, [r6, #0]
 800aa7a:	9f03      	ldr	r7, [sp, #12]
 800aa7c:	4b98      	ldr	r3, [pc, #608]	@ (800ace0 <_dtoa_r+0x2d0>)
 800aa7e:	bfbc      	itt	lt
 800aa80:	2201      	movlt	r2, #1
 800aa82:	6032      	strlt	r2, [r6, #0]
 800aa84:	43bb      	bics	r3, r7
 800aa86:	d112      	bne.n	800aaae <_dtoa_r+0x9e>
 800aa88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa94:	4323      	orrs	r3, r4
 800aa96:	f000 854d 	beq.w	800b534 <_dtoa_r+0xb24>
 800aa9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800acf4 <_dtoa_r+0x2e4>
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f000 854f 	beq.w	800b544 <_dtoa_r+0xb34>
 800aaa6:	f10a 0303 	add.w	r3, sl, #3
 800aaaa:	f000 bd49 	b.w	800b540 <_dtoa_r+0xb30>
 800aaae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aab2:	2200      	movs	r2, #0
 800aab4:	ec51 0b17 	vmov	r0, r1, d7
 800aab8:	2300      	movs	r3, #0
 800aaba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aabe:	f7f6 f803 	bl	8000ac8 <__aeabi_dcmpeq>
 800aac2:	4680      	mov	r8, r0
 800aac4:	b158      	cbz	r0, 800aade <_dtoa_r+0xce>
 800aac6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aac8:	2301      	movs	r3, #1
 800aaca:	6013      	str	r3, [r2, #0]
 800aacc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aace:	b113      	cbz	r3, 800aad6 <_dtoa_r+0xc6>
 800aad0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aad2:	4b84      	ldr	r3, [pc, #528]	@ (800ace4 <_dtoa_r+0x2d4>)
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800acf8 <_dtoa_r+0x2e8>
 800aada:	f000 bd33 	b.w	800b544 <_dtoa_r+0xb34>
 800aade:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aae2:	aa16      	add	r2, sp, #88	@ 0x58
 800aae4:	a917      	add	r1, sp, #92	@ 0x5c
 800aae6:	4658      	mov	r0, fp
 800aae8:	f001 f980 	bl	800bdec <__d2b>
 800aaec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aaf0:	4681      	mov	r9, r0
 800aaf2:	2e00      	cmp	r6, #0
 800aaf4:	d077      	beq.n	800abe6 <_dtoa_r+0x1d6>
 800aaf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aaf8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aafc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ab08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ab0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ab10:	4619      	mov	r1, r3
 800ab12:	2200      	movs	r2, #0
 800ab14:	4b74      	ldr	r3, [pc, #464]	@ (800ace8 <_dtoa_r+0x2d8>)
 800ab16:	f7f5 fbb7 	bl	8000288 <__aeabi_dsub>
 800ab1a:	a369      	add	r3, pc, #420	@ (adr r3, 800acc0 <_dtoa_r+0x2b0>)
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	f7f5 fd6a 	bl	80005f8 <__aeabi_dmul>
 800ab24:	a368      	add	r3, pc, #416	@ (adr r3, 800acc8 <_dtoa_r+0x2b8>)
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	f7f5 fbaf 	bl	800028c <__adddf3>
 800ab2e:	4604      	mov	r4, r0
 800ab30:	4630      	mov	r0, r6
 800ab32:	460d      	mov	r5, r1
 800ab34:	f7f5 fcf6 	bl	8000524 <__aeabi_i2d>
 800ab38:	a365      	add	r3, pc, #404	@ (adr r3, 800acd0 <_dtoa_r+0x2c0>)
 800ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3e:	f7f5 fd5b 	bl	80005f8 <__aeabi_dmul>
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	4620      	mov	r0, r4
 800ab48:	4629      	mov	r1, r5
 800ab4a:	f7f5 fb9f 	bl	800028c <__adddf3>
 800ab4e:	4604      	mov	r4, r0
 800ab50:	460d      	mov	r5, r1
 800ab52:	f7f6 f801 	bl	8000b58 <__aeabi_d2iz>
 800ab56:	2200      	movs	r2, #0
 800ab58:	4607      	mov	r7, r0
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	4629      	mov	r1, r5
 800ab60:	f7f5 ffbc 	bl	8000adc <__aeabi_dcmplt>
 800ab64:	b140      	cbz	r0, 800ab78 <_dtoa_r+0x168>
 800ab66:	4638      	mov	r0, r7
 800ab68:	f7f5 fcdc 	bl	8000524 <__aeabi_i2d>
 800ab6c:	4622      	mov	r2, r4
 800ab6e:	462b      	mov	r3, r5
 800ab70:	f7f5 ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab74:	b900      	cbnz	r0, 800ab78 <_dtoa_r+0x168>
 800ab76:	3f01      	subs	r7, #1
 800ab78:	2f16      	cmp	r7, #22
 800ab7a:	d851      	bhi.n	800ac20 <_dtoa_r+0x210>
 800ab7c:	4b5b      	ldr	r3, [pc, #364]	@ (800acec <_dtoa_r+0x2dc>)
 800ab7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab8a:	f7f5 ffa7 	bl	8000adc <__aeabi_dcmplt>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d048      	beq.n	800ac24 <_dtoa_r+0x214>
 800ab92:	3f01      	subs	r7, #1
 800ab94:	2300      	movs	r3, #0
 800ab96:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab9a:	1b9b      	subs	r3, r3, r6
 800ab9c:	1e5a      	subs	r2, r3, #1
 800ab9e:	bf44      	itt	mi
 800aba0:	f1c3 0801 	rsbmi	r8, r3, #1
 800aba4:	2300      	movmi	r3, #0
 800aba6:	9208      	str	r2, [sp, #32]
 800aba8:	bf54      	ite	pl
 800abaa:	f04f 0800 	movpl.w	r8, #0
 800abae:	9308      	strmi	r3, [sp, #32]
 800abb0:	2f00      	cmp	r7, #0
 800abb2:	db39      	blt.n	800ac28 <_dtoa_r+0x218>
 800abb4:	9b08      	ldr	r3, [sp, #32]
 800abb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800abb8:	443b      	add	r3, r7
 800abba:	9308      	str	r3, [sp, #32]
 800abbc:	2300      	movs	r3, #0
 800abbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800abc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abc2:	2b09      	cmp	r3, #9
 800abc4:	d864      	bhi.n	800ac90 <_dtoa_r+0x280>
 800abc6:	2b05      	cmp	r3, #5
 800abc8:	bfc4      	itt	gt
 800abca:	3b04      	subgt	r3, #4
 800abcc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800abce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abd0:	f1a3 0302 	sub.w	r3, r3, #2
 800abd4:	bfcc      	ite	gt
 800abd6:	2400      	movgt	r4, #0
 800abd8:	2401      	movle	r4, #1
 800abda:	2b03      	cmp	r3, #3
 800abdc:	d863      	bhi.n	800aca6 <_dtoa_r+0x296>
 800abde:	e8df f003 	tbb	[pc, r3]
 800abe2:	372a      	.short	0x372a
 800abe4:	5535      	.short	0x5535
 800abe6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800abea:	441e      	add	r6, r3
 800abec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800abf0:	2b20      	cmp	r3, #32
 800abf2:	bfc1      	itttt	gt
 800abf4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800abf8:	409f      	lslgt	r7, r3
 800abfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800abfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ac02:	bfd6      	itet	le
 800ac04:	f1c3 0320 	rsble	r3, r3, #32
 800ac08:	ea47 0003 	orrgt.w	r0, r7, r3
 800ac0c:	fa04 f003 	lslle.w	r0, r4, r3
 800ac10:	f7f5 fc78 	bl	8000504 <__aeabi_ui2d>
 800ac14:	2201      	movs	r2, #1
 800ac16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ac1a:	3e01      	subs	r6, #1
 800ac1c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ac1e:	e777      	b.n	800ab10 <_dtoa_r+0x100>
 800ac20:	2301      	movs	r3, #1
 800ac22:	e7b8      	b.n	800ab96 <_dtoa_r+0x186>
 800ac24:	9012      	str	r0, [sp, #72]	@ 0x48
 800ac26:	e7b7      	b.n	800ab98 <_dtoa_r+0x188>
 800ac28:	427b      	negs	r3, r7
 800ac2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	eba8 0807 	sub.w	r8, r8, r7
 800ac32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac34:	e7c4      	b.n	800abc0 <_dtoa_r+0x1b0>
 800ac36:	2300      	movs	r3, #0
 800ac38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	dc35      	bgt.n	800acac <_dtoa_r+0x29c>
 800ac40:	2301      	movs	r3, #1
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	9307      	str	r3, [sp, #28]
 800ac46:	461a      	mov	r2, r3
 800ac48:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac4a:	e00b      	b.n	800ac64 <_dtoa_r+0x254>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e7f3      	b.n	800ac38 <_dtoa_r+0x228>
 800ac50:	2300      	movs	r3, #0
 800ac52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac56:	18fb      	adds	r3, r7, r3
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	9307      	str	r3, [sp, #28]
 800ac60:	bfb8      	it	lt
 800ac62:	2301      	movlt	r3, #1
 800ac64:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ac68:	2100      	movs	r1, #0
 800ac6a:	2204      	movs	r2, #4
 800ac6c:	f102 0514 	add.w	r5, r2, #20
 800ac70:	429d      	cmp	r5, r3
 800ac72:	d91f      	bls.n	800acb4 <_dtoa_r+0x2a4>
 800ac74:	6041      	str	r1, [r0, #4]
 800ac76:	4658      	mov	r0, fp
 800ac78:	f000 fd8e 	bl	800b798 <_Balloc>
 800ac7c:	4682      	mov	sl, r0
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d13c      	bne.n	800acfc <_dtoa_r+0x2ec>
 800ac82:	4b1b      	ldr	r3, [pc, #108]	@ (800acf0 <_dtoa_r+0x2e0>)
 800ac84:	4602      	mov	r2, r0
 800ac86:	f240 11af 	movw	r1, #431	@ 0x1af
 800ac8a:	e6d8      	b.n	800aa3e <_dtoa_r+0x2e>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e7e0      	b.n	800ac52 <_dtoa_r+0x242>
 800ac90:	2401      	movs	r4, #1
 800ac92:	2300      	movs	r3, #0
 800ac94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac96:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac98:	f04f 33ff 	mov.w	r3, #4294967295
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	9307      	str	r3, [sp, #28]
 800aca0:	2200      	movs	r2, #0
 800aca2:	2312      	movs	r3, #18
 800aca4:	e7d0      	b.n	800ac48 <_dtoa_r+0x238>
 800aca6:	2301      	movs	r3, #1
 800aca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acaa:	e7f5      	b.n	800ac98 <_dtoa_r+0x288>
 800acac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	9307      	str	r3, [sp, #28]
 800acb2:	e7d7      	b.n	800ac64 <_dtoa_r+0x254>
 800acb4:	3101      	adds	r1, #1
 800acb6:	0052      	lsls	r2, r2, #1
 800acb8:	e7d8      	b.n	800ac6c <_dtoa_r+0x25c>
 800acba:	bf00      	nop
 800acbc:	f3af 8000 	nop.w
 800acc0:	636f4361 	.word	0x636f4361
 800acc4:	3fd287a7 	.word	0x3fd287a7
 800acc8:	8b60c8b3 	.word	0x8b60c8b3
 800accc:	3fc68a28 	.word	0x3fc68a28
 800acd0:	509f79fb 	.word	0x509f79fb
 800acd4:	3fd34413 	.word	0x3fd34413
 800acd8:	0800dc71 	.word	0x0800dc71
 800acdc:	0800dc88 	.word	0x0800dc88
 800ace0:	7ff00000 	.word	0x7ff00000
 800ace4:	0800dc41 	.word	0x0800dc41
 800ace8:	3ff80000 	.word	0x3ff80000
 800acec:	0800dd80 	.word	0x0800dd80
 800acf0:	0800dce0 	.word	0x0800dce0
 800acf4:	0800dc6d 	.word	0x0800dc6d
 800acf8:	0800dc40 	.word	0x0800dc40
 800acfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ad00:	6018      	str	r0, [r3, #0]
 800ad02:	9b07      	ldr	r3, [sp, #28]
 800ad04:	2b0e      	cmp	r3, #14
 800ad06:	f200 80a4 	bhi.w	800ae52 <_dtoa_r+0x442>
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	f000 80a1 	beq.w	800ae52 <_dtoa_r+0x442>
 800ad10:	2f00      	cmp	r7, #0
 800ad12:	dd33      	ble.n	800ad7c <_dtoa_r+0x36c>
 800ad14:	4bad      	ldr	r3, [pc, #692]	@ (800afcc <_dtoa_r+0x5bc>)
 800ad16:	f007 020f 	and.w	r2, r7, #15
 800ad1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad1e:	ed93 7b00 	vldr	d7, [r3]
 800ad22:	05f8      	lsls	r0, r7, #23
 800ad24:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ad28:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ad2c:	d516      	bpl.n	800ad5c <_dtoa_r+0x34c>
 800ad2e:	4ba8      	ldr	r3, [pc, #672]	@ (800afd0 <_dtoa_r+0x5c0>)
 800ad30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad38:	f7f5 fd88 	bl	800084c <__aeabi_ddiv>
 800ad3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad40:	f004 040f 	and.w	r4, r4, #15
 800ad44:	2603      	movs	r6, #3
 800ad46:	4da2      	ldr	r5, [pc, #648]	@ (800afd0 <_dtoa_r+0x5c0>)
 800ad48:	b954      	cbnz	r4, 800ad60 <_dtoa_r+0x350>
 800ad4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad52:	f7f5 fd7b 	bl	800084c <__aeabi_ddiv>
 800ad56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad5a:	e028      	b.n	800adae <_dtoa_r+0x39e>
 800ad5c:	2602      	movs	r6, #2
 800ad5e:	e7f2      	b.n	800ad46 <_dtoa_r+0x336>
 800ad60:	07e1      	lsls	r1, r4, #31
 800ad62:	d508      	bpl.n	800ad76 <_dtoa_r+0x366>
 800ad64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad6c:	f7f5 fc44 	bl	80005f8 <__aeabi_dmul>
 800ad70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad74:	3601      	adds	r6, #1
 800ad76:	1064      	asrs	r4, r4, #1
 800ad78:	3508      	adds	r5, #8
 800ad7a:	e7e5      	b.n	800ad48 <_dtoa_r+0x338>
 800ad7c:	f000 80d2 	beq.w	800af24 <_dtoa_r+0x514>
 800ad80:	427c      	negs	r4, r7
 800ad82:	4b92      	ldr	r3, [pc, #584]	@ (800afcc <_dtoa_r+0x5bc>)
 800ad84:	4d92      	ldr	r5, [pc, #584]	@ (800afd0 <_dtoa_r+0x5c0>)
 800ad86:	f004 020f 	and.w	r2, r4, #15
 800ad8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad96:	f7f5 fc2f 	bl	80005f8 <__aeabi_dmul>
 800ad9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad9e:	1124      	asrs	r4, r4, #4
 800ada0:	2300      	movs	r3, #0
 800ada2:	2602      	movs	r6, #2
 800ada4:	2c00      	cmp	r4, #0
 800ada6:	f040 80b2 	bne.w	800af0e <_dtoa_r+0x4fe>
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1d3      	bne.n	800ad56 <_dtoa_r+0x346>
 800adae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800adb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 80b7 	beq.w	800af28 <_dtoa_r+0x518>
 800adba:	4b86      	ldr	r3, [pc, #536]	@ (800afd4 <_dtoa_r+0x5c4>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	4620      	mov	r0, r4
 800adc0:	4629      	mov	r1, r5
 800adc2:	f7f5 fe8b 	bl	8000adc <__aeabi_dcmplt>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	f000 80ae 	beq.w	800af28 <_dtoa_r+0x518>
 800adcc:	9b07      	ldr	r3, [sp, #28]
 800adce:	2b00      	cmp	r3, #0
 800add0:	f000 80aa 	beq.w	800af28 <_dtoa_r+0x518>
 800add4:	9b00      	ldr	r3, [sp, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	dd37      	ble.n	800ae4a <_dtoa_r+0x43a>
 800adda:	1e7b      	subs	r3, r7, #1
 800addc:	9304      	str	r3, [sp, #16]
 800adde:	4620      	mov	r0, r4
 800ade0:	4b7d      	ldr	r3, [pc, #500]	@ (800afd8 <_dtoa_r+0x5c8>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	4629      	mov	r1, r5
 800ade6:	f7f5 fc07 	bl	80005f8 <__aeabi_dmul>
 800adea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adee:	9c00      	ldr	r4, [sp, #0]
 800adf0:	3601      	adds	r6, #1
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7f5 fb96 	bl	8000524 <__aeabi_i2d>
 800adf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adfc:	f7f5 fbfc 	bl	80005f8 <__aeabi_dmul>
 800ae00:	4b76      	ldr	r3, [pc, #472]	@ (800afdc <_dtoa_r+0x5cc>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	f7f5 fa42 	bl	800028c <__adddf3>
 800ae08:	4605      	mov	r5, r0
 800ae0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ae0e:	2c00      	cmp	r4, #0
 800ae10:	f040 808d 	bne.w	800af2e <_dtoa_r+0x51e>
 800ae14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae18:	4b71      	ldr	r3, [pc, #452]	@ (800afe0 <_dtoa_r+0x5d0>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f7f5 fa34 	bl	8000288 <__aeabi_dsub>
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae28:	462a      	mov	r2, r5
 800ae2a:	4633      	mov	r3, r6
 800ae2c:	f7f5 fe74 	bl	8000b18 <__aeabi_dcmpgt>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	f040 828b 	bne.w	800b34c <_dtoa_r+0x93c>
 800ae36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae3a:	462a      	mov	r2, r5
 800ae3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ae40:	f7f5 fe4c 	bl	8000adc <__aeabi_dcmplt>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	f040 8128 	bne.w	800b09a <_dtoa_r+0x68a>
 800ae4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ae4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ae52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f2c0 815a 	blt.w	800b10e <_dtoa_r+0x6fe>
 800ae5a:	2f0e      	cmp	r7, #14
 800ae5c:	f300 8157 	bgt.w	800b10e <_dtoa_r+0x6fe>
 800ae60:	4b5a      	ldr	r3, [pc, #360]	@ (800afcc <_dtoa_r+0x5bc>)
 800ae62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae66:	ed93 7b00 	vldr	d7, [r3]
 800ae6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	ed8d 7b00 	vstr	d7, [sp]
 800ae72:	da03      	bge.n	800ae7c <_dtoa_r+0x46c>
 800ae74:	9b07      	ldr	r3, [sp, #28]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f340 8101 	ble.w	800b07e <_dtoa_r+0x66e>
 800ae7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae80:	4656      	mov	r6, sl
 800ae82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae86:	4620      	mov	r0, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	f7f5 fcdf 	bl	800084c <__aeabi_ddiv>
 800ae8e:	f7f5 fe63 	bl	8000b58 <__aeabi_d2iz>
 800ae92:	4680      	mov	r8, r0
 800ae94:	f7f5 fb46 	bl	8000524 <__aeabi_i2d>
 800ae98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae9c:	f7f5 fbac 	bl	80005f8 <__aeabi_dmul>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4620      	mov	r0, r4
 800aea6:	4629      	mov	r1, r5
 800aea8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aeac:	f7f5 f9ec 	bl	8000288 <__aeabi_dsub>
 800aeb0:	f806 4b01 	strb.w	r4, [r6], #1
 800aeb4:	9d07      	ldr	r5, [sp, #28]
 800aeb6:	eba6 040a 	sub.w	r4, r6, sl
 800aeba:	42a5      	cmp	r5, r4
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	f040 8117 	bne.w	800b0f2 <_dtoa_r+0x6e2>
 800aec4:	f7f5 f9e2 	bl	800028c <__adddf3>
 800aec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aecc:	4604      	mov	r4, r0
 800aece:	460d      	mov	r5, r1
 800aed0:	f7f5 fe22 	bl	8000b18 <__aeabi_dcmpgt>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	f040 80f9 	bne.w	800b0cc <_dtoa_r+0x6bc>
 800aeda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aede:	4620      	mov	r0, r4
 800aee0:	4629      	mov	r1, r5
 800aee2:	f7f5 fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800aee6:	b118      	cbz	r0, 800aef0 <_dtoa_r+0x4e0>
 800aee8:	f018 0f01 	tst.w	r8, #1
 800aeec:	f040 80ee 	bne.w	800b0cc <_dtoa_r+0x6bc>
 800aef0:	4649      	mov	r1, r9
 800aef2:	4658      	mov	r0, fp
 800aef4:	f000 fc90 	bl	800b818 <_Bfree>
 800aef8:	2300      	movs	r3, #0
 800aefa:	7033      	strb	r3, [r6, #0]
 800aefc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aefe:	3701      	adds	r7, #1
 800af00:	601f      	str	r7, [r3, #0]
 800af02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 831d 	beq.w	800b544 <_dtoa_r+0xb34>
 800af0a:	601e      	str	r6, [r3, #0]
 800af0c:	e31a      	b.n	800b544 <_dtoa_r+0xb34>
 800af0e:	07e2      	lsls	r2, r4, #31
 800af10:	d505      	bpl.n	800af1e <_dtoa_r+0x50e>
 800af12:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af16:	f7f5 fb6f 	bl	80005f8 <__aeabi_dmul>
 800af1a:	3601      	adds	r6, #1
 800af1c:	2301      	movs	r3, #1
 800af1e:	1064      	asrs	r4, r4, #1
 800af20:	3508      	adds	r5, #8
 800af22:	e73f      	b.n	800ada4 <_dtoa_r+0x394>
 800af24:	2602      	movs	r6, #2
 800af26:	e742      	b.n	800adae <_dtoa_r+0x39e>
 800af28:	9c07      	ldr	r4, [sp, #28]
 800af2a:	9704      	str	r7, [sp, #16]
 800af2c:	e761      	b.n	800adf2 <_dtoa_r+0x3e2>
 800af2e:	4b27      	ldr	r3, [pc, #156]	@ (800afcc <_dtoa_r+0x5bc>)
 800af30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af3a:	4454      	add	r4, sl
 800af3c:	2900      	cmp	r1, #0
 800af3e:	d053      	beq.n	800afe8 <_dtoa_r+0x5d8>
 800af40:	4928      	ldr	r1, [pc, #160]	@ (800afe4 <_dtoa_r+0x5d4>)
 800af42:	2000      	movs	r0, #0
 800af44:	f7f5 fc82 	bl	800084c <__aeabi_ddiv>
 800af48:	4633      	mov	r3, r6
 800af4a:	462a      	mov	r2, r5
 800af4c:	f7f5 f99c 	bl	8000288 <__aeabi_dsub>
 800af50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af54:	4656      	mov	r6, sl
 800af56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af5a:	f7f5 fdfd 	bl	8000b58 <__aeabi_d2iz>
 800af5e:	4605      	mov	r5, r0
 800af60:	f7f5 fae0 	bl	8000524 <__aeabi_i2d>
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af6c:	f7f5 f98c 	bl	8000288 <__aeabi_dsub>
 800af70:	3530      	adds	r5, #48	@ 0x30
 800af72:	4602      	mov	r2, r0
 800af74:	460b      	mov	r3, r1
 800af76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af7a:	f806 5b01 	strb.w	r5, [r6], #1
 800af7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af82:	f7f5 fdab 	bl	8000adc <__aeabi_dcmplt>
 800af86:	2800      	cmp	r0, #0
 800af88:	d171      	bne.n	800b06e <_dtoa_r+0x65e>
 800af8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af8e:	4911      	ldr	r1, [pc, #68]	@ (800afd4 <_dtoa_r+0x5c4>)
 800af90:	2000      	movs	r0, #0
 800af92:	f7f5 f979 	bl	8000288 <__aeabi_dsub>
 800af96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af9a:	f7f5 fd9f 	bl	8000adc <__aeabi_dcmplt>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	f040 8095 	bne.w	800b0ce <_dtoa_r+0x6be>
 800afa4:	42a6      	cmp	r6, r4
 800afa6:	f43f af50 	beq.w	800ae4a <_dtoa_r+0x43a>
 800afaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800afae:	4b0a      	ldr	r3, [pc, #40]	@ (800afd8 <_dtoa_r+0x5c8>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	f7f5 fb21 	bl	80005f8 <__aeabi_dmul>
 800afb6:	4b08      	ldr	r3, [pc, #32]	@ (800afd8 <_dtoa_r+0x5c8>)
 800afb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800afbc:	2200      	movs	r2, #0
 800afbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afc2:	f7f5 fb19 	bl	80005f8 <__aeabi_dmul>
 800afc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afca:	e7c4      	b.n	800af56 <_dtoa_r+0x546>
 800afcc:	0800dd80 	.word	0x0800dd80
 800afd0:	0800dd58 	.word	0x0800dd58
 800afd4:	3ff00000 	.word	0x3ff00000
 800afd8:	40240000 	.word	0x40240000
 800afdc:	401c0000 	.word	0x401c0000
 800afe0:	40140000 	.word	0x40140000
 800afe4:	3fe00000 	.word	0x3fe00000
 800afe8:	4631      	mov	r1, r6
 800afea:	4628      	mov	r0, r5
 800afec:	f7f5 fb04 	bl	80005f8 <__aeabi_dmul>
 800aff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aff4:	9415      	str	r4, [sp, #84]	@ 0x54
 800aff6:	4656      	mov	r6, sl
 800aff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800affc:	f7f5 fdac 	bl	8000b58 <__aeabi_d2iz>
 800b000:	4605      	mov	r5, r0
 800b002:	f7f5 fa8f 	bl	8000524 <__aeabi_i2d>
 800b006:	4602      	mov	r2, r0
 800b008:	460b      	mov	r3, r1
 800b00a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b00e:	f7f5 f93b 	bl	8000288 <__aeabi_dsub>
 800b012:	3530      	adds	r5, #48	@ 0x30
 800b014:	f806 5b01 	strb.w	r5, [r6], #1
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	42a6      	cmp	r6, r4
 800b01e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b022:	f04f 0200 	mov.w	r2, #0
 800b026:	d124      	bne.n	800b072 <_dtoa_r+0x662>
 800b028:	4bac      	ldr	r3, [pc, #688]	@ (800b2dc <_dtoa_r+0x8cc>)
 800b02a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b02e:	f7f5 f92d 	bl	800028c <__adddf3>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b03a:	f7f5 fd6d 	bl	8000b18 <__aeabi_dcmpgt>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d145      	bne.n	800b0ce <_dtoa_r+0x6be>
 800b042:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b046:	49a5      	ldr	r1, [pc, #660]	@ (800b2dc <_dtoa_r+0x8cc>)
 800b048:	2000      	movs	r0, #0
 800b04a:	f7f5 f91d 	bl	8000288 <__aeabi_dsub>
 800b04e:	4602      	mov	r2, r0
 800b050:	460b      	mov	r3, r1
 800b052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b056:	f7f5 fd41 	bl	8000adc <__aeabi_dcmplt>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	f43f aef5 	beq.w	800ae4a <_dtoa_r+0x43a>
 800b060:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b062:	1e73      	subs	r3, r6, #1
 800b064:	9315      	str	r3, [sp, #84]	@ 0x54
 800b066:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b06a:	2b30      	cmp	r3, #48	@ 0x30
 800b06c:	d0f8      	beq.n	800b060 <_dtoa_r+0x650>
 800b06e:	9f04      	ldr	r7, [sp, #16]
 800b070:	e73e      	b.n	800aef0 <_dtoa_r+0x4e0>
 800b072:	4b9b      	ldr	r3, [pc, #620]	@ (800b2e0 <_dtoa_r+0x8d0>)
 800b074:	f7f5 fac0 	bl	80005f8 <__aeabi_dmul>
 800b078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b07c:	e7bc      	b.n	800aff8 <_dtoa_r+0x5e8>
 800b07e:	d10c      	bne.n	800b09a <_dtoa_r+0x68a>
 800b080:	4b98      	ldr	r3, [pc, #608]	@ (800b2e4 <_dtoa_r+0x8d4>)
 800b082:	2200      	movs	r2, #0
 800b084:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b088:	f7f5 fab6 	bl	80005f8 <__aeabi_dmul>
 800b08c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b090:	f7f5 fd38 	bl	8000b04 <__aeabi_dcmpge>
 800b094:	2800      	cmp	r0, #0
 800b096:	f000 8157 	beq.w	800b348 <_dtoa_r+0x938>
 800b09a:	2400      	movs	r4, #0
 800b09c:	4625      	mov	r5, r4
 800b09e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0a0:	43db      	mvns	r3, r3
 800b0a2:	9304      	str	r3, [sp, #16]
 800b0a4:	4656      	mov	r6, sl
 800b0a6:	2700      	movs	r7, #0
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	4658      	mov	r0, fp
 800b0ac:	f000 fbb4 	bl	800b818 <_Bfree>
 800b0b0:	2d00      	cmp	r5, #0
 800b0b2:	d0dc      	beq.n	800b06e <_dtoa_r+0x65e>
 800b0b4:	b12f      	cbz	r7, 800b0c2 <_dtoa_r+0x6b2>
 800b0b6:	42af      	cmp	r7, r5
 800b0b8:	d003      	beq.n	800b0c2 <_dtoa_r+0x6b2>
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	4658      	mov	r0, fp
 800b0be:	f000 fbab 	bl	800b818 <_Bfree>
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	4658      	mov	r0, fp
 800b0c6:	f000 fba7 	bl	800b818 <_Bfree>
 800b0ca:	e7d0      	b.n	800b06e <_dtoa_r+0x65e>
 800b0cc:	9704      	str	r7, [sp, #16]
 800b0ce:	4633      	mov	r3, r6
 800b0d0:	461e      	mov	r6, r3
 800b0d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0d6:	2a39      	cmp	r2, #57	@ 0x39
 800b0d8:	d107      	bne.n	800b0ea <_dtoa_r+0x6da>
 800b0da:	459a      	cmp	sl, r3
 800b0dc:	d1f8      	bne.n	800b0d0 <_dtoa_r+0x6c0>
 800b0de:	9a04      	ldr	r2, [sp, #16]
 800b0e0:	3201      	adds	r2, #1
 800b0e2:	9204      	str	r2, [sp, #16]
 800b0e4:	2230      	movs	r2, #48	@ 0x30
 800b0e6:	f88a 2000 	strb.w	r2, [sl]
 800b0ea:	781a      	ldrb	r2, [r3, #0]
 800b0ec:	3201      	adds	r2, #1
 800b0ee:	701a      	strb	r2, [r3, #0]
 800b0f0:	e7bd      	b.n	800b06e <_dtoa_r+0x65e>
 800b0f2:	4b7b      	ldr	r3, [pc, #492]	@ (800b2e0 <_dtoa_r+0x8d0>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f7f5 fa7f 	bl	80005f8 <__aeabi_dmul>
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	4604      	mov	r4, r0
 800b100:	460d      	mov	r5, r1
 800b102:	f7f5 fce1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b106:	2800      	cmp	r0, #0
 800b108:	f43f aebb 	beq.w	800ae82 <_dtoa_r+0x472>
 800b10c:	e6f0      	b.n	800aef0 <_dtoa_r+0x4e0>
 800b10e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b110:	2a00      	cmp	r2, #0
 800b112:	f000 80db 	beq.w	800b2cc <_dtoa_r+0x8bc>
 800b116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b118:	2a01      	cmp	r2, #1
 800b11a:	f300 80bf 	bgt.w	800b29c <_dtoa_r+0x88c>
 800b11e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b120:	2a00      	cmp	r2, #0
 800b122:	f000 80b7 	beq.w	800b294 <_dtoa_r+0x884>
 800b126:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b12a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b12c:	4646      	mov	r6, r8
 800b12e:	9a08      	ldr	r2, [sp, #32]
 800b130:	2101      	movs	r1, #1
 800b132:	441a      	add	r2, r3
 800b134:	4658      	mov	r0, fp
 800b136:	4498      	add	r8, r3
 800b138:	9208      	str	r2, [sp, #32]
 800b13a:	f000 fc21 	bl	800b980 <__i2b>
 800b13e:	4605      	mov	r5, r0
 800b140:	b15e      	cbz	r6, 800b15a <_dtoa_r+0x74a>
 800b142:	9b08      	ldr	r3, [sp, #32]
 800b144:	2b00      	cmp	r3, #0
 800b146:	dd08      	ble.n	800b15a <_dtoa_r+0x74a>
 800b148:	42b3      	cmp	r3, r6
 800b14a:	9a08      	ldr	r2, [sp, #32]
 800b14c:	bfa8      	it	ge
 800b14e:	4633      	movge	r3, r6
 800b150:	eba8 0803 	sub.w	r8, r8, r3
 800b154:	1af6      	subs	r6, r6, r3
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	9308      	str	r3, [sp, #32]
 800b15a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b15c:	b1f3      	cbz	r3, 800b19c <_dtoa_r+0x78c>
 800b15e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b160:	2b00      	cmp	r3, #0
 800b162:	f000 80b7 	beq.w	800b2d4 <_dtoa_r+0x8c4>
 800b166:	b18c      	cbz	r4, 800b18c <_dtoa_r+0x77c>
 800b168:	4629      	mov	r1, r5
 800b16a:	4622      	mov	r2, r4
 800b16c:	4658      	mov	r0, fp
 800b16e:	f000 fcc7 	bl	800bb00 <__pow5mult>
 800b172:	464a      	mov	r2, r9
 800b174:	4601      	mov	r1, r0
 800b176:	4605      	mov	r5, r0
 800b178:	4658      	mov	r0, fp
 800b17a:	f000 fc17 	bl	800b9ac <__multiply>
 800b17e:	4649      	mov	r1, r9
 800b180:	9004      	str	r0, [sp, #16]
 800b182:	4658      	mov	r0, fp
 800b184:	f000 fb48 	bl	800b818 <_Bfree>
 800b188:	9b04      	ldr	r3, [sp, #16]
 800b18a:	4699      	mov	r9, r3
 800b18c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b18e:	1b1a      	subs	r2, r3, r4
 800b190:	d004      	beq.n	800b19c <_dtoa_r+0x78c>
 800b192:	4649      	mov	r1, r9
 800b194:	4658      	mov	r0, fp
 800b196:	f000 fcb3 	bl	800bb00 <__pow5mult>
 800b19a:	4681      	mov	r9, r0
 800b19c:	2101      	movs	r1, #1
 800b19e:	4658      	mov	r0, fp
 800b1a0:	f000 fbee 	bl	800b980 <__i2b>
 800b1a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 81cf 	beq.w	800b54c <_dtoa_r+0xb3c>
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	4601      	mov	r1, r0
 800b1b2:	4658      	mov	r0, fp
 800b1b4:	f000 fca4 	bl	800bb00 <__pow5mult>
 800b1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	4604      	mov	r4, r0
 800b1be:	f300 8095 	bgt.w	800b2ec <_dtoa_r+0x8dc>
 800b1c2:	9b02      	ldr	r3, [sp, #8]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f040 8087 	bne.w	800b2d8 <_dtoa_r+0x8c8>
 800b1ca:	9b03      	ldr	r3, [sp, #12]
 800b1cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f040 8089 	bne.w	800b2e8 <_dtoa_r+0x8d8>
 800b1d6:	9b03      	ldr	r3, [sp, #12]
 800b1d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1dc:	0d1b      	lsrs	r3, r3, #20
 800b1de:	051b      	lsls	r3, r3, #20
 800b1e0:	b12b      	cbz	r3, 800b1ee <_dtoa_r+0x7de>
 800b1e2:	9b08      	ldr	r3, [sp, #32]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	9308      	str	r3, [sp, #32]
 800b1e8:	f108 0801 	add.w	r8, r8, #1
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 81b0 	beq.w	800b558 <_dtoa_r+0xb48>
 800b1f8:	6923      	ldr	r3, [r4, #16]
 800b1fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1fe:	6918      	ldr	r0, [r3, #16]
 800b200:	f000 fb72 	bl	800b8e8 <__hi0bits>
 800b204:	f1c0 0020 	rsb	r0, r0, #32
 800b208:	9b08      	ldr	r3, [sp, #32]
 800b20a:	4418      	add	r0, r3
 800b20c:	f010 001f 	ands.w	r0, r0, #31
 800b210:	d077      	beq.n	800b302 <_dtoa_r+0x8f2>
 800b212:	f1c0 0320 	rsb	r3, r0, #32
 800b216:	2b04      	cmp	r3, #4
 800b218:	dd6b      	ble.n	800b2f2 <_dtoa_r+0x8e2>
 800b21a:	9b08      	ldr	r3, [sp, #32]
 800b21c:	f1c0 001c 	rsb	r0, r0, #28
 800b220:	4403      	add	r3, r0
 800b222:	4480      	add	r8, r0
 800b224:	4406      	add	r6, r0
 800b226:	9308      	str	r3, [sp, #32]
 800b228:	f1b8 0f00 	cmp.w	r8, #0
 800b22c:	dd05      	ble.n	800b23a <_dtoa_r+0x82a>
 800b22e:	4649      	mov	r1, r9
 800b230:	4642      	mov	r2, r8
 800b232:	4658      	mov	r0, fp
 800b234:	f000 fcbe 	bl	800bbb4 <__lshift>
 800b238:	4681      	mov	r9, r0
 800b23a:	9b08      	ldr	r3, [sp, #32]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dd05      	ble.n	800b24c <_dtoa_r+0x83c>
 800b240:	4621      	mov	r1, r4
 800b242:	461a      	mov	r2, r3
 800b244:	4658      	mov	r0, fp
 800b246:	f000 fcb5 	bl	800bbb4 <__lshift>
 800b24a:	4604      	mov	r4, r0
 800b24c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d059      	beq.n	800b306 <_dtoa_r+0x8f6>
 800b252:	4621      	mov	r1, r4
 800b254:	4648      	mov	r0, r9
 800b256:	f000 fd19 	bl	800bc8c <__mcmp>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	da53      	bge.n	800b306 <_dtoa_r+0x8f6>
 800b25e:	1e7b      	subs	r3, r7, #1
 800b260:	9304      	str	r3, [sp, #16]
 800b262:	4649      	mov	r1, r9
 800b264:	2300      	movs	r3, #0
 800b266:	220a      	movs	r2, #10
 800b268:	4658      	mov	r0, fp
 800b26a:	f000 faf7 	bl	800b85c <__multadd>
 800b26e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b270:	4681      	mov	r9, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 8172 	beq.w	800b55c <_dtoa_r+0xb4c>
 800b278:	2300      	movs	r3, #0
 800b27a:	4629      	mov	r1, r5
 800b27c:	220a      	movs	r2, #10
 800b27e:	4658      	mov	r0, fp
 800b280:	f000 faec 	bl	800b85c <__multadd>
 800b284:	9b00      	ldr	r3, [sp, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	4605      	mov	r5, r0
 800b28a:	dc67      	bgt.n	800b35c <_dtoa_r+0x94c>
 800b28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b28e:	2b02      	cmp	r3, #2
 800b290:	dc41      	bgt.n	800b316 <_dtoa_r+0x906>
 800b292:	e063      	b.n	800b35c <_dtoa_r+0x94c>
 800b294:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b296:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b29a:	e746      	b.n	800b12a <_dtoa_r+0x71a>
 800b29c:	9b07      	ldr	r3, [sp, #28]
 800b29e:	1e5c      	subs	r4, r3, #1
 800b2a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2a2:	42a3      	cmp	r3, r4
 800b2a4:	bfbf      	itttt	lt
 800b2a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b2a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b2aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b2ac:	1ae3      	sublt	r3, r4, r3
 800b2ae:	bfb4      	ite	lt
 800b2b0:	18d2      	addlt	r2, r2, r3
 800b2b2:	1b1c      	subge	r4, r3, r4
 800b2b4:	9b07      	ldr	r3, [sp, #28]
 800b2b6:	bfbc      	itt	lt
 800b2b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b2ba:	2400      	movlt	r4, #0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	bfb5      	itete	lt
 800b2c0:	eba8 0603 	sublt.w	r6, r8, r3
 800b2c4:	9b07      	ldrge	r3, [sp, #28]
 800b2c6:	2300      	movlt	r3, #0
 800b2c8:	4646      	movge	r6, r8
 800b2ca:	e730      	b.n	800b12e <_dtoa_r+0x71e>
 800b2cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b2ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b2d0:	4646      	mov	r6, r8
 800b2d2:	e735      	b.n	800b140 <_dtoa_r+0x730>
 800b2d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2d6:	e75c      	b.n	800b192 <_dtoa_r+0x782>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	e788      	b.n	800b1ee <_dtoa_r+0x7de>
 800b2dc:	3fe00000 	.word	0x3fe00000
 800b2e0:	40240000 	.word	0x40240000
 800b2e4:	40140000 	.word	0x40140000
 800b2e8:	9b02      	ldr	r3, [sp, #8]
 800b2ea:	e780      	b.n	800b1ee <_dtoa_r+0x7de>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2f0:	e782      	b.n	800b1f8 <_dtoa_r+0x7e8>
 800b2f2:	d099      	beq.n	800b228 <_dtoa_r+0x818>
 800b2f4:	9a08      	ldr	r2, [sp, #32]
 800b2f6:	331c      	adds	r3, #28
 800b2f8:	441a      	add	r2, r3
 800b2fa:	4498      	add	r8, r3
 800b2fc:	441e      	add	r6, r3
 800b2fe:	9208      	str	r2, [sp, #32]
 800b300:	e792      	b.n	800b228 <_dtoa_r+0x818>
 800b302:	4603      	mov	r3, r0
 800b304:	e7f6      	b.n	800b2f4 <_dtoa_r+0x8e4>
 800b306:	9b07      	ldr	r3, [sp, #28]
 800b308:	9704      	str	r7, [sp, #16]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	dc20      	bgt.n	800b350 <_dtoa_r+0x940>
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b312:	2b02      	cmp	r3, #2
 800b314:	dd1e      	ble.n	800b354 <_dtoa_r+0x944>
 800b316:	9b00      	ldr	r3, [sp, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f47f aec0 	bne.w	800b09e <_dtoa_r+0x68e>
 800b31e:	4621      	mov	r1, r4
 800b320:	2205      	movs	r2, #5
 800b322:	4658      	mov	r0, fp
 800b324:	f000 fa9a 	bl	800b85c <__multadd>
 800b328:	4601      	mov	r1, r0
 800b32a:	4604      	mov	r4, r0
 800b32c:	4648      	mov	r0, r9
 800b32e:	f000 fcad 	bl	800bc8c <__mcmp>
 800b332:	2800      	cmp	r0, #0
 800b334:	f77f aeb3 	ble.w	800b09e <_dtoa_r+0x68e>
 800b338:	4656      	mov	r6, sl
 800b33a:	2331      	movs	r3, #49	@ 0x31
 800b33c:	f806 3b01 	strb.w	r3, [r6], #1
 800b340:	9b04      	ldr	r3, [sp, #16]
 800b342:	3301      	adds	r3, #1
 800b344:	9304      	str	r3, [sp, #16]
 800b346:	e6ae      	b.n	800b0a6 <_dtoa_r+0x696>
 800b348:	9c07      	ldr	r4, [sp, #28]
 800b34a:	9704      	str	r7, [sp, #16]
 800b34c:	4625      	mov	r5, r4
 800b34e:	e7f3      	b.n	800b338 <_dtoa_r+0x928>
 800b350:	9b07      	ldr	r3, [sp, #28]
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b356:	2b00      	cmp	r3, #0
 800b358:	f000 8104 	beq.w	800b564 <_dtoa_r+0xb54>
 800b35c:	2e00      	cmp	r6, #0
 800b35e:	dd05      	ble.n	800b36c <_dtoa_r+0x95c>
 800b360:	4629      	mov	r1, r5
 800b362:	4632      	mov	r2, r6
 800b364:	4658      	mov	r0, fp
 800b366:	f000 fc25 	bl	800bbb4 <__lshift>
 800b36a:	4605      	mov	r5, r0
 800b36c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d05a      	beq.n	800b428 <_dtoa_r+0xa18>
 800b372:	6869      	ldr	r1, [r5, #4]
 800b374:	4658      	mov	r0, fp
 800b376:	f000 fa0f 	bl	800b798 <_Balloc>
 800b37a:	4606      	mov	r6, r0
 800b37c:	b928      	cbnz	r0, 800b38a <_dtoa_r+0x97a>
 800b37e:	4b84      	ldr	r3, [pc, #528]	@ (800b590 <_dtoa_r+0xb80>)
 800b380:	4602      	mov	r2, r0
 800b382:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b386:	f7ff bb5a 	b.w	800aa3e <_dtoa_r+0x2e>
 800b38a:	692a      	ldr	r2, [r5, #16]
 800b38c:	3202      	adds	r2, #2
 800b38e:	0092      	lsls	r2, r2, #2
 800b390:	f105 010c 	add.w	r1, r5, #12
 800b394:	300c      	adds	r0, #12
 800b396:	f000 ffaf 	bl	800c2f8 <memcpy>
 800b39a:	2201      	movs	r2, #1
 800b39c:	4631      	mov	r1, r6
 800b39e:	4658      	mov	r0, fp
 800b3a0:	f000 fc08 	bl	800bbb4 <__lshift>
 800b3a4:	f10a 0301 	add.w	r3, sl, #1
 800b3a8:	9307      	str	r3, [sp, #28]
 800b3aa:	9b00      	ldr	r3, [sp, #0]
 800b3ac:	4453      	add	r3, sl
 800b3ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3b0:	9b02      	ldr	r3, [sp, #8]
 800b3b2:	f003 0301 	and.w	r3, r3, #1
 800b3b6:	462f      	mov	r7, r5
 800b3b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	9b07      	ldr	r3, [sp, #28]
 800b3be:	4621      	mov	r1, r4
 800b3c0:	3b01      	subs	r3, #1
 800b3c2:	4648      	mov	r0, r9
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	f7ff fa9a 	bl	800a8fe <quorem>
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	9002      	str	r0, [sp, #8]
 800b3ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b3d2:	4648      	mov	r0, r9
 800b3d4:	f000 fc5a 	bl	800bc8c <__mcmp>
 800b3d8:	462a      	mov	r2, r5
 800b3da:	9008      	str	r0, [sp, #32]
 800b3dc:	4621      	mov	r1, r4
 800b3de:	4658      	mov	r0, fp
 800b3e0:	f000 fc70 	bl	800bcc4 <__mdiff>
 800b3e4:	68c2      	ldr	r2, [r0, #12]
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	bb02      	cbnz	r2, 800b42c <_dtoa_r+0xa1c>
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	4648      	mov	r0, r9
 800b3ee:	f000 fc4d 	bl	800bc8c <__mcmp>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	4631      	mov	r1, r6
 800b3f6:	4658      	mov	r0, fp
 800b3f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3fa:	f000 fa0d 	bl	800b818 <_Bfree>
 800b3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b400:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b402:	9e07      	ldr	r6, [sp, #28]
 800b404:	ea43 0102 	orr.w	r1, r3, r2
 800b408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b40a:	4319      	orrs	r1, r3
 800b40c:	d110      	bne.n	800b430 <_dtoa_r+0xa20>
 800b40e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b412:	d029      	beq.n	800b468 <_dtoa_r+0xa58>
 800b414:	9b08      	ldr	r3, [sp, #32]
 800b416:	2b00      	cmp	r3, #0
 800b418:	dd02      	ble.n	800b420 <_dtoa_r+0xa10>
 800b41a:	9b02      	ldr	r3, [sp, #8]
 800b41c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b420:	9b00      	ldr	r3, [sp, #0]
 800b422:	f883 8000 	strb.w	r8, [r3]
 800b426:	e63f      	b.n	800b0a8 <_dtoa_r+0x698>
 800b428:	4628      	mov	r0, r5
 800b42a:	e7bb      	b.n	800b3a4 <_dtoa_r+0x994>
 800b42c:	2201      	movs	r2, #1
 800b42e:	e7e1      	b.n	800b3f4 <_dtoa_r+0x9e4>
 800b430:	9b08      	ldr	r3, [sp, #32]
 800b432:	2b00      	cmp	r3, #0
 800b434:	db04      	blt.n	800b440 <_dtoa_r+0xa30>
 800b436:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b438:	430b      	orrs	r3, r1
 800b43a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b43c:	430b      	orrs	r3, r1
 800b43e:	d120      	bne.n	800b482 <_dtoa_r+0xa72>
 800b440:	2a00      	cmp	r2, #0
 800b442:	dded      	ble.n	800b420 <_dtoa_r+0xa10>
 800b444:	4649      	mov	r1, r9
 800b446:	2201      	movs	r2, #1
 800b448:	4658      	mov	r0, fp
 800b44a:	f000 fbb3 	bl	800bbb4 <__lshift>
 800b44e:	4621      	mov	r1, r4
 800b450:	4681      	mov	r9, r0
 800b452:	f000 fc1b 	bl	800bc8c <__mcmp>
 800b456:	2800      	cmp	r0, #0
 800b458:	dc03      	bgt.n	800b462 <_dtoa_r+0xa52>
 800b45a:	d1e1      	bne.n	800b420 <_dtoa_r+0xa10>
 800b45c:	f018 0f01 	tst.w	r8, #1
 800b460:	d0de      	beq.n	800b420 <_dtoa_r+0xa10>
 800b462:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b466:	d1d8      	bne.n	800b41a <_dtoa_r+0xa0a>
 800b468:	9a00      	ldr	r2, [sp, #0]
 800b46a:	2339      	movs	r3, #57	@ 0x39
 800b46c:	7013      	strb	r3, [r2, #0]
 800b46e:	4633      	mov	r3, r6
 800b470:	461e      	mov	r6, r3
 800b472:	3b01      	subs	r3, #1
 800b474:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b478:	2a39      	cmp	r2, #57	@ 0x39
 800b47a:	d052      	beq.n	800b522 <_dtoa_r+0xb12>
 800b47c:	3201      	adds	r2, #1
 800b47e:	701a      	strb	r2, [r3, #0]
 800b480:	e612      	b.n	800b0a8 <_dtoa_r+0x698>
 800b482:	2a00      	cmp	r2, #0
 800b484:	dd07      	ble.n	800b496 <_dtoa_r+0xa86>
 800b486:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b48a:	d0ed      	beq.n	800b468 <_dtoa_r+0xa58>
 800b48c:	9a00      	ldr	r2, [sp, #0]
 800b48e:	f108 0301 	add.w	r3, r8, #1
 800b492:	7013      	strb	r3, [r2, #0]
 800b494:	e608      	b.n	800b0a8 <_dtoa_r+0x698>
 800b496:	9b07      	ldr	r3, [sp, #28]
 800b498:	9a07      	ldr	r2, [sp, #28]
 800b49a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b49e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d028      	beq.n	800b4f6 <_dtoa_r+0xae6>
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	220a      	movs	r2, #10
 800b4aa:	4658      	mov	r0, fp
 800b4ac:	f000 f9d6 	bl	800b85c <__multadd>
 800b4b0:	42af      	cmp	r7, r5
 800b4b2:	4681      	mov	r9, r0
 800b4b4:	f04f 0300 	mov.w	r3, #0
 800b4b8:	f04f 020a 	mov.w	r2, #10
 800b4bc:	4639      	mov	r1, r7
 800b4be:	4658      	mov	r0, fp
 800b4c0:	d107      	bne.n	800b4d2 <_dtoa_r+0xac2>
 800b4c2:	f000 f9cb 	bl	800b85c <__multadd>
 800b4c6:	4607      	mov	r7, r0
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	9b07      	ldr	r3, [sp, #28]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	9307      	str	r3, [sp, #28]
 800b4d0:	e774      	b.n	800b3bc <_dtoa_r+0x9ac>
 800b4d2:	f000 f9c3 	bl	800b85c <__multadd>
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	4607      	mov	r7, r0
 800b4da:	2300      	movs	r3, #0
 800b4dc:	220a      	movs	r2, #10
 800b4de:	4658      	mov	r0, fp
 800b4e0:	f000 f9bc 	bl	800b85c <__multadd>
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	e7f0      	b.n	800b4ca <_dtoa_r+0xaba>
 800b4e8:	9b00      	ldr	r3, [sp, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	bfcc      	ite	gt
 800b4ee:	461e      	movgt	r6, r3
 800b4f0:	2601      	movle	r6, #1
 800b4f2:	4456      	add	r6, sl
 800b4f4:	2700      	movs	r7, #0
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	4658      	mov	r0, fp
 800b4fc:	f000 fb5a 	bl	800bbb4 <__lshift>
 800b500:	4621      	mov	r1, r4
 800b502:	4681      	mov	r9, r0
 800b504:	f000 fbc2 	bl	800bc8c <__mcmp>
 800b508:	2800      	cmp	r0, #0
 800b50a:	dcb0      	bgt.n	800b46e <_dtoa_r+0xa5e>
 800b50c:	d102      	bne.n	800b514 <_dtoa_r+0xb04>
 800b50e:	f018 0f01 	tst.w	r8, #1
 800b512:	d1ac      	bne.n	800b46e <_dtoa_r+0xa5e>
 800b514:	4633      	mov	r3, r6
 800b516:	461e      	mov	r6, r3
 800b518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b51c:	2a30      	cmp	r2, #48	@ 0x30
 800b51e:	d0fa      	beq.n	800b516 <_dtoa_r+0xb06>
 800b520:	e5c2      	b.n	800b0a8 <_dtoa_r+0x698>
 800b522:	459a      	cmp	sl, r3
 800b524:	d1a4      	bne.n	800b470 <_dtoa_r+0xa60>
 800b526:	9b04      	ldr	r3, [sp, #16]
 800b528:	3301      	adds	r3, #1
 800b52a:	9304      	str	r3, [sp, #16]
 800b52c:	2331      	movs	r3, #49	@ 0x31
 800b52e:	f88a 3000 	strb.w	r3, [sl]
 800b532:	e5b9      	b.n	800b0a8 <_dtoa_r+0x698>
 800b534:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b536:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b594 <_dtoa_r+0xb84>
 800b53a:	b11b      	cbz	r3, 800b544 <_dtoa_r+0xb34>
 800b53c:	f10a 0308 	add.w	r3, sl, #8
 800b540:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b542:	6013      	str	r3, [r2, #0]
 800b544:	4650      	mov	r0, sl
 800b546:	b019      	add	sp, #100	@ 0x64
 800b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b54e:	2b01      	cmp	r3, #1
 800b550:	f77f ae37 	ble.w	800b1c2 <_dtoa_r+0x7b2>
 800b554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b556:	930a      	str	r3, [sp, #40]	@ 0x28
 800b558:	2001      	movs	r0, #1
 800b55a:	e655      	b.n	800b208 <_dtoa_r+0x7f8>
 800b55c:	9b00      	ldr	r3, [sp, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f77f aed6 	ble.w	800b310 <_dtoa_r+0x900>
 800b564:	4656      	mov	r6, sl
 800b566:	4621      	mov	r1, r4
 800b568:	4648      	mov	r0, r9
 800b56a:	f7ff f9c8 	bl	800a8fe <quorem>
 800b56e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b572:	f806 8b01 	strb.w	r8, [r6], #1
 800b576:	9b00      	ldr	r3, [sp, #0]
 800b578:	eba6 020a 	sub.w	r2, r6, sl
 800b57c:	4293      	cmp	r3, r2
 800b57e:	ddb3      	ble.n	800b4e8 <_dtoa_r+0xad8>
 800b580:	4649      	mov	r1, r9
 800b582:	2300      	movs	r3, #0
 800b584:	220a      	movs	r2, #10
 800b586:	4658      	mov	r0, fp
 800b588:	f000 f968 	bl	800b85c <__multadd>
 800b58c:	4681      	mov	r9, r0
 800b58e:	e7ea      	b.n	800b566 <_dtoa_r+0xb56>
 800b590:	0800dce0 	.word	0x0800dce0
 800b594:	0800dc64 	.word	0x0800dc64

0800b598 <_free_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4605      	mov	r5, r0
 800b59c:	2900      	cmp	r1, #0
 800b59e:	d041      	beq.n	800b624 <_free_r+0x8c>
 800b5a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5a4:	1f0c      	subs	r4, r1, #4
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	bfb8      	it	lt
 800b5aa:	18e4      	addlt	r4, r4, r3
 800b5ac:	f000 f8e8 	bl	800b780 <__malloc_lock>
 800b5b0:	4a1d      	ldr	r2, [pc, #116]	@ (800b628 <_free_r+0x90>)
 800b5b2:	6813      	ldr	r3, [r2, #0]
 800b5b4:	b933      	cbnz	r3, 800b5c4 <_free_r+0x2c>
 800b5b6:	6063      	str	r3, [r4, #4]
 800b5b8:	6014      	str	r4, [r2, #0]
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5c0:	f000 b8e4 	b.w	800b78c <__malloc_unlock>
 800b5c4:	42a3      	cmp	r3, r4
 800b5c6:	d908      	bls.n	800b5da <_free_r+0x42>
 800b5c8:	6820      	ldr	r0, [r4, #0]
 800b5ca:	1821      	adds	r1, r4, r0
 800b5cc:	428b      	cmp	r3, r1
 800b5ce:	bf01      	itttt	eq
 800b5d0:	6819      	ldreq	r1, [r3, #0]
 800b5d2:	685b      	ldreq	r3, [r3, #4]
 800b5d4:	1809      	addeq	r1, r1, r0
 800b5d6:	6021      	streq	r1, [r4, #0]
 800b5d8:	e7ed      	b.n	800b5b6 <_free_r+0x1e>
 800b5da:	461a      	mov	r2, r3
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	b10b      	cbz	r3, 800b5e4 <_free_r+0x4c>
 800b5e0:	42a3      	cmp	r3, r4
 800b5e2:	d9fa      	bls.n	800b5da <_free_r+0x42>
 800b5e4:	6811      	ldr	r1, [r2, #0]
 800b5e6:	1850      	adds	r0, r2, r1
 800b5e8:	42a0      	cmp	r0, r4
 800b5ea:	d10b      	bne.n	800b604 <_free_r+0x6c>
 800b5ec:	6820      	ldr	r0, [r4, #0]
 800b5ee:	4401      	add	r1, r0
 800b5f0:	1850      	adds	r0, r2, r1
 800b5f2:	4283      	cmp	r3, r0
 800b5f4:	6011      	str	r1, [r2, #0]
 800b5f6:	d1e0      	bne.n	800b5ba <_free_r+0x22>
 800b5f8:	6818      	ldr	r0, [r3, #0]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	6053      	str	r3, [r2, #4]
 800b5fe:	4408      	add	r0, r1
 800b600:	6010      	str	r0, [r2, #0]
 800b602:	e7da      	b.n	800b5ba <_free_r+0x22>
 800b604:	d902      	bls.n	800b60c <_free_r+0x74>
 800b606:	230c      	movs	r3, #12
 800b608:	602b      	str	r3, [r5, #0]
 800b60a:	e7d6      	b.n	800b5ba <_free_r+0x22>
 800b60c:	6820      	ldr	r0, [r4, #0]
 800b60e:	1821      	adds	r1, r4, r0
 800b610:	428b      	cmp	r3, r1
 800b612:	bf04      	itt	eq
 800b614:	6819      	ldreq	r1, [r3, #0]
 800b616:	685b      	ldreq	r3, [r3, #4]
 800b618:	6063      	str	r3, [r4, #4]
 800b61a:	bf04      	itt	eq
 800b61c:	1809      	addeq	r1, r1, r0
 800b61e:	6021      	streq	r1, [r4, #0]
 800b620:	6054      	str	r4, [r2, #4]
 800b622:	e7ca      	b.n	800b5ba <_free_r+0x22>
 800b624:	bd38      	pop	{r3, r4, r5, pc}
 800b626:	bf00      	nop
 800b628:	200021a0 	.word	0x200021a0

0800b62c <malloc>:
 800b62c:	4b02      	ldr	r3, [pc, #8]	@ (800b638 <malloc+0xc>)
 800b62e:	4601      	mov	r1, r0
 800b630:	6818      	ldr	r0, [r3, #0]
 800b632:	f000 b825 	b.w	800b680 <_malloc_r>
 800b636:	bf00      	nop
 800b638:	20000108 	.word	0x20000108

0800b63c <sbrk_aligned>:
 800b63c:	b570      	push	{r4, r5, r6, lr}
 800b63e:	4e0f      	ldr	r6, [pc, #60]	@ (800b67c <sbrk_aligned+0x40>)
 800b640:	460c      	mov	r4, r1
 800b642:	6831      	ldr	r1, [r6, #0]
 800b644:	4605      	mov	r5, r0
 800b646:	b911      	cbnz	r1, 800b64e <sbrk_aligned+0x12>
 800b648:	f000 fe46 	bl	800c2d8 <_sbrk_r>
 800b64c:	6030      	str	r0, [r6, #0]
 800b64e:	4621      	mov	r1, r4
 800b650:	4628      	mov	r0, r5
 800b652:	f000 fe41 	bl	800c2d8 <_sbrk_r>
 800b656:	1c43      	adds	r3, r0, #1
 800b658:	d103      	bne.n	800b662 <sbrk_aligned+0x26>
 800b65a:	f04f 34ff 	mov.w	r4, #4294967295
 800b65e:	4620      	mov	r0, r4
 800b660:	bd70      	pop	{r4, r5, r6, pc}
 800b662:	1cc4      	adds	r4, r0, #3
 800b664:	f024 0403 	bic.w	r4, r4, #3
 800b668:	42a0      	cmp	r0, r4
 800b66a:	d0f8      	beq.n	800b65e <sbrk_aligned+0x22>
 800b66c:	1a21      	subs	r1, r4, r0
 800b66e:	4628      	mov	r0, r5
 800b670:	f000 fe32 	bl	800c2d8 <_sbrk_r>
 800b674:	3001      	adds	r0, #1
 800b676:	d1f2      	bne.n	800b65e <sbrk_aligned+0x22>
 800b678:	e7ef      	b.n	800b65a <sbrk_aligned+0x1e>
 800b67a:	bf00      	nop
 800b67c:	2000219c 	.word	0x2000219c

0800b680 <_malloc_r>:
 800b680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b684:	1ccd      	adds	r5, r1, #3
 800b686:	f025 0503 	bic.w	r5, r5, #3
 800b68a:	3508      	adds	r5, #8
 800b68c:	2d0c      	cmp	r5, #12
 800b68e:	bf38      	it	cc
 800b690:	250c      	movcc	r5, #12
 800b692:	2d00      	cmp	r5, #0
 800b694:	4606      	mov	r6, r0
 800b696:	db01      	blt.n	800b69c <_malloc_r+0x1c>
 800b698:	42a9      	cmp	r1, r5
 800b69a:	d904      	bls.n	800b6a6 <_malloc_r+0x26>
 800b69c:	230c      	movs	r3, #12
 800b69e:	6033      	str	r3, [r6, #0]
 800b6a0:	2000      	movs	r0, #0
 800b6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b77c <_malloc_r+0xfc>
 800b6aa:	f000 f869 	bl	800b780 <__malloc_lock>
 800b6ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b6b2:	461c      	mov	r4, r3
 800b6b4:	bb44      	cbnz	r4, 800b708 <_malloc_r+0x88>
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	f7ff ffbf 	bl	800b63c <sbrk_aligned>
 800b6be:	1c43      	adds	r3, r0, #1
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	d158      	bne.n	800b776 <_malloc_r+0xf6>
 800b6c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b6c8:	4627      	mov	r7, r4
 800b6ca:	2f00      	cmp	r7, #0
 800b6cc:	d143      	bne.n	800b756 <_malloc_r+0xd6>
 800b6ce:	2c00      	cmp	r4, #0
 800b6d0:	d04b      	beq.n	800b76a <_malloc_r+0xea>
 800b6d2:	6823      	ldr	r3, [r4, #0]
 800b6d4:	4639      	mov	r1, r7
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	eb04 0903 	add.w	r9, r4, r3
 800b6dc:	f000 fdfc 	bl	800c2d8 <_sbrk_r>
 800b6e0:	4581      	cmp	r9, r0
 800b6e2:	d142      	bne.n	800b76a <_malloc_r+0xea>
 800b6e4:	6821      	ldr	r1, [r4, #0]
 800b6e6:	1a6d      	subs	r5, r5, r1
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f7ff ffa6 	bl	800b63c <sbrk_aligned>
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	d03a      	beq.n	800b76a <_malloc_r+0xea>
 800b6f4:	6823      	ldr	r3, [r4, #0]
 800b6f6:	442b      	add	r3, r5
 800b6f8:	6023      	str	r3, [r4, #0]
 800b6fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b6fe:	685a      	ldr	r2, [r3, #4]
 800b700:	bb62      	cbnz	r2, 800b75c <_malloc_r+0xdc>
 800b702:	f8c8 7000 	str.w	r7, [r8]
 800b706:	e00f      	b.n	800b728 <_malloc_r+0xa8>
 800b708:	6822      	ldr	r2, [r4, #0]
 800b70a:	1b52      	subs	r2, r2, r5
 800b70c:	d420      	bmi.n	800b750 <_malloc_r+0xd0>
 800b70e:	2a0b      	cmp	r2, #11
 800b710:	d917      	bls.n	800b742 <_malloc_r+0xc2>
 800b712:	1961      	adds	r1, r4, r5
 800b714:	42a3      	cmp	r3, r4
 800b716:	6025      	str	r5, [r4, #0]
 800b718:	bf18      	it	ne
 800b71a:	6059      	strne	r1, [r3, #4]
 800b71c:	6863      	ldr	r3, [r4, #4]
 800b71e:	bf08      	it	eq
 800b720:	f8c8 1000 	streq.w	r1, [r8]
 800b724:	5162      	str	r2, [r4, r5]
 800b726:	604b      	str	r3, [r1, #4]
 800b728:	4630      	mov	r0, r6
 800b72a:	f000 f82f 	bl	800b78c <__malloc_unlock>
 800b72e:	f104 000b 	add.w	r0, r4, #11
 800b732:	1d23      	adds	r3, r4, #4
 800b734:	f020 0007 	bic.w	r0, r0, #7
 800b738:	1ac2      	subs	r2, r0, r3
 800b73a:	bf1c      	itt	ne
 800b73c:	1a1b      	subne	r3, r3, r0
 800b73e:	50a3      	strne	r3, [r4, r2]
 800b740:	e7af      	b.n	800b6a2 <_malloc_r+0x22>
 800b742:	6862      	ldr	r2, [r4, #4]
 800b744:	42a3      	cmp	r3, r4
 800b746:	bf0c      	ite	eq
 800b748:	f8c8 2000 	streq.w	r2, [r8]
 800b74c:	605a      	strne	r2, [r3, #4]
 800b74e:	e7eb      	b.n	800b728 <_malloc_r+0xa8>
 800b750:	4623      	mov	r3, r4
 800b752:	6864      	ldr	r4, [r4, #4]
 800b754:	e7ae      	b.n	800b6b4 <_malloc_r+0x34>
 800b756:	463c      	mov	r4, r7
 800b758:	687f      	ldr	r7, [r7, #4]
 800b75a:	e7b6      	b.n	800b6ca <_malloc_r+0x4a>
 800b75c:	461a      	mov	r2, r3
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	42a3      	cmp	r3, r4
 800b762:	d1fb      	bne.n	800b75c <_malloc_r+0xdc>
 800b764:	2300      	movs	r3, #0
 800b766:	6053      	str	r3, [r2, #4]
 800b768:	e7de      	b.n	800b728 <_malloc_r+0xa8>
 800b76a:	230c      	movs	r3, #12
 800b76c:	6033      	str	r3, [r6, #0]
 800b76e:	4630      	mov	r0, r6
 800b770:	f000 f80c 	bl	800b78c <__malloc_unlock>
 800b774:	e794      	b.n	800b6a0 <_malloc_r+0x20>
 800b776:	6005      	str	r5, [r0, #0]
 800b778:	e7d6      	b.n	800b728 <_malloc_r+0xa8>
 800b77a:	bf00      	nop
 800b77c:	200021a0 	.word	0x200021a0

0800b780 <__malloc_lock>:
 800b780:	4801      	ldr	r0, [pc, #4]	@ (800b788 <__malloc_lock+0x8>)
 800b782:	f7ff b8ba 	b.w	800a8fa <__retarget_lock_acquire_recursive>
 800b786:	bf00      	nop
 800b788:	20002198 	.word	0x20002198

0800b78c <__malloc_unlock>:
 800b78c:	4801      	ldr	r0, [pc, #4]	@ (800b794 <__malloc_unlock+0x8>)
 800b78e:	f7ff b8b5 	b.w	800a8fc <__retarget_lock_release_recursive>
 800b792:	bf00      	nop
 800b794:	20002198 	.word	0x20002198

0800b798 <_Balloc>:
 800b798:	b570      	push	{r4, r5, r6, lr}
 800b79a:	69c6      	ldr	r6, [r0, #28]
 800b79c:	4604      	mov	r4, r0
 800b79e:	460d      	mov	r5, r1
 800b7a0:	b976      	cbnz	r6, 800b7c0 <_Balloc+0x28>
 800b7a2:	2010      	movs	r0, #16
 800b7a4:	f7ff ff42 	bl	800b62c <malloc>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	61e0      	str	r0, [r4, #28]
 800b7ac:	b920      	cbnz	r0, 800b7b8 <_Balloc+0x20>
 800b7ae:	4b18      	ldr	r3, [pc, #96]	@ (800b810 <_Balloc+0x78>)
 800b7b0:	4818      	ldr	r0, [pc, #96]	@ (800b814 <_Balloc+0x7c>)
 800b7b2:	216b      	movs	r1, #107	@ 0x6b
 800b7b4:	f000 fdae 	bl	800c314 <__assert_func>
 800b7b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7bc:	6006      	str	r6, [r0, #0]
 800b7be:	60c6      	str	r6, [r0, #12]
 800b7c0:	69e6      	ldr	r6, [r4, #28]
 800b7c2:	68f3      	ldr	r3, [r6, #12]
 800b7c4:	b183      	cbz	r3, 800b7e8 <_Balloc+0x50>
 800b7c6:	69e3      	ldr	r3, [r4, #28]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7ce:	b9b8      	cbnz	r0, 800b800 <_Balloc+0x68>
 800b7d0:	2101      	movs	r1, #1
 800b7d2:	fa01 f605 	lsl.w	r6, r1, r5
 800b7d6:	1d72      	adds	r2, r6, #5
 800b7d8:	0092      	lsls	r2, r2, #2
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f000 fdb8 	bl	800c350 <_calloc_r>
 800b7e0:	b160      	cbz	r0, 800b7fc <_Balloc+0x64>
 800b7e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7e6:	e00e      	b.n	800b806 <_Balloc+0x6e>
 800b7e8:	2221      	movs	r2, #33	@ 0x21
 800b7ea:	2104      	movs	r1, #4
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 fdaf 	bl	800c350 <_calloc_r>
 800b7f2:	69e3      	ldr	r3, [r4, #28]
 800b7f4:	60f0      	str	r0, [r6, #12]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1e4      	bne.n	800b7c6 <_Balloc+0x2e>
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	bd70      	pop	{r4, r5, r6, pc}
 800b800:	6802      	ldr	r2, [r0, #0]
 800b802:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b806:	2300      	movs	r3, #0
 800b808:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b80c:	e7f7      	b.n	800b7fe <_Balloc+0x66>
 800b80e:	bf00      	nop
 800b810:	0800dc71 	.word	0x0800dc71
 800b814:	0800dcf1 	.word	0x0800dcf1

0800b818 <_Bfree>:
 800b818:	b570      	push	{r4, r5, r6, lr}
 800b81a:	69c6      	ldr	r6, [r0, #28]
 800b81c:	4605      	mov	r5, r0
 800b81e:	460c      	mov	r4, r1
 800b820:	b976      	cbnz	r6, 800b840 <_Bfree+0x28>
 800b822:	2010      	movs	r0, #16
 800b824:	f7ff ff02 	bl	800b62c <malloc>
 800b828:	4602      	mov	r2, r0
 800b82a:	61e8      	str	r0, [r5, #28]
 800b82c:	b920      	cbnz	r0, 800b838 <_Bfree+0x20>
 800b82e:	4b09      	ldr	r3, [pc, #36]	@ (800b854 <_Bfree+0x3c>)
 800b830:	4809      	ldr	r0, [pc, #36]	@ (800b858 <_Bfree+0x40>)
 800b832:	218f      	movs	r1, #143	@ 0x8f
 800b834:	f000 fd6e 	bl	800c314 <__assert_func>
 800b838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b83c:	6006      	str	r6, [r0, #0]
 800b83e:	60c6      	str	r6, [r0, #12]
 800b840:	b13c      	cbz	r4, 800b852 <_Bfree+0x3a>
 800b842:	69eb      	ldr	r3, [r5, #28]
 800b844:	6862      	ldr	r2, [r4, #4]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b84c:	6021      	str	r1, [r4, #0]
 800b84e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b852:	bd70      	pop	{r4, r5, r6, pc}
 800b854:	0800dc71 	.word	0x0800dc71
 800b858:	0800dcf1 	.word	0x0800dcf1

0800b85c <__multadd>:
 800b85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b860:	690d      	ldr	r5, [r1, #16]
 800b862:	4607      	mov	r7, r0
 800b864:	460c      	mov	r4, r1
 800b866:	461e      	mov	r6, r3
 800b868:	f101 0c14 	add.w	ip, r1, #20
 800b86c:	2000      	movs	r0, #0
 800b86e:	f8dc 3000 	ldr.w	r3, [ip]
 800b872:	b299      	uxth	r1, r3
 800b874:	fb02 6101 	mla	r1, r2, r1, r6
 800b878:	0c1e      	lsrs	r6, r3, #16
 800b87a:	0c0b      	lsrs	r3, r1, #16
 800b87c:	fb02 3306 	mla	r3, r2, r6, r3
 800b880:	b289      	uxth	r1, r1
 800b882:	3001      	adds	r0, #1
 800b884:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b888:	4285      	cmp	r5, r0
 800b88a:	f84c 1b04 	str.w	r1, [ip], #4
 800b88e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b892:	dcec      	bgt.n	800b86e <__multadd+0x12>
 800b894:	b30e      	cbz	r6, 800b8da <__multadd+0x7e>
 800b896:	68a3      	ldr	r3, [r4, #8]
 800b898:	42ab      	cmp	r3, r5
 800b89a:	dc19      	bgt.n	800b8d0 <__multadd+0x74>
 800b89c:	6861      	ldr	r1, [r4, #4]
 800b89e:	4638      	mov	r0, r7
 800b8a0:	3101      	adds	r1, #1
 800b8a2:	f7ff ff79 	bl	800b798 <_Balloc>
 800b8a6:	4680      	mov	r8, r0
 800b8a8:	b928      	cbnz	r0, 800b8b6 <__multadd+0x5a>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b8e0 <__multadd+0x84>)
 800b8ae:	480d      	ldr	r0, [pc, #52]	@ (800b8e4 <__multadd+0x88>)
 800b8b0:	21ba      	movs	r1, #186	@ 0xba
 800b8b2:	f000 fd2f 	bl	800c314 <__assert_func>
 800b8b6:	6922      	ldr	r2, [r4, #16]
 800b8b8:	3202      	adds	r2, #2
 800b8ba:	f104 010c 	add.w	r1, r4, #12
 800b8be:	0092      	lsls	r2, r2, #2
 800b8c0:	300c      	adds	r0, #12
 800b8c2:	f000 fd19 	bl	800c2f8 <memcpy>
 800b8c6:	4621      	mov	r1, r4
 800b8c8:	4638      	mov	r0, r7
 800b8ca:	f7ff ffa5 	bl	800b818 <_Bfree>
 800b8ce:	4644      	mov	r4, r8
 800b8d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8d4:	3501      	adds	r5, #1
 800b8d6:	615e      	str	r6, [r3, #20]
 800b8d8:	6125      	str	r5, [r4, #16]
 800b8da:	4620      	mov	r0, r4
 800b8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e0:	0800dce0 	.word	0x0800dce0
 800b8e4:	0800dcf1 	.word	0x0800dcf1

0800b8e8 <__hi0bits>:
 800b8e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	bf36      	itet	cc
 800b8f0:	0403      	lslcc	r3, r0, #16
 800b8f2:	2000      	movcs	r0, #0
 800b8f4:	2010      	movcc	r0, #16
 800b8f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b8fa:	bf3c      	itt	cc
 800b8fc:	021b      	lslcc	r3, r3, #8
 800b8fe:	3008      	addcc	r0, #8
 800b900:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b904:	bf3c      	itt	cc
 800b906:	011b      	lslcc	r3, r3, #4
 800b908:	3004      	addcc	r0, #4
 800b90a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b90e:	bf3c      	itt	cc
 800b910:	009b      	lslcc	r3, r3, #2
 800b912:	3002      	addcc	r0, #2
 800b914:	2b00      	cmp	r3, #0
 800b916:	db05      	blt.n	800b924 <__hi0bits+0x3c>
 800b918:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b91c:	f100 0001 	add.w	r0, r0, #1
 800b920:	bf08      	it	eq
 800b922:	2020      	moveq	r0, #32
 800b924:	4770      	bx	lr

0800b926 <__lo0bits>:
 800b926:	6803      	ldr	r3, [r0, #0]
 800b928:	4602      	mov	r2, r0
 800b92a:	f013 0007 	ands.w	r0, r3, #7
 800b92e:	d00b      	beq.n	800b948 <__lo0bits+0x22>
 800b930:	07d9      	lsls	r1, r3, #31
 800b932:	d421      	bmi.n	800b978 <__lo0bits+0x52>
 800b934:	0798      	lsls	r0, r3, #30
 800b936:	bf49      	itett	mi
 800b938:	085b      	lsrmi	r3, r3, #1
 800b93a:	089b      	lsrpl	r3, r3, #2
 800b93c:	2001      	movmi	r0, #1
 800b93e:	6013      	strmi	r3, [r2, #0]
 800b940:	bf5c      	itt	pl
 800b942:	6013      	strpl	r3, [r2, #0]
 800b944:	2002      	movpl	r0, #2
 800b946:	4770      	bx	lr
 800b948:	b299      	uxth	r1, r3
 800b94a:	b909      	cbnz	r1, 800b950 <__lo0bits+0x2a>
 800b94c:	0c1b      	lsrs	r3, r3, #16
 800b94e:	2010      	movs	r0, #16
 800b950:	b2d9      	uxtb	r1, r3
 800b952:	b909      	cbnz	r1, 800b958 <__lo0bits+0x32>
 800b954:	3008      	adds	r0, #8
 800b956:	0a1b      	lsrs	r3, r3, #8
 800b958:	0719      	lsls	r1, r3, #28
 800b95a:	bf04      	itt	eq
 800b95c:	091b      	lsreq	r3, r3, #4
 800b95e:	3004      	addeq	r0, #4
 800b960:	0799      	lsls	r1, r3, #30
 800b962:	bf04      	itt	eq
 800b964:	089b      	lsreq	r3, r3, #2
 800b966:	3002      	addeq	r0, #2
 800b968:	07d9      	lsls	r1, r3, #31
 800b96a:	d403      	bmi.n	800b974 <__lo0bits+0x4e>
 800b96c:	085b      	lsrs	r3, r3, #1
 800b96e:	f100 0001 	add.w	r0, r0, #1
 800b972:	d003      	beq.n	800b97c <__lo0bits+0x56>
 800b974:	6013      	str	r3, [r2, #0]
 800b976:	4770      	bx	lr
 800b978:	2000      	movs	r0, #0
 800b97a:	4770      	bx	lr
 800b97c:	2020      	movs	r0, #32
 800b97e:	4770      	bx	lr

0800b980 <__i2b>:
 800b980:	b510      	push	{r4, lr}
 800b982:	460c      	mov	r4, r1
 800b984:	2101      	movs	r1, #1
 800b986:	f7ff ff07 	bl	800b798 <_Balloc>
 800b98a:	4602      	mov	r2, r0
 800b98c:	b928      	cbnz	r0, 800b99a <__i2b+0x1a>
 800b98e:	4b05      	ldr	r3, [pc, #20]	@ (800b9a4 <__i2b+0x24>)
 800b990:	4805      	ldr	r0, [pc, #20]	@ (800b9a8 <__i2b+0x28>)
 800b992:	f240 1145 	movw	r1, #325	@ 0x145
 800b996:	f000 fcbd 	bl	800c314 <__assert_func>
 800b99a:	2301      	movs	r3, #1
 800b99c:	6144      	str	r4, [r0, #20]
 800b99e:	6103      	str	r3, [r0, #16]
 800b9a0:	bd10      	pop	{r4, pc}
 800b9a2:	bf00      	nop
 800b9a4:	0800dce0 	.word	0x0800dce0
 800b9a8:	0800dcf1 	.word	0x0800dcf1

0800b9ac <__multiply>:
 800b9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b0:	4614      	mov	r4, r2
 800b9b2:	690a      	ldr	r2, [r1, #16]
 800b9b4:	6923      	ldr	r3, [r4, #16]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	bfa8      	it	ge
 800b9ba:	4623      	movge	r3, r4
 800b9bc:	460f      	mov	r7, r1
 800b9be:	bfa4      	itt	ge
 800b9c0:	460c      	movge	r4, r1
 800b9c2:	461f      	movge	r7, r3
 800b9c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b9c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b9cc:	68a3      	ldr	r3, [r4, #8]
 800b9ce:	6861      	ldr	r1, [r4, #4]
 800b9d0:	eb0a 0609 	add.w	r6, sl, r9
 800b9d4:	42b3      	cmp	r3, r6
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	bfb8      	it	lt
 800b9da:	3101      	addlt	r1, #1
 800b9dc:	f7ff fedc 	bl	800b798 <_Balloc>
 800b9e0:	b930      	cbnz	r0, 800b9f0 <__multiply+0x44>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	4b44      	ldr	r3, [pc, #272]	@ (800baf8 <__multiply+0x14c>)
 800b9e6:	4845      	ldr	r0, [pc, #276]	@ (800bafc <__multiply+0x150>)
 800b9e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b9ec:	f000 fc92 	bl	800c314 <__assert_func>
 800b9f0:	f100 0514 	add.w	r5, r0, #20
 800b9f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b9f8:	462b      	mov	r3, r5
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	4543      	cmp	r3, r8
 800b9fe:	d321      	bcc.n	800ba44 <__multiply+0x98>
 800ba00:	f107 0114 	add.w	r1, r7, #20
 800ba04:	f104 0214 	add.w	r2, r4, #20
 800ba08:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ba0c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ba10:	9302      	str	r3, [sp, #8]
 800ba12:	1b13      	subs	r3, r2, r4
 800ba14:	3b15      	subs	r3, #21
 800ba16:	f023 0303 	bic.w	r3, r3, #3
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	f104 0715 	add.w	r7, r4, #21
 800ba20:	42ba      	cmp	r2, r7
 800ba22:	bf38      	it	cc
 800ba24:	2304      	movcc	r3, #4
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	9b02      	ldr	r3, [sp, #8]
 800ba2a:	9103      	str	r1, [sp, #12]
 800ba2c:	428b      	cmp	r3, r1
 800ba2e:	d80c      	bhi.n	800ba4a <__multiply+0x9e>
 800ba30:	2e00      	cmp	r6, #0
 800ba32:	dd03      	ble.n	800ba3c <__multiply+0x90>
 800ba34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d05b      	beq.n	800baf4 <__multiply+0x148>
 800ba3c:	6106      	str	r6, [r0, #16]
 800ba3e:	b005      	add	sp, #20
 800ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba44:	f843 2b04 	str.w	r2, [r3], #4
 800ba48:	e7d8      	b.n	800b9fc <__multiply+0x50>
 800ba4a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba4e:	f1ba 0f00 	cmp.w	sl, #0
 800ba52:	d024      	beq.n	800ba9e <__multiply+0xf2>
 800ba54:	f104 0e14 	add.w	lr, r4, #20
 800ba58:	46a9      	mov	r9, r5
 800ba5a:	f04f 0c00 	mov.w	ip, #0
 800ba5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba62:	f8d9 3000 	ldr.w	r3, [r9]
 800ba66:	fa1f fb87 	uxth.w	fp, r7
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ba74:	f8d9 7000 	ldr.w	r7, [r9]
 800ba78:	4463      	add	r3, ip
 800ba7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba7e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ba82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ba8c:	4572      	cmp	r2, lr
 800ba8e:	f849 3b04 	str.w	r3, [r9], #4
 800ba92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba96:	d8e2      	bhi.n	800ba5e <__multiply+0xb2>
 800ba98:	9b01      	ldr	r3, [sp, #4]
 800ba9a:	f845 c003 	str.w	ip, [r5, r3]
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800baa4:	3104      	adds	r1, #4
 800baa6:	f1b9 0f00 	cmp.w	r9, #0
 800baaa:	d021      	beq.n	800baf0 <__multiply+0x144>
 800baac:	682b      	ldr	r3, [r5, #0]
 800baae:	f104 0c14 	add.w	ip, r4, #20
 800bab2:	46ae      	mov	lr, r5
 800bab4:	f04f 0a00 	mov.w	sl, #0
 800bab8:	f8bc b000 	ldrh.w	fp, [ip]
 800babc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bac0:	fb09 770b 	mla	r7, r9, fp, r7
 800bac4:	4457      	add	r7, sl
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bacc:	f84e 3b04 	str.w	r3, [lr], #4
 800bad0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bad4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bad8:	f8be 3000 	ldrh.w	r3, [lr]
 800badc:	fb09 330a 	mla	r3, r9, sl, r3
 800bae0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bae4:	4562      	cmp	r2, ip
 800bae6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800baea:	d8e5      	bhi.n	800bab8 <__multiply+0x10c>
 800baec:	9f01      	ldr	r7, [sp, #4]
 800baee:	51eb      	str	r3, [r5, r7]
 800baf0:	3504      	adds	r5, #4
 800baf2:	e799      	b.n	800ba28 <__multiply+0x7c>
 800baf4:	3e01      	subs	r6, #1
 800baf6:	e79b      	b.n	800ba30 <__multiply+0x84>
 800baf8:	0800dce0 	.word	0x0800dce0
 800bafc:	0800dcf1 	.word	0x0800dcf1

0800bb00 <__pow5mult>:
 800bb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb04:	4615      	mov	r5, r2
 800bb06:	f012 0203 	ands.w	r2, r2, #3
 800bb0a:	4607      	mov	r7, r0
 800bb0c:	460e      	mov	r6, r1
 800bb0e:	d007      	beq.n	800bb20 <__pow5mult+0x20>
 800bb10:	4c25      	ldr	r4, [pc, #148]	@ (800bba8 <__pow5mult+0xa8>)
 800bb12:	3a01      	subs	r2, #1
 800bb14:	2300      	movs	r3, #0
 800bb16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb1a:	f7ff fe9f 	bl	800b85c <__multadd>
 800bb1e:	4606      	mov	r6, r0
 800bb20:	10ad      	asrs	r5, r5, #2
 800bb22:	d03d      	beq.n	800bba0 <__pow5mult+0xa0>
 800bb24:	69fc      	ldr	r4, [r7, #28]
 800bb26:	b97c      	cbnz	r4, 800bb48 <__pow5mult+0x48>
 800bb28:	2010      	movs	r0, #16
 800bb2a:	f7ff fd7f 	bl	800b62c <malloc>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	61f8      	str	r0, [r7, #28]
 800bb32:	b928      	cbnz	r0, 800bb40 <__pow5mult+0x40>
 800bb34:	4b1d      	ldr	r3, [pc, #116]	@ (800bbac <__pow5mult+0xac>)
 800bb36:	481e      	ldr	r0, [pc, #120]	@ (800bbb0 <__pow5mult+0xb0>)
 800bb38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb3c:	f000 fbea 	bl	800c314 <__assert_func>
 800bb40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb44:	6004      	str	r4, [r0, #0]
 800bb46:	60c4      	str	r4, [r0, #12]
 800bb48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bb4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb50:	b94c      	cbnz	r4, 800bb66 <__pow5mult+0x66>
 800bb52:	f240 2171 	movw	r1, #625	@ 0x271
 800bb56:	4638      	mov	r0, r7
 800bb58:	f7ff ff12 	bl	800b980 <__i2b>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb62:	4604      	mov	r4, r0
 800bb64:	6003      	str	r3, [r0, #0]
 800bb66:	f04f 0900 	mov.w	r9, #0
 800bb6a:	07eb      	lsls	r3, r5, #31
 800bb6c:	d50a      	bpl.n	800bb84 <__pow5mult+0x84>
 800bb6e:	4631      	mov	r1, r6
 800bb70:	4622      	mov	r2, r4
 800bb72:	4638      	mov	r0, r7
 800bb74:	f7ff ff1a 	bl	800b9ac <__multiply>
 800bb78:	4631      	mov	r1, r6
 800bb7a:	4680      	mov	r8, r0
 800bb7c:	4638      	mov	r0, r7
 800bb7e:	f7ff fe4b 	bl	800b818 <_Bfree>
 800bb82:	4646      	mov	r6, r8
 800bb84:	106d      	asrs	r5, r5, #1
 800bb86:	d00b      	beq.n	800bba0 <__pow5mult+0xa0>
 800bb88:	6820      	ldr	r0, [r4, #0]
 800bb8a:	b938      	cbnz	r0, 800bb9c <__pow5mult+0x9c>
 800bb8c:	4622      	mov	r2, r4
 800bb8e:	4621      	mov	r1, r4
 800bb90:	4638      	mov	r0, r7
 800bb92:	f7ff ff0b 	bl	800b9ac <__multiply>
 800bb96:	6020      	str	r0, [r4, #0]
 800bb98:	f8c0 9000 	str.w	r9, [r0]
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	e7e4      	b.n	800bb6a <__pow5mult+0x6a>
 800bba0:	4630      	mov	r0, r6
 800bba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bba6:	bf00      	nop
 800bba8:	0800dd4c 	.word	0x0800dd4c
 800bbac:	0800dc71 	.word	0x0800dc71
 800bbb0:	0800dcf1 	.word	0x0800dcf1

0800bbb4 <__lshift>:
 800bbb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb8:	460c      	mov	r4, r1
 800bbba:	6849      	ldr	r1, [r1, #4]
 800bbbc:	6923      	ldr	r3, [r4, #16]
 800bbbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbc2:	68a3      	ldr	r3, [r4, #8]
 800bbc4:	4607      	mov	r7, r0
 800bbc6:	4691      	mov	r9, r2
 800bbc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbcc:	f108 0601 	add.w	r6, r8, #1
 800bbd0:	42b3      	cmp	r3, r6
 800bbd2:	db0b      	blt.n	800bbec <__lshift+0x38>
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	f7ff fddf 	bl	800b798 <_Balloc>
 800bbda:	4605      	mov	r5, r0
 800bbdc:	b948      	cbnz	r0, 800bbf2 <__lshift+0x3e>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	4b28      	ldr	r3, [pc, #160]	@ (800bc84 <__lshift+0xd0>)
 800bbe2:	4829      	ldr	r0, [pc, #164]	@ (800bc88 <__lshift+0xd4>)
 800bbe4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bbe8:	f000 fb94 	bl	800c314 <__assert_func>
 800bbec:	3101      	adds	r1, #1
 800bbee:	005b      	lsls	r3, r3, #1
 800bbf0:	e7ee      	b.n	800bbd0 <__lshift+0x1c>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	f100 0114 	add.w	r1, r0, #20
 800bbf8:	f100 0210 	add.w	r2, r0, #16
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	4553      	cmp	r3, sl
 800bc00:	db33      	blt.n	800bc6a <__lshift+0xb6>
 800bc02:	6920      	ldr	r0, [r4, #16]
 800bc04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc08:	f104 0314 	add.w	r3, r4, #20
 800bc0c:	f019 091f 	ands.w	r9, r9, #31
 800bc10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc18:	d02b      	beq.n	800bc72 <__lshift+0xbe>
 800bc1a:	f1c9 0e20 	rsb	lr, r9, #32
 800bc1e:	468a      	mov	sl, r1
 800bc20:	2200      	movs	r2, #0
 800bc22:	6818      	ldr	r0, [r3, #0]
 800bc24:	fa00 f009 	lsl.w	r0, r0, r9
 800bc28:	4310      	orrs	r0, r2
 800bc2a:	f84a 0b04 	str.w	r0, [sl], #4
 800bc2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc32:	459c      	cmp	ip, r3
 800bc34:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc38:	d8f3      	bhi.n	800bc22 <__lshift+0x6e>
 800bc3a:	ebac 0304 	sub.w	r3, ip, r4
 800bc3e:	3b15      	subs	r3, #21
 800bc40:	f023 0303 	bic.w	r3, r3, #3
 800bc44:	3304      	adds	r3, #4
 800bc46:	f104 0015 	add.w	r0, r4, #21
 800bc4a:	4584      	cmp	ip, r0
 800bc4c:	bf38      	it	cc
 800bc4e:	2304      	movcc	r3, #4
 800bc50:	50ca      	str	r2, [r1, r3]
 800bc52:	b10a      	cbz	r2, 800bc58 <__lshift+0xa4>
 800bc54:	f108 0602 	add.w	r6, r8, #2
 800bc58:	3e01      	subs	r6, #1
 800bc5a:	4638      	mov	r0, r7
 800bc5c:	612e      	str	r6, [r5, #16]
 800bc5e:	4621      	mov	r1, r4
 800bc60:	f7ff fdda 	bl	800b818 <_Bfree>
 800bc64:	4628      	mov	r0, r5
 800bc66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc6e:	3301      	adds	r3, #1
 800bc70:	e7c5      	b.n	800bbfe <__lshift+0x4a>
 800bc72:	3904      	subs	r1, #4
 800bc74:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc78:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc7c:	459c      	cmp	ip, r3
 800bc7e:	d8f9      	bhi.n	800bc74 <__lshift+0xc0>
 800bc80:	e7ea      	b.n	800bc58 <__lshift+0xa4>
 800bc82:	bf00      	nop
 800bc84:	0800dce0 	.word	0x0800dce0
 800bc88:	0800dcf1 	.word	0x0800dcf1

0800bc8c <__mcmp>:
 800bc8c:	690a      	ldr	r2, [r1, #16]
 800bc8e:	4603      	mov	r3, r0
 800bc90:	6900      	ldr	r0, [r0, #16]
 800bc92:	1a80      	subs	r0, r0, r2
 800bc94:	b530      	push	{r4, r5, lr}
 800bc96:	d10e      	bne.n	800bcb6 <__mcmp+0x2a>
 800bc98:	3314      	adds	r3, #20
 800bc9a:	3114      	adds	r1, #20
 800bc9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bca0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bca4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bca8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bcac:	4295      	cmp	r5, r2
 800bcae:	d003      	beq.n	800bcb8 <__mcmp+0x2c>
 800bcb0:	d205      	bcs.n	800bcbe <__mcmp+0x32>
 800bcb2:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb6:	bd30      	pop	{r4, r5, pc}
 800bcb8:	42a3      	cmp	r3, r4
 800bcba:	d3f3      	bcc.n	800bca4 <__mcmp+0x18>
 800bcbc:	e7fb      	b.n	800bcb6 <__mcmp+0x2a>
 800bcbe:	2001      	movs	r0, #1
 800bcc0:	e7f9      	b.n	800bcb6 <__mcmp+0x2a>
	...

0800bcc4 <__mdiff>:
 800bcc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc8:	4689      	mov	r9, r1
 800bcca:	4606      	mov	r6, r0
 800bccc:	4611      	mov	r1, r2
 800bcce:	4648      	mov	r0, r9
 800bcd0:	4614      	mov	r4, r2
 800bcd2:	f7ff ffdb 	bl	800bc8c <__mcmp>
 800bcd6:	1e05      	subs	r5, r0, #0
 800bcd8:	d112      	bne.n	800bd00 <__mdiff+0x3c>
 800bcda:	4629      	mov	r1, r5
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f7ff fd5b 	bl	800b798 <_Balloc>
 800bce2:	4602      	mov	r2, r0
 800bce4:	b928      	cbnz	r0, 800bcf2 <__mdiff+0x2e>
 800bce6:	4b3f      	ldr	r3, [pc, #252]	@ (800bde4 <__mdiff+0x120>)
 800bce8:	f240 2137 	movw	r1, #567	@ 0x237
 800bcec:	483e      	ldr	r0, [pc, #248]	@ (800bde8 <__mdiff+0x124>)
 800bcee:	f000 fb11 	bl	800c314 <__assert_func>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	b003      	add	sp, #12
 800bcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd00:	bfbc      	itt	lt
 800bd02:	464b      	movlt	r3, r9
 800bd04:	46a1      	movlt	r9, r4
 800bd06:	4630      	mov	r0, r6
 800bd08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd0c:	bfba      	itte	lt
 800bd0e:	461c      	movlt	r4, r3
 800bd10:	2501      	movlt	r5, #1
 800bd12:	2500      	movge	r5, #0
 800bd14:	f7ff fd40 	bl	800b798 <_Balloc>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	b918      	cbnz	r0, 800bd24 <__mdiff+0x60>
 800bd1c:	4b31      	ldr	r3, [pc, #196]	@ (800bde4 <__mdiff+0x120>)
 800bd1e:	f240 2145 	movw	r1, #581	@ 0x245
 800bd22:	e7e3      	b.n	800bcec <__mdiff+0x28>
 800bd24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd28:	6926      	ldr	r6, [r4, #16]
 800bd2a:	60c5      	str	r5, [r0, #12]
 800bd2c:	f109 0310 	add.w	r3, r9, #16
 800bd30:	f109 0514 	add.w	r5, r9, #20
 800bd34:	f104 0e14 	add.w	lr, r4, #20
 800bd38:	f100 0b14 	add.w	fp, r0, #20
 800bd3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bd44:	9301      	str	r3, [sp, #4]
 800bd46:	46d9      	mov	r9, fp
 800bd48:	f04f 0c00 	mov.w	ip, #0
 800bd4c:	9b01      	ldr	r3, [sp, #4]
 800bd4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bd52:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bd56:	9301      	str	r3, [sp, #4]
 800bd58:	fa1f f38a 	uxth.w	r3, sl
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	b283      	uxth	r3, r0
 800bd60:	1acb      	subs	r3, r1, r3
 800bd62:	0c00      	lsrs	r0, r0, #16
 800bd64:	4463      	add	r3, ip
 800bd66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd74:	4576      	cmp	r6, lr
 800bd76:	f849 3b04 	str.w	r3, [r9], #4
 800bd7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd7e:	d8e5      	bhi.n	800bd4c <__mdiff+0x88>
 800bd80:	1b33      	subs	r3, r6, r4
 800bd82:	3b15      	subs	r3, #21
 800bd84:	f023 0303 	bic.w	r3, r3, #3
 800bd88:	3415      	adds	r4, #21
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	42a6      	cmp	r6, r4
 800bd8e:	bf38      	it	cc
 800bd90:	2304      	movcc	r3, #4
 800bd92:	441d      	add	r5, r3
 800bd94:	445b      	add	r3, fp
 800bd96:	461e      	mov	r6, r3
 800bd98:	462c      	mov	r4, r5
 800bd9a:	4544      	cmp	r4, r8
 800bd9c:	d30e      	bcc.n	800bdbc <__mdiff+0xf8>
 800bd9e:	f108 0103 	add.w	r1, r8, #3
 800bda2:	1b49      	subs	r1, r1, r5
 800bda4:	f021 0103 	bic.w	r1, r1, #3
 800bda8:	3d03      	subs	r5, #3
 800bdaa:	45a8      	cmp	r8, r5
 800bdac:	bf38      	it	cc
 800bdae:	2100      	movcc	r1, #0
 800bdb0:	440b      	add	r3, r1
 800bdb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdb6:	b191      	cbz	r1, 800bdde <__mdiff+0x11a>
 800bdb8:	6117      	str	r7, [r2, #16]
 800bdba:	e79d      	b.n	800bcf8 <__mdiff+0x34>
 800bdbc:	f854 1b04 	ldr.w	r1, [r4], #4
 800bdc0:	46e6      	mov	lr, ip
 800bdc2:	0c08      	lsrs	r0, r1, #16
 800bdc4:	fa1c fc81 	uxtah	ip, ip, r1
 800bdc8:	4471      	add	r1, lr
 800bdca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bdce:	b289      	uxth	r1, r1
 800bdd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bdd4:	f846 1b04 	str.w	r1, [r6], #4
 800bdd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bddc:	e7dd      	b.n	800bd9a <__mdiff+0xd6>
 800bdde:	3f01      	subs	r7, #1
 800bde0:	e7e7      	b.n	800bdb2 <__mdiff+0xee>
 800bde2:	bf00      	nop
 800bde4:	0800dce0 	.word	0x0800dce0
 800bde8:	0800dcf1 	.word	0x0800dcf1

0800bdec <__d2b>:
 800bdec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdf0:	460f      	mov	r7, r1
 800bdf2:	2101      	movs	r1, #1
 800bdf4:	ec59 8b10 	vmov	r8, r9, d0
 800bdf8:	4616      	mov	r6, r2
 800bdfa:	f7ff fccd 	bl	800b798 <_Balloc>
 800bdfe:	4604      	mov	r4, r0
 800be00:	b930      	cbnz	r0, 800be10 <__d2b+0x24>
 800be02:	4602      	mov	r2, r0
 800be04:	4b23      	ldr	r3, [pc, #140]	@ (800be94 <__d2b+0xa8>)
 800be06:	4824      	ldr	r0, [pc, #144]	@ (800be98 <__d2b+0xac>)
 800be08:	f240 310f 	movw	r1, #783	@ 0x30f
 800be0c:	f000 fa82 	bl	800c314 <__assert_func>
 800be10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be18:	b10d      	cbz	r5, 800be1e <__d2b+0x32>
 800be1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be1e:	9301      	str	r3, [sp, #4]
 800be20:	f1b8 0300 	subs.w	r3, r8, #0
 800be24:	d023      	beq.n	800be6e <__d2b+0x82>
 800be26:	4668      	mov	r0, sp
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	f7ff fd7c 	bl	800b926 <__lo0bits>
 800be2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800be32:	b1d0      	cbz	r0, 800be6a <__d2b+0x7e>
 800be34:	f1c0 0320 	rsb	r3, r0, #32
 800be38:	fa02 f303 	lsl.w	r3, r2, r3
 800be3c:	430b      	orrs	r3, r1
 800be3e:	40c2      	lsrs	r2, r0
 800be40:	6163      	str	r3, [r4, #20]
 800be42:	9201      	str	r2, [sp, #4]
 800be44:	9b01      	ldr	r3, [sp, #4]
 800be46:	61a3      	str	r3, [r4, #24]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	bf0c      	ite	eq
 800be4c:	2201      	moveq	r2, #1
 800be4e:	2202      	movne	r2, #2
 800be50:	6122      	str	r2, [r4, #16]
 800be52:	b1a5      	cbz	r5, 800be7e <__d2b+0x92>
 800be54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800be58:	4405      	add	r5, r0
 800be5a:	603d      	str	r5, [r7, #0]
 800be5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800be60:	6030      	str	r0, [r6, #0]
 800be62:	4620      	mov	r0, r4
 800be64:	b003      	add	sp, #12
 800be66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be6a:	6161      	str	r1, [r4, #20]
 800be6c:	e7ea      	b.n	800be44 <__d2b+0x58>
 800be6e:	a801      	add	r0, sp, #4
 800be70:	f7ff fd59 	bl	800b926 <__lo0bits>
 800be74:	9b01      	ldr	r3, [sp, #4]
 800be76:	6163      	str	r3, [r4, #20]
 800be78:	3020      	adds	r0, #32
 800be7a:	2201      	movs	r2, #1
 800be7c:	e7e8      	b.n	800be50 <__d2b+0x64>
 800be7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800be86:	6038      	str	r0, [r7, #0]
 800be88:	6918      	ldr	r0, [r3, #16]
 800be8a:	f7ff fd2d 	bl	800b8e8 <__hi0bits>
 800be8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be92:	e7e5      	b.n	800be60 <__d2b+0x74>
 800be94:	0800dce0 	.word	0x0800dce0
 800be98:	0800dcf1 	.word	0x0800dcf1

0800be9c <__ssputs_r>:
 800be9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bea0:	688e      	ldr	r6, [r1, #8]
 800bea2:	461f      	mov	r7, r3
 800bea4:	42be      	cmp	r6, r7
 800bea6:	680b      	ldr	r3, [r1, #0]
 800bea8:	4682      	mov	sl, r0
 800beaa:	460c      	mov	r4, r1
 800beac:	4690      	mov	r8, r2
 800beae:	d82d      	bhi.n	800bf0c <__ssputs_r+0x70>
 800beb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800beb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800beb8:	d026      	beq.n	800bf08 <__ssputs_r+0x6c>
 800beba:	6965      	ldr	r5, [r4, #20]
 800bebc:	6909      	ldr	r1, [r1, #16]
 800bebe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bec2:	eba3 0901 	sub.w	r9, r3, r1
 800bec6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800beca:	1c7b      	adds	r3, r7, #1
 800becc:	444b      	add	r3, r9
 800bece:	106d      	asrs	r5, r5, #1
 800bed0:	429d      	cmp	r5, r3
 800bed2:	bf38      	it	cc
 800bed4:	461d      	movcc	r5, r3
 800bed6:	0553      	lsls	r3, r2, #21
 800bed8:	d527      	bpl.n	800bf2a <__ssputs_r+0x8e>
 800beda:	4629      	mov	r1, r5
 800bedc:	f7ff fbd0 	bl	800b680 <_malloc_r>
 800bee0:	4606      	mov	r6, r0
 800bee2:	b360      	cbz	r0, 800bf3e <__ssputs_r+0xa2>
 800bee4:	6921      	ldr	r1, [r4, #16]
 800bee6:	464a      	mov	r2, r9
 800bee8:	f000 fa06 	bl	800c2f8 <memcpy>
 800beec:	89a3      	ldrh	r3, [r4, #12]
 800beee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bef6:	81a3      	strh	r3, [r4, #12]
 800bef8:	6126      	str	r6, [r4, #16]
 800befa:	6165      	str	r5, [r4, #20]
 800befc:	444e      	add	r6, r9
 800befe:	eba5 0509 	sub.w	r5, r5, r9
 800bf02:	6026      	str	r6, [r4, #0]
 800bf04:	60a5      	str	r5, [r4, #8]
 800bf06:	463e      	mov	r6, r7
 800bf08:	42be      	cmp	r6, r7
 800bf0a:	d900      	bls.n	800bf0e <__ssputs_r+0x72>
 800bf0c:	463e      	mov	r6, r7
 800bf0e:	6820      	ldr	r0, [r4, #0]
 800bf10:	4632      	mov	r2, r6
 800bf12:	4641      	mov	r1, r8
 800bf14:	f000 f9c6 	bl	800c2a4 <memmove>
 800bf18:	68a3      	ldr	r3, [r4, #8]
 800bf1a:	1b9b      	subs	r3, r3, r6
 800bf1c:	60a3      	str	r3, [r4, #8]
 800bf1e:	6823      	ldr	r3, [r4, #0]
 800bf20:	4433      	add	r3, r6
 800bf22:	6023      	str	r3, [r4, #0]
 800bf24:	2000      	movs	r0, #0
 800bf26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf2a:	462a      	mov	r2, r5
 800bf2c:	f000 fa36 	bl	800c39c <_realloc_r>
 800bf30:	4606      	mov	r6, r0
 800bf32:	2800      	cmp	r0, #0
 800bf34:	d1e0      	bne.n	800bef8 <__ssputs_r+0x5c>
 800bf36:	6921      	ldr	r1, [r4, #16]
 800bf38:	4650      	mov	r0, sl
 800bf3a:	f7ff fb2d 	bl	800b598 <_free_r>
 800bf3e:	230c      	movs	r3, #12
 800bf40:	f8ca 3000 	str.w	r3, [sl]
 800bf44:	89a3      	ldrh	r3, [r4, #12]
 800bf46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf50:	e7e9      	b.n	800bf26 <__ssputs_r+0x8a>
	...

0800bf54 <_svfiprintf_r>:
 800bf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf58:	4698      	mov	r8, r3
 800bf5a:	898b      	ldrh	r3, [r1, #12]
 800bf5c:	061b      	lsls	r3, r3, #24
 800bf5e:	b09d      	sub	sp, #116	@ 0x74
 800bf60:	4607      	mov	r7, r0
 800bf62:	460d      	mov	r5, r1
 800bf64:	4614      	mov	r4, r2
 800bf66:	d510      	bpl.n	800bf8a <_svfiprintf_r+0x36>
 800bf68:	690b      	ldr	r3, [r1, #16]
 800bf6a:	b973      	cbnz	r3, 800bf8a <_svfiprintf_r+0x36>
 800bf6c:	2140      	movs	r1, #64	@ 0x40
 800bf6e:	f7ff fb87 	bl	800b680 <_malloc_r>
 800bf72:	6028      	str	r0, [r5, #0]
 800bf74:	6128      	str	r0, [r5, #16]
 800bf76:	b930      	cbnz	r0, 800bf86 <_svfiprintf_r+0x32>
 800bf78:	230c      	movs	r3, #12
 800bf7a:	603b      	str	r3, [r7, #0]
 800bf7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf80:	b01d      	add	sp, #116	@ 0x74
 800bf82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf86:	2340      	movs	r3, #64	@ 0x40
 800bf88:	616b      	str	r3, [r5, #20]
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf8e:	2320      	movs	r3, #32
 800bf90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf94:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf98:	2330      	movs	r3, #48	@ 0x30
 800bf9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c138 <_svfiprintf_r+0x1e4>
 800bf9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfa2:	f04f 0901 	mov.w	r9, #1
 800bfa6:	4623      	mov	r3, r4
 800bfa8:	469a      	mov	sl, r3
 800bfaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfae:	b10a      	cbz	r2, 800bfb4 <_svfiprintf_r+0x60>
 800bfb0:	2a25      	cmp	r2, #37	@ 0x25
 800bfb2:	d1f9      	bne.n	800bfa8 <_svfiprintf_r+0x54>
 800bfb4:	ebba 0b04 	subs.w	fp, sl, r4
 800bfb8:	d00b      	beq.n	800bfd2 <_svfiprintf_r+0x7e>
 800bfba:	465b      	mov	r3, fp
 800bfbc:	4622      	mov	r2, r4
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	4638      	mov	r0, r7
 800bfc2:	f7ff ff6b 	bl	800be9c <__ssputs_r>
 800bfc6:	3001      	adds	r0, #1
 800bfc8:	f000 80a7 	beq.w	800c11a <_svfiprintf_r+0x1c6>
 800bfcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfce:	445a      	add	r2, fp
 800bfd0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfd2:	f89a 3000 	ldrb.w	r3, [sl]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f000 809f 	beq.w	800c11a <_svfiprintf_r+0x1c6>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	f04f 32ff 	mov.w	r2, #4294967295
 800bfe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfe6:	f10a 0a01 	add.w	sl, sl, #1
 800bfea:	9304      	str	r3, [sp, #16]
 800bfec:	9307      	str	r3, [sp, #28]
 800bfee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bff2:	931a      	str	r3, [sp, #104]	@ 0x68
 800bff4:	4654      	mov	r4, sl
 800bff6:	2205      	movs	r2, #5
 800bff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bffc:	484e      	ldr	r0, [pc, #312]	@ (800c138 <_svfiprintf_r+0x1e4>)
 800bffe:	f7f4 f8e7 	bl	80001d0 <memchr>
 800c002:	9a04      	ldr	r2, [sp, #16]
 800c004:	b9d8      	cbnz	r0, 800c03e <_svfiprintf_r+0xea>
 800c006:	06d0      	lsls	r0, r2, #27
 800c008:	bf44      	itt	mi
 800c00a:	2320      	movmi	r3, #32
 800c00c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c010:	0711      	lsls	r1, r2, #28
 800c012:	bf44      	itt	mi
 800c014:	232b      	movmi	r3, #43	@ 0x2b
 800c016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c01a:	f89a 3000 	ldrb.w	r3, [sl]
 800c01e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c020:	d015      	beq.n	800c04e <_svfiprintf_r+0xfa>
 800c022:	9a07      	ldr	r2, [sp, #28]
 800c024:	4654      	mov	r4, sl
 800c026:	2000      	movs	r0, #0
 800c028:	f04f 0c0a 	mov.w	ip, #10
 800c02c:	4621      	mov	r1, r4
 800c02e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c032:	3b30      	subs	r3, #48	@ 0x30
 800c034:	2b09      	cmp	r3, #9
 800c036:	d94b      	bls.n	800c0d0 <_svfiprintf_r+0x17c>
 800c038:	b1b0      	cbz	r0, 800c068 <_svfiprintf_r+0x114>
 800c03a:	9207      	str	r2, [sp, #28]
 800c03c:	e014      	b.n	800c068 <_svfiprintf_r+0x114>
 800c03e:	eba0 0308 	sub.w	r3, r0, r8
 800c042:	fa09 f303 	lsl.w	r3, r9, r3
 800c046:	4313      	orrs	r3, r2
 800c048:	9304      	str	r3, [sp, #16]
 800c04a:	46a2      	mov	sl, r4
 800c04c:	e7d2      	b.n	800bff4 <_svfiprintf_r+0xa0>
 800c04e:	9b03      	ldr	r3, [sp, #12]
 800c050:	1d19      	adds	r1, r3, #4
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	9103      	str	r1, [sp, #12]
 800c056:	2b00      	cmp	r3, #0
 800c058:	bfbb      	ittet	lt
 800c05a:	425b      	neglt	r3, r3
 800c05c:	f042 0202 	orrlt.w	r2, r2, #2
 800c060:	9307      	strge	r3, [sp, #28]
 800c062:	9307      	strlt	r3, [sp, #28]
 800c064:	bfb8      	it	lt
 800c066:	9204      	strlt	r2, [sp, #16]
 800c068:	7823      	ldrb	r3, [r4, #0]
 800c06a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c06c:	d10a      	bne.n	800c084 <_svfiprintf_r+0x130>
 800c06e:	7863      	ldrb	r3, [r4, #1]
 800c070:	2b2a      	cmp	r3, #42	@ 0x2a
 800c072:	d132      	bne.n	800c0da <_svfiprintf_r+0x186>
 800c074:	9b03      	ldr	r3, [sp, #12]
 800c076:	1d1a      	adds	r2, r3, #4
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	9203      	str	r2, [sp, #12]
 800c07c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c080:	3402      	adds	r4, #2
 800c082:	9305      	str	r3, [sp, #20]
 800c084:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c148 <_svfiprintf_r+0x1f4>
 800c088:	7821      	ldrb	r1, [r4, #0]
 800c08a:	2203      	movs	r2, #3
 800c08c:	4650      	mov	r0, sl
 800c08e:	f7f4 f89f 	bl	80001d0 <memchr>
 800c092:	b138      	cbz	r0, 800c0a4 <_svfiprintf_r+0x150>
 800c094:	9b04      	ldr	r3, [sp, #16]
 800c096:	eba0 000a 	sub.w	r0, r0, sl
 800c09a:	2240      	movs	r2, #64	@ 0x40
 800c09c:	4082      	lsls	r2, r0
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	3401      	adds	r4, #1
 800c0a2:	9304      	str	r3, [sp, #16]
 800c0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0a8:	4824      	ldr	r0, [pc, #144]	@ (800c13c <_svfiprintf_r+0x1e8>)
 800c0aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0ae:	2206      	movs	r2, #6
 800c0b0:	f7f4 f88e 	bl	80001d0 <memchr>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d036      	beq.n	800c126 <_svfiprintf_r+0x1d2>
 800c0b8:	4b21      	ldr	r3, [pc, #132]	@ (800c140 <_svfiprintf_r+0x1ec>)
 800c0ba:	bb1b      	cbnz	r3, 800c104 <_svfiprintf_r+0x1b0>
 800c0bc:	9b03      	ldr	r3, [sp, #12]
 800c0be:	3307      	adds	r3, #7
 800c0c0:	f023 0307 	bic.w	r3, r3, #7
 800c0c4:	3308      	adds	r3, #8
 800c0c6:	9303      	str	r3, [sp, #12]
 800c0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ca:	4433      	add	r3, r6
 800c0cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0ce:	e76a      	b.n	800bfa6 <_svfiprintf_r+0x52>
 800c0d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0d4:	460c      	mov	r4, r1
 800c0d6:	2001      	movs	r0, #1
 800c0d8:	e7a8      	b.n	800c02c <_svfiprintf_r+0xd8>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	3401      	adds	r4, #1
 800c0de:	9305      	str	r3, [sp, #20]
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	f04f 0c0a 	mov.w	ip, #10
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0ec:	3a30      	subs	r2, #48	@ 0x30
 800c0ee:	2a09      	cmp	r2, #9
 800c0f0:	d903      	bls.n	800c0fa <_svfiprintf_r+0x1a6>
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d0c6      	beq.n	800c084 <_svfiprintf_r+0x130>
 800c0f6:	9105      	str	r1, [sp, #20]
 800c0f8:	e7c4      	b.n	800c084 <_svfiprintf_r+0x130>
 800c0fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0fe:	4604      	mov	r4, r0
 800c100:	2301      	movs	r3, #1
 800c102:	e7f0      	b.n	800c0e6 <_svfiprintf_r+0x192>
 800c104:	ab03      	add	r3, sp, #12
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	462a      	mov	r2, r5
 800c10a:	4b0e      	ldr	r3, [pc, #56]	@ (800c144 <_svfiprintf_r+0x1f0>)
 800c10c:	a904      	add	r1, sp, #16
 800c10e:	4638      	mov	r0, r7
 800c110:	f7fd fe84 	bl	8009e1c <_printf_float>
 800c114:	1c42      	adds	r2, r0, #1
 800c116:	4606      	mov	r6, r0
 800c118:	d1d6      	bne.n	800c0c8 <_svfiprintf_r+0x174>
 800c11a:	89ab      	ldrh	r3, [r5, #12]
 800c11c:	065b      	lsls	r3, r3, #25
 800c11e:	f53f af2d 	bmi.w	800bf7c <_svfiprintf_r+0x28>
 800c122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c124:	e72c      	b.n	800bf80 <_svfiprintf_r+0x2c>
 800c126:	ab03      	add	r3, sp, #12
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	462a      	mov	r2, r5
 800c12c:	4b05      	ldr	r3, [pc, #20]	@ (800c144 <_svfiprintf_r+0x1f0>)
 800c12e:	a904      	add	r1, sp, #16
 800c130:	4638      	mov	r0, r7
 800c132:	f7fe f90b 	bl	800a34c <_printf_i>
 800c136:	e7ed      	b.n	800c114 <_svfiprintf_r+0x1c0>
 800c138:	0800de48 	.word	0x0800de48
 800c13c:	0800de52 	.word	0x0800de52
 800c140:	08009e1d 	.word	0x08009e1d
 800c144:	0800be9d 	.word	0x0800be9d
 800c148:	0800de4e 	.word	0x0800de4e

0800c14c <__sflush_r>:
 800c14c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c154:	0716      	lsls	r6, r2, #28
 800c156:	4605      	mov	r5, r0
 800c158:	460c      	mov	r4, r1
 800c15a:	d454      	bmi.n	800c206 <__sflush_r+0xba>
 800c15c:	684b      	ldr	r3, [r1, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	dc02      	bgt.n	800c168 <__sflush_r+0x1c>
 800c162:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c164:	2b00      	cmp	r3, #0
 800c166:	dd48      	ble.n	800c1fa <__sflush_r+0xae>
 800c168:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c16a:	2e00      	cmp	r6, #0
 800c16c:	d045      	beq.n	800c1fa <__sflush_r+0xae>
 800c16e:	2300      	movs	r3, #0
 800c170:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c174:	682f      	ldr	r7, [r5, #0]
 800c176:	6a21      	ldr	r1, [r4, #32]
 800c178:	602b      	str	r3, [r5, #0]
 800c17a:	d030      	beq.n	800c1de <__sflush_r+0x92>
 800c17c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c17e:	89a3      	ldrh	r3, [r4, #12]
 800c180:	0759      	lsls	r1, r3, #29
 800c182:	d505      	bpl.n	800c190 <__sflush_r+0x44>
 800c184:	6863      	ldr	r3, [r4, #4]
 800c186:	1ad2      	subs	r2, r2, r3
 800c188:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c18a:	b10b      	cbz	r3, 800c190 <__sflush_r+0x44>
 800c18c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c18e:	1ad2      	subs	r2, r2, r3
 800c190:	2300      	movs	r3, #0
 800c192:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c194:	6a21      	ldr	r1, [r4, #32]
 800c196:	4628      	mov	r0, r5
 800c198:	47b0      	blx	r6
 800c19a:	1c43      	adds	r3, r0, #1
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	d106      	bne.n	800c1ae <__sflush_r+0x62>
 800c1a0:	6829      	ldr	r1, [r5, #0]
 800c1a2:	291d      	cmp	r1, #29
 800c1a4:	d82b      	bhi.n	800c1fe <__sflush_r+0xb2>
 800c1a6:	4a2a      	ldr	r2, [pc, #168]	@ (800c250 <__sflush_r+0x104>)
 800c1a8:	410a      	asrs	r2, r1
 800c1aa:	07d6      	lsls	r6, r2, #31
 800c1ac:	d427      	bmi.n	800c1fe <__sflush_r+0xb2>
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	6062      	str	r2, [r4, #4]
 800c1b2:	04d9      	lsls	r1, r3, #19
 800c1b4:	6922      	ldr	r2, [r4, #16]
 800c1b6:	6022      	str	r2, [r4, #0]
 800c1b8:	d504      	bpl.n	800c1c4 <__sflush_r+0x78>
 800c1ba:	1c42      	adds	r2, r0, #1
 800c1bc:	d101      	bne.n	800c1c2 <__sflush_r+0x76>
 800c1be:	682b      	ldr	r3, [r5, #0]
 800c1c0:	b903      	cbnz	r3, 800c1c4 <__sflush_r+0x78>
 800c1c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c1c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1c6:	602f      	str	r7, [r5, #0]
 800c1c8:	b1b9      	cbz	r1, 800c1fa <__sflush_r+0xae>
 800c1ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1ce:	4299      	cmp	r1, r3
 800c1d0:	d002      	beq.n	800c1d8 <__sflush_r+0x8c>
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	f7ff f9e0 	bl	800b598 <_free_r>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1dc:	e00d      	b.n	800c1fa <__sflush_r+0xae>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	47b0      	blx	r6
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	1c50      	adds	r0, r2, #1
 800c1e8:	d1c9      	bne.n	800c17e <__sflush_r+0x32>
 800c1ea:	682b      	ldr	r3, [r5, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d0c6      	beq.n	800c17e <__sflush_r+0x32>
 800c1f0:	2b1d      	cmp	r3, #29
 800c1f2:	d001      	beq.n	800c1f8 <__sflush_r+0xac>
 800c1f4:	2b16      	cmp	r3, #22
 800c1f6:	d11e      	bne.n	800c236 <__sflush_r+0xea>
 800c1f8:	602f      	str	r7, [r5, #0]
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	e022      	b.n	800c244 <__sflush_r+0xf8>
 800c1fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c202:	b21b      	sxth	r3, r3
 800c204:	e01b      	b.n	800c23e <__sflush_r+0xf2>
 800c206:	690f      	ldr	r7, [r1, #16]
 800c208:	2f00      	cmp	r7, #0
 800c20a:	d0f6      	beq.n	800c1fa <__sflush_r+0xae>
 800c20c:	0793      	lsls	r3, r2, #30
 800c20e:	680e      	ldr	r6, [r1, #0]
 800c210:	bf08      	it	eq
 800c212:	694b      	ldreq	r3, [r1, #20]
 800c214:	600f      	str	r7, [r1, #0]
 800c216:	bf18      	it	ne
 800c218:	2300      	movne	r3, #0
 800c21a:	eba6 0807 	sub.w	r8, r6, r7
 800c21e:	608b      	str	r3, [r1, #8]
 800c220:	f1b8 0f00 	cmp.w	r8, #0
 800c224:	dde9      	ble.n	800c1fa <__sflush_r+0xae>
 800c226:	6a21      	ldr	r1, [r4, #32]
 800c228:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c22a:	4643      	mov	r3, r8
 800c22c:	463a      	mov	r2, r7
 800c22e:	4628      	mov	r0, r5
 800c230:	47b0      	blx	r6
 800c232:	2800      	cmp	r0, #0
 800c234:	dc08      	bgt.n	800c248 <__sflush_r+0xfc>
 800c236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c23a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c23e:	81a3      	strh	r3, [r4, #12]
 800c240:	f04f 30ff 	mov.w	r0, #4294967295
 800c244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c248:	4407      	add	r7, r0
 800c24a:	eba8 0800 	sub.w	r8, r8, r0
 800c24e:	e7e7      	b.n	800c220 <__sflush_r+0xd4>
 800c250:	dfbffffe 	.word	0xdfbffffe

0800c254 <_fflush_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	690b      	ldr	r3, [r1, #16]
 800c258:	4605      	mov	r5, r0
 800c25a:	460c      	mov	r4, r1
 800c25c:	b913      	cbnz	r3, 800c264 <_fflush_r+0x10>
 800c25e:	2500      	movs	r5, #0
 800c260:	4628      	mov	r0, r5
 800c262:	bd38      	pop	{r3, r4, r5, pc}
 800c264:	b118      	cbz	r0, 800c26e <_fflush_r+0x1a>
 800c266:	6a03      	ldr	r3, [r0, #32]
 800c268:	b90b      	cbnz	r3, 800c26e <_fflush_r+0x1a>
 800c26a:	f7fe fa1b 	bl	800a6a4 <__sinit>
 800c26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d0f3      	beq.n	800c25e <_fflush_r+0xa>
 800c276:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c278:	07d0      	lsls	r0, r2, #31
 800c27a:	d404      	bmi.n	800c286 <_fflush_r+0x32>
 800c27c:	0599      	lsls	r1, r3, #22
 800c27e:	d402      	bmi.n	800c286 <_fflush_r+0x32>
 800c280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c282:	f7fe fb3a 	bl	800a8fa <__retarget_lock_acquire_recursive>
 800c286:	4628      	mov	r0, r5
 800c288:	4621      	mov	r1, r4
 800c28a:	f7ff ff5f 	bl	800c14c <__sflush_r>
 800c28e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c290:	07da      	lsls	r2, r3, #31
 800c292:	4605      	mov	r5, r0
 800c294:	d4e4      	bmi.n	800c260 <_fflush_r+0xc>
 800c296:	89a3      	ldrh	r3, [r4, #12]
 800c298:	059b      	lsls	r3, r3, #22
 800c29a:	d4e1      	bmi.n	800c260 <_fflush_r+0xc>
 800c29c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c29e:	f7fe fb2d 	bl	800a8fc <__retarget_lock_release_recursive>
 800c2a2:	e7dd      	b.n	800c260 <_fflush_r+0xc>

0800c2a4 <memmove>:
 800c2a4:	4288      	cmp	r0, r1
 800c2a6:	b510      	push	{r4, lr}
 800c2a8:	eb01 0402 	add.w	r4, r1, r2
 800c2ac:	d902      	bls.n	800c2b4 <memmove+0x10>
 800c2ae:	4284      	cmp	r4, r0
 800c2b0:	4623      	mov	r3, r4
 800c2b2:	d807      	bhi.n	800c2c4 <memmove+0x20>
 800c2b4:	1e43      	subs	r3, r0, #1
 800c2b6:	42a1      	cmp	r1, r4
 800c2b8:	d008      	beq.n	800c2cc <memmove+0x28>
 800c2ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2c2:	e7f8      	b.n	800c2b6 <memmove+0x12>
 800c2c4:	4402      	add	r2, r0
 800c2c6:	4601      	mov	r1, r0
 800c2c8:	428a      	cmp	r2, r1
 800c2ca:	d100      	bne.n	800c2ce <memmove+0x2a>
 800c2cc:	bd10      	pop	{r4, pc}
 800c2ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2d6:	e7f7      	b.n	800c2c8 <memmove+0x24>

0800c2d8 <_sbrk_r>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	4d06      	ldr	r5, [pc, #24]	@ (800c2f4 <_sbrk_r+0x1c>)
 800c2dc:	2300      	movs	r3, #0
 800c2de:	4604      	mov	r4, r0
 800c2e0:	4608      	mov	r0, r1
 800c2e2:	602b      	str	r3, [r5, #0]
 800c2e4:	f7f5 fba4 	bl	8001a30 <_sbrk>
 800c2e8:	1c43      	adds	r3, r0, #1
 800c2ea:	d102      	bne.n	800c2f2 <_sbrk_r+0x1a>
 800c2ec:	682b      	ldr	r3, [r5, #0]
 800c2ee:	b103      	cbz	r3, 800c2f2 <_sbrk_r+0x1a>
 800c2f0:	6023      	str	r3, [r4, #0]
 800c2f2:	bd38      	pop	{r3, r4, r5, pc}
 800c2f4:	20002194 	.word	0x20002194

0800c2f8 <memcpy>:
 800c2f8:	440a      	add	r2, r1
 800c2fa:	4291      	cmp	r1, r2
 800c2fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c300:	d100      	bne.n	800c304 <memcpy+0xc>
 800c302:	4770      	bx	lr
 800c304:	b510      	push	{r4, lr}
 800c306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c30a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c30e:	4291      	cmp	r1, r2
 800c310:	d1f9      	bne.n	800c306 <memcpy+0xe>
 800c312:	bd10      	pop	{r4, pc}

0800c314 <__assert_func>:
 800c314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c316:	4614      	mov	r4, r2
 800c318:	461a      	mov	r2, r3
 800c31a:	4b09      	ldr	r3, [pc, #36]	@ (800c340 <__assert_func+0x2c>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4605      	mov	r5, r0
 800c320:	68d8      	ldr	r0, [r3, #12]
 800c322:	b954      	cbnz	r4, 800c33a <__assert_func+0x26>
 800c324:	4b07      	ldr	r3, [pc, #28]	@ (800c344 <__assert_func+0x30>)
 800c326:	461c      	mov	r4, r3
 800c328:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c32c:	9100      	str	r1, [sp, #0]
 800c32e:	462b      	mov	r3, r5
 800c330:	4905      	ldr	r1, [pc, #20]	@ (800c348 <__assert_func+0x34>)
 800c332:	f000 f86f 	bl	800c414 <fiprintf>
 800c336:	f000 f87f 	bl	800c438 <abort>
 800c33a:	4b04      	ldr	r3, [pc, #16]	@ (800c34c <__assert_func+0x38>)
 800c33c:	e7f4      	b.n	800c328 <__assert_func+0x14>
 800c33e:	bf00      	nop
 800c340:	20000108 	.word	0x20000108
 800c344:	0800de9e 	.word	0x0800de9e
 800c348:	0800de70 	.word	0x0800de70
 800c34c:	0800de63 	.word	0x0800de63

0800c350 <_calloc_r>:
 800c350:	b570      	push	{r4, r5, r6, lr}
 800c352:	fba1 5402 	umull	r5, r4, r1, r2
 800c356:	b93c      	cbnz	r4, 800c368 <_calloc_r+0x18>
 800c358:	4629      	mov	r1, r5
 800c35a:	f7ff f991 	bl	800b680 <_malloc_r>
 800c35e:	4606      	mov	r6, r0
 800c360:	b928      	cbnz	r0, 800c36e <_calloc_r+0x1e>
 800c362:	2600      	movs	r6, #0
 800c364:	4630      	mov	r0, r6
 800c366:	bd70      	pop	{r4, r5, r6, pc}
 800c368:	220c      	movs	r2, #12
 800c36a:	6002      	str	r2, [r0, #0]
 800c36c:	e7f9      	b.n	800c362 <_calloc_r+0x12>
 800c36e:	462a      	mov	r2, r5
 800c370:	4621      	mov	r1, r4
 800c372:	f7fe fa44 	bl	800a7fe <memset>
 800c376:	e7f5      	b.n	800c364 <_calloc_r+0x14>

0800c378 <__ascii_mbtowc>:
 800c378:	b082      	sub	sp, #8
 800c37a:	b901      	cbnz	r1, 800c37e <__ascii_mbtowc+0x6>
 800c37c:	a901      	add	r1, sp, #4
 800c37e:	b142      	cbz	r2, 800c392 <__ascii_mbtowc+0x1a>
 800c380:	b14b      	cbz	r3, 800c396 <__ascii_mbtowc+0x1e>
 800c382:	7813      	ldrb	r3, [r2, #0]
 800c384:	600b      	str	r3, [r1, #0]
 800c386:	7812      	ldrb	r2, [r2, #0]
 800c388:	1e10      	subs	r0, r2, #0
 800c38a:	bf18      	it	ne
 800c38c:	2001      	movne	r0, #1
 800c38e:	b002      	add	sp, #8
 800c390:	4770      	bx	lr
 800c392:	4610      	mov	r0, r2
 800c394:	e7fb      	b.n	800c38e <__ascii_mbtowc+0x16>
 800c396:	f06f 0001 	mvn.w	r0, #1
 800c39a:	e7f8      	b.n	800c38e <__ascii_mbtowc+0x16>

0800c39c <_realloc_r>:
 800c39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a0:	4680      	mov	r8, r0
 800c3a2:	4615      	mov	r5, r2
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	b921      	cbnz	r1, 800c3b2 <_realloc_r+0x16>
 800c3a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ac:	4611      	mov	r1, r2
 800c3ae:	f7ff b967 	b.w	800b680 <_malloc_r>
 800c3b2:	b92a      	cbnz	r2, 800c3c0 <_realloc_r+0x24>
 800c3b4:	f7ff f8f0 	bl	800b598 <_free_r>
 800c3b8:	2400      	movs	r4, #0
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c0:	f000 f841 	bl	800c446 <_malloc_usable_size_r>
 800c3c4:	4285      	cmp	r5, r0
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	d802      	bhi.n	800c3d0 <_realloc_r+0x34>
 800c3ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c3ce:	d8f4      	bhi.n	800c3ba <_realloc_r+0x1e>
 800c3d0:	4629      	mov	r1, r5
 800c3d2:	4640      	mov	r0, r8
 800c3d4:	f7ff f954 	bl	800b680 <_malloc_r>
 800c3d8:	4607      	mov	r7, r0
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	d0ec      	beq.n	800c3b8 <_realloc_r+0x1c>
 800c3de:	42b5      	cmp	r5, r6
 800c3e0:	462a      	mov	r2, r5
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	bf28      	it	cs
 800c3e6:	4632      	movcs	r2, r6
 800c3e8:	f7ff ff86 	bl	800c2f8 <memcpy>
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	4640      	mov	r0, r8
 800c3f0:	f7ff f8d2 	bl	800b598 <_free_r>
 800c3f4:	463c      	mov	r4, r7
 800c3f6:	e7e0      	b.n	800c3ba <_realloc_r+0x1e>

0800c3f8 <__ascii_wctomb>:
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	4608      	mov	r0, r1
 800c3fc:	b141      	cbz	r1, 800c410 <__ascii_wctomb+0x18>
 800c3fe:	2aff      	cmp	r2, #255	@ 0xff
 800c400:	d904      	bls.n	800c40c <__ascii_wctomb+0x14>
 800c402:	228a      	movs	r2, #138	@ 0x8a
 800c404:	601a      	str	r2, [r3, #0]
 800c406:	f04f 30ff 	mov.w	r0, #4294967295
 800c40a:	4770      	bx	lr
 800c40c:	700a      	strb	r2, [r1, #0]
 800c40e:	2001      	movs	r0, #1
 800c410:	4770      	bx	lr
	...

0800c414 <fiprintf>:
 800c414:	b40e      	push	{r1, r2, r3}
 800c416:	b503      	push	{r0, r1, lr}
 800c418:	4601      	mov	r1, r0
 800c41a:	ab03      	add	r3, sp, #12
 800c41c:	4805      	ldr	r0, [pc, #20]	@ (800c434 <fiprintf+0x20>)
 800c41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c422:	6800      	ldr	r0, [r0, #0]
 800c424:	9301      	str	r3, [sp, #4]
 800c426:	f000 f83f 	bl	800c4a8 <_vfiprintf_r>
 800c42a:	b002      	add	sp, #8
 800c42c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c430:	b003      	add	sp, #12
 800c432:	4770      	bx	lr
 800c434:	20000108 	.word	0x20000108

0800c438 <abort>:
 800c438:	b508      	push	{r3, lr}
 800c43a:	2006      	movs	r0, #6
 800c43c:	f000 fa08 	bl	800c850 <raise>
 800c440:	2001      	movs	r0, #1
 800c442:	f7f5 fa7d 	bl	8001940 <_exit>

0800c446 <_malloc_usable_size_r>:
 800c446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c44a:	1f18      	subs	r0, r3, #4
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	bfbc      	itt	lt
 800c450:	580b      	ldrlt	r3, [r1, r0]
 800c452:	18c0      	addlt	r0, r0, r3
 800c454:	4770      	bx	lr

0800c456 <__sfputc_r>:
 800c456:	6893      	ldr	r3, [r2, #8]
 800c458:	3b01      	subs	r3, #1
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	b410      	push	{r4}
 800c45e:	6093      	str	r3, [r2, #8]
 800c460:	da08      	bge.n	800c474 <__sfputc_r+0x1e>
 800c462:	6994      	ldr	r4, [r2, #24]
 800c464:	42a3      	cmp	r3, r4
 800c466:	db01      	blt.n	800c46c <__sfputc_r+0x16>
 800c468:	290a      	cmp	r1, #10
 800c46a:	d103      	bne.n	800c474 <__sfputc_r+0x1e>
 800c46c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c470:	f000 b932 	b.w	800c6d8 <__swbuf_r>
 800c474:	6813      	ldr	r3, [r2, #0]
 800c476:	1c58      	adds	r0, r3, #1
 800c478:	6010      	str	r0, [r2, #0]
 800c47a:	7019      	strb	r1, [r3, #0]
 800c47c:	4608      	mov	r0, r1
 800c47e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <__sfputs_r>:
 800c484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c486:	4606      	mov	r6, r0
 800c488:	460f      	mov	r7, r1
 800c48a:	4614      	mov	r4, r2
 800c48c:	18d5      	adds	r5, r2, r3
 800c48e:	42ac      	cmp	r4, r5
 800c490:	d101      	bne.n	800c496 <__sfputs_r+0x12>
 800c492:	2000      	movs	r0, #0
 800c494:	e007      	b.n	800c4a6 <__sfputs_r+0x22>
 800c496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c49a:	463a      	mov	r2, r7
 800c49c:	4630      	mov	r0, r6
 800c49e:	f7ff ffda 	bl	800c456 <__sfputc_r>
 800c4a2:	1c43      	adds	r3, r0, #1
 800c4a4:	d1f3      	bne.n	800c48e <__sfputs_r+0xa>
 800c4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4a8 <_vfiprintf_r>:
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	460d      	mov	r5, r1
 800c4ae:	b09d      	sub	sp, #116	@ 0x74
 800c4b0:	4614      	mov	r4, r2
 800c4b2:	4698      	mov	r8, r3
 800c4b4:	4606      	mov	r6, r0
 800c4b6:	b118      	cbz	r0, 800c4c0 <_vfiprintf_r+0x18>
 800c4b8:	6a03      	ldr	r3, [r0, #32]
 800c4ba:	b90b      	cbnz	r3, 800c4c0 <_vfiprintf_r+0x18>
 800c4bc:	f7fe f8f2 	bl	800a6a4 <__sinit>
 800c4c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4c2:	07d9      	lsls	r1, r3, #31
 800c4c4:	d405      	bmi.n	800c4d2 <_vfiprintf_r+0x2a>
 800c4c6:	89ab      	ldrh	r3, [r5, #12]
 800c4c8:	059a      	lsls	r2, r3, #22
 800c4ca:	d402      	bmi.n	800c4d2 <_vfiprintf_r+0x2a>
 800c4cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4ce:	f7fe fa14 	bl	800a8fa <__retarget_lock_acquire_recursive>
 800c4d2:	89ab      	ldrh	r3, [r5, #12]
 800c4d4:	071b      	lsls	r3, r3, #28
 800c4d6:	d501      	bpl.n	800c4dc <_vfiprintf_r+0x34>
 800c4d8:	692b      	ldr	r3, [r5, #16]
 800c4da:	b99b      	cbnz	r3, 800c504 <_vfiprintf_r+0x5c>
 800c4dc:	4629      	mov	r1, r5
 800c4de:	4630      	mov	r0, r6
 800c4e0:	f000 f938 	bl	800c754 <__swsetup_r>
 800c4e4:	b170      	cbz	r0, 800c504 <_vfiprintf_r+0x5c>
 800c4e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4e8:	07dc      	lsls	r4, r3, #31
 800c4ea:	d504      	bpl.n	800c4f6 <_vfiprintf_r+0x4e>
 800c4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f0:	b01d      	add	sp, #116	@ 0x74
 800c4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f6:	89ab      	ldrh	r3, [r5, #12]
 800c4f8:	0598      	lsls	r0, r3, #22
 800c4fa:	d4f7      	bmi.n	800c4ec <_vfiprintf_r+0x44>
 800c4fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4fe:	f7fe f9fd 	bl	800a8fc <__retarget_lock_release_recursive>
 800c502:	e7f3      	b.n	800c4ec <_vfiprintf_r+0x44>
 800c504:	2300      	movs	r3, #0
 800c506:	9309      	str	r3, [sp, #36]	@ 0x24
 800c508:	2320      	movs	r3, #32
 800c50a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c50e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c512:	2330      	movs	r3, #48	@ 0x30
 800c514:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c6c4 <_vfiprintf_r+0x21c>
 800c518:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c51c:	f04f 0901 	mov.w	r9, #1
 800c520:	4623      	mov	r3, r4
 800c522:	469a      	mov	sl, r3
 800c524:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c528:	b10a      	cbz	r2, 800c52e <_vfiprintf_r+0x86>
 800c52a:	2a25      	cmp	r2, #37	@ 0x25
 800c52c:	d1f9      	bne.n	800c522 <_vfiprintf_r+0x7a>
 800c52e:	ebba 0b04 	subs.w	fp, sl, r4
 800c532:	d00b      	beq.n	800c54c <_vfiprintf_r+0xa4>
 800c534:	465b      	mov	r3, fp
 800c536:	4622      	mov	r2, r4
 800c538:	4629      	mov	r1, r5
 800c53a:	4630      	mov	r0, r6
 800c53c:	f7ff ffa2 	bl	800c484 <__sfputs_r>
 800c540:	3001      	adds	r0, #1
 800c542:	f000 80a7 	beq.w	800c694 <_vfiprintf_r+0x1ec>
 800c546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c548:	445a      	add	r2, fp
 800c54a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c54c:	f89a 3000 	ldrb.w	r3, [sl]
 800c550:	2b00      	cmp	r3, #0
 800c552:	f000 809f 	beq.w	800c694 <_vfiprintf_r+0x1ec>
 800c556:	2300      	movs	r3, #0
 800c558:	f04f 32ff 	mov.w	r2, #4294967295
 800c55c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c560:	f10a 0a01 	add.w	sl, sl, #1
 800c564:	9304      	str	r3, [sp, #16]
 800c566:	9307      	str	r3, [sp, #28]
 800c568:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c56c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c56e:	4654      	mov	r4, sl
 800c570:	2205      	movs	r2, #5
 800c572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c576:	4853      	ldr	r0, [pc, #332]	@ (800c6c4 <_vfiprintf_r+0x21c>)
 800c578:	f7f3 fe2a 	bl	80001d0 <memchr>
 800c57c:	9a04      	ldr	r2, [sp, #16]
 800c57e:	b9d8      	cbnz	r0, 800c5b8 <_vfiprintf_r+0x110>
 800c580:	06d1      	lsls	r1, r2, #27
 800c582:	bf44      	itt	mi
 800c584:	2320      	movmi	r3, #32
 800c586:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c58a:	0713      	lsls	r3, r2, #28
 800c58c:	bf44      	itt	mi
 800c58e:	232b      	movmi	r3, #43	@ 0x2b
 800c590:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c594:	f89a 3000 	ldrb.w	r3, [sl]
 800c598:	2b2a      	cmp	r3, #42	@ 0x2a
 800c59a:	d015      	beq.n	800c5c8 <_vfiprintf_r+0x120>
 800c59c:	9a07      	ldr	r2, [sp, #28]
 800c59e:	4654      	mov	r4, sl
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	f04f 0c0a 	mov.w	ip, #10
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5ac:	3b30      	subs	r3, #48	@ 0x30
 800c5ae:	2b09      	cmp	r3, #9
 800c5b0:	d94b      	bls.n	800c64a <_vfiprintf_r+0x1a2>
 800c5b2:	b1b0      	cbz	r0, 800c5e2 <_vfiprintf_r+0x13a>
 800c5b4:	9207      	str	r2, [sp, #28]
 800c5b6:	e014      	b.n	800c5e2 <_vfiprintf_r+0x13a>
 800c5b8:	eba0 0308 	sub.w	r3, r0, r8
 800c5bc:	fa09 f303 	lsl.w	r3, r9, r3
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	9304      	str	r3, [sp, #16]
 800c5c4:	46a2      	mov	sl, r4
 800c5c6:	e7d2      	b.n	800c56e <_vfiprintf_r+0xc6>
 800c5c8:	9b03      	ldr	r3, [sp, #12]
 800c5ca:	1d19      	adds	r1, r3, #4
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	9103      	str	r1, [sp, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	bfbb      	ittet	lt
 800c5d4:	425b      	neglt	r3, r3
 800c5d6:	f042 0202 	orrlt.w	r2, r2, #2
 800c5da:	9307      	strge	r3, [sp, #28]
 800c5dc:	9307      	strlt	r3, [sp, #28]
 800c5de:	bfb8      	it	lt
 800c5e0:	9204      	strlt	r2, [sp, #16]
 800c5e2:	7823      	ldrb	r3, [r4, #0]
 800c5e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5e6:	d10a      	bne.n	800c5fe <_vfiprintf_r+0x156>
 800c5e8:	7863      	ldrb	r3, [r4, #1]
 800c5ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5ec:	d132      	bne.n	800c654 <_vfiprintf_r+0x1ac>
 800c5ee:	9b03      	ldr	r3, [sp, #12]
 800c5f0:	1d1a      	adds	r2, r3, #4
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	9203      	str	r2, [sp, #12]
 800c5f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5fa:	3402      	adds	r4, #2
 800c5fc:	9305      	str	r3, [sp, #20]
 800c5fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c6d4 <_vfiprintf_r+0x22c>
 800c602:	7821      	ldrb	r1, [r4, #0]
 800c604:	2203      	movs	r2, #3
 800c606:	4650      	mov	r0, sl
 800c608:	f7f3 fde2 	bl	80001d0 <memchr>
 800c60c:	b138      	cbz	r0, 800c61e <_vfiprintf_r+0x176>
 800c60e:	9b04      	ldr	r3, [sp, #16]
 800c610:	eba0 000a 	sub.w	r0, r0, sl
 800c614:	2240      	movs	r2, #64	@ 0x40
 800c616:	4082      	lsls	r2, r0
 800c618:	4313      	orrs	r3, r2
 800c61a:	3401      	adds	r4, #1
 800c61c:	9304      	str	r3, [sp, #16]
 800c61e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c622:	4829      	ldr	r0, [pc, #164]	@ (800c6c8 <_vfiprintf_r+0x220>)
 800c624:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c628:	2206      	movs	r2, #6
 800c62a:	f7f3 fdd1 	bl	80001d0 <memchr>
 800c62e:	2800      	cmp	r0, #0
 800c630:	d03f      	beq.n	800c6b2 <_vfiprintf_r+0x20a>
 800c632:	4b26      	ldr	r3, [pc, #152]	@ (800c6cc <_vfiprintf_r+0x224>)
 800c634:	bb1b      	cbnz	r3, 800c67e <_vfiprintf_r+0x1d6>
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	3307      	adds	r3, #7
 800c63a:	f023 0307 	bic.w	r3, r3, #7
 800c63e:	3308      	adds	r3, #8
 800c640:	9303      	str	r3, [sp, #12]
 800c642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c644:	443b      	add	r3, r7
 800c646:	9309      	str	r3, [sp, #36]	@ 0x24
 800c648:	e76a      	b.n	800c520 <_vfiprintf_r+0x78>
 800c64a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c64e:	460c      	mov	r4, r1
 800c650:	2001      	movs	r0, #1
 800c652:	e7a8      	b.n	800c5a6 <_vfiprintf_r+0xfe>
 800c654:	2300      	movs	r3, #0
 800c656:	3401      	adds	r4, #1
 800c658:	9305      	str	r3, [sp, #20]
 800c65a:	4619      	mov	r1, r3
 800c65c:	f04f 0c0a 	mov.w	ip, #10
 800c660:	4620      	mov	r0, r4
 800c662:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c666:	3a30      	subs	r2, #48	@ 0x30
 800c668:	2a09      	cmp	r2, #9
 800c66a:	d903      	bls.n	800c674 <_vfiprintf_r+0x1cc>
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d0c6      	beq.n	800c5fe <_vfiprintf_r+0x156>
 800c670:	9105      	str	r1, [sp, #20]
 800c672:	e7c4      	b.n	800c5fe <_vfiprintf_r+0x156>
 800c674:	fb0c 2101 	mla	r1, ip, r1, r2
 800c678:	4604      	mov	r4, r0
 800c67a:	2301      	movs	r3, #1
 800c67c:	e7f0      	b.n	800c660 <_vfiprintf_r+0x1b8>
 800c67e:	ab03      	add	r3, sp, #12
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	462a      	mov	r2, r5
 800c684:	4b12      	ldr	r3, [pc, #72]	@ (800c6d0 <_vfiprintf_r+0x228>)
 800c686:	a904      	add	r1, sp, #16
 800c688:	4630      	mov	r0, r6
 800c68a:	f7fd fbc7 	bl	8009e1c <_printf_float>
 800c68e:	4607      	mov	r7, r0
 800c690:	1c78      	adds	r0, r7, #1
 800c692:	d1d6      	bne.n	800c642 <_vfiprintf_r+0x19a>
 800c694:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c696:	07d9      	lsls	r1, r3, #31
 800c698:	d405      	bmi.n	800c6a6 <_vfiprintf_r+0x1fe>
 800c69a:	89ab      	ldrh	r3, [r5, #12]
 800c69c:	059a      	lsls	r2, r3, #22
 800c69e:	d402      	bmi.n	800c6a6 <_vfiprintf_r+0x1fe>
 800c6a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6a2:	f7fe f92b 	bl	800a8fc <__retarget_lock_release_recursive>
 800c6a6:	89ab      	ldrh	r3, [r5, #12]
 800c6a8:	065b      	lsls	r3, r3, #25
 800c6aa:	f53f af1f 	bmi.w	800c4ec <_vfiprintf_r+0x44>
 800c6ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6b0:	e71e      	b.n	800c4f0 <_vfiprintf_r+0x48>
 800c6b2:	ab03      	add	r3, sp, #12
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	462a      	mov	r2, r5
 800c6b8:	4b05      	ldr	r3, [pc, #20]	@ (800c6d0 <_vfiprintf_r+0x228>)
 800c6ba:	a904      	add	r1, sp, #16
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f7fd fe45 	bl	800a34c <_printf_i>
 800c6c2:	e7e4      	b.n	800c68e <_vfiprintf_r+0x1e6>
 800c6c4:	0800de48 	.word	0x0800de48
 800c6c8:	0800de52 	.word	0x0800de52
 800c6cc:	08009e1d 	.word	0x08009e1d
 800c6d0:	0800c485 	.word	0x0800c485
 800c6d4:	0800de4e 	.word	0x0800de4e

0800c6d8 <__swbuf_r>:
 800c6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6da:	460e      	mov	r6, r1
 800c6dc:	4614      	mov	r4, r2
 800c6de:	4605      	mov	r5, r0
 800c6e0:	b118      	cbz	r0, 800c6ea <__swbuf_r+0x12>
 800c6e2:	6a03      	ldr	r3, [r0, #32]
 800c6e4:	b90b      	cbnz	r3, 800c6ea <__swbuf_r+0x12>
 800c6e6:	f7fd ffdd 	bl	800a6a4 <__sinit>
 800c6ea:	69a3      	ldr	r3, [r4, #24]
 800c6ec:	60a3      	str	r3, [r4, #8]
 800c6ee:	89a3      	ldrh	r3, [r4, #12]
 800c6f0:	071a      	lsls	r2, r3, #28
 800c6f2:	d501      	bpl.n	800c6f8 <__swbuf_r+0x20>
 800c6f4:	6923      	ldr	r3, [r4, #16]
 800c6f6:	b943      	cbnz	r3, 800c70a <__swbuf_r+0x32>
 800c6f8:	4621      	mov	r1, r4
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	f000 f82a 	bl	800c754 <__swsetup_r>
 800c700:	b118      	cbz	r0, 800c70a <__swbuf_r+0x32>
 800c702:	f04f 37ff 	mov.w	r7, #4294967295
 800c706:	4638      	mov	r0, r7
 800c708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c70a:	6823      	ldr	r3, [r4, #0]
 800c70c:	6922      	ldr	r2, [r4, #16]
 800c70e:	1a98      	subs	r0, r3, r2
 800c710:	6963      	ldr	r3, [r4, #20]
 800c712:	b2f6      	uxtb	r6, r6
 800c714:	4283      	cmp	r3, r0
 800c716:	4637      	mov	r7, r6
 800c718:	dc05      	bgt.n	800c726 <__swbuf_r+0x4e>
 800c71a:	4621      	mov	r1, r4
 800c71c:	4628      	mov	r0, r5
 800c71e:	f7ff fd99 	bl	800c254 <_fflush_r>
 800c722:	2800      	cmp	r0, #0
 800c724:	d1ed      	bne.n	800c702 <__swbuf_r+0x2a>
 800c726:	68a3      	ldr	r3, [r4, #8]
 800c728:	3b01      	subs	r3, #1
 800c72a:	60a3      	str	r3, [r4, #8]
 800c72c:	6823      	ldr	r3, [r4, #0]
 800c72e:	1c5a      	adds	r2, r3, #1
 800c730:	6022      	str	r2, [r4, #0]
 800c732:	701e      	strb	r6, [r3, #0]
 800c734:	6962      	ldr	r2, [r4, #20]
 800c736:	1c43      	adds	r3, r0, #1
 800c738:	429a      	cmp	r2, r3
 800c73a:	d004      	beq.n	800c746 <__swbuf_r+0x6e>
 800c73c:	89a3      	ldrh	r3, [r4, #12]
 800c73e:	07db      	lsls	r3, r3, #31
 800c740:	d5e1      	bpl.n	800c706 <__swbuf_r+0x2e>
 800c742:	2e0a      	cmp	r6, #10
 800c744:	d1df      	bne.n	800c706 <__swbuf_r+0x2e>
 800c746:	4621      	mov	r1, r4
 800c748:	4628      	mov	r0, r5
 800c74a:	f7ff fd83 	bl	800c254 <_fflush_r>
 800c74e:	2800      	cmp	r0, #0
 800c750:	d0d9      	beq.n	800c706 <__swbuf_r+0x2e>
 800c752:	e7d6      	b.n	800c702 <__swbuf_r+0x2a>

0800c754 <__swsetup_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	4b29      	ldr	r3, [pc, #164]	@ (800c7fc <__swsetup_r+0xa8>)
 800c758:	4605      	mov	r5, r0
 800c75a:	6818      	ldr	r0, [r3, #0]
 800c75c:	460c      	mov	r4, r1
 800c75e:	b118      	cbz	r0, 800c768 <__swsetup_r+0x14>
 800c760:	6a03      	ldr	r3, [r0, #32]
 800c762:	b90b      	cbnz	r3, 800c768 <__swsetup_r+0x14>
 800c764:	f7fd ff9e 	bl	800a6a4 <__sinit>
 800c768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c76c:	0719      	lsls	r1, r3, #28
 800c76e:	d422      	bmi.n	800c7b6 <__swsetup_r+0x62>
 800c770:	06da      	lsls	r2, r3, #27
 800c772:	d407      	bmi.n	800c784 <__swsetup_r+0x30>
 800c774:	2209      	movs	r2, #9
 800c776:	602a      	str	r2, [r5, #0]
 800c778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c77c:	81a3      	strh	r3, [r4, #12]
 800c77e:	f04f 30ff 	mov.w	r0, #4294967295
 800c782:	e033      	b.n	800c7ec <__swsetup_r+0x98>
 800c784:	0758      	lsls	r0, r3, #29
 800c786:	d512      	bpl.n	800c7ae <__swsetup_r+0x5a>
 800c788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c78a:	b141      	cbz	r1, 800c79e <__swsetup_r+0x4a>
 800c78c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c790:	4299      	cmp	r1, r3
 800c792:	d002      	beq.n	800c79a <__swsetup_r+0x46>
 800c794:	4628      	mov	r0, r5
 800c796:	f7fe feff 	bl	800b598 <_free_r>
 800c79a:	2300      	movs	r3, #0
 800c79c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c79e:	89a3      	ldrh	r3, [r4, #12]
 800c7a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c7a4:	81a3      	strh	r3, [r4, #12]
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	6063      	str	r3, [r4, #4]
 800c7aa:	6923      	ldr	r3, [r4, #16]
 800c7ac:	6023      	str	r3, [r4, #0]
 800c7ae:	89a3      	ldrh	r3, [r4, #12]
 800c7b0:	f043 0308 	orr.w	r3, r3, #8
 800c7b4:	81a3      	strh	r3, [r4, #12]
 800c7b6:	6923      	ldr	r3, [r4, #16]
 800c7b8:	b94b      	cbnz	r3, 800c7ce <__swsetup_r+0x7a>
 800c7ba:	89a3      	ldrh	r3, [r4, #12]
 800c7bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c7c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7c4:	d003      	beq.n	800c7ce <__swsetup_r+0x7a>
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	f000 f883 	bl	800c8d4 <__smakebuf_r>
 800c7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7d2:	f013 0201 	ands.w	r2, r3, #1
 800c7d6:	d00a      	beq.n	800c7ee <__swsetup_r+0x9a>
 800c7d8:	2200      	movs	r2, #0
 800c7da:	60a2      	str	r2, [r4, #8]
 800c7dc:	6962      	ldr	r2, [r4, #20]
 800c7de:	4252      	negs	r2, r2
 800c7e0:	61a2      	str	r2, [r4, #24]
 800c7e2:	6922      	ldr	r2, [r4, #16]
 800c7e4:	b942      	cbnz	r2, 800c7f8 <__swsetup_r+0xa4>
 800c7e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c7ea:	d1c5      	bne.n	800c778 <__swsetup_r+0x24>
 800c7ec:	bd38      	pop	{r3, r4, r5, pc}
 800c7ee:	0799      	lsls	r1, r3, #30
 800c7f0:	bf58      	it	pl
 800c7f2:	6962      	ldrpl	r2, [r4, #20]
 800c7f4:	60a2      	str	r2, [r4, #8]
 800c7f6:	e7f4      	b.n	800c7e2 <__swsetup_r+0x8e>
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	e7f7      	b.n	800c7ec <__swsetup_r+0x98>
 800c7fc:	20000108 	.word	0x20000108

0800c800 <_raise_r>:
 800c800:	291f      	cmp	r1, #31
 800c802:	b538      	push	{r3, r4, r5, lr}
 800c804:	4605      	mov	r5, r0
 800c806:	460c      	mov	r4, r1
 800c808:	d904      	bls.n	800c814 <_raise_r+0x14>
 800c80a:	2316      	movs	r3, #22
 800c80c:	6003      	str	r3, [r0, #0]
 800c80e:	f04f 30ff 	mov.w	r0, #4294967295
 800c812:	bd38      	pop	{r3, r4, r5, pc}
 800c814:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c816:	b112      	cbz	r2, 800c81e <_raise_r+0x1e>
 800c818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c81c:	b94b      	cbnz	r3, 800c832 <_raise_r+0x32>
 800c81e:	4628      	mov	r0, r5
 800c820:	f000 f830 	bl	800c884 <_getpid_r>
 800c824:	4622      	mov	r2, r4
 800c826:	4601      	mov	r1, r0
 800c828:	4628      	mov	r0, r5
 800c82a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c82e:	f000 b817 	b.w	800c860 <_kill_r>
 800c832:	2b01      	cmp	r3, #1
 800c834:	d00a      	beq.n	800c84c <_raise_r+0x4c>
 800c836:	1c59      	adds	r1, r3, #1
 800c838:	d103      	bne.n	800c842 <_raise_r+0x42>
 800c83a:	2316      	movs	r3, #22
 800c83c:	6003      	str	r3, [r0, #0]
 800c83e:	2001      	movs	r0, #1
 800c840:	e7e7      	b.n	800c812 <_raise_r+0x12>
 800c842:	2100      	movs	r1, #0
 800c844:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c848:	4620      	mov	r0, r4
 800c84a:	4798      	blx	r3
 800c84c:	2000      	movs	r0, #0
 800c84e:	e7e0      	b.n	800c812 <_raise_r+0x12>

0800c850 <raise>:
 800c850:	4b02      	ldr	r3, [pc, #8]	@ (800c85c <raise+0xc>)
 800c852:	4601      	mov	r1, r0
 800c854:	6818      	ldr	r0, [r3, #0]
 800c856:	f7ff bfd3 	b.w	800c800 <_raise_r>
 800c85a:	bf00      	nop
 800c85c:	20000108 	.word	0x20000108

0800c860 <_kill_r>:
 800c860:	b538      	push	{r3, r4, r5, lr}
 800c862:	4d07      	ldr	r5, [pc, #28]	@ (800c880 <_kill_r+0x20>)
 800c864:	2300      	movs	r3, #0
 800c866:	4604      	mov	r4, r0
 800c868:	4608      	mov	r0, r1
 800c86a:	4611      	mov	r1, r2
 800c86c:	602b      	str	r3, [r5, #0]
 800c86e:	f7f5 f857 	bl	8001920 <_kill>
 800c872:	1c43      	adds	r3, r0, #1
 800c874:	d102      	bne.n	800c87c <_kill_r+0x1c>
 800c876:	682b      	ldr	r3, [r5, #0]
 800c878:	b103      	cbz	r3, 800c87c <_kill_r+0x1c>
 800c87a:	6023      	str	r3, [r4, #0]
 800c87c:	bd38      	pop	{r3, r4, r5, pc}
 800c87e:	bf00      	nop
 800c880:	20002194 	.word	0x20002194

0800c884 <_getpid_r>:
 800c884:	f7f5 b844 	b.w	8001910 <_getpid>

0800c888 <__swhatbuf_r>:
 800c888:	b570      	push	{r4, r5, r6, lr}
 800c88a:	460c      	mov	r4, r1
 800c88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c890:	2900      	cmp	r1, #0
 800c892:	b096      	sub	sp, #88	@ 0x58
 800c894:	4615      	mov	r5, r2
 800c896:	461e      	mov	r6, r3
 800c898:	da0d      	bge.n	800c8b6 <__swhatbuf_r+0x2e>
 800c89a:	89a3      	ldrh	r3, [r4, #12]
 800c89c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c8a0:	f04f 0100 	mov.w	r1, #0
 800c8a4:	bf14      	ite	ne
 800c8a6:	2340      	movne	r3, #64	@ 0x40
 800c8a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	6031      	str	r1, [r6, #0]
 800c8b0:	602b      	str	r3, [r5, #0]
 800c8b2:	b016      	add	sp, #88	@ 0x58
 800c8b4:	bd70      	pop	{r4, r5, r6, pc}
 800c8b6:	466a      	mov	r2, sp
 800c8b8:	f000 f848 	bl	800c94c <_fstat_r>
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	dbec      	blt.n	800c89a <__swhatbuf_r+0x12>
 800c8c0:	9901      	ldr	r1, [sp, #4]
 800c8c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c8c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c8ca:	4259      	negs	r1, r3
 800c8cc:	4159      	adcs	r1, r3
 800c8ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c8d2:	e7eb      	b.n	800c8ac <__swhatbuf_r+0x24>

0800c8d4 <__smakebuf_r>:
 800c8d4:	898b      	ldrh	r3, [r1, #12]
 800c8d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8d8:	079d      	lsls	r5, r3, #30
 800c8da:	4606      	mov	r6, r0
 800c8dc:	460c      	mov	r4, r1
 800c8de:	d507      	bpl.n	800c8f0 <__smakebuf_r+0x1c>
 800c8e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c8e4:	6023      	str	r3, [r4, #0]
 800c8e6:	6123      	str	r3, [r4, #16]
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	6163      	str	r3, [r4, #20]
 800c8ec:	b003      	add	sp, #12
 800c8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8f0:	ab01      	add	r3, sp, #4
 800c8f2:	466a      	mov	r2, sp
 800c8f4:	f7ff ffc8 	bl	800c888 <__swhatbuf_r>
 800c8f8:	9f00      	ldr	r7, [sp, #0]
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	4639      	mov	r1, r7
 800c8fe:	4630      	mov	r0, r6
 800c900:	f7fe febe 	bl	800b680 <_malloc_r>
 800c904:	b948      	cbnz	r0, 800c91a <__smakebuf_r+0x46>
 800c906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c90a:	059a      	lsls	r2, r3, #22
 800c90c:	d4ee      	bmi.n	800c8ec <__smakebuf_r+0x18>
 800c90e:	f023 0303 	bic.w	r3, r3, #3
 800c912:	f043 0302 	orr.w	r3, r3, #2
 800c916:	81a3      	strh	r3, [r4, #12]
 800c918:	e7e2      	b.n	800c8e0 <__smakebuf_r+0xc>
 800c91a:	89a3      	ldrh	r3, [r4, #12]
 800c91c:	6020      	str	r0, [r4, #0]
 800c91e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c922:	81a3      	strh	r3, [r4, #12]
 800c924:	9b01      	ldr	r3, [sp, #4]
 800c926:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c92a:	b15b      	cbz	r3, 800c944 <__smakebuf_r+0x70>
 800c92c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c930:	4630      	mov	r0, r6
 800c932:	f000 f81d 	bl	800c970 <_isatty_r>
 800c936:	b128      	cbz	r0, 800c944 <__smakebuf_r+0x70>
 800c938:	89a3      	ldrh	r3, [r4, #12]
 800c93a:	f023 0303 	bic.w	r3, r3, #3
 800c93e:	f043 0301 	orr.w	r3, r3, #1
 800c942:	81a3      	strh	r3, [r4, #12]
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	431d      	orrs	r5, r3
 800c948:	81a5      	strh	r5, [r4, #12]
 800c94a:	e7cf      	b.n	800c8ec <__smakebuf_r+0x18>

0800c94c <_fstat_r>:
 800c94c:	b538      	push	{r3, r4, r5, lr}
 800c94e:	4d07      	ldr	r5, [pc, #28]	@ (800c96c <_fstat_r+0x20>)
 800c950:	2300      	movs	r3, #0
 800c952:	4604      	mov	r4, r0
 800c954:	4608      	mov	r0, r1
 800c956:	4611      	mov	r1, r2
 800c958:	602b      	str	r3, [r5, #0]
 800c95a:	f7f5 f841 	bl	80019e0 <_fstat>
 800c95e:	1c43      	adds	r3, r0, #1
 800c960:	d102      	bne.n	800c968 <_fstat_r+0x1c>
 800c962:	682b      	ldr	r3, [r5, #0]
 800c964:	b103      	cbz	r3, 800c968 <_fstat_r+0x1c>
 800c966:	6023      	str	r3, [r4, #0]
 800c968:	bd38      	pop	{r3, r4, r5, pc}
 800c96a:	bf00      	nop
 800c96c:	20002194 	.word	0x20002194

0800c970 <_isatty_r>:
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	4d06      	ldr	r5, [pc, #24]	@ (800c98c <_isatty_r+0x1c>)
 800c974:	2300      	movs	r3, #0
 800c976:	4604      	mov	r4, r0
 800c978:	4608      	mov	r0, r1
 800c97a:	602b      	str	r3, [r5, #0]
 800c97c:	f7f5 f840 	bl	8001a00 <_isatty>
 800c980:	1c43      	adds	r3, r0, #1
 800c982:	d102      	bne.n	800c98a <_isatty_r+0x1a>
 800c984:	682b      	ldr	r3, [r5, #0]
 800c986:	b103      	cbz	r3, 800c98a <_isatty_r+0x1a>
 800c988:	6023      	str	r3, [r4, #0]
 800c98a:	bd38      	pop	{r3, r4, r5, pc}
 800c98c:	20002194 	.word	0x20002194

0800c990 <sqrt>:
 800c990:	b538      	push	{r3, r4, r5, lr}
 800c992:	ed2d 8b02 	vpush	{d8}
 800c996:	ec55 4b10 	vmov	r4, r5, d0
 800c99a:	f000 f8dd 	bl	800cb58 <__ieee754_sqrt>
 800c99e:	4622      	mov	r2, r4
 800c9a0:	462b      	mov	r3, r5
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	eeb0 8a40 	vmov.f32	s16, s0
 800c9aa:	eef0 8a60 	vmov.f32	s17, s1
 800c9ae:	f7f4 f8bd 	bl	8000b2c <__aeabi_dcmpun>
 800c9b2:	b990      	cbnz	r0, 800c9da <sqrt+0x4a>
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	f7f4 f88e 	bl	8000adc <__aeabi_dcmplt>
 800c9c0:	b158      	cbz	r0, 800c9da <sqrt+0x4a>
 800c9c2:	f7fd ff6f 	bl	800a8a4 <__errno>
 800c9c6:	2321      	movs	r3, #33	@ 0x21
 800c9c8:	6003      	str	r3, [r0, #0]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	4610      	mov	r0, r2
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	f7f3 ff3b 	bl	800084c <__aeabi_ddiv>
 800c9d6:	ec41 0b18 	vmov	d8, r0, r1
 800c9da:	eeb0 0a48 	vmov.f32	s0, s16
 800c9de:	eef0 0a68 	vmov.f32	s1, s17
 800c9e2:	ecbd 8b02 	vpop	{d8}
 800c9e6:	bd38      	pop	{r3, r4, r5, pc}

0800c9e8 <atan2f>:
 800c9e8:	f000 bb10 	b.w	800d00c <__ieee754_atan2f>

0800c9ec <cosf>:
 800c9ec:	ee10 3a10 	vmov	r3, s0
 800c9f0:	b507      	push	{r0, r1, r2, lr}
 800c9f2:	4a1e      	ldr	r2, [pc, #120]	@ (800ca6c <cosf+0x80>)
 800c9f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d806      	bhi.n	800ca0a <cosf+0x1e>
 800c9fc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800ca70 <cosf+0x84>
 800ca00:	b003      	add	sp, #12
 800ca02:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca06:	f000 b981 	b.w	800cd0c <__kernel_cosf>
 800ca0a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ca0e:	d304      	bcc.n	800ca1a <cosf+0x2e>
 800ca10:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ca14:	b003      	add	sp, #12
 800ca16:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca1a:	4668      	mov	r0, sp
 800ca1c:	f000 fb96 	bl	800d14c <__ieee754_rem_pio2f>
 800ca20:	f000 0003 	and.w	r0, r0, #3
 800ca24:	2801      	cmp	r0, #1
 800ca26:	d009      	beq.n	800ca3c <cosf+0x50>
 800ca28:	2802      	cmp	r0, #2
 800ca2a:	d010      	beq.n	800ca4e <cosf+0x62>
 800ca2c:	b9b0      	cbnz	r0, 800ca5c <cosf+0x70>
 800ca2e:	eddd 0a01 	vldr	s1, [sp, #4]
 800ca32:	ed9d 0a00 	vldr	s0, [sp]
 800ca36:	f000 f969 	bl	800cd0c <__kernel_cosf>
 800ca3a:	e7eb      	b.n	800ca14 <cosf+0x28>
 800ca3c:	eddd 0a01 	vldr	s1, [sp, #4]
 800ca40:	ed9d 0a00 	vldr	s0, [sp]
 800ca44:	f000 f9ba 	bl	800cdbc <__kernel_sinf>
 800ca48:	eeb1 0a40 	vneg.f32	s0, s0
 800ca4c:	e7e2      	b.n	800ca14 <cosf+0x28>
 800ca4e:	eddd 0a01 	vldr	s1, [sp, #4]
 800ca52:	ed9d 0a00 	vldr	s0, [sp]
 800ca56:	f000 f959 	bl	800cd0c <__kernel_cosf>
 800ca5a:	e7f5      	b.n	800ca48 <cosf+0x5c>
 800ca5c:	eddd 0a01 	vldr	s1, [sp, #4]
 800ca60:	ed9d 0a00 	vldr	s0, [sp]
 800ca64:	2001      	movs	r0, #1
 800ca66:	f000 f9a9 	bl	800cdbc <__kernel_sinf>
 800ca6a:	e7d3      	b.n	800ca14 <cosf+0x28>
 800ca6c:	3f490fd8 	.word	0x3f490fd8
 800ca70:	00000000 	.word	0x00000000

0800ca74 <sinf>:
 800ca74:	ee10 3a10 	vmov	r3, s0
 800ca78:	b507      	push	{r0, r1, r2, lr}
 800ca7a:	4a1f      	ldr	r2, [pc, #124]	@ (800caf8 <sinf+0x84>)
 800ca7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d807      	bhi.n	800ca94 <sinf+0x20>
 800ca84:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800cafc <sinf+0x88>
 800ca88:	2000      	movs	r0, #0
 800ca8a:	b003      	add	sp, #12
 800ca8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca90:	f000 b994 	b.w	800cdbc <__kernel_sinf>
 800ca94:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ca98:	d304      	bcc.n	800caa4 <sinf+0x30>
 800ca9a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ca9e:	b003      	add	sp, #12
 800caa0:	f85d fb04 	ldr.w	pc, [sp], #4
 800caa4:	4668      	mov	r0, sp
 800caa6:	f000 fb51 	bl	800d14c <__ieee754_rem_pio2f>
 800caaa:	f000 0003 	and.w	r0, r0, #3
 800caae:	2801      	cmp	r0, #1
 800cab0:	d00a      	beq.n	800cac8 <sinf+0x54>
 800cab2:	2802      	cmp	r0, #2
 800cab4:	d00f      	beq.n	800cad6 <sinf+0x62>
 800cab6:	b9c0      	cbnz	r0, 800caea <sinf+0x76>
 800cab8:	eddd 0a01 	vldr	s1, [sp, #4]
 800cabc:	ed9d 0a00 	vldr	s0, [sp]
 800cac0:	2001      	movs	r0, #1
 800cac2:	f000 f97b 	bl	800cdbc <__kernel_sinf>
 800cac6:	e7ea      	b.n	800ca9e <sinf+0x2a>
 800cac8:	eddd 0a01 	vldr	s1, [sp, #4]
 800cacc:	ed9d 0a00 	vldr	s0, [sp]
 800cad0:	f000 f91c 	bl	800cd0c <__kernel_cosf>
 800cad4:	e7e3      	b.n	800ca9e <sinf+0x2a>
 800cad6:	eddd 0a01 	vldr	s1, [sp, #4]
 800cada:	ed9d 0a00 	vldr	s0, [sp]
 800cade:	2001      	movs	r0, #1
 800cae0:	f000 f96c 	bl	800cdbc <__kernel_sinf>
 800cae4:	eeb1 0a40 	vneg.f32	s0, s0
 800cae8:	e7d9      	b.n	800ca9e <sinf+0x2a>
 800caea:	eddd 0a01 	vldr	s1, [sp, #4]
 800caee:	ed9d 0a00 	vldr	s0, [sp]
 800caf2:	f000 f90b 	bl	800cd0c <__kernel_cosf>
 800caf6:	e7f5      	b.n	800cae4 <sinf+0x70>
 800caf8:	3f490fd8 	.word	0x3f490fd8
 800cafc:	00000000 	.word	0x00000000

0800cb00 <tanf>:
 800cb00:	ee10 3a10 	vmov	r3, s0
 800cb04:	b507      	push	{r0, r1, r2, lr}
 800cb06:	4a12      	ldr	r2, [pc, #72]	@ (800cb50 <tanf+0x50>)
 800cb08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d807      	bhi.n	800cb20 <tanf+0x20>
 800cb10:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800cb54 <tanf+0x54>
 800cb14:	2001      	movs	r0, #1
 800cb16:	b003      	add	sp, #12
 800cb18:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb1c:	f000 b996 	b.w	800ce4c <__kernel_tanf>
 800cb20:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cb24:	d304      	bcc.n	800cb30 <tanf+0x30>
 800cb26:	ee30 0a40 	vsub.f32	s0, s0, s0
 800cb2a:	b003      	add	sp, #12
 800cb2c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb30:	4668      	mov	r0, sp
 800cb32:	f000 fb0b 	bl	800d14c <__ieee754_rem_pio2f>
 800cb36:	0040      	lsls	r0, r0, #1
 800cb38:	f000 0002 	and.w	r0, r0, #2
 800cb3c:	eddd 0a01 	vldr	s1, [sp, #4]
 800cb40:	ed9d 0a00 	vldr	s0, [sp]
 800cb44:	f1c0 0001 	rsb	r0, r0, #1
 800cb48:	f000 f980 	bl	800ce4c <__kernel_tanf>
 800cb4c:	e7ed      	b.n	800cb2a <tanf+0x2a>
 800cb4e:	bf00      	nop
 800cb50:	3f490fda 	.word	0x3f490fda
 800cb54:	00000000 	.word	0x00000000

0800cb58 <__ieee754_sqrt>:
 800cb58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5c:	4a68      	ldr	r2, [pc, #416]	@ (800cd00 <__ieee754_sqrt+0x1a8>)
 800cb5e:	ec55 4b10 	vmov	r4, r5, d0
 800cb62:	43aa      	bics	r2, r5
 800cb64:	462b      	mov	r3, r5
 800cb66:	4621      	mov	r1, r4
 800cb68:	d110      	bne.n	800cb8c <__ieee754_sqrt+0x34>
 800cb6a:	4622      	mov	r2, r4
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	4629      	mov	r1, r5
 800cb70:	f7f3 fd42 	bl	80005f8 <__aeabi_dmul>
 800cb74:	4602      	mov	r2, r0
 800cb76:	460b      	mov	r3, r1
 800cb78:	4620      	mov	r0, r4
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	f7f3 fb86 	bl	800028c <__adddf3>
 800cb80:	4604      	mov	r4, r0
 800cb82:	460d      	mov	r5, r1
 800cb84:	ec45 4b10 	vmov	d0, r4, r5
 800cb88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb8c:	2d00      	cmp	r5, #0
 800cb8e:	dc0e      	bgt.n	800cbae <__ieee754_sqrt+0x56>
 800cb90:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cb94:	4322      	orrs	r2, r4
 800cb96:	d0f5      	beq.n	800cb84 <__ieee754_sqrt+0x2c>
 800cb98:	b19d      	cbz	r5, 800cbc2 <__ieee754_sqrt+0x6a>
 800cb9a:	4622      	mov	r2, r4
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	4629      	mov	r1, r5
 800cba0:	f7f3 fb72 	bl	8000288 <__aeabi_dsub>
 800cba4:	4602      	mov	r2, r0
 800cba6:	460b      	mov	r3, r1
 800cba8:	f7f3 fe50 	bl	800084c <__aeabi_ddiv>
 800cbac:	e7e8      	b.n	800cb80 <__ieee754_sqrt+0x28>
 800cbae:	152a      	asrs	r2, r5, #20
 800cbb0:	d115      	bne.n	800cbde <__ieee754_sqrt+0x86>
 800cbb2:	2000      	movs	r0, #0
 800cbb4:	e009      	b.n	800cbca <__ieee754_sqrt+0x72>
 800cbb6:	0acb      	lsrs	r3, r1, #11
 800cbb8:	3a15      	subs	r2, #21
 800cbba:	0549      	lsls	r1, r1, #21
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d0fa      	beq.n	800cbb6 <__ieee754_sqrt+0x5e>
 800cbc0:	e7f7      	b.n	800cbb2 <__ieee754_sqrt+0x5a>
 800cbc2:	462a      	mov	r2, r5
 800cbc4:	e7fa      	b.n	800cbbc <__ieee754_sqrt+0x64>
 800cbc6:	005b      	lsls	r3, r3, #1
 800cbc8:	3001      	adds	r0, #1
 800cbca:	02dc      	lsls	r4, r3, #11
 800cbcc:	d5fb      	bpl.n	800cbc6 <__ieee754_sqrt+0x6e>
 800cbce:	1e44      	subs	r4, r0, #1
 800cbd0:	1b12      	subs	r2, r2, r4
 800cbd2:	f1c0 0420 	rsb	r4, r0, #32
 800cbd6:	fa21 f404 	lsr.w	r4, r1, r4
 800cbda:	4323      	orrs	r3, r4
 800cbdc:	4081      	lsls	r1, r0
 800cbde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbe2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800cbe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbea:	07d2      	lsls	r2, r2, #31
 800cbec:	bf5c      	itt	pl
 800cbee:	005b      	lslpl	r3, r3, #1
 800cbf0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800cbf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cbf8:	bf58      	it	pl
 800cbfa:	0049      	lslpl	r1, r1, #1
 800cbfc:	2600      	movs	r6, #0
 800cbfe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800cc02:	106d      	asrs	r5, r5, #1
 800cc04:	0049      	lsls	r1, r1, #1
 800cc06:	2016      	movs	r0, #22
 800cc08:	4632      	mov	r2, r6
 800cc0a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800cc0e:	1917      	adds	r7, r2, r4
 800cc10:	429f      	cmp	r7, r3
 800cc12:	bfde      	ittt	le
 800cc14:	193a      	addle	r2, r7, r4
 800cc16:	1bdb      	suble	r3, r3, r7
 800cc18:	1936      	addle	r6, r6, r4
 800cc1a:	0fcf      	lsrs	r7, r1, #31
 800cc1c:	3801      	subs	r0, #1
 800cc1e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800cc22:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cc26:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cc2a:	d1f0      	bne.n	800cc0e <__ieee754_sqrt+0xb6>
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	2720      	movs	r7, #32
 800cc30:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800cc34:	429a      	cmp	r2, r3
 800cc36:	eb00 0e0c 	add.w	lr, r0, ip
 800cc3a:	db02      	blt.n	800cc42 <__ieee754_sqrt+0xea>
 800cc3c:	d113      	bne.n	800cc66 <__ieee754_sqrt+0x10e>
 800cc3e:	458e      	cmp	lr, r1
 800cc40:	d811      	bhi.n	800cc66 <__ieee754_sqrt+0x10e>
 800cc42:	f1be 0f00 	cmp.w	lr, #0
 800cc46:	eb0e 000c 	add.w	r0, lr, ip
 800cc4a:	da42      	bge.n	800ccd2 <__ieee754_sqrt+0x17a>
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	db40      	blt.n	800ccd2 <__ieee754_sqrt+0x17a>
 800cc50:	f102 0801 	add.w	r8, r2, #1
 800cc54:	1a9b      	subs	r3, r3, r2
 800cc56:	458e      	cmp	lr, r1
 800cc58:	bf88      	it	hi
 800cc5a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cc5e:	eba1 010e 	sub.w	r1, r1, lr
 800cc62:	4464      	add	r4, ip
 800cc64:	4642      	mov	r2, r8
 800cc66:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800cc6a:	3f01      	subs	r7, #1
 800cc6c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800cc70:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cc74:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cc78:	d1dc      	bne.n	800cc34 <__ieee754_sqrt+0xdc>
 800cc7a:	4319      	orrs	r1, r3
 800cc7c:	d01b      	beq.n	800ccb6 <__ieee754_sqrt+0x15e>
 800cc7e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cd04 <__ieee754_sqrt+0x1ac>
 800cc82:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cd08 <__ieee754_sqrt+0x1b0>
 800cc86:	e9da 0100 	ldrd	r0, r1, [sl]
 800cc8a:	e9db 2300 	ldrd	r2, r3, [fp]
 800cc8e:	f7f3 fafb 	bl	8000288 <__aeabi_dsub>
 800cc92:	e9da 8900 	ldrd	r8, r9, [sl]
 800cc96:	4602      	mov	r2, r0
 800cc98:	460b      	mov	r3, r1
 800cc9a:	4640      	mov	r0, r8
 800cc9c:	4649      	mov	r1, r9
 800cc9e:	f7f3 ff27 	bl	8000af0 <__aeabi_dcmple>
 800cca2:	b140      	cbz	r0, 800ccb6 <__ieee754_sqrt+0x15e>
 800cca4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cca8:	e9da 0100 	ldrd	r0, r1, [sl]
 800ccac:	e9db 2300 	ldrd	r2, r3, [fp]
 800ccb0:	d111      	bne.n	800ccd6 <__ieee754_sqrt+0x17e>
 800ccb2:	3601      	adds	r6, #1
 800ccb4:	463c      	mov	r4, r7
 800ccb6:	1072      	asrs	r2, r6, #1
 800ccb8:	0863      	lsrs	r3, r4, #1
 800ccba:	07f1      	lsls	r1, r6, #31
 800ccbc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ccc0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ccc4:	bf48      	it	mi
 800ccc6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ccca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ccce:	4618      	mov	r0, r3
 800ccd0:	e756      	b.n	800cb80 <__ieee754_sqrt+0x28>
 800ccd2:	4690      	mov	r8, r2
 800ccd4:	e7be      	b.n	800cc54 <__ieee754_sqrt+0xfc>
 800ccd6:	f7f3 fad9 	bl	800028c <__adddf3>
 800ccda:	e9da 8900 	ldrd	r8, r9, [sl]
 800ccde:	4602      	mov	r2, r0
 800cce0:	460b      	mov	r3, r1
 800cce2:	4640      	mov	r0, r8
 800cce4:	4649      	mov	r1, r9
 800cce6:	f7f3 fef9 	bl	8000adc <__aeabi_dcmplt>
 800ccea:	b120      	cbz	r0, 800ccf6 <__ieee754_sqrt+0x19e>
 800ccec:	1ca0      	adds	r0, r4, #2
 800ccee:	bf08      	it	eq
 800ccf0:	3601      	addeq	r6, #1
 800ccf2:	3402      	adds	r4, #2
 800ccf4:	e7df      	b.n	800ccb6 <__ieee754_sqrt+0x15e>
 800ccf6:	1c63      	adds	r3, r4, #1
 800ccf8:	f023 0401 	bic.w	r4, r3, #1
 800ccfc:	e7db      	b.n	800ccb6 <__ieee754_sqrt+0x15e>
 800ccfe:	bf00      	nop
 800cd00:	7ff00000 	.word	0x7ff00000
 800cd04:	200002d0 	.word	0x200002d0
 800cd08:	200002c8 	.word	0x200002c8

0800cd0c <__kernel_cosf>:
 800cd0c:	ee10 3a10 	vmov	r3, s0
 800cd10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cd14:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800cd18:	eef0 6a40 	vmov.f32	s13, s0
 800cd1c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cd20:	d204      	bcs.n	800cd2c <__kernel_cosf+0x20>
 800cd22:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800cd26:	ee17 2a90 	vmov	r2, s15
 800cd2a:	b342      	cbz	r2, 800cd7e <__kernel_cosf+0x72>
 800cd2c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800cd30:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800cd9c <__kernel_cosf+0x90>
 800cd34:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800cda0 <__kernel_cosf+0x94>
 800cd38:	4a1a      	ldr	r2, [pc, #104]	@ (800cda4 <__kernel_cosf+0x98>)
 800cd3a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cda8 <__kernel_cosf+0x9c>
 800cd44:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cd48:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800cdac <__kernel_cosf+0xa0>
 800cd4c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cd50:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800cdb0 <__kernel_cosf+0xa4>
 800cd54:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cd58:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800cdb4 <__kernel_cosf+0xa8>
 800cd5c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cd60:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800cd64:	ee26 6a07 	vmul.f32	s12, s12, s14
 800cd68:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cd6c:	eee7 0a06 	vfma.f32	s1, s14, s12
 800cd70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd74:	d804      	bhi.n	800cd80 <__kernel_cosf+0x74>
 800cd76:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cd7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cd7e:	4770      	bx	lr
 800cd80:	4a0d      	ldr	r2, [pc, #52]	@ (800cdb8 <__kernel_cosf+0xac>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	bf9a      	itte	ls
 800cd86:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800cd8a:	ee07 3a10 	vmovls	s14, r3
 800cd8e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800cd92:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cd96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd9a:	e7ec      	b.n	800cd76 <__kernel_cosf+0x6a>
 800cd9c:	ad47d74e 	.word	0xad47d74e
 800cda0:	310f74f6 	.word	0x310f74f6
 800cda4:	3e999999 	.word	0x3e999999
 800cda8:	b493f27c 	.word	0xb493f27c
 800cdac:	37d00d01 	.word	0x37d00d01
 800cdb0:	bab60b61 	.word	0xbab60b61
 800cdb4:	3d2aaaab 	.word	0x3d2aaaab
 800cdb8:	3f480000 	.word	0x3f480000

0800cdbc <__kernel_sinf>:
 800cdbc:	ee10 3a10 	vmov	r3, s0
 800cdc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cdc4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800cdc8:	d204      	bcs.n	800cdd4 <__kernel_sinf+0x18>
 800cdca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cdce:	ee17 3a90 	vmov	r3, s15
 800cdd2:	b35b      	cbz	r3, 800ce2c <__kernel_sinf+0x70>
 800cdd4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cdd8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ce30 <__kernel_sinf+0x74>
 800cddc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800ce34 <__kernel_sinf+0x78>
 800cde0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cde4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800ce38 <__kernel_sinf+0x7c>
 800cde8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cdec:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800ce3c <__kernel_sinf+0x80>
 800cdf0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cdf4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800ce40 <__kernel_sinf+0x84>
 800cdf8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800cdfc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ce00:	b930      	cbnz	r0, 800ce10 <__kernel_sinf+0x54>
 800ce02:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800ce44 <__kernel_sinf+0x88>
 800ce06:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ce0a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ce0e:	4770      	bx	lr
 800ce10:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ce14:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ce18:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ce1c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ce20:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800ce48 <__kernel_sinf+0x8c>
 800ce24:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ce28:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	2f2ec9d3 	.word	0x2f2ec9d3
 800ce34:	b2d72f34 	.word	0xb2d72f34
 800ce38:	3638ef1b 	.word	0x3638ef1b
 800ce3c:	b9500d01 	.word	0xb9500d01
 800ce40:	3c088889 	.word	0x3c088889
 800ce44:	be2aaaab 	.word	0xbe2aaaab
 800ce48:	3e2aaaab 	.word	0x3e2aaaab

0800ce4c <__kernel_tanf>:
 800ce4c:	b508      	push	{r3, lr}
 800ce4e:	ee10 3a10 	vmov	r3, s0
 800ce52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ce56:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 800ce5a:	eef0 7a40 	vmov.f32	s15, s0
 800ce5e:	d217      	bcs.n	800ce90 <__kernel_tanf+0x44>
 800ce60:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800ce64:	ee17 1a10 	vmov	r1, s14
 800ce68:	bb41      	cbnz	r1, 800cebc <__kernel_tanf+0x70>
 800ce6a:	1c43      	adds	r3, r0, #1
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	d108      	bne.n	800ce82 <__kernel_tanf+0x36>
 800ce70:	f000 fb70 	bl	800d554 <fabsf>
 800ce74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce78:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ce7c:	eeb0 0a67 	vmov.f32	s0, s15
 800ce80:	bd08      	pop	{r3, pc}
 800ce82:	2801      	cmp	r0, #1
 800ce84:	d0fa      	beq.n	800ce7c <__kernel_tanf+0x30>
 800ce86:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ce8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ce8e:	e7f5      	b.n	800ce7c <__kernel_tanf+0x30>
 800ce90:	494c      	ldr	r1, [pc, #304]	@ (800cfc4 <__kernel_tanf+0x178>)
 800ce92:	428a      	cmp	r2, r1
 800ce94:	d312      	bcc.n	800cebc <__kernel_tanf+0x70>
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800cfc8 <__kernel_tanf+0x17c>
 800ce9c:	bfb8      	it	lt
 800ce9e:	eef1 7a40 	vneglt.f32	s15, s0
 800cea2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cea6:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800cfcc <__kernel_tanf+0x180>
 800ceaa:	bfb8      	it	lt
 800ceac:	eef1 0a60 	vneglt.f32	s1, s1
 800ceb0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ceb4:	eddf 0a46 	vldr	s1, [pc, #280]	@ 800cfd0 <__kernel_tanf+0x184>
 800ceb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cebc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800cec0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800cfd4 <__kernel_tanf+0x188>
 800cec4:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 800cfd8 <__kernel_tanf+0x18c>
 800cec8:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 800cfdc <__kernel_tanf+0x190>
 800cecc:	493d      	ldr	r1, [pc, #244]	@ (800cfc4 <__kernel_tanf+0x178>)
 800cece:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ced2:	428a      	cmp	r2, r1
 800ced4:	eea7 6a25 	vfma.f32	s12, s14, s11
 800ced8:	eddf 5a41 	vldr	s11, [pc, #260]	@ 800cfe0 <__kernel_tanf+0x194>
 800cedc:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cee0:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800cfe4 <__kernel_tanf+0x198>
 800cee4:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cee8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800cfe8 <__kernel_tanf+0x19c>
 800ceec:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cef0:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 800cfec <__kernel_tanf+0x1a0>
 800cef4:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cef8:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800cff0 <__kernel_tanf+0x1a4>
 800cefc:	eee7 5a05 	vfma.f32	s11, s14, s10
 800cf00:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800cff4 <__kernel_tanf+0x1a8>
 800cf04:	eea5 5a87 	vfma.f32	s10, s11, s14
 800cf08:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800cff8 <__kernel_tanf+0x1ac>
 800cf0c:	eee5 5a07 	vfma.f32	s11, s10, s14
 800cf10:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800cffc <__kernel_tanf+0x1b0>
 800cf14:	eea5 5a87 	vfma.f32	s10, s11, s14
 800cf18:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800d000 <__kernel_tanf+0x1b4>
 800cf1c:	eee5 5a07 	vfma.f32	s11, s10, s14
 800cf20:	eeb0 7a46 	vmov.f32	s14, s12
 800cf24:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cf28:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800cf2c:	eeb0 6a60 	vmov.f32	s12, s1
 800cf30:	eea7 6a05 	vfma.f32	s12, s14, s10
 800cf34:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800d004 <__kernel_tanf+0x1b8>
 800cf38:	eee6 0a26 	vfma.f32	s1, s12, s13
 800cf3c:	eee5 0a07 	vfma.f32	s1, s10, s14
 800cf40:	ee37 6aa0 	vadd.f32	s12, s15, s1
 800cf44:	d31d      	bcc.n	800cf82 <__kernel_tanf+0x136>
 800cf46:	ee07 0a10 	vmov	s14, r0
 800cf4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cf4e:	ee26 5a06 	vmul.f32	s10, s12, s12
 800cf52:	ee36 6a07 	vadd.f32	s12, s12, s14
 800cf56:	179b      	asrs	r3, r3, #30
 800cf58:	eec5 5a06 	vdiv.f32	s11, s10, s12
 800cf5c:	f003 0302 	and.w	r3, r3, #2
 800cf60:	f1c3 0301 	rsb	r3, r3, #1
 800cf64:	ee06 3a90 	vmov	s13, r3
 800cf68:	ee35 6ae0 	vsub.f32	s12, s11, s1
 800cf6c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800cf70:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cf74:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800cf78:	eea7 7ac6 	vfms.f32	s14, s15, s12
 800cf7c:	ee66 7a87 	vmul.f32	s15, s13, s14
 800cf80:	e77c      	b.n	800ce7c <__kernel_tanf+0x30>
 800cf82:	2801      	cmp	r0, #1
 800cf84:	d01b      	beq.n	800cfbe <__kernel_tanf+0x172>
 800cf86:	4b20      	ldr	r3, [pc, #128]	@ (800d008 <__kernel_tanf+0x1bc>)
 800cf88:	ee16 2a10 	vmov	r2, s12
 800cf8c:	401a      	ands	r2, r3
 800cf8e:	ee05 2a90 	vmov	s11, r2
 800cf92:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800cf96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf9a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800cf9e:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800cfa2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800cfa6:	ee16 2a90 	vmov	r2, s13
 800cfaa:	4013      	ands	r3, r2
 800cfac:	ee07 3a90 	vmov	s15, r3
 800cfb0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cfb4:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800cfb8:	eee7 7a26 	vfma.f32	s15, s14, s13
 800cfbc:	e75e      	b.n	800ce7c <__kernel_tanf+0x30>
 800cfbe:	eef0 7a46 	vmov.f32	s15, s12
 800cfc2:	e75b      	b.n	800ce7c <__kernel_tanf+0x30>
 800cfc4:	3f2ca140 	.word	0x3f2ca140
 800cfc8:	3f490fda 	.word	0x3f490fda
 800cfcc:	33222168 	.word	0x33222168
 800cfd0:	00000000 	.word	0x00000000
 800cfd4:	b79bae5f 	.word	0xb79bae5f
 800cfd8:	38a3f445 	.word	0x38a3f445
 800cfdc:	37d95384 	.word	0x37d95384
 800cfe0:	3a1a26c8 	.word	0x3a1a26c8
 800cfe4:	3b6b6916 	.word	0x3b6b6916
 800cfe8:	3cb327a4 	.word	0x3cb327a4
 800cfec:	3e088889 	.word	0x3e088889
 800cff0:	3895c07a 	.word	0x3895c07a
 800cff4:	398137b9 	.word	0x398137b9
 800cff8:	3abede48 	.word	0x3abede48
 800cffc:	3c11371f 	.word	0x3c11371f
 800d000:	3d5d0dd1 	.word	0x3d5d0dd1
 800d004:	3eaaaaab 	.word	0x3eaaaaab
 800d008:	fffff000 	.word	0xfffff000

0800d00c <__ieee754_atan2f>:
 800d00c:	ee10 2a90 	vmov	r2, s1
 800d010:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800d014:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d018:	b510      	push	{r4, lr}
 800d01a:	eef0 7a40 	vmov.f32	s15, s0
 800d01e:	d806      	bhi.n	800d02e <__ieee754_atan2f+0x22>
 800d020:	ee10 0a10 	vmov	r0, s0
 800d024:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d028:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d02c:	d904      	bls.n	800d038 <__ieee754_atan2f+0x2c>
 800d02e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d032:	eeb0 0a67 	vmov.f32	s0, s15
 800d036:	bd10      	pop	{r4, pc}
 800d038:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800d03c:	d103      	bne.n	800d046 <__ieee754_atan2f+0x3a>
 800d03e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d042:	f000 b9b3 	b.w	800d3ac <atanf>
 800d046:	1794      	asrs	r4, r2, #30
 800d048:	f004 0402 	and.w	r4, r4, #2
 800d04c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d050:	b943      	cbnz	r3, 800d064 <__ieee754_atan2f+0x58>
 800d052:	2c02      	cmp	r4, #2
 800d054:	d05e      	beq.n	800d114 <__ieee754_atan2f+0x108>
 800d056:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d128 <__ieee754_atan2f+0x11c>
 800d05a:	2c03      	cmp	r4, #3
 800d05c:	bf08      	it	eq
 800d05e:	eef0 7a47 	vmoveq.f32	s15, s14
 800d062:	e7e6      	b.n	800d032 <__ieee754_atan2f+0x26>
 800d064:	b941      	cbnz	r1, 800d078 <__ieee754_atan2f+0x6c>
 800d066:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800d12c <__ieee754_atan2f+0x120>
 800d06a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d130 <__ieee754_atan2f+0x124>
 800d06e:	2800      	cmp	r0, #0
 800d070:	bfb8      	it	lt
 800d072:	eef0 7a47 	vmovlt.f32	s15, s14
 800d076:	e7dc      	b.n	800d032 <__ieee754_atan2f+0x26>
 800d078:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d07c:	d110      	bne.n	800d0a0 <__ieee754_atan2f+0x94>
 800d07e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d082:	f104 34ff 	add.w	r4, r4, #4294967295
 800d086:	d107      	bne.n	800d098 <__ieee754_atan2f+0x8c>
 800d088:	2c02      	cmp	r4, #2
 800d08a:	d846      	bhi.n	800d11a <__ieee754_atan2f+0x10e>
 800d08c:	4b29      	ldr	r3, [pc, #164]	@ (800d134 <__ieee754_atan2f+0x128>)
 800d08e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d092:	edd3 7a00 	vldr	s15, [r3]
 800d096:	e7cc      	b.n	800d032 <__ieee754_atan2f+0x26>
 800d098:	2c02      	cmp	r4, #2
 800d09a:	d841      	bhi.n	800d120 <__ieee754_atan2f+0x114>
 800d09c:	4b26      	ldr	r3, [pc, #152]	@ (800d138 <__ieee754_atan2f+0x12c>)
 800d09e:	e7f6      	b.n	800d08e <__ieee754_atan2f+0x82>
 800d0a0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d0a4:	d0df      	beq.n	800d066 <__ieee754_atan2f+0x5a>
 800d0a6:	1a5b      	subs	r3, r3, r1
 800d0a8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800d0ac:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d0b0:	da1a      	bge.n	800d0e8 <__ieee754_atan2f+0xdc>
 800d0b2:	2a00      	cmp	r2, #0
 800d0b4:	da01      	bge.n	800d0ba <__ieee754_atan2f+0xae>
 800d0b6:	313c      	adds	r1, #60	@ 0x3c
 800d0b8:	db19      	blt.n	800d0ee <__ieee754_atan2f+0xe2>
 800d0ba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d0be:	f000 fa49 	bl	800d554 <fabsf>
 800d0c2:	f000 f973 	bl	800d3ac <atanf>
 800d0c6:	eef0 7a40 	vmov.f32	s15, s0
 800d0ca:	2c01      	cmp	r4, #1
 800d0cc:	d012      	beq.n	800d0f4 <__ieee754_atan2f+0xe8>
 800d0ce:	2c02      	cmp	r4, #2
 800d0d0:	d017      	beq.n	800d102 <__ieee754_atan2f+0xf6>
 800d0d2:	2c00      	cmp	r4, #0
 800d0d4:	d0ad      	beq.n	800d032 <__ieee754_atan2f+0x26>
 800d0d6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d13c <__ieee754_atan2f+0x130>
 800d0da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d0de:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800d140 <__ieee754_atan2f+0x134>
 800d0e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d0e6:	e7a4      	b.n	800d032 <__ieee754_atan2f+0x26>
 800d0e8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800d12c <__ieee754_atan2f+0x120>
 800d0ec:	e7ed      	b.n	800d0ca <__ieee754_atan2f+0xbe>
 800d0ee:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d144 <__ieee754_atan2f+0x138>
 800d0f2:	e7ea      	b.n	800d0ca <__ieee754_atan2f+0xbe>
 800d0f4:	ee17 3a90 	vmov	r3, s15
 800d0f8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d0fc:	ee07 3a90 	vmov	s15, r3
 800d100:	e797      	b.n	800d032 <__ieee754_atan2f+0x26>
 800d102:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d13c <__ieee754_atan2f+0x130>
 800d106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d10a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800d140 <__ieee754_atan2f+0x134>
 800d10e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d112:	e78e      	b.n	800d032 <__ieee754_atan2f+0x26>
 800d114:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d140 <__ieee754_atan2f+0x134>
 800d118:	e78b      	b.n	800d032 <__ieee754_atan2f+0x26>
 800d11a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800d148 <__ieee754_atan2f+0x13c>
 800d11e:	e788      	b.n	800d032 <__ieee754_atan2f+0x26>
 800d120:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d144 <__ieee754_atan2f+0x138>
 800d124:	e785      	b.n	800d032 <__ieee754_atan2f+0x26>
 800d126:	bf00      	nop
 800d128:	c0490fdb 	.word	0xc0490fdb
 800d12c:	3fc90fdb 	.word	0x3fc90fdb
 800d130:	bfc90fdb 	.word	0xbfc90fdb
 800d134:	0800dfac 	.word	0x0800dfac
 800d138:	0800dfa0 	.word	0x0800dfa0
 800d13c:	33bbbd2e 	.word	0x33bbbd2e
 800d140:	40490fdb 	.word	0x40490fdb
 800d144:	00000000 	.word	0x00000000
 800d148:	3f490fdb 	.word	0x3f490fdb

0800d14c <__ieee754_rem_pio2f>:
 800d14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d14e:	ee10 6a10 	vmov	r6, s0
 800d152:	4b88      	ldr	r3, [pc, #544]	@ (800d374 <__ieee754_rem_pio2f+0x228>)
 800d154:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d158:	429d      	cmp	r5, r3
 800d15a:	b087      	sub	sp, #28
 800d15c:	4604      	mov	r4, r0
 800d15e:	d805      	bhi.n	800d16c <__ieee754_rem_pio2f+0x20>
 800d160:	2300      	movs	r3, #0
 800d162:	ed80 0a00 	vstr	s0, [r0]
 800d166:	6043      	str	r3, [r0, #4]
 800d168:	2000      	movs	r0, #0
 800d16a:	e022      	b.n	800d1b2 <__ieee754_rem_pio2f+0x66>
 800d16c:	4b82      	ldr	r3, [pc, #520]	@ (800d378 <__ieee754_rem_pio2f+0x22c>)
 800d16e:	429d      	cmp	r5, r3
 800d170:	d83a      	bhi.n	800d1e8 <__ieee754_rem_pio2f+0x9c>
 800d172:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d176:	2e00      	cmp	r6, #0
 800d178:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800d37c <__ieee754_rem_pio2f+0x230>
 800d17c:	4a80      	ldr	r2, [pc, #512]	@ (800d380 <__ieee754_rem_pio2f+0x234>)
 800d17e:	f023 030f 	bic.w	r3, r3, #15
 800d182:	dd18      	ble.n	800d1b6 <__ieee754_rem_pio2f+0x6a>
 800d184:	4293      	cmp	r3, r2
 800d186:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d18a:	bf09      	itett	eq
 800d18c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800d384 <__ieee754_rem_pio2f+0x238>
 800d190:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800d388 <__ieee754_rem_pio2f+0x23c>
 800d194:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800d38c <__ieee754_rem_pio2f+0x240>
 800d198:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d19c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d1a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1a4:	ed80 7a00 	vstr	s14, [r0]
 800d1a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d1ac:	edc0 7a01 	vstr	s15, [r0, #4]
 800d1b0:	2001      	movs	r0, #1
 800d1b2:	b007      	add	sp, #28
 800d1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d1bc:	bf09      	itett	eq
 800d1be:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800d384 <__ieee754_rem_pio2f+0x238>
 800d1c2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800d388 <__ieee754_rem_pio2f+0x23c>
 800d1c6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800d38c <__ieee754_rem_pio2f+0x240>
 800d1ca:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d1ce:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d1d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1d6:	ed80 7a00 	vstr	s14, [r0]
 800d1da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1de:	edc0 7a01 	vstr	s15, [r0, #4]
 800d1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e6:	e7e4      	b.n	800d1b2 <__ieee754_rem_pio2f+0x66>
 800d1e8:	4b69      	ldr	r3, [pc, #420]	@ (800d390 <__ieee754_rem_pio2f+0x244>)
 800d1ea:	429d      	cmp	r5, r3
 800d1ec:	d873      	bhi.n	800d2d6 <__ieee754_rem_pio2f+0x18a>
 800d1ee:	f000 f9b1 	bl	800d554 <fabsf>
 800d1f2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d394 <__ieee754_rem_pio2f+0x248>
 800d1f6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d1fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d1fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d206:	ee17 0a90 	vmov	r0, s15
 800d20a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d37c <__ieee754_rem_pio2f+0x230>
 800d20e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d212:	281f      	cmp	r0, #31
 800d214:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d388 <__ieee754_rem_pio2f+0x23c>
 800d218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d21c:	eeb1 6a47 	vneg.f32	s12, s14
 800d220:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d224:	ee16 1a90 	vmov	r1, s13
 800d228:	dc09      	bgt.n	800d23e <__ieee754_rem_pio2f+0xf2>
 800d22a:	4a5b      	ldr	r2, [pc, #364]	@ (800d398 <__ieee754_rem_pio2f+0x24c>)
 800d22c:	1e47      	subs	r7, r0, #1
 800d22e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d232:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d236:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d107      	bne.n	800d24e <__ieee754_rem_pio2f+0x102>
 800d23e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d242:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d246:	2a08      	cmp	r2, #8
 800d248:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d24c:	dc14      	bgt.n	800d278 <__ieee754_rem_pio2f+0x12c>
 800d24e:	6021      	str	r1, [r4, #0]
 800d250:	ed94 7a00 	vldr	s14, [r4]
 800d254:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d258:	2e00      	cmp	r6, #0
 800d25a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d25e:	ed84 0a01 	vstr	s0, [r4, #4]
 800d262:	daa6      	bge.n	800d1b2 <__ieee754_rem_pio2f+0x66>
 800d264:	eeb1 7a47 	vneg.f32	s14, s14
 800d268:	eeb1 0a40 	vneg.f32	s0, s0
 800d26c:	ed84 7a00 	vstr	s14, [r4]
 800d270:	ed84 0a01 	vstr	s0, [r4, #4]
 800d274:	4240      	negs	r0, r0
 800d276:	e79c      	b.n	800d1b2 <__ieee754_rem_pio2f+0x66>
 800d278:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800d384 <__ieee754_rem_pio2f+0x238>
 800d27c:	eef0 6a40 	vmov.f32	s13, s0
 800d280:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d284:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d288:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d28c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d38c <__ieee754_rem_pio2f+0x240>
 800d290:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d294:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d298:	ee15 2a90 	vmov	r2, s11
 800d29c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d2a0:	1a5b      	subs	r3, r3, r1
 800d2a2:	2b19      	cmp	r3, #25
 800d2a4:	dc04      	bgt.n	800d2b0 <__ieee754_rem_pio2f+0x164>
 800d2a6:	edc4 5a00 	vstr	s11, [r4]
 800d2aa:	eeb0 0a66 	vmov.f32	s0, s13
 800d2ae:	e7cf      	b.n	800d250 <__ieee754_rem_pio2f+0x104>
 800d2b0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d39c <__ieee754_rem_pio2f+0x250>
 800d2b4:	eeb0 0a66 	vmov.f32	s0, s13
 800d2b8:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d2bc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d2c0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d3a0 <__ieee754_rem_pio2f+0x254>
 800d2c4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d2c8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d2cc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d2d0:	ed84 7a00 	vstr	s14, [r4]
 800d2d4:	e7bc      	b.n	800d250 <__ieee754_rem_pio2f+0x104>
 800d2d6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d2da:	d306      	bcc.n	800d2ea <__ieee754_rem_pio2f+0x19e>
 800d2dc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d2e0:	edc0 7a01 	vstr	s15, [r0, #4]
 800d2e4:	edc0 7a00 	vstr	s15, [r0]
 800d2e8:	e73e      	b.n	800d168 <__ieee754_rem_pio2f+0x1c>
 800d2ea:	15ea      	asrs	r2, r5, #23
 800d2ec:	3a86      	subs	r2, #134	@ 0x86
 800d2ee:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d2f2:	ee07 3a90 	vmov	s15, r3
 800d2f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d2fa:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d3a4 <__ieee754_rem_pio2f+0x258>
 800d2fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d302:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d306:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d30a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d30e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d312:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d316:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d31a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d31e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d322:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d32a:	edcd 7a05 	vstr	s15, [sp, #20]
 800d32e:	d11e      	bne.n	800d36e <__ieee754_rem_pio2f+0x222>
 800d330:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d338:	bf0c      	ite	eq
 800d33a:	2301      	moveq	r3, #1
 800d33c:	2302      	movne	r3, #2
 800d33e:	491a      	ldr	r1, [pc, #104]	@ (800d3a8 <__ieee754_rem_pio2f+0x25c>)
 800d340:	9101      	str	r1, [sp, #4]
 800d342:	2102      	movs	r1, #2
 800d344:	9100      	str	r1, [sp, #0]
 800d346:	a803      	add	r0, sp, #12
 800d348:	4621      	mov	r1, r4
 800d34a:	f000 f90b 	bl	800d564 <__kernel_rem_pio2f>
 800d34e:	2e00      	cmp	r6, #0
 800d350:	f6bf af2f 	bge.w	800d1b2 <__ieee754_rem_pio2f+0x66>
 800d354:	edd4 7a00 	vldr	s15, [r4]
 800d358:	eef1 7a67 	vneg.f32	s15, s15
 800d35c:	edc4 7a00 	vstr	s15, [r4]
 800d360:	edd4 7a01 	vldr	s15, [r4, #4]
 800d364:	eef1 7a67 	vneg.f32	s15, s15
 800d368:	edc4 7a01 	vstr	s15, [r4, #4]
 800d36c:	e782      	b.n	800d274 <__ieee754_rem_pio2f+0x128>
 800d36e:	2303      	movs	r3, #3
 800d370:	e7e5      	b.n	800d33e <__ieee754_rem_pio2f+0x1f2>
 800d372:	bf00      	nop
 800d374:	3f490fd8 	.word	0x3f490fd8
 800d378:	4016cbe3 	.word	0x4016cbe3
 800d37c:	3fc90f80 	.word	0x3fc90f80
 800d380:	3fc90fd0 	.word	0x3fc90fd0
 800d384:	37354400 	.word	0x37354400
 800d388:	37354443 	.word	0x37354443
 800d38c:	2e85a308 	.word	0x2e85a308
 800d390:	43490f80 	.word	0x43490f80
 800d394:	3f22f984 	.word	0x3f22f984
 800d398:	0800dfb8 	.word	0x0800dfb8
 800d39c:	2e85a300 	.word	0x2e85a300
 800d3a0:	248d3132 	.word	0x248d3132
 800d3a4:	43800000 	.word	0x43800000
 800d3a8:	0800e038 	.word	0x0800e038

0800d3ac <atanf>:
 800d3ac:	b538      	push	{r3, r4, r5, lr}
 800d3ae:	ee10 5a10 	vmov	r5, s0
 800d3b2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d3b6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d3ba:	eef0 7a40 	vmov.f32	s15, s0
 800d3be:	d310      	bcc.n	800d3e2 <atanf+0x36>
 800d3c0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d3c4:	d904      	bls.n	800d3d0 <atanf+0x24>
 800d3c6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d3ca:	eeb0 0a67 	vmov.f32	s0, s15
 800d3ce:	bd38      	pop	{r3, r4, r5, pc}
 800d3d0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d508 <atanf+0x15c>
 800d3d4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d50c <atanf+0x160>
 800d3d8:	2d00      	cmp	r5, #0
 800d3da:	bfc8      	it	gt
 800d3dc:	eef0 7a47 	vmovgt.f32	s15, s14
 800d3e0:	e7f3      	b.n	800d3ca <atanf+0x1e>
 800d3e2:	4b4b      	ldr	r3, [pc, #300]	@ (800d510 <atanf+0x164>)
 800d3e4:	429c      	cmp	r4, r3
 800d3e6:	d810      	bhi.n	800d40a <atanf+0x5e>
 800d3e8:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d3ec:	d20a      	bcs.n	800d404 <atanf+0x58>
 800d3ee:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d514 <atanf+0x168>
 800d3f2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d3f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d3fa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d402:	dce2      	bgt.n	800d3ca <atanf+0x1e>
 800d404:	f04f 33ff 	mov.w	r3, #4294967295
 800d408:	e013      	b.n	800d432 <atanf+0x86>
 800d40a:	f000 f8a3 	bl	800d554 <fabsf>
 800d40e:	4b42      	ldr	r3, [pc, #264]	@ (800d518 <atanf+0x16c>)
 800d410:	429c      	cmp	r4, r3
 800d412:	d84f      	bhi.n	800d4b4 <atanf+0x108>
 800d414:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d418:	429c      	cmp	r4, r3
 800d41a:	d841      	bhi.n	800d4a0 <atanf+0xf4>
 800d41c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d420:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d424:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d428:	2300      	movs	r3, #0
 800d42a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d42e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d432:	1c5a      	adds	r2, r3, #1
 800d434:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d438:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800d51c <atanf+0x170>
 800d43c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800d520 <atanf+0x174>
 800d440:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800d524 <atanf+0x178>
 800d444:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d448:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d44c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d528 <atanf+0x17c>
 800d450:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d454:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800d52c <atanf+0x180>
 800d458:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d45c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d530 <atanf+0x184>
 800d460:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d464:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d534 <atanf+0x188>
 800d468:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d46c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d538 <atanf+0x18c>
 800d470:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d474:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d53c <atanf+0x190>
 800d478:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d47c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800d540 <atanf+0x194>
 800d480:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d484:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800d544 <atanf+0x198>
 800d488:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d48c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d490:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d494:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d498:	d121      	bne.n	800d4de <atanf+0x132>
 800d49a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d49e:	e794      	b.n	800d3ca <atanf+0x1e>
 800d4a0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d4a4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d4a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d4b2:	e7be      	b.n	800d432 <atanf+0x86>
 800d4b4:	4b24      	ldr	r3, [pc, #144]	@ (800d548 <atanf+0x19c>)
 800d4b6:	429c      	cmp	r4, r3
 800d4b8:	d80b      	bhi.n	800d4d2 <atanf+0x126>
 800d4ba:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d4be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d4c2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d4c6:	2302      	movs	r3, #2
 800d4c8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d4cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4d0:	e7af      	b.n	800d432 <atanf+0x86>
 800d4d2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d4d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d4da:	2303      	movs	r3, #3
 800d4dc:	e7a9      	b.n	800d432 <atanf+0x86>
 800d4de:	4a1b      	ldr	r2, [pc, #108]	@ (800d54c <atanf+0x1a0>)
 800d4e0:	491b      	ldr	r1, [pc, #108]	@ (800d550 <atanf+0x1a4>)
 800d4e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d4e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d4ea:	edd3 6a00 	vldr	s13, [r3]
 800d4ee:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d4f2:	2d00      	cmp	r5, #0
 800d4f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d4f8:	edd2 7a00 	vldr	s15, [r2]
 800d4fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d500:	bfb8      	it	lt
 800d502:	eef1 7a67 	vneglt.f32	s15, s15
 800d506:	e760      	b.n	800d3ca <atanf+0x1e>
 800d508:	bfc90fdb 	.word	0xbfc90fdb
 800d50c:	3fc90fdb 	.word	0x3fc90fdb
 800d510:	3edfffff 	.word	0x3edfffff
 800d514:	7149f2ca 	.word	0x7149f2ca
 800d518:	3f97ffff 	.word	0x3f97ffff
 800d51c:	3c8569d7 	.word	0x3c8569d7
 800d520:	3d4bda59 	.word	0x3d4bda59
 800d524:	bd6ef16b 	.word	0xbd6ef16b
 800d528:	3d886b35 	.word	0x3d886b35
 800d52c:	3dba2e6e 	.word	0x3dba2e6e
 800d530:	3e124925 	.word	0x3e124925
 800d534:	3eaaaaab 	.word	0x3eaaaaab
 800d538:	bd15a221 	.word	0xbd15a221
 800d53c:	bd9d8795 	.word	0xbd9d8795
 800d540:	bde38e38 	.word	0xbde38e38
 800d544:	be4ccccd 	.word	0xbe4ccccd
 800d548:	401bffff 	.word	0x401bffff
 800d54c:	0800e360 	.word	0x0800e360
 800d550:	0800e350 	.word	0x0800e350

0800d554 <fabsf>:
 800d554:	ee10 3a10 	vmov	r3, s0
 800d558:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d55c:	ee00 3a10 	vmov	s0, r3
 800d560:	4770      	bx	lr
	...

0800d564 <__kernel_rem_pio2f>:
 800d564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d568:	ed2d 8b04 	vpush	{d8-d9}
 800d56c:	b0d9      	sub	sp, #356	@ 0x164
 800d56e:	4690      	mov	r8, r2
 800d570:	9001      	str	r0, [sp, #4]
 800d572:	4ab9      	ldr	r2, [pc, #740]	@ (800d858 <__kernel_rem_pio2f+0x2f4>)
 800d574:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d576:	f118 0f04 	cmn.w	r8, #4
 800d57a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d57e:	460f      	mov	r7, r1
 800d580:	f103 3bff 	add.w	fp, r3, #4294967295
 800d584:	db27      	blt.n	800d5d6 <__kernel_rem_pio2f+0x72>
 800d586:	f1b8 0203 	subs.w	r2, r8, #3
 800d58a:	bf48      	it	mi
 800d58c:	f108 0204 	addmi.w	r2, r8, #4
 800d590:	10d2      	asrs	r2, r2, #3
 800d592:	1c55      	adds	r5, r2, #1
 800d594:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d596:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800d868 <__kernel_rem_pio2f+0x304>
 800d59a:	00e8      	lsls	r0, r5, #3
 800d59c:	eba2 060b 	sub.w	r6, r2, fp
 800d5a0:	9002      	str	r0, [sp, #8]
 800d5a2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d5a6:	eb0a 0c0b 	add.w	ip, sl, fp
 800d5aa:	ac1c      	add	r4, sp, #112	@ 0x70
 800d5ac:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d5b0:	2000      	movs	r0, #0
 800d5b2:	4560      	cmp	r0, ip
 800d5b4:	dd11      	ble.n	800d5da <__kernel_rem_pio2f+0x76>
 800d5b6:	a91c      	add	r1, sp, #112	@ 0x70
 800d5b8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d5bc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d5c0:	f04f 0c00 	mov.w	ip, #0
 800d5c4:	45d4      	cmp	ip, sl
 800d5c6:	dc27      	bgt.n	800d618 <__kernel_rem_pio2f+0xb4>
 800d5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d5cc:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800d868 <__kernel_rem_pio2f+0x304>
 800d5d0:	4606      	mov	r6, r0
 800d5d2:	2400      	movs	r4, #0
 800d5d4:	e016      	b.n	800d604 <__kernel_rem_pio2f+0xa0>
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	e7db      	b.n	800d592 <__kernel_rem_pio2f+0x2e>
 800d5da:	42c6      	cmn	r6, r0
 800d5dc:	bf5d      	ittte	pl
 800d5de:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d5e2:	ee07 1a90 	vmovpl	s15, r1
 800d5e6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d5ea:	eef0 7a47 	vmovmi.f32	s15, s14
 800d5ee:	ece4 7a01 	vstmia	r4!, {s15}
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	e7dd      	b.n	800d5b2 <__kernel_rem_pio2f+0x4e>
 800d5f6:	ecfe 6a01 	vldmia	lr!, {s13}
 800d5fa:	ed96 7a00 	vldr	s14, [r6]
 800d5fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d602:	3401      	adds	r4, #1
 800d604:	455c      	cmp	r4, fp
 800d606:	f1a6 0604 	sub.w	r6, r6, #4
 800d60a:	ddf4      	ble.n	800d5f6 <__kernel_rem_pio2f+0x92>
 800d60c:	ece9 7a01 	vstmia	r9!, {s15}
 800d610:	f10c 0c01 	add.w	ip, ip, #1
 800d614:	3004      	adds	r0, #4
 800d616:	e7d5      	b.n	800d5c4 <__kernel_rem_pio2f+0x60>
 800d618:	a908      	add	r1, sp, #32
 800d61a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d61e:	9104      	str	r1, [sp, #16]
 800d620:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d622:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800d864 <__kernel_rem_pio2f+0x300>
 800d626:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800d860 <__kernel_rem_pio2f+0x2fc>
 800d62a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d62e:	9203      	str	r2, [sp, #12]
 800d630:	4654      	mov	r4, sl
 800d632:	00a2      	lsls	r2, r4, #2
 800d634:	9205      	str	r2, [sp, #20]
 800d636:	aa58      	add	r2, sp, #352	@ 0x160
 800d638:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d63c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d640:	a944      	add	r1, sp, #272	@ 0x110
 800d642:	aa08      	add	r2, sp, #32
 800d644:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d648:	4694      	mov	ip, r2
 800d64a:	4626      	mov	r6, r4
 800d64c:	2e00      	cmp	r6, #0
 800d64e:	f1a0 0004 	sub.w	r0, r0, #4
 800d652:	dc4c      	bgt.n	800d6ee <__kernel_rem_pio2f+0x18a>
 800d654:	4628      	mov	r0, r5
 800d656:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d65a:	f000 f9f5 	bl	800da48 <scalbnf>
 800d65e:	eeb0 8a40 	vmov.f32	s16, s0
 800d662:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d666:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d66a:	f000 fa53 	bl	800db14 <floorf>
 800d66e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d672:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d676:	2d00      	cmp	r5, #0
 800d678:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d67c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d680:	ee17 9a90 	vmov	r9, s15
 800d684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d688:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d68c:	dd41      	ble.n	800d712 <__kernel_rem_pio2f+0x1ae>
 800d68e:	f104 3cff 	add.w	ip, r4, #4294967295
 800d692:	a908      	add	r1, sp, #32
 800d694:	f1c5 0e08 	rsb	lr, r5, #8
 800d698:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d69c:	fa46 f00e 	asr.w	r0, r6, lr
 800d6a0:	4481      	add	r9, r0
 800d6a2:	fa00 f00e 	lsl.w	r0, r0, lr
 800d6a6:	1a36      	subs	r6, r6, r0
 800d6a8:	f1c5 0007 	rsb	r0, r5, #7
 800d6ac:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d6b0:	4106      	asrs	r6, r0
 800d6b2:	2e00      	cmp	r6, #0
 800d6b4:	dd3c      	ble.n	800d730 <__kernel_rem_pio2f+0x1cc>
 800d6b6:	f04f 0e00 	mov.w	lr, #0
 800d6ba:	f109 0901 	add.w	r9, r9, #1
 800d6be:	4670      	mov	r0, lr
 800d6c0:	4574      	cmp	r4, lr
 800d6c2:	dc68      	bgt.n	800d796 <__kernel_rem_pio2f+0x232>
 800d6c4:	2d00      	cmp	r5, #0
 800d6c6:	dd03      	ble.n	800d6d0 <__kernel_rem_pio2f+0x16c>
 800d6c8:	2d01      	cmp	r5, #1
 800d6ca:	d074      	beq.n	800d7b6 <__kernel_rem_pio2f+0x252>
 800d6cc:	2d02      	cmp	r5, #2
 800d6ce:	d07d      	beq.n	800d7cc <__kernel_rem_pio2f+0x268>
 800d6d0:	2e02      	cmp	r6, #2
 800d6d2:	d12d      	bne.n	800d730 <__kernel_rem_pio2f+0x1cc>
 800d6d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d6d8:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d6dc:	b340      	cbz	r0, 800d730 <__kernel_rem_pio2f+0x1cc>
 800d6de:	4628      	mov	r0, r5
 800d6e0:	9306      	str	r3, [sp, #24]
 800d6e2:	f000 f9b1 	bl	800da48 <scalbnf>
 800d6e6:	9b06      	ldr	r3, [sp, #24]
 800d6e8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d6ec:	e020      	b.n	800d730 <__kernel_rem_pio2f+0x1cc>
 800d6ee:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d6f2:	3e01      	subs	r6, #1
 800d6f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6fc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d700:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d704:	ecac 0a01 	vstmia	ip!, {s0}
 800d708:	ed90 0a00 	vldr	s0, [r0]
 800d70c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d710:	e79c      	b.n	800d64c <__kernel_rem_pio2f+0xe8>
 800d712:	d105      	bne.n	800d720 <__kernel_rem_pio2f+0x1bc>
 800d714:	1e60      	subs	r0, r4, #1
 800d716:	a908      	add	r1, sp, #32
 800d718:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d71c:	11f6      	asrs	r6, r6, #7
 800d71e:	e7c8      	b.n	800d6b2 <__kernel_rem_pio2f+0x14e>
 800d720:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d724:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d72c:	da31      	bge.n	800d792 <__kernel_rem_pio2f+0x22e>
 800d72e:	2600      	movs	r6, #0
 800d730:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d738:	f040 8098 	bne.w	800d86c <__kernel_rem_pio2f+0x308>
 800d73c:	1e60      	subs	r0, r4, #1
 800d73e:	2200      	movs	r2, #0
 800d740:	4550      	cmp	r0, sl
 800d742:	da4b      	bge.n	800d7dc <__kernel_rem_pio2f+0x278>
 800d744:	2a00      	cmp	r2, #0
 800d746:	d065      	beq.n	800d814 <__kernel_rem_pio2f+0x2b0>
 800d748:	3c01      	subs	r4, #1
 800d74a:	ab08      	add	r3, sp, #32
 800d74c:	3d08      	subs	r5, #8
 800d74e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d0f8      	beq.n	800d748 <__kernel_rem_pio2f+0x1e4>
 800d756:	4628      	mov	r0, r5
 800d758:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d75c:	f000 f974 	bl	800da48 <scalbnf>
 800d760:	1c63      	adds	r3, r4, #1
 800d762:	aa44      	add	r2, sp, #272	@ 0x110
 800d764:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d864 <__kernel_rem_pio2f+0x300>
 800d768:	0099      	lsls	r1, r3, #2
 800d76a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d76e:	4623      	mov	r3, r4
 800d770:	2b00      	cmp	r3, #0
 800d772:	f280 80a9 	bge.w	800d8c8 <__kernel_rem_pio2f+0x364>
 800d776:	4623      	mov	r3, r4
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f2c0 80c7 	blt.w	800d90c <__kernel_rem_pio2f+0x3a8>
 800d77e:	aa44      	add	r2, sp, #272	@ 0x110
 800d780:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d784:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d85c <__kernel_rem_pio2f+0x2f8>
 800d788:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d868 <__kernel_rem_pio2f+0x304>
 800d78c:	2000      	movs	r0, #0
 800d78e:	1ae2      	subs	r2, r4, r3
 800d790:	e0b1      	b.n	800d8f6 <__kernel_rem_pio2f+0x392>
 800d792:	2602      	movs	r6, #2
 800d794:	e78f      	b.n	800d6b6 <__kernel_rem_pio2f+0x152>
 800d796:	f852 1b04 	ldr.w	r1, [r2], #4
 800d79a:	b948      	cbnz	r0, 800d7b0 <__kernel_rem_pio2f+0x24c>
 800d79c:	b121      	cbz	r1, 800d7a8 <__kernel_rem_pio2f+0x244>
 800d79e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d7a2:	f842 1c04 	str.w	r1, [r2, #-4]
 800d7a6:	2101      	movs	r1, #1
 800d7a8:	f10e 0e01 	add.w	lr, lr, #1
 800d7ac:	4608      	mov	r0, r1
 800d7ae:	e787      	b.n	800d6c0 <__kernel_rem_pio2f+0x15c>
 800d7b0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d7b4:	e7f5      	b.n	800d7a2 <__kernel_rem_pio2f+0x23e>
 800d7b6:	f104 3cff 	add.w	ip, r4, #4294967295
 800d7ba:	aa08      	add	r2, sp, #32
 800d7bc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d7c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d7c4:	a908      	add	r1, sp, #32
 800d7c6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d7ca:	e781      	b.n	800d6d0 <__kernel_rem_pio2f+0x16c>
 800d7cc:	f104 3cff 	add.w	ip, r4, #4294967295
 800d7d0:	aa08      	add	r2, sp, #32
 800d7d2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d7d6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d7da:	e7f3      	b.n	800d7c4 <__kernel_rem_pio2f+0x260>
 800d7dc:	a908      	add	r1, sp, #32
 800d7de:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d7e2:	3801      	subs	r0, #1
 800d7e4:	430a      	orrs	r2, r1
 800d7e6:	e7ab      	b.n	800d740 <__kernel_rem_pio2f+0x1dc>
 800d7e8:	3201      	adds	r2, #1
 800d7ea:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d7ee:	2e00      	cmp	r6, #0
 800d7f0:	d0fa      	beq.n	800d7e8 <__kernel_rem_pio2f+0x284>
 800d7f2:	9905      	ldr	r1, [sp, #20]
 800d7f4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d7f8:	eb0d 0001 	add.w	r0, sp, r1
 800d7fc:	18e6      	adds	r6, r4, r3
 800d7fe:	a91c      	add	r1, sp, #112	@ 0x70
 800d800:	f104 0c01 	add.w	ip, r4, #1
 800d804:	384c      	subs	r0, #76	@ 0x4c
 800d806:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d80a:	4422      	add	r2, r4
 800d80c:	4562      	cmp	r2, ip
 800d80e:	da04      	bge.n	800d81a <__kernel_rem_pio2f+0x2b6>
 800d810:	4614      	mov	r4, r2
 800d812:	e70e      	b.n	800d632 <__kernel_rem_pio2f+0xce>
 800d814:	9804      	ldr	r0, [sp, #16]
 800d816:	2201      	movs	r2, #1
 800d818:	e7e7      	b.n	800d7ea <__kernel_rem_pio2f+0x286>
 800d81a:	9903      	ldr	r1, [sp, #12]
 800d81c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d820:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d824:	9105      	str	r1, [sp, #20]
 800d826:	ee07 1a90 	vmov	s15, r1
 800d82a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d82e:	2400      	movs	r4, #0
 800d830:	ece6 7a01 	vstmia	r6!, {s15}
 800d834:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d868 <__kernel_rem_pio2f+0x304>
 800d838:	46b1      	mov	r9, r6
 800d83a:	455c      	cmp	r4, fp
 800d83c:	dd04      	ble.n	800d848 <__kernel_rem_pio2f+0x2e4>
 800d83e:	ece0 7a01 	vstmia	r0!, {s15}
 800d842:	f10c 0c01 	add.w	ip, ip, #1
 800d846:	e7e1      	b.n	800d80c <__kernel_rem_pio2f+0x2a8>
 800d848:	ecfe 6a01 	vldmia	lr!, {s13}
 800d84c:	ed39 7a01 	vldmdb	r9!, {s14}
 800d850:	3401      	adds	r4, #1
 800d852:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d856:	e7f0      	b.n	800d83a <__kernel_rem_pio2f+0x2d6>
 800d858:	0800e39c 	.word	0x0800e39c
 800d85c:	0800e370 	.word	0x0800e370
 800d860:	43800000 	.word	0x43800000
 800d864:	3b800000 	.word	0x3b800000
 800d868:	00000000 	.word	0x00000000
 800d86c:	9b02      	ldr	r3, [sp, #8]
 800d86e:	eeb0 0a48 	vmov.f32	s0, s16
 800d872:	eba3 0008 	sub.w	r0, r3, r8
 800d876:	f000 f8e7 	bl	800da48 <scalbnf>
 800d87a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d860 <__kernel_rem_pio2f+0x2fc>
 800d87e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d886:	db19      	blt.n	800d8bc <__kernel_rem_pio2f+0x358>
 800d888:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d864 <__kernel_rem_pio2f+0x300>
 800d88c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d890:	aa08      	add	r2, sp, #32
 800d892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d896:	3508      	adds	r5, #8
 800d898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d89c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d8a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d8a8:	ee10 3a10 	vmov	r3, s0
 800d8ac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d8b0:	ee17 3a90 	vmov	r3, s15
 800d8b4:	3401      	adds	r4, #1
 800d8b6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d8ba:	e74c      	b.n	800d756 <__kernel_rem_pio2f+0x1f2>
 800d8bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d8c0:	aa08      	add	r2, sp, #32
 800d8c2:	ee10 3a10 	vmov	r3, s0
 800d8c6:	e7f6      	b.n	800d8b6 <__kernel_rem_pio2f+0x352>
 800d8c8:	a808      	add	r0, sp, #32
 800d8ca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d8ce:	9001      	str	r0, [sp, #4]
 800d8d0:	ee07 0a90 	vmov	s15, r0
 800d8d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d8de:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d8e2:	ed62 7a01 	vstmdb	r2!, {s15}
 800d8e6:	e743      	b.n	800d770 <__kernel_rem_pio2f+0x20c>
 800d8e8:	ecfc 6a01 	vldmia	ip!, {s13}
 800d8ec:	ecb5 7a01 	vldmia	r5!, {s14}
 800d8f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d8f4:	3001      	adds	r0, #1
 800d8f6:	4550      	cmp	r0, sl
 800d8f8:	dc01      	bgt.n	800d8fe <__kernel_rem_pio2f+0x39a>
 800d8fa:	4282      	cmp	r2, r0
 800d8fc:	daf4      	bge.n	800d8e8 <__kernel_rem_pio2f+0x384>
 800d8fe:	a858      	add	r0, sp, #352	@ 0x160
 800d900:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d904:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d908:	3b01      	subs	r3, #1
 800d90a:	e735      	b.n	800d778 <__kernel_rem_pio2f+0x214>
 800d90c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d90e:	2b02      	cmp	r3, #2
 800d910:	dc09      	bgt.n	800d926 <__kernel_rem_pio2f+0x3c2>
 800d912:	2b00      	cmp	r3, #0
 800d914:	dc2b      	bgt.n	800d96e <__kernel_rem_pio2f+0x40a>
 800d916:	d044      	beq.n	800d9a2 <__kernel_rem_pio2f+0x43e>
 800d918:	f009 0007 	and.w	r0, r9, #7
 800d91c:	b059      	add	sp, #356	@ 0x164
 800d91e:	ecbd 8b04 	vpop	{d8-d9}
 800d922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d926:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d928:	2b03      	cmp	r3, #3
 800d92a:	d1f5      	bne.n	800d918 <__kernel_rem_pio2f+0x3b4>
 800d92c:	aa30      	add	r2, sp, #192	@ 0xc0
 800d92e:	1f0b      	subs	r3, r1, #4
 800d930:	4413      	add	r3, r2
 800d932:	461a      	mov	r2, r3
 800d934:	4620      	mov	r0, r4
 800d936:	2800      	cmp	r0, #0
 800d938:	f1a2 0204 	sub.w	r2, r2, #4
 800d93c:	dc52      	bgt.n	800d9e4 <__kernel_rem_pio2f+0x480>
 800d93e:	4622      	mov	r2, r4
 800d940:	2a01      	cmp	r2, #1
 800d942:	f1a3 0304 	sub.w	r3, r3, #4
 800d946:	dc5d      	bgt.n	800da04 <__kernel_rem_pio2f+0x4a0>
 800d948:	ab30      	add	r3, sp, #192	@ 0xc0
 800d94a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800d868 <__kernel_rem_pio2f+0x304>
 800d94e:	440b      	add	r3, r1
 800d950:	2c01      	cmp	r4, #1
 800d952:	dc67      	bgt.n	800da24 <__kernel_rem_pio2f+0x4c0>
 800d954:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d958:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d95c:	2e00      	cmp	r6, #0
 800d95e:	d167      	bne.n	800da30 <__kernel_rem_pio2f+0x4cc>
 800d960:	edc7 6a00 	vstr	s13, [r7]
 800d964:	ed87 7a01 	vstr	s14, [r7, #4]
 800d968:	edc7 7a02 	vstr	s15, [r7, #8]
 800d96c:	e7d4      	b.n	800d918 <__kernel_rem_pio2f+0x3b4>
 800d96e:	ab30      	add	r3, sp, #192	@ 0xc0
 800d970:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800d868 <__kernel_rem_pio2f+0x304>
 800d974:	440b      	add	r3, r1
 800d976:	4622      	mov	r2, r4
 800d978:	2a00      	cmp	r2, #0
 800d97a:	da24      	bge.n	800d9c6 <__kernel_rem_pio2f+0x462>
 800d97c:	b34e      	cbz	r6, 800d9d2 <__kernel_rem_pio2f+0x46e>
 800d97e:	eef1 7a47 	vneg.f32	s15, s14
 800d982:	edc7 7a00 	vstr	s15, [r7]
 800d986:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d98a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d98e:	aa31      	add	r2, sp, #196	@ 0xc4
 800d990:	2301      	movs	r3, #1
 800d992:	429c      	cmp	r4, r3
 800d994:	da20      	bge.n	800d9d8 <__kernel_rem_pio2f+0x474>
 800d996:	b10e      	cbz	r6, 800d99c <__kernel_rem_pio2f+0x438>
 800d998:	eef1 7a67 	vneg.f32	s15, s15
 800d99c:	edc7 7a01 	vstr	s15, [r7, #4]
 800d9a0:	e7ba      	b.n	800d918 <__kernel_rem_pio2f+0x3b4>
 800d9a2:	ab30      	add	r3, sp, #192	@ 0xc0
 800d9a4:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800d868 <__kernel_rem_pio2f+0x304>
 800d9a8:	440b      	add	r3, r1
 800d9aa:	2c00      	cmp	r4, #0
 800d9ac:	da05      	bge.n	800d9ba <__kernel_rem_pio2f+0x456>
 800d9ae:	b10e      	cbz	r6, 800d9b4 <__kernel_rem_pio2f+0x450>
 800d9b0:	eef1 7a67 	vneg.f32	s15, s15
 800d9b4:	edc7 7a00 	vstr	s15, [r7]
 800d9b8:	e7ae      	b.n	800d918 <__kernel_rem_pio2f+0x3b4>
 800d9ba:	ed33 7a01 	vldmdb	r3!, {s14}
 800d9be:	3c01      	subs	r4, #1
 800d9c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9c4:	e7f1      	b.n	800d9aa <__kernel_rem_pio2f+0x446>
 800d9c6:	ed73 7a01 	vldmdb	r3!, {s15}
 800d9ca:	3a01      	subs	r2, #1
 800d9cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d9d0:	e7d2      	b.n	800d978 <__kernel_rem_pio2f+0x414>
 800d9d2:	eef0 7a47 	vmov.f32	s15, s14
 800d9d6:	e7d4      	b.n	800d982 <__kernel_rem_pio2f+0x41e>
 800d9d8:	ecb2 7a01 	vldmia	r2!, {s14}
 800d9dc:	3301      	adds	r3, #1
 800d9de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9e2:	e7d6      	b.n	800d992 <__kernel_rem_pio2f+0x42e>
 800d9e4:	edd2 7a00 	vldr	s15, [r2]
 800d9e8:	edd2 6a01 	vldr	s13, [r2, #4]
 800d9ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d9f0:	3801      	subs	r0, #1
 800d9f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9f6:	ed82 7a00 	vstr	s14, [r2]
 800d9fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9fe:	edc2 7a01 	vstr	s15, [r2, #4]
 800da02:	e798      	b.n	800d936 <__kernel_rem_pio2f+0x3d2>
 800da04:	edd3 7a00 	vldr	s15, [r3]
 800da08:	edd3 6a01 	vldr	s13, [r3, #4]
 800da0c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800da10:	3a01      	subs	r2, #1
 800da12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da16:	ed83 7a00 	vstr	s14, [r3]
 800da1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da1e:	edc3 7a01 	vstr	s15, [r3, #4]
 800da22:	e78d      	b.n	800d940 <__kernel_rem_pio2f+0x3dc>
 800da24:	ed33 7a01 	vldmdb	r3!, {s14}
 800da28:	3c01      	subs	r4, #1
 800da2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da2e:	e78f      	b.n	800d950 <__kernel_rem_pio2f+0x3ec>
 800da30:	eef1 6a66 	vneg.f32	s13, s13
 800da34:	eeb1 7a47 	vneg.f32	s14, s14
 800da38:	edc7 6a00 	vstr	s13, [r7]
 800da3c:	ed87 7a01 	vstr	s14, [r7, #4]
 800da40:	eef1 7a67 	vneg.f32	s15, s15
 800da44:	e790      	b.n	800d968 <__kernel_rem_pio2f+0x404>
 800da46:	bf00      	nop

0800da48 <scalbnf>:
 800da48:	ee10 3a10 	vmov	r3, s0
 800da4c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800da50:	d02b      	beq.n	800daaa <scalbnf+0x62>
 800da52:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800da56:	d302      	bcc.n	800da5e <scalbnf+0x16>
 800da58:	ee30 0a00 	vadd.f32	s0, s0, s0
 800da5c:	4770      	bx	lr
 800da5e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800da62:	d123      	bne.n	800daac <scalbnf+0x64>
 800da64:	4b24      	ldr	r3, [pc, #144]	@ (800daf8 <scalbnf+0xb0>)
 800da66:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800dafc <scalbnf+0xb4>
 800da6a:	4298      	cmp	r0, r3
 800da6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800da70:	db17      	blt.n	800daa2 <scalbnf+0x5a>
 800da72:	ee10 3a10 	vmov	r3, s0
 800da76:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800da7a:	3a19      	subs	r2, #25
 800da7c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800da80:	4288      	cmp	r0, r1
 800da82:	dd15      	ble.n	800dab0 <scalbnf+0x68>
 800da84:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800db00 <scalbnf+0xb8>
 800da88:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800db04 <scalbnf+0xbc>
 800da8c:	ee10 3a10 	vmov	r3, s0
 800da90:	eeb0 7a67 	vmov.f32	s14, s15
 800da94:	2b00      	cmp	r3, #0
 800da96:	bfb8      	it	lt
 800da98:	eef0 7a66 	vmovlt.f32	s15, s13
 800da9c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800daa0:	4770      	bx	lr
 800daa2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800db08 <scalbnf+0xc0>
 800daa6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800daaa:	4770      	bx	lr
 800daac:	0dd2      	lsrs	r2, r2, #23
 800daae:	e7e5      	b.n	800da7c <scalbnf+0x34>
 800dab0:	4410      	add	r0, r2
 800dab2:	28fe      	cmp	r0, #254	@ 0xfe
 800dab4:	dce6      	bgt.n	800da84 <scalbnf+0x3c>
 800dab6:	2800      	cmp	r0, #0
 800dab8:	dd06      	ble.n	800dac8 <scalbnf+0x80>
 800daba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dabe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800dac2:	ee00 3a10 	vmov	s0, r3
 800dac6:	4770      	bx	lr
 800dac8:	f110 0f16 	cmn.w	r0, #22
 800dacc:	da09      	bge.n	800dae2 <scalbnf+0x9a>
 800dace:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800db08 <scalbnf+0xc0>
 800dad2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800db0c <scalbnf+0xc4>
 800dad6:	ee10 3a10 	vmov	r3, s0
 800dada:	eeb0 7a67 	vmov.f32	s14, s15
 800dade:	2b00      	cmp	r3, #0
 800dae0:	e7d9      	b.n	800da96 <scalbnf+0x4e>
 800dae2:	3019      	adds	r0, #25
 800dae4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dae8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800daec:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800db10 <scalbnf+0xc8>
 800daf0:	ee07 3a90 	vmov	s15, r3
 800daf4:	e7d7      	b.n	800daa6 <scalbnf+0x5e>
 800daf6:	bf00      	nop
 800daf8:	ffff3cb0 	.word	0xffff3cb0
 800dafc:	4c000000 	.word	0x4c000000
 800db00:	7149f2ca 	.word	0x7149f2ca
 800db04:	f149f2ca 	.word	0xf149f2ca
 800db08:	0da24260 	.word	0x0da24260
 800db0c:	8da24260 	.word	0x8da24260
 800db10:	33000000 	.word	0x33000000

0800db14 <floorf>:
 800db14:	ee10 3a10 	vmov	r3, s0
 800db18:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800db1c:	3a7f      	subs	r2, #127	@ 0x7f
 800db1e:	2a16      	cmp	r2, #22
 800db20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800db24:	dc2b      	bgt.n	800db7e <floorf+0x6a>
 800db26:	2a00      	cmp	r2, #0
 800db28:	da12      	bge.n	800db50 <floorf+0x3c>
 800db2a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800db90 <floorf+0x7c>
 800db2e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800db32:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800db36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db3a:	dd06      	ble.n	800db4a <floorf+0x36>
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	da24      	bge.n	800db8a <floorf+0x76>
 800db40:	2900      	cmp	r1, #0
 800db42:	4b14      	ldr	r3, [pc, #80]	@ (800db94 <floorf+0x80>)
 800db44:	bf08      	it	eq
 800db46:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800db4a:	ee00 3a10 	vmov	s0, r3
 800db4e:	4770      	bx	lr
 800db50:	4911      	ldr	r1, [pc, #68]	@ (800db98 <floorf+0x84>)
 800db52:	4111      	asrs	r1, r2
 800db54:	420b      	tst	r3, r1
 800db56:	d0fa      	beq.n	800db4e <floorf+0x3a>
 800db58:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800db90 <floorf+0x7c>
 800db5c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800db60:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800db64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db68:	ddef      	ble.n	800db4a <floorf+0x36>
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	bfbe      	ittt	lt
 800db6e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800db72:	fa40 f202 	asrlt.w	r2, r0, r2
 800db76:	189b      	addlt	r3, r3, r2
 800db78:	ea23 0301 	bic.w	r3, r3, r1
 800db7c:	e7e5      	b.n	800db4a <floorf+0x36>
 800db7e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800db82:	d3e4      	bcc.n	800db4e <floorf+0x3a>
 800db84:	ee30 0a00 	vadd.f32	s0, s0, s0
 800db88:	4770      	bx	lr
 800db8a:	2300      	movs	r3, #0
 800db8c:	e7dd      	b.n	800db4a <floorf+0x36>
 800db8e:	bf00      	nop
 800db90:	7149f2ca 	.word	0x7149f2ca
 800db94:	bf800000 	.word	0xbf800000
 800db98:	007fffff 	.word	0x007fffff

0800db9c <_init>:
 800db9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db9e:	bf00      	nop
 800dba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dba2:	bc08      	pop	{r3}
 800dba4:	469e      	mov	lr, r3
 800dba6:	4770      	bx	lr

0800dba8 <_fini>:
 800dba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbaa:	bf00      	nop
 800dbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbae:	bc08      	pop	{r3}
 800dbb0:	469e      	mov	lr, r3
 800dbb2:	4770      	bx	lr
