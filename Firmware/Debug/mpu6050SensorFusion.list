
mpu6050SensorFusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d984  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f0  0800db18  0800db18  0000eb18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e308  0800e308  000102d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e308  0800e308  0000f308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e310  0800e310  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e310  0800e310  0000f310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e314  0800e314  0000f314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  0800e318  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102d8  2**0
                  CONTENTS
 10 .bss          00001ecc  200002d8  200002d8  000102d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200021a4  200021a4  000102d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012585  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034f3  00000000  00000000  0002288d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00025d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bfd  00000000  00000000  00026d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225ff  00000000  00000000  00027965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015eb5  00000000  00000000  00049f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be96c  00000000  00000000  0005fe19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e785  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005560  00000000  00000000  0011e7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00123d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dafc 	.word	0x0800dafc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800dafc 	.word	0x0800dafc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	ed2d 8b02 	vpush	{d8}
 8000f3e:	b08e      	sub	sp, #56	@ 0x38
 8000f40:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f000 fd97 	bl	8001a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f90b 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f000 f9c1 	bl	80012d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4e:	f000 f99f 	bl	8001290 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f52:	f000 f96f 	bl	8001234 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000f56:	f008 f957 	bl	8009208 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  mpu6050Config();
 8000f5a:	f000 fa9f 	bl	800149c <mpu6050Config>
  mpu6050Read_DMA();
 8000f5e:	f000 fab7 	bl	80014d0 <mpu6050Read_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t timerUSB = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24

  float phiHat_deg = 0.0f;
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  float thetaHat_deg = 0.0f;
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]

  float phiHat_rad = 0.0f;
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
  float thetaHat_rad = 0.0f;
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]


  while (1)
  {
	  /* Log data via USB */
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 8000f7e:	f000 fddf 	bl	8001b40 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b13      	cmp	r3, #19
 8000f8a:	d9f8      	bls.n	8000f7e <main+0x46>
		   *
		   * Both angles are then converted from radians to degrees.
		   */

	      // Compute roll using atan2 for proper quadrant handling
	      float roll = atan2f(Ay, Az);
 8000f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001138 <main+0x200>)
 8000f8e:	edd3 7a00 	vldr	s15, [r3]
 8000f92:	4b6a      	ldr	r3, [pc, #424]	@ (800113c <main+0x204>)
 8000f94:	ed93 7a00 	vldr	s14, [r3]
 8000f98:	eef0 0a47 	vmov.f32	s1, s14
 8000f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa0:	f00b fcd2 	bl	800c948 <atan2f>
 8000fa4:	ed87 0a04 	vstr	s0, [r7, #16]
	      // Compute pitch using both Ax and the combination of Ay and Az
	      float pitch = atan2f(-Ax, sqrt(Ay * Ay + Az * Az));
 8000fa8:	4b65      	ldr	r3, [pc, #404]	@ (8001140 <main+0x208>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	eeb1 8a67 	vneg.f32	s16, s15
 8000fb2:	4b61      	ldr	r3, [pc, #388]	@ (8001138 <main+0x200>)
 8000fb4:	ed93 7a00 	vldr	s14, [r3]
 8000fb8:	4b5f      	ldr	r3, [pc, #380]	@ (8001138 <main+0x200>)
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc2:	4b5e      	ldr	r3, [pc, #376]	@ (800113c <main+0x204>)
 8000fc4:	edd3 6a00 	vldr	s13, [r3]
 8000fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800113c <main+0x204>)
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd6:	ee17 0a90 	vmov	r0, s15
 8000fda:	f7ff fab5 	bl	8000548 <__aeabi_f2d>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	ec43 2b10 	vmov	d0, r2, r3
 8000fe6:	f00b fc83 	bl	800c8f0 <sqrt>
 8000fea:	ec53 2b10 	vmov	r2, r3, d0
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f7ff fdd9 	bl	8000ba8 <__aeabi_d2f>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	ee00 3a90 	vmov	s1, r3
 8000ffc:	eeb0 0a48 	vmov.f32	s0, s16
 8001000:	f00b fca2 	bl	800c948 <atan2f>
 8001004:	ed87 0a03 	vstr	s0, [r7, #12]

	      phiHat_deg = roll * RAD_TO_DEG;
 8001008:	edd7 7a04 	vldr	s15, [r7, #16]
 800100c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001144 <main+0x20c>
 8001010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001014:	edc7 7a06 	vstr	s15, [r7, #24]
	      thetaHat_deg = pitch * RAD_TO_DEG;
 8001018:	edd7 7a03 	vldr	s15, [r7, #12]
 800101c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001144 <main+0x20c>
 8001020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001024:	edc7 7a05 	vstr	s15, [r7, #20]


	      float phiDot_rps = Gx + tanf(thetaHat_rad) * (sinf(phiHat_rad) * Gy + cosf(phiHat_rad) * Gz);
 8001028:	ed97 0a07 	vldr	s0, [r7, #28]
 800102c:	f00b fd18 	bl	800ca60 <tanf>
 8001030:	eef0 8a40 	vmov.f32	s17, s0
 8001034:	ed97 0a08 	vldr	s0, [r7, #32]
 8001038:	f00b fccc 	bl	800c9d4 <sinf>
 800103c:	eeb0 7a40 	vmov.f32	s14, s0
 8001040:	4b41      	ldr	r3, [pc, #260]	@ (8001148 <main+0x210>)
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	ee27 8a27 	vmul.f32	s16, s14, s15
 800104a:	ed97 0a08 	vldr	s0, [r7, #32]
 800104e:	f00b fc7d 	bl	800c94c <cosf>
 8001052:	eeb0 7a40 	vmov.f32	s14, s0
 8001056:	4b3d      	ldr	r3, [pc, #244]	@ (800114c <main+0x214>)
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001060:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001064:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8001068:	4b39      	ldr	r3, [pc, #228]	@ (8001150 <main+0x218>)
 800106a:	edd3 7a00 	vldr	s15, [r3]
 800106e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001072:	edc7 7a02 	vstr	s15, [r7, #8]
	      float thetaDot_rps = 							cosf(phiHat_rad) * Gy - sinf(phiHat_rad) * Gz;
 8001076:	ed97 0a08 	vldr	s0, [r7, #32]
 800107a:	f00b fc67 	bl	800c94c <cosf>
 800107e:	eeb0 7a40 	vmov.f32	s14, s0
 8001082:	4b31      	ldr	r3, [pc, #196]	@ (8001148 <main+0x210>)
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ee27 8a27 	vmul.f32	s16, s14, s15
 800108c:	ed97 0a08 	vldr	s0, [r7, #32]
 8001090:	f00b fca0 	bl	800c9d4 <sinf>
 8001094:	eeb0 7a40 	vmov.f32	s14, s0
 8001098:	4b2c      	ldr	r3, [pc, #176]	@ (800114c <main+0x214>)
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80010a6:	edc7 7a01 	vstr	s15, [r7, #4]

	      phiHat_rad = phiHat_rad + (SAMPLE_TIME_MS_USB/1000.0f) * phiDot_rps;
 80010aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ae:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001154 <main+0x21c>
 80010b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b6:	ed97 7a08 	vldr	s14, [r7, #32]
 80010ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010be:	edc7 7a08 	vstr	s15, [r7, #32]
	      thetaHat_rad = thetaHat_rad + (SAMPLE_TIME_MS_USB/1000.0f) * thetaDot_rps;
 80010c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001154 <main+0x21c>
 80010ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	edc7 7a07 	vstr	s15, [r7, #28]

	      /*Integrate Euler rates to get estimate of roll and pitch angles*/

	      snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
	               "%.3f, %.3f\r\n",
				   phiHat_rad * RAD_TO_DEG,
 80010da:	edd7 7a08 	vldr	s15, [r7, #32]
 80010de:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001144 <main+0x20c>
 80010e2:	ee67 7a87 	vmul.f32	s15, s15, s14
	      snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
 80010e6:	ee17 0a90 	vmov	r0, s15
 80010ea:	f7ff fa2d 	bl	8000548 <__aeabi_f2d>
 80010ee:	4604      	mov	r4, r0
 80010f0:	460d      	mov	r5, r1
				   thetaHat_rad * RAD_TO_DEG);
 80010f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80010f6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001144 <main+0x20c>
 80010fa:	ee67 7a87 	vmul.f32	s15, s15, s14
	      snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
 80010fe:	ee17 0a90 	vmov	r0, s15
 8001102:	f7ff fa21 	bl	8000548 <__aeabi_f2d>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800110e:	e9cd 4500 	strd	r4, r5, [sp]
 8001112:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <main+0x220>)
 8001114:	2196      	movs	r1, #150	@ 0x96
 8001116:	4811      	ldr	r0, [pc, #68]	@ (800115c <main+0x224>)
 8001118:	f009 faaa 	bl	800a670 <sniprintf>

	      CDC_Transmit_FS((uint8_t*)usb_tx_buffer, strlen(usb_tx_buffer));
 800111c:	480f      	ldr	r0, [pc, #60]	@ (800115c <main+0x224>)
 800111e:	f7ff f8a7 	bl	8000270 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	b29b      	uxth	r3, r3
 8001126:	4619      	mov	r1, r3
 8001128:	480c      	ldr	r0, [pc, #48]	@ (800115c <main+0x224>)
 800112a:	f008 f92b 	bl	8009384 <CDC_Transmit_FS>
	      timerUSB = HAL_GetTick();
 800112e:	f000 fd07 	bl	8001b40 <HAL_GetTick>
 8001132:	6278      	str	r0, [r7, #36]	@ 0x24
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 8001134:	e723      	b.n	8000f7e <main+0x46>
 8001136:	bf00      	nop
 8001138:	20000444 	.word	0x20000444
 800113c:	20000448 	.word	0x20000448
 8001140:	20000440 	.word	0x20000440
 8001144:	42652ee1 	.word	0x42652ee1
 8001148:	20000450 	.word	0x20000450
 800114c:	20000454 	.word	0x20000454
 8001150:	2000044c 	.word	0x2000044c
 8001154:	3ca3d70a 	.word	0x3ca3d70a
 8001158:	0800db18 	.word	0x0800db18
 800115c:	200003a8 	.word	0x200003a8

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	@ 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	2230      	movs	r2, #48	@ 0x30
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f009 faf5 	bl	800a75e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	4b28      	ldr	r3, [pc, #160]	@ (800122c <SystemClock_Config+0xcc>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	4a27      	ldr	r2, [pc, #156]	@ (800122c <SystemClock_Config+0xcc>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	@ 0x40
 8001194:	4b25      	ldr	r3, [pc, #148]	@ (800122c <SystemClock_Config+0xcc>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <SystemClock_Config+0xd0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a21      	ldr	r2, [pc, #132]	@ (8001230 <SystemClock_Config+0xd0>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <SystemClock_Config+0xd0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011bc:	2301      	movs	r3, #1
 80011be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c6:	2302      	movs	r3, #2
 80011c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011d0:	2304      	movs	r3, #4
 80011d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011d4:	23a8      	movs	r3, #168	@ 0xa8
 80011d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011dc:	2307      	movs	r3, #7
 80011de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0320 	add.w	r3, r7, #32
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 f871 	bl	80052cc <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011f0:	f000 f8a4 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	230f      	movs	r3, #15
 80011f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2302      	movs	r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001200:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001206:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800120a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2105      	movs	r1, #5
 8001212:	4618      	mov	r0, r3
 8001214:	f004 fad2 	bl	80057bc <HAL_RCC_ClockConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800121e:	f000 f88d 	bl	800133c <Error_Handler>
  }
}
 8001222:	bf00      	nop
 8001224:	3750      	adds	r7, #80	@ 0x50
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40007000 	.word	0x40007000

08001234 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <MX_I2C1_Init+0x50>)
 800123a:	4a13      	ldr	r2, [pc, #76]	@ (8001288 <MX_I2C1_Init+0x54>)
 800123c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_I2C1_Init+0x50>)
 8001240:	4a12      	ldr	r2, [pc, #72]	@ (800128c <MX_I2C1_Init+0x58>)
 8001242:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_I2C1_Init+0x50>)
 8001252:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001256:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	@ (8001284 <MX_I2C1_Init+0x50>)
 8001272:	f001 fae1 	bl	8002838 <HAL_I2C_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800127c:	f000 f85e 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200002f4 	.word	0x200002f4
 8001288:	40005400 	.word	0x40005400
 800128c:	000186a0 	.word	0x000186a0

08001290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_DMA_Init+0x3c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a0b      	ldr	r2, [pc, #44]	@ (80012cc <MX_DMA_Init+0x3c>)
 80012a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_DMA_Init+0x3c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	200b      	movs	r0, #11
 80012b8:	f000 fd4d 	bl	8001d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012bc:	200b      	movs	r0, #11
 80012be:	f000 fd66 	bl	8001d8e <HAL_NVIC_EnableIRQ>

}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <MX_GPIO_Init+0x68>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a16      	ldr	r2, [pc, #88]	@ (8001338 <MX_GPIO_Init+0x68>)
 80012e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <MX_GPIO_Init+0x68>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <MX_GPIO_Init+0x68>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001338 <MX_GPIO_Init+0x68>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <MX_GPIO_Init+0x68>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_GPIO_Init+0x68>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <MX_GPIO_Init+0x68>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_GPIO_Init+0x68>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <Error_Handler+0x8>

08001348 <mpu6050Init>:
uint8_t mpu6050Data[14];




void mpu6050Init(void){
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(
 800134e:	2364      	movs	r3, #100	@ 0x64
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2301      	movs	r3, #1
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	4b05      	ldr	r3, [pc, #20]	@ (800136c <mpu6050Init+0x24>)
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2301      	movs	r3, #1
 800135c:	2275      	movs	r2, #117	@ 0x75
 800135e:	21d0      	movs	r1, #208	@ 0xd0
 8001360:	4803      	ldr	r0, [pc, #12]	@ (8001370 <mpu6050Init+0x28>)
 8001362:	f001 fca7 	bl	8002cb4 <HAL_I2C_Mem_Read>
				1,
				&whoAreYou,
				1,
				100
				);
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000043e 	.word	0x2000043e
 8001370:	200002f4 	.word	0x200002f4

08001374 <mpu6050powerOn>:

void mpu6050powerOn(void){
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af04      	add	r7, sp, #16
	MemData = 0x00;
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <mpu6050powerOn+0x2c>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(
 8001380:	2364      	movs	r3, #100	@ 0x64
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	2301      	movs	r3, #1
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <mpu6050powerOn+0x2c>)
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	226b      	movs	r2, #107	@ 0x6b
 8001390:	21d0      	movs	r1, #208	@ 0xd0
 8001392:	4804      	ldr	r0, [pc, #16]	@ (80013a4 <mpu6050powerOn+0x30>)
 8001394:	f001 fb94 	bl	8002ac0 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000043f 	.word	0x2000043f
 80013a4:	200002f4 	.word	0x200002f4

080013a8 <mpu6050Sampling>:

void mpu6050Sampling(void){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af04      	add	r7, sp, #16
	MemData = 0x07;
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <mpu6050Sampling+0x2c>)
 80013b0:	2207      	movs	r2, #7
 80013b2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(
 80013b4:	2364      	movs	r3, #100	@ 0x64
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	2301      	movs	r3, #1
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <mpu6050Sampling+0x2c>)
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	2219      	movs	r2, #25
 80013c4:	21d0      	movs	r1, #208	@ 0xd0
 80013c6:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <mpu6050Sampling+0x30>)
 80013c8:	f001 fb7a 	bl	8002ac0 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000043f 	.word	0x2000043f
 80013d8:	200002f4 	.word	0x200002f4

080013dc <mpu6050GyroScale>:

void mpu6050GyroScale(gyroScale_t scale){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af04      	add	r7, sp, #16
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	MemData = 0x00 | (scale << 3);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <mpu6050GyroScale+0x34>)
 80013ee:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(
 80013f0:	2364      	movs	r3, #100	@ 0x64
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	2301      	movs	r3, #1
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <mpu6050GyroScale+0x34>)
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2301      	movs	r3, #1
 80013fe:	221b      	movs	r2, #27
 8001400:	21d0      	movs	r1, #208	@ 0xd0
 8001402:	4804      	ldr	r0, [pc, #16]	@ (8001414 <mpu6050GyroScale+0x38>)
 8001404:	f001 fb5c 	bl	8002ac0 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000043f 	.word	0x2000043f
 8001414:	200002f4 	.word	0x200002f4

08001418 <mpu6050AccelScale>:

void mpu6050AccelScale(accelScale_t scale){
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af04      	add	r7, sp, #16
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
	MemData = 0x00 | (scale << 3);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <mpu6050AccelScale+0x34>)
 800142a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(
 800142c:	2364      	movs	r3, #100	@ 0x64
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	2301      	movs	r3, #1
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <mpu6050AccelScale+0x34>)
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	221c      	movs	r2, #28
 800143c:	21d0      	movs	r1, #208	@ 0xd0
 800143e:	4804      	ldr	r0, [pc, #16]	@ (8001450 <mpu6050AccelScale+0x38>)
 8001440:	f001 fb3e 	bl	8002ac0 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000043f 	.word	0x2000043f
 8001450:	200002f4 	.word	0x200002f4

08001454 <mpu6050ConfigFilter>:

void mpu6050ConfigFilter(uint8_t ext_sync, dlpfCfg_t dlpf_cfg) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af04      	add	r7, sp, #16
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	4613      	mov	r3, r2
 8001462:	71bb      	strb	r3, [r7, #6]
    // The CONFIG register (address 0x1A) combines EXT_SYNC_SET (bits 5–3) and DLPF_CFG (bits 2–0).
    // ext_sync: external sync setting (0 if not used).
    // dlpf_cfg: desired digital low pass filter configuration.
    uint8_t config = (ext_sync << 3) | (uint8_t)dlpf_cfg;
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	b25a      	sxtb	r2, r3
 800146a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800146e:	4313      	orrs	r3, r2
 8001470:	b25b      	sxtb	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Mem_Write(
 8001476:	2364      	movs	r3, #100	@ 0x64
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2301      	movs	r3, #1
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	f107 030f 	add.w	r3, r7, #15
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2301      	movs	r3, #1
 8001486:	221a      	movs	r2, #26
 8001488:	21d0      	movs	r1, #208	@ 0xd0
 800148a:	4803      	ldr	r0, [pc, #12]	@ (8001498 <mpu6050ConfigFilter+0x44>)
 800148c:	f001 fb18 	bl	8002ac0 <HAL_I2C_Mem_Write>
        1,
        &config,
        1,
        100
    );
}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200002f4 	.word	0x200002f4

0800149c <mpu6050Config>:


void mpu6050Config(void){
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	// is valid Condition true 0x68
	mpu6050Init();
 80014a0:	f7ff ff52 	bl	8001348 <mpu6050Init>

	if(validCondition1){
 80014a4:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <mpu6050Config+0x30>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b68      	cmp	r3, #104	@ 0x68
 80014aa:	d10d      	bne.n	80014c8 <mpu6050Config+0x2c>
	// power on
		mpu6050powerOn();
 80014ac:	f7ff ff62 	bl	8001374 <mpu6050powerOn>
	// sampling data ratio
		mpu6050Sampling();
 80014b0:	f7ff ff7a 	bl	80013a8 <mpu6050Sampling>
	// gyro scale   (RAW)
		mpu6050GyroScale(degS500);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff ff91 	bl	80013dc <mpu6050GyroScale>
	// accel scale  (RAW)
		mpu6050AccelScale(g4);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff ffac 	bl	8001418 <mpu6050AccelScale>
	// using low pass filter
		mpu6050ConfigFilter(0, DLPF_CFG_10HZ);
 80014c0:	2105      	movs	r1, #5
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff ffc6 	bl	8001454 <mpu6050ConfigFilter>

	}
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2000043e 	.word	0x2000043e

080014d0 <mpu6050Read_DMA>:
	Ay = RAWaccelY/2048.0;
	Az = RAWaccelZ/2048.0;
}


void mpu6050Read_DMA(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(&hi2c1,
 80014d6:	230e      	movs	r3, #14
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <mpu6050Read_DMA+0x28>)
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2301      	movs	r3, #1
 80014e0:	223b      	movs	r2, #59	@ 0x3b
 80014e2:	21d0      	movs	r1, #208	@ 0xd0
 80014e4:	4805      	ldr	r0, [pc, #20]	@ (80014fc <mpu6050Read_DMA+0x2c>)
 80014e6:	f001 fe17 	bl	8003118 <HAL_I2C_Mem_Read_DMA>
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
                                                    mpu6050Data,// Buffer to store the 14 bytes
                                                    14);        // Number of bytes to read
    if(status != HAL_OK) {
        // Handle error here, e.g., log or trigger an error flag.
    }
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000045c 	.word	0x2000045c
 80014fc:	200002f4 	.word	0x200002f4

08001500 <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    if(hi2c->Instance == I2C1) {
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a58      	ldr	r2, [pc, #352]	@ (8001670 <HAL_I2C_MemRxCpltCallback+0x170>)
 800150e:	4293      	cmp	r3, r2
 8001510:	f040 80a6 	bne.w	8001660 <HAL_I2C_MemRxCpltCallback+0x160>
        // Accelerometer data conversion
        int16_t rawAccelX = (int16_t)((mpu6050Data[0] << 8) | mpu6050Data[1]);
 8001514:	4b57      	ldr	r3, [pc, #348]	@ (8001674 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b21a      	sxth	r2, r3
 800151c:	4b55      	ldr	r3, [pc, #340]	@ (8001674 <HAL_I2C_MemRxCpltCallback+0x174>)
 800151e:	785b      	ldrb	r3, [r3, #1]
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	82fb      	strh	r3, [r7, #22]
        int16_t rawAccelY = (int16_t)((mpu6050Data[2] << 8) | mpu6050Data[3]);
 8001526:	4b53      	ldr	r3, [pc, #332]	@ (8001674 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001528:	789b      	ldrb	r3, [r3, #2]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21a      	sxth	r2, r3
 800152e:	4b51      	ldr	r3, [pc, #324]	@ (8001674 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001530:	78db      	ldrb	r3, [r3, #3]
 8001532:	b21b      	sxth	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	82bb      	strh	r3, [r7, #20]
        int16_t rawAccelZ = (int16_t)((mpu6050Data[4] << 8) | mpu6050Data[5]);
 8001538:	4b4e      	ldr	r3, [pc, #312]	@ (8001674 <HAL_I2C_MemRxCpltCallback+0x174>)
 800153a:	791b      	ldrb	r3, [r3, #4]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b21a      	sxth	r2, r3
 8001540:	4b4c      	ldr	r3, [pc, #304]	@ (8001674 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001542:	795b      	ldrb	r3, [r3, #5]
 8001544:	b21b      	sxth	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	827b      	strh	r3, [r7, #18]

        // Temperature data conversion
        int16_t rawTemp = (int16_t)((mpu6050Data[6] << 8) | mpu6050Data[7]);
 800154a:	4b4a      	ldr	r3, [pc, #296]	@ (8001674 <HAL_I2C_MemRxCpltCallback+0x174>)
 800154c:	799b      	ldrb	r3, [r3, #6]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b21a      	sxth	r2, r3
 8001552:	4b48      	ldr	r3, [pc, #288]	@ (8001674 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001554:	79db      	ldrb	r3, [r3, #7]
 8001556:	b21b      	sxth	r3, r3
 8001558:	4313      	orrs	r3, r2
 800155a:	823b      	strh	r3, [r7, #16]
        // Conversion formula example: actualTemp = (rawTemp / 340.0) + 36.53

        // Gyro data conversion
        int16_t rawGyroX = (int16_t)((mpu6050Data[8]  << 8) | mpu6050Data[9]);
 800155c:	4b45      	ldr	r3, [pc, #276]	@ (8001674 <HAL_I2C_MemRxCpltCallback+0x174>)
 800155e:	7a1b      	ldrb	r3, [r3, #8]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21a      	sxth	r2, r3
 8001564:	4b43      	ldr	r3, [pc, #268]	@ (8001674 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001566:	7a5b      	ldrb	r3, [r3, #9]
 8001568:	b21b      	sxth	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	81fb      	strh	r3, [r7, #14]
        int16_t rawGyroY = (int16_t)((mpu6050Data[10] << 8) | mpu6050Data[11]);
 800156e:	4b41      	ldr	r3, [pc, #260]	@ (8001674 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001570:	7a9b      	ldrb	r3, [r3, #10]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b21a      	sxth	r2, r3
 8001576:	4b3f      	ldr	r3, [pc, #252]	@ (8001674 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001578:	7adb      	ldrb	r3, [r3, #11]
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	81bb      	strh	r3, [r7, #12]
        int16_t rawGyroZ = (int16_t)((mpu6050Data[12] << 8) | mpu6050Data[13]);
 8001580:	4b3c      	ldr	r3, [pc, #240]	@ (8001674 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001582:	7b1b      	ldrb	r3, [r3, #12]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b21a      	sxth	r2, r3
 8001588:	4b3a      	ldr	r3, [pc, #232]	@ (8001674 <HAL_I2C_MemRxCpltCallback+0x174>)
 800158a:	7b5b      	ldrb	r3, [r3, #13]
 800158c:	b21b      	sxth	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	817b      	strh	r3, [r7, #10]


        Ax = rawAccelX / 8192.0f;
 8001592:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800159e:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001678 <HAL_I2C_MemRxCpltCallback+0x178>
 80015a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a6:	4b35      	ldr	r3, [pc, #212]	@ (800167c <HAL_I2C_MemRxCpltCallback+0x17c>)
 80015a8:	edc3 7a00 	vstr	s15, [r3]
        Ay = rawAccelY / 8192.0f;
 80015ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b8:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001678 <HAL_I2C_MemRxCpltCallback+0x178>
 80015bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001680 <HAL_I2C_MemRxCpltCallback+0x180>)
 80015c2:	edc3 7a00 	vstr	s15, [r3]
        Az = rawAccelZ / 8192.0f;
 80015c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d2:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001678 <HAL_I2C_MemRxCpltCallback+0x178>
 80015d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015da:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <HAL_I2C_MemRxCpltCallback+0x184>)
 80015dc:	edc3 7a00 	vstr	s15, [r3]

        temperature = (rawTemp / 340.0f) + 36.53f; // Example conversion formula
 80015e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ec:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001688 <HAL_I2C_MemRxCpltCallback+0x188>
 80015f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800168c <HAL_I2C_MemRxCpltCallback+0x18c>
 80015f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015fc:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <HAL_I2C_MemRxCpltCallback+0x190>)
 80015fe:	edc3 7a00 	vstr	s15, [r3]

        Gx = rawGyroX / 65.5f;
 8001602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160e:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001694 <HAL_I2C_MemRxCpltCallback+0x194>
 8001612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001616:	4b20      	ldr	r3, [pc, #128]	@ (8001698 <HAL_I2C_MemRxCpltCallback+0x198>)
 8001618:	edc3 7a00 	vstr	s15, [r3]
        Gy = rawGyroY / 65.5;
 800161c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff7f 	bl	8000524 <__aeabi_i2d>
 8001626:	a310      	add	r3, pc, #64	@ (adr r3, 8001668 <HAL_I2C_MemRxCpltCallback+0x168>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7ff f90e 	bl	800084c <__aeabi_ddiv>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	f7ff fab6 	bl	8000ba8 <__aeabi_d2f>
 800163c:	4603      	mov	r3, r0
 800163e:	4a17      	ldr	r2, [pc, #92]	@ (800169c <HAL_I2C_MemRxCpltCallback+0x19c>)
 8001640:	6013      	str	r3, [r2, #0]
        Gz = rawGyroZ / 65.5f;
 8001642:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164e:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001694 <HAL_I2C_MemRxCpltCallback+0x194>
 8001652:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001656:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <HAL_I2C_MemRxCpltCallback+0x1a0>)
 8001658:	edc3 7a00 	vstr	s15, [r3]
        // Process or store these values as needed
        // For example, update global variables or send them to another module

        // If you need continuous reading and are not using circular mode,
        // you can re-initiate the DMA read here.
        mpu6050Read_DMA();
 800165c:	f7ff ff38 	bl	80014d0 <mpu6050Read_DMA>
    }
}
 8001660:	bf00      	nop
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	00000000 	.word	0x00000000
 800166c:	40506000 	.word	0x40506000
 8001670:	40005400 	.word	0x40005400
 8001674:	2000045c 	.word	0x2000045c
 8001678:	46000000 	.word	0x46000000
 800167c:	20000440 	.word	0x20000440
 8001680:	20000444 	.word	0x20000444
 8001684:	20000448 	.word	0x20000448
 8001688:	43aa0000 	.word	0x43aa0000
 800168c:	42121eb8 	.word	0x42121eb8
 8001690:	20000458 	.word	0x20000458
 8001694:	42830000 	.word	0x42830000
 8001698:	2000044c 	.word	0x2000044c
 800169c:	20000450 	.word	0x20000450
 80016a0:	20000454 	.word	0x20000454

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <HAL_MspInit+0x4c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b2:	4a0f      	ldr	r2, [pc, #60]	@ (80016f0 <HAL_MspInit+0x4c>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ba:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <HAL_MspInit+0x4c>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	603b      	str	r3, [r7, #0]
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_MspInit+0x4c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	4a08      	ldr	r2, [pc, #32]	@ (80016f0 <HAL_MspInit+0x4c>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_MspInit+0x4c>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	@ 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a30      	ldr	r2, [pc, #192]	@ (80017d4 <HAL_I2C_MspInit+0xe0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d15a      	bne.n	80017cc <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b2f      	ldr	r3, [pc, #188]	@ (80017d8 <HAL_I2C_MspInit+0xe4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a2e      	ldr	r2, [pc, #184]	@ (80017d8 <HAL_I2C_MspInit+0xe4>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b2c      	ldr	r3, [pc, #176]	@ (80017d8 <HAL_I2C_MspInit+0xe4>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001732:	23c0      	movs	r3, #192	@ 0xc0
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001736:	2312      	movs	r3, #18
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001742:	2304      	movs	r3, #4
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4823      	ldr	r0, [pc, #140]	@ (80017dc <HAL_I2C_MspInit+0xe8>)
 800174e:	f000 fed7 	bl	8002500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b20      	ldr	r3, [pc, #128]	@ (80017d8 <HAL_I2C_MspInit+0xe4>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a1f      	ldr	r2, [pc, #124]	@ (80017d8 <HAL_I2C_MspInit+0xe4>)
 800175c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <HAL_I2C_MspInit+0xe4>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <HAL_I2C_MspInit+0xec>)
 8001770:	4a1c      	ldr	r2, [pc, #112]	@ (80017e4 <HAL_I2C_MspInit+0xf0>)
 8001772:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001774:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <HAL_I2C_MspInit+0xec>)
 8001776:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800177a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177c:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_I2C_MspInit+0xec>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001782:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <HAL_I2C_MspInit+0xec>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_I2C_MspInit+0xec>)
 800178a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800178e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <HAL_I2C_MspInit+0xec>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_I2C_MspInit+0xec>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800179c:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <HAL_I2C_MspInit+0xec>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <HAL_I2C_MspInit+0xec>)
 80017a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017a8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <HAL_I2C_MspInit+0xec>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80017b0:	480b      	ldr	r0, [pc, #44]	@ (80017e0 <HAL_I2C_MspInit+0xec>)
 80017b2:	f000 fb07 	bl	8001dc4 <HAL_DMA_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80017bc:	f7ff fdbe 	bl	800133c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a07      	ldr	r2, [pc, #28]	@ (80017e0 <HAL_I2C_MspInit+0xec>)
 80017c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80017c6:	4a06      	ldr	r2, [pc, #24]	@ (80017e0 <HAL_I2C_MspInit+0xec>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017cc:	bf00      	nop
 80017ce:	3728      	adds	r7, #40	@ 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40005400 	.word	0x40005400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020400 	.word	0x40020400
 80017e0:	20000348 	.word	0x20000348
 80017e4:	40026010 	.word	0x40026010

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <NMI_Handler+0x4>

080017f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <MemManage_Handler+0x4>

08001800 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <UsageFault_Handler+0x4>

08001810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183e:	f000 f96b 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <DMA1_Stream0_IRQHandler+0x10>)
 800184e:	f000 fbe1 	bl	8002014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000348 	.word	0x20000348

0800185c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001860:	4802      	ldr	r0, [pc, #8]	@ (800186c <OTG_FS_IRQHandler+0x10>)
 8001862:	f002 fc25 	bl	80040b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20001954 	.word	0x20001954

08001870 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return 1;
 8001874:	2301      	movs	r3, #1
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_kill>:

int _kill(int pid, int sig)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800188a:	f008 ffbb 	bl	800a804 <__errno>
 800188e:	4603      	mov	r3, r0
 8001890:	2216      	movs	r2, #22
 8001892:	601a      	str	r2, [r3, #0]
  return -1;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_exit>:

void _exit (int status)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ffe7 	bl	8001880 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018b2:	bf00      	nop
 80018b4:	e7fd      	b.n	80018b2 <_exit+0x12>

080018b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e00a      	b.n	80018de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018c8:	f3af 8000 	nop.w
 80018cc:	4601      	mov	r1, r0
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	60ba      	str	r2, [r7, #8]
 80018d4:	b2ca      	uxtb	r2, r1
 80018d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dbf0      	blt.n	80018c8 <_read+0x12>
  }

  return len;
 80018e6:	687b      	ldr	r3, [r7, #4]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	e009      	b.n	8001916 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	60ba      	str	r2, [r7, #8]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3301      	adds	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	dbf1      	blt.n	8001902 <_write+0x12>
  }
  return len;
 800191e:	687b      	ldr	r3, [r7, #4]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <_close>:

int _close(int file)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001950:	605a      	str	r2, [r3, #4]
  return 0;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_isatty>:

int _isatty(int file)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001968:	2301      	movs	r3, #1
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001976:	b480      	push	{r7}
 8001978:	b085      	sub	sp, #20
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001998:	4a14      	ldr	r2, [pc, #80]	@ (80019ec <_sbrk+0x5c>)
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <_sbrk+0x60>)
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ac:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <_sbrk+0x64>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	@ (80019f8 <_sbrk+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d207      	bcs.n	80019d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c0:	f008 ff20 	bl	800a804 <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	220c      	movs	r2, #12
 80019c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	e009      	b.n	80019e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d0:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d6:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a05      	ldr	r2, [pc, #20]	@ (80019f4 <_sbrk+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20020000 	.word	0x20020000
 80019f0:	00000400 	.word	0x00000400
 80019f4:	2000046c 	.word	0x2000046c
 80019f8:	200021a8 	.word	0x200021a8

080019fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <SystemInit+0x20>)
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a06:	4a05      	ldr	r2, [pc, #20]	@ (8001a1c <SystemInit+0x20>)
 8001a08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a24:	f7ff ffea 	bl	80019fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a2a:	490d      	ldr	r1, [pc, #52]	@ (8001a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a40:	4c0a      	ldr	r4, [pc, #40]	@ (8001a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f008 fedf 	bl	800a810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a52:	f7ff fa71 	bl	8000f38 <main>
  bx  lr    
 8001a56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a60:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8001a64:	0800e318 	.word	0x0800e318
  ldr r2, =_sbss
 8001a68:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001a6c:	200021a4 	.word	0x200021a4

08001a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC_IRQHandler>
	...

08001a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a78:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <HAL_Init+0x40>)
 8001a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a84:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <HAL_Init+0x40>)
 8001a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <HAL_Init+0x40>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <HAL_Init+0x40>)
 8001a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 f94f 	bl	8001d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa2:	200f      	movs	r0, #15
 8001aa4:	f000 f808 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa8:	f7ff fdfc 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f967 	bl	8001daa <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f000 f92f 	bl	8001d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	@ (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000008 	.word	0x20000008
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	20000470 	.word	0x20000470

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	@ (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000470 	.word	0x20000470

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b72:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_Delay+0x44>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4907      	ldr	r1, [pc, #28]	@ (8001c3c <__NVIC_EnableIRQ+0x38>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db0a      	blt.n	8001c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	490c      	ldr	r1, [pc, #48]	@ (8001c8c <__NVIC_SetPriority+0x4c>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c68:	e00a      	b.n	8001c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4908      	ldr	r1, [pc, #32]	@ (8001c90 <__NVIC_SetPriority+0x50>)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	3b04      	subs	r3, #4
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	761a      	strb	r2, [r3, #24]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	@ 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f1c3 0307 	rsb	r3, r3, #7
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	bf28      	it	cs
 8001cb2:	2304      	movcs	r3, #4
 8001cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d902      	bls.n	8001cc4 <NVIC_EncodePriority+0x30>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b03      	subs	r3, #3
 8001cc2:	e000      	b.n	8001cc6 <NVIC_EncodePriority+0x32>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	4313      	orrs	r3, r2
         );
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3724      	adds	r7, #36	@ 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d0c:	d301      	bcc.n	8001d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00f      	b.n	8001d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <SysTick_Config+0x40>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f7ff ff8e 	bl	8001c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d24:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <SysTick_Config+0x40>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2a:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <SysTick_Config+0x40>)
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	e000e010 	.word	0xe000e010

08001d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ff29 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d68:	f7ff ff3e 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	6978      	ldr	r0, [r7, #20]
 8001d74:	f7ff ff8e 	bl	8001c94 <NVIC_EncodePriority>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff5d 	bl	8001c40 <__NVIC_SetPriority>
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff31 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ffa2 	bl	8001cfc <SysTick_Config>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff feb6 	bl	8001b40 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e099      	b.n	8001f14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0201 	bic.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e00:	e00f      	b.n	8001e22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e02:	f7ff fe9d 	bl	8001b40 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d908      	bls.n	8001e22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2220      	movs	r2, #32
 8001e14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2203      	movs	r2, #3
 8001e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e078      	b.n	8001f14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1e8      	bne.n	8001e02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	4b38      	ldr	r3, [pc, #224]	@ (8001f1c <HAL_DMA_Init+0x158>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d107      	bne.n	8001e8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e84:	4313      	orrs	r3, r2
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f023 0307 	bic.w	r3, r3, #7
 8001ea2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d117      	bne.n	8001ee6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00e      	beq.n	8001ee6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fa9d 	bl	8002408 <DMA_CheckFifoParam>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2240      	movs	r2, #64	@ 0x40
 8001ed8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e016      	b.n	8001f14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fa54 	bl	800239c <DMA_CalcBaseAndBitshift>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efc:	223f      	movs	r2, #63	@ 0x3f
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	f010803f 	.word	0xf010803f

08001f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_DMA_Start_IT+0x26>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e040      	b.n	8001fc8 <HAL_DMA_Start_IT+0xa8>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d12f      	bne.n	8001fba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f9e6 	bl	8002340 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f78:	223f      	movs	r2, #63	@ 0x3f
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0216 	orr.w	r2, r2, #22
 8001f8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0208 	orr.w	r2, r2, #8
 8001fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	e005      	b.n	8001fc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d004      	beq.n	8001fee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2280      	movs	r2, #128	@ 0x80
 8001fe8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00c      	b.n	8002008 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2205      	movs	r2, #5
 8001ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002020:	4b8e      	ldr	r3, [pc, #568]	@ (800225c <HAL_DMA_IRQHandler+0x248>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a8e      	ldr	r2, [pc, #568]	@ (8002260 <HAL_DMA_IRQHandler+0x24c>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0a9b      	lsrs	r3, r3, #10
 800202c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002032:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203e:	2208      	movs	r2, #8
 8002040:	409a      	lsls	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d01a      	beq.n	8002080 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d013      	beq.n	8002080 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0204 	bic.w	r2, r2, #4
 8002066:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206c:	2208      	movs	r2, #8
 800206e:	409a      	lsls	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002084:	2201      	movs	r2, #1
 8002086:	409a      	lsls	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d012      	beq.n	80020b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a2:	2201      	movs	r2, #1
 80020a4:	409a      	lsls	r2, r3
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ae:	f043 0202 	orr.w	r2, r3, #2
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ba:	2204      	movs	r2, #4
 80020bc:	409a      	lsls	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d012      	beq.n	80020ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00b      	beq.n	80020ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d8:	2204      	movs	r2, #4
 80020da:	409a      	lsls	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e4:	f043 0204 	orr.w	r2, r3, #4
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f0:	2210      	movs	r2, #16
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d043      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d03c      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210e:	2210      	movs	r2, #16
 8002110:	409a      	lsls	r2, r3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d018      	beq.n	8002156 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d108      	bne.n	8002144 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d024      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	4798      	blx	r3
 8002142:	e01f      	b.n	8002184 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01b      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
 8002154:	e016      	b.n	8002184 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0208 	bic.w	r2, r2, #8
 8002172:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002188:	2220      	movs	r2, #32
 800218a:	409a      	lsls	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 808f 	beq.w	80022b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8087 	beq.w	80022b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021aa:	2220      	movs	r2, #32
 80021ac:	409a      	lsls	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d136      	bne.n	800222c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0216 	bic.w	r2, r2, #22
 80021cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <HAL_DMA_IRQHandler+0x1da>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0208 	bic.w	r2, r2, #8
 80021fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002202:	223f      	movs	r2, #63	@ 0x3f
 8002204:	409a      	lsls	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800221e:	2b00      	cmp	r3, #0
 8002220:	d07e      	beq.n	8002320 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4798      	blx	r3
        }
        return;
 800222a:	e079      	b.n	8002320 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d01d      	beq.n	8002276 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10d      	bne.n	8002264 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224c:	2b00      	cmp	r3, #0
 800224e:	d031      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	4798      	blx	r3
 8002258:	e02c      	b.n	80022b4 <HAL_DMA_IRQHandler+0x2a0>
 800225a:	bf00      	nop
 800225c:	20000000 	.word	0x20000000
 8002260:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002268:	2b00      	cmp	r3, #0
 800226a:	d023      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
 8002274:	e01e      	b.n	80022b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10f      	bne.n	80022a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0210 	bic.w	r2, r2, #16
 8002292:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d032      	beq.n	8002322 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d022      	beq.n	800230e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2205      	movs	r2, #5
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d307      	bcc.n	80022fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f2      	bne.n	80022e0 <HAL_DMA_IRQHandler+0x2cc>
 80022fa:	e000      	b.n	80022fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	4798      	blx	r3
 800231e:	e000      	b.n	8002322 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002320:	bf00      	nop
    }
  }
}
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800235c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b40      	cmp	r3, #64	@ 0x40
 800236c:	d108      	bne.n	8002380 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800237e:	e007      	b.n	8002390 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	60da      	str	r2, [r3, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	3b10      	subs	r3, #16
 80023ac:	4a14      	ldr	r2, [pc, #80]	@ (8002400 <DMA_CalcBaseAndBitshift+0x64>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	091b      	lsrs	r3, r3, #4
 80023b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023b6:	4a13      	ldr	r2, [pc, #76]	@ (8002404 <DMA_CalcBaseAndBitshift+0x68>)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4413      	add	r3, r2
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d909      	bls.n	80023de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	1d1a      	adds	r2, r3, #4
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	659a      	str	r2, [r3, #88]	@ 0x58
 80023dc:	e007      	b.n	80023ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023e6:	f023 0303 	bic.w	r3, r3, #3
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	aaaaaaab 	.word	0xaaaaaaab
 8002404:	0800db88 	.word	0x0800db88

08002408 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002418:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d11f      	bne.n	8002462 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d856      	bhi.n	80024d6 <DMA_CheckFifoParam+0xce>
 8002428:	a201      	add	r2, pc, #4	@ (adr r2, 8002430 <DMA_CheckFifoParam+0x28>)
 800242a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242e:	bf00      	nop
 8002430:	08002441 	.word	0x08002441
 8002434:	08002453 	.word	0x08002453
 8002438:	08002441 	.word	0x08002441
 800243c:	080024d7 	.word	0x080024d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002444:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d046      	beq.n	80024da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002450:	e043      	b.n	80024da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002456:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800245a:	d140      	bne.n	80024de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002460:	e03d      	b.n	80024de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800246a:	d121      	bne.n	80024b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b03      	cmp	r3, #3
 8002470:	d837      	bhi.n	80024e2 <DMA_CheckFifoParam+0xda>
 8002472:	a201      	add	r2, pc, #4	@ (adr r2, 8002478 <DMA_CheckFifoParam+0x70>)
 8002474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002478:	08002489 	.word	0x08002489
 800247c:	0800248f 	.word	0x0800248f
 8002480:	08002489 	.word	0x08002489
 8002484:	080024a1 	.word	0x080024a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      break;
 800248c:	e030      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002492:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d025      	beq.n	80024e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800249e:	e022      	b.n	80024e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024a8:	d11f      	bne.n	80024ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024ae:	e01c      	b.n	80024ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d903      	bls.n	80024be <DMA_CheckFifoParam+0xb6>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d003      	beq.n	80024c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024bc:	e018      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
      break;
 80024c2:	e015      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00e      	beq.n	80024ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      break;
 80024d4:	e00b      	b.n	80024ee <DMA_CheckFifoParam+0xe6>
      break;
 80024d6:	bf00      	nop
 80024d8:	e00a      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      break;
 80024da:	bf00      	nop
 80024dc:	e008      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      break;
 80024de:	bf00      	nop
 80024e0:	e006      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      break;
 80024e2:	bf00      	nop
 80024e4:	e004      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      break;
 80024e6:	bf00      	nop
 80024e8:	e002      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80024ea:	bf00      	nop
 80024ec:	e000      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      break;
 80024ee:	bf00      	nop
    }
  } 
  
  return status; 
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop

08002500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	@ 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	e16b      	b.n	80027f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800251c:	2201      	movs	r2, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	429a      	cmp	r2, r3
 8002536:	f040 815a 	bne.w	80027ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b01      	cmp	r3, #1
 8002544:	d005      	beq.n	8002552 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254e:	2b02      	cmp	r3, #2
 8002550:	d130      	bne.n	80025b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	2203      	movs	r2, #3
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002588:	2201      	movs	r2, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 0201 	and.w	r2, r3, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d017      	beq.n	80025f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d123      	bne.n	8002644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	08da      	lsrs	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3208      	adds	r2, #8
 8002604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	220f      	movs	r2, #15
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	08da      	lsrs	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3208      	adds	r2, #8
 800263e:	69b9      	ldr	r1, [r7, #24]
 8002640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0203 	and.w	r2, r3, #3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80b4 	beq.w	80027ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b60      	ldr	r3, [pc, #384]	@ (800280c <HAL_GPIO_Init+0x30c>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	4a5f      	ldr	r2, [pc, #380]	@ (800280c <HAL_GPIO_Init+0x30c>)
 8002690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002694:	6453      	str	r3, [r2, #68]	@ 0x44
 8002696:	4b5d      	ldr	r3, [pc, #372]	@ (800280c <HAL_GPIO_Init+0x30c>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002810 <HAL_GPIO_Init+0x310>)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	3302      	adds	r3, #2
 80026aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	220f      	movs	r2, #15
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a52      	ldr	r2, [pc, #328]	@ (8002814 <HAL_GPIO_Init+0x314>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d02b      	beq.n	8002726 <HAL_GPIO_Init+0x226>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a51      	ldr	r2, [pc, #324]	@ (8002818 <HAL_GPIO_Init+0x318>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d025      	beq.n	8002722 <HAL_GPIO_Init+0x222>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a50      	ldr	r2, [pc, #320]	@ (800281c <HAL_GPIO_Init+0x31c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01f      	beq.n	800271e <HAL_GPIO_Init+0x21e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002820 <HAL_GPIO_Init+0x320>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d019      	beq.n	800271a <HAL_GPIO_Init+0x21a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002824 <HAL_GPIO_Init+0x324>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <HAL_GPIO_Init+0x216>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002828 <HAL_GPIO_Init+0x328>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00d      	beq.n	8002712 <HAL_GPIO_Init+0x212>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4c      	ldr	r2, [pc, #304]	@ (800282c <HAL_GPIO_Init+0x32c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d007      	beq.n	800270e <HAL_GPIO_Init+0x20e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4b      	ldr	r2, [pc, #300]	@ (8002830 <HAL_GPIO_Init+0x330>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_GPIO_Init+0x20a>
 8002706:	2307      	movs	r3, #7
 8002708:	e00e      	b.n	8002728 <HAL_GPIO_Init+0x228>
 800270a:	2308      	movs	r3, #8
 800270c:	e00c      	b.n	8002728 <HAL_GPIO_Init+0x228>
 800270e:	2306      	movs	r3, #6
 8002710:	e00a      	b.n	8002728 <HAL_GPIO_Init+0x228>
 8002712:	2305      	movs	r3, #5
 8002714:	e008      	b.n	8002728 <HAL_GPIO_Init+0x228>
 8002716:	2304      	movs	r3, #4
 8002718:	e006      	b.n	8002728 <HAL_GPIO_Init+0x228>
 800271a:	2303      	movs	r3, #3
 800271c:	e004      	b.n	8002728 <HAL_GPIO_Init+0x228>
 800271e:	2302      	movs	r3, #2
 8002720:	e002      	b.n	8002728 <HAL_GPIO_Init+0x228>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_GPIO_Init+0x228>
 8002726:	2300      	movs	r3, #0
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	f002 0203 	and.w	r2, r2, #3
 800272e:	0092      	lsls	r2, r2, #2
 8002730:	4093      	lsls	r3, r2
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002738:	4935      	ldr	r1, [pc, #212]	@ (8002810 <HAL_GPIO_Init+0x310>)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	3302      	adds	r3, #2
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002746:	4b3b      	ldr	r3, [pc, #236]	@ (8002834 <HAL_GPIO_Init+0x334>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800276a:	4a32      	ldr	r2, [pc, #200]	@ (8002834 <HAL_GPIO_Init+0x334>)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002770:	4b30      	ldr	r3, [pc, #192]	@ (8002834 <HAL_GPIO_Init+0x334>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002794:	4a27      	ldr	r2, [pc, #156]	@ (8002834 <HAL_GPIO_Init+0x334>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800279a:	4b26      	ldr	r3, [pc, #152]	@ (8002834 <HAL_GPIO_Init+0x334>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027be:	4a1d      	ldr	r2, [pc, #116]	@ (8002834 <HAL_GPIO_Init+0x334>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002834 <HAL_GPIO_Init+0x334>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e8:	4a12      	ldr	r2, [pc, #72]	@ (8002834 <HAL_GPIO_Init+0x334>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3301      	adds	r3, #1
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	2b0f      	cmp	r3, #15
 80027f8:	f67f ae90 	bls.w	800251c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3724      	adds	r7, #36	@ 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800
 8002810:	40013800 	.word	0x40013800
 8002814:	40020000 	.word	0x40020000
 8002818:	40020400 	.word	0x40020400
 800281c:	40020800 	.word	0x40020800
 8002820:	40020c00 	.word	0x40020c00
 8002824:	40021000 	.word	0x40021000
 8002828:	40021400 	.word	0x40021400
 800282c:	40021800 	.word	0x40021800
 8002830:	40021c00 	.word	0x40021c00
 8002834:	40013c00 	.word	0x40013c00

08002838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e12b      	b.n	8002aa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe ff48 	bl	80016f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2224      	movs	r2, #36	@ 0x24
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800288a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800289a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800289c:	f003 f986 	bl	8005bac <HAL_RCC_GetPCLK1Freq>
 80028a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4a81      	ldr	r2, [pc, #516]	@ (8002aac <HAL_I2C_Init+0x274>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d807      	bhi.n	80028bc <HAL_I2C_Init+0x84>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a80      	ldr	r2, [pc, #512]	@ (8002ab0 <HAL_I2C_Init+0x278>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	bf94      	ite	ls
 80028b4:	2301      	movls	r3, #1
 80028b6:	2300      	movhi	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	e006      	b.n	80028ca <HAL_I2C_Init+0x92>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a7d      	ldr	r2, [pc, #500]	@ (8002ab4 <HAL_I2C_Init+0x27c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	bf94      	ite	ls
 80028c4:	2301      	movls	r3, #1
 80028c6:	2300      	movhi	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0e7      	b.n	8002aa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4a78      	ldr	r2, [pc, #480]	@ (8002ab8 <HAL_I2C_Init+0x280>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0c9b      	lsrs	r3, r3, #18
 80028dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4a6a      	ldr	r2, [pc, #424]	@ (8002aac <HAL_I2C_Init+0x274>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d802      	bhi.n	800290c <HAL_I2C_Init+0xd4>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	3301      	adds	r3, #1
 800290a:	e009      	b.n	8002920 <HAL_I2C_Init+0xe8>
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	4a69      	ldr	r2, [pc, #420]	@ (8002abc <HAL_I2C_Init+0x284>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	099b      	lsrs	r3, r3, #6
 800291e:	3301      	adds	r3, #1
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	430b      	orrs	r3, r1
 8002926:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002932:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	495c      	ldr	r1, [pc, #368]	@ (8002aac <HAL_I2C_Init+0x274>)
 800293c:	428b      	cmp	r3, r1
 800293e:	d819      	bhi.n	8002974 <HAL_I2C_Init+0x13c>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1e59      	subs	r1, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fbb1 f3f3 	udiv	r3, r1, r3
 800294e:	1c59      	adds	r1, r3, #1
 8002950:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002954:	400b      	ands	r3, r1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_I2C_Init+0x138>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1e59      	subs	r1, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fbb1 f3f3 	udiv	r3, r1, r3
 8002968:	3301      	adds	r3, #1
 800296a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296e:	e051      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 8002970:	2304      	movs	r3, #4
 8002972:	e04f      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d111      	bne.n	80029a0 <HAL_I2C_Init+0x168>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1e58      	subs	r0, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	440b      	add	r3, r1
 800298a:	fbb0 f3f3 	udiv	r3, r0, r3
 800298e:	3301      	adds	r3, #1
 8002990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e012      	b.n	80029c6 <HAL_I2C_Init+0x18e>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1e58      	subs	r0, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	0099      	lsls	r1, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_Init+0x196>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e022      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10e      	bne.n	80029f4 <HAL_I2C_Init+0x1bc>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1e58      	subs	r0, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	440b      	add	r3, r1
 80029e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e8:	3301      	adds	r3, #1
 80029ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029f2:	e00f      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e58      	subs	r0, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	0099      	lsls	r1, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	6809      	ldr	r1, [r1, #0]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6911      	ldr	r1, [r2, #16]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68d2      	ldr	r2, [r2, #12]
 8002a4e:	4311      	orrs	r1, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	000186a0 	.word	0x000186a0
 8002ab0:	001e847f 	.word	0x001e847f
 8002ab4:	003d08ff 	.word	0x003d08ff
 8002ab8:	431bde83 	.word	0x431bde83
 8002abc:	10624dd3 	.word	0x10624dd3

08002ac0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	817b      	strh	r3, [r7, #10]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	813b      	strh	r3, [r7, #8]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ada:	f7ff f831 	bl	8001b40 <HAL_GetTick>
 8002ade:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	f040 80d9 	bne.w	8002ca0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	2319      	movs	r3, #25
 8002af4:	2201      	movs	r2, #1
 8002af6:	496d      	ldr	r1, [pc, #436]	@ (8002cac <HAL_I2C_Mem_Write+0x1ec>)
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 ff5f 	bl	80039bc <I2C_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b04:	2302      	movs	r3, #2
 8002b06:	e0cc      	b.n	8002ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_I2C_Mem_Write+0x56>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e0c5      	b.n	8002ca2 <HAL_I2C_Mem_Write+0x1e2>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d007      	beq.n	8002b3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2221      	movs	r2, #33	@ 0x21
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2240      	movs	r2, #64	@ 0x40
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a3a      	ldr	r2, [r7, #32]
 8002b66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a4d      	ldr	r2, [pc, #308]	@ (8002cb0 <HAL_I2C_Mem_Write+0x1f0>)
 8002b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b7e:	88f8      	ldrh	r0, [r7, #6]
 8002b80:	893a      	ldrh	r2, [r7, #8]
 8002b82:	8979      	ldrh	r1, [r7, #10]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fc7a 	bl	8003488 <I2C_RequestMemoryWrite>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d052      	beq.n	8002c40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e081      	b.n	8002ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f001 f824 	bl	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d107      	bne.n	8002bc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06b      	b.n	8002ca2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d11b      	bne.n	8002c40 <HAL_I2C_Mem_Write+0x180>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d017      	beq.n	8002c40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	781a      	ldrb	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1aa      	bne.n	8002b9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f001 f817 	bl	8003c80 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00d      	beq.n	8002c74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d107      	bne.n	8002c70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e016      	b.n	8002ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e000      	b.n	8002ca2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ca0:	2302      	movs	r3, #2
  }
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	00100002 	.word	0x00100002
 8002cb0:	ffff0000 	.word	0xffff0000

08002cb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08c      	sub	sp, #48	@ 0x30
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	817b      	strh	r3, [r7, #10]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	813b      	strh	r3, [r7, #8]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cce:	f7fe ff37 	bl	8001b40 <HAL_GetTick>
 8002cd2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	f040 8214 	bne.w	800310a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	2319      	movs	r3, #25
 8002ce8:	2201      	movs	r2, #1
 8002cea:	497b      	ldr	r1, [pc, #492]	@ (8002ed8 <HAL_I2C_Mem_Read+0x224>)
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 fe65 	bl	80039bc <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e207      	b.n	800310c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_I2C_Mem_Read+0x56>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e200      	b.n	800310c <HAL_I2C_Mem_Read+0x458>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d007      	beq.n	8002d30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2222      	movs	r2, #34	@ 0x22
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2240      	movs	r2, #64	@ 0x40
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002edc <HAL_I2C_Mem_Read+0x228>)
 8002d70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d72:	88f8      	ldrh	r0, [r7, #6]
 8002d74:	893a      	ldrh	r2, [r7, #8]
 8002d76:	8979      	ldrh	r1, [r7, #10]
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	4603      	mov	r3, r0
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fc16 	bl	80035b4 <I2C_RequestMemoryRead>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e1bc      	b.n	800310c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d113      	bne.n	8002dc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	623b      	str	r3, [r7, #32]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	623b      	str	r3, [r7, #32]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	623b      	str	r3, [r7, #32]
 8002dae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	e190      	b.n	80030e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d11b      	bne.n	8002e02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	e170      	b.n	80030e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d11b      	bne.n	8002e42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	e150      	b.n	80030e4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e58:	e144      	b.n	80030e4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	f200 80f1 	bhi.w	8003046 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d123      	bne.n	8002eb4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 ff4d 	bl	8003d10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e145      	b.n	800310c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002eb2:	e117      	b.n	80030e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d14e      	bne.n	8002f5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	4906      	ldr	r1, [pc, #24]	@ (8002ee0 <HAL_I2C_Mem_Read+0x22c>)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fd78 	bl	80039bc <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e11a      	b.n	800310c <HAL_I2C_Mem_Read+0x458>
 8002ed6:	bf00      	nop
 8002ed8:	00100002 	.word	0x00100002
 8002edc:	ffff0000 	.word	0xffff0000
 8002ee0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f58:	e0c4      	b.n	80030e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f60:	2200      	movs	r2, #0
 8002f62:	496c      	ldr	r1, [pc, #432]	@ (8003114 <HAL_I2C_Mem_Read+0x460>)
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 fd29 	bl	80039bc <I2C_WaitOnFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0cb      	b.n	800310c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4955      	ldr	r1, [pc, #340]	@ (8003114 <HAL_I2C_Mem_Read+0x460>)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fcfb 	bl	80039bc <I2C_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e09d      	b.n	800310c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691a      	ldr	r2, [r3, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003044:	e04e      	b.n	80030e4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003048:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fe60 	bl	8003d10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e058      	b.n	800310c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b04      	cmp	r3, #4
 8003098:	d124      	bne.n	80030e4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d107      	bne.n	80030b2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030b0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f47f aeb6 	bne.w	8002e5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e000      	b.n	800310c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
  }
}
 800310c:	4618      	mov	r0, r3
 800310e:	3728      	adds	r7, #40	@ 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	00010004 	.word	0x00010004

08003118 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	@ 0x30
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	4608      	mov	r0, r1
 8003122:	4611      	mov	r1, r2
 8003124:	461a      	mov	r2, r3
 8003126:	4603      	mov	r3, r0
 8003128:	817b      	strh	r3, [r7, #10]
 800312a:	460b      	mov	r3, r1
 800312c:	813b      	strh	r3, [r7, #8]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003132:	f7fe fd05 	bl	8001b40 <HAL_GetTick>
 8003136:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b20      	cmp	r3, #32
 8003146:	f040 8172 	bne.w	800342e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800314a:	4b93      	ldr	r3, [pc, #588]	@ (8003398 <HAL_I2C_Mem_Read_DMA+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	08db      	lsrs	r3, r3, #3
 8003150:	4a92      	ldr	r2, [pc, #584]	@ (800339c <HAL_I2C_Mem_Read_DMA+0x284>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	0a1a      	lsrs	r2, r3, #8
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	009a      	lsls	r2, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	3b01      	subs	r3, #1
 8003168:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d112      	bne.n	8003196 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	f043 0220 	orr.w	r2, r3, #32
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	e14c      	b.n	8003430 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d0df      	beq.n	8003164 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_I2C_Mem_Read_DMA+0x9a>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e13e      	b.n	8003430 <HAL_I2C_Mem_Read_DMA+0x318>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d007      	beq.n	80031d8 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2222      	movs	r2, #34	@ 0x22
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2240      	movs	r2, #64	@ 0x40
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003202:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003208:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a62      	ldr	r2, [pc, #392]	@ (80033a0 <HAL_I2C_Mem_Read_DMA+0x288>)
 8003218:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800321a:	897a      	ldrh	r2, [r7, #10]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003220:	893a      	ldrh	r2, [r7, #8]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003226:	88fa      	ldrh	r2, [r7, #6]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 80cc 	beq.w	80033d4 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02d      	beq.n	80032a0 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	4a56      	ldr	r2, [pc, #344]	@ (80033a4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800324a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	4a55      	ldr	r2, [pc, #340]	@ (80033a8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8003252:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003258:	2200      	movs	r2, #0
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003260:	2200      	movs	r2, #0
 8003262:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003268:	2200      	movs	r2, #0
 800326a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	2200      	movs	r2, #0
 8003272:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3310      	adds	r3, #16
 800327e:	4619      	mov	r1, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	461a      	mov	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328a:	f7fe fe49 	bl	8001f20 <HAL_DMA_Start_IT>
 800328e:	4603      	mov	r3, r0
 8003290:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003294:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003298:	2b00      	cmp	r3, #0
 800329a:	f040 8087 	bne.w	80033ac <HAL_I2C_Mem_Read_DMA+0x294>
 800329e:	e013      	b.n	80032c8 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0b3      	b.n	8003430 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80032c8:	88f8      	ldrh	r0, [r7, #6]
 80032ca:	893a      	ldrh	r2, [r7, #8]
 80032cc:	8979      	ldrh	r1, [r7, #10]
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	2323      	movs	r3, #35	@ 0x23
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	4603      	mov	r3, r0
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f96b 	bl	80035b4 <I2C_RequestMemoryRead>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d023      	beq.n	800332c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe fe71 	bl	8001fd0 <HAL_DMA_Abort_IT>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f8:	2200      	movs	r2, #0
 80032fa:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800330a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e081      	b.n	8003430 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003330:	2b01      	cmp	r3, #1
 8003332:	d108      	bne.n	8003346 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	e007      	b.n	8003356 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003354:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003382:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	e049      	b.n	800342a <HAL_I2C_Mem_Read_DMA+0x312>
 8003396:	bf00      	nop
 8003398:	20000000 	.word	0x20000000
 800339c:	14f8b589 	.word	0x14f8b589
 80033a0:	ffff0000 	.word	0xffff0000
 80033a4:	08003785 	.word	0x08003785
 80033a8:	08003943 	.word	0x08003943
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	f043 0210 	orr.w	r2, r3, #16
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e02d      	b.n	8003430 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80033d4:	88f8      	ldrh	r0, [r7, #6]
 80033d6:	893a      	ldrh	r2, [r7, #8]
 80033d8:	8979      	ldrh	r1, [r7, #10]
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	2323      	movs	r3, #35	@ 0x23
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	4603      	mov	r3, r0
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f8e5 	bl	80035b4 <I2C_RequestMemoryRead>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e01d      	b.n	8003430 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003418:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800342e:	2302      	movs	r3, #2
  }
}
 8003430:	4618      	mov	r0, r3
 8003432:	3728      	adds	r7, #40	@ 0x28
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	4608      	mov	r0, r1
 8003492:	4611      	mov	r1, r2
 8003494:	461a      	mov	r2, r3
 8003496:	4603      	mov	r3, r0
 8003498:	817b      	strh	r3, [r7, #10]
 800349a:	460b      	mov	r3, r1
 800349c:	813b      	strh	r3, [r7, #8]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fa7c 	bl	80039bc <I2C_WaitOnFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034d8:	d103      	bne.n	80034e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e05f      	b.n	80035a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	6a3a      	ldr	r2, [r7, #32]
 80034fa:	492d      	ldr	r1, [pc, #180]	@ (80035b0 <I2C_RequestMemoryWrite+0x128>)
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fad7 	bl	8003ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e04c      	b.n	80035a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003524:	6a39      	ldr	r1, [r7, #32]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fb62 	bl	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00d      	beq.n	800354e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	2b04      	cmp	r3, #4
 8003538:	d107      	bne.n	800354a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003548:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e02b      	b.n	80035a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d105      	bne.n	8003560 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003554:	893b      	ldrh	r3, [r7, #8]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	611a      	str	r2, [r3, #16]
 800355e:	e021      	b.n	80035a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003560:	893b      	ldrh	r3, [r7, #8]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	b29b      	uxth	r3, r3
 8003566:	b2da      	uxtb	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800356e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003570:	6a39      	ldr	r1, [r7, #32]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fb3c 	bl	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00d      	beq.n	800359a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	2b04      	cmp	r3, #4
 8003584:	d107      	bne.n	8003596 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003594:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e005      	b.n	80035a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800359a:	893b      	ldrh	r3, [r7, #8]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	00010002 	.word	0x00010002

080035b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	4608      	mov	r0, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	461a      	mov	r2, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	817b      	strh	r3, [r7, #10]
 80035c6:	460b      	mov	r3, r1
 80035c8:	813b      	strh	r3, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f9de 	bl	80039bc <I2C_WaitOnFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00d      	beq.n	8003622 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003610:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003614:	d103      	bne.n	800361e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800361c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e0aa      	b.n	8003778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003622:	897b      	ldrh	r3, [r7, #10]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003630:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	6a3a      	ldr	r2, [r7, #32]
 8003636:	4952      	ldr	r1, [pc, #328]	@ (8003780 <I2C_RequestMemoryRead+0x1cc>)
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fa39 	bl	8003ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e097      	b.n	8003778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003660:	6a39      	ldr	r1, [r7, #32]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fac4 	bl	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	2b04      	cmp	r3, #4
 8003674:	d107      	bne.n	8003686 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003684:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e076      	b.n	8003778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003690:	893b      	ldrh	r3, [r7, #8]
 8003692:	b2da      	uxtb	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	611a      	str	r2, [r3, #16]
 800369a:	e021      	b.n	80036e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800369c:	893b      	ldrh	r3, [r7, #8]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ac:	6a39      	ldr	r1, [r7, #32]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 fa9e 	bl	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00d      	beq.n	80036d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d107      	bne.n	80036d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e050      	b.n	8003778 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036d6:	893b      	ldrh	r3, [r7, #8]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e2:	6a39      	ldr	r1, [r7, #32]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fa83 	bl	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d107      	bne.n	8003708 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003706:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e035      	b.n	8003778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800371a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800371c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	2200      	movs	r2, #0
 8003724:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f947 	bl	80039bc <I2C_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00d      	beq.n	8003750 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003742:	d103      	bne.n	800374c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800374a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e013      	b.n	8003778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003750:	897b      	ldrh	r3, [r7, #10]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003762:	6a3a      	ldr	r2, [r7, #32]
 8003764:	4906      	ldr	r1, [pc, #24]	@ (8003780 <I2C_RequestMemoryRead+0x1cc>)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f9a2 	bl	8003ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	00010002 	.word	0x00010002

08003784 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003790:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003798:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037a0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80037b6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c4:	2200      	movs	r2, #0
 80037c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d4:	2200      	movs	r2, #0
 80037d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80037de:	2b21      	cmp	r3, #33	@ 0x21
 80037e0:	d007      	beq.n	80037f2 <I2C_DMAXferCplt+0x6e>
 80037e2:	7cfb      	ldrb	r3, [r7, #19]
 80037e4:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80037e8:	2b22      	cmp	r3, #34	@ 0x22
 80037ea:	d131      	bne.n	8003850 <I2C_DMAXferCplt+0xcc>
 80037ec:	7cbb      	ldrb	r3, [r7, #18]
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d12e      	bne.n	8003850 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003800:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2200      	movs	r2, #0
 8003806:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	2b29      	cmp	r3, #41	@ 0x29
 800380c:	d10a      	bne.n	8003824 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2221      	movs	r2, #33	@ 0x21
 8003812:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2228      	movs	r2, #40	@ 0x28
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800381c:	6978      	ldr	r0, [r7, #20]
 800381e:	f7ff fe15 	bl	800344c <HAL_I2C_SlaveTxCpltCallback>
 8003822:	e00c      	b.n	800383e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	2b2a      	cmp	r3, #42	@ 0x2a
 8003828:	d109      	bne.n	800383e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2222      	movs	r2, #34	@ 0x22
 800382e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2228      	movs	r2, #40	@ 0x28
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003838:	6978      	ldr	r0, [r7, #20]
 800383a:	f7ff fe11 	bl	8003460 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800384c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800384e:	e074      	b.n	800393a <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d06e      	beq.n	800393a <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	d107      	bne.n	8003876 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003874:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003884:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800388c:	d009      	beq.n	80038a2 <I2C_DMAXferCplt+0x11e>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b08      	cmp	r3, #8
 8003892:	d006      	beq.n	80038a2 <I2C_DMAXferCplt+0x11e>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800389a:	d002      	beq.n	80038a2 <I2C_DMAXferCplt+0x11e>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d107      	bne.n	80038b2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038c0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038d0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2200      	movs	r2, #0
 80038d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80038e0:	6978      	ldr	r0, [r7, #20]
 80038e2:	f7ff fdc7 	bl	8003474 <HAL_I2C_ErrorCallback>
}
 80038e6:	e028      	b.n	800393a <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b40      	cmp	r3, #64	@ 0x40
 80038fa:	d10a      	bne.n	8003912 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2200      	movs	r2, #0
 8003908:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800390a:	6978      	ldr	r0, [r7, #20]
 800390c:	f7fd fdf8 	bl	8001500 <HAL_I2C_MemRxCpltCallback>
}
 8003910:	e013      	b.n	800393a <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d002      	beq.n	8003926 <I2C_DMAXferCplt+0x1a2>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b20      	cmp	r3, #32
 8003924:	d103      	bne.n	800392e <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	@ 0x30
 800392c:	e002      	b.n	8003934 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2212      	movs	r2, #18
 8003932:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003934:	6978      	ldr	r0, [r7, #20]
 8003936:	f7ff fd7f 	bl	8003438 <HAL_I2C_MasterRxCpltCallback>
}
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395c:	2200      	movs	r2, #0
 800395e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396c:	2200      	movs	r2, #0
 800396e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fe fcd9 	bl	8002328 <HAL_DMA_GetError>
 8003976:	4603      	mov	r3, r0
 8003978:	2b02      	cmp	r3, #2
 800397a:	d01b      	beq.n	80039b4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800398a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	f043 0210 	orr.w	r2, r3, #16
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f7ff fd60 	bl	8003474 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039cc:	e048      	b.n	8003a60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d044      	beq.n	8003a60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d6:	f7fe f8b3 	bl	8001b40 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d302      	bcc.n	80039ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d139      	bne.n	8003a60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	0c1b      	lsrs	r3, r3, #16
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d10d      	bne.n	8003a12 <I2C_WaitOnFlagUntilTimeout+0x56>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	43da      	mvns	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	4013      	ands	r3, r2
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	e00c      	b.n	8003a2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	43da      	mvns	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d116      	bne.n	8003a60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	f043 0220 	orr.w	r2, r3, #32
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e023      	b.n	8003aa8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	0c1b      	lsrs	r3, r3, #16
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d10d      	bne.n	8003a86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	43da      	mvns	r2, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4013      	ands	r3, r2
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	461a      	mov	r2, r3
 8003a84:	e00c      	b.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	43da      	mvns	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4013      	ands	r3, r2
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d093      	beq.n	80039ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003abe:	e071      	b.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ace:	d123      	bne.n	8003b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ade:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ae8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	f043 0204 	orr.w	r2, r3, #4
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e067      	b.n	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d041      	beq.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b20:	f7fe f80e 	bl	8001b40 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d302      	bcc.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d136      	bne.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d10c      	bne.n	8003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	43da      	mvns	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	bf14      	ite	ne
 8003b52:	2301      	movne	r3, #1
 8003b54:	2300      	moveq	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	e00b      	b.n	8003b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	43da      	mvns	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4013      	ands	r3, r2
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d016      	beq.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e021      	b.n	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	0c1b      	lsrs	r3, r3, #16
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d10c      	bne.n	8003bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	43da      	mvns	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf14      	ite	ne
 8003bc0:	2301      	movne	r3, #1
 8003bc2:	2300      	moveq	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	e00b      	b.n	8003be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bf14      	ite	ne
 8003bda:	2301      	movne	r3, #1
 8003bdc:	2300      	moveq	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f47f af6d 	bne.w	8003ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bfc:	e034      	b.n	8003c68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f8e3 	bl	8003dca <I2C_IsAcknowledgeFailed>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e034      	b.n	8003c78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c14:	d028      	beq.n	8003c68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c16:	f7fd ff93 	bl	8001b40 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d302      	bcc.n	8003c2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d11d      	bne.n	8003c68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c36:	2b80      	cmp	r3, #128	@ 0x80
 8003c38:	d016      	beq.n	8003c68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e007      	b.n	8003c78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c72:	2b80      	cmp	r3, #128	@ 0x80
 8003c74:	d1c3      	bne.n	8003bfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c8c:	e034      	b.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f89b 	bl	8003dca <I2C_IsAcknowledgeFailed>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e034      	b.n	8003d08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d028      	beq.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca6:	f7fd ff4b 	bl	8001b40 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d11d      	bne.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d016      	beq.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e007      	b.n	8003d08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d1c3      	bne.n	8003c8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d1c:	e049      	b.n	8003db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d119      	bne.n	8003d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0210 	mvn.w	r2, #16
 8003d34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e030      	b.n	8003dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d60:	f7fd feee 	bl	8001b40 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d302      	bcc.n	8003d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d11d      	bne.n	8003db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d80:	2b40      	cmp	r3, #64	@ 0x40
 8003d82:	d016      	beq.n	8003db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e007      	b.n	8003dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbc:	2b40      	cmp	r3, #64	@ 0x40
 8003dbe:	d1ae      	bne.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de0:	d11b      	bne.n	8003e1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	f043 0204 	orr.w	r2, r3, #4
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e101      	b.n	800403e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d106      	bne.n	8003e5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f005 fbdd 	bl	8009614 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e68:	d102      	bne.n	8003e70 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f001 ffc4 	bl	8005e02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	7c1a      	ldrb	r2, [r3, #16]
 8003e82:	f88d 2000 	strb.w	r2, [sp]
 8003e86:	3304      	adds	r3, #4
 8003e88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e8a:	f001 fea3 	bl	8005bd4 <USB_CoreInit>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0ce      	b.n	800403e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 ffbc 	bl	8005e24 <USB_SetCurrentMode>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e0bf      	b.n	800403e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]
 8003ec2:	e04a      	b.n	8003f5a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ec4:	7bfa      	ldrb	r2, [r7, #15]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	3315      	adds	r3, #21
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ed8:	7bfa      	ldrb	r2, [r7, #15]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	3314      	adds	r3, #20
 8003ee8:	7bfa      	ldrb	r2, [r7, #15]
 8003eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003eec:	7bfa      	ldrb	r2, [r7, #15]
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	b298      	uxth	r0, r3
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	332e      	adds	r3, #46	@ 0x2e
 8003f00:	4602      	mov	r2, r0
 8003f02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	3318      	adds	r3, #24
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f18:	7bfa      	ldrb	r2, [r7, #15]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	331c      	adds	r3, #28
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	3320      	adds	r3, #32
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f40:	7bfa      	ldrb	r2, [r7, #15]
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	3324      	adds	r3, #36	@ 0x24
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	3301      	adds	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	791b      	ldrb	r3, [r3, #4]
 8003f5e:	7bfa      	ldrb	r2, [r7, #15]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d3af      	bcc.n	8003ec4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f64:	2300      	movs	r3, #0
 8003f66:	73fb      	strb	r3, [r7, #15]
 8003f68:	e044      	b.n	8003ff4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f6a:	7bfa      	ldrb	r2, [r7, #15]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003f92:	7bfa      	ldrb	r2, [r7, #15]
 8003f94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f96:	7bfa      	ldrb	r2, [r7, #15]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fac:	7bfa      	ldrb	r2, [r7, #15]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fc2:	7bfa      	ldrb	r2, [r7, #15]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fd8:	7bfa      	ldrb	r2, [r7, #15]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	791b      	ldrb	r3, [r3, #4]
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d3b5      	bcc.n	8003f6a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	7c1a      	ldrb	r2, [r3, #16]
 8004006:	f88d 2000 	strb.w	r2, [sp]
 800400a:	3304      	adds	r3, #4
 800400c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800400e:	f001 ff55 	bl	8005ebc <USB_DevInit>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e00c      	b.n	800403e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f002 ff9f 	bl	8006f7a <USB_DevDisconnect>

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_PCD_Start+0x1c>
 800405e:	2302      	movs	r3, #2
 8004060:	e022      	b.n	80040a8 <HAL_PCD_Start+0x62>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800407a:	2b01      	cmp	r3, #1
 800407c:	d105      	bne.n	800408a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004082:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f001 fea6 	bl	8005de0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f002 ff4d 	bl	8006f38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b08d      	sub	sp, #52	@ 0x34
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f003 f80b 	bl	80070e2 <USB_GetMode>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f040 848c 	bne.w	80049ec <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f002 ff6f 	bl	8006fbc <USB_ReadInterrupts>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8482 	beq.w	80049ea <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f002 ff5c 	bl	8006fbc <USB_ReadInterrupts>
 8004104:	4603      	mov	r3, r0
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d107      	bne.n	800411e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695a      	ldr	r2, [r3, #20]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f002 0202 	and.w	r2, r2, #2
 800411c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f002 ff4a 	bl	8006fbc <USB_ReadInterrupts>
 8004128:	4603      	mov	r3, r0
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b10      	cmp	r3, #16
 8004130:	d161      	bne.n	80041f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699a      	ldr	r2, [r3, #24]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0210 	bic.w	r2, r2, #16
 8004140:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	f003 020f 	and.w	r2, r3, #15
 800414e:	4613      	mov	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	4413      	add	r3, r2
 800415e:	3304      	adds	r3, #4
 8004160:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	0c5b      	lsrs	r3, r3, #17
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	2b02      	cmp	r3, #2
 800416c:	d124      	bne.n	80041b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d035      	beq.n	80041e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004188:	b29b      	uxth	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	6a38      	ldr	r0, [r7, #32]
 800418e:	f002 fd81 	bl	8006c94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800419e:	441a      	add	r2, r3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041b0:	441a      	add	r2, r3
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	615a      	str	r2, [r3, #20]
 80041b6:	e016      	b.n	80041e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	0c5b      	lsrs	r3, r3, #17
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	2b06      	cmp	r3, #6
 80041c2:	d110      	bne.n	80041e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041ca:	2208      	movs	r2, #8
 80041cc:	4619      	mov	r1, r3
 80041ce:	6a38      	ldr	r0, [r7, #32]
 80041d0:	f002 fd60 	bl	8006c94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	695a      	ldr	r2, [r3, #20]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041e0:	441a      	add	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699a      	ldr	r2, [r3, #24]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0210 	orr.w	r2, r2, #16
 80041f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f002 fede 	bl	8006fbc <USB_ReadInterrupts>
 8004200:	4603      	mov	r3, r0
 8004202:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004206:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800420a:	f040 80a7 	bne.w	800435c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f002 fee3 	bl	8006fe2 <USB_ReadDevAllOutEpInterrupt>
 800421c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800421e:	e099      	b.n	8004354 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 808e 	beq.w	8004348 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	4611      	mov	r1, r2
 8004236:	4618      	mov	r0, r3
 8004238:	f002 ff07 	bl	800704a <USB_ReadDevOutEPInterrupt>
 800423c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00c      	beq.n	8004262 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004254:	461a      	mov	r2, r3
 8004256:	2301      	movs	r3, #1
 8004258:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800425a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fea3 	bl	8004fa8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00c      	beq.n	8004286 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004278:	461a      	mov	r2, r3
 800427a:	2308      	movs	r3, #8
 800427c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800427e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 ff79 	bl	8005178 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800429c:	461a      	mov	r2, r3
 800429e:	2310      	movs	r3, #16
 80042a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d030      	beq.n	800430e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b4:	2b80      	cmp	r3, #128	@ 0x80
 80042b6:	d109      	bne.n	80042cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80042cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	4413      	add	r3, r2
 80042de:	3304      	adds	r3, #4
 80042e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	78db      	ldrb	r3, [r3, #3]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d108      	bne.n	80042fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2200      	movs	r2, #0
 80042ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	4619      	mov	r1, r3
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f005 fa92 	bl	8009820 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004308:	461a      	mov	r2, r3
 800430a:	2302      	movs	r3, #2
 800430c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004324:	461a      	mov	r2, r3
 8004326:	2320      	movs	r3, #32
 8004328:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d009      	beq.n	8004348 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004340:	461a      	mov	r2, r3
 8004342:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004346:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434a:	3301      	adds	r3, #1
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800434e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004356:	2b00      	cmp	r3, #0
 8004358:	f47f af62 	bne.w	8004220 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f002 fe2b 	bl	8006fbc <USB_ReadInterrupts>
 8004366:	4603      	mov	r3, r0
 8004368:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800436c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004370:	f040 80db 	bne.w	800452a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f002 fe4c 	bl	8007016 <USB_ReadDevAllInEpInterrupt>
 800437e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004384:	e0cd      	b.n	8004522 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80c2 	beq.w	8004516 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	4611      	mov	r1, r2
 800439c:	4618      	mov	r0, r3
 800439e:	f002 fe72 	bl	8007086 <USB_ReadDevInEPInterrupt>
 80043a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d057      	beq.n	800445e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	2201      	movs	r2, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	43db      	mvns	r3, r3
 80043c8:	69f9      	ldr	r1, [r7, #28]
 80043ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043ce:	4013      	ands	r3, r2
 80043d0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043de:	461a      	mov	r2, r3
 80043e0:	2301      	movs	r3, #1
 80043e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	799b      	ldrb	r3, [r3, #6]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d132      	bne.n	8004452 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f0:	4613      	mov	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	3320      	adds	r3, #32
 80043fc:	6819      	ldr	r1, [r3, #0]
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004402:	4613      	mov	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4403      	add	r3, r0
 800440c:	331c      	adds	r3, #28
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4419      	add	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4403      	add	r3, r0
 8004420:	3320      	adds	r3, #32
 8004422:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	d113      	bne.n	8004452 <HAL_PCD_IRQHandler+0x3a2>
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	3324      	adds	r3, #36	@ 0x24
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d108      	bne.n	8004452 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800444a:	461a      	mov	r2, r3
 800444c:	2101      	movs	r1, #1
 800444e:	f002 fe79 	bl	8007144 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	b2db      	uxtb	r3, r3
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f005 f95c 	bl	8009716 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004474:	461a      	mov	r2, r3
 8004476:	2308      	movs	r3, #8
 8004478:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004490:	461a      	mov	r2, r3
 8004492:	2310      	movs	r3, #16
 8004494:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044ac:	461a      	mov	r2, r3
 80044ae:	2340      	movs	r3, #64	@ 0x40
 80044b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d023      	beq.n	8004504 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80044bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044be:	6a38      	ldr	r0, [r7, #32]
 80044c0:	f001 fe60 	bl	8006184 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80044c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	3310      	adds	r3, #16
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	4413      	add	r3, r2
 80044d4:	3304      	adds	r3, #4
 80044d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	78db      	ldrb	r3, [r3, #3]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d108      	bne.n	80044f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2200      	movs	r2, #0
 80044e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f005 f9a9 	bl	8009844 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044fe:	461a      	mov	r2, r3
 8004500:	2302      	movs	r3, #2
 8004502:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800450e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fcbd 	bl	8004e90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	3301      	adds	r3, #1
 800451a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800451c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	f47f af2e 	bne.w	8004386 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f002 fd44 	bl	8006fbc <USB_ReadInterrupts>
 8004534:	4603      	mov	r3, r0
 8004536:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800453a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800453e:	d122      	bne.n	8004586 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800455a:	2b01      	cmp	r3, #1
 800455c:	d108      	bne.n	8004570 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004566:	2100      	movs	r1, #0
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fea3 	bl	80052b4 <HAL_PCDEx_LPM_Callback>
 800456e:	e002      	b.n	8004576 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f005 f947 	bl	8009804 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f002 fd16 	bl	8006fbc <USB_ReadInterrupts>
 8004590:	4603      	mov	r3, r0
 8004592:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004596:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800459a:	d112      	bne.n	80045c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d102      	bne.n	80045b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f005 f903 	bl	80097b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695a      	ldr	r2, [r3, #20]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80045c0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f002 fcf8 	bl	8006fbc <USB_ReadInterrupts>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045d6:	f040 80b7 	bne.w	8004748 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045e8:	f023 0301 	bic.w	r3, r3, #1
 80045ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2110      	movs	r1, #16
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 fdc5 	bl	8006184 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045fe:	e046      	b.n	800468e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800460c:	461a      	mov	r2, r3
 800460e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004612:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004624:	0151      	lsls	r1, r2, #5
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	440a      	add	r2, r1
 800462a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800462e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004632:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004640:	461a      	mov	r2, r3
 8004642:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004646:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004658:	0151      	lsls	r1, r2, #5
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	440a      	add	r2, r1
 800465e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004662:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004666:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004678:	0151      	lsls	r1, r2, #5
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	440a      	add	r2, r1
 800467e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004682:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004686:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468a:	3301      	adds	r3, #1
 800468c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	791b      	ldrb	r3, [r3, #4]
 8004692:	461a      	mov	r2, r3
 8004694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004696:	4293      	cmp	r3, r2
 8004698:	d3b2      	bcc.n	8004600 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046a8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80046ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7bdb      	ldrb	r3, [r3, #15]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d016      	beq.n	80046e4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046c6:	f043 030b 	orr.w	r3, r3, #11
 80046ca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046dc:	f043 030b 	orr.w	r3, r3, #11
 80046e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80046e2:	e015      	b.n	8004710 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80046f6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80046fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800470a:	f043 030b 	orr.w	r3, r3, #11
 800470e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800471e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004722:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004732:	461a      	mov	r2, r3
 8004734:	f002 fd06 	bl	8007144 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f002 fc35 	bl	8006fbc <USB_ReadInterrupts>
 8004752:	4603      	mov	r3, r0
 8004754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800475c:	d123      	bne.n	80047a6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f002 fccb 	bl	80070fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f001 fd82 	bl	8006276 <USB_GetDevSpeed>
 8004772:	4603      	mov	r3, r0
 8004774:	461a      	mov	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681c      	ldr	r4, [r3, #0]
 800477e:	f001 fa09 	bl	8005b94 <HAL_RCC_GetHCLKFreq>
 8004782:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004788:	461a      	mov	r2, r3
 800478a:	4620      	mov	r0, r4
 800478c:	f001 fa86 	bl	8005c9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f004 ffe8 	bl	8009766 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695a      	ldr	r2, [r3, #20]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80047a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f002 fc06 	bl	8006fbc <USB_ReadInterrupts>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d10a      	bne.n	80047d0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f004 ffc5 	bl	800974a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f002 0208 	and.w	r2, r2, #8
 80047ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f002 fbf1 	bl	8006fbc <USB_ReadInterrupts>
 80047da:	4603      	mov	r3, r0
 80047dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e0:	2b80      	cmp	r3, #128	@ 0x80
 80047e2:	d123      	bne.n	800482c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f0:	2301      	movs	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f4:	e014      	b.n	8004820 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fa:	4613      	mov	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d105      	bne.n	800481a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	b2db      	uxtb	r3, r3
 8004812:	4619      	mov	r1, r3
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fb0a 	bl	8004e2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	3301      	adds	r3, #1
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	791b      	ldrb	r3, [r3, #4]
 8004824:	461a      	mov	r2, r3
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	4293      	cmp	r3, r2
 800482a:	d3e4      	bcc.n	80047f6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f002 fbc3 	bl	8006fbc <USB_ReadInterrupts>
 8004836:	4603      	mov	r3, r0
 8004838:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800483c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004840:	d13c      	bne.n	80048bc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004842:	2301      	movs	r3, #1
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24
 8004846:	e02b      	b.n	80048a0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485c:	4613      	mov	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	3318      	adds	r3, #24
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d115      	bne.n	800489a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800486e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004870:	2b00      	cmp	r3, #0
 8004872:	da12      	bge.n	800489a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004878:	4613      	mov	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	3317      	adds	r3, #23
 8004884:	2201      	movs	r2, #1
 8004886:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004890:	b2db      	uxtb	r3, r3
 8004892:	4619      	mov	r1, r3
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 faca 	bl	8004e2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	3301      	adds	r3, #1
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	791b      	ldrb	r3, [r3, #4]
 80048a4:	461a      	mov	r2, r3
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d3cd      	bcc.n	8004848 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80048ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f002 fb7b 	bl	8006fbc <USB_ReadInterrupts>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048d0:	d156      	bne.n	8004980 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048d2:	2301      	movs	r3, #1
 80048d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048d6:	e045      	b.n	8004964 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ec:	4613      	mov	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d12e      	bne.n	800495e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004900:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004902:	2b00      	cmp	r3, #0
 8004904:	da2b      	bge.n	800495e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004912:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004916:	429a      	cmp	r2, r3
 8004918:	d121      	bne.n	800495e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800491e:	4613      	mov	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800492c:	2201      	movs	r2, #1
 800492e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004956:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800495a:	6053      	str	r3, [r2, #4]
            break;
 800495c:	e008      	b.n	8004970 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	3301      	adds	r3, #1
 8004962:	627b      	str	r3, [r7, #36]	@ 0x24
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	791b      	ldrb	r3, [r3, #4]
 8004968:	461a      	mov	r2, r3
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	4293      	cmp	r3, r2
 800496e:	d3b3      	bcc.n	80048d8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695a      	ldr	r2, [r3, #20]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800497e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f002 fb19 	bl	8006fbc <USB_ReadInterrupts>
 800498a:	4603      	mov	r3, r0
 800498c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004994:	d10a      	bne.n	80049ac <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f004 ff66 	bl	8009868 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80049aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f002 fb03 	bl	8006fbc <USB_ReadInterrupts>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d115      	bne.n	80049ec <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f004 ff56 	bl	8009884 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6859      	ldr	r1, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	605a      	str	r2, [r3, #4]
 80049e8:	e000      	b.n	80049ec <HAL_PCD_IRQHandler+0x93c>
      return;
 80049ea:	bf00      	nop
    }
  }
}
 80049ec:	3734      	adds	r7, #52	@ 0x34
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd90      	pop	{r4, r7, pc}

080049f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	460b      	mov	r3, r1
 80049fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_PCD_SetAddress+0x1a>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e012      	b.n	8004a32 <HAL_PCD_SetAddress+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	78fa      	ldrb	r2, [r7, #3]
 8004a18:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f002 fa62 	bl	8006eec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	4608      	mov	r0, r1
 8004a44:	4611      	mov	r1, r2
 8004a46:	461a      	mov	r2, r3
 8004a48:	4603      	mov	r3, r0
 8004a4a:	70fb      	strb	r3, [r7, #3]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	803b      	strh	r3, [r7, #0]
 8004a50:	4613      	mov	r3, r2
 8004a52:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	da0f      	bge.n	8004a80 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	f003 020f 	and.w	r2, r3, #15
 8004a66:	4613      	mov	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	3310      	adds	r3, #16
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	4413      	add	r3, r2
 8004a74:	3304      	adds	r3, #4
 8004a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	705a      	strb	r2, [r3, #1]
 8004a7e:	e00f      	b.n	8004aa0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	f003 020f 	and.w	r2, r3, #15
 8004a86:	4613      	mov	r3, r2
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	4413      	add	r3, r2
 8004a96:	3304      	adds	r3, #4
 8004a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004aac:	883b      	ldrh	r3, [r7, #0]
 8004aae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	78ba      	ldrb	r2, [r7, #2]
 8004aba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	785b      	ldrb	r3, [r3, #1]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ace:	78bb      	ldrb	r3, [r7, #2]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d102      	bne.n	8004ada <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_PCD_EP_Open+0xae>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e00e      	b.n	8004b06 <HAL_PCD_EP_Open+0xcc>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68f9      	ldr	r1, [r7, #12]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 fbe2 	bl	80062c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004b04:	7afb      	ldrb	r3, [r7, #11]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	da0f      	bge.n	8004b42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	f003 020f 	and.w	r2, r3, #15
 8004b28:	4613      	mov	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	3310      	adds	r3, #16
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4413      	add	r3, r2
 8004b36:	3304      	adds	r3, #4
 8004b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	705a      	strb	r2, [r3, #1]
 8004b40:	e00f      	b.n	8004b62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	f003 020f 	and.w	r2, r3, #15
 8004b48:	4613      	mov	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	4413      	add	r3, r2
 8004b58:	3304      	adds	r3, #4
 8004b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_PCD_EP_Close+0x6e>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e00e      	b.n	8004b9a <HAL_PCD_EP_Close+0x8c>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68f9      	ldr	r1, [r7, #12]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 fc20 	bl	80063d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bb2:	7afb      	ldrb	r3, [r7, #11]
 8004bb4:	f003 020f 	and.w	r2, r3, #15
 8004bb8:	4613      	mov	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	3304      	adds	r3, #4
 8004bca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004be4:	7afb      	ldrb	r3, [r7, #11]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	799b      	ldrb	r3, [r3, #6]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d102      	bne.n	8004bfe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	799b      	ldrb	r3, [r3, #6]
 8004c06:	461a      	mov	r2, r3
 8004c08:	6979      	ldr	r1, [r7, #20]
 8004c0a:	f001 fcbd 	bl	8006588 <USB_EPStartXfer>

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	f003 020f 	and.w	r2, r3, #15
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004c3a:	681b      	ldr	r3, [r3, #0]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	460b      	mov	r3, r1
 8004c56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c58:	7afb      	ldrb	r3, [r7, #11]
 8004c5a:	f003 020f 	and.w	r2, r3, #15
 8004c5e:	4613      	mov	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	3310      	adds	r3, #16
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2201      	movs	r2, #1
 8004c86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c88:	7afb      	ldrb	r3, [r7, #11]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	799b      	ldrb	r3, [r3, #6]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d102      	bne.n	8004ca2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	799b      	ldrb	r3, [r3, #6]
 8004caa:	461a      	mov	r2, r3
 8004cac:	6979      	ldr	r1, [r7, #20]
 8004cae:	f001 fc6b 	bl	8006588 <USB_EPStartXfer>

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	7912      	ldrb	r2, [r2, #4]
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e04f      	b.n	8004d7a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	da0f      	bge.n	8004d02 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	f003 020f 	and.w	r2, r3, #15
 8004ce8:	4613      	mov	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	3310      	adds	r3, #16
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	705a      	strb	r2, [r3, #1]
 8004d00:	e00d      	b.n	8004d1e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d02:	78fa      	ldrb	r2, [r7, #3]
 8004d04:	4613      	mov	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4413      	add	r3, r2
 8004d14:	3304      	adds	r3, #4
 8004d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_PCD_EP_SetStall+0x82>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e01d      	b.n	8004d7a <HAL_PCD_EP_SetStall+0xbe>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68f9      	ldr	r1, [r7, #12]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f001 fff9 	bl	8006d44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d109      	bne.n	8004d70 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7999      	ldrb	r1, [r3, #6]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f002 f9ea 	bl	8007144 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	7912      	ldrb	r2, [r2, #4]
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d901      	bls.n	8004da0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e042      	b.n	8004e26 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	da0f      	bge.n	8004dc8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	f003 020f 	and.w	r2, r3, #15
 8004dae:	4613      	mov	r3, r2
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	3310      	adds	r3, #16
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	4413      	add	r3, r2
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	705a      	strb	r2, [r3, #1]
 8004dc6:	e00f      	b.n	8004de8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	f003 020f 	and.w	r2, r3, #15
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	3304      	adds	r3, #4
 8004de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dee:	78fb      	ldrb	r3, [r7, #3]
 8004df0:	f003 030f 	and.w	r3, r3, #15
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_PCD_EP_ClrStall+0x86>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e00e      	b.n	8004e26 <HAL_PCD_EP_ClrStall+0xa4>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68f9      	ldr	r1, [r7, #12]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f002 f802 	bl	8006e20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	da0c      	bge.n	8004e5c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	f003 020f 	and.w	r2, r3, #15
 8004e48:	4613      	mov	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	3310      	adds	r3, #16
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	4413      	add	r3, r2
 8004e56:	3304      	adds	r3, #4
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e00c      	b.n	8004e76 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	f003 020f 	and.w	r2, r3, #15
 8004e62:	4613      	mov	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4413      	add	r3, r2
 8004e72:	3304      	adds	r3, #4
 8004e74:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68f9      	ldr	r1, [r7, #12]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f001 fe21 	bl	8006ac4 <USB_EPStopXfer>
 8004e82:	4603      	mov	r3, r0
 8004e84:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e86:	7afb      	ldrb	r3, [r7, #11]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	@ 0x28
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	3310      	adds	r3, #16
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	695a      	ldr	r2, [r3, #20]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d901      	bls.n	8004ec8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e06b      	b.n	8004fa0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d902      	bls.n	8004ee4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	3303      	adds	r3, #3
 8004ee8:	089b      	lsrs	r3, r3, #2
 8004eea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004eec:	e02a      	b.n	8004f44 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d902      	bls.n	8004f0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3303      	adds	r3, #3
 8004f0e:	089b      	lsrs	r3, r3, #2
 8004f10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	68d9      	ldr	r1, [r3, #12]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	4603      	mov	r3, r0
 8004f26:	6978      	ldr	r0, [r7, #20]
 8004f28:	f001 fe76 	bl	8006c18 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	441a      	add	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	695a      	ldr	r2, [r3, #20]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	441a      	add	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d809      	bhi.n	8004f6e <PCD_WriteEmptyTxFifo+0xde>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	695a      	ldr	r2, [r3, #20]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d203      	bcs.n	8004f6e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1bf      	bne.n	8004eee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d811      	bhi.n	8004f9e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	2201      	movs	r2, #1
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	43db      	mvns	r3, r3
 8004f94:	6939      	ldr	r1, [r7, #16]
 8004f96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3720      	adds	r7, #32
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	333c      	adds	r3, #60	@ 0x3c
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	799b      	ldrb	r3, [r3, #6]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d17b      	bne.n	80050d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d015      	beq.n	8005014 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4a61      	ldr	r2, [pc, #388]	@ (8005170 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	f240 80b9 	bls.w	8005164 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80b3 	beq.w	8005164 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800500a:	461a      	mov	r2, r3
 800500c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005010:	6093      	str	r3, [r2, #8]
 8005012:	e0a7      	b.n	8005164 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800502a:	461a      	mov	r2, r3
 800502c:	2320      	movs	r3, #32
 800502e:	6093      	str	r3, [r2, #8]
 8005030:	e098      	b.n	8005164 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005038:	2b00      	cmp	r3, #0
 800503a:	f040 8093 	bne.w	8005164 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	4a4b      	ldr	r2, [pc, #300]	@ (8005170 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d90f      	bls.n	8005066 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800505c:	461a      	mov	r2, r3
 800505e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005062:	6093      	str	r3, [r2, #8]
 8005064:	e07e      	b.n	8005164 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	4413      	add	r3, r2
 8005078:	3304      	adds	r3, #4
 800507a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1a      	ldr	r2, [r3, #32]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	0159      	lsls	r1, r3, #5
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	440b      	add	r3, r1
 8005088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005092:	1ad2      	subs	r2, r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d114      	bne.n	80050c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050b0:	461a      	mov	r2, r3
 80050b2:	2101      	movs	r1, #1
 80050b4:	f002 f846 	bl	8007144 <USB_EP0_OutStart>
 80050b8:	e006      	b.n	80050c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	441a      	add	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	4619      	mov	r1, r3
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f004 fb06 	bl	80096e0 <HAL_PCD_DataOutStageCallback>
 80050d4:	e046      	b.n	8005164 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	4a26      	ldr	r2, [pc, #152]	@ (8005174 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d124      	bne.n	8005128 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f4:	461a      	mov	r2, r3
 80050f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050fa:	6093      	str	r3, [r2, #8]
 80050fc:	e032      	b.n	8005164 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005114:	461a      	mov	r2, r3
 8005116:	2320      	movs	r3, #32
 8005118:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	4619      	mov	r1, r3
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f004 fadd 	bl	80096e0 <HAL_PCD_DataOutStageCallback>
 8005126:	e01d      	b.n	8005164 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d114      	bne.n	8005158 <PCD_EP_OutXfrComplete_int+0x1b0>
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	4613      	mov	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	440b      	add	r3, r1
 800513c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d108      	bne.n	8005158 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005150:	461a      	mov	r2, r3
 8005152:	2100      	movs	r1, #0
 8005154:	f001 fff6 	bl	8007144 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	4619      	mov	r1, r3
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f004 fabe 	bl	80096e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	4f54300a 	.word	0x4f54300a
 8005174:	4f54310a 	.word	0x4f54310a

08005178 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	333c      	adds	r3, #60	@ 0x3c
 8005190:	3304      	adds	r3, #4
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a15      	ldr	r2, [pc, #84]	@ (8005200 <PCD_EP_OutSetupPacket_int+0x88>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d90e      	bls.n	80051cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d009      	beq.n	80051cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c4:	461a      	mov	r2, r3
 80051c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f004 fa75 	bl	80096bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005200 <PCD_EP_OutSetupPacket_int+0x88>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d90c      	bls.n	80051f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	799b      	ldrb	r3, [r3, #6]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d108      	bne.n	80051f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80051ec:	461a      	mov	r2, r3
 80051ee:	2101      	movs	r1, #1
 80051f0:	f001 ffa8 	bl	8007144 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	4f54300a 	.word	0x4f54300a

08005204 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
 8005210:	4613      	mov	r3, r2
 8005212:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d107      	bne.n	8005232 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005222:	883b      	ldrh	r3, [r7, #0]
 8005224:	0419      	lsls	r1, r3, #16
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	430a      	orrs	r2, r1
 800522e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005230:	e028      	b.n	8005284 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005238:	0c1b      	lsrs	r3, r3, #16
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4413      	add	r3, r2
 800523e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]
 8005244:	e00d      	b.n	8005262 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	3340      	adds	r3, #64	@ 0x40
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	0c1b      	lsrs	r3, r3, #16
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	4413      	add	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	3301      	adds	r3, #1
 8005260:	73fb      	strb	r3, [r7, #15]
 8005262:	7bfa      	ldrb	r2, [r7, #15]
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	3b01      	subs	r3, #1
 8005268:	429a      	cmp	r2, r3
 800526a:	d3ec      	bcc.n	8005246 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800526c:	883b      	ldrh	r3, [r7, #0]
 800526e:	0418      	lsls	r0, r3, #16
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	3b01      	subs	r3, #1
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	4302      	orrs	r2, r0
 800527c:	3340      	adds	r3, #64	@ 0x40
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	460b      	mov	r3, r1
 800529c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	887a      	ldrh	r2, [r7, #2]
 80052a4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e267      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d075      	beq.n	80053d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052ea:	4b88      	ldr	r3, [pc, #544]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d00c      	beq.n	8005310 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052f6:	4b85      	ldr	r3, [pc, #532]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d112      	bne.n	8005328 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005302:	4b82      	ldr	r3, [pc, #520]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800530a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800530e:	d10b      	bne.n	8005328 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005310:	4b7e      	ldr	r3, [pc, #504]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d05b      	beq.n	80053d4 <HAL_RCC_OscConfig+0x108>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d157      	bne.n	80053d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e242      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005330:	d106      	bne.n	8005340 <HAL_RCC_OscConfig+0x74>
 8005332:	4b76      	ldr	r3, [pc, #472]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a75      	ldr	r2, [pc, #468]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 8005338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	e01d      	b.n	800537c <HAL_RCC_OscConfig+0xb0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005348:	d10c      	bne.n	8005364 <HAL_RCC_OscConfig+0x98>
 800534a:	4b70      	ldr	r3, [pc, #448]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a6f      	ldr	r2, [pc, #444]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 8005350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4b6d      	ldr	r3, [pc, #436]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a6c      	ldr	r2, [pc, #432]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e00b      	b.n	800537c <HAL_RCC_OscConfig+0xb0>
 8005364:	4b69      	ldr	r3, [pc, #420]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a68      	ldr	r2, [pc, #416]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 800536a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4b66      	ldr	r3, [pc, #408]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a65      	ldr	r2, [pc, #404]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 8005376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800537a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d013      	beq.n	80053ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005384:	f7fc fbdc 	bl	8001b40 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800538c:	f7fc fbd8 	bl	8001b40 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b64      	cmp	r3, #100	@ 0x64
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e207      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539e:	4b5b      	ldr	r3, [pc, #364]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0xc0>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ac:	f7fc fbc8 	bl	8001b40 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b4:	f7fc fbc4 	bl	8001b40 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	@ 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e1f3      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053c6:	4b51      	ldr	r3, [pc, #324]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0xe8>
 80053d2:	e000      	b.n	80053d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d063      	beq.n	80054aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80053e2:	4b4a      	ldr	r3, [pc, #296]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00b      	beq.n	8005406 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ee:	4b47      	ldr	r3, [pc, #284]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d11c      	bne.n	8005434 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053fa:	4b44      	ldr	r3, [pc, #272]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d116      	bne.n	8005434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005406:	4b41      	ldr	r3, [pc, #260]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_RCC_OscConfig+0x152>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d001      	beq.n	800541e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e1c7      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541e:	4b3b      	ldr	r3, [pc, #236]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	4937      	ldr	r1, [pc, #220]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 800542e:	4313      	orrs	r3, r2
 8005430:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005432:	e03a      	b.n	80054aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d020      	beq.n	800547e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800543c:	4b34      	ldr	r3, [pc, #208]	@ (8005510 <HAL_RCC_OscConfig+0x244>)
 800543e:	2201      	movs	r2, #1
 8005440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005442:	f7fc fb7d 	bl	8001b40 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800544a:	f7fc fb79 	bl	8001b40 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e1a8      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800545c:	4b2b      	ldr	r3, [pc, #172]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0f0      	beq.n	800544a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005468:	4b28      	ldr	r3, [pc, #160]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	4925      	ldr	r1, [pc, #148]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 8005478:	4313      	orrs	r3, r2
 800547a:	600b      	str	r3, [r1, #0]
 800547c:	e015      	b.n	80054aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547e:	4b24      	ldr	r3, [pc, #144]	@ (8005510 <HAL_RCC_OscConfig+0x244>)
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005484:	f7fc fb5c 	bl	8001b40 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800548c:	f7fc fb58 	bl	8001b40 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e187      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549e:	4b1b      	ldr	r3, [pc, #108]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d036      	beq.n	8005524 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d016      	beq.n	80054ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054be:	4b15      	ldr	r3, [pc, #84]	@ (8005514 <HAL_RCC_OscConfig+0x248>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c4:	f7fc fb3c 	bl	8001b40 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054cc:	f7fc fb38 	bl	8001b40 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e167      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054de:	4b0b      	ldr	r3, [pc, #44]	@ (800550c <HAL_RCC_OscConfig+0x240>)
 80054e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x200>
 80054ea:	e01b      	b.n	8005524 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ec:	4b09      	ldr	r3, [pc, #36]	@ (8005514 <HAL_RCC_OscConfig+0x248>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f2:	f7fc fb25 	bl	8001b40 <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f8:	e00e      	b.n	8005518 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054fa:	f7fc fb21 	bl	8001b40 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d907      	bls.n	8005518 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e150      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
 800550c:	40023800 	.word	0x40023800
 8005510:	42470000 	.word	0x42470000
 8005514:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005518:	4b88      	ldr	r3, [pc, #544]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 800551a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1ea      	bne.n	80054fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8097 	beq.w	8005660 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005532:	2300      	movs	r3, #0
 8005534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005536:	4b81      	ldr	r3, [pc, #516]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10f      	bne.n	8005562 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]
 8005546:	4b7d      	ldr	r3, [pc, #500]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	4a7c      	ldr	r2, [pc, #496]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 800554c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005550:	6413      	str	r3, [r2, #64]	@ 0x40
 8005552:	4b7a      	ldr	r3, [pc, #488]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555a:	60bb      	str	r3, [r7, #8]
 800555c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800555e:	2301      	movs	r3, #1
 8005560:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005562:	4b77      	ldr	r3, [pc, #476]	@ (8005740 <HAL_RCC_OscConfig+0x474>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d118      	bne.n	80055a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800556e:	4b74      	ldr	r3, [pc, #464]	@ (8005740 <HAL_RCC_OscConfig+0x474>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a73      	ldr	r2, [pc, #460]	@ (8005740 <HAL_RCC_OscConfig+0x474>)
 8005574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800557a:	f7fc fae1 	bl	8001b40 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005582:	f7fc fadd 	bl	8001b40 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e10c      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005594:	4b6a      	ldr	r3, [pc, #424]	@ (8005740 <HAL_RCC_OscConfig+0x474>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d106      	bne.n	80055b6 <HAL_RCC_OscConfig+0x2ea>
 80055a8:	4b64      	ldr	r3, [pc, #400]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 80055aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ac:	4a63      	ldr	r2, [pc, #396]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 80055ae:	f043 0301 	orr.w	r3, r3, #1
 80055b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80055b4:	e01c      	b.n	80055f0 <HAL_RCC_OscConfig+0x324>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b05      	cmp	r3, #5
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCC_OscConfig+0x30c>
 80055be:	4b5f      	ldr	r3, [pc, #380]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 80055c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c2:	4a5e      	ldr	r2, [pc, #376]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 80055c4:	f043 0304 	orr.w	r3, r3, #4
 80055c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ca:	4b5c      	ldr	r3, [pc, #368]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 80055cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ce:	4a5b      	ldr	r2, [pc, #364]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80055d6:	e00b      	b.n	80055f0 <HAL_RCC_OscConfig+0x324>
 80055d8:	4b58      	ldr	r3, [pc, #352]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 80055da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055dc:	4a57      	ldr	r2, [pc, #348]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80055e4:	4b55      	ldr	r3, [pc, #340]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 80055e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e8:	4a54      	ldr	r2, [pc, #336]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 80055ea:	f023 0304 	bic.w	r3, r3, #4
 80055ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d015      	beq.n	8005624 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f8:	f7fc faa2 	bl	8001b40 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fe:	e00a      	b.n	8005616 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005600:	f7fc fa9e 	bl	8001b40 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e0cb      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005616:	4b49      	ldr	r3, [pc, #292]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 8005618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0ee      	beq.n	8005600 <HAL_RCC_OscConfig+0x334>
 8005622:	e014      	b.n	800564e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005624:	f7fc fa8c 	bl	8001b40 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800562a:	e00a      	b.n	8005642 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800562c:	f7fc fa88 	bl	8001b40 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e0b5      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005642:	4b3e      	ldr	r3, [pc, #248]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1ee      	bne.n	800562c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800564e:	7dfb      	ldrb	r3, [r7, #23]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d105      	bne.n	8005660 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005654:	4b39      	ldr	r3, [pc, #228]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	4a38      	ldr	r2, [pc, #224]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 800565a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800565e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 80a1 	beq.w	80057ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800566a:	4b34      	ldr	r3, [pc, #208]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 030c 	and.w	r3, r3, #12
 8005672:	2b08      	cmp	r3, #8
 8005674:	d05c      	beq.n	8005730 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d141      	bne.n	8005702 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567e:	4b31      	ldr	r3, [pc, #196]	@ (8005744 <HAL_RCC_OscConfig+0x478>)
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005684:	f7fc fa5c 	bl	8001b40 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800568c:	f7fc fa58 	bl	8001b40 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e087      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569e:	4b27      	ldr	r3, [pc, #156]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f0      	bne.n	800568c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69da      	ldr	r2, [r3, #28]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b8:	019b      	lsls	r3, r3, #6
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c0:	085b      	lsrs	r3, r3, #1
 80056c2:	3b01      	subs	r3, #1
 80056c4:	041b      	lsls	r3, r3, #16
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	061b      	lsls	r3, r3, #24
 80056ce:	491b      	ldr	r1, [pc, #108]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005744 <HAL_RCC_OscConfig+0x478>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056da:	f7fc fa31 	bl	8001b40 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e2:	f7fc fa2d 	bl	8001b40 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e05c      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056f4:	4b11      	ldr	r3, [pc, #68]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0f0      	beq.n	80056e2 <HAL_RCC_OscConfig+0x416>
 8005700:	e054      	b.n	80057ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005702:	4b10      	ldr	r3, [pc, #64]	@ (8005744 <HAL_RCC_OscConfig+0x478>)
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005708:	f7fc fa1a 	bl	8001b40 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005710:	f7fc fa16 	bl	8001b40 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e045      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005722:	4b06      	ldr	r3, [pc, #24]	@ (800573c <HAL_RCC_OscConfig+0x470>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1f0      	bne.n	8005710 <HAL_RCC_OscConfig+0x444>
 800572e:	e03d      	b.n	80057ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d107      	bne.n	8005748 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e038      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
 800573c:	40023800 	.word	0x40023800
 8005740:	40007000 	.word	0x40007000
 8005744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005748:	4b1b      	ldr	r3, [pc, #108]	@ (80057b8 <HAL_RCC_OscConfig+0x4ec>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d028      	beq.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005760:	429a      	cmp	r2, r3
 8005762:	d121      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800576e:	429a      	cmp	r2, r3
 8005770:	d11a      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005778:	4013      	ands	r3, r2
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800577e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005780:	4293      	cmp	r3, r2
 8005782:	d111      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578e:	085b      	lsrs	r3, r3, #1
 8005790:	3b01      	subs	r3, #1
 8005792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005794:	429a      	cmp	r2, r3
 8005796:	d107      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d001      	beq.n	80057ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e000      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40023800 	.word	0x40023800

080057bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0cc      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057d0:	4b68      	ldr	r3, [pc, #416]	@ (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d90c      	bls.n	80057f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057de:	4b65      	ldr	r3, [pc, #404]	@ (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e6:	4b63      	ldr	r3, [pc, #396]	@ (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d001      	beq.n	80057f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0b8      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d020      	beq.n	8005846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005810:	4b59      	ldr	r3, [pc, #356]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	4a58      	ldr	r2, [pc, #352]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800581a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005828:	4b53      	ldr	r3, [pc, #332]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	4a52      	ldr	r2, [pc, #328]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005834:	4b50      	ldr	r3, [pc, #320]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	494d      	ldr	r1, [pc, #308]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	4313      	orrs	r3, r2
 8005844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d044      	beq.n	80058dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d107      	bne.n	800586a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585a:	4b47      	ldr	r3, [pc, #284]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d119      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e07f      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d003      	beq.n	800587a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005876:	2b03      	cmp	r3, #3
 8005878:	d107      	bne.n	800588a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800587a:	4b3f      	ldr	r3, [pc, #252]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e06f      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800588a:	4b3b      	ldr	r3, [pc, #236]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e067      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800589a:	4b37      	ldr	r3, [pc, #220]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f023 0203 	bic.w	r2, r3, #3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	4934      	ldr	r1, [pc, #208]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058ac:	f7fc f948 	bl	8001b40 <HAL_GetTick>
 80058b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b2:	e00a      	b.n	80058ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b4:	f7fc f944 	bl	8001b40 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e04f      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 020c 	and.w	r2, r3, #12
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	429a      	cmp	r2, r3
 80058da:	d1eb      	bne.n	80058b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058dc:	4b25      	ldr	r3, [pc, #148]	@ (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d20c      	bcs.n	8005904 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ea:	4b22      	ldr	r3, [pc, #136]	@ (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f2:	4b20      	ldr	r3, [pc, #128]	@ (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e032      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005910:	4b19      	ldr	r3, [pc, #100]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	4916      	ldr	r1, [pc, #88]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800592e:	4b12      	ldr	r3, [pc, #72]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	490e      	ldr	r1, [pc, #56]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	4313      	orrs	r3, r2
 8005940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005942:	f000 f821 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8005946:	4602      	mov	r2, r0
 8005948:	4b0b      	ldr	r3, [pc, #44]	@ (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	091b      	lsrs	r3, r3, #4
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	490a      	ldr	r1, [pc, #40]	@ (800597c <HAL_RCC_ClockConfig+0x1c0>)
 8005954:	5ccb      	ldrb	r3, [r1, r3]
 8005956:	fa22 f303 	lsr.w	r3, r2, r3
 800595a:	4a09      	ldr	r2, [pc, #36]	@ (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800595c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800595e:	4b09      	ldr	r3, [pc, #36]	@ (8005984 <HAL_RCC_ClockConfig+0x1c8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f7fc f8a8 	bl	8001ab8 <HAL_InitTick>

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	40023c00 	.word	0x40023c00
 8005978:	40023800 	.word	0x40023800
 800597c:	0800db70 	.word	0x0800db70
 8005980:	20000000 	.word	0x20000000
 8005984:	20000004 	.word	0x20000004

08005988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800598c:	b094      	sub	sp, #80	@ 0x50
 800598e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059a0:	4b79      	ldr	r3, [pc, #484]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 030c 	and.w	r3, r3, #12
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d00d      	beq.n	80059c8 <HAL_RCC_GetSysClockFreq+0x40>
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	f200 80e1 	bhi.w	8005b74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <HAL_RCC_GetSysClockFreq+0x34>
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d003      	beq.n	80059c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80059ba:	e0db      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059bc:	4b73      	ldr	r3, [pc, #460]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x204>)
 80059be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059c0:	e0db      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059c2:	4b73      	ldr	r3, [pc, #460]	@ (8005b90 <HAL_RCC_GetSysClockFreq+0x208>)
 80059c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059c6:	e0d8      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059c8:	4b6f      	ldr	r3, [pc, #444]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059d2:	4b6d      	ldr	r3, [pc, #436]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d063      	beq.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059de:	4b6a      	ldr	r3, [pc, #424]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	099b      	lsrs	r3, r3, #6
 80059e4:	2200      	movs	r2, #0
 80059e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80059ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059f2:	2300      	movs	r3, #0
 80059f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80059fa:	4622      	mov	r2, r4
 80059fc:	462b      	mov	r3, r5
 80059fe:	f04f 0000 	mov.w	r0, #0
 8005a02:	f04f 0100 	mov.w	r1, #0
 8005a06:	0159      	lsls	r1, r3, #5
 8005a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a0c:	0150      	lsls	r0, r2, #5
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4621      	mov	r1, r4
 8005a14:	1a51      	subs	r1, r2, r1
 8005a16:	6139      	str	r1, [r7, #16]
 8005a18:	4629      	mov	r1, r5
 8005a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a2c:	4659      	mov	r1, fp
 8005a2e:	018b      	lsls	r3, r1, #6
 8005a30:	4651      	mov	r1, sl
 8005a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a36:	4651      	mov	r1, sl
 8005a38:	018a      	lsls	r2, r1, #6
 8005a3a:	4651      	mov	r1, sl
 8005a3c:	ebb2 0801 	subs.w	r8, r2, r1
 8005a40:	4659      	mov	r1, fp
 8005a42:	eb63 0901 	sbc.w	r9, r3, r1
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a5a:	4690      	mov	r8, r2
 8005a5c:	4699      	mov	r9, r3
 8005a5e:	4623      	mov	r3, r4
 8005a60:	eb18 0303 	adds.w	r3, r8, r3
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	462b      	mov	r3, r5
 8005a68:	eb49 0303 	adc.w	r3, r9, r3
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	024b      	lsls	r3, r1, #9
 8005a7e:	4621      	mov	r1, r4
 8005a80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a84:	4621      	mov	r1, r4
 8005a86:	024a      	lsls	r2, r1, #9
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a8e:	2200      	movs	r2, #0
 8005a90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a98:	f7fb f8d6 	bl	8000c48 <__aeabi_uldivmod>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aa4:	e058      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa6:	4b38      	ldr	r3, [pc, #224]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	099b      	lsrs	r3, r3, #6
 8005aac:	2200      	movs	r2, #0
 8005aae:	4618      	mov	r0, r3
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ab6:	623b      	str	r3, [r7, #32]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005abc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	f04f 0000 	mov.w	r0, #0
 8005ac8:	f04f 0100 	mov.w	r1, #0
 8005acc:	0159      	lsls	r1, r3, #5
 8005ace:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ad2:	0150      	lsls	r0, r2, #5
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4641      	mov	r1, r8
 8005ada:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ade:	4649      	mov	r1, r9
 8005ae0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005af0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005af4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005af8:	ebb2 040a 	subs.w	r4, r2, sl
 8005afc:	eb63 050b 	sbc.w	r5, r3, fp
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	00eb      	lsls	r3, r5, #3
 8005b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b0e:	00e2      	lsls	r2, r4, #3
 8005b10:	4614      	mov	r4, r2
 8005b12:	461d      	mov	r5, r3
 8005b14:	4643      	mov	r3, r8
 8005b16:	18e3      	adds	r3, r4, r3
 8005b18:	603b      	str	r3, [r7, #0]
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	eb45 0303 	adc.w	r3, r5, r3
 8005b20:	607b      	str	r3, [r7, #4]
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b2e:	4629      	mov	r1, r5
 8005b30:	028b      	lsls	r3, r1, #10
 8005b32:	4621      	mov	r1, r4
 8005b34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b38:	4621      	mov	r1, r4
 8005b3a:	028a      	lsls	r2, r1, #10
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b42:	2200      	movs	r2, #0
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	61fa      	str	r2, [r7, #28]
 8005b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b4c:	f7fb f87c 	bl	8000c48 <__aeabi_uldivmod>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4613      	mov	r3, r2
 8005b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005b58:	4b0b      	ldr	r3, [pc, #44]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	0c1b      	lsrs	r3, r3, #16
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	3301      	adds	r3, #1
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005b68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b72:	e002      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b74:	4b05      	ldr	r3, [pc, #20]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3750      	adds	r7, #80	@ 0x50
 8005b80:	46bd      	mov	sp, r7
 8005b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b86:	bf00      	nop
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	00f42400 	.word	0x00f42400
 8005b90:	007a1200 	.word	0x007a1200

08005b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b98:	4b03      	ldr	r3, [pc, #12]	@ (8005ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	20000000 	.word	0x20000000

08005bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005bb0:	f7ff fff0 	bl	8005b94 <HAL_RCC_GetHCLKFreq>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	4b05      	ldr	r3, [pc, #20]	@ (8005bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	0a9b      	lsrs	r3, r3, #10
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	4903      	ldr	r1, [pc, #12]	@ (8005bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bc2:	5ccb      	ldrb	r3, [r1, r3]
 8005bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	0800db80 	.word	0x0800db80

08005bd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	f107 001c 	add.w	r0, r7, #28
 8005be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005be6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d123      	bne.n	8005c36 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005c02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d105      	bne.n	8005c2a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 fae8 	bl	8007200 <USB_CoreReset>
 8005c30:	4603      	mov	r3, r0
 8005c32:	73fb      	strb	r3, [r7, #15]
 8005c34:	e01b      	b.n	8005c6e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f001 fadc 	bl	8007200 <USB_CoreReset>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c4c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d106      	bne.n	8005c62 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c60:	e005      	b.n	8005c6e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c6e:	7fbb      	ldrb	r3, [r7, #30]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d10b      	bne.n	8005c8c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f043 0206 	orr.w	r2, r3, #6
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f043 0220 	orr.w	r2, r3, #32
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c98:	b004      	add	sp, #16
 8005c9a:	4770      	bx	lr

08005c9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d165      	bne.n	8005d7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4a41      	ldr	r2, [pc, #260]	@ (8005db8 <USB_SetTurnaroundTime+0x11c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d906      	bls.n	8005cc6 <USB_SetTurnaroundTime+0x2a>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4a40      	ldr	r2, [pc, #256]	@ (8005dbc <USB_SetTurnaroundTime+0x120>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d202      	bcs.n	8005cc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005cc0:	230f      	movs	r3, #15
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e062      	b.n	8005d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8005dbc <USB_SetTurnaroundTime+0x120>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d306      	bcc.n	8005cdc <USB_SetTurnaroundTime+0x40>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	4a3b      	ldr	r2, [pc, #236]	@ (8005dc0 <USB_SetTurnaroundTime+0x124>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d202      	bcs.n	8005cdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005cd6:	230e      	movs	r3, #14
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	e057      	b.n	8005d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4a38      	ldr	r2, [pc, #224]	@ (8005dc0 <USB_SetTurnaroundTime+0x124>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d306      	bcc.n	8005cf2 <USB_SetTurnaroundTime+0x56>
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	4a37      	ldr	r2, [pc, #220]	@ (8005dc4 <USB_SetTurnaroundTime+0x128>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d202      	bcs.n	8005cf2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005cec:	230d      	movs	r3, #13
 8005cee:	617b      	str	r3, [r7, #20]
 8005cf0:	e04c      	b.n	8005d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	4a33      	ldr	r2, [pc, #204]	@ (8005dc4 <USB_SetTurnaroundTime+0x128>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d306      	bcc.n	8005d08 <USB_SetTurnaroundTime+0x6c>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	4a32      	ldr	r2, [pc, #200]	@ (8005dc8 <USB_SetTurnaroundTime+0x12c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d802      	bhi.n	8005d08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005d02:	230c      	movs	r3, #12
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	e041      	b.n	8005d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4a2f      	ldr	r2, [pc, #188]	@ (8005dc8 <USB_SetTurnaroundTime+0x12c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d906      	bls.n	8005d1e <USB_SetTurnaroundTime+0x82>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4a2e      	ldr	r2, [pc, #184]	@ (8005dcc <USB_SetTurnaroundTime+0x130>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d802      	bhi.n	8005d1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005d18:	230b      	movs	r3, #11
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	e036      	b.n	8005d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	4a2a      	ldr	r2, [pc, #168]	@ (8005dcc <USB_SetTurnaroundTime+0x130>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d906      	bls.n	8005d34 <USB_SetTurnaroundTime+0x98>
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	4a29      	ldr	r2, [pc, #164]	@ (8005dd0 <USB_SetTurnaroundTime+0x134>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d802      	bhi.n	8005d34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005d2e:	230a      	movs	r3, #10
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	e02b      	b.n	8005d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	4a26      	ldr	r2, [pc, #152]	@ (8005dd0 <USB_SetTurnaroundTime+0x134>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d906      	bls.n	8005d4a <USB_SetTurnaroundTime+0xae>
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4a25      	ldr	r2, [pc, #148]	@ (8005dd4 <USB_SetTurnaroundTime+0x138>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d202      	bcs.n	8005d4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005d44:	2309      	movs	r3, #9
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	e020      	b.n	8005d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	4a21      	ldr	r2, [pc, #132]	@ (8005dd4 <USB_SetTurnaroundTime+0x138>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d306      	bcc.n	8005d60 <USB_SetTurnaroundTime+0xc4>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	4a20      	ldr	r2, [pc, #128]	@ (8005dd8 <USB_SetTurnaroundTime+0x13c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d802      	bhi.n	8005d60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005d5a:	2308      	movs	r3, #8
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	e015      	b.n	8005d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd8 <USB_SetTurnaroundTime+0x13c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d906      	bls.n	8005d76 <USB_SetTurnaroundTime+0xda>
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ddc <USB_SetTurnaroundTime+0x140>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d202      	bcs.n	8005d76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005d70:	2307      	movs	r3, #7
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	e00a      	b.n	8005d8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005d76:	2306      	movs	r3, #6
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	e007      	b.n	8005d8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005d82:	2309      	movs	r3, #9
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	e001      	b.n	8005d8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005d88:	2309      	movs	r3, #9
 8005d8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	029b      	lsls	r3, r3, #10
 8005da0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005da4:	431a      	orrs	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	00d8acbf 	.word	0x00d8acbf
 8005dbc:	00e4e1c0 	.word	0x00e4e1c0
 8005dc0:	00f42400 	.word	0x00f42400
 8005dc4:	01067380 	.word	0x01067380
 8005dc8:	011a499f 	.word	0x011a499f
 8005dcc:	01312cff 	.word	0x01312cff
 8005dd0:	014ca43f 	.word	0x014ca43f
 8005dd4:	016e3600 	.word	0x016e3600
 8005dd8:	01a6ab1f 	.word	0x01a6ab1f
 8005ddc:	01e84800 	.word	0x01e84800

08005de0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f043 0201 	orr.w	r2, r3, #1
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f023 0201 	bic.w	r2, r3, #1
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d115      	bne.n	8005e72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e52:	200a      	movs	r0, #10
 8005e54:	f7fb fe80 	bl	8001b58 <HAL_Delay>
      ms += 10U;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	330a      	adds	r3, #10
 8005e5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f001 f93f 	bl	80070e2 <USB_GetMode>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d01e      	beq.n	8005ea8 <USB_SetCurrentMode+0x84>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e6e:	d9f0      	bls.n	8005e52 <USB_SetCurrentMode+0x2e>
 8005e70:	e01a      	b.n	8005ea8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d115      	bne.n	8005ea4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e84:	200a      	movs	r0, #10
 8005e86:	f7fb fe67 	bl	8001b58 <HAL_Delay>
      ms += 10U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	330a      	adds	r3, #10
 8005e8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f001 f926 	bl	80070e2 <USB_GetMode>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <USB_SetCurrentMode+0x84>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ea0:	d9f0      	bls.n	8005e84 <USB_SetCurrentMode+0x60>
 8005ea2:	e001      	b.n	8005ea8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e005      	b.n	8005eb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2bc8      	cmp	r3, #200	@ 0xc8
 8005eac:	d101      	bne.n	8005eb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b086      	sub	sp, #24
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	e009      	b.n	8005ef0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	3340      	adds	r3, #64	@ 0x40
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	3301      	adds	r3, #1
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b0e      	cmp	r3, #14
 8005ef4:	d9f2      	bls.n	8005edc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ef6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d11c      	bne.n	8005f38 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f0c:	f043 0302 	orr.w	r3, r3, #2
 8005f10:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f16:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f22:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f36:	e00b      	b.n	8005f50 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f48:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f56:	461a      	mov	r2, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f5c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d10d      	bne.n	8005f80 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f968 	bl	8006244 <USB_SetDevSpeed>
 8005f74:	e008      	b.n	8005f88 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f76:	2101      	movs	r1, #1
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f963 	bl	8006244 <USB_SetDevSpeed>
 8005f7e:	e003      	b.n	8005f88 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f80:	2103      	movs	r1, #3
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f95e 	bl	8006244 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f88:	2110      	movs	r1, #16
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f8fa 	bl	8006184 <USB_FlushTxFifo>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f924 	bl	80061e8 <USB_FlushRxFifo>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fc8:	461a      	mov	r2, r3
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fce:	2300      	movs	r3, #0
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	e043      	b.n	800605c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fea:	d118      	bne.n	800601e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ffe:	461a      	mov	r2, r3
 8006000:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	e013      	b.n	8006030 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006014:	461a      	mov	r2, r3
 8006016:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	e008      	b.n	8006030 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800602a:	461a      	mov	r2, r3
 800602c:	2300      	movs	r3, #0
 800602e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800603c:	461a      	mov	r2, r3
 800603e:	2300      	movs	r3, #0
 8006040:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800604e:	461a      	mov	r2, r3
 8006050:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006054:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	3301      	adds	r3, #1
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006060:	461a      	mov	r2, r3
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	4293      	cmp	r3, r2
 8006066:	d3b5      	bcc.n	8005fd4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006068:	2300      	movs	r3, #0
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	e043      	b.n	80060f6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006080:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006084:	d118      	bne.n	80060b8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10a      	bne.n	80060a2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006098:	461a      	mov	r2, r3
 800609a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	e013      	b.n	80060ca <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ae:	461a      	mov	r2, r3
 80060b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	e008      	b.n	80060ca <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c4:	461a      	mov	r2, r3
 80060c6:	2300      	movs	r3, #0
 80060c8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d6:	461a      	mov	r2, r3
 80060d8:	2300      	movs	r3, #0
 80060da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e8:	461a      	mov	r2, r3
 80060ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80060ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	3301      	adds	r3, #1
 80060f4:	613b      	str	r3, [r7, #16]
 80060f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80060fa:	461a      	mov	r2, r3
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	4293      	cmp	r3, r2
 8006100:	d3b5      	bcc.n	800606e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006114:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006122:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006124:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006128:	2b00      	cmp	r3, #0
 800612a:	d105      	bne.n	8006138 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	f043 0210 	orr.w	r2, r3, #16
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699a      	ldr	r2, [r3, #24]
 800613c:	4b10      	ldr	r3, [pc, #64]	@ (8006180 <USB_DevInit+0x2c4>)
 800613e:	4313      	orrs	r3, r2
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006144:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006148:	2b00      	cmp	r3, #0
 800614a:	d005      	beq.n	8006158 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f043 0208 	orr.w	r2, r3, #8
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006158:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800615c:	2b01      	cmp	r3, #1
 800615e:	d107      	bne.n	8006170 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006168:	f043 0304 	orr.w	r3, r3, #4
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006170:	7dfb      	ldrb	r3, [r7, #23]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800617c:	b004      	add	sp, #16
 800617e:	4770      	bx	lr
 8006180:	803c3800 	.word	0x803c3800

08006184 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3301      	adds	r3, #1
 8006196:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800619e:	d901      	bls.n	80061a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e01b      	b.n	80061dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	daf2      	bge.n	8006192 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	019b      	lsls	r3, r3, #6
 80061b4:	f043 0220 	orr.w	r2, r3, #32
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061c8:	d901      	bls.n	80061ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e006      	b.n	80061dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d0f0      	beq.n	80061bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3301      	adds	r3, #1
 80061f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006200:	d901      	bls.n	8006206 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e018      	b.n	8006238 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	daf2      	bge.n	80061f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2210      	movs	r2, #16
 8006216:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3301      	adds	r3, #1
 800621c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006224:	d901      	bls.n	800622a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e006      	b.n	8006238 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f003 0310 	and.w	r3, r3, #16
 8006232:	2b10      	cmp	r3, #16
 8006234:	d0f0      	beq.n	8006218 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	68f9      	ldr	r1, [r7, #12]
 8006260:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006264:	4313      	orrs	r3, r2
 8006266:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006276:	b480      	push	{r7}
 8006278:	b087      	sub	sp, #28
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 0306 	and.w	r3, r3, #6
 800628e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d102      	bne.n	800629c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006296:	2300      	movs	r3, #0
 8006298:	75fb      	strb	r3, [r7, #23]
 800629a:	e00a      	b.n	80062b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d002      	beq.n	80062a8 <USB_GetDevSpeed+0x32>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b06      	cmp	r3, #6
 80062a6:	d102      	bne.n	80062ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80062a8:	2302      	movs	r3, #2
 80062aa:	75fb      	strb	r3, [r7, #23]
 80062ac:	e001      	b.n	80062b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80062ae:	230f      	movs	r3, #15
 80062b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	785b      	ldrb	r3, [r3, #1]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d13a      	bne.n	8006352 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e2:	69da      	ldr	r2, [r3, #28]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	2101      	movs	r1, #1
 80062ee:	fa01 f303 	lsl.w	r3, r1, r3
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	68f9      	ldr	r1, [r7, #12]
 80062f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062fa:	4313      	orrs	r3, r2
 80062fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d155      	bne.n	80063c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	791b      	ldrb	r3, [r3, #4]
 800632e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006330:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	059b      	lsls	r3, r3, #22
 8006336:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006338:	4313      	orrs	r3, r2
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	440a      	add	r2, r1
 8006342:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800634a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	e036      	b.n	80063c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006358:	69da      	ldr	r2, [r3, #28]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	2101      	movs	r1, #1
 8006364:	fa01 f303 	lsl.w	r3, r1, r3
 8006368:	041b      	lsls	r3, r3, #16
 800636a:	68f9      	ldr	r1, [r7, #12]
 800636c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006370:	4313      	orrs	r3, r2
 8006372:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d11a      	bne.n	80063c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	791b      	ldrb	r3, [r3, #4]
 80063a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063a6:	430b      	orrs	r3, r1
 80063a8:	4313      	orrs	r3, r2
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
	...

080063d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	785b      	ldrb	r3, [r3, #1]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d161      	bne.n	80064b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006402:	d11f      	bne.n	8006444 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	0151      	lsls	r1, r2, #5
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	440a      	add	r2, r1
 800641a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800641e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006422:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	440a      	add	r2, r1
 800643a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800643e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006442:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800644a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	f003 030f 	and.w	r3, r3, #15
 8006454:	2101      	movs	r1, #1
 8006456:	fa01 f303 	lsl.w	r3, r1, r3
 800645a:	b29b      	uxth	r3, r3
 800645c:	43db      	mvns	r3, r3
 800645e:	68f9      	ldr	r1, [r7, #12]
 8006460:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006464:	4013      	ands	r3, r2
 8006466:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800646e:	69da      	ldr	r2, [r3, #28]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	2101      	movs	r1, #1
 800647a:	fa01 f303 	lsl.w	r3, r1, r3
 800647e:	b29b      	uxth	r3, r3
 8006480:	43db      	mvns	r3, r3
 8006482:	68f9      	ldr	r1, [r7, #12]
 8006484:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006488:	4013      	ands	r3, r2
 800648a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	0159      	lsls	r1, r3, #5
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	440b      	add	r3, r1
 80064a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064a6:	4619      	mov	r1, r3
 80064a8:	4b35      	ldr	r3, [pc, #212]	@ (8006580 <USB_DeactivateEndpoint+0x1b0>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	600b      	str	r3, [r1, #0]
 80064ae:	e060      	b.n	8006572 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064c6:	d11f      	bne.n	8006508 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	0151      	lsls	r1, r2, #5
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	440a      	add	r2, r1
 80064de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80064e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	0151      	lsls	r1, r2, #5
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	440a      	add	r2, r1
 80064fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006502:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006506:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	2101      	movs	r1, #1
 800651a:	fa01 f303 	lsl.w	r3, r1, r3
 800651e:	041b      	lsls	r3, r3, #16
 8006520:	43db      	mvns	r3, r3
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006528:	4013      	ands	r3, r2
 800652a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006532:	69da      	ldr	r2, [r3, #28]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f003 030f 	and.w	r3, r3, #15
 800653c:	2101      	movs	r1, #1
 800653e:	fa01 f303 	lsl.w	r3, r1, r3
 8006542:	041b      	lsls	r3, r3, #16
 8006544:	43db      	mvns	r3, r3
 8006546:	68f9      	ldr	r1, [r7, #12]
 8006548:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800654c:	4013      	ands	r3, r2
 800654e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	0159      	lsls	r1, r3, #5
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	440b      	add	r3, r1
 8006566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656a:	4619      	mov	r1, r3
 800656c:	4b05      	ldr	r3, [pc, #20]	@ (8006584 <USB_DeactivateEndpoint+0x1b4>)
 800656e:	4013      	ands	r3, r2
 8006570:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	ec337800 	.word	0xec337800
 8006584:	eff37800 	.word	0xeff37800

08006588 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08a      	sub	sp, #40	@ 0x28
 800658c:	af02      	add	r7, sp, #8
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	4613      	mov	r3, r2
 8006594:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	785b      	ldrb	r3, [r3, #1]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	f040 817f 	bne.w	80068a8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d132      	bne.n	8006618 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	0151      	lsls	r1, r2, #5
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	440a      	add	r2, r1
 80065c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065cc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80065d0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80065d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	0151      	lsls	r1, r2, #5
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	440a      	add	r2, r1
 80065ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	0151      	lsls	r1, r2, #5
 8006608:	69fa      	ldr	r2, [r7, #28]
 800660a:	440a      	add	r2, r1
 800660c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006610:	0cdb      	lsrs	r3, r3, #19
 8006612:	04db      	lsls	r3, r3, #19
 8006614:	6113      	str	r3, [r2, #16]
 8006616:	e097      	b.n	8006748 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	440a      	add	r2, r1
 800662e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006632:	0cdb      	lsrs	r3, r3, #19
 8006634:	04db      	lsls	r3, r3, #19
 8006636:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006652:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006656:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800665a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d11a      	bne.n	8006698 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	429a      	cmp	r2, r3
 800666c:	d903      	bls.n	8006676 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	69fa      	ldr	r2, [r7, #28]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006690:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006694:	6113      	str	r3, [r2, #16]
 8006696:	e044      	b.n	8006722 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	4413      	add	r3, r2
 80066a2:	1e5a      	subs	r2, r3, #1
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ac:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ba:	691a      	ldr	r2, [r3, #16]
 80066bc:	8afb      	ldrh	r3, [r7, #22]
 80066be:	04d9      	lsls	r1, r3, #19
 80066c0:	4ba4      	ldr	r3, [pc, #656]	@ (8006954 <USB_EPStartXfer+0x3cc>)
 80066c2:	400b      	ands	r3, r1
 80066c4:	69b9      	ldr	r1, [r7, #24]
 80066c6:	0148      	lsls	r0, r1, #5
 80066c8:	69f9      	ldr	r1, [r7, #28]
 80066ca:	4401      	add	r1, r0
 80066cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80066d0:	4313      	orrs	r3, r2
 80066d2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	791b      	ldrb	r3, [r3, #4]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d122      	bne.n	8006722 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	69fa      	ldr	r2, [r7, #28]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066f6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80066fa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	8afb      	ldrh	r3, [r7, #22]
 800670c:	075b      	lsls	r3, r3, #29
 800670e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006712:	69b9      	ldr	r1, [r7, #24]
 8006714:	0148      	lsls	r0, r1, #5
 8006716:	69f9      	ldr	r1, [r7, #28]
 8006718:	4401      	add	r1, r0
 800671a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800671e:	4313      	orrs	r3, r2
 8006720:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800672e:	691a      	ldr	r2, [r3, #16]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006738:	69b9      	ldr	r1, [r7, #24]
 800673a:	0148      	lsls	r0, r1, #5
 800673c:	69f9      	ldr	r1, [r7, #28]
 800673e:	4401      	add	r1, r0
 8006740:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006744:	4313      	orrs	r3, r2
 8006746:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d14b      	bne.n	80067e6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d009      	beq.n	800676a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006762:	461a      	mov	r2, r3
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	791b      	ldrb	r3, [r3, #4]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d128      	bne.n	80067c4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800677e:	2b00      	cmp	r3, #0
 8006780:	d110      	bne.n	80067a4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	0151      	lsls	r1, r2, #5
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	440a      	add	r2, r1
 8006798:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800679c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	e00f      	b.n	80067c4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	0151      	lsls	r1, r2, #5
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	440a      	add	r2, r1
 80067ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067c2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	0151      	lsls	r1, r2, #5
 80067d6:	69fa      	ldr	r2, [r7, #28]
 80067d8:	440a      	add	r2, r1
 80067da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	e166      	b.n	8006ab4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	0151      	lsls	r1, r2, #5
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	440a      	add	r2, r1
 80067fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006800:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006804:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	791b      	ldrb	r3, [r3, #4]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d015      	beq.n	800683a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 814e 	beq.w	8006ab4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800681e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	2101      	movs	r1, #1
 800682a:	fa01 f303 	lsl.w	r3, r1, r3
 800682e:	69f9      	ldr	r1, [r7, #28]
 8006830:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006834:	4313      	orrs	r3, r2
 8006836:	634b      	str	r3, [r1, #52]	@ 0x34
 8006838:	e13c      	b.n	8006ab4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006846:	2b00      	cmp	r3, #0
 8006848:	d110      	bne.n	800686c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	440a      	add	r2, r1
 8006860:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006864:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	e00f      	b.n	800688c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	0151      	lsls	r1, r2, #5
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	440a      	add	r2, r1
 8006882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800688a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	68d9      	ldr	r1, [r3, #12]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	781a      	ldrb	r2, [r3, #0]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	b298      	uxth	r0, r3
 800689a:	79fb      	ldrb	r3, [r7, #7]
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	4603      	mov	r3, r0
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 f9b9 	bl	8006c18 <USB_WritePacket>
 80068a6:	e105      	b.n	8006ab4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068c2:	0cdb      	lsrs	r3, r3, #19
 80068c4:	04db      	lsls	r3, r3, #19
 80068c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80068e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80068ea:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d132      	bne.n	8006958 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006920:	69b9      	ldr	r1, [r7, #24]
 8006922:	0148      	lsls	r0, r1, #5
 8006924:	69f9      	ldr	r1, [r7, #28]
 8006926:	4401      	add	r1, r0
 8006928:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800692c:	4313      	orrs	r3, r2
 800692e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800694a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800694e:	6113      	str	r3, [r2, #16]
 8006950:	e062      	b.n	8006a18 <USB_EPStartXfer+0x490>
 8006952:	bf00      	nop
 8006954:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d123      	bne.n	80069a8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800696c:	691a      	ldr	r2, [r3, #16]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006976:	69b9      	ldr	r1, [r7, #24]
 8006978:	0148      	lsls	r0, r1, #5
 800697a:	69f9      	ldr	r1, [r7, #28]
 800697c:	4401      	add	r1, r0
 800697e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006982:	4313      	orrs	r3, r2
 8006984:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	0151      	lsls	r1, r2, #5
 8006998:	69fa      	ldr	r2, [r7, #28]
 800699a:	440a      	add	r2, r1
 800699c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069a4:	6113      	str	r3, [r2, #16]
 80069a6:	e037      	b.n	8006a18 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	4413      	add	r3, r2
 80069b2:	1e5a      	subs	r2, r3, #1
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069bc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	8afa      	ldrh	r2, [r7, #22]
 80069c4:	fb03 f202 	mul.w	r2, r3, r2
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d8:	691a      	ldr	r2, [r3, #16]
 80069da:	8afb      	ldrh	r3, [r7, #22]
 80069dc:	04d9      	lsls	r1, r3, #19
 80069de:	4b38      	ldr	r3, [pc, #224]	@ (8006ac0 <USB_EPStartXfer+0x538>)
 80069e0:	400b      	ands	r3, r1
 80069e2:	69b9      	ldr	r1, [r7, #24]
 80069e4:	0148      	lsls	r0, r1, #5
 80069e6:	69f9      	ldr	r1, [r7, #28]
 80069e8:	4401      	add	r1, r0
 80069ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80069ee:	4313      	orrs	r3, r2
 80069f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a08:	69b9      	ldr	r1, [r7, #24]
 8006a0a:	0148      	lsls	r0, r1, #5
 8006a0c:	69f9      	ldr	r1, [r7, #28]
 8006a0e:	4401      	add	r1, r0
 8006a10:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006a14:	4313      	orrs	r3, r2
 8006a16:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006a18:	79fb      	ldrb	r3, [r7, #7]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d10d      	bne.n	8006a3a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	68d9      	ldr	r1, [r3, #12]
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a36:	460a      	mov	r2, r1
 8006a38:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	791b      	ldrb	r3, [r3, #4]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d128      	bne.n	8006a94 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d110      	bne.n	8006a74 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	e00f      	b.n	8006a94 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	0151      	lsls	r1, r2, #5
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	440a      	add	r2, r1
 8006a8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	69fa      	ldr	r2, [r7, #28]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ab2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3720      	adds	r7, #32
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	1ff80000 	.word	0x1ff80000

08006ac4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	785b      	ldrb	r3, [r3, #1]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d14a      	bne.n	8006b78 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006af6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006afa:	f040 8086 	bne.w	8006c0a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	7812      	ldrb	r2, [r2, #0]
 8006b12:	0151      	lsls	r1, r2, #5
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	440a      	add	r2, r1
 8006b18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b20:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	7812      	ldrb	r2, [r2, #0]
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d902      	bls.n	8006b5c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	75fb      	strb	r3, [r7, #23]
          break;
 8006b5a:	e056      	b.n	8006c0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b74:	d0e7      	beq.n	8006b46 <USB_EPStopXfer+0x82>
 8006b76:	e048      	b.n	8006c0a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b90:	d13b      	bne.n	8006c0a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	7812      	ldrb	r2, [r2, #0]
 8006ba6:	0151      	lsls	r1, r2, #5
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	440a      	add	r2, r1
 8006bac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bb0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006bb4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	7812      	ldrb	r2, [r2, #0]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bd8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d902      	bls.n	8006bf0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	75fb      	strb	r3, [r7, #23]
          break;
 8006bee:	e00c      	b.n	8006c0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c08:	d0e7      	beq.n	8006bda <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b089      	sub	sp, #36	@ 0x24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	4611      	mov	r1, r2
 8006c24:	461a      	mov	r2, r3
 8006c26:	460b      	mov	r3, r1
 8006c28:	71fb      	strb	r3, [r7, #7]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d123      	bne.n	8006c86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c3e:	88bb      	ldrh	r3, [r7, #4]
 8006c40:	3303      	adds	r3, #3
 8006c42:	089b      	lsrs	r3, r3, #2
 8006c44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c46:	2300      	movs	r3, #0
 8006c48:	61bb      	str	r3, [r7, #24]
 8006c4a:	e018      	b.n	8006c7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	031a      	lsls	r2, r3, #12
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c58:	461a      	mov	r2, r3
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	3301      	adds	r3, #1
 8006c64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	3301      	adds	r3, #1
 8006c76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d3e2      	bcc.n	8006c4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3724      	adds	r7, #36	@ 0x24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b08b      	sub	sp, #44	@ 0x2c
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	089b      	lsrs	r3, r3, #2
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	f003 0303 	and.w	r3, r3, #3
 8006cb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006cba:	2300      	movs	r3, #0
 8006cbc:	623b      	str	r3, [r7, #32]
 8006cbe:	e014      	b.n	8006cea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cca:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cce:	3301      	adds	r3, #1
 8006cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	3301      	adds	r3, #1
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	623b      	str	r3, [r7, #32]
 8006cea:	6a3a      	ldr	r2, [r7, #32]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d3e6      	bcc.n	8006cc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006cf2:	8bfb      	ldrh	r3, [r7, #30]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01e      	beq.n	8006d36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d02:	461a      	mov	r2, r3
 8006d04:	f107 0310 	add.w	r3, r7, #16
 8006d08:	6812      	ldr	r2, [r2, #0]
 8006d0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	fa22 f303 	lsr.w	r3, r2, r3
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1c:	701a      	strb	r2, [r3, #0]
      i++;
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	3301      	adds	r3, #1
 8006d22:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d26:	3301      	adds	r3, #1
 8006d28:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006d2a:	8bfb      	ldrh	r3, [r7, #30]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d30:	8bfb      	ldrh	r3, [r7, #30]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1ea      	bne.n	8006d0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	372c      	adds	r7, #44	@ 0x2c
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	785b      	ldrb	r3, [r3, #1]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d12c      	bne.n	8006dba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	db12      	blt.n	8006d98 <USB_EPSetStall+0x54>
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00f      	beq.n	8006d98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	0151      	lsls	r1, r2, #5
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d92:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006db2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	e02b      	b.n	8006e12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	db12      	blt.n	8006df2 <USB_EPSetStall+0xae>
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00f      	beq.n	8006df2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	0151      	lsls	r1, r2, #5
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	440a      	add	r2, r1
 8006de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006df0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	0151      	lsls	r1, r2, #5
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	440a      	add	r2, r1
 8006e08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d128      	bne.n	8006e8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	791b      	ldrb	r3, [r3, #4]
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d003      	beq.n	8006e6c <USB_EPClearStall+0x4c>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	791b      	ldrb	r3, [r3, #4]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d138      	bne.n	8006ede <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	e027      	b.n	8006ede <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	0151      	lsls	r1, r2, #5
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	440a      	add	r2, r1
 8006ea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ea8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006eac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	791b      	ldrb	r3, [r3, #4]
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d003      	beq.n	8006ebe <USB_EPClearStall+0x9e>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	791b      	ldrb	r3, [r3, #4]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d10f      	bne.n	8006ede <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	0151      	lsls	r1, r2, #5
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	440a      	add	r2, r1
 8006ed4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006edc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f0a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006f0e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006f20:	68f9      	ldr	r1, [r7, #12]
 8006f22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f26:	4313      	orrs	r3, r2
 8006f28:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006f52:	f023 0303 	bic.w	r3, r3, #3
 8006f56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f66:	f023 0302 	bic.w	r3, r3, #2
 8006f6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b085      	sub	sp, #20
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006f94:	f023 0303 	bic.w	r3, r3, #3
 8006f98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fa8:	f043 0302 	orr.w	r3, r3, #2
 8006fac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b085      	sub	sp, #20
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	4013      	ands	r3, r2
 8007004:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	0c1b      	lsrs	r3, r3, #16
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007016:	b480      	push	{r7}
 8007018:	b085      	sub	sp, #20
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	4013      	ands	r3, r2
 8007038:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	b29b      	uxth	r3, r3
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800704a:	b480      	push	{r7}
 800704c:	b085      	sub	sp, #20
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	460b      	mov	r3, r1
 8007054:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	4013      	ands	r3, r2
 8007076:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007078:	68bb      	ldr	r3, [r7, #8]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007086:	b480      	push	{r7}
 8007088:	b087      	sub	sp, #28
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	460b      	mov	r3, r1
 8007090:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	f003 030f 	and.w	r3, r3, #15
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	fa22 f303 	lsr.w	r3, r2, r3
 80070b6:	01db      	lsls	r3, r3, #7
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	4313      	orrs	r3, r2
 80070be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4013      	ands	r3, r2
 80070d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070d4:	68bb      	ldr	r3, [r7, #8]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	f003 0301 	and.w	r3, r3, #1
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80070fe:	b480      	push	{r7}
 8007100:	b085      	sub	sp, #20
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007118:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800711c:	f023 0307 	bic.w	r3, r3, #7
 8007120:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007134:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	460b      	mov	r3, r1
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	333c      	adds	r3, #60	@ 0x3c
 800715a:	3304      	adds	r3, #4
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	4a26      	ldr	r2, [pc, #152]	@ (80071fc <USB_EP0_OutStart+0xb8>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d90a      	bls.n	800717e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007178:	d101      	bne.n	800717e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	e037      	b.n	80071ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007184:	461a      	mov	r2, r3
 8007186:	2300      	movs	r3, #0
 8007188:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007198:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800719c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071ac:	f043 0318 	orr.w	r3, r3, #24
 80071b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071c0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80071c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80071c6:	7afb      	ldrb	r3, [r7, #11]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d10f      	bne.n	80071ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d2:	461a      	mov	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071e6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80071ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	4f54300a 	.word	0x4f54300a

08007200 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3301      	adds	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007218:	d901      	bls.n	800721e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e01b      	b.n	8007256 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	daf2      	bge.n	800720c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f043 0201 	orr.w	r2, r3, #1
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3301      	adds	r3, #1
 800723a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007242:	d901      	bls.n	8007248 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e006      	b.n	8007256 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b01      	cmp	r3, #1
 8007252:	d0f0      	beq.n	8007236 <USB_CoreReset+0x36>

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
	...

08007264 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	460b      	mov	r3, r1
 800726e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007270:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007274:	f002 fc9e 	bl	8009bb4 <USBD_static_malloc>
 8007278:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d109      	bne.n	8007294 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	32b0      	adds	r2, #176	@ 0xb0
 800728a:	2100      	movs	r1, #0
 800728c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007290:	2302      	movs	r3, #2
 8007292:	e0d4      	b.n	800743e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007294:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007298:	2100      	movs	r1, #0
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f003 fa5f 	bl	800a75e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	32b0      	adds	r2, #176	@ 0xb0
 80072aa:	68f9      	ldr	r1, [r7, #12]
 80072ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	32b0      	adds	r2, #176	@ 0xb0
 80072ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	7c1b      	ldrb	r3, [r3, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d138      	bne.n	800733e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80072cc:	4b5e      	ldr	r3, [pc, #376]	@ (8007448 <USBD_CDC_Init+0x1e4>)
 80072ce:	7819      	ldrb	r1, [r3, #0]
 80072d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072d4:	2202      	movs	r2, #2
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f002 fb49 	bl	800996e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80072dc:	4b5a      	ldr	r3, [pc, #360]	@ (8007448 <USBD_CDC_Init+0x1e4>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	f003 020f 	and.w	r2, r3, #15
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	440b      	add	r3, r1
 80072f0:	3324      	adds	r3, #36	@ 0x24
 80072f2:	2201      	movs	r2, #1
 80072f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80072f6:	4b55      	ldr	r3, [pc, #340]	@ (800744c <USBD_CDC_Init+0x1e8>)
 80072f8:	7819      	ldrb	r1, [r3, #0]
 80072fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072fe:	2202      	movs	r2, #2
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f002 fb34 	bl	800996e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007306:	4b51      	ldr	r3, [pc, #324]	@ (800744c <USBD_CDC_Init+0x1e8>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	f003 020f 	and.w	r2, r3, #15
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	440b      	add	r3, r1
 800731a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800731e:	2201      	movs	r2, #1
 8007320:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007322:	4b4b      	ldr	r3, [pc, #300]	@ (8007450 <USBD_CDC_Init+0x1ec>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	f003 020f 	and.w	r2, r3, #15
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	4613      	mov	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	3326      	adds	r3, #38	@ 0x26
 8007338:	2210      	movs	r2, #16
 800733a:	801a      	strh	r2, [r3, #0]
 800733c:	e035      	b.n	80073aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800733e:	4b42      	ldr	r3, [pc, #264]	@ (8007448 <USBD_CDC_Init+0x1e4>)
 8007340:	7819      	ldrb	r1, [r3, #0]
 8007342:	2340      	movs	r3, #64	@ 0x40
 8007344:	2202      	movs	r2, #2
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f002 fb11 	bl	800996e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800734c:	4b3e      	ldr	r3, [pc, #248]	@ (8007448 <USBD_CDC_Init+0x1e4>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	f003 020f 	and.w	r2, r3, #15
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	4613      	mov	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	440b      	add	r3, r1
 8007360:	3324      	adds	r3, #36	@ 0x24
 8007362:	2201      	movs	r2, #1
 8007364:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007366:	4b39      	ldr	r3, [pc, #228]	@ (800744c <USBD_CDC_Init+0x1e8>)
 8007368:	7819      	ldrb	r1, [r3, #0]
 800736a:	2340      	movs	r3, #64	@ 0x40
 800736c:	2202      	movs	r2, #2
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f002 fafd 	bl	800996e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007374:	4b35      	ldr	r3, [pc, #212]	@ (800744c <USBD_CDC_Init+0x1e8>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	f003 020f 	and.w	r2, r3, #15
 800737c:	6879      	ldr	r1, [r7, #4]
 800737e:	4613      	mov	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	440b      	add	r3, r1
 8007388:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800738c:	2201      	movs	r2, #1
 800738e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007390:	4b2f      	ldr	r3, [pc, #188]	@ (8007450 <USBD_CDC_Init+0x1ec>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	f003 020f 	and.w	r2, r3, #15
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	440b      	add	r3, r1
 80073a4:	3326      	adds	r3, #38	@ 0x26
 80073a6:	2210      	movs	r2, #16
 80073a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80073aa:	4b29      	ldr	r3, [pc, #164]	@ (8007450 <USBD_CDC_Init+0x1ec>)
 80073ac:	7819      	ldrb	r1, [r3, #0]
 80073ae:	2308      	movs	r3, #8
 80073b0:	2203      	movs	r2, #3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f002 fadb 	bl	800996e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80073b8:	4b25      	ldr	r3, [pc, #148]	@ (8007450 <USBD_CDC_Init+0x1ec>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	f003 020f 	and.w	r2, r3, #15
 80073c0:	6879      	ldr	r1, [r7, #4]
 80073c2:	4613      	mov	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	440b      	add	r3, r1
 80073cc:	3324      	adds	r3, #36	@ 0x24
 80073ce:	2201      	movs	r2, #1
 80073d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	33b0      	adds	r3, #176	@ 0xb0
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007408:	2302      	movs	r3, #2
 800740a:	e018      	b.n	800743e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	7c1b      	ldrb	r3, [r3, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007414:	4b0d      	ldr	r3, [pc, #52]	@ (800744c <USBD_CDC_Init+0x1e8>)
 8007416:	7819      	ldrb	r1, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800741e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f002 fb92 	bl	8009b4c <USBD_LL_PrepareReceive>
 8007428:	e008      	b.n	800743c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800742a:	4b08      	ldr	r3, [pc, #32]	@ (800744c <USBD_CDC_Init+0x1e8>)
 800742c:	7819      	ldrb	r1, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007434:	2340      	movs	r3, #64	@ 0x40
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f002 fb88 	bl	8009b4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20000093 	.word	0x20000093
 800744c:	20000094 	.word	0x20000094
 8007450:	20000095 	.word	0x20000095

08007454 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007460:	4b3a      	ldr	r3, [pc, #232]	@ (800754c <USBD_CDC_DeInit+0xf8>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f002 faa7 	bl	80099ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800746c:	4b37      	ldr	r3, [pc, #220]	@ (800754c <USBD_CDC_DeInit+0xf8>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	f003 020f 	and.w	r2, r3, #15
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	440b      	add	r3, r1
 8007480:	3324      	adds	r3, #36	@ 0x24
 8007482:	2200      	movs	r2, #0
 8007484:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007486:	4b32      	ldr	r3, [pc, #200]	@ (8007550 <USBD_CDC_DeInit+0xfc>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f002 fa94 	bl	80099ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007492:	4b2f      	ldr	r3, [pc, #188]	@ (8007550 <USBD_CDC_DeInit+0xfc>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	f003 020f 	and.w	r2, r3, #15
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	4613      	mov	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	440b      	add	r3, r1
 80074a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80074aa:	2200      	movs	r2, #0
 80074ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80074ae:	4b29      	ldr	r3, [pc, #164]	@ (8007554 <USBD_CDC_DeInit+0x100>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f002 fa80 	bl	80099ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80074ba:	4b26      	ldr	r3, [pc, #152]	@ (8007554 <USBD_CDC_DeInit+0x100>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	f003 020f 	and.w	r2, r3, #15
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	4613      	mov	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	440b      	add	r3, r1
 80074ce:	3324      	adds	r3, #36	@ 0x24
 80074d0:	2200      	movs	r2, #0
 80074d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80074d4:	4b1f      	ldr	r3, [pc, #124]	@ (8007554 <USBD_CDC_DeInit+0x100>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	f003 020f 	and.w	r2, r3, #15
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	440b      	add	r3, r1
 80074e8:	3326      	adds	r3, #38	@ 0x26
 80074ea:	2200      	movs	r2, #0
 80074ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	32b0      	adds	r2, #176	@ 0xb0
 80074f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01f      	beq.n	8007540 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	33b0      	adds	r3, #176	@ 0xb0
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	32b0      	adds	r2, #176	@ 0xb0
 800751e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007522:	4618      	mov	r0, r3
 8007524:	f002 fb54 	bl	8009bd0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	32b0      	adds	r2, #176	@ 0xb0
 8007532:	2100      	movs	r1, #0
 8007534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000093 	.word	0x20000093
 8007550:	20000094 	.word	0x20000094
 8007554:	20000095 	.word	0x20000095

08007558 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	32b0      	adds	r2, #176	@ 0xb0
 800756c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007570:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007584:	2303      	movs	r3, #3
 8007586:	e0bf      	b.n	8007708 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007590:	2b00      	cmp	r3, #0
 8007592:	d050      	beq.n	8007636 <USBD_CDC_Setup+0xde>
 8007594:	2b20      	cmp	r3, #32
 8007596:	f040 80af 	bne.w	80076f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	88db      	ldrh	r3, [r3, #6]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d03a      	beq.n	8007618 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	b25b      	sxtb	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	da1b      	bge.n	80075e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	33b0      	adds	r3, #176	@ 0xb0
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80075c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	88d2      	ldrh	r2, [r2, #6]
 80075c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	88db      	ldrh	r3, [r3, #6]
 80075ce:	2b07      	cmp	r3, #7
 80075d0:	bf28      	it	cs
 80075d2:	2307      	movcs	r3, #7
 80075d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	89fa      	ldrh	r2, [r7, #14]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 fd93 	bl	8009108 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80075e2:	e090      	b.n	8007706 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	785a      	ldrb	r2, [r3, #1]
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	88db      	ldrh	r3, [r3, #6]
 80075f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80075f4:	d803      	bhi.n	80075fe <USBD_CDC_Setup+0xa6>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	88db      	ldrh	r3, [r3, #6]
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	e000      	b.n	8007600 <USBD_CDC_Setup+0xa8>
 80075fe:	2240      	movs	r2, #64	@ 0x40
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007606:	6939      	ldr	r1, [r7, #16]
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800760e:	461a      	mov	r2, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 fda5 	bl	8009160 <USBD_CtlPrepareRx>
      break;
 8007616:	e076      	b.n	8007706 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	33b0      	adds	r3, #176	@ 0xb0
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	7850      	ldrb	r0, [r2, #1]
 800762e:	2200      	movs	r2, #0
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	4798      	blx	r3
      break;
 8007634:	e067      	b.n	8007706 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	785b      	ldrb	r3, [r3, #1]
 800763a:	2b0b      	cmp	r3, #11
 800763c:	d851      	bhi.n	80076e2 <USBD_CDC_Setup+0x18a>
 800763e:	a201      	add	r2, pc, #4	@ (adr r2, 8007644 <USBD_CDC_Setup+0xec>)
 8007640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007644:	08007675 	.word	0x08007675
 8007648:	080076f1 	.word	0x080076f1
 800764c:	080076e3 	.word	0x080076e3
 8007650:	080076e3 	.word	0x080076e3
 8007654:	080076e3 	.word	0x080076e3
 8007658:	080076e3 	.word	0x080076e3
 800765c:	080076e3 	.word	0x080076e3
 8007660:	080076e3 	.word	0x080076e3
 8007664:	080076e3 	.word	0x080076e3
 8007668:	080076e3 	.word	0x080076e3
 800766c:	0800769f 	.word	0x0800769f
 8007670:	080076c9 	.word	0x080076c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b03      	cmp	r3, #3
 800767e:	d107      	bne.n	8007690 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007680:	f107 030a 	add.w	r3, r7, #10
 8007684:	2202      	movs	r2, #2
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 fd3d 	bl	8009108 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800768e:	e032      	b.n	80076f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 fcbb 	bl	800900e <USBD_CtlError>
            ret = USBD_FAIL;
 8007698:	2303      	movs	r3, #3
 800769a:	75fb      	strb	r3, [r7, #23]
          break;
 800769c:	e02b      	b.n	80076f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d107      	bne.n	80076ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80076aa:	f107 030d 	add.w	r3, r7, #13
 80076ae:	2201      	movs	r2, #1
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 fd28 	bl	8009108 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076b8:	e01d      	b.n	80076f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 fca6 	bl	800900e <USBD_CtlError>
            ret = USBD_FAIL;
 80076c2:	2303      	movs	r3, #3
 80076c4:	75fb      	strb	r3, [r7, #23]
          break;
 80076c6:	e016      	b.n	80076f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d00f      	beq.n	80076f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f001 fc99 	bl	800900e <USBD_CtlError>
            ret = USBD_FAIL;
 80076dc:	2303      	movs	r3, #3
 80076de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076e0:	e008      	b.n	80076f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 fc92 	bl	800900e <USBD_CtlError>
          ret = USBD_FAIL;
 80076ea:	2303      	movs	r3, #3
 80076ec:	75fb      	strb	r3, [r7, #23]
          break;
 80076ee:	e002      	b.n	80076f6 <USBD_CDC_Setup+0x19e>
          break;
 80076f0:	bf00      	nop
 80076f2:	e008      	b.n	8007706 <USBD_CDC_Setup+0x1ae>
          break;
 80076f4:	bf00      	nop
      }
      break;
 80076f6:	e006      	b.n	8007706 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fc87 	bl	800900e <USBD_CtlError>
      ret = USBD_FAIL;
 8007700:	2303      	movs	r3, #3
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	bf00      	nop
  }

  return (uint8_t)ret;
 8007706:	7dfb      	ldrb	r3, [r7, #23]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007722:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	32b0      	adds	r2, #176	@ 0xb0
 800772e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007736:	2303      	movs	r3, #3
 8007738:	e065      	b.n	8007806 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	32b0      	adds	r2, #176	@ 0xb0
 8007744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007748:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	f003 020f 	and.w	r2, r3, #15
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	3318      	adds	r3, #24
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d02f      	beq.n	80077c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	f003 020f 	and.w	r2, r3, #15
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	4613      	mov	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	440b      	add	r3, r1
 8007776:	3318      	adds	r3, #24
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	f003 010f 	and.w	r1, r3, #15
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	460b      	mov	r3, r1
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	440b      	add	r3, r1
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4403      	add	r3, r0
 800778c:	331c      	adds	r3, #28
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	fbb2 f1f3 	udiv	r1, r2, r3
 8007794:	fb01 f303 	mul.w	r3, r1, r3
 8007798:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800779a:	2b00      	cmp	r3, #0
 800779c:	d112      	bne.n	80077c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800779e:	78fb      	ldrb	r3, [r7, #3]
 80077a0:	f003 020f 	and.w	r2, r3, #15
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	4613      	mov	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	440b      	add	r3, r1
 80077b0:	3318      	adds	r3, #24
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80077b6:	78f9      	ldrb	r1, [r7, #3]
 80077b8:	2300      	movs	r3, #0
 80077ba:	2200      	movs	r2, #0
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f002 f9a4 	bl	8009b0a <USBD_LL_Transmit>
 80077c2:	e01f      	b.n	8007804 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	33b0      	adds	r3, #176	@ 0xb0
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d010      	beq.n	8007804 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	33b0      	adds	r3, #176	@ 0xb0
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007800:	78fa      	ldrb	r2, [r7, #3]
 8007802:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	32b0      	adds	r2, #176	@ 0xb0
 8007824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007828:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	32b0      	adds	r2, #176	@ 0xb0
 8007834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800783c:	2303      	movs	r3, #3
 800783e:	e01a      	b.n	8007876 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f002 f9a2 	bl	8009b8e <USBD_LL_GetRxDataSize>
 800784a:	4602      	mov	r2, r0
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	33b0      	adds	r3, #176	@ 0xb0
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007870:	4611      	mov	r1, r2
 8007872:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	32b0      	adds	r2, #176	@ 0xb0
 8007890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007894:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800789c:	2303      	movs	r3, #3
 800789e:	e024      	b.n	80078ea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	33b0      	adds	r3, #176	@ 0xb0
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d019      	beq.n	80078e8 <USBD_CDC_EP0_RxReady+0x6a>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80078ba:	2bff      	cmp	r3, #255	@ 0xff
 80078bc:	d014      	beq.n	80078e8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	33b0      	adds	r3, #176	@ 0xb0
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80078d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80078de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	22ff      	movs	r2, #255	@ 0xff
 80078e4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078fc:	2182      	movs	r1, #130	@ 0x82
 80078fe:	4818      	ldr	r0, [pc, #96]	@ (8007960 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007900:	f000 fd4f 	bl	80083a2 <USBD_GetEpDesc>
 8007904:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007906:	2101      	movs	r1, #1
 8007908:	4815      	ldr	r0, [pc, #84]	@ (8007960 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800790a:	f000 fd4a 	bl	80083a2 <USBD_GetEpDesc>
 800790e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007910:	2181      	movs	r1, #129	@ 0x81
 8007912:	4813      	ldr	r0, [pc, #76]	@ (8007960 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007914:	f000 fd45 	bl	80083a2 <USBD_GetEpDesc>
 8007918:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2210      	movs	r2, #16
 8007924:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d006      	beq.n	800793a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	2200      	movs	r2, #0
 8007930:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007934:	711a      	strb	r2, [r3, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d006      	beq.n	800794e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007948:	711a      	strb	r2, [r3, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2243      	movs	r2, #67	@ 0x43
 8007952:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007954:	4b02      	ldr	r3, [pc, #8]	@ (8007960 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000050 	.word	0x20000050

08007964 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800796c:	2182      	movs	r1, #130	@ 0x82
 800796e:	4818      	ldr	r0, [pc, #96]	@ (80079d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007970:	f000 fd17 	bl	80083a2 <USBD_GetEpDesc>
 8007974:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007976:	2101      	movs	r1, #1
 8007978:	4815      	ldr	r0, [pc, #84]	@ (80079d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800797a:	f000 fd12 	bl	80083a2 <USBD_GetEpDesc>
 800797e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007980:	2181      	movs	r1, #129	@ 0x81
 8007982:	4813      	ldr	r0, [pc, #76]	@ (80079d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007984:	f000 fd0d 	bl	80083a2 <USBD_GetEpDesc>
 8007988:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2210      	movs	r2, #16
 8007994:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d006      	beq.n	80079aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	2200      	movs	r2, #0
 80079a0:	711a      	strb	r2, [r3, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f042 0202 	orr.w	r2, r2, #2
 80079a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d006      	beq.n	80079be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	711a      	strb	r2, [r3, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f042 0202 	orr.w	r2, r2, #2
 80079bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2243      	movs	r2, #67	@ 0x43
 80079c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079c4:	4b02      	ldr	r3, [pc, #8]	@ (80079d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000050 	.word	0x20000050

080079d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079dc:	2182      	movs	r1, #130	@ 0x82
 80079de:	4818      	ldr	r0, [pc, #96]	@ (8007a40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80079e0:	f000 fcdf 	bl	80083a2 <USBD_GetEpDesc>
 80079e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079e6:	2101      	movs	r1, #1
 80079e8:	4815      	ldr	r0, [pc, #84]	@ (8007a40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80079ea:	f000 fcda 	bl	80083a2 <USBD_GetEpDesc>
 80079ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079f0:	2181      	movs	r1, #129	@ 0x81
 80079f2:	4813      	ldr	r0, [pc, #76]	@ (8007a40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80079f4:	f000 fcd5 	bl	80083a2 <USBD_GetEpDesc>
 80079f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2210      	movs	r2, #16
 8007a04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d006      	beq.n	8007a1a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a14:	711a      	strb	r2, [r3, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d006      	beq.n	8007a2e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a28:	711a      	strb	r2, [r3, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2243      	movs	r2, #67	@ 0x43
 8007a32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a34:	4b02      	ldr	r3, [pc, #8]	@ (8007a40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20000050 	.word	0x20000050

08007a44 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	220a      	movs	r2, #10
 8007a50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007a52:	4b03      	ldr	r3, [pc, #12]	@ (8007a60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	2000000c 	.word	0x2000000c

08007a64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e009      	b.n	8007a8c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	33b0      	adds	r3, #176	@ 0xb0
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	32b0      	adds	r2, #176	@ 0xb0
 8007aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e008      	b.n	8007ad0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	371c      	adds	r7, #28
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	32b0      	adds	r2, #176	@ 0xb0
 8007af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e004      	b.n	8007b0a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
	...

08007b18 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	32b0      	adds	r2, #176	@ 0xb0
 8007b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007b30:	2301      	movs	r3, #1
 8007b32:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e025      	b.n	8007b8a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d11f      	bne.n	8007b88 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007b50:	4b10      	ldr	r3, [pc, #64]	@ (8007b94 <USBD_CDC_TransmitPacket+0x7c>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	f003 020f 	and.w	r2, r3, #15
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4403      	add	r3, r0
 8007b6a:	3318      	adds	r3, #24
 8007b6c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007b6e:	4b09      	ldr	r3, [pc, #36]	@ (8007b94 <USBD_CDC_TransmitPacket+0x7c>)
 8007b70:	7819      	ldrb	r1, [r3, #0]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 ffc3 	bl	8009b0a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	20000093 	.word	0x20000093

08007b98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	32b0      	adds	r2, #176	@ 0xb0
 8007baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	32b0      	adds	r2, #176	@ 0xb0
 8007bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e018      	b.n	8007bf8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	7c1b      	ldrb	r3, [r3, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10a      	bne.n	8007be4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bce:	4b0c      	ldr	r3, [pc, #48]	@ (8007c00 <USBD_CDC_ReceivePacket+0x68>)
 8007bd0:	7819      	ldrb	r1, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 ffb5 	bl	8009b4c <USBD_LL_PrepareReceive>
 8007be2:	e008      	b.n	8007bf6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007be4:	4b06      	ldr	r3, [pc, #24]	@ (8007c00 <USBD_CDC_ReceivePacket+0x68>)
 8007be6:	7819      	ldrb	r1, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bee:	2340      	movs	r3, #64	@ 0x40
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f001 ffab 	bl	8009b4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20000094 	.word	0x20000094

08007c04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e01f      	b.n	8007c5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	79fa      	ldrb	r2, [r7, #7]
 8007c4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f001 fe25 	bl	80098a0 <USBD_LL_Init>
 8007c56:	4603      	mov	r3, r0
 8007c58:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e025      	b.n	8007cc8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	32ae      	adds	r2, #174	@ 0xae
 8007c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00f      	beq.n	8007cb8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	32ae      	adds	r2, #174	@ 0xae
 8007ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca8:	f107 020e 	add.w	r2, r7, #14
 8007cac:	4610      	mov	r0, r2
 8007cae:	4798      	blx	r3
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f001 fe2d 	bl	8009938 <USBD_LL_Start>
 8007cde:	4603      	mov	r3, r0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cf0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b084      	sub	sp, #16
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	460b      	mov	r3, r1
 8007d08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d009      	beq.n	8007d2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	78fa      	ldrb	r2, [r7, #3]
 8007d22:	4611      	mov	r1, r2
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	78fa      	ldrb	r2, [r7, #3]
 8007d50:	4611      	mov	r1, r2
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	4798      	blx	r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 f90c 	bl	8008f9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007d90:	461a      	mov	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d9e:	f003 031f 	and.w	r3, r3, #31
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d01a      	beq.n	8007ddc <USBD_LL_SetupStage+0x72>
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d822      	bhi.n	8007df0 <USBD_LL_SetupStage+0x86>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <USBD_LL_SetupStage+0x4a>
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d00a      	beq.n	8007dc8 <USBD_LL_SetupStage+0x5e>
 8007db2:	e01d      	b.n	8007df0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fb63 	bl	8008488 <USBD_StdDevReq>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc6:	e020      	b.n	8007e0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fbcb 	bl	800856c <USBD_StdItfReq>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8007dda:	e016      	b.n	8007e0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fc2d 	bl	8008644 <USBD_StdEPReq>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73fb      	strb	r3, [r7, #15]
      break;
 8007dee:	e00c      	b.n	8007e0a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007df6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f001 fdfa 	bl	80099f8 <USBD_LL_StallEP>
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]
      break;
 8007e08:	bf00      	nop
  }

  return ret;
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007e26:	7afb      	ldrb	r3, [r7, #11]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d16e      	bne.n	8007f0a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007e32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	f040 8098 	bne.w	8007f70 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	689a      	ldr	r2, [r3, #8]
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d913      	bls.n	8007e74 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	1ad2      	subs	r2, r2, r3
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	4293      	cmp	r3, r2
 8007e64:	bf28      	it	cs
 8007e66:	4613      	movcs	r3, r2
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f001 f994 	bl	800919a <USBD_CtlContinueRx>
 8007e72:	e07d      	b.n	8007f70 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007e7a:	f003 031f 	and.w	r3, r3, #31
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d014      	beq.n	8007eac <USBD_LL_DataOutStage+0x98>
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d81d      	bhi.n	8007ec2 <USBD_LL_DataOutStage+0xae>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <USBD_LL_DataOutStage+0x7c>
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d003      	beq.n	8007e96 <USBD_LL_DataOutStage+0x82>
 8007e8e:	e018      	b.n	8007ec2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	75bb      	strb	r3, [r7, #22]
            break;
 8007e94:	e018      	b.n	8007ec8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 fa64 	bl	800836e <USBD_CoreFindIF>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	75bb      	strb	r3, [r7, #22]
            break;
 8007eaa:	e00d      	b.n	8007ec8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 fa66 	bl	8008388 <USBD_CoreFindEP>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	75bb      	strb	r3, [r7, #22]
            break;
 8007ec0:	e002      	b.n	8007ec8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	75bb      	strb	r3, [r7, #22]
            break;
 8007ec6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007ec8:	7dbb      	ldrb	r3, [r7, #22]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d119      	bne.n	8007f02 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d113      	bne.n	8007f02 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007eda:	7dba      	ldrb	r2, [r7, #22]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	32ae      	adds	r2, #174	@ 0xae
 8007ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00b      	beq.n	8007f02 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007eea:	7dba      	ldrb	r2, [r7, #22]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007ef2:	7dba      	ldrb	r2, [r7, #22]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	32ae      	adds	r2, #174	@ 0xae
 8007ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f001 f95a 	bl	80091bc <USBD_CtlSendStatus>
 8007f08:	e032      	b.n	8007f70 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007f0a:	7afb      	ldrb	r3, [r7, #11]
 8007f0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	4619      	mov	r1, r3
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 fa37 	bl	8008388 <USBD_CoreFindEP>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f1e:	7dbb      	ldrb	r3, [r7, #22]
 8007f20:	2bff      	cmp	r3, #255	@ 0xff
 8007f22:	d025      	beq.n	8007f70 <USBD_LL_DataOutStage+0x15c>
 8007f24:	7dbb      	ldrb	r3, [r7, #22]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d122      	bne.n	8007f70 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d117      	bne.n	8007f66 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007f36:	7dba      	ldrb	r2, [r7, #22]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	32ae      	adds	r2, #174	@ 0xae
 8007f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00f      	beq.n	8007f66 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007f46:	7dba      	ldrb	r2, [r7, #22]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007f4e:	7dba      	ldrb	r2, [r7, #22]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	32ae      	adds	r2, #174	@ 0xae
 8007f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	7afa      	ldrb	r2, [r7, #11]
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	4798      	blx	r3
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007f6c:	7dfb      	ldrb	r3, [r7, #23]
 8007f6e:	e000      	b.n	8007f72 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b086      	sub	sp, #24
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	460b      	mov	r3, r1
 8007f84:	607a      	str	r2, [r7, #4]
 8007f86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007f88:	7afb      	ldrb	r3, [r7, #11]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d16f      	bne.n	800806e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3314      	adds	r3, #20
 8007f92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d15a      	bne.n	8008054 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	689a      	ldr	r2, [r3, #8]
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d914      	bls.n	8007fd4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	1ad2      	subs	r2, r2, r3
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f001 f8bc 	bl	800913e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2100      	movs	r1, #0
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f001 fdbd 	bl	8009b4c <USBD_LL_PrepareReceive>
 8007fd2:	e03f      	b.n	8008054 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d11c      	bne.n	800801a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d316      	bcc.n	800801a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d20f      	bcs.n	800801a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f001 f89d 	bl	800913e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800800c:	2300      	movs	r3, #0
 800800e:	2200      	movs	r2, #0
 8008010:	2100      	movs	r1, #0
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f001 fd9a 	bl	8009b4c <USBD_LL_PrepareReceive>
 8008018:	e01c      	b.n	8008054 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b03      	cmp	r3, #3
 8008024:	d10f      	bne.n	8008046 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008046:	2180      	movs	r1, #128	@ 0x80
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f001 fcd5 	bl	80099f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f001 f8c7 	bl	80091e2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d03a      	beq.n	80080d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f7ff fe42 	bl	8007ce8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800806c:	e032      	b.n	80080d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800806e:	7afb      	ldrb	r3, [r7, #11]
 8008070:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008074:	b2db      	uxtb	r3, r3
 8008076:	4619      	mov	r1, r3
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f985 	bl	8008388 <USBD_CoreFindEP>
 800807e:	4603      	mov	r3, r0
 8008080:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	2bff      	cmp	r3, #255	@ 0xff
 8008086:	d025      	beq.n	80080d4 <USBD_LL_DataInStage+0x15a>
 8008088:	7dfb      	ldrb	r3, [r7, #23]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d122      	bne.n	80080d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b03      	cmp	r3, #3
 8008098:	d11c      	bne.n	80080d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800809a:	7dfa      	ldrb	r2, [r7, #23]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	32ae      	adds	r2, #174	@ 0xae
 80080a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d014      	beq.n	80080d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80080aa:	7dfa      	ldrb	r2, [r7, #23]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80080b2:	7dfa      	ldrb	r2, [r7, #23]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	32ae      	adds	r2, #174	@ 0xae
 80080b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	7afa      	ldrb	r2, [r7, #11]
 80080c0:	4611      	mov	r1, r2
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	4798      	blx	r3
 80080c6:	4603      	mov	r3, r0
 80080c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80080ca:	7dbb      	ldrb	r3, [r7, #22]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80080d0:	7dbb      	ldrb	r3, [r7, #22]
 80080d2:	e000      	b.n	80080d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008116:	2b00      	cmp	r3, #0
 8008118:	d014      	beq.n	8008144 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00e      	beq.n	8008144 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	6852      	ldr	r2, [r2, #4]
 8008132:	b2d2      	uxtb	r2, r2
 8008134:	4611      	mov	r1, r2
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008140:	2303      	movs	r3, #3
 8008142:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008144:	2340      	movs	r3, #64	@ 0x40
 8008146:	2200      	movs	r2, #0
 8008148:	2100      	movs	r1, #0
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f001 fc0f 	bl	800996e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2240      	movs	r2, #64	@ 0x40
 800815c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008160:	2340      	movs	r3, #64	@ 0x40
 8008162:	2200      	movs	r2, #0
 8008164:	2180      	movs	r1, #128	@ 0x80
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 fc01 	bl	800996e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2240      	movs	r2, #64	@ 0x40
 8008176:	621a      	str	r2, [r3, #32]

  return ret;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	460b      	mov	r3, r1
 800818c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	78fa      	ldrb	r2, [r7, #3]
 8008192:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b083      	sub	sp, #12
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b04      	cmp	r3, #4
 80081b4:	d006      	beq.n	80081c4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2204      	movs	r2, #4
 80081c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	d106      	bne.n	80081fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b03      	cmp	r3, #3
 800821c:	d110      	bne.n	8008240 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00b      	beq.n	8008240 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d005      	beq.n	8008240 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	32ae      	adds	r2, #174	@ 0xae
 8008260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008268:	2303      	movs	r3, #3
 800826a:	e01c      	b.n	80082a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b03      	cmp	r3, #3
 8008276:	d115      	bne.n	80082a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	32ae      	adds	r2, #174	@ 0xae
 8008282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	32ae      	adds	r2, #174	@ 0xae
 8008296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	4611      	mov	r1, r2
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	460b      	mov	r3, r1
 80082b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	32ae      	adds	r2, #174	@ 0xae
 80082c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e01c      	b.n	800830a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d115      	bne.n	8008308 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	32ae      	adds	r2, #174	@ 0xae
 80082e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00b      	beq.n	8008308 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	32ae      	adds	r2, #174	@ 0xae
 80082fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008300:	78fa      	ldrb	r2, [r7, #3]
 8008302:	4611      	mov	r1, r2
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00e      	beq.n	8008364 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	6852      	ldr	r2, [r2, #4]
 8008352:	b2d2      	uxtb	r2, r2
 8008354:	4611      	mov	r1, r2
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	4798      	blx	r3
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008360:	2303      	movs	r3, #3
 8008362:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	460b      	mov	r3, r1
 8008378:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800837a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800837c:	4618      	mov	r0, r3
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008394:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008396:	4618      	mov	r0, r3
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b086      	sub	sp, #24
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	885b      	ldrh	r3, [r3, #2]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	7812      	ldrb	r2, [r2, #0]
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d91f      	bls.n	8008408 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80083ce:	e013      	b.n	80083f8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80083d0:	f107 030a 	add.w	r3, r7, #10
 80083d4:	4619      	mov	r1, r3
 80083d6:	6978      	ldr	r0, [r7, #20]
 80083d8:	f000 f81b 	bl	8008412 <USBD_GetNextDesc>
 80083dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	785b      	ldrb	r3, [r3, #1]
 80083e2:	2b05      	cmp	r3, #5
 80083e4:	d108      	bne.n	80083f8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	789b      	ldrb	r3, [r3, #2]
 80083ee:	78fa      	ldrb	r2, [r7, #3]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d008      	beq.n	8008406 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80083f4:	2300      	movs	r3, #0
 80083f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	885b      	ldrh	r3, [r3, #2]
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	897b      	ldrh	r3, [r7, #10]
 8008400:	429a      	cmp	r2, r3
 8008402:	d8e5      	bhi.n	80083d0 <USBD_GetEpDesc+0x2e>
 8008404:	e000      	b.n	8008408 <USBD_GetEpDesc+0x66>
          break;
 8008406:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008408:	693b      	ldr	r3, [r7, #16]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008412:	b480      	push	{r7}
 8008414:	b085      	sub	sp, #20
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	881b      	ldrh	r3, [r3, #0]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	7812      	ldrb	r2, [r2, #0]
 8008428:	4413      	add	r3, r2
 800842a:	b29a      	uxth	r2, r3
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	461a      	mov	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4413      	add	r3, r2
 800843a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800843c:	68fb      	ldr	r3, [r7, #12]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800844a:	b480      	push	{r7}
 800844c:	b087      	sub	sp, #28
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	3301      	adds	r3, #1
 8008460:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008468:	8a3b      	ldrh	r3, [r7, #16]
 800846a:	021b      	lsls	r3, r3, #8
 800846c:	b21a      	sxth	r2, r3
 800846e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008472:	4313      	orrs	r3, r2
 8008474:	b21b      	sxth	r3, r3
 8008476:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008478:	89fb      	ldrh	r3, [r7, #14]
}
 800847a:	4618      	mov	r0, r3
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
	...

08008488 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800849e:	2b40      	cmp	r3, #64	@ 0x40
 80084a0:	d005      	beq.n	80084ae <USBD_StdDevReq+0x26>
 80084a2:	2b40      	cmp	r3, #64	@ 0x40
 80084a4:	d857      	bhi.n	8008556 <USBD_StdDevReq+0xce>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00f      	beq.n	80084ca <USBD_StdDevReq+0x42>
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	d153      	bne.n	8008556 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	32ae      	adds	r2, #174	@ 0xae
 80084b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	4798      	blx	r3
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]
      break;
 80084c8:	e04a      	b.n	8008560 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	785b      	ldrb	r3, [r3, #1]
 80084ce:	2b09      	cmp	r3, #9
 80084d0:	d83b      	bhi.n	800854a <USBD_StdDevReq+0xc2>
 80084d2:	a201      	add	r2, pc, #4	@ (adr r2, 80084d8 <USBD_StdDevReq+0x50>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	0800852d 	.word	0x0800852d
 80084dc:	08008541 	.word	0x08008541
 80084e0:	0800854b 	.word	0x0800854b
 80084e4:	08008537 	.word	0x08008537
 80084e8:	0800854b 	.word	0x0800854b
 80084ec:	0800850b 	.word	0x0800850b
 80084f0:	08008501 	.word	0x08008501
 80084f4:	0800854b 	.word	0x0800854b
 80084f8:	08008523 	.word	0x08008523
 80084fc:	08008515 	.word	0x08008515
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fa3c 	bl	8008980 <USBD_GetDescriptor>
          break;
 8008508:	e024      	b.n	8008554 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fba1 	bl	8008c54 <USBD_SetAddress>
          break;
 8008512:	e01f      	b.n	8008554 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fbe0 	bl	8008cdc <USBD_SetConfig>
 800851c:	4603      	mov	r3, r0
 800851e:	73fb      	strb	r3, [r7, #15]
          break;
 8008520:	e018      	b.n	8008554 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fc83 	bl	8008e30 <USBD_GetConfig>
          break;
 800852a:	e013      	b.n	8008554 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fcb4 	bl	8008e9c <USBD_GetStatus>
          break;
 8008534:	e00e      	b.n	8008554 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fce3 	bl	8008f04 <USBD_SetFeature>
          break;
 800853e:	e009      	b.n	8008554 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fd07 	bl	8008f56 <USBD_ClrFeature>
          break;
 8008548:	e004      	b.n	8008554 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fd5e 	bl	800900e <USBD_CtlError>
          break;
 8008552:	bf00      	nop
      }
      break;
 8008554:	e004      	b.n	8008560 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fd58 	bl	800900e <USBD_CtlError>
      break;
 800855e:	bf00      	nop
  }

  return ret;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop

0800856c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008582:	2b40      	cmp	r3, #64	@ 0x40
 8008584:	d005      	beq.n	8008592 <USBD_StdItfReq+0x26>
 8008586:	2b40      	cmp	r3, #64	@ 0x40
 8008588:	d852      	bhi.n	8008630 <USBD_StdItfReq+0xc4>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <USBD_StdItfReq+0x26>
 800858e:	2b20      	cmp	r3, #32
 8008590:	d14e      	bne.n	8008630 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008598:	b2db      	uxtb	r3, r3
 800859a:	3b01      	subs	r3, #1
 800859c:	2b02      	cmp	r3, #2
 800859e:	d840      	bhi.n	8008622 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	889b      	ldrh	r3, [r3, #4]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d836      	bhi.n	8008618 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	889b      	ldrh	r3, [r3, #4]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7ff fedb 	bl	800836e <USBD_CoreFindIF>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	2bff      	cmp	r3, #255	@ 0xff
 80085c0:	d01d      	beq.n	80085fe <USBD_StdItfReq+0x92>
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d11a      	bne.n	80085fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80085c8:	7bba      	ldrb	r2, [r7, #14]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	32ae      	adds	r2, #174	@ 0xae
 80085ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00f      	beq.n	80085f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80085d8:	7bba      	ldrb	r2, [r7, #14]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80085e0:	7bba      	ldrb	r2, [r7, #14]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	32ae      	adds	r2, #174	@ 0xae
 80085e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085f6:	e004      	b.n	8008602 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80085f8:	2303      	movs	r3, #3
 80085fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085fc:	e001      	b.n	8008602 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80085fe:	2303      	movs	r3, #3
 8008600:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	88db      	ldrh	r3, [r3, #6]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d110      	bne.n	800862c <USBD_StdItfReq+0xc0>
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10d      	bne.n	800862c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fdd3 	bl	80091bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008616:	e009      	b.n	800862c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fcf7 	bl	800900e <USBD_CtlError>
          break;
 8008620:	e004      	b.n	800862c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fcf2 	bl	800900e <USBD_CtlError>
          break;
 800862a:	e000      	b.n	800862e <USBD_StdItfReq+0xc2>
          break;
 800862c:	bf00      	nop
      }
      break;
 800862e:	e004      	b.n	800863a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fceb 	bl	800900e <USBD_CtlError>
      break;
 8008638:	bf00      	nop
  }

  return ret;
 800863a:	7bfb      	ldrb	r3, [r7, #15]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	889b      	ldrh	r3, [r3, #4]
 8008656:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008660:	2b40      	cmp	r3, #64	@ 0x40
 8008662:	d007      	beq.n	8008674 <USBD_StdEPReq+0x30>
 8008664:	2b40      	cmp	r3, #64	@ 0x40
 8008666:	f200 817f 	bhi.w	8008968 <USBD_StdEPReq+0x324>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d02a      	beq.n	80086c4 <USBD_StdEPReq+0x80>
 800866e:	2b20      	cmp	r3, #32
 8008670:	f040 817a 	bne.w	8008968 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7ff fe85 	bl	8008388 <USBD_CoreFindEP>
 800867e:	4603      	mov	r3, r0
 8008680:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008682:	7b7b      	ldrb	r3, [r7, #13]
 8008684:	2bff      	cmp	r3, #255	@ 0xff
 8008686:	f000 8174 	beq.w	8008972 <USBD_StdEPReq+0x32e>
 800868a:	7b7b      	ldrb	r3, [r7, #13]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f040 8170 	bne.w	8008972 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008692:	7b7a      	ldrb	r2, [r7, #13]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800869a:	7b7a      	ldrb	r2, [r7, #13]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	32ae      	adds	r2, #174	@ 0xae
 80086a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 8163 	beq.w	8008972 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80086ac:	7b7a      	ldrb	r2, [r7, #13]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	32ae      	adds	r2, #174	@ 0xae
 80086b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	4798      	blx	r3
 80086be:	4603      	mov	r3, r0
 80086c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80086c2:	e156      	b.n	8008972 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	785b      	ldrb	r3, [r3, #1]
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d008      	beq.n	80086de <USBD_StdEPReq+0x9a>
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	f300 8145 	bgt.w	800895c <USBD_StdEPReq+0x318>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 809b 	beq.w	800880e <USBD_StdEPReq+0x1ca>
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d03c      	beq.n	8008756 <USBD_StdEPReq+0x112>
 80086dc:	e13e      	b.n	800895c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d002      	beq.n	80086f0 <USBD_StdEPReq+0xac>
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d016      	beq.n	800871c <USBD_StdEPReq+0xd8>
 80086ee:	e02c      	b.n	800874a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00d      	beq.n	8008712 <USBD_StdEPReq+0xce>
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b80      	cmp	r3, #128	@ 0x80
 80086fa:	d00a      	beq.n	8008712 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	4619      	mov	r1, r3
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f001 f979 	bl	80099f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008706:	2180      	movs	r1, #128	@ 0x80
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 f975 	bl	80099f8 <USBD_LL_StallEP>
 800870e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008710:	e020      	b.n	8008754 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fc7a 	bl	800900e <USBD_CtlError>
              break;
 800871a:	e01b      	b.n	8008754 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	885b      	ldrh	r3, [r3, #2]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10e      	bne.n	8008742 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00b      	beq.n	8008742 <USBD_StdEPReq+0xfe>
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	2b80      	cmp	r3, #128	@ 0x80
 800872e:	d008      	beq.n	8008742 <USBD_StdEPReq+0xfe>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	88db      	ldrh	r3, [r3, #6]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d104      	bne.n	8008742 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008738:	7bbb      	ldrb	r3, [r7, #14]
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 f95b 	bl	80099f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fd3a 	bl	80091bc <USBD_CtlSendStatus>

              break;
 8008748:	e004      	b.n	8008754 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fc5e 	bl	800900e <USBD_CtlError>
              break;
 8008752:	bf00      	nop
          }
          break;
 8008754:	e107      	b.n	8008966 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b02      	cmp	r3, #2
 8008760:	d002      	beq.n	8008768 <USBD_StdEPReq+0x124>
 8008762:	2b03      	cmp	r3, #3
 8008764:	d016      	beq.n	8008794 <USBD_StdEPReq+0x150>
 8008766:	e04b      	b.n	8008800 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00d      	beq.n	800878a <USBD_StdEPReq+0x146>
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	2b80      	cmp	r3, #128	@ 0x80
 8008772:	d00a      	beq.n	800878a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008774:	7bbb      	ldrb	r3, [r7, #14]
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 f93d 	bl	80099f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800877e:	2180      	movs	r1, #128	@ 0x80
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f001 f939 	bl	80099f8 <USBD_LL_StallEP>
 8008786:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008788:	e040      	b.n	800880c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fc3e 	bl	800900e <USBD_CtlError>
              break;
 8008792:	e03b      	b.n	800880c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	885b      	ldrh	r3, [r3, #2]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d136      	bne.n	800880a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d004      	beq.n	80087b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 f943 	bl	8009a36 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fd03 	bl	80091bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff fde4 	bl	8008388 <USBD_CoreFindEP>
 80087c0:	4603      	mov	r3, r0
 80087c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087c4:	7b7b      	ldrb	r3, [r7, #13]
 80087c6:	2bff      	cmp	r3, #255	@ 0xff
 80087c8:	d01f      	beq.n	800880a <USBD_StdEPReq+0x1c6>
 80087ca:	7b7b      	ldrb	r3, [r7, #13]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d11c      	bne.n	800880a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80087d0:	7b7a      	ldrb	r2, [r7, #13]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80087d8:	7b7a      	ldrb	r2, [r7, #13]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	32ae      	adds	r2, #174	@ 0xae
 80087de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d010      	beq.n	800880a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80087e8:	7b7a      	ldrb	r2, [r7, #13]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	32ae      	adds	r2, #174	@ 0xae
 80087ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	4798      	blx	r3
 80087fa:	4603      	mov	r3, r0
 80087fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80087fe:	e004      	b.n	800880a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fc03 	bl	800900e <USBD_CtlError>
              break;
 8008808:	e000      	b.n	800880c <USBD_StdEPReq+0x1c8>
              break;
 800880a:	bf00      	nop
          }
          break;
 800880c:	e0ab      	b.n	8008966 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b02      	cmp	r3, #2
 8008818:	d002      	beq.n	8008820 <USBD_StdEPReq+0x1dc>
 800881a:	2b03      	cmp	r3, #3
 800881c:	d032      	beq.n	8008884 <USBD_StdEPReq+0x240>
 800881e:	e097      	b.n	8008950 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d007      	beq.n	8008836 <USBD_StdEPReq+0x1f2>
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b80      	cmp	r3, #128	@ 0x80
 800882a:	d004      	beq.n	8008836 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fbed 	bl	800900e <USBD_CtlError>
                break;
 8008834:	e091      	b.n	800895a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008836:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800883a:	2b00      	cmp	r3, #0
 800883c:	da0b      	bge.n	8008856 <USBD_StdEPReq+0x212>
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	3310      	adds	r3, #16
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	4413      	add	r3, r2
 8008852:	3304      	adds	r3, #4
 8008854:	e00b      	b.n	800886e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	4413      	add	r3, r2
 800886c:	3304      	adds	r3, #4
 800886e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2202      	movs	r2, #2
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fc43 	bl	8009108 <USBD_CtlSendData>
              break;
 8008882:	e06a      	b.n	800895a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008888:	2b00      	cmp	r3, #0
 800888a:	da11      	bge.n	80088b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800888c:	7bbb      	ldrb	r3, [r7, #14]
 800888e:	f003 020f 	and.w	r2, r3, #15
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	4613      	mov	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	440b      	add	r3, r1
 800889e:	3324      	adds	r3, #36	@ 0x24
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d117      	bne.n	80088d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fbb0 	bl	800900e <USBD_CtlError>
                  break;
 80088ae:	e054      	b.n	800895a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	f003 020f 	and.w	r2, r3, #15
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	4613      	mov	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	440b      	add	r3, r1
 80088c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d104      	bne.n	80088d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fb9d 	bl	800900e <USBD_CtlError>
                  break;
 80088d4:	e041      	b.n	800895a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	da0b      	bge.n	80088f6 <USBD_StdEPReq+0x2b2>
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	3310      	adds	r3, #16
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	4413      	add	r3, r2
 80088f2:	3304      	adds	r3, #4
 80088f4:	e00b      	b.n	800890e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	4413      	add	r3, r2
 800890c:	3304      	adds	r3, #4
 800890e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <USBD_StdEPReq+0x2d8>
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	2b80      	cmp	r3, #128	@ 0x80
 800891a:	d103      	bne.n	8008924 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2200      	movs	r2, #0
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	e00e      	b.n	8008942 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008924:	7bbb      	ldrb	r3, [r7, #14]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f001 f8a3 	bl	8009a74 <USBD_LL_IsStallEP>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2201      	movs	r2, #1
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	e002      	b.n	8008942 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2202      	movs	r2, #2
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fbdd 	bl	8009108 <USBD_CtlSendData>
              break;
 800894e:	e004      	b.n	800895a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fb5b 	bl	800900e <USBD_CtlError>
              break;
 8008958:	bf00      	nop
          }
          break;
 800895a:	e004      	b.n	8008966 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fb55 	bl	800900e <USBD_CtlError>
          break;
 8008964:	bf00      	nop
      }
      break;
 8008966:	e005      	b.n	8008974 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fb4f 	bl	800900e <USBD_CtlError>
      break;
 8008970:	e000      	b.n	8008974 <USBD_StdEPReq+0x330>
      break;
 8008972:	bf00      	nop
  }

  return ret;
 8008974:	7bfb      	ldrb	r3, [r7, #15]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	885b      	ldrh	r3, [r3, #2]
 800899a:	0a1b      	lsrs	r3, r3, #8
 800899c:	b29b      	uxth	r3, r3
 800899e:	3b01      	subs	r3, #1
 80089a0:	2b06      	cmp	r3, #6
 80089a2:	f200 8128 	bhi.w	8008bf6 <USBD_GetDescriptor+0x276>
 80089a6:	a201      	add	r2, pc, #4	@ (adr r2, 80089ac <USBD_GetDescriptor+0x2c>)
 80089a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ac:	080089c9 	.word	0x080089c9
 80089b0:	080089e1 	.word	0x080089e1
 80089b4:	08008a21 	.word	0x08008a21
 80089b8:	08008bf7 	.word	0x08008bf7
 80089bc:	08008bf7 	.word	0x08008bf7
 80089c0:	08008b97 	.word	0x08008b97
 80089c4:	08008bc3 	.word	0x08008bc3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	7c12      	ldrb	r2, [r2, #16]
 80089d4:	f107 0108 	add.w	r1, r7, #8
 80089d8:	4610      	mov	r0, r2
 80089da:	4798      	blx	r3
 80089dc:	60f8      	str	r0, [r7, #12]
      break;
 80089de:	e112      	b.n	8008c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	7c1b      	ldrb	r3, [r3, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10d      	bne.n	8008a04 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f0:	f107 0208 	add.w	r2, r7, #8
 80089f4:	4610      	mov	r0, r2
 80089f6:	4798      	blx	r3
 80089f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	3301      	adds	r3, #1
 80089fe:	2202      	movs	r2, #2
 8008a00:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a02:	e100      	b.n	8008c06 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0c:	f107 0208 	add.w	r2, r7, #8
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3
 8008a14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	701a      	strb	r2, [r3, #0]
      break;
 8008a1e:	e0f2      	b.n	8008c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	885b      	ldrh	r3, [r3, #2]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	f200 80ac 	bhi.w	8008b84 <USBD_GetDescriptor+0x204>
 8008a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a34 <USBD_GetDescriptor+0xb4>)
 8008a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a32:	bf00      	nop
 8008a34:	08008a4d 	.word	0x08008a4d
 8008a38:	08008a81 	.word	0x08008a81
 8008a3c:	08008ab5 	.word	0x08008ab5
 8008a40:	08008ae9 	.word	0x08008ae9
 8008a44:	08008b1d 	.word	0x08008b1d
 8008a48:	08008b51 	.word	0x08008b51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	7c12      	ldrb	r2, [r2, #16]
 8008a64:	f107 0108 	add.w	r1, r7, #8
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
 8008a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a6e:	e091      	b.n	8008b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 facb 	bl	800900e <USBD_CtlError>
            err++;
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a7e:	e089      	b.n	8008b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	7c12      	ldrb	r2, [r2, #16]
 8008a98:	f107 0108 	add.w	r1, r7, #8
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4798      	blx	r3
 8008aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aa2:	e077      	b.n	8008b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fab1 	bl	800900e <USBD_CtlError>
            err++;
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ab2:	e06f      	b.n	8008b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00b      	beq.n	8008ad8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	7c12      	ldrb	r2, [r2, #16]
 8008acc:	f107 0108 	add.w	r1, r7, #8
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4798      	blx	r3
 8008ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ad6:	e05d      	b.n	8008b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fa97 	bl	800900e <USBD_CtlError>
            err++;
 8008ae0:	7afb      	ldrb	r3, [r7, #11]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ae6:	e055      	b.n	8008b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00b      	beq.n	8008b0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	7c12      	ldrb	r2, [r2, #16]
 8008b00:	f107 0108 	add.w	r1, r7, #8
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
 8008b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b0a:	e043      	b.n	8008b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fa7d 	bl	800900e <USBD_CtlError>
            err++;
 8008b14:	7afb      	ldrb	r3, [r7, #11]
 8008b16:	3301      	adds	r3, #1
 8008b18:	72fb      	strb	r3, [r7, #11]
          break;
 8008b1a:	e03b      	b.n	8008b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	7c12      	ldrb	r2, [r2, #16]
 8008b34:	f107 0108 	add.w	r1, r7, #8
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4798      	blx	r3
 8008b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b3e:	e029      	b.n	8008b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fa63 	bl	800900e <USBD_CtlError>
            err++;
 8008b48:	7afb      	ldrb	r3, [r7, #11]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b4e:	e021      	b.n	8008b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00b      	beq.n	8008b74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	7c12      	ldrb	r2, [r2, #16]
 8008b68:	f107 0108 	add.w	r1, r7, #8
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b72:	e00f      	b.n	8008b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa49 	bl	800900e <USBD_CtlError>
            err++;
 8008b7c:	7afb      	ldrb	r3, [r7, #11]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	72fb      	strb	r3, [r7, #11]
          break;
 8008b82:	e007      	b.n	8008b94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fa41 	bl	800900e <USBD_CtlError>
          err++;
 8008b8c:	7afb      	ldrb	r3, [r7, #11]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008b92:	bf00      	nop
      }
      break;
 8008b94:	e037      	b.n	8008c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	7c1b      	ldrb	r3, [r3, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d109      	bne.n	8008bb2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ba6:	f107 0208 	add.w	r2, r7, #8
 8008baa:	4610      	mov	r0, r2
 8008bac:	4798      	blx	r3
 8008bae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bb0:	e029      	b.n	8008c06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fa2a 	bl	800900e <USBD_CtlError>
        err++;
 8008bba:	7afb      	ldrb	r3, [r7, #11]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	72fb      	strb	r3, [r7, #11]
      break;
 8008bc0:	e021      	b.n	8008c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	7c1b      	ldrb	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10d      	bne.n	8008be6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd2:	f107 0208 	add.w	r2, r7, #8
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	4798      	blx	r3
 8008bda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3301      	adds	r3, #1
 8008be0:	2207      	movs	r2, #7
 8008be2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008be4:	e00f      	b.n	8008c06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fa10 	bl	800900e <USBD_CtlError>
        err++;
 8008bee:	7afb      	ldrb	r3, [r7, #11]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8008bf4:	e007      	b.n	8008c06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fa08 	bl	800900e <USBD_CtlError>
      err++;
 8008bfe:	7afb      	ldrb	r3, [r7, #11]
 8008c00:	3301      	adds	r3, #1
 8008c02:	72fb      	strb	r3, [r7, #11]
      break;
 8008c04:	bf00      	nop
  }

  if (err != 0U)
 8008c06:	7afb      	ldrb	r3, [r7, #11]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d11e      	bne.n	8008c4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	88db      	ldrh	r3, [r3, #6]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d016      	beq.n	8008c42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008c14:	893b      	ldrh	r3, [r7, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00e      	beq.n	8008c38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	88da      	ldrh	r2, [r3, #6]
 8008c1e:	893b      	ldrh	r3, [r7, #8]
 8008c20:	4293      	cmp	r3, r2
 8008c22:	bf28      	it	cs
 8008c24:	4613      	movcs	r3, r2
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c2a:	893b      	ldrh	r3, [r7, #8]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	68f9      	ldr	r1, [r7, #12]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fa69 	bl	8009108 <USBD_CtlSendData>
 8008c36:	e009      	b.n	8008c4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f9e7 	bl	800900e <USBD_CtlError>
 8008c40:	e004      	b.n	8008c4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 faba 	bl	80091bc <USBD_CtlSendStatus>
 8008c48:	e000      	b.n	8008c4c <USBD_GetDescriptor+0x2cc>
    return;
 8008c4a:	bf00      	nop
  }
}
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop

08008c54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	889b      	ldrh	r3, [r3, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d131      	bne.n	8008cca <USBD_SetAddress+0x76>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d12d      	bne.n	8008cca <USBD_SetAddress+0x76>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	885b      	ldrh	r3, [r3, #2]
 8008c72:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c74:	d829      	bhi.n	8008cca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	885b      	ldrh	r3, [r3, #2]
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d104      	bne.n	8008c98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f9bc 	bl	800900e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c96:	e01d      	b.n	8008cd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	7bfa      	ldrb	r2, [r7, #15]
 8008c9c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 ff11 	bl	8009acc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fa86 	bl	80091bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d004      	beq.n	8008cc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2202      	movs	r2, #2
 8008cba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cbe:	e009      	b.n	8008cd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc8:	e004      	b.n	8008cd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f99e 	bl	800900e <USBD_CtlError>
  }
}
 8008cd2:	bf00      	nop
 8008cd4:	bf00      	nop
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	885b      	ldrh	r3, [r3, #2]
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	4b4e      	ldr	r3, [pc, #312]	@ (8008e2c <USBD_SetConfig+0x150>)
 8008cf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cf4:	4b4d      	ldr	r3, [pc, #308]	@ (8008e2c <USBD_SetConfig+0x150>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d905      	bls.n	8008d08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f985 	bl	800900e <USBD_CtlError>
    return USBD_FAIL;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e08c      	b.n	8008e22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d002      	beq.n	8008d1a <USBD_SetConfig+0x3e>
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d029      	beq.n	8008d6c <USBD_SetConfig+0x90>
 8008d18:	e075      	b.n	8008e06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008d1a:	4b44      	ldr	r3, [pc, #272]	@ (8008e2c <USBD_SetConfig+0x150>)
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d020      	beq.n	8008d64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008d22:	4b42      	ldr	r3, [pc, #264]	@ (8008e2c <USBD_SetConfig+0x150>)
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d2c:	4b3f      	ldr	r3, [pc, #252]	@ (8008e2c <USBD_SetConfig+0x150>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7fe ffe3 	bl	8007cfe <USBD_SetClassConfig>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d008      	beq.n	8008d54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f962 	bl	800900e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d52:	e065      	b.n	8008e20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fa31 	bl	80091bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2203      	movs	r2, #3
 8008d5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008d62:	e05d      	b.n	8008e20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fa29 	bl	80091bc <USBD_CtlSendStatus>
      break;
 8008d6a:	e059      	b.n	8008e20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8008e2c <USBD_SetConfig+0x150>)
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d112      	bne.n	8008d9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2202      	movs	r2, #2
 8008d78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8008e2c <USBD_SetConfig+0x150>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	461a      	mov	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d86:	4b29      	ldr	r3, [pc, #164]	@ (8008e2c <USBD_SetConfig+0x150>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7fe ffd2 	bl	8007d36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa12 	bl	80091bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d98:	e042      	b.n	8008e20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008d9a:	4b24      	ldr	r3, [pc, #144]	@ (8008e2c <USBD_SetConfig+0x150>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d02a      	beq.n	8008dfe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7fe ffc0 	bl	8007d36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008db6:	4b1d      	ldr	r3, [pc, #116]	@ (8008e2c <USBD_SetConfig+0x150>)
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8008e2c <USBD_SetConfig+0x150>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7fe ff99 	bl	8007cfe <USBD_SetClassConfig>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00f      	beq.n	8008df6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f918 	bl	800900e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7fe ffa5 	bl	8007d36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008df4:	e014      	b.n	8008e20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f9e0 	bl	80091bc <USBD_CtlSendStatus>
      break;
 8008dfc:	e010      	b.n	8008e20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f9dc 	bl	80091bc <USBD_CtlSendStatus>
      break;
 8008e04:	e00c      	b.n	8008e20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f900 	bl	800900e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e0e:	4b07      	ldr	r3, [pc, #28]	@ (8008e2c <USBD_SetConfig+0x150>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7fe ff8e 	bl	8007d36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e1e:	bf00      	nop
  }

  return ret;
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	20000474 	.word	0x20000474

08008e30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	88db      	ldrh	r3, [r3, #6]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d004      	beq.n	8008e4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f8e2 	bl	800900e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e4a:	e023      	b.n	8008e94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	dc02      	bgt.n	8008e5e <USBD_GetConfig+0x2e>
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	dc03      	bgt.n	8008e64 <USBD_GetConfig+0x34>
 8008e5c:	e015      	b.n	8008e8a <USBD_GetConfig+0x5a>
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d00b      	beq.n	8008e7a <USBD_GetConfig+0x4a>
 8008e62:	e012      	b.n	8008e8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3308      	adds	r3, #8
 8008e6e:	2201      	movs	r2, #1
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f948 	bl	8009108 <USBD_CtlSendData>
        break;
 8008e78:	e00c      	b.n	8008e94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	2201      	movs	r2, #1
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f940 	bl	8009108 <USBD_CtlSendData>
        break;
 8008e88:	e004      	b.n	8008e94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f8be 	bl	800900e <USBD_CtlError>
        break;
 8008e92:	bf00      	nop
}
 8008e94:	bf00      	nop
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d81e      	bhi.n	8008ef2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	88db      	ldrh	r3, [r3, #6]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d004      	beq.n	8008ec6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f8a5 	bl	800900e <USBD_CtlError>
        break;
 8008ec4:	e01a      	b.n	8008efc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d005      	beq.n	8008ee2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f043 0202 	orr.w	r2, r3, #2
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	330c      	adds	r3, #12
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f90c 	bl	8009108 <USBD_CtlSendData>
      break;
 8008ef0:	e004      	b.n	8008efc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f88a 	bl	800900e <USBD_CtlError>
      break;
 8008efa:	bf00      	nop
  }
}
 8008efc:	bf00      	nop
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	885b      	ldrh	r3, [r3, #2]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d107      	bne.n	8008f26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f94c 	bl	80091bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008f24:	e013      	b.n	8008f4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	885b      	ldrh	r3, [r3, #2]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d10b      	bne.n	8008f46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	889b      	ldrh	r3, [r3, #4]
 8008f32:	0a1b      	lsrs	r3, r3, #8
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	b2da      	uxtb	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f93c 	bl	80091bc <USBD_CtlSendStatus>
}
 8008f44:	e003      	b.n	8008f4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f860 	bl	800900e <USBD_CtlError>
}
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d80b      	bhi.n	8008f86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	885b      	ldrh	r3, [r3, #2]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d10c      	bne.n	8008f90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f91c 	bl	80091bc <USBD_CtlSendStatus>
      }
      break;
 8008f84:	e004      	b.n	8008f90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f840 	bl	800900e <USBD_CtlError>
      break;
 8008f8e:	e000      	b.n	8008f92 <USBD_ClrFeature+0x3c>
      break;
 8008f90:	bf00      	nop
  }
}
 8008f92:	bf00      	nop
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	781a      	ldrb	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	781a      	ldrb	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f7ff fa40 	bl	800844a <SWAPBYTE>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	461a      	mov	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f7ff fa33 	bl	800844a <SWAPBYTE>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f7ff fa26 	bl	800844a <SWAPBYTE>
 8008ffe:	4603      	mov	r3, r0
 8009000:	461a      	mov	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	80da      	strh	r2, [r3, #6]
}
 8009006:	bf00      	nop
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009018:	2180      	movs	r1, #128	@ 0x80
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fcec 	bl	80099f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009020:	2100      	movs	r1, #0
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fce8 	bl	80099f8 <USBD_LL_StallEP>
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d042      	beq.n	80090cc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800904a:	6938      	ldr	r0, [r7, #16]
 800904c:	f000 f842 	bl	80090d4 <USBD_GetLen>
 8009050:	4603      	mov	r3, r0
 8009052:	3301      	adds	r3, #1
 8009054:	005b      	lsls	r3, r3, #1
 8009056:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800905a:	d808      	bhi.n	800906e <USBD_GetString+0x3e>
 800905c:	6938      	ldr	r0, [r7, #16]
 800905e:	f000 f839 	bl	80090d4 <USBD_GetLen>
 8009062:	4603      	mov	r3, r0
 8009064:	3301      	adds	r3, #1
 8009066:	b29b      	uxth	r3, r3
 8009068:	005b      	lsls	r3, r3, #1
 800906a:	b29a      	uxth	r2, r3
 800906c:	e001      	b.n	8009072 <USBD_GetString+0x42>
 800906e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009076:	7dfb      	ldrb	r3, [r7, #23]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	4413      	add	r3, r2
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	7812      	ldrb	r2, [r2, #0]
 8009080:	701a      	strb	r2, [r3, #0]
  idx++;
 8009082:	7dfb      	ldrb	r3, [r7, #23]
 8009084:	3301      	adds	r3, #1
 8009086:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009088:	7dfb      	ldrb	r3, [r7, #23]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	4413      	add	r3, r2
 800908e:	2203      	movs	r2, #3
 8009090:	701a      	strb	r2, [r3, #0]
  idx++;
 8009092:	7dfb      	ldrb	r3, [r7, #23]
 8009094:	3301      	adds	r3, #1
 8009096:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009098:	e013      	b.n	80090c2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	4413      	add	r3, r2
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	7812      	ldrb	r2, [r2, #0]
 80090a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	3301      	adds	r3, #1
 80090aa:	613b      	str	r3, [r7, #16]
    idx++;
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	3301      	adds	r3, #1
 80090b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	4413      	add	r3, r2
 80090b8:	2200      	movs	r2, #0
 80090ba:	701a      	strb	r2, [r3, #0]
    idx++;
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
 80090be:	3301      	adds	r3, #1
 80090c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e7      	bne.n	800909a <USBD_GetString+0x6a>
 80090ca:	e000      	b.n	80090ce <USBD_GetString+0x9e>
    return;
 80090cc:	bf00      	nop
  }
}
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80090e4:	e005      	b.n	80090f2 <USBD_GetLen+0x1e>
  {
    len++;
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
 80090e8:	3301      	adds	r3, #1
 80090ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	3301      	adds	r3, #1
 80090f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1f5      	bne.n	80090e6 <USBD_GetLen+0x12>
  }

  return len;
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2202      	movs	r2, #2
 8009118:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	2100      	movs	r1, #0
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f000 fceb 	bl	8009b0a <USBD_LL_Transmit>

  return USBD_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	60f8      	str	r0, [r7, #12]
 8009146:	60b9      	str	r1, [r7, #8]
 8009148:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	2100      	movs	r1, #0
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 fcda 	bl	8009b0a <USBD_LL_Transmit>

  return USBD_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2203      	movs	r2, #3
 8009170:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	2100      	movs	r1, #0
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 fcde 	bl	8009b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	60f8      	str	r0, [r7, #12]
 80091a2:	60b9      	str	r1, [r7, #8]
 80091a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	2100      	movs	r1, #0
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 fccd 	bl	8009b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2204      	movs	r2, #4
 80091c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80091cc:	2300      	movs	r3, #0
 80091ce:	2200      	movs	r2, #0
 80091d0:	2100      	movs	r1, #0
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fc99 	bl	8009b0a <USBD_LL_Transmit>

  return USBD_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2205      	movs	r2, #5
 80091ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091f2:	2300      	movs	r3, #0
 80091f4:	2200      	movs	r2, #0
 80091f6:	2100      	movs	r1, #0
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fca7 	bl	8009b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800920c:	2200      	movs	r2, #0
 800920e:	4912      	ldr	r1, [pc, #72]	@ (8009258 <MX_USB_DEVICE_Init+0x50>)
 8009210:	4812      	ldr	r0, [pc, #72]	@ (800925c <MX_USB_DEVICE_Init+0x54>)
 8009212:	f7fe fcf7 	bl	8007c04 <USBD_Init>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800921c:	f7f8 f88e 	bl	800133c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009220:	490f      	ldr	r1, [pc, #60]	@ (8009260 <MX_USB_DEVICE_Init+0x58>)
 8009222:	480e      	ldr	r0, [pc, #56]	@ (800925c <MX_USB_DEVICE_Init+0x54>)
 8009224:	f7fe fd1e 	bl	8007c64 <USBD_RegisterClass>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800922e:	f7f8 f885 	bl	800133c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009232:	490c      	ldr	r1, [pc, #48]	@ (8009264 <MX_USB_DEVICE_Init+0x5c>)
 8009234:	4809      	ldr	r0, [pc, #36]	@ (800925c <MX_USB_DEVICE_Init+0x54>)
 8009236:	f7fe fc15 	bl	8007a64 <USBD_CDC_RegisterInterface>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009240:	f7f8 f87c 	bl	800133c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009244:	4805      	ldr	r0, [pc, #20]	@ (800925c <MX_USB_DEVICE_Init+0x54>)
 8009246:	f7fe fd43 	bl	8007cd0 <USBD_Start>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009250:	f7f8 f874 	bl	800133c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009254:	bf00      	nop
 8009256:	bd80      	pop	{r7, pc}
 8009258:	200000ac 	.word	0x200000ac
 800925c:	20000478 	.word	0x20000478
 8009260:	20000018 	.word	0x20000018
 8009264:	20000098 	.word	0x20000098

08009268 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800926c:	2200      	movs	r2, #0
 800926e:	4905      	ldr	r1, [pc, #20]	@ (8009284 <CDC_Init_FS+0x1c>)
 8009270:	4805      	ldr	r0, [pc, #20]	@ (8009288 <CDC_Init_FS+0x20>)
 8009272:	f7fe fc11 	bl	8007a98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009276:	4905      	ldr	r1, [pc, #20]	@ (800928c <CDC_Init_FS+0x24>)
 8009278:	4803      	ldr	r0, [pc, #12]	@ (8009288 <CDC_Init_FS+0x20>)
 800927a:	f7fe fc2f 	bl	8007adc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800927e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009280:	4618      	mov	r0, r3
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20000f54 	.word	0x20000f54
 8009288:	20000478 	.word	0x20000478
 800928c:	20000754 	.word	0x20000754

08009290 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009290:	b480      	push	{r7}
 8009292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009294:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009296:	4618      	mov	r0, r3
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	6039      	str	r1, [r7, #0]
 80092aa:	71fb      	strb	r3, [r7, #7]
 80092ac:	4613      	mov	r3, r2
 80092ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	2b23      	cmp	r3, #35	@ 0x23
 80092b4:	d84a      	bhi.n	800934c <CDC_Control_FS+0xac>
 80092b6:	a201      	add	r2, pc, #4	@ (adr r2, 80092bc <CDC_Control_FS+0x1c>)
 80092b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092bc:	0800934d 	.word	0x0800934d
 80092c0:	0800934d 	.word	0x0800934d
 80092c4:	0800934d 	.word	0x0800934d
 80092c8:	0800934d 	.word	0x0800934d
 80092cc:	0800934d 	.word	0x0800934d
 80092d0:	0800934d 	.word	0x0800934d
 80092d4:	0800934d 	.word	0x0800934d
 80092d8:	0800934d 	.word	0x0800934d
 80092dc:	0800934d 	.word	0x0800934d
 80092e0:	0800934d 	.word	0x0800934d
 80092e4:	0800934d 	.word	0x0800934d
 80092e8:	0800934d 	.word	0x0800934d
 80092ec:	0800934d 	.word	0x0800934d
 80092f0:	0800934d 	.word	0x0800934d
 80092f4:	0800934d 	.word	0x0800934d
 80092f8:	0800934d 	.word	0x0800934d
 80092fc:	0800934d 	.word	0x0800934d
 8009300:	0800934d 	.word	0x0800934d
 8009304:	0800934d 	.word	0x0800934d
 8009308:	0800934d 	.word	0x0800934d
 800930c:	0800934d 	.word	0x0800934d
 8009310:	0800934d 	.word	0x0800934d
 8009314:	0800934d 	.word	0x0800934d
 8009318:	0800934d 	.word	0x0800934d
 800931c:	0800934d 	.word	0x0800934d
 8009320:	0800934d 	.word	0x0800934d
 8009324:	0800934d 	.word	0x0800934d
 8009328:	0800934d 	.word	0x0800934d
 800932c:	0800934d 	.word	0x0800934d
 8009330:	0800934d 	.word	0x0800934d
 8009334:	0800934d 	.word	0x0800934d
 8009338:	0800934d 	.word	0x0800934d
 800933c:	0800934d 	.word	0x0800934d
 8009340:	0800934d 	.word	0x0800934d
 8009344:	0800934d 	.word	0x0800934d
 8009348:	0800934d 	.word	0x0800934d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800934c:	bf00      	nop
  }

  return (USBD_OK);
 800934e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009350:	4618      	mov	r0, r3
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	4805      	ldr	r0, [pc, #20]	@ (8009380 <CDC_Receive_FS+0x24>)
 800936a:	f7fe fbb7 	bl	8007adc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800936e:	4804      	ldr	r0, [pc, #16]	@ (8009380 <CDC_Receive_FS+0x24>)
 8009370:	f7fe fc12 	bl	8007b98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009374:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20000478 	.word	0x20000478

08009384 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009394:	4b0d      	ldr	r3, [pc, #52]	@ (80093cc <CDC_Transmit_FS+0x48>)
 8009396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800939a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e00b      	b.n	80093c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80093aa:	887b      	ldrh	r3, [r7, #2]
 80093ac:	461a      	mov	r2, r3
 80093ae:	6879      	ldr	r1, [r7, #4]
 80093b0:	4806      	ldr	r0, [pc, #24]	@ (80093cc <CDC_Transmit_FS+0x48>)
 80093b2:	f7fe fb71 	bl	8007a98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80093b6:	4805      	ldr	r0, [pc, #20]	@ (80093cc <CDC_Transmit_FS+0x48>)
 80093b8:	f7fe fbae 	bl	8007b18 <USBD_CDC_TransmitPacket>
 80093bc:	4603      	mov	r3, r0
 80093be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20000478 	.word	0x20000478

080093d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	4613      	mov	r3, r2
 80093dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80093e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	371c      	adds	r7, #28
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
	...

080093f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	4603      	mov	r3, r0
 80093fc:	6039      	str	r1, [r7, #0]
 80093fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	2212      	movs	r2, #18
 8009404:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009406:	4b03      	ldr	r3, [pc, #12]	@ (8009414 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009408:	4618      	mov	r0, r3
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	200000c8 	.word	0x200000c8

08009418 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	4603      	mov	r3, r0
 8009420:	6039      	str	r1, [r7, #0]
 8009422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	2204      	movs	r2, #4
 8009428:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800942a:	4b03      	ldr	r3, [pc, #12]	@ (8009438 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800942c:	4618      	mov	r0, r3
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	200000dc 	.word	0x200000dc

0800943c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	6039      	str	r1, [r7, #0]
 8009446:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009448:	79fb      	ldrb	r3, [r7, #7]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d105      	bne.n	800945a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	4907      	ldr	r1, [pc, #28]	@ (8009470 <USBD_FS_ProductStrDescriptor+0x34>)
 8009452:	4808      	ldr	r0, [pc, #32]	@ (8009474 <USBD_FS_ProductStrDescriptor+0x38>)
 8009454:	f7ff fdec 	bl	8009030 <USBD_GetString>
 8009458:	e004      	b.n	8009464 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	4904      	ldr	r1, [pc, #16]	@ (8009470 <USBD_FS_ProductStrDescriptor+0x34>)
 800945e:	4805      	ldr	r0, [pc, #20]	@ (8009474 <USBD_FS_ProductStrDescriptor+0x38>)
 8009460:	f7ff fde6 	bl	8009030 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009464:	4b02      	ldr	r3, [pc, #8]	@ (8009470 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009466:	4618      	mov	r0, r3
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	20001754 	.word	0x20001754
 8009474:	0800db28 	.word	0x0800db28

08009478 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	4603      	mov	r3, r0
 8009480:	6039      	str	r1, [r7, #0]
 8009482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	4904      	ldr	r1, [pc, #16]	@ (8009498 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009488:	4804      	ldr	r0, [pc, #16]	@ (800949c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800948a:	f7ff fdd1 	bl	8009030 <USBD_GetString>
  return USBD_StrDesc;
 800948e:	4b02      	ldr	r3, [pc, #8]	@ (8009498 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009490:	4618      	mov	r0, r3
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	20001754 	.word	0x20001754
 800949c:	0800db40 	.word	0x0800db40

080094a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	4603      	mov	r3, r0
 80094a8:	6039      	str	r1, [r7, #0]
 80094aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	221a      	movs	r2, #26
 80094b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80094b2:	f000 f843 	bl	800953c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80094b6:	4b02      	ldr	r3, [pc, #8]	@ (80094c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	200000e0 	.word	0x200000e0

080094c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	6039      	str	r1, [r7, #0]
 80094ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094d0:	79fb      	ldrb	r3, [r7, #7]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d105      	bne.n	80094e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	4907      	ldr	r1, [pc, #28]	@ (80094f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094da:	4808      	ldr	r0, [pc, #32]	@ (80094fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80094dc:	f7ff fda8 	bl	8009030 <USBD_GetString>
 80094e0:	e004      	b.n	80094ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	4904      	ldr	r1, [pc, #16]	@ (80094f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094e6:	4805      	ldr	r0, [pc, #20]	@ (80094fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80094e8:	f7ff fda2 	bl	8009030 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094ec:	4b02      	ldr	r3, [pc, #8]	@ (80094f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20001754 	.word	0x20001754
 80094fc:	0800db54 	.word	0x0800db54

08009500 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	4603      	mov	r3, r0
 8009508:	6039      	str	r1, [r7, #0]
 800950a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800950c:	79fb      	ldrb	r3, [r7, #7]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d105      	bne.n	800951e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	4907      	ldr	r1, [pc, #28]	@ (8009534 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009516:	4808      	ldr	r0, [pc, #32]	@ (8009538 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009518:	f7ff fd8a 	bl	8009030 <USBD_GetString>
 800951c:	e004      	b.n	8009528 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	4904      	ldr	r1, [pc, #16]	@ (8009534 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009522:	4805      	ldr	r0, [pc, #20]	@ (8009538 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009524:	f7ff fd84 	bl	8009030 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009528:	4b02      	ldr	r3, [pc, #8]	@ (8009534 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	20001754 	.word	0x20001754
 8009538:	0800db60 	.word	0x0800db60

0800953c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009542:	4b0f      	ldr	r3, [pc, #60]	@ (8009580 <Get_SerialNum+0x44>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009548:	4b0e      	ldr	r3, [pc, #56]	@ (8009584 <Get_SerialNum+0x48>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800954e:	4b0e      	ldr	r3, [pc, #56]	@ (8009588 <Get_SerialNum+0x4c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4413      	add	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d009      	beq.n	8009576 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009562:	2208      	movs	r2, #8
 8009564:	4909      	ldr	r1, [pc, #36]	@ (800958c <Get_SerialNum+0x50>)
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f000 f814 	bl	8009594 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800956c:	2204      	movs	r2, #4
 800956e:	4908      	ldr	r1, [pc, #32]	@ (8009590 <Get_SerialNum+0x54>)
 8009570:	68b8      	ldr	r0, [r7, #8]
 8009572:	f000 f80f 	bl	8009594 <IntToUnicode>
  }
}
 8009576:	bf00      	nop
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	1fff7a10 	.word	0x1fff7a10
 8009584:	1fff7a14 	.word	0x1fff7a14
 8009588:	1fff7a18 	.word	0x1fff7a18
 800958c:	200000e2 	.word	0x200000e2
 8009590:	200000f2 	.word	0x200000f2

08009594 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	4613      	mov	r3, r2
 80095a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80095a6:	2300      	movs	r3, #0
 80095a8:	75fb      	strb	r3, [r7, #23]
 80095aa:	e027      	b.n	80095fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	0f1b      	lsrs	r3, r3, #28
 80095b0:	2b09      	cmp	r3, #9
 80095b2:	d80b      	bhi.n	80095cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	0f1b      	lsrs	r3, r3, #28
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	005b      	lsls	r3, r3, #1
 80095be:	4619      	mov	r1, r3
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	440b      	add	r3, r1
 80095c4:	3230      	adds	r2, #48	@ 0x30
 80095c6:	b2d2      	uxtb	r2, r2
 80095c8:	701a      	strb	r2, [r3, #0]
 80095ca:	e00a      	b.n	80095e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	0f1b      	lsrs	r3, r3, #28
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	7dfb      	ldrb	r3, [r7, #23]
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	4619      	mov	r1, r3
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	440b      	add	r3, r1
 80095dc:	3237      	adds	r2, #55	@ 0x37
 80095de:	b2d2      	uxtb	r2, r2
 80095e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	011b      	lsls	r3, r3, #4
 80095e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
 80095ea:	005b      	lsls	r3, r3, #1
 80095ec:	3301      	adds	r3, #1
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	4413      	add	r3, r2
 80095f2:	2200      	movs	r2, #0
 80095f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095f6:	7dfb      	ldrb	r3, [r7, #23]
 80095f8:	3301      	adds	r3, #1
 80095fa:	75fb      	strb	r3, [r7, #23]
 80095fc:	7dfa      	ldrb	r2, [r7, #23]
 80095fe:	79fb      	ldrb	r3, [r7, #7]
 8009600:	429a      	cmp	r2, r3
 8009602:	d3d3      	bcc.n	80095ac <IntToUnicode+0x18>
  }
}
 8009604:	bf00      	nop
 8009606:	bf00      	nop
 8009608:	371c      	adds	r7, #28
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
	...

08009614 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08a      	sub	sp, #40	@ 0x28
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800961c:	f107 0314 	add.w	r3, r7, #20
 8009620:	2200      	movs	r2, #0
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	605a      	str	r2, [r3, #4]
 8009626:	609a      	str	r2, [r3, #8]
 8009628:	60da      	str	r2, [r3, #12]
 800962a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009634:	d13a      	bne.n	80096ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009636:	2300      	movs	r3, #0
 8009638:	613b      	str	r3, [r7, #16]
 800963a:	4b1e      	ldr	r3, [pc, #120]	@ (80096b4 <HAL_PCD_MspInit+0xa0>)
 800963c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800963e:	4a1d      	ldr	r2, [pc, #116]	@ (80096b4 <HAL_PCD_MspInit+0xa0>)
 8009640:	f043 0301 	orr.w	r3, r3, #1
 8009644:	6313      	str	r3, [r2, #48]	@ 0x30
 8009646:	4b1b      	ldr	r3, [pc, #108]	@ (80096b4 <HAL_PCD_MspInit+0xa0>)
 8009648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	613b      	str	r3, [r7, #16]
 8009650:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009652:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009658:	2302      	movs	r3, #2
 800965a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800965c:	2300      	movs	r3, #0
 800965e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009660:	2303      	movs	r3, #3
 8009662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009664:	230a      	movs	r3, #10
 8009666:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009668:	f107 0314 	add.w	r3, r7, #20
 800966c:	4619      	mov	r1, r3
 800966e:	4812      	ldr	r0, [pc, #72]	@ (80096b8 <HAL_PCD_MspInit+0xa4>)
 8009670:	f7f8 ff46 	bl	8002500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009674:	4b0f      	ldr	r3, [pc, #60]	@ (80096b4 <HAL_PCD_MspInit+0xa0>)
 8009676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009678:	4a0e      	ldr	r2, [pc, #56]	@ (80096b4 <HAL_PCD_MspInit+0xa0>)
 800967a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800967e:	6353      	str	r3, [r2, #52]	@ 0x34
 8009680:	2300      	movs	r3, #0
 8009682:	60fb      	str	r3, [r7, #12]
 8009684:	4b0b      	ldr	r3, [pc, #44]	@ (80096b4 <HAL_PCD_MspInit+0xa0>)
 8009686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009688:	4a0a      	ldr	r2, [pc, #40]	@ (80096b4 <HAL_PCD_MspInit+0xa0>)
 800968a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800968e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009690:	4b08      	ldr	r3, [pc, #32]	@ (80096b4 <HAL_PCD_MspInit+0xa0>)
 8009692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009698:	60fb      	str	r3, [r7, #12]
 800969a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800969c:	2200      	movs	r2, #0
 800969e:	2100      	movs	r1, #0
 80096a0:	2043      	movs	r0, #67	@ 0x43
 80096a2:	f7f8 fb58 	bl	8001d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80096a6:	2043      	movs	r0, #67	@ 0x43
 80096a8:	f7f8 fb71 	bl	8001d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80096ac:	bf00      	nop
 80096ae:	3728      	adds	r7, #40	@ 0x28
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	40023800 	.word	0x40023800
 80096b8:	40020000 	.word	0x40020000

080096bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80096d0:	4619      	mov	r1, r3
 80096d2:	4610      	mov	r0, r2
 80096d4:	f7fe fb49 	bl	8007d6a <USBD_LL_SetupStage>
}
 80096d8:	bf00      	nop
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80096f2:	78fa      	ldrb	r2, [r7, #3]
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	4613      	mov	r3, r2
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	4413      	add	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	440b      	add	r3, r1
 8009700:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	4619      	mov	r1, r3
 800970a:	f7fe fb83 	bl	8007e14 <USBD_LL_DataOutStage>
}
 800970e:	bf00      	nop
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	460b      	mov	r3, r1
 8009720:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009728:	78fa      	ldrb	r2, [r7, #3]
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	4613      	mov	r3, r2
 800972e:	00db      	lsls	r3, r3, #3
 8009730:	4413      	add	r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	440b      	add	r3, r1
 8009736:	3320      	adds	r3, #32
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	78fb      	ldrb	r3, [r7, #3]
 800973c:	4619      	mov	r1, r3
 800973e:	f7fe fc1c 	bl	8007f7a <USBD_LL_DataInStage>
}
 8009742:	bf00      	nop
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b082      	sub	sp, #8
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009758:	4618      	mov	r0, r3
 800975a:	f7fe fd56 	bl	800820a <USBD_LL_SOF>
}
 800975e:	bf00      	nop
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800976e:	2301      	movs	r3, #1
 8009770:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	79db      	ldrb	r3, [r3, #7]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d102      	bne.n	8009780 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800977a:	2300      	movs	r3, #0
 800977c:	73fb      	strb	r3, [r7, #15]
 800977e:	e008      	b.n	8009792 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	79db      	ldrb	r3, [r3, #7]
 8009784:	2b02      	cmp	r3, #2
 8009786:	d102      	bne.n	800978e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009788:	2301      	movs	r3, #1
 800978a:	73fb      	strb	r3, [r7, #15]
 800978c:	e001      	b.n	8009792 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800978e:	f7f7 fdd5 	bl	800133c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009798:	7bfa      	ldrb	r2, [r7, #15]
 800979a:	4611      	mov	r1, r2
 800979c:	4618      	mov	r0, r3
 800979e:	f7fe fcf0 	bl	8008182 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fe fc98 	bl	80080de <USBD_LL_Reset>
}
 80097ae:	bf00      	nop
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fe fceb 	bl	80081a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	6812      	ldr	r2, [r2, #0]
 80097da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097de:	f043 0301 	orr.w	r3, r3, #1
 80097e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	7adb      	ldrb	r3, [r3, #11]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d005      	beq.n	80097f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097ec:	4b04      	ldr	r3, [pc, #16]	@ (8009800 <HAL_PCD_SuspendCallback+0x48>)
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	4a03      	ldr	r2, [pc, #12]	@ (8009800 <HAL_PCD_SuspendCallback+0x48>)
 80097f2:	f043 0306 	orr.w	r3, r3, #6
 80097f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80097f8:	bf00      	nop
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	e000ed00 	.word	0xe000ed00

08009804 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe fce1 	bl	80081da <USBD_LL_Resume>
}
 8009818:	bf00      	nop
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009832:	78fa      	ldrb	r2, [r7, #3]
 8009834:	4611      	mov	r1, r2
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe fd39 	bl	80082ae <USBD_LL_IsoOUTIncomplete>
}
 800983c:	bf00      	nop
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009856:	78fa      	ldrb	r2, [r7, #3]
 8009858:	4611      	mov	r1, r2
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fcf5 	bl	800824a <USBD_LL_IsoINIncomplete>
}
 8009860:	bf00      	nop
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009876:	4618      	mov	r0, r3
 8009878:	f7fe fd4b 	bl	8008312 <USBD_LL_DevConnected>
}
 800987c:	bf00      	nop
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009892:	4618      	mov	r0, r3
 8009894:	f7fe fd48 	bl	8008328 <USBD_LL_DevDisconnected>
}
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d13c      	bne.n	800992a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80098b0:	4a20      	ldr	r2, [pc, #128]	@ (8009934 <USBD_LL_Init+0x94>)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009934 <USBD_LL_Init+0x94>)
 80098bc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80098c0:	4b1c      	ldr	r3, [pc, #112]	@ (8009934 <USBD_LL_Init+0x94>)
 80098c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80098c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80098c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009934 <USBD_LL_Init+0x94>)
 80098ca:	2204      	movs	r2, #4
 80098cc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80098ce:	4b19      	ldr	r3, [pc, #100]	@ (8009934 <USBD_LL_Init+0x94>)
 80098d0:	2202      	movs	r2, #2
 80098d2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80098d4:	4b17      	ldr	r3, [pc, #92]	@ (8009934 <USBD_LL_Init+0x94>)
 80098d6:	2200      	movs	r2, #0
 80098d8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80098da:	4b16      	ldr	r3, [pc, #88]	@ (8009934 <USBD_LL_Init+0x94>)
 80098dc:	2202      	movs	r2, #2
 80098de:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80098e0:	4b14      	ldr	r3, [pc, #80]	@ (8009934 <USBD_LL_Init+0x94>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80098e6:	4b13      	ldr	r3, [pc, #76]	@ (8009934 <USBD_LL_Init+0x94>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80098ec:	4b11      	ldr	r3, [pc, #68]	@ (8009934 <USBD_LL_Init+0x94>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80098f2:	4b10      	ldr	r3, [pc, #64]	@ (8009934 <USBD_LL_Init+0x94>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80098f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009934 <USBD_LL_Init+0x94>)
 80098fa:	2200      	movs	r2, #0
 80098fc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80098fe:	480d      	ldr	r0, [pc, #52]	@ (8009934 <USBD_LL_Init+0x94>)
 8009900:	f7fa fa92 	bl	8003e28 <HAL_PCD_Init>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800990a:	f7f7 fd17 	bl	800133c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800990e:	2180      	movs	r1, #128	@ 0x80
 8009910:	4808      	ldr	r0, [pc, #32]	@ (8009934 <USBD_LL_Init+0x94>)
 8009912:	f7fb fcbe 	bl	8005292 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009916:	2240      	movs	r2, #64	@ 0x40
 8009918:	2100      	movs	r1, #0
 800991a:	4806      	ldr	r0, [pc, #24]	@ (8009934 <USBD_LL_Init+0x94>)
 800991c:	f7fb fc72 	bl	8005204 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009920:	2280      	movs	r2, #128	@ 0x80
 8009922:	2101      	movs	r1, #1
 8009924:	4803      	ldr	r0, [pc, #12]	@ (8009934 <USBD_LL_Init+0x94>)
 8009926:	f7fb fc6d 	bl	8005204 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	20001954 	.word	0x20001954

08009938 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800994e:	4618      	mov	r0, r3
 8009950:	f7fa fb79 	bl	8004046 <HAL_PCD_Start>
 8009954:	4603      	mov	r3, r0
 8009956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009958:	7bfb      	ldrb	r3, [r7, #15]
 800995a:	4618      	mov	r0, r3
 800995c:	f000 f942 	bl	8009be4 <USBD_Get_USB_Status>
 8009960:	4603      	mov	r3, r0
 8009962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009964:	7bbb      	ldrb	r3, [r7, #14]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b084      	sub	sp, #16
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	4608      	mov	r0, r1
 8009978:	4611      	mov	r1, r2
 800997a:	461a      	mov	r2, r3
 800997c:	4603      	mov	r3, r0
 800997e:	70fb      	strb	r3, [r7, #3]
 8009980:	460b      	mov	r3, r1
 8009982:	70bb      	strb	r3, [r7, #2]
 8009984:	4613      	mov	r3, r2
 8009986:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009996:	78bb      	ldrb	r3, [r7, #2]
 8009998:	883a      	ldrh	r2, [r7, #0]
 800999a:	78f9      	ldrb	r1, [r7, #3]
 800999c:	f7fb f84d 	bl	8004a3a <HAL_PCD_EP_Open>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 f91c 	bl	8009be4 <USBD_Get_USB_Status>
 80099ac:	4603      	mov	r3, r0
 80099ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	460b      	mov	r3, r1
 80099c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099d4:	78fa      	ldrb	r2, [r7, #3]
 80099d6:	4611      	mov	r1, r2
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fb f898 	bl	8004b0e <HAL_PCD_EP_Close>
 80099de:	4603      	mov	r3, r0
 80099e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 f8fd 	bl	8009be4 <USBD_Get_USB_Status>
 80099ea:	4603      	mov	r3, r0
 80099ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a12:	78fa      	ldrb	r2, [r7, #3]
 8009a14:	4611      	mov	r1, r2
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fb f950 	bl	8004cbc <HAL_PCD_EP_SetStall>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 f8de 	bl	8009be4 <USBD_Get_USB_Status>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	460b      	mov	r3, r1
 8009a40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a50:	78fa      	ldrb	r2, [r7, #3]
 8009a52:	4611      	mov	r1, r2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fb f994 	bl	8004d82 <HAL_PCD_EP_ClrStall>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 f8bf 	bl	8009be4 <USBD_Get_USB_Status>
 8009a66:	4603      	mov	r3, r0
 8009a68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	da0b      	bge.n	8009aa8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a96:	68f9      	ldr	r1, [r7, #12]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	00db      	lsls	r3, r3, #3
 8009a9c:	4413      	add	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	440b      	add	r3, r1
 8009aa2:	3316      	adds	r3, #22
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	e00b      	b.n	8009ac0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009aae:	68f9      	ldr	r1, [r7, #12]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	4413      	add	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	440b      	add	r3, r1
 8009aba:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009abe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ae6:	78fa      	ldrb	r2, [r7, #3]
 8009ae8:	4611      	mov	r1, r2
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fa ff81 	bl	80049f2 <HAL_PCD_SetAddress>
 8009af0:	4603      	mov	r3, r0
 8009af2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009af4:	7bfb      	ldrb	r3, [r7, #15]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 f874 	bl	8009be4 <USBD_Get_USB_Status>
 8009afc:	4603      	mov	r3, r0
 8009afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b086      	sub	sp, #24
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	60f8      	str	r0, [r7, #12]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	603b      	str	r3, [r7, #0]
 8009b16:	460b      	mov	r3, r1
 8009b18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b28:	7af9      	ldrb	r1, [r7, #11]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	f7fb f88b 	bl	8004c48 <HAL_PCD_EP_Transmit>
 8009b32:	4603      	mov	r3, r0
 8009b34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b36:	7dfb      	ldrb	r3, [r7, #23]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 f853 	bl	8009be4 <USBD_Get_USB_Status>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b42:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	607a      	str	r2, [r7, #4]
 8009b56:	603b      	str	r3, [r7, #0]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b6a:	7af9      	ldrb	r1, [r7, #11]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	f7fb f817 	bl	8004ba2 <HAL_PCD_EP_Receive>
 8009b74:	4603      	mov	r3, r0
 8009b76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b78:	7dfb      	ldrb	r3, [r7, #23]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 f832 	bl	8009be4 <USBD_Get_USB_Status>
 8009b80:	4603      	mov	r3, r0
 8009b82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b84:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	460b      	mov	r3, r1
 8009b98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ba0:	78fa      	ldrb	r2, [r7, #3]
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7fb f837 	bl	8004c18 <HAL_PCD_EP_GetRxCount>
 8009baa:	4603      	mov	r3, r0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009bbc:	4b03      	ldr	r3, [pc, #12]	@ (8009bcc <USBD_static_malloc+0x18>)
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	20001e38 	.word	0x20001e38

08009bd0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]

}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	4603      	mov	r3, r0
 8009bec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bf2:	79fb      	ldrb	r3, [r7, #7]
 8009bf4:	2b03      	cmp	r3, #3
 8009bf6:	d817      	bhi.n	8009c28 <USBD_Get_USB_Status+0x44>
 8009bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8009c00 <USBD_Get_USB_Status+0x1c>)
 8009bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfe:	bf00      	nop
 8009c00:	08009c11 	.word	0x08009c11
 8009c04:	08009c17 	.word	0x08009c17
 8009c08:	08009c1d 	.word	0x08009c1d
 8009c0c:	08009c23 	.word	0x08009c23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	73fb      	strb	r3, [r7, #15]
    break;
 8009c14:	e00b      	b.n	8009c2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c16:	2303      	movs	r3, #3
 8009c18:	73fb      	strb	r3, [r7, #15]
    break;
 8009c1a:	e008      	b.n	8009c2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c20:	e005      	b.n	8009c2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c22:	2303      	movs	r3, #3
 8009c24:	73fb      	strb	r3, [r7, #15]
    break;
 8009c26:	e002      	b.n	8009c2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c2c:	bf00      	nop
  }
  return usb_status;
 8009c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <__cvt>:
 8009c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c40:	ec57 6b10 	vmov	r6, r7, d0
 8009c44:	2f00      	cmp	r7, #0
 8009c46:	460c      	mov	r4, r1
 8009c48:	4619      	mov	r1, r3
 8009c4a:	463b      	mov	r3, r7
 8009c4c:	bfbb      	ittet	lt
 8009c4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009c52:	461f      	movlt	r7, r3
 8009c54:	2300      	movge	r3, #0
 8009c56:	232d      	movlt	r3, #45	@ 0x2d
 8009c58:	700b      	strb	r3, [r1, #0]
 8009c5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009c60:	4691      	mov	r9, r2
 8009c62:	f023 0820 	bic.w	r8, r3, #32
 8009c66:	bfbc      	itt	lt
 8009c68:	4632      	movlt	r2, r6
 8009c6a:	4616      	movlt	r6, r2
 8009c6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c70:	d005      	beq.n	8009c7e <__cvt+0x42>
 8009c72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009c76:	d100      	bne.n	8009c7a <__cvt+0x3e>
 8009c78:	3401      	adds	r4, #1
 8009c7a:	2102      	movs	r1, #2
 8009c7c:	e000      	b.n	8009c80 <__cvt+0x44>
 8009c7e:	2103      	movs	r1, #3
 8009c80:	ab03      	add	r3, sp, #12
 8009c82:	9301      	str	r3, [sp, #4]
 8009c84:	ab02      	add	r3, sp, #8
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	ec47 6b10 	vmov	d0, r6, r7
 8009c8c:	4653      	mov	r3, sl
 8009c8e:	4622      	mov	r2, r4
 8009c90:	f000 fe6e 	bl	800a970 <_dtoa_r>
 8009c94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009c98:	4605      	mov	r5, r0
 8009c9a:	d119      	bne.n	8009cd0 <__cvt+0x94>
 8009c9c:	f019 0f01 	tst.w	r9, #1
 8009ca0:	d00e      	beq.n	8009cc0 <__cvt+0x84>
 8009ca2:	eb00 0904 	add.w	r9, r0, r4
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2300      	movs	r3, #0
 8009caa:	4630      	mov	r0, r6
 8009cac:	4639      	mov	r1, r7
 8009cae:	f7f6 ff0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cb2:	b108      	cbz	r0, 8009cb8 <__cvt+0x7c>
 8009cb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009cb8:	2230      	movs	r2, #48	@ 0x30
 8009cba:	9b03      	ldr	r3, [sp, #12]
 8009cbc:	454b      	cmp	r3, r9
 8009cbe:	d31e      	bcc.n	8009cfe <__cvt+0xc2>
 8009cc0:	9b03      	ldr	r3, [sp, #12]
 8009cc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cc4:	1b5b      	subs	r3, r3, r5
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	6013      	str	r3, [r2, #0]
 8009cca:	b004      	add	sp, #16
 8009ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009cd4:	eb00 0904 	add.w	r9, r0, r4
 8009cd8:	d1e5      	bne.n	8009ca6 <__cvt+0x6a>
 8009cda:	7803      	ldrb	r3, [r0, #0]
 8009cdc:	2b30      	cmp	r3, #48	@ 0x30
 8009cde:	d10a      	bne.n	8009cf6 <__cvt+0xba>
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	4639      	mov	r1, r7
 8009ce8:	f7f6 feee 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cec:	b918      	cbnz	r0, 8009cf6 <__cvt+0xba>
 8009cee:	f1c4 0401 	rsb	r4, r4, #1
 8009cf2:	f8ca 4000 	str.w	r4, [sl]
 8009cf6:	f8da 3000 	ldr.w	r3, [sl]
 8009cfa:	4499      	add	r9, r3
 8009cfc:	e7d3      	b.n	8009ca6 <__cvt+0x6a>
 8009cfe:	1c59      	adds	r1, r3, #1
 8009d00:	9103      	str	r1, [sp, #12]
 8009d02:	701a      	strb	r2, [r3, #0]
 8009d04:	e7d9      	b.n	8009cba <__cvt+0x7e>

08009d06 <__exponent>:
 8009d06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d08:	2900      	cmp	r1, #0
 8009d0a:	bfba      	itte	lt
 8009d0c:	4249      	neglt	r1, r1
 8009d0e:	232d      	movlt	r3, #45	@ 0x2d
 8009d10:	232b      	movge	r3, #43	@ 0x2b
 8009d12:	2909      	cmp	r1, #9
 8009d14:	7002      	strb	r2, [r0, #0]
 8009d16:	7043      	strb	r3, [r0, #1]
 8009d18:	dd29      	ble.n	8009d6e <__exponent+0x68>
 8009d1a:	f10d 0307 	add.w	r3, sp, #7
 8009d1e:	461d      	mov	r5, r3
 8009d20:	270a      	movs	r7, #10
 8009d22:	461a      	mov	r2, r3
 8009d24:	fbb1 f6f7 	udiv	r6, r1, r7
 8009d28:	fb07 1416 	mls	r4, r7, r6, r1
 8009d2c:	3430      	adds	r4, #48	@ 0x30
 8009d2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d32:	460c      	mov	r4, r1
 8009d34:	2c63      	cmp	r4, #99	@ 0x63
 8009d36:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	dcf1      	bgt.n	8009d22 <__exponent+0x1c>
 8009d3e:	3130      	adds	r1, #48	@ 0x30
 8009d40:	1e94      	subs	r4, r2, #2
 8009d42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d46:	1c41      	adds	r1, r0, #1
 8009d48:	4623      	mov	r3, r4
 8009d4a:	42ab      	cmp	r3, r5
 8009d4c:	d30a      	bcc.n	8009d64 <__exponent+0x5e>
 8009d4e:	f10d 0309 	add.w	r3, sp, #9
 8009d52:	1a9b      	subs	r3, r3, r2
 8009d54:	42ac      	cmp	r4, r5
 8009d56:	bf88      	it	hi
 8009d58:	2300      	movhi	r3, #0
 8009d5a:	3302      	adds	r3, #2
 8009d5c:	4403      	add	r3, r0
 8009d5e:	1a18      	subs	r0, r3, r0
 8009d60:	b003      	add	sp, #12
 8009d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009d68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009d6c:	e7ed      	b.n	8009d4a <__exponent+0x44>
 8009d6e:	2330      	movs	r3, #48	@ 0x30
 8009d70:	3130      	adds	r1, #48	@ 0x30
 8009d72:	7083      	strb	r3, [r0, #2]
 8009d74:	70c1      	strb	r1, [r0, #3]
 8009d76:	1d03      	adds	r3, r0, #4
 8009d78:	e7f1      	b.n	8009d5e <__exponent+0x58>
	...

08009d7c <_printf_float>:
 8009d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d80:	b08d      	sub	sp, #52	@ 0x34
 8009d82:	460c      	mov	r4, r1
 8009d84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009d88:	4616      	mov	r6, r2
 8009d8a:	461f      	mov	r7, r3
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	f000 fcef 	bl	800a770 <_localeconv_r>
 8009d92:	6803      	ldr	r3, [r0, #0]
 8009d94:	9304      	str	r3, [sp, #16]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7f6 fa6a 	bl	8000270 <strlen>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009da0:	f8d8 3000 	ldr.w	r3, [r8]
 8009da4:	9005      	str	r0, [sp, #20]
 8009da6:	3307      	adds	r3, #7
 8009da8:	f023 0307 	bic.w	r3, r3, #7
 8009dac:	f103 0208 	add.w	r2, r3, #8
 8009db0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009db4:	f8d4 b000 	ldr.w	fp, [r4]
 8009db8:	f8c8 2000 	str.w	r2, [r8]
 8009dbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009dc0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009dc4:	9307      	str	r3, [sp, #28]
 8009dc6:	f8cd 8018 	str.w	r8, [sp, #24]
 8009dca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009dce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dd2:	4b9c      	ldr	r3, [pc, #624]	@ (800a044 <_printf_float+0x2c8>)
 8009dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd8:	f7f6 fea8 	bl	8000b2c <__aeabi_dcmpun>
 8009ddc:	bb70      	cbnz	r0, 8009e3c <_printf_float+0xc0>
 8009dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009de2:	4b98      	ldr	r3, [pc, #608]	@ (800a044 <_printf_float+0x2c8>)
 8009de4:	f04f 32ff 	mov.w	r2, #4294967295
 8009de8:	f7f6 fe82 	bl	8000af0 <__aeabi_dcmple>
 8009dec:	bb30      	cbnz	r0, 8009e3c <_printf_float+0xc0>
 8009dee:	2200      	movs	r2, #0
 8009df0:	2300      	movs	r3, #0
 8009df2:	4640      	mov	r0, r8
 8009df4:	4649      	mov	r1, r9
 8009df6:	f7f6 fe71 	bl	8000adc <__aeabi_dcmplt>
 8009dfa:	b110      	cbz	r0, 8009e02 <_printf_float+0x86>
 8009dfc:	232d      	movs	r3, #45	@ 0x2d
 8009dfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e02:	4a91      	ldr	r2, [pc, #580]	@ (800a048 <_printf_float+0x2cc>)
 8009e04:	4b91      	ldr	r3, [pc, #580]	@ (800a04c <_printf_float+0x2d0>)
 8009e06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e0a:	bf94      	ite	ls
 8009e0c:	4690      	movls	r8, r2
 8009e0e:	4698      	movhi	r8, r3
 8009e10:	2303      	movs	r3, #3
 8009e12:	6123      	str	r3, [r4, #16]
 8009e14:	f02b 0304 	bic.w	r3, fp, #4
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	f04f 0900 	mov.w	r9, #0
 8009e1e:	9700      	str	r7, [sp, #0]
 8009e20:	4633      	mov	r3, r6
 8009e22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009e24:	4621      	mov	r1, r4
 8009e26:	4628      	mov	r0, r5
 8009e28:	f000 f9d2 	bl	800a1d0 <_printf_common>
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	f040 808d 	bne.w	8009f4c <_printf_float+0x1d0>
 8009e32:	f04f 30ff 	mov.w	r0, #4294967295
 8009e36:	b00d      	add	sp, #52	@ 0x34
 8009e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3c:	4642      	mov	r2, r8
 8009e3e:	464b      	mov	r3, r9
 8009e40:	4640      	mov	r0, r8
 8009e42:	4649      	mov	r1, r9
 8009e44:	f7f6 fe72 	bl	8000b2c <__aeabi_dcmpun>
 8009e48:	b140      	cbz	r0, 8009e5c <_printf_float+0xe0>
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	bfbc      	itt	lt
 8009e50:	232d      	movlt	r3, #45	@ 0x2d
 8009e52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009e56:	4a7e      	ldr	r2, [pc, #504]	@ (800a050 <_printf_float+0x2d4>)
 8009e58:	4b7e      	ldr	r3, [pc, #504]	@ (800a054 <_printf_float+0x2d8>)
 8009e5a:	e7d4      	b.n	8009e06 <_printf_float+0x8a>
 8009e5c:	6863      	ldr	r3, [r4, #4]
 8009e5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009e62:	9206      	str	r2, [sp, #24]
 8009e64:	1c5a      	adds	r2, r3, #1
 8009e66:	d13b      	bne.n	8009ee0 <_printf_float+0x164>
 8009e68:	2306      	movs	r3, #6
 8009e6a:	6063      	str	r3, [r4, #4]
 8009e6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009e70:	2300      	movs	r3, #0
 8009e72:	6022      	str	r2, [r4, #0]
 8009e74:	9303      	str	r3, [sp, #12]
 8009e76:	ab0a      	add	r3, sp, #40	@ 0x28
 8009e78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009e7c:	ab09      	add	r3, sp, #36	@ 0x24
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	6861      	ldr	r1, [r4, #4]
 8009e82:	ec49 8b10 	vmov	d0, r8, r9
 8009e86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f7ff fed6 	bl	8009c3c <__cvt>
 8009e90:	9b06      	ldr	r3, [sp, #24]
 8009e92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e94:	2b47      	cmp	r3, #71	@ 0x47
 8009e96:	4680      	mov	r8, r0
 8009e98:	d129      	bne.n	8009eee <_printf_float+0x172>
 8009e9a:	1cc8      	adds	r0, r1, #3
 8009e9c:	db02      	blt.n	8009ea4 <_printf_float+0x128>
 8009e9e:	6863      	ldr	r3, [r4, #4]
 8009ea0:	4299      	cmp	r1, r3
 8009ea2:	dd41      	ble.n	8009f28 <_printf_float+0x1ac>
 8009ea4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ea8:	fa5f fa8a 	uxtb.w	sl, sl
 8009eac:	3901      	subs	r1, #1
 8009eae:	4652      	mov	r2, sl
 8009eb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009eb4:	9109      	str	r1, [sp, #36]	@ 0x24
 8009eb6:	f7ff ff26 	bl	8009d06 <__exponent>
 8009eba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ebc:	1813      	adds	r3, r2, r0
 8009ebe:	2a01      	cmp	r2, #1
 8009ec0:	4681      	mov	r9, r0
 8009ec2:	6123      	str	r3, [r4, #16]
 8009ec4:	dc02      	bgt.n	8009ecc <_printf_float+0x150>
 8009ec6:	6822      	ldr	r2, [r4, #0]
 8009ec8:	07d2      	lsls	r2, r2, #31
 8009eca:	d501      	bpl.n	8009ed0 <_printf_float+0x154>
 8009ecc:	3301      	adds	r3, #1
 8009ece:	6123      	str	r3, [r4, #16]
 8009ed0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d0a2      	beq.n	8009e1e <_printf_float+0xa2>
 8009ed8:	232d      	movs	r3, #45	@ 0x2d
 8009eda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ede:	e79e      	b.n	8009e1e <_printf_float+0xa2>
 8009ee0:	9a06      	ldr	r2, [sp, #24]
 8009ee2:	2a47      	cmp	r2, #71	@ 0x47
 8009ee4:	d1c2      	bne.n	8009e6c <_printf_float+0xf0>
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1c0      	bne.n	8009e6c <_printf_float+0xf0>
 8009eea:	2301      	movs	r3, #1
 8009eec:	e7bd      	b.n	8009e6a <_printf_float+0xee>
 8009eee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ef2:	d9db      	bls.n	8009eac <_printf_float+0x130>
 8009ef4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009ef8:	d118      	bne.n	8009f2c <_printf_float+0x1b0>
 8009efa:	2900      	cmp	r1, #0
 8009efc:	6863      	ldr	r3, [r4, #4]
 8009efe:	dd0b      	ble.n	8009f18 <_printf_float+0x19c>
 8009f00:	6121      	str	r1, [r4, #16]
 8009f02:	b913      	cbnz	r3, 8009f0a <_printf_float+0x18e>
 8009f04:	6822      	ldr	r2, [r4, #0]
 8009f06:	07d0      	lsls	r0, r2, #31
 8009f08:	d502      	bpl.n	8009f10 <_printf_float+0x194>
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	440b      	add	r3, r1
 8009f0e:	6123      	str	r3, [r4, #16]
 8009f10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f12:	f04f 0900 	mov.w	r9, #0
 8009f16:	e7db      	b.n	8009ed0 <_printf_float+0x154>
 8009f18:	b913      	cbnz	r3, 8009f20 <_printf_float+0x1a4>
 8009f1a:	6822      	ldr	r2, [r4, #0]
 8009f1c:	07d2      	lsls	r2, r2, #31
 8009f1e:	d501      	bpl.n	8009f24 <_printf_float+0x1a8>
 8009f20:	3302      	adds	r3, #2
 8009f22:	e7f4      	b.n	8009f0e <_printf_float+0x192>
 8009f24:	2301      	movs	r3, #1
 8009f26:	e7f2      	b.n	8009f0e <_printf_float+0x192>
 8009f28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f2e:	4299      	cmp	r1, r3
 8009f30:	db05      	blt.n	8009f3e <_printf_float+0x1c2>
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	6121      	str	r1, [r4, #16]
 8009f36:	07d8      	lsls	r0, r3, #31
 8009f38:	d5ea      	bpl.n	8009f10 <_printf_float+0x194>
 8009f3a:	1c4b      	adds	r3, r1, #1
 8009f3c:	e7e7      	b.n	8009f0e <_printf_float+0x192>
 8009f3e:	2900      	cmp	r1, #0
 8009f40:	bfd4      	ite	le
 8009f42:	f1c1 0202 	rsble	r2, r1, #2
 8009f46:	2201      	movgt	r2, #1
 8009f48:	4413      	add	r3, r2
 8009f4a:	e7e0      	b.n	8009f0e <_printf_float+0x192>
 8009f4c:	6823      	ldr	r3, [r4, #0]
 8009f4e:	055a      	lsls	r2, r3, #21
 8009f50:	d407      	bmi.n	8009f62 <_printf_float+0x1e6>
 8009f52:	6923      	ldr	r3, [r4, #16]
 8009f54:	4642      	mov	r2, r8
 8009f56:	4631      	mov	r1, r6
 8009f58:	4628      	mov	r0, r5
 8009f5a:	47b8      	blx	r7
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	d12b      	bne.n	8009fb8 <_printf_float+0x23c>
 8009f60:	e767      	b.n	8009e32 <_printf_float+0xb6>
 8009f62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f66:	f240 80dd 	bls.w	800a124 <_printf_float+0x3a8>
 8009f6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f6e:	2200      	movs	r2, #0
 8009f70:	2300      	movs	r3, #0
 8009f72:	f7f6 fda9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d033      	beq.n	8009fe2 <_printf_float+0x266>
 8009f7a:	4a37      	ldr	r2, [pc, #220]	@ (800a058 <_printf_float+0x2dc>)
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	4631      	mov	r1, r6
 8009f80:	4628      	mov	r0, r5
 8009f82:	47b8      	blx	r7
 8009f84:	3001      	adds	r0, #1
 8009f86:	f43f af54 	beq.w	8009e32 <_printf_float+0xb6>
 8009f8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009f8e:	4543      	cmp	r3, r8
 8009f90:	db02      	blt.n	8009f98 <_printf_float+0x21c>
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	07d8      	lsls	r0, r3, #31
 8009f96:	d50f      	bpl.n	8009fb8 <_printf_float+0x23c>
 8009f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f9c:	4631      	mov	r1, r6
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	47b8      	blx	r7
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	f43f af45 	beq.w	8009e32 <_printf_float+0xb6>
 8009fa8:	f04f 0900 	mov.w	r9, #0
 8009fac:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fb0:	f104 0a1a 	add.w	sl, r4, #26
 8009fb4:	45c8      	cmp	r8, r9
 8009fb6:	dc09      	bgt.n	8009fcc <_printf_float+0x250>
 8009fb8:	6823      	ldr	r3, [r4, #0]
 8009fba:	079b      	lsls	r3, r3, #30
 8009fbc:	f100 8103 	bmi.w	800a1c6 <_printf_float+0x44a>
 8009fc0:	68e0      	ldr	r0, [r4, #12]
 8009fc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fc4:	4298      	cmp	r0, r3
 8009fc6:	bfb8      	it	lt
 8009fc8:	4618      	movlt	r0, r3
 8009fca:	e734      	b.n	8009e36 <_printf_float+0xba>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	4652      	mov	r2, sl
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	47b8      	blx	r7
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	f43f af2b 	beq.w	8009e32 <_printf_float+0xb6>
 8009fdc:	f109 0901 	add.w	r9, r9, #1
 8009fe0:	e7e8      	b.n	8009fb4 <_printf_float+0x238>
 8009fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	dc39      	bgt.n	800a05c <_printf_float+0x2e0>
 8009fe8:	4a1b      	ldr	r2, [pc, #108]	@ (800a058 <_printf_float+0x2dc>)
 8009fea:	2301      	movs	r3, #1
 8009fec:	4631      	mov	r1, r6
 8009fee:	4628      	mov	r0, r5
 8009ff0:	47b8      	blx	r7
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	f43f af1d 	beq.w	8009e32 <_printf_float+0xb6>
 8009ff8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009ffc:	ea59 0303 	orrs.w	r3, r9, r3
 800a000:	d102      	bne.n	800a008 <_printf_float+0x28c>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	07d9      	lsls	r1, r3, #31
 800a006:	d5d7      	bpl.n	8009fb8 <_printf_float+0x23c>
 800a008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a00c:	4631      	mov	r1, r6
 800a00e:	4628      	mov	r0, r5
 800a010:	47b8      	blx	r7
 800a012:	3001      	adds	r0, #1
 800a014:	f43f af0d 	beq.w	8009e32 <_printf_float+0xb6>
 800a018:	f04f 0a00 	mov.w	sl, #0
 800a01c:	f104 0b1a 	add.w	fp, r4, #26
 800a020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a022:	425b      	negs	r3, r3
 800a024:	4553      	cmp	r3, sl
 800a026:	dc01      	bgt.n	800a02c <_printf_float+0x2b0>
 800a028:	464b      	mov	r3, r9
 800a02a:	e793      	b.n	8009f54 <_printf_float+0x1d8>
 800a02c:	2301      	movs	r3, #1
 800a02e:	465a      	mov	r2, fp
 800a030:	4631      	mov	r1, r6
 800a032:	4628      	mov	r0, r5
 800a034:	47b8      	blx	r7
 800a036:	3001      	adds	r0, #1
 800a038:	f43f aefb 	beq.w	8009e32 <_printf_float+0xb6>
 800a03c:	f10a 0a01 	add.w	sl, sl, #1
 800a040:	e7ee      	b.n	800a020 <_printf_float+0x2a4>
 800a042:	bf00      	nop
 800a044:	7fefffff 	.word	0x7fefffff
 800a048:	0800db90 	.word	0x0800db90
 800a04c:	0800db94 	.word	0x0800db94
 800a050:	0800db98 	.word	0x0800db98
 800a054:	0800db9c 	.word	0x0800db9c
 800a058:	0800dba0 	.word	0x0800dba0
 800a05c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a05e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a062:	4553      	cmp	r3, sl
 800a064:	bfa8      	it	ge
 800a066:	4653      	movge	r3, sl
 800a068:	2b00      	cmp	r3, #0
 800a06a:	4699      	mov	r9, r3
 800a06c:	dc36      	bgt.n	800a0dc <_printf_float+0x360>
 800a06e:	f04f 0b00 	mov.w	fp, #0
 800a072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a076:	f104 021a 	add.w	r2, r4, #26
 800a07a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a07c:	9306      	str	r3, [sp, #24]
 800a07e:	eba3 0309 	sub.w	r3, r3, r9
 800a082:	455b      	cmp	r3, fp
 800a084:	dc31      	bgt.n	800a0ea <_printf_float+0x36e>
 800a086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a088:	459a      	cmp	sl, r3
 800a08a:	dc3a      	bgt.n	800a102 <_printf_float+0x386>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	07da      	lsls	r2, r3, #31
 800a090:	d437      	bmi.n	800a102 <_printf_float+0x386>
 800a092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a094:	ebaa 0903 	sub.w	r9, sl, r3
 800a098:	9b06      	ldr	r3, [sp, #24]
 800a09a:	ebaa 0303 	sub.w	r3, sl, r3
 800a09e:	4599      	cmp	r9, r3
 800a0a0:	bfa8      	it	ge
 800a0a2:	4699      	movge	r9, r3
 800a0a4:	f1b9 0f00 	cmp.w	r9, #0
 800a0a8:	dc33      	bgt.n	800a112 <_printf_float+0x396>
 800a0aa:	f04f 0800 	mov.w	r8, #0
 800a0ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0b2:	f104 0b1a 	add.w	fp, r4, #26
 800a0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0b8:	ebaa 0303 	sub.w	r3, sl, r3
 800a0bc:	eba3 0309 	sub.w	r3, r3, r9
 800a0c0:	4543      	cmp	r3, r8
 800a0c2:	f77f af79 	ble.w	8009fb8 <_printf_float+0x23c>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	465a      	mov	r2, fp
 800a0ca:	4631      	mov	r1, r6
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	47b8      	blx	r7
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	f43f aeae 	beq.w	8009e32 <_printf_float+0xb6>
 800a0d6:	f108 0801 	add.w	r8, r8, #1
 800a0da:	e7ec      	b.n	800a0b6 <_printf_float+0x33a>
 800a0dc:	4642      	mov	r2, r8
 800a0de:	4631      	mov	r1, r6
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	47b8      	blx	r7
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d1c2      	bne.n	800a06e <_printf_float+0x2f2>
 800a0e8:	e6a3      	b.n	8009e32 <_printf_float+0xb6>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	4631      	mov	r1, r6
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	9206      	str	r2, [sp, #24]
 800a0f2:	47b8      	blx	r7
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	f43f ae9c 	beq.w	8009e32 <_printf_float+0xb6>
 800a0fa:	9a06      	ldr	r2, [sp, #24]
 800a0fc:	f10b 0b01 	add.w	fp, fp, #1
 800a100:	e7bb      	b.n	800a07a <_printf_float+0x2fe>
 800a102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a106:	4631      	mov	r1, r6
 800a108:	4628      	mov	r0, r5
 800a10a:	47b8      	blx	r7
 800a10c:	3001      	adds	r0, #1
 800a10e:	d1c0      	bne.n	800a092 <_printf_float+0x316>
 800a110:	e68f      	b.n	8009e32 <_printf_float+0xb6>
 800a112:	9a06      	ldr	r2, [sp, #24]
 800a114:	464b      	mov	r3, r9
 800a116:	4442      	add	r2, r8
 800a118:	4631      	mov	r1, r6
 800a11a:	4628      	mov	r0, r5
 800a11c:	47b8      	blx	r7
 800a11e:	3001      	adds	r0, #1
 800a120:	d1c3      	bne.n	800a0aa <_printf_float+0x32e>
 800a122:	e686      	b.n	8009e32 <_printf_float+0xb6>
 800a124:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a128:	f1ba 0f01 	cmp.w	sl, #1
 800a12c:	dc01      	bgt.n	800a132 <_printf_float+0x3b6>
 800a12e:	07db      	lsls	r3, r3, #31
 800a130:	d536      	bpl.n	800a1a0 <_printf_float+0x424>
 800a132:	2301      	movs	r3, #1
 800a134:	4642      	mov	r2, r8
 800a136:	4631      	mov	r1, r6
 800a138:	4628      	mov	r0, r5
 800a13a:	47b8      	blx	r7
 800a13c:	3001      	adds	r0, #1
 800a13e:	f43f ae78 	beq.w	8009e32 <_printf_float+0xb6>
 800a142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a146:	4631      	mov	r1, r6
 800a148:	4628      	mov	r0, r5
 800a14a:	47b8      	blx	r7
 800a14c:	3001      	adds	r0, #1
 800a14e:	f43f ae70 	beq.w	8009e32 <_printf_float+0xb6>
 800a152:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a156:	2200      	movs	r2, #0
 800a158:	2300      	movs	r3, #0
 800a15a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a15e:	f7f6 fcb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a162:	b9c0      	cbnz	r0, 800a196 <_printf_float+0x41a>
 800a164:	4653      	mov	r3, sl
 800a166:	f108 0201 	add.w	r2, r8, #1
 800a16a:	4631      	mov	r1, r6
 800a16c:	4628      	mov	r0, r5
 800a16e:	47b8      	blx	r7
 800a170:	3001      	adds	r0, #1
 800a172:	d10c      	bne.n	800a18e <_printf_float+0x412>
 800a174:	e65d      	b.n	8009e32 <_printf_float+0xb6>
 800a176:	2301      	movs	r3, #1
 800a178:	465a      	mov	r2, fp
 800a17a:	4631      	mov	r1, r6
 800a17c:	4628      	mov	r0, r5
 800a17e:	47b8      	blx	r7
 800a180:	3001      	adds	r0, #1
 800a182:	f43f ae56 	beq.w	8009e32 <_printf_float+0xb6>
 800a186:	f108 0801 	add.w	r8, r8, #1
 800a18a:	45d0      	cmp	r8, sl
 800a18c:	dbf3      	blt.n	800a176 <_printf_float+0x3fa>
 800a18e:	464b      	mov	r3, r9
 800a190:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a194:	e6df      	b.n	8009f56 <_printf_float+0x1da>
 800a196:	f04f 0800 	mov.w	r8, #0
 800a19a:	f104 0b1a 	add.w	fp, r4, #26
 800a19e:	e7f4      	b.n	800a18a <_printf_float+0x40e>
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	4642      	mov	r2, r8
 800a1a4:	e7e1      	b.n	800a16a <_printf_float+0x3ee>
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	464a      	mov	r2, r9
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	47b8      	blx	r7
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	f43f ae3e 	beq.w	8009e32 <_printf_float+0xb6>
 800a1b6:	f108 0801 	add.w	r8, r8, #1
 800a1ba:	68e3      	ldr	r3, [r4, #12]
 800a1bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a1be:	1a5b      	subs	r3, r3, r1
 800a1c0:	4543      	cmp	r3, r8
 800a1c2:	dcf0      	bgt.n	800a1a6 <_printf_float+0x42a>
 800a1c4:	e6fc      	b.n	8009fc0 <_printf_float+0x244>
 800a1c6:	f04f 0800 	mov.w	r8, #0
 800a1ca:	f104 0919 	add.w	r9, r4, #25
 800a1ce:	e7f4      	b.n	800a1ba <_printf_float+0x43e>

0800a1d0 <_printf_common>:
 800a1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d4:	4616      	mov	r6, r2
 800a1d6:	4698      	mov	r8, r3
 800a1d8:	688a      	ldr	r2, [r1, #8]
 800a1da:	690b      	ldr	r3, [r1, #16]
 800a1dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	bfb8      	it	lt
 800a1e4:	4613      	movlt	r3, r2
 800a1e6:	6033      	str	r3, [r6, #0]
 800a1e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1ec:	4607      	mov	r7, r0
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	b10a      	cbz	r2, 800a1f6 <_printf_common+0x26>
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	6033      	str	r3, [r6, #0]
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	0699      	lsls	r1, r3, #26
 800a1fa:	bf42      	ittt	mi
 800a1fc:	6833      	ldrmi	r3, [r6, #0]
 800a1fe:	3302      	addmi	r3, #2
 800a200:	6033      	strmi	r3, [r6, #0]
 800a202:	6825      	ldr	r5, [r4, #0]
 800a204:	f015 0506 	ands.w	r5, r5, #6
 800a208:	d106      	bne.n	800a218 <_printf_common+0x48>
 800a20a:	f104 0a19 	add.w	sl, r4, #25
 800a20e:	68e3      	ldr	r3, [r4, #12]
 800a210:	6832      	ldr	r2, [r6, #0]
 800a212:	1a9b      	subs	r3, r3, r2
 800a214:	42ab      	cmp	r3, r5
 800a216:	dc26      	bgt.n	800a266 <_printf_common+0x96>
 800a218:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a21c:	6822      	ldr	r2, [r4, #0]
 800a21e:	3b00      	subs	r3, #0
 800a220:	bf18      	it	ne
 800a222:	2301      	movne	r3, #1
 800a224:	0692      	lsls	r2, r2, #26
 800a226:	d42b      	bmi.n	800a280 <_printf_common+0xb0>
 800a228:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a22c:	4641      	mov	r1, r8
 800a22e:	4638      	mov	r0, r7
 800a230:	47c8      	blx	r9
 800a232:	3001      	adds	r0, #1
 800a234:	d01e      	beq.n	800a274 <_printf_common+0xa4>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	6922      	ldr	r2, [r4, #16]
 800a23a:	f003 0306 	and.w	r3, r3, #6
 800a23e:	2b04      	cmp	r3, #4
 800a240:	bf02      	ittt	eq
 800a242:	68e5      	ldreq	r5, [r4, #12]
 800a244:	6833      	ldreq	r3, [r6, #0]
 800a246:	1aed      	subeq	r5, r5, r3
 800a248:	68a3      	ldr	r3, [r4, #8]
 800a24a:	bf0c      	ite	eq
 800a24c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a250:	2500      	movne	r5, #0
 800a252:	4293      	cmp	r3, r2
 800a254:	bfc4      	itt	gt
 800a256:	1a9b      	subgt	r3, r3, r2
 800a258:	18ed      	addgt	r5, r5, r3
 800a25a:	2600      	movs	r6, #0
 800a25c:	341a      	adds	r4, #26
 800a25e:	42b5      	cmp	r5, r6
 800a260:	d11a      	bne.n	800a298 <_printf_common+0xc8>
 800a262:	2000      	movs	r0, #0
 800a264:	e008      	b.n	800a278 <_printf_common+0xa8>
 800a266:	2301      	movs	r3, #1
 800a268:	4652      	mov	r2, sl
 800a26a:	4641      	mov	r1, r8
 800a26c:	4638      	mov	r0, r7
 800a26e:	47c8      	blx	r9
 800a270:	3001      	adds	r0, #1
 800a272:	d103      	bne.n	800a27c <_printf_common+0xac>
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a27c:	3501      	adds	r5, #1
 800a27e:	e7c6      	b.n	800a20e <_printf_common+0x3e>
 800a280:	18e1      	adds	r1, r4, r3
 800a282:	1c5a      	adds	r2, r3, #1
 800a284:	2030      	movs	r0, #48	@ 0x30
 800a286:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a28a:	4422      	add	r2, r4
 800a28c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a290:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a294:	3302      	adds	r3, #2
 800a296:	e7c7      	b.n	800a228 <_printf_common+0x58>
 800a298:	2301      	movs	r3, #1
 800a29a:	4622      	mov	r2, r4
 800a29c:	4641      	mov	r1, r8
 800a29e:	4638      	mov	r0, r7
 800a2a0:	47c8      	blx	r9
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	d0e6      	beq.n	800a274 <_printf_common+0xa4>
 800a2a6:	3601      	adds	r6, #1
 800a2a8:	e7d9      	b.n	800a25e <_printf_common+0x8e>
	...

0800a2ac <_printf_i>:
 800a2ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b0:	7e0f      	ldrb	r7, [r1, #24]
 800a2b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2b4:	2f78      	cmp	r7, #120	@ 0x78
 800a2b6:	4691      	mov	r9, r2
 800a2b8:	4680      	mov	r8, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	469a      	mov	sl, r3
 800a2be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2c2:	d807      	bhi.n	800a2d4 <_printf_i+0x28>
 800a2c4:	2f62      	cmp	r7, #98	@ 0x62
 800a2c6:	d80a      	bhi.n	800a2de <_printf_i+0x32>
 800a2c8:	2f00      	cmp	r7, #0
 800a2ca:	f000 80d2 	beq.w	800a472 <_printf_i+0x1c6>
 800a2ce:	2f58      	cmp	r7, #88	@ 0x58
 800a2d0:	f000 80b9 	beq.w	800a446 <_printf_i+0x19a>
 800a2d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a2dc:	e03a      	b.n	800a354 <_printf_i+0xa8>
 800a2de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a2e2:	2b15      	cmp	r3, #21
 800a2e4:	d8f6      	bhi.n	800a2d4 <_printf_i+0x28>
 800a2e6:	a101      	add	r1, pc, #4	@ (adr r1, 800a2ec <_printf_i+0x40>)
 800a2e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2ec:	0800a345 	.word	0x0800a345
 800a2f0:	0800a359 	.word	0x0800a359
 800a2f4:	0800a2d5 	.word	0x0800a2d5
 800a2f8:	0800a2d5 	.word	0x0800a2d5
 800a2fc:	0800a2d5 	.word	0x0800a2d5
 800a300:	0800a2d5 	.word	0x0800a2d5
 800a304:	0800a359 	.word	0x0800a359
 800a308:	0800a2d5 	.word	0x0800a2d5
 800a30c:	0800a2d5 	.word	0x0800a2d5
 800a310:	0800a2d5 	.word	0x0800a2d5
 800a314:	0800a2d5 	.word	0x0800a2d5
 800a318:	0800a459 	.word	0x0800a459
 800a31c:	0800a383 	.word	0x0800a383
 800a320:	0800a413 	.word	0x0800a413
 800a324:	0800a2d5 	.word	0x0800a2d5
 800a328:	0800a2d5 	.word	0x0800a2d5
 800a32c:	0800a47b 	.word	0x0800a47b
 800a330:	0800a2d5 	.word	0x0800a2d5
 800a334:	0800a383 	.word	0x0800a383
 800a338:	0800a2d5 	.word	0x0800a2d5
 800a33c:	0800a2d5 	.word	0x0800a2d5
 800a340:	0800a41b 	.word	0x0800a41b
 800a344:	6833      	ldr	r3, [r6, #0]
 800a346:	1d1a      	adds	r2, r3, #4
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6032      	str	r2, [r6, #0]
 800a34c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a350:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a354:	2301      	movs	r3, #1
 800a356:	e09d      	b.n	800a494 <_printf_i+0x1e8>
 800a358:	6833      	ldr	r3, [r6, #0]
 800a35a:	6820      	ldr	r0, [r4, #0]
 800a35c:	1d19      	adds	r1, r3, #4
 800a35e:	6031      	str	r1, [r6, #0]
 800a360:	0606      	lsls	r6, r0, #24
 800a362:	d501      	bpl.n	800a368 <_printf_i+0xbc>
 800a364:	681d      	ldr	r5, [r3, #0]
 800a366:	e003      	b.n	800a370 <_printf_i+0xc4>
 800a368:	0645      	lsls	r5, r0, #25
 800a36a:	d5fb      	bpl.n	800a364 <_printf_i+0xb8>
 800a36c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a370:	2d00      	cmp	r5, #0
 800a372:	da03      	bge.n	800a37c <_printf_i+0xd0>
 800a374:	232d      	movs	r3, #45	@ 0x2d
 800a376:	426d      	negs	r5, r5
 800a378:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a37c:	4859      	ldr	r0, [pc, #356]	@ (800a4e4 <_printf_i+0x238>)
 800a37e:	230a      	movs	r3, #10
 800a380:	e011      	b.n	800a3a6 <_printf_i+0xfa>
 800a382:	6821      	ldr	r1, [r4, #0]
 800a384:	6833      	ldr	r3, [r6, #0]
 800a386:	0608      	lsls	r0, r1, #24
 800a388:	f853 5b04 	ldr.w	r5, [r3], #4
 800a38c:	d402      	bmi.n	800a394 <_printf_i+0xe8>
 800a38e:	0649      	lsls	r1, r1, #25
 800a390:	bf48      	it	mi
 800a392:	b2ad      	uxthmi	r5, r5
 800a394:	2f6f      	cmp	r7, #111	@ 0x6f
 800a396:	4853      	ldr	r0, [pc, #332]	@ (800a4e4 <_printf_i+0x238>)
 800a398:	6033      	str	r3, [r6, #0]
 800a39a:	bf14      	ite	ne
 800a39c:	230a      	movne	r3, #10
 800a39e:	2308      	moveq	r3, #8
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3a6:	6866      	ldr	r6, [r4, #4]
 800a3a8:	60a6      	str	r6, [r4, #8]
 800a3aa:	2e00      	cmp	r6, #0
 800a3ac:	bfa2      	ittt	ge
 800a3ae:	6821      	ldrge	r1, [r4, #0]
 800a3b0:	f021 0104 	bicge.w	r1, r1, #4
 800a3b4:	6021      	strge	r1, [r4, #0]
 800a3b6:	b90d      	cbnz	r5, 800a3bc <_printf_i+0x110>
 800a3b8:	2e00      	cmp	r6, #0
 800a3ba:	d04b      	beq.n	800a454 <_printf_i+0x1a8>
 800a3bc:	4616      	mov	r6, r2
 800a3be:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3c2:	fb03 5711 	mls	r7, r3, r1, r5
 800a3c6:	5dc7      	ldrb	r7, [r0, r7]
 800a3c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a3cc:	462f      	mov	r7, r5
 800a3ce:	42bb      	cmp	r3, r7
 800a3d0:	460d      	mov	r5, r1
 800a3d2:	d9f4      	bls.n	800a3be <_printf_i+0x112>
 800a3d4:	2b08      	cmp	r3, #8
 800a3d6:	d10b      	bne.n	800a3f0 <_printf_i+0x144>
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	07df      	lsls	r7, r3, #31
 800a3dc:	d508      	bpl.n	800a3f0 <_printf_i+0x144>
 800a3de:	6923      	ldr	r3, [r4, #16]
 800a3e0:	6861      	ldr	r1, [r4, #4]
 800a3e2:	4299      	cmp	r1, r3
 800a3e4:	bfde      	ittt	le
 800a3e6:	2330      	movle	r3, #48	@ 0x30
 800a3e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a3f0:	1b92      	subs	r2, r2, r6
 800a3f2:	6122      	str	r2, [r4, #16]
 800a3f4:	f8cd a000 	str.w	sl, [sp]
 800a3f8:	464b      	mov	r3, r9
 800a3fa:	aa03      	add	r2, sp, #12
 800a3fc:	4621      	mov	r1, r4
 800a3fe:	4640      	mov	r0, r8
 800a400:	f7ff fee6 	bl	800a1d0 <_printf_common>
 800a404:	3001      	adds	r0, #1
 800a406:	d14a      	bne.n	800a49e <_printf_i+0x1f2>
 800a408:	f04f 30ff 	mov.w	r0, #4294967295
 800a40c:	b004      	add	sp, #16
 800a40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a412:	6823      	ldr	r3, [r4, #0]
 800a414:	f043 0320 	orr.w	r3, r3, #32
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	4833      	ldr	r0, [pc, #204]	@ (800a4e8 <_printf_i+0x23c>)
 800a41c:	2778      	movs	r7, #120	@ 0x78
 800a41e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	6831      	ldr	r1, [r6, #0]
 800a426:	061f      	lsls	r7, r3, #24
 800a428:	f851 5b04 	ldr.w	r5, [r1], #4
 800a42c:	d402      	bmi.n	800a434 <_printf_i+0x188>
 800a42e:	065f      	lsls	r7, r3, #25
 800a430:	bf48      	it	mi
 800a432:	b2ad      	uxthmi	r5, r5
 800a434:	6031      	str	r1, [r6, #0]
 800a436:	07d9      	lsls	r1, r3, #31
 800a438:	bf44      	itt	mi
 800a43a:	f043 0320 	orrmi.w	r3, r3, #32
 800a43e:	6023      	strmi	r3, [r4, #0]
 800a440:	b11d      	cbz	r5, 800a44a <_printf_i+0x19e>
 800a442:	2310      	movs	r3, #16
 800a444:	e7ac      	b.n	800a3a0 <_printf_i+0xf4>
 800a446:	4827      	ldr	r0, [pc, #156]	@ (800a4e4 <_printf_i+0x238>)
 800a448:	e7e9      	b.n	800a41e <_printf_i+0x172>
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	f023 0320 	bic.w	r3, r3, #32
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	e7f6      	b.n	800a442 <_printf_i+0x196>
 800a454:	4616      	mov	r6, r2
 800a456:	e7bd      	b.n	800a3d4 <_printf_i+0x128>
 800a458:	6833      	ldr	r3, [r6, #0]
 800a45a:	6825      	ldr	r5, [r4, #0]
 800a45c:	6961      	ldr	r1, [r4, #20]
 800a45e:	1d18      	adds	r0, r3, #4
 800a460:	6030      	str	r0, [r6, #0]
 800a462:	062e      	lsls	r6, r5, #24
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	d501      	bpl.n	800a46c <_printf_i+0x1c0>
 800a468:	6019      	str	r1, [r3, #0]
 800a46a:	e002      	b.n	800a472 <_printf_i+0x1c6>
 800a46c:	0668      	lsls	r0, r5, #25
 800a46e:	d5fb      	bpl.n	800a468 <_printf_i+0x1bc>
 800a470:	8019      	strh	r1, [r3, #0]
 800a472:	2300      	movs	r3, #0
 800a474:	6123      	str	r3, [r4, #16]
 800a476:	4616      	mov	r6, r2
 800a478:	e7bc      	b.n	800a3f4 <_printf_i+0x148>
 800a47a:	6833      	ldr	r3, [r6, #0]
 800a47c:	1d1a      	adds	r2, r3, #4
 800a47e:	6032      	str	r2, [r6, #0]
 800a480:	681e      	ldr	r6, [r3, #0]
 800a482:	6862      	ldr	r2, [r4, #4]
 800a484:	2100      	movs	r1, #0
 800a486:	4630      	mov	r0, r6
 800a488:	f7f5 fea2 	bl	80001d0 <memchr>
 800a48c:	b108      	cbz	r0, 800a492 <_printf_i+0x1e6>
 800a48e:	1b80      	subs	r0, r0, r6
 800a490:	6060      	str	r0, [r4, #4]
 800a492:	6863      	ldr	r3, [r4, #4]
 800a494:	6123      	str	r3, [r4, #16]
 800a496:	2300      	movs	r3, #0
 800a498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a49c:	e7aa      	b.n	800a3f4 <_printf_i+0x148>
 800a49e:	6923      	ldr	r3, [r4, #16]
 800a4a0:	4632      	mov	r2, r6
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	4640      	mov	r0, r8
 800a4a6:	47d0      	blx	sl
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	d0ad      	beq.n	800a408 <_printf_i+0x15c>
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	079b      	lsls	r3, r3, #30
 800a4b0:	d413      	bmi.n	800a4da <_printf_i+0x22e>
 800a4b2:	68e0      	ldr	r0, [r4, #12]
 800a4b4:	9b03      	ldr	r3, [sp, #12]
 800a4b6:	4298      	cmp	r0, r3
 800a4b8:	bfb8      	it	lt
 800a4ba:	4618      	movlt	r0, r3
 800a4bc:	e7a6      	b.n	800a40c <_printf_i+0x160>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	4632      	mov	r2, r6
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	4640      	mov	r0, r8
 800a4c6:	47d0      	blx	sl
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	d09d      	beq.n	800a408 <_printf_i+0x15c>
 800a4cc:	3501      	adds	r5, #1
 800a4ce:	68e3      	ldr	r3, [r4, #12]
 800a4d0:	9903      	ldr	r1, [sp, #12]
 800a4d2:	1a5b      	subs	r3, r3, r1
 800a4d4:	42ab      	cmp	r3, r5
 800a4d6:	dcf2      	bgt.n	800a4be <_printf_i+0x212>
 800a4d8:	e7eb      	b.n	800a4b2 <_printf_i+0x206>
 800a4da:	2500      	movs	r5, #0
 800a4dc:	f104 0619 	add.w	r6, r4, #25
 800a4e0:	e7f5      	b.n	800a4ce <_printf_i+0x222>
 800a4e2:	bf00      	nop
 800a4e4:	0800dba2 	.word	0x0800dba2
 800a4e8:	0800dbb3 	.word	0x0800dbb3

0800a4ec <std>:
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	b510      	push	{r4, lr}
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	e9c0 3300 	strd	r3, r3, [r0]
 800a4f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4fa:	6083      	str	r3, [r0, #8]
 800a4fc:	8181      	strh	r1, [r0, #12]
 800a4fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800a500:	81c2      	strh	r2, [r0, #14]
 800a502:	6183      	str	r3, [r0, #24]
 800a504:	4619      	mov	r1, r3
 800a506:	2208      	movs	r2, #8
 800a508:	305c      	adds	r0, #92	@ 0x5c
 800a50a:	f000 f928 	bl	800a75e <memset>
 800a50e:	4b0d      	ldr	r3, [pc, #52]	@ (800a544 <std+0x58>)
 800a510:	6263      	str	r3, [r4, #36]	@ 0x24
 800a512:	4b0d      	ldr	r3, [pc, #52]	@ (800a548 <std+0x5c>)
 800a514:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a516:	4b0d      	ldr	r3, [pc, #52]	@ (800a54c <std+0x60>)
 800a518:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a51a:	4b0d      	ldr	r3, [pc, #52]	@ (800a550 <std+0x64>)
 800a51c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a51e:	4b0d      	ldr	r3, [pc, #52]	@ (800a554 <std+0x68>)
 800a520:	6224      	str	r4, [r4, #32]
 800a522:	429c      	cmp	r4, r3
 800a524:	d006      	beq.n	800a534 <std+0x48>
 800a526:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a52a:	4294      	cmp	r4, r2
 800a52c:	d002      	beq.n	800a534 <std+0x48>
 800a52e:	33d0      	adds	r3, #208	@ 0xd0
 800a530:	429c      	cmp	r4, r3
 800a532:	d105      	bne.n	800a540 <std+0x54>
 800a534:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a53c:	f000 b98c 	b.w	800a858 <__retarget_lock_init_recursive>
 800a540:	bd10      	pop	{r4, pc}
 800a542:	bf00      	nop
 800a544:	0800a6d9 	.word	0x0800a6d9
 800a548:	0800a6fb 	.word	0x0800a6fb
 800a54c:	0800a733 	.word	0x0800a733
 800a550:	0800a757 	.word	0x0800a757
 800a554:	20002058 	.word	0x20002058

0800a558 <stdio_exit_handler>:
 800a558:	4a02      	ldr	r2, [pc, #8]	@ (800a564 <stdio_exit_handler+0xc>)
 800a55a:	4903      	ldr	r1, [pc, #12]	@ (800a568 <stdio_exit_handler+0x10>)
 800a55c:	4803      	ldr	r0, [pc, #12]	@ (800a56c <stdio_exit_handler+0x14>)
 800a55e:	f000 b869 	b.w	800a634 <_fwalk_sglue>
 800a562:	bf00      	nop
 800a564:	200000fc 	.word	0x200000fc
 800a568:	0800c1b5 	.word	0x0800c1b5
 800a56c:	2000010c 	.word	0x2000010c

0800a570 <cleanup_stdio>:
 800a570:	6841      	ldr	r1, [r0, #4]
 800a572:	4b0c      	ldr	r3, [pc, #48]	@ (800a5a4 <cleanup_stdio+0x34>)
 800a574:	4299      	cmp	r1, r3
 800a576:	b510      	push	{r4, lr}
 800a578:	4604      	mov	r4, r0
 800a57a:	d001      	beq.n	800a580 <cleanup_stdio+0x10>
 800a57c:	f001 fe1a 	bl	800c1b4 <_fflush_r>
 800a580:	68a1      	ldr	r1, [r4, #8]
 800a582:	4b09      	ldr	r3, [pc, #36]	@ (800a5a8 <cleanup_stdio+0x38>)
 800a584:	4299      	cmp	r1, r3
 800a586:	d002      	beq.n	800a58e <cleanup_stdio+0x1e>
 800a588:	4620      	mov	r0, r4
 800a58a:	f001 fe13 	bl	800c1b4 <_fflush_r>
 800a58e:	68e1      	ldr	r1, [r4, #12]
 800a590:	4b06      	ldr	r3, [pc, #24]	@ (800a5ac <cleanup_stdio+0x3c>)
 800a592:	4299      	cmp	r1, r3
 800a594:	d004      	beq.n	800a5a0 <cleanup_stdio+0x30>
 800a596:	4620      	mov	r0, r4
 800a598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a59c:	f001 be0a 	b.w	800c1b4 <_fflush_r>
 800a5a0:	bd10      	pop	{r4, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20002058 	.word	0x20002058
 800a5a8:	200020c0 	.word	0x200020c0
 800a5ac:	20002128 	.word	0x20002128

0800a5b0 <global_stdio_init.part.0>:
 800a5b0:	b510      	push	{r4, lr}
 800a5b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e0 <global_stdio_init.part.0+0x30>)
 800a5b4:	4c0b      	ldr	r4, [pc, #44]	@ (800a5e4 <global_stdio_init.part.0+0x34>)
 800a5b6:	4a0c      	ldr	r2, [pc, #48]	@ (800a5e8 <global_stdio_init.part.0+0x38>)
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	2200      	movs	r2, #0
 800a5be:	2104      	movs	r1, #4
 800a5c0:	f7ff ff94 	bl	800a4ec <std>
 800a5c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	2109      	movs	r1, #9
 800a5cc:	f7ff ff8e 	bl	800a4ec <std>
 800a5d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a5d4:	2202      	movs	r2, #2
 800a5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5da:	2112      	movs	r1, #18
 800a5dc:	f7ff bf86 	b.w	800a4ec <std>
 800a5e0:	20002190 	.word	0x20002190
 800a5e4:	20002058 	.word	0x20002058
 800a5e8:	0800a559 	.word	0x0800a559

0800a5ec <__sfp_lock_acquire>:
 800a5ec:	4801      	ldr	r0, [pc, #4]	@ (800a5f4 <__sfp_lock_acquire+0x8>)
 800a5ee:	f000 b934 	b.w	800a85a <__retarget_lock_acquire_recursive>
 800a5f2:	bf00      	nop
 800a5f4:	20002199 	.word	0x20002199

0800a5f8 <__sfp_lock_release>:
 800a5f8:	4801      	ldr	r0, [pc, #4]	@ (800a600 <__sfp_lock_release+0x8>)
 800a5fa:	f000 b92f 	b.w	800a85c <__retarget_lock_release_recursive>
 800a5fe:	bf00      	nop
 800a600:	20002199 	.word	0x20002199

0800a604 <__sinit>:
 800a604:	b510      	push	{r4, lr}
 800a606:	4604      	mov	r4, r0
 800a608:	f7ff fff0 	bl	800a5ec <__sfp_lock_acquire>
 800a60c:	6a23      	ldr	r3, [r4, #32]
 800a60e:	b11b      	cbz	r3, 800a618 <__sinit+0x14>
 800a610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a614:	f7ff bff0 	b.w	800a5f8 <__sfp_lock_release>
 800a618:	4b04      	ldr	r3, [pc, #16]	@ (800a62c <__sinit+0x28>)
 800a61a:	6223      	str	r3, [r4, #32]
 800a61c:	4b04      	ldr	r3, [pc, #16]	@ (800a630 <__sinit+0x2c>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1f5      	bne.n	800a610 <__sinit+0xc>
 800a624:	f7ff ffc4 	bl	800a5b0 <global_stdio_init.part.0>
 800a628:	e7f2      	b.n	800a610 <__sinit+0xc>
 800a62a:	bf00      	nop
 800a62c:	0800a571 	.word	0x0800a571
 800a630:	20002190 	.word	0x20002190

0800a634 <_fwalk_sglue>:
 800a634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a638:	4607      	mov	r7, r0
 800a63a:	4688      	mov	r8, r1
 800a63c:	4614      	mov	r4, r2
 800a63e:	2600      	movs	r6, #0
 800a640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a644:	f1b9 0901 	subs.w	r9, r9, #1
 800a648:	d505      	bpl.n	800a656 <_fwalk_sglue+0x22>
 800a64a:	6824      	ldr	r4, [r4, #0]
 800a64c:	2c00      	cmp	r4, #0
 800a64e:	d1f7      	bne.n	800a640 <_fwalk_sglue+0xc>
 800a650:	4630      	mov	r0, r6
 800a652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a656:	89ab      	ldrh	r3, [r5, #12]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d907      	bls.n	800a66c <_fwalk_sglue+0x38>
 800a65c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a660:	3301      	adds	r3, #1
 800a662:	d003      	beq.n	800a66c <_fwalk_sglue+0x38>
 800a664:	4629      	mov	r1, r5
 800a666:	4638      	mov	r0, r7
 800a668:	47c0      	blx	r8
 800a66a:	4306      	orrs	r6, r0
 800a66c:	3568      	adds	r5, #104	@ 0x68
 800a66e:	e7e9      	b.n	800a644 <_fwalk_sglue+0x10>

0800a670 <sniprintf>:
 800a670:	b40c      	push	{r2, r3}
 800a672:	b530      	push	{r4, r5, lr}
 800a674:	4b17      	ldr	r3, [pc, #92]	@ (800a6d4 <sniprintf+0x64>)
 800a676:	1e0c      	subs	r4, r1, #0
 800a678:	681d      	ldr	r5, [r3, #0]
 800a67a:	b09d      	sub	sp, #116	@ 0x74
 800a67c:	da08      	bge.n	800a690 <sniprintf+0x20>
 800a67e:	238b      	movs	r3, #139	@ 0x8b
 800a680:	602b      	str	r3, [r5, #0]
 800a682:	f04f 30ff 	mov.w	r0, #4294967295
 800a686:	b01d      	add	sp, #116	@ 0x74
 800a688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a68c:	b002      	add	sp, #8
 800a68e:	4770      	bx	lr
 800a690:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a694:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a698:	bf14      	ite	ne
 800a69a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a69e:	4623      	moveq	r3, r4
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	9307      	str	r3, [sp, #28]
 800a6a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a6a8:	9002      	str	r0, [sp, #8]
 800a6aa:	9006      	str	r0, [sp, #24]
 800a6ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a6b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a6b2:	ab21      	add	r3, sp, #132	@ 0x84
 800a6b4:	a902      	add	r1, sp, #8
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	f001 fbfb 	bl	800beb4 <_svfiprintf_r>
 800a6be:	1c43      	adds	r3, r0, #1
 800a6c0:	bfbc      	itt	lt
 800a6c2:	238b      	movlt	r3, #139	@ 0x8b
 800a6c4:	602b      	strlt	r3, [r5, #0]
 800a6c6:	2c00      	cmp	r4, #0
 800a6c8:	d0dd      	beq.n	800a686 <sniprintf+0x16>
 800a6ca:	9b02      	ldr	r3, [sp, #8]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	701a      	strb	r2, [r3, #0]
 800a6d0:	e7d9      	b.n	800a686 <sniprintf+0x16>
 800a6d2:	bf00      	nop
 800a6d4:	20000108 	.word	0x20000108

0800a6d8 <__sread>:
 800a6d8:	b510      	push	{r4, lr}
 800a6da:	460c      	mov	r4, r1
 800a6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e0:	f000 f86c 	bl	800a7bc <_read_r>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	bfab      	itete	ge
 800a6e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a6ea:	89a3      	ldrhlt	r3, [r4, #12]
 800a6ec:	181b      	addge	r3, r3, r0
 800a6ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a6f2:	bfac      	ite	ge
 800a6f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a6f6:	81a3      	strhlt	r3, [r4, #12]
 800a6f8:	bd10      	pop	{r4, pc}

0800a6fa <__swrite>:
 800a6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6fe:	461f      	mov	r7, r3
 800a700:	898b      	ldrh	r3, [r1, #12]
 800a702:	05db      	lsls	r3, r3, #23
 800a704:	4605      	mov	r5, r0
 800a706:	460c      	mov	r4, r1
 800a708:	4616      	mov	r6, r2
 800a70a:	d505      	bpl.n	800a718 <__swrite+0x1e>
 800a70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a710:	2302      	movs	r3, #2
 800a712:	2200      	movs	r2, #0
 800a714:	f000 f840 	bl	800a798 <_lseek_r>
 800a718:	89a3      	ldrh	r3, [r4, #12]
 800a71a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a71e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a722:	81a3      	strh	r3, [r4, #12]
 800a724:	4632      	mov	r2, r6
 800a726:	463b      	mov	r3, r7
 800a728:	4628      	mov	r0, r5
 800a72a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a72e:	f000 b857 	b.w	800a7e0 <_write_r>

0800a732 <__sseek>:
 800a732:	b510      	push	{r4, lr}
 800a734:	460c      	mov	r4, r1
 800a736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a73a:	f000 f82d 	bl	800a798 <_lseek_r>
 800a73e:	1c43      	adds	r3, r0, #1
 800a740:	89a3      	ldrh	r3, [r4, #12]
 800a742:	bf15      	itete	ne
 800a744:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a746:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a74a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a74e:	81a3      	strheq	r3, [r4, #12]
 800a750:	bf18      	it	ne
 800a752:	81a3      	strhne	r3, [r4, #12]
 800a754:	bd10      	pop	{r4, pc}

0800a756 <__sclose>:
 800a756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a75a:	f000 b80d 	b.w	800a778 <_close_r>

0800a75e <memset>:
 800a75e:	4402      	add	r2, r0
 800a760:	4603      	mov	r3, r0
 800a762:	4293      	cmp	r3, r2
 800a764:	d100      	bne.n	800a768 <memset+0xa>
 800a766:	4770      	bx	lr
 800a768:	f803 1b01 	strb.w	r1, [r3], #1
 800a76c:	e7f9      	b.n	800a762 <memset+0x4>
	...

0800a770 <_localeconv_r>:
 800a770:	4800      	ldr	r0, [pc, #0]	@ (800a774 <_localeconv_r+0x4>)
 800a772:	4770      	bx	lr
 800a774:	20000248 	.word	0x20000248

0800a778 <_close_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	4d06      	ldr	r5, [pc, #24]	@ (800a794 <_close_r+0x1c>)
 800a77c:	2300      	movs	r3, #0
 800a77e:	4604      	mov	r4, r0
 800a780:	4608      	mov	r0, r1
 800a782:	602b      	str	r3, [r5, #0]
 800a784:	f7f7 f8d0 	bl	8001928 <_close>
 800a788:	1c43      	adds	r3, r0, #1
 800a78a:	d102      	bne.n	800a792 <_close_r+0x1a>
 800a78c:	682b      	ldr	r3, [r5, #0]
 800a78e:	b103      	cbz	r3, 800a792 <_close_r+0x1a>
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	bd38      	pop	{r3, r4, r5, pc}
 800a794:	20002194 	.word	0x20002194

0800a798 <_lseek_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4d07      	ldr	r5, [pc, #28]	@ (800a7b8 <_lseek_r+0x20>)
 800a79c:	4604      	mov	r4, r0
 800a79e:	4608      	mov	r0, r1
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	602a      	str	r2, [r5, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	f7f7 f8e5 	bl	8001976 <_lseek>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_lseek_r+0x1e>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_lseek_r+0x1e>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	20002194 	.word	0x20002194

0800a7bc <_read_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4d07      	ldr	r5, [pc, #28]	@ (800a7dc <_read_r+0x20>)
 800a7c0:	4604      	mov	r4, r0
 800a7c2:	4608      	mov	r0, r1
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	602a      	str	r2, [r5, #0]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	f7f7 f873 	bl	80018b6 <_read>
 800a7d0:	1c43      	adds	r3, r0, #1
 800a7d2:	d102      	bne.n	800a7da <_read_r+0x1e>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	b103      	cbz	r3, 800a7da <_read_r+0x1e>
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	20002194 	.word	0x20002194

0800a7e0 <_write_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	4d07      	ldr	r5, [pc, #28]	@ (800a800 <_write_r+0x20>)
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	4608      	mov	r0, r1
 800a7e8:	4611      	mov	r1, r2
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	602a      	str	r2, [r5, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	f7f7 f87e 	bl	80018f0 <_write>
 800a7f4:	1c43      	adds	r3, r0, #1
 800a7f6:	d102      	bne.n	800a7fe <_write_r+0x1e>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	b103      	cbz	r3, 800a7fe <_write_r+0x1e>
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	bd38      	pop	{r3, r4, r5, pc}
 800a800:	20002194 	.word	0x20002194

0800a804 <__errno>:
 800a804:	4b01      	ldr	r3, [pc, #4]	@ (800a80c <__errno+0x8>)
 800a806:	6818      	ldr	r0, [r3, #0]
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	20000108 	.word	0x20000108

0800a810 <__libc_init_array>:
 800a810:	b570      	push	{r4, r5, r6, lr}
 800a812:	4d0d      	ldr	r5, [pc, #52]	@ (800a848 <__libc_init_array+0x38>)
 800a814:	4c0d      	ldr	r4, [pc, #52]	@ (800a84c <__libc_init_array+0x3c>)
 800a816:	1b64      	subs	r4, r4, r5
 800a818:	10a4      	asrs	r4, r4, #2
 800a81a:	2600      	movs	r6, #0
 800a81c:	42a6      	cmp	r6, r4
 800a81e:	d109      	bne.n	800a834 <__libc_init_array+0x24>
 800a820:	4d0b      	ldr	r5, [pc, #44]	@ (800a850 <__libc_init_array+0x40>)
 800a822:	4c0c      	ldr	r4, [pc, #48]	@ (800a854 <__libc_init_array+0x44>)
 800a824:	f003 f96a 	bl	800dafc <_init>
 800a828:	1b64      	subs	r4, r4, r5
 800a82a:	10a4      	asrs	r4, r4, #2
 800a82c:	2600      	movs	r6, #0
 800a82e:	42a6      	cmp	r6, r4
 800a830:	d105      	bne.n	800a83e <__libc_init_array+0x2e>
 800a832:	bd70      	pop	{r4, r5, r6, pc}
 800a834:	f855 3b04 	ldr.w	r3, [r5], #4
 800a838:	4798      	blx	r3
 800a83a:	3601      	adds	r6, #1
 800a83c:	e7ee      	b.n	800a81c <__libc_init_array+0xc>
 800a83e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a842:	4798      	blx	r3
 800a844:	3601      	adds	r6, #1
 800a846:	e7f2      	b.n	800a82e <__libc_init_array+0x1e>
 800a848:	0800e310 	.word	0x0800e310
 800a84c:	0800e310 	.word	0x0800e310
 800a850:	0800e310 	.word	0x0800e310
 800a854:	0800e314 	.word	0x0800e314

0800a858 <__retarget_lock_init_recursive>:
 800a858:	4770      	bx	lr

0800a85a <__retarget_lock_acquire_recursive>:
 800a85a:	4770      	bx	lr

0800a85c <__retarget_lock_release_recursive>:
 800a85c:	4770      	bx	lr

0800a85e <quorem>:
 800a85e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a862:	6903      	ldr	r3, [r0, #16]
 800a864:	690c      	ldr	r4, [r1, #16]
 800a866:	42a3      	cmp	r3, r4
 800a868:	4607      	mov	r7, r0
 800a86a:	db7e      	blt.n	800a96a <quorem+0x10c>
 800a86c:	3c01      	subs	r4, #1
 800a86e:	f101 0814 	add.w	r8, r1, #20
 800a872:	00a3      	lsls	r3, r4, #2
 800a874:	f100 0514 	add.w	r5, r0, #20
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a884:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a888:	3301      	adds	r3, #1
 800a88a:	429a      	cmp	r2, r3
 800a88c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a890:	fbb2 f6f3 	udiv	r6, r2, r3
 800a894:	d32e      	bcc.n	800a8f4 <quorem+0x96>
 800a896:	f04f 0a00 	mov.w	sl, #0
 800a89a:	46c4      	mov	ip, r8
 800a89c:	46ae      	mov	lr, r5
 800a89e:	46d3      	mov	fp, sl
 800a8a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a8a4:	b298      	uxth	r0, r3
 800a8a6:	fb06 a000 	mla	r0, r6, r0, sl
 800a8aa:	0c02      	lsrs	r2, r0, #16
 800a8ac:	0c1b      	lsrs	r3, r3, #16
 800a8ae:	fb06 2303 	mla	r3, r6, r3, r2
 800a8b2:	f8de 2000 	ldr.w	r2, [lr]
 800a8b6:	b280      	uxth	r0, r0
 800a8b8:	b292      	uxth	r2, r2
 800a8ba:	1a12      	subs	r2, r2, r0
 800a8bc:	445a      	add	r2, fp
 800a8be:	f8de 0000 	ldr.w	r0, [lr]
 800a8c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a8cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a8d0:	b292      	uxth	r2, r2
 800a8d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a8d6:	45e1      	cmp	r9, ip
 800a8d8:	f84e 2b04 	str.w	r2, [lr], #4
 800a8dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a8e0:	d2de      	bcs.n	800a8a0 <quorem+0x42>
 800a8e2:	9b00      	ldr	r3, [sp, #0]
 800a8e4:	58eb      	ldr	r3, [r5, r3]
 800a8e6:	b92b      	cbnz	r3, 800a8f4 <quorem+0x96>
 800a8e8:	9b01      	ldr	r3, [sp, #4]
 800a8ea:	3b04      	subs	r3, #4
 800a8ec:	429d      	cmp	r5, r3
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	d32f      	bcc.n	800a952 <quorem+0xf4>
 800a8f2:	613c      	str	r4, [r7, #16]
 800a8f4:	4638      	mov	r0, r7
 800a8f6:	f001 f979 	bl	800bbec <__mcmp>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	db25      	blt.n	800a94a <quorem+0xec>
 800a8fe:	4629      	mov	r1, r5
 800a900:	2000      	movs	r0, #0
 800a902:	f858 2b04 	ldr.w	r2, [r8], #4
 800a906:	f8d1 c000 	ldr.w	ip, [r1]
 800a90a:	fa1f fe82 	uxth.w	lr, r2
 800a90e:	fa1f f38c 	uxth.w	r3, ip
 800a912:	eba3 030e 	sub.w	r3, r3, lr
 800a916:	4403      	add	r3, r0
 800a918:	0c12      	lsrs	r2, r2, #16
 800a91a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a91e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a922:	b29b      	uxth	r3, r3
 800a924:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a928:	45c1      	cmp	r9, r8
 800a92a:	f841 3b04 	str.w	r3, [r1], #4
 800a92e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a932:	d2e6      	bcs.n	800a902 <quorem+0xa4>
 800a934:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a938:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a93c:	b922      	cbnz	r2, 800a948 <quorem+0xea>
 800a93e:	3b04      	subs	r3, #4
 800a940:	429d      	cmp	r5, r3
 800a942:	461a      	mov	r2, r3
 800a944:	d30b      	bcc.n	800a95e <quorem+0x100>
 800a946:	613c      	str	r4, [r7, #16]
 800a948:	3601      	adds	r6, #1
 800a94a:	4630      	mov	r0, r6
 800a94c:	b003      	add	sp, #12
 800a94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a952:	6812      	ldr	r2, [r2, #0]
 800a954:	3b04      	subs	r3, #4
 800a956:	2a00      	cmp	r2, #0
 800a958:	d1cb      	bne.n	800a8f2 <quorem+0x94>
 800a95a:	3c01      	subs	r4, #1
 800a95c:	e7c6      	b.n	800a8ec <quorem+0x8e>
 800a95e:	6812      	ldr	r2, [r2, #0]
 800a960:	3b04      	subs	r3, #4
 800a962:	2a00      	cmp	r2, #0
 800a964:	d1ef      	bne.n	800a946 <quorem+0xe8>
 800a966:	3c01      	subs	r4, #1
 800a968:	e7ea      	b.n	800a940 <quorem+0xe2>
 800a96a:	2000      	movs	r0, #0
 800a96c:	e7ee      	b.n	800a94c <quorem+0xee>
	...

0800a970 <_dtoa_r>:
 800a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	69c7      	ldr	r7, [r0, #28]
 800a976:	b099      	sub	sp, #100	@ 0x64
 800a978:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a97c:	ec55 4b10 	vmov	r4, r5, d0
 800a980:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a982:	9109      	str	r1, [sp, #36]	@ 0x24
 800a984:	4683      	mov	fp, r0
 800a986:	920e      	str	r2, [sp, #56]	@ 0x38
 800a988:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a98a:	b97f      	cbnz	r7, 800a9ac <_dtoa_r+0x3c>
 800a98c:	2010      	movs	r0, #16
 800a98e:	f000 fdfd 	bl	800b58c <malloc>
 800a992:	4602      	mov	r2, r0
 800a994:	f8cb 001c 	str.w	r0, [fp, #28]
 800a998:	b920      	cbnz	r0, 800a9a4 <_dtoa_r+0x34>
 800a99a:	4ba7      	ldr	r3, [pc, #668]	@ (800ac38 <_dtoa_r+0x2c8>)
 800a99c:	21ef      	movs	r1, #239	@ 0xef
 800a99e:	48a7      	ldr	r0, [pc, #668]	@ (800ac3c <_dtoa_r+0x2cc>)
 800a9a0:	f001 fc68 	bl	800c274 <__assert_func>
 800a9a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a9a8:	6007      	str	r7, [r0, #0]
 800a9aa:	60c7      	str	r7, [r0, #12]
 800a9ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a9b0:	6819      	ldr	r1, [r3, #0]
 800a9b2:	b159      	cbz	r1, 800a9cc <_dtoa_r+0x5c>
 800a9b4:	685a      	ldr	r2, [r3, #4]
 800a9b6:	604a      	str	r2, [r1, #4]
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	4093      	lsls	r3, r2
 800a9bc:	608b      	str	r3, [r1, #8]
 800a9be:	4658      	mov	r0, fp
 800a9c0:	f000 feda 	bl	800b778 <_Bfree>
 800a9c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	601a      	str	r2, [r3, #0]
 800a9cc:	1e2b      	subs	r3, r5, #0
 800a9ce:	bfb9      	ittee	lt
 800a9d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a9d4:	9303      	strlt	r3, [sp, #12]
 800a9d6:	2300      	movge	r3, #0
 800a9d8:	6033      	strge	r3, [r6, #0]
 800a9da:	9f03      	ldr	r7, [sp, #12]
 800a9dc:	4b98      	ldr	r3, [pc, #608]	@ (800ac40 <_dtoa_r+0x2d0>)
 800a9de:	bfbc      	itt	lt
 800a9e0:	2201      	movlt	r2, #1
 800a9e2:	6032      	strlt	r2, [r6, #0]
 800a9e4:	43bb      	bics	r3, r7
 800a9e6:	d112      	bne.n	800aa0e <_dtoa_r+0x9e>
 800a9e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a9ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9f4:	4323      	orrs	r3, r4
 800a9f6:	f000 854d 	beq.w	800b494 <_dtoa_r+0xb24>
 800a9fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ac54 <_dtoa_r+0x2e4>
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 854f 	beq.w	800b4a4 <_dtoa_r+0xb34>
 800aa06:	f10a 0303 	add.w	r3, sl, #3
 800aa0a:	f000 bd49 	b.w	800b4a0 <_dtoa_r+0xb30>
 800aa0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa12:	2200      	movs	r2, #0
 800aa14:	ec51 0b17 	vmov	r0, r1, d7
 800aa18:	2300      	movs	r3, #0
 800aa1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aa1e:	f7f6 f853 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa22:	4680      	mov	r8, r0
 800aa24:	b158      	cbz	r0, 800aa3e <_dtoa_r+0xce>
 800aa26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa28:	2301      	movs	r3, #1
 800aa2a:	6013      	str	r3, [r2, #0]
 800aa2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa2e:	b113      	cbz	r3, 800aa36 <_dtoa_r+0xc6>
 800aa30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aa32:	4b84      	ldr	r3, [pc, #528]	@ (800ac44 <_dtoa_r+0x2d4>)
 800aa34:	6013      	str	r3, [r2, #0]
 800aa36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ac58 <_dtoa_r+0x2e8>
 800aa3a:	f000 bd33 	b.w	800b4a4 <_dtoa_r+0xb34>
 800aa3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aa42:	aa16      	add	r2, sp, #88	@ 0x58
 800aa44:	a917      	add	r1, sp, #92	@ 0x5c
 800aa46:	4658      	mov	r0, fp
 800aa48:	f001 f980 	bl	800bd4c <__d2b>
 800aa4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aa50:	4681      	mov	r9, r0
 800aa52:	2e00      	cmp	r6, #0
 800aa54:	d077      	beq.n	800ab46 <_dtoa_r+0x1d6>
 800aa56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aa5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aa68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aa6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aa70:	4619      	mov	r1, r3
 800aa72:	2200      	movs	r2, #0
 800aa74:	4b74      	ldr	r3, [pc, #464]	@ (800ac48 <_dtoa_r+0x2d8>)
 800aa76:	f7f5 fc07 	bl	8000288 <__aeabi_dsub>
 800aa7a:	a369      	add	r3, pc, #420	@ (adr r3, 800ac20 <_dtoa_r+0x2b0>)
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	f7f5 fdba 	bl	80005f8 <__aeabi_dmul>
 800aa84:	a368      	add	r3, pc, #416	@ (adr r3, 800ac28 <_dtoa_r+0x2b8>)
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	f7f5 fbff 	bl	800028c <__adddf3>
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4630      	mov	r0, r6
 800aa92:	460d      	mov	r5, r1
 800aa94:	f7f5 fd46 	bl	8000524 <__aeabi_i2d>
 800aa98:	a365      	add	r3, pc, #404	@ (adr r3, 800ac30 <_dtoa_r+0x2c0>)
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	f7f5 fdab 	bl	80005f8 <__aeabi_dmul>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	f7f5 fbef 	bl	800028c <__adddf3>
 800aaae:	4604      	mov	r4, r0
 800aab0:	460d      	mov	r5, r1
 800aab2:	f7f6 f851 	bl	8000b58 <__aeabi_d2iz>
 800aab6:	2200      	movs	r2, #0
 800aab8:	4607      	mov	r7, r0
 800aaba:	2300      	movs	r3, #0
 800aabc:	4620      	mov	r0, r4
 800aabe:	4629      	mov	r1, r5
 800aac0:	f7f6 f80c 	bl	8000adc <__aeabi_dcmplt>
 800aac4:	b140      	cbz	r0, 800aad8 <_dtoa_r+0x168>
 800aac6:	4638      	mov	r0, r7
 800aac8:	f7f5 fd2c 	bl	8000524 <__aeabi_i2d>
 800aacc:	4622      	mov	r2, r4
 800aace:	462b      	mov	r3, r5
 800aad0:	f7f5 fffa 	bl	8000ac8 <__aeabi_dcmpeq>
 800aad4:	b900      	cbnz	r0, 800aad8 <_dtoa_r+0x168>
 800aad6:	3f01      	subs	r7, #1
 800aad8:	2f16      	cmp	r7, #22
 800aada:	d851      	bhi.n	800ab80 <_dtoa_r+0x210>
 800aadc:	4b5b      	ldr	r3, [pc, #364]	@ (800ac4c <_dtoa_r+0x2dc>)
 800aade:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaea:	f7f5 fff7 	bl	8000adc <__aeabi_dcmplt>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d048      	beq.n	800ab84 <_dtoa_r+0x214>
 800aaf2:	3f01      	subs	r7, #1
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	9312      	str	r3, [sp, #72]	@ 0x48
 800aaf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aafa:	1b9b      	subs	r3, r3, r6
 800aafc:	1e5a      	subs	r2, r3, #1
 800aafe:	bf44      	itt	mi
 800ab00:	f1c3 0801 	rsbmi	r8, r3, #1
 800ab04:	2300      	movmi	r3, #0
 800ab06:	9208      	str	r2, [sp, #32]
 800ab08:	bf54      	ite	pl
 800ab0a:	f04f 0800 	movpl.w	r8, #0
 800ab0e:	9308      	strmi	r3, [sp, #32]
 800ab10:	2f00      	cmp	r7, #0
 800ab12:	db39      	blt.n	800ab88 <_dtoa_r+0x218>
 800ab14:	9b08      	ldr	r3, [sp, #32]
 800ab16:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ab18:	443b      	add	r3, r7
 800ab1a:	9308      	str	r3, [sp, #32]
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab22:	2b09      	cmp	r3, #9
 800ab24:	d864      	bhi.n	800abf0 <_dtoa_r+0x280>
 800ab26:	2b05      	cmp	r3, #5
 800ab28:	bfc4      	itt	gt
 800ab2a:	3b04      	subgt	r3, #4
 800ab2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ab2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab30:	f1a3 0302 	sub.w	r3, r3, #2
 800ab34:	bfcc      	ite	gt
 800ab36:	2400      	movgt	r4, #0
 800ab38:	2401      	movle	r4, #1
 800ab3a:	2b03      	cmp	r3, #3
 800ab3c:	d863      	bhi.n	800ac06 <_dtoa_r+0x296>
 800ab3e:	e8df f003 	tbb	[pc, r3]
 800ab42:	372a      	.short	0x372a
 800ab44:	5535      	.short	0x5535
 800ab46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ab4a:	441e      	add	r6, r3
 800ab4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ab50:	2b20      	cmp	r3, #32
 800ab52:	bfc1      	itttt	gt
 800ab54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ab58:	409f      	lslgt	r7, r3
 800ab5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ab5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ab62:	bfd6      	itet	le
 800ab64:	f1c3 0320 	rsble	r3, r3, #32
 800ab68:	ea47 0003 	orrgt.w	r0, r7, r3
 800ab6c:	fa04 f003 	lslle.w	r0, r4, r3
 800ab70:	f7f5 fcc8 	bl	8000504 <__aeabi_ui2d>
 800ab74:	2201      	movs	r2, #1
 800ab76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ab7a:	3e01      	subs	r6, #1
 800ab7c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ab7e:	e777      	b.n	800aa70 <_dtoa_r+0x100>
 800ab80:	2301      	movs	r3, #1
 800ab82:	e7b8      	b.n	800aaf6 <_dtoa_r+0x186>
 800ab84:	9012      	str	r0, [sp, #72]	@ 0x48
 800ab86:	e7b7      	b.n	800aaf8 <_dtoa_r+0x188>
 800ab88:	427b      	negs	r3, r7
 800ab8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	eba8 0807 	sub.w	r8, r8, r7
 800ab92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab94:	e7c4      	b.n	800ab20 <_dtoa_r+0x1b0>
 800ab96:	2300      	movs	r3, #0
 800ab98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	dc35      	bgt.n	800ac0c <_dtoa_r+0x29c>
 800aba0:	2301      	movs	r3, #1
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	9307      	str	r3, [sp, #28]
 800aba6:	461a      	mov	r2, r3
 800aba8:	920e      	str	r2, [sp, #56]	@ 0x38
 800abaa:	e00b      	b.n	800abc4 <_dtoa_r+0x254>
 800abac:	2301      	movs	r3, #1
 800abae:	e7f3      	b.n	800ab98 <_dtoa_r+0x228>
 800abb0:	2300      	movs	r3, #0
 800abb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abb6:	18fb      	adds	r3, r7, r3
 800abb8:	9300      	str	r3, [sp, #0]
 800abba:	3301      	adds	r3, #1
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	9307      	str	r3, [sp, #28]
 800abc0:	bfb8      	it	lt
 800abc2:	2301      	movlt	r3, #1
 800abc4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800abc8:	2100      	movs	r1, #0
 800abca:	2204      	movs	r2, #4
 800abcc:	f102 0514 	add.w	r5, r2, #20
 800abd0:	429d      	cmp	r5, r3
 800abd2:	d91f      	bls.n	800ac14 <_dtoa_r+0x2a4>
 800abd4:	6041      	str	r1, [r0, #4]
 800abd6:	4658      	mov	r0, fp
 800abd8:	f000 fd8e 	bl	800b6f8 <_Balloc>
 800abdc:	4682      	mov	sl, r0
 800abde:	2800      	cmp	r0, #0
 800abe0:	d13c      	bne.n	800ac5c <_dtoa_r+0x2ec>
 800abe2:	4b1b      	ldr	r3, [pc, #108]	@ (800ac50 <_dtoa_r+0x2e0>)
 800abe4:	4602      	mov	r2, r0
 800abe6:	f240 11af 	movw	r1, #431	@ 0x1af
 800abea:	e6d8      	b.n	800a99e <_dtoa_r+0x2e>
 800abec:	2301      	movs	r3, #1
 800abee:	e7e0      	b.n	800abb2 <_dtoa_r+0x242>
 800abf0:	2401      	movs	r4, #1
 800abf2:	2300      	movs	r3, #0
 800abf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800abf6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800abf8:	f04f 33ff 	mov.w	r3, #4294967295
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	9307      	str	r3, [sp, #28]
 800ac00:	2200      	movs	r2, #0
 800ac02:	2312      	movs	r3, #18
 800ac04:	e7d0      	b.n	800aba8 <_dtoa_r+0x238>
 800ac06:	2301      	movs	r3, #1
 800ac08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac0a:	e7f5      	b.n	800abf8 <_dtoa_r+0x288>
 800ac0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	9307      	str	r3, [sp, #28]
 800ac12:	e7d7      	b.n	800abc4 <_dtoa_r+0x254>
 800ac14:	3101      	adds	r1, #1
 800ac16:	0052      	lsls	r2, r2, #1
 800ac18:	e7d8      	b.n	800abcc <_dtoa_r+0x25c>
 800ac1a:	bf00      	nop
 800ac1c:	f3af 8000 	nop.w
 800ac20:	636f4361 	.word	0x636f4361
 800ac24:	3fd287a7 	.word	0x3fd287a7
 800ac28:	8b60c8b3 	.word	0x8b60c8b3
 800ac2c:	3fc68a28 	.word	0x3fc68a28
 800ac30:	509f79fb 	.word	0x509f79fb
 800ac34:	3fd34413 	.word	0x3fd34413
 800ac38:	0800dbd1 	.word	0x0800dbd1
 800ac3c:	0800dbe8 	.word	0x0800dbe8
 800ac40:	7ff00000 	.word	0x7ff00000
 800ac44:	0800dba1 	.word	0x0800dba1
 800ac48:	3ff80000 	.word	0x3ff80000
 800ac4c:	0800dce0 	.word	0x0800dce0
 800ac50:	0800dc40 	.word	0x0800dc40
 800ac54:	0800dbcd 	.word	0x0800dbcd
 800ac58:	0800dba0 	.word	0x0800dba0
 800ac5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac60:	6018      	str	r0, [r3, #0]
 800ac62:	9b07      	ldr	r3, [sp, #28]
 800ac64:	2b0e      	cmp	r3, #14
 800ac66:	f200 80a4 	bhi.w	800adb2 <_dtoa_r+0x442>
 800ac6a:	2c00      	cmp	r4, #0
 800ac6c:	f000 80a1 	beq.w	800adb2 <_dtoa_r+0x442>
 800ac70:	2f00      	cmp	r7, #0
 800ac72:	dd33      	ble.n	800acdc <_dtoa_r+0x36c>
 800ac74:	4bad      	ldr	r3, [pc, #692]	@ (800af2c <_dtoa_r+0x5bc>)
 800ac76:	f007 020f 	and.w	r2, r7, #15
 800ac7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac7e:	ed93 7b00 	vldr	d7, [r3]
 800ac82:	05f8      	lsls	r0, r7, #23
 800ac84:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ac88:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ac8c:	d516      	bpl.n	800acbc <_dtoa_r+0x34c>
 800ac8e:	4ba8      	ldr	r3, [pc, #672]	@ (800af30 <_dtoa_r+0x5c0>)
 800ac90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac98:	f7f5 fdd8 	bl	800084c <__aeabi_ddiv>
 800ac9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aca0:	f004 040f 	and.w	r4, r4, #15
 800aca4:	2603      	movs	r6, #3
 800aca6:	4da2      	ldr	r5, [pc, #648]	@ (800af30 <_dtoa_r+0x5c0>)
 800aca8:	b954      	cbnz	r4, 800acc0 <_dtoa_r+0x350>
 800acaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acb2:	f7f5 fdcb 	bl	800084c <__aeabi_ddiv>
 800acb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acba:	e028      	b.n	800ad0e <_dtoa_r+0x39e>
 800acbc:	2602      	movs	r6, #2
 800acbe:	e7f2      	b.n	800aca6 <_dtoa_r+0x336>
 800acc0:	07e1      	lsls	r1, r4, #31
 800acc2:	d508      	bpl.n	800acd6 <_dtoa_r+0x366>
 800acc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800accc:	f7f5 fc94 	bl	80005f8 <__aeabi_dmul>
 800acd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acd4:	3601      	adds	r6, #1
 800acd6:	1064      	asrs	r4, r4, #1
 800acd8:	3508      	adds	r5, #8
 800acda:	e7e5      	b.n	800aca8 <_dtoa_r+0x338>
 800acdc:	f000 80d2 	beq.w	800ae84 <_dtoa_r+0x514>
 800ace0:	427c      	negs	r4, r7
 800ace2:	4b92      	ldr	r3, [pc, #584]	@ (800af2c <_dtoa_r+0x5bc>)
 800ace4:	4d92      	ldr	r5, [pc, #584]	@ (800af30 <_dtoa_r+0x5c0>)
 800ace6:	f004 020f 	and.w	r2, r4, #15
 800acea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acf6:	f7f5 fc7f 	bl	80005f8 <__aeabi_dmul>
 800acfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acfe:	1124      	asrs	r4, r4, #4
 800ad00:	2300      	movs	r3, #0
 800ad02:	2602      	movs	r6, #2
 800ad04:	2c00      	cmp	r4, #0
 800ad06:	f040 80b2 	bne.w	800ae6e <_dtoa_r+0x4fe>
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1d3      	bne.n	800acb6 <_dtoa_r+0x346>
 800ad0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f000 80b7 	beq.w	800ae88 <_dtoa_r+0x518>
 800ad1a:	4b86      	ldr	r3, [pc, #536]	@ (800af34 <_dtoa_r+0x5c4>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	4620      	mov	r0, r4
 800ad20:	4629      	mov	r1, r5
 800ad22:	f7f5 fedb 	bl	8000adc <__aeabi_dcmplt>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	f000 80ae 	beq.w	800ae88 <_dtoa_r+0x518>
 800ad2c:	9b07      	ldr	r3, [sp, #28]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f000 80aa 	beq.w	800ae88 <_dtoa_r+0x518>
 800ad34:	9b00      	ldr	r3, [sp, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	dd37      	ble.n	800adaa <_dtoa_r+0x43a>
 800ad3a:	1e7b      	subs	r3, r7, #1
 800ad3c:	9304      	str	r3, [sp, #16]
 800ad3e:	4620      	mov	r0, r4
 800ad40:	4b7d      	ldr	r3, [pc, #500]	@ (800af38 <_dtoa_r+0x5c8>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	4629      	mov	r1, r5
 800ad46:	f7f5 fc57 	bl	80005f8 <__aeabi_dmul>
 800ad4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad4e:	9c00      	ldr	r4, [sp, #0]
 800ad50:	3601      	adds	r6, #1
 800ad52:	4630      	mov	r0, r6
 800ad54:	f7f5 fbe6 	bl	8000524 <__aeabi_i2d>
 800ad58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad5c:	f7f5 fc4c 	bl	80005f8 <__aeabi_dmul>
 800ad60:	4b76      	ldr	r3, [pc, #472]	@ (800af3c <_dtoa_r+0x5cc>)
 800ad62:	2200      	movs	r2, #0
 800ad64:	f7f5 fa92 	bl	800028c <__adddf3>
 800ad68:	4605      	mov	r5, r0
 800ad6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ad6e:	2c00      	cmp	r4, #0
 800ad70:	f040 808d 	bne.w	800ae8e <_dtoa_r+0x51e>
 800ad74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad78:	4b71      	ldr	r3, [pc, #452]	@ (800af40 <_dtoa_r+0x5d0>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f7f5 fa84 	bl	8000288 <__aeabi_dsub>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad88:	462a      	mov	r2, r5
 800ad8a:	4633      	mov	r3, r6
 800ad8c:	f7f5 fec4 	bl	8000b18 <__aeabi_dcmpgt>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	f040 828b 	bne.w	800b2ac <_dtoa_r+0x93c>
 800ad96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad9a:	462a      	mov	r2, r5
 800ad9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ada0:	f7f5 fe9c 	bl	8000adc <__aeabi_dcmplt>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f040 8128 	bne.w	800affa <_dtoa_r+0x68a>
 800adaa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800adae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800adb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f2c0 815a 	blt.w	800b06e <_dtoa_r+0x6fe>
 800adba:	2f0e      	cmp	r7, #14
 800adbc:	f300 8157 	bgt.w	800b06e <_dtoa_r+0x6fe>
 800adc0:	4b5a      	ldr	r3, [pc, #360]	@ (800af2c <_dtoa_r+0x5bc>)
 800adc2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800adc6:	ed93 7b00 	vldr	d7, [r3]
 800adca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adcc:	2b00      	cmp	r3, #0
 800adce:	ed8d 7b00 	vstr	d7, [sp]
 800add2:	da03      	bge.n	800addc <_dtoa_r+0x46c>
 800add4:	9b07      	ldr	r3, [sp, #28]
 800add6:	2b00      	cmp	r3, #0
 800add8:	f340 8101 	ble.w	800afde <_dtoa_r+0x66e>
 800addc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ade0:	4656      	mov	r6, sl
 800ade2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ade6:	4620      	mov	r0, r4
 800ade8:	4629      	mov	r1, r5
 800adea:	f7f5 fd2f 	bl	800084c <__aeabi_ddiv>
 800adee:	f7f5 feb3 	bl	8000b58 <__aeabi_d2iz>
 800adf2:	4680      	mov	r8, r0
 800adf4:	f7f5 fb96 	bl	8000524 <__aeabi_i2d>
 800adf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adfc:	f7f5 fbfc 	bl	80005f8 <__aeabi_dmul>
 800ae00:	4602      	mov	r2, r0
 800ae02:	460b      	mov	r3, r1
 800ae04:	4620      	mov	r0, r4
 800ae06:	4629      	mov	r1, r5
 800ae08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ae0c:	f7f5 fa3c 	bl	8000288 <__aeabi_dsub>
 800ae10:	f806 4b01 	strb.w	r4, [r6], #1
 800ae14:	9d07      	ldr	r5, [sp, #28]
 800ae16:	eba6 040a 	sub.w	r4, r6, sl
 800ae1a:	42a5      	cmp	r5, r4
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	f040 8117 	bne.w	800b052 <_dtoa_r+0x6e2>
 800ae24:	f7f5 fa32 	bl	800028c <__adddf3>
 800ae28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	460d      	mov	r5, r1
 800ae30:	f7f5 fe72 	bl	8000b18 <__aeabi_dcmpgt>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	f040 80f9 	bne.w	800b02c <_dtoa_r+0x6bc>
 800ae3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae3e:	4620      	mov	r0, r4
 800ae40:	4629      	mov	r1, r5
 800ae42:	f7f5 fe41 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae46:	b118      	cbz	r0, 800ae50 <_dtoa_r+0x4e0>
 800ae48:	f018 0f01 	tst.w	r8, #1
 800ae4c:	f040 80ee 	bne.w	800b02c <_dtoa_r+0x6bc>
 800ae50:	4649      	mov	r1, r9
 800ae52:	4658      	mov	r0, fp
 800ae54:	f000 fc90 	bl	800b778 <_Bfree>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	7033      	strb	r3, [r6, #0]
 800ae5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae5e:	3701      	adds	r7, #1
 800ae60:	601f      	str	r7, [r3, #0]
 800ae62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f000 831d 	beq.w	800b4a4 <_dtoa_r+0xb34>
 800ae6a:	601e      	str	r6, [r3, #0]
 800ae6c:	e31a      	b.n	800b4a4 <_dtoa_r+0xb34>
 800ae6e:	07e2      	lsls	r2, r4, #31
 800ae70:	d505      	bpl.n	800ae7e <_dtoa_r+0x50e>
 800ae72:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae76:	f7f5 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ae7a:	3601      	adds	r6, #1
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	1064      	asrs	r4, r4, #1
 800ae80:	3508      	adds	r5, #8
 800ae82:	e73f      	b.n	800ad04 <_dtoa_r+0x394>
 800ae84:	2602      	movs	r6, #2
 800ae86:	e742      	b.n	800ad0e <_dtoa_r+0x39e>
 800ae88:	9c07      	ldr	r4, [sp, #28]
 800ae8a:	9704      	str	r7, [sp, #16]
 800ae8c:	e761      	b.n	800ad52 <_dtoa_r+0x3e2>
 800ae8e:	4b27      	ldr	r3, [pc, #156]	@ (800af2c <_dtoa_r+0x5bc>)
 800ae90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae9a:	4454      	add	r4, sl
 800ae9c:	2900      	cmp	r1, #0
 800ae9e:	d053      	beq.n	800af48 <_dtoa_r+0x5d8>
 800aea0:	4928      	ldr	r1, [pc, #160]	@ (800af44 <_dtoa_r+0x5d4>)
 800aea2:	2000      	movs	r0, #0
 800aea4:	f7f5 fcd2 	bl	800084c <__aeabi_ddiv>
 800aea8:	4633      	mov	r3, r6
 800aeaa:	462a      	mov	r2, r5
 800aeac:	f7f5 f9ec 	bl	8000288 <__aeabi_dsub>
 800aeb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aeb4:	4656      	mov	r6, sl
 800aeb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeba:	f7f5 fe4d 	bl	8000b58 <__aeabi_d2iz>
 800aebe:	4605      	mov	r5, r0
 800aec0:	f7f5 fb30 	bl	8000524 <__aeabi_i2d>
 800aec4:	4602      	mov	r2, r0
 800aec6:	460b      	mov	r3, r1
 800aec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aecc:	f7f5 f9dc 	bl	8000288 <__aeabi_dsub>
 800aed0:	3530      	adds	r5, #48	@ 0x30
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aeda:	f806 5b01 	strb.w	r5, [r6], #1
 800aede:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aee2:	f7f5 fdfb 	bl	8000adc <__aeabi_dcmplt>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	d171      	bne.n	800afce <_dtoa_r+0x65e>
 800aeea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeee:	4911      	ldr	r1, [pc, #68]	@ (800af34 <_dtoa_r+0x5c4>)
 800aef0:	2000      	movs	r0, #0
 800aef2:	f7f5 f9c9 	bl	8000288 <__aeabi_dsub>
 800aef6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aefa:	f7f5 fdef 	bl	8000adc <__aeabi_dcmplt>
 800aefe:	2800      	cmp	r0, #0
 800af00:	f040 8095 	bne.w	800b02e <_dtoa_r+0x6be>
 800af04:	42a6      	cmp	r6, r4
 800af06:	f43f af50 	beq.w	800adaa <_dtoa_r+0x43a>
 800af0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af0e:	4b0a      	ldr	r3, [pc, #40]	@ (800af38 <_dtoa_r+0x5c8>)
 800af10:	2200      	movs	r2, #0
 800af12:	f7f5 fb71 	bl	80005f8 <__aeabi_dmul>
 800af16:	4b08      	ldr	r3, [pc, #32]	@ (800af38 <_dtoa_r+0x5c8>)
 800af18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af1c:	2200      	movs	r2, #0
 800af1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af22:	f7f5 fb69 	bl	80005f8 <__aeabi_dmul>
 800af26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af2a:	e7c4      	b.n	800aeb6 <_dtoa_r+0x546>
 800af2c:	0800dce0 	.word	0x0800dce0
 800af30:	0800dcb8 	.word	0x0800dcb8
 800af34:	3ff00000 	.word	0x3ff00000
 800af38:	40240000 	.word	0x40240000
 800af3c:	401c0000 	.word	0x401c0000
 800af40:	40140000 	.word	0x40140000
 800af44:	3fe00000 	.word	0x3fe00000
 800af48:	4631      	mov	r1, r6
 800af4a:	4628      	mov	r0, r5
 800af4c:	f7f5 fb54 	bl	80005f8 <__aeabi_dmul>
 800af50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af54:	9415      	str	r4, [sp, #84]	@ 0x54
 800af56:	4656      	mov	r6, sl
 800af58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af5c:	f7f5 fdfc 	bl	8000b58 <__aeabi_d2iz>
 800af60:	4605      	mov	r5, r0
 800af62:	f7f5 fadf 	bl	8000524 <__aeabi_i2d>
 800af66:	4602      	mov	r2, r0
 800af68:	460b      	mov	r3, r1
 800af6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af6e:	f7f5 f98b 	bl	8000288 <__aeabi_dsub>
 800af72:	3530      	adds	r5, #48	@ 0x30
 800af74:	f806 5b01 	strb.w	r5, [r6], #1
 800af78:	4602      	mov	r2, r0
 800af7a:	460b      	mov	r3, r1
 800af7c:	42a6      	cmp	r6, r4
 800af7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af82:	f04f 0200 	mov.w	r2, #0
 800af86:	d124      	bne.n	800afd2 <_dtoa_r+0x662>
 800af88:	4bac      	ldr	r3, [pc, #688]	@ (800b23c <_dtoa_r+0x8cc>)
 800af8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af8e:	f7f5 f97d 	bl	800028c <__adddf3>
 800af92:	4602      	mov	r2, r0
 800af94:	460b      	mov	r3, r1
 800af96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af9a:	f7f5 fdbd 	bl	8000b18 <__aeabi_dcmpgt>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d145      	bne.n	800b02e <_dtoa_r+0x6be>
 800afa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800afa6:	49a5      	ldr	r1, [pc, #660]	@ (800b23c <_dtoa_r+0x8cc>)
 800afa8:	2000      	movs	r0, #0
 800afaa:	f7f5 f96d 	bl	8000288 <__aeabi_dsub>
 800afae:	4602      	mov	r2, r0
 800afb0:	460b      	mov	r3, r1
 800afb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afb6:	f7f5 fd91 	bl	8000adc <__aeabi_dcmplt>
 800afba:	2800      	cmp	r0, #0
 800afbc:	f43f aef5 	beq.w	800adaa <_dtoa_r+0x43a>
 800afc0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800afc2:	1e73      	subs	r3, r6, #1
 800afc4:	9315      	str	r3, [sp, #84]	@ 0x54
 800afc6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800afca:	2b30      	cmp	r3, #48	@ 0x30
 800afcc:	d0f8      	beq.n	800afc0 <_dtoa_r+0x650>
 800afce:	9f04      	ldr	r7, [sp, #16]
 800afd0:	e73e      	b.n	800ae50 <_dtoa_r+0x4e0>
 800afd2:	4b9b      	ldr	r3, [pc, #620]	@ (800b240 <_dtoa_r+0x8d0>)
 800afd4:	f7f5 fb10 	bl	80005f8 <__aeabi_dmul>
 800afd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afdc:	e7bc      	b.n	800af58 <_dtoa_r+0x5e8>
 800afde:	d10c      	bne.n	800affa <_dtoa_r+0x68a>
 800afe0:	4b98      	ldr	r3, [pc, #608]	@ (800b244 <_dtoa_r+0x8d4>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afe8:	f7f5 fb06 	bl	80005f8 <__aeabi_dmul>
 800afec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aff0:	f7f5 fd88 	bl	8000b04 <__aeabi_dcmpge>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	f000 8157 	beq.w	800b2a8 <_dtoa_r+0x938>
 800affa:	2400      	movs	r4, #0
 800affc:	4625      	mov	r5, r4
 800affe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b000:	43db      	mvns	r3, r3
 800b002:	9304      	str	r3, [sp, #16]
 800b004:	4656      	mov	r6, sl
 800b006:	2700      	movs	r7, #0
 800b008:	4621      	mov	r1, r4
 800b00a:	4658      	mov	r0, fp
 800b00c:	f000 fbb4 	bl	800b778 <_Bfree>
 800b010:	2d00      	cmp	r5, #0
 800b012:	d0dc      	beq.n	800afce <_dtoa_r+0x65e>
 800b014:	b12f      	cbz	r7, 800b022 <_dtoa_r+0x6b2>
 800b016:	42af      	cmp	r7, r5
 800b018:	d003      	beq.n	800b022 <_dtoa_r+0x6b2>
 800b01a:	4639      	mov	r1, r7
 800b01c:	4658      	mov	r0, fp
 800b01e:	f000 fbab 	bl	800b778 <_Bfree>
 800b022:	4629      	mov	r1, r5
 800b024:	4658      	mov	r0, fp
 800b026:	f000 fba7 	bl	800b778 <_Bfree>
 800b02a:	e7d0      	b.n	800afce <_dtoa_r+0x65e>
 800b02c:	9704      	str	r7, [sp, #16]
 800b02e:	4633      	mov	r3, r6
 800b030:	461e      	mov	r6, r3
 800b032:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b036:	2a39      	cmp	r2, #57	@ 0x39
 800b038:	d107      	bne.n	800b04a <_dtoa_r+0x6da>
 800b03a:	459a      	cmp	sl, r3
 800b03c:	d1f8      	bne.n	800b030 <_dtoa_r+0x6c0>
 800b03e:	9a04      	ldr	r2, [sp, #16]
 800b040:	3201      	adds	r2, #1
 800b042:	9204      	str	r2, [sp, #16]
 800b044:	2230      	movs	r2, #48	@ 0x30
 800b046:	f88a 2000 	strb.w	r2, [sl]
 800b04a:	781a      	ldrb	r2, [r3, #0]
 800b04c:	3201      	adds	r2, #1
 800b04e:	701a      	strb	r2, [r3, #0]
 800b050:	e7bd      	b.n	800afce <_dtoa_r+0x65e>
 800b052:	4b7b      	ldr	r3, [pc, #492]	@ (800b240 <_dtoa_r+0x8d0>)
 800b054:	2200      	movs	r2, #0
 800b056:	f7f5 facf 	bl	80005f8 <__aeabi_dmul>
 800b05a:	2200      	movs	r2, #0
 800b05c:	2300      	movs	r3, #0
 800b05e:	4604      	mov	r4, r0
 800b060:	460d      	mov	r5, r1
 800b062:	f7f5 fd31 	bl	8000ac8 <__aeabi_dcmpeq>
 800b066:	2800      	cmp	r0, #0
 800b068:	f43f aebb 	beq.w	800ade2 <_dtoa_r+0x472>
 800b06c:	e6f0      	b.n	800ae50 <_dtoa_r+0x4e0>
 800b06e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b070:	2a00      	cmp	r2, #0
 800b072:	f000 80db 	beq.w	800b22c <_dtoa_r+0x8bc>
 800b076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b078:	2a01      	cmp	r2, #1
 800b07a:	f300 80bf 	bgt.w	800b1fc <_dtoa_r+0x88c>
 800b07e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b080:	2a00      	cmp	r2, #0
 800b082:	f000 80b7 	beq.w	800b1f4 <_dtoa_r+0x884>
 800b086:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b08a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b08c:	4646      	mov	r6, r8
 800b08e:	9a08      	ldr	r2, [sp, #32]
 800b090:	2101      	movs	r1, #1
 800b092:	441a      	add	r2, r3
 800b094:	4658      	mov	r0, fp
 800b096:	4498      	add	r8, r3
 800b098:	9208      	str	r2, [sp, #32]
 800b09a:	f000 fc21 	bl	800b8e0 <__i2b>
 800b09e:	4605      	mov	r5, r0
 800b0a0:	b15e      	cbz	r6, 800b0ba <_dtoa_r+0x74a>
 800b0a2:	9b08      	ldr	r3, [sp, #32]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	dd08      	ble.n	800b0ba <_dtoa_r+0x74a>
 800b0a8:	42b3      	cmp	r3, r6
 800b0aa:	9a08      	ldr	r2, [sp, #32]
 800b0ac:	bfa8      	it	ge
 800b0ae:	4633      	movge	r3, r6
 800b0b0:	eba8 0803 	sub.w	r8, r8, r3
 800b0b4:	1af6      	subs	r6, r6, r3
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	9308      	str	r3, [sp, #32]
 800b0ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0bc:	b1f3      	cbz	r3, 800b0fc <_dtoa_r+0x78c>
 800b0be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 80b7 	beq.w	800b234 <_dtoa_r+0x8c4>
 800b0c6:	b18c      	cbz	r4, 800b0ec <_dtoa_r+0x77c>
 800b0c8:	4629      	mov	r1, r5
 800b0ca:	4622      	mov	r2, r4
 800b0cc:	4658      	mov	r0, fp
 800b0ce:	f000 fcc7 	bl	800ba60 <__pow5mult>
 800b0d2:	464a      	mov	r2, r9
 800b0d4:	4601      	mov	r1, r0
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	4658      	mov	r0, fp
 800b0da:	f000 fc17 	bl	800b90c <__multiply>
 800b0de:	4649      	mov	r1, r9
 800b0e0:	9004      	str	r0, [sp, #16]
 800b0e2:	4658      	mov	r0, fp
 800b0e4:	f000 fb48 	bl	800b778 <_Bfree>
 800b0e8:	9b04      	ldr	r3, [sp, #16]
 800b0ea:	4699      	mov	r9, r3
 800b0ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0ee:	1b1a      	subs	r2, r3, r4
 800b0f0:	d004      	beq.n	800b0fc <_dtoa_r+0x78c>
 800b0f2:	4649      	mov	r1, r9
 800b0f4:	4658      	mov	r0, fp
 800b0f6:	f000 fcb3 	bl	800ba60 <__pow5mult>
 800b0fa:	4681      	mov	r9, r0
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	4658      	mov	r0, fp
 800b100:	f000 fbee 	bl	800b8e0 <__i2b>
 800b104:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b106:	4604      	mov	r4, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 81cf 	beq.w	800b4ac <_dtoa_r+0xb3c>
 800b10e:	461a      	mov	r2, r3
 800b110:	4601      	mov	r1, r0
 800b112:	4658      	mov	r0, fp
 800b114:	f000 fca4 	bl	800ba60 <__pow5mult>
 800b118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	4604      	mov	r4, r0
 800b11e:	f300 8095 	bgt.w	800b24c <_dtoa_r+0x8dc>
 800b122:	9b02      	ldr	r3, [sp, #8]
 800b124:	2b00      	cmp	r3, #0
 800b126:	f040 8087 	bne.w	800b238 <_dtoa_r+0x8c8>
 800b12a:	9b03      	ldr	r3, [sp, #12]
 800b12c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b130:	2b00      	cmp	r3, #0
 800b132:	f040 8089 	bne.w	800b248 <_dtoa_r+0x8d8>
 800b136:	9b03      	ldr	r3, [sp, #12]
 800b138:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b13c:	0d1b      	lsrs	r3, r3, #20
 800b13e:	051b      	lsls	r3, r3, #20
 800b140:	b12b      	cbz	r3, 800b14e <_dtoa_r+0x7de>
 800b142:	9b08      	ldr	r3, [sp, #32]
 800b144:	3301      	adds	r3, #1
 800b146:	9308      	str	r3, [sp, #32]
 800b148:	f108 0801 	add.w	r8, r8, #1
 800b14c:	2301      	movs	r3, #1
 800b14e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b152:	2b00      	cmp	r3, #0
 800b154:	f000 81b0 	beq.w	800b4b8 <_dtoa_r+0xb48>
 800b158:	6923      	ldr	r3, [r4, #16]
 800b15a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b15e:	6918      	ldr	r0, [r3, #16]
 800b160:	f000 fb72 	bl	800b848 <__hi0bits>
 800b164:	f1c0 0020 	rsb	r0, r0, #32
 800b168:	9b08      	ldr	r3, [sp, #32]
 800b16a:	4418      	add	r0, r3
 800b16c:	f010 001f 	ands.w	r0, r0, #31
 800b170:	d077      	beq.n	800b262 <_dtoa_r+0x8f2>
 800b172:	f1c0 0320 	rsb	r3, r0, #32
 800b176:	2b04      	cmp	r3, #4
 800b178:	dd6b      	ble.n	800b252 <_dtoa_r+0x8e2>
 800b17a:	9b08      	ldr	r3, [sp, #32]
 800b17c:	f1c0 001c 	rsb	r0, r0, #28
 800b180:	4403      	add	r3, r0
 800b182:	4480      	add	r8, r0
 800b184:	4406      	add	r6, r0
 800b186:	9308      	str	r3, [sp, #32]
 800b188:	f1b8 0f00 	cmp.w	r8, #0
 800b18c:	dd05      	ble.n	800b19a <_dtoa_r+0x82a>
 800b18e:	4649      	mov	r1, r9
 800b190:	4642      	mov	r2, r8
 800b192:	4658      	mov	r0, fp
 800b194:	f000 fcbe 	bl	800bb14 <__lshift>
 800b198:	4681      	mov	r9, r0
 800b19a:	9b08      	ldr	r3, [sp, #32]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	dd05      	ble.n	800b1ac <_dtoa_r+0x83c>
 800b1a0:	4621      	mov	r1, r4
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	4658      	mov	r0, fp
 800b1a6:	f000 fcb5 	bl	800bb14 <__lshift>
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d059      	beq.n	800b266 <_dtoa_r+0x8f6>
 800b1b2:	4621      	mov	r1, r4
 800b1b4:	4648      	mov	r0, r9
 800b1b6:	f000 fd19 	bl	800bbec <__mcmp>
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	da53      	bge.n	800b266 <_dtoa_r+0x8f6>
 800b1be:	1e7b      	subs	r3, r7, #1
 800b1c0:	9304      	str	r3, [sp, #16]
 800b1c2:	4649      	mov	r1, r9
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	220a      	movs	r2, #10
 800b1c8:	4658      	mov	r0, fp
 800b1ca:	f000 faf7 	bl	800b7bc <__multadd>
 800b1ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1d0:	4681      	mov	r9, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f000 8172 	beq.w	800b4bc <_dtoa_r+0xb4c>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4629      	mov	r1, r5
 800b1dc:	220a      	movs	r2, #10
 800b1de:	4658      	mov	r0, fp
 800b1e0:	f000 faec 	bl	800b7bc <__multadd>
 800b1e4:	9b00      	ldr	r3, [sp, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	dc67      	bgt.n	800b2bc <_dtoa_r+0x94c>
 800b1ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	dc41      	bgt.n	800b276 <_dtoa_r+0x906>
 800b1f2:	e063      	b.n	800b2bc <_dtoa_r+0x94c>
 800b1f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b1f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b1fa:	e746      	b.n	800b08a <_dtoa_r+0x71a>
 800b1fc:	9b07      	ldr	r3, [sp, #28]
 800b1fe:	1e5c      	subs	r4, r3, #1
 800b200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b202:	42a3      	cmp	r3, r4
 800b204:	bfbf      	itttt	lt
 800b206:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b208:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b20a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b20c:	1ae3      	sublt	r3, r4, r3
 800b20e:	bfb4      	ite	lt
 800b210:	18d2      	addlt	r2, r2, r3
 800b212:	1b1c      	subge	r4, r3, r4
 800b214:	9b07      	ldr	r3, [sp, #28]
 800b216:	bfbc      	itt	lt
 800b218:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b21a:	2400      	movlt	r4, #0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	bfb5      	itete	lt
 800b220:	eba8 0603 	sublt.w	r6, r8, r3
 800b224:	9b07      	ldrge	r3, [sp, #28]
 800b226:	2300      	movlt	r3, #0
 800b228:	4646      	movge	r6, r8
 800b22a:	e730      	b.n	800b08e <_dtoa_r+0x71e>
 800b22c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b22e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b230:	4646      	mov	r6, r8
 800b232:	e735      	b.n	800b0a0 <_dtoa_r+0x730>
 800b234:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b236:	e75c      	b.n	800b0f2 <_dtoa_r+0x782>
 800b238:	2300      	movs	r3, #0
 800b23a:	e788      	b.n	800b14e <_dtoa_r+0x7de>
 800b23c:	3fe00000 	.word	0x3fe00000
 800b240:	40240000 	.word	0x40240000
 800b244:	40140000 	.word	0x40140000
 800b248:	9b02      	ldr	r3, [sp, #8]
 800b24a:	e780      	b.n	800b14e <_dtoa_r+0x7de>
 800b24c:	2300      	movs	r3, #0
 800b24e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b250:	e782      	b.n	800b158 <_dtoa_r+0x7e8>
 800b252:	d099      	beq.n	800b188 <_dtoa_r+0x818>
 800b254:	9a08      	ldr	r2, [sp, #32]
 800b256:	331c      	adds	r3, #28
 800b258:	441a      	add	r2, r3
 800b25a:	4498      	add	r8, r3
 800b25c:	441e      	add	r6, r3
 800b25e:	9208      	str	r2, [sp, #32]
 800b260:	e792      	b.n	800b188 <_dtoa_r+0x818>
 800b262:	4603      	mov	r3, r0
 800b264:	e7f6      	b.n	800b254 <_dtoa_r+0x8e4>
 800b266:	9b07      	ldr	r3, [sp, #28]
 800b268:	9704      	str	r7, [sp, #16]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	dc20      	bgt.n	800b2b0 <_dtoa_r+0x940>
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b272:	2b02      	cmp	r3, #2
 800b274:	dd1e      	ble.n	800b2b4 <_dtoa_r+0x944>
 800b276:	9b00      	ldr	r3, [sp, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f47f aec0 	bne.w	800affe <_dtoa_r+0x68e>
 800b27e:	4621      	mov	r1, r4
 800b280:	2205      	movs	r2, #5
 800b282:	4658      	mov	r0, fp
 800b284:	f000 fa9a 	bl	800b7bc <__multadd>
 800b288:	4601      	mov	r1, r0
 800b28a:	4604      	mov	r4, r0
 800b28c:	4648      	mov	r0, r9
 800b28e:	f000 fcad 	bl	800bbec <__mcmp>
 800b292:	2800      	cmp	r0, #0
 800b294:	f77f aeb3 	ble.w	800affe <_dtoa_r+0x68e>
 800b298:	4656      	mov	r6, sl
 800b29a:	2331      	movs	r3, #49	@ 0x31
 800b29c:	f806 3b01 	strb.w	r3, [r6], #1
 800b2a0:	9b04      	ldr	r3, [sp, #16]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	9304      	str	r3, [sp, #16]
 800b2a6:	e6ae      	b.n	800b006 <_dtoa_r+0x696>
 800b2a8:	9c07      	ldr	r4, [sp, #28]
 800b2aa:	9704      	str	r7, [sp, #16]
 800b2ac:	4625      	mov	r5, r4
 800b2ae:	e7f3      	b.n	800b298 <_dtoa_r+0x928>
 800b2b0:	9b07      	ldr	r3, [sp, #28]
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f000 8104 	beq.w	800b4c4 <_dtoa_r+0xb54>
 800b2bc:	2e00      	cmp	r6, #0
 800b2be:	dd05      	ble.n	800b2cc <_dtoa_r+0x95c>
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	4632      	mov	r2, r6
 800b2c4:	4658      	mov	r0, fp
 800b2c6:	f000 fc25 	bl	800bb14 <__lshift>
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d05a      	beq.n	800b388 <_dtoa_r+0xa18>
 800b2d2:	6869      	ldr	r1, [r5, #4]
 800b2d4:	4658      	mov	r0, fp
 800b2d6:	f000 fa0f 	bl	800b6f8 <_Balloc>
 800b2da:	4606      	mov	r6, r0
 800b2dc:	b928      	cbnz	r0, 800b2ea <_dtoa_r+0x97a>
 800b2de:	4b84      	ldr	r3, [pc, #528]	@ (800b4f0 <_dtoa_r+0xb80>)
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b2e6:	f7ff bb5a 	b.w	800a99e <_dtoa_r+0x2e>
 800b2ea:	692a      	ldr	r2, [r5, #16]
 800b2ec:	3202      	adds	r2, #2
 800b2ee:	0092      	lsls	r2, r2, #2
 800b2f0:	f105 010c 	add.w	r1, r5, #12
 800b2f4:	300c      	adds	r0, #12
 800b2f6:	f000 ffaf 	bl	800c258 <memcpy>
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	4658      	mov	r0, fp
 800b300:	f000 fc08 	bl	800bb14 <__lshift>
 800b304:	f10a 0301 	add.w	r3, sl, #1
 800b308:	9307      	str	r3, [sp, #28]
 800b30a:	9b00      	ldr	r3, [sp, #0]
 800b30c:	4453      	add	r3, sl
 800b30e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b310:	9b02      	ldr	r3, [sp, #8]
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	462f      	mov	r7, r5
 800b318:	930a      	str	r3, [sp, #40]	@ 0x28
 800b31a:	4605      	mov	r5, r0
 800b31c:	9b07      	ldr	r3, [sp, #28]
 800b31e:	4621      	mov	r1, r4
 800b320:	3b01      	subs	r3, #1
 800b322:	4648      	mov	r0, r9
 800b324:	9300      	str	r3, [sp, #0]
 800b326:	f7ff fa9a 	bl	800a85e <quorem>
 800b32a:	4639      	mov	r1, r7
 800b32c:	9002      	str	r0, [sp, #8]
 800b32e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b332:	4648      	mov	r0, r9
 800b334:	f000 fc5a 	bl	800bbec <__mcmp>
 800b338:	462a      	mov	r2, r5
 800b33a:	9008      	str	r0, [sp, #32]
 800b33c:	4621      	mov	r1, r4
 800b33e:	4658      	mov	r0, fp
 800b340:	f000 fc70 	bl	800bc24 <__mdiff>
 800b344:	68c2      	ldr	r2, [r0, #12]
 800b346:	4606      	mov	r6, r0
 800b348:	bb02      	cbnz	r2, 800b38c <_dtoa_r+0xa1c>
 800b34a:	4601      	mov	r1, r0
 800b34c:	4648      	mov	r0, r9
 800b34e:	f000 fc4d 	bl	800bbec <__mcmp>
 800b352:	4602      	mov	r2, r0
 800b354:	4631      	mov	r1, r6
 800b356:	4658      	mov	r0, fp
 800b358:	920e      	str	r2, [sp, #56]	@ 0x38
 800b35a:	f000 fa0d 	bl	800b778 <_Bfree>
 800b35e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b360:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b362:	9e07      	ldr	r6, [sp, #28]
 800b364:	ea43 0102 	orr.w	r1, r3, r2
 800b368:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b36a:	4319      	orrs	r1, r3
 800b36c:	d110      	bne.n	800b390 <_dtoa_r+0xa20>
 800b36e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b372:	d029      	beq.n	800b3c8 <_dtoa_r+0xa58>
 800b374:	9b08      	ldr	r3, [sp, #32]
 800b376:	2b00      	cmp	r3, #0
 800b378:	dd02      	ble.n	800b380 <_dtoa_r+0xa10>
 800b37a:	9b02      	ldr	r3, [sp, #8]
 800b37c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b380:	9b00      	ldr	r3, [sp, #0]
 800b382:	f883 8000 	strb.w	r8, [r3]
 800b386:	e63f      	b.n	800b008 <_dtoa_r+0x698>
 800b388:	4628      	mov	r0, r5
 800b38a:	e7bb      	b.n	800b304 <_dtoa_r+0x994>
 800b38c:	2201      	movs	r2, #1
 800b38e:	e7e1      	b.n	800b354 <_dtoa_r+0x9e4>
 800b390:	9b08      	ldr	r3, [sp, #32]
 800b392:	2b00      	cmp	r3, #0
 800b394:	db04      	blt.n	800b3a0 <_dtoa_r+0xa30>
 800b396:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b398:	430b      	orrs	r3, r1
 800b39a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b39c:	430b      	orrs	r3, r1
 800b39e:	d120      	bne.n	800b3e2 <_dtoa_r+0xa72>
 800b3a0:	2a00      	cmp	r2, #0
 800b3a2:	dded      	ble.n	800b380 <_dtoa_r+0xa10>
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	4658      	mov	r0, fp
 800b3aa:	f000 fbb3 	bl	800bb14 <__lshift>
 800b3ae:	4621      	mov	r1, r4
 800b3b0:	4681      	mov	r9, r0
 800b3b2:	f000 fc1b 	bl	800bbec <__mcmp>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	dc03      	bgt.n	800b3c2 <_dtoa_r+0xa52>
 800b3ba:	d1e1      	bne.n	800b380 <_dtoa_r+0xa10>
 800b3bc:	f018 0f01 	tst.w	r8, #1
 800b3c0:	d0de      	beq.n	800b380 <_dtoa_r+0xa10>
 800b3c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3c6:	d1d8      	bne.n	800b37a <_dtoa_r+0xa0a>
 800b3c8:	9a00      	ldr	r2, [sp, #0]
 800b3ca:	2339      	movs	r3, #57	@ 0x39
 800b3cc:	7013      	strb	r3, [r2, #0]
 800b3ce:	4633      	mov	r3, r6
 800b3d0:	461e      	mov	r6, r3
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b3d8:	2a39      	cmp	r2, #57	@ 0x39
 800b3da:	d052      	beq.n	800b482 <_dtoa_r+0xb12>
 800b3dc:	3201      	adds	r2, #1
 800b3de:	701a      	strb	r2, [r3, #0]
 800b3e0:	e612      	b.n	800b008 <_dtoa_r+0x698>
 800b3e2:	2a00      	cmp	r2, #0
 800b3e4:	dd07      	ble.n	800b3f6 <_dtoa_r+0xa86>
 800b3e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3ea:	d0ed      	beq.n	800b3c8 <_dtoa_r+0xa58>
 800b3ec:	9a00      	ldr	r2, [sp, #0]
 800b3ee:	f108 0301 	add.w	r3, r8, #1
 800b3f2:	7013      	strb	r3, [r2, #0]
 800b3f4:	e608      	b.n	800b008 <_dtoa_r+0x698>
 800b3f6:	9b07      	ldr	r3, [sp, #28]
 800b3f8:	9a07      	ldr	r2, [sp, #28]
 800b3fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b3fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b400:	4293      	cmp	r3, r2
 800b402:	d028      	beq.n	800b456 <_dtoa_r+0xae6>
 800b404:	4649      	mov	r1, r9
 800b406:	2300      	movs	r3, #0
 800b408:	220a      	movs	r2, #10
 800b40a:	4658      	mov	r0, fp
 800b40c:	f000 f9d6 	bl	800b7bc <__multadd>
 800b410:	42af      	cmp	r7, r5
 800b412:	4681      	mov	r9, r0
 800b414:	f04f 0300 	mov.w	r3, #0
 800b418:	f04f 020a 	mov.w	r2, #10
 800b41c:	4639      	mov	r1, r7
 800b41e:	4658      	mov	r0, fp
 800b420:	d107      	bne.n	800b432 <_dtoa_r+0xac2>
 800b422:	f000 f9cb 	bl	800b7bc <__multadd>
 800b426:	4607      	mov	r7, r0
 800b428:	4605      	mov	r5, r0
 800b42a:	9b07      	ldr	r3, [sp, #28]
 800b42c:	3301      	adds	r3, #1
 800b42e:	9307      	str	r3, [sp, #28]
 800b430:	e774      	b.n	800b31c <_dtoa_r+0x9ac>
 800b432:	f000 f9c3 	bl	800b7bc <__multadd>
 800b436:	4629      	mov	r1, r5
 800b438:	4607      	mov	r7, r0
 800b43a:	2300      	movs	r3, #0
 800b43c:	220a      	movs	r2, #10
 800b43e:	4658      	mov	r0, fp
 800b440:	f000 f9bc 	bl	800b7bc <__multadd>
 800b444:	4605      	mov	r5, r0
 800b446:	e7f0      	b.n	800b42a <_dtoa_r+0xaba>
 800b448:	9b00      	ldr	r3, [sp, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	bfcc      	ite	gt
 800b44e:	461e      	movgt	r6, r3
 800b450:	2601      	movle	r6, #1
 800b452:	4456      	add	r6, sl
 800b454:	2700      	movs	r7, #0
 800b456:	4649      	mov	r1, r9
 800b458:	2201      	movs	r2, #1
 800b45a:	4658      	mov	r0, fp
 800b45c:	f000 fb5a 	bl	800bb14 <__lshift>
 800b460:	4621      	mov	r1, r4
 800b462:	4681      	mov	r9, r0
 800b464:	f000 fbc2 	bl	800bbec <__mcmp>
 800b468:	2800      	cmp	r0, #0
 800b46a:	dcb0      	bgt.n	800b3ce <_dtoa_r+0xa5e>
 800b46c:	d102      	bne.n	800b474 <_dtoa_r+0xb04>
 800b46e:	f018 0f01 	tst.w	r8, #1
 800b472:	d1ac      	bne.n	800b3ce <_dtoa_r+0xa5e>
 800b474:	4633      	mov	r3, r6
 800b476:	461e      	mov	r6, r3
 800b478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b47c:	2a30      	cmp	r2, #48	@ 0x30
 800b47e:	d0fa      	beq.n	800b476 <_dtoa_r+0xb06>
 800b480:	e5c2      	b.n	800b008 <_dtoa_r+0x698>
 800b482:	459a      	cmp	sl, r3
 800b484:	d1a4      	bne.n	800b3d0 <_dtoa_r+0xa60>
 800b486:	9b04      	ldr	r3, [sp, #16]
 800b488:	3301      	adds	r3, #1
 800b48a:	9304      	str	r3, [sp, #16]
 800b48c:	2331      	movs	r3, #49	@ 0x31
 800b48e:	f88a 3000 	strb.w	r3, [sl]
 800b492:	e5b9      	b.n	800b008 <_dtoa_r+0x698>
 800b494:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b496:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b4f4 <_dtoa_r+0xb84>
 800b49a:	b11b      	cbz	r3, 800b4a4 <_dtoa_r+0xb34>
 800b49c:	f10a 0308 	add.w	r3, sl, #8
 800b4a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b4a2:	6013      	str	r3, [r2, #0]
 800b4a4:	4650      	mov	r0, sl
 800b4a6:	b019      	add	sp, #100	@ 0x64
 800b4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	f77f ae37 	ble.w	800b122 <_dtoa_r+0x7b2>
 800b4b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4b8:	2001      	movs	r0, #1
 800b4ba:	e655      	b.n	800b168 <_dtoa_r+0x7f8>
 800b4bc:	9b00      	ldr	r3, [sp, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f77f aed6 	ble.w	800b270 <_dtoa_r+0x900>
 800b4c4:	4656      	mov	r6, sl
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	4648      	mov	r0, r9
 800b4ca:	f7ff f9c8 	bl	800a85e <quorem>
 800b4ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b4d2:	f806 8b01 	strb.w	r8, [r6], #1
 800b4d6:	9b00      	ldr	r3, [sp, #0]
 800b4d8:	eba6 020a 	sub.w	r2, r6, sl
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	ddb3      	ble.n	800b448 <_dtoa_r+0xad8>
 800b4e0:	4649      	mov	r1, r9
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	220a      	movs	r2, #10
 800b4e6:	4658      	mov	r0, fp
 800b4e8:	f000 f968 	bl	800b7bc <__multadd>
 800b4ec:	4681      	mov	r9, r0
 800b4ee:	e7ea      	b.n	800b4c6 <_dtoa_r+0xb56>
 800b4f0:	0800dc40 	.word	0x0800dc40
 800b4f4:	0800dbc4 	.word	0x0800dbc4

0800b4f8 <_free_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	4605      	mov	r5, r0
 800b4fc:	2900      	cmp	r1, #0
 800b4fe:	d041      	beq.n	800b584 <_free_r+0x8c>
 800b500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b504:	1f0c      	subs	r4, r1, #4
 800b506:	2b00      	cmp	r3, #0
 800b508:	bfb8      	it	lt
 800b50a:	18e4      	addlt	r4, r4, r3
 800b50c:	f000 f8e8 	bl	800b6e0 <__malloc_lock>
 800b510:	4a1d      	ldr	r2, [pc, #116]	@ (800b588 <_free_r+0x90>)
 800b512:	6813      	ldr	r3, [r2, #0]
 800b514:	b933      	cbnz	r3, 800b524 <_free_r+0x2c>
 800b516:	6063      	str	r3, [r4, #4]
 800b518:	6014      	str	r4, [r2, #0]
 800b51a:	4628      	mov	r0, r5
 800b51c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b520:	f000 b8e4 	b.w	800b6ec <__malloc_unlock>
 800b524:	42a3      	cmp	r3, r4
 800b526:	d908      	bls.n	800b53a <_free_r+0x42>
 800b528:	6820      	ldr	r0, [r4, #0]
 800b52a:	1821      	adds	r1, r4, r0
 800b52c:	428b      	cmp	r3, r1
 800b52e:	bf01      	itttt	eq
 800b530:	6819      	ldreq	r1, [r3, #0]
 800b532:	685b      	ldreq	r3, [r3, #4]
 800b534:	1809      	addeq	r1, r1, r0
 800b536:	6021      	streq	r1, [r4, #0]
 800b538:	e7ed      	b.n	800b516 <_free_r+0x1e>
 800b53a:	461a      	mov	r2, r3
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	b10b      	cbz	r3, 800b544 <_free_r+0x4c>
 800b540:	42a3      	cmp	r3, r4
 800b542:	d9fa      	bls.n	800b53a <_free_r+0x42>
 800b544:	6811      	ldr	r1, [r2, #0]
 800b546:	1850      	adds	r0, r2, r1
 800b548:	42a0      	cmp	r0, r4
 800b54a:	d10b      	bne.n	800b564 <_free_r+0x6c>
 800b54c:	6820      	ldr	r0, [r4, #0]
 800b54e:	4401      	add	r1, r0
 800b550:	1850      	adds	r0, r2, r1
 800b552:	4283      	cmp	r3, r0
 800b554:	6011      	str	r1, [r2, #0]
 800b556:	d1e0      	bne.n	800b51a <_free_r+0x22>
 800b558:	6818      	ldr	r0, [r3, #0]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	6053      	str	r3, [r2, #4]
 800b55e:	4408      	add	r0, r1
 800b560:	6010      	str	r0, [r2, #0]
 800b562:	e7da      	b.n	800b51a <_free_r+0x22>
 800b564:	d902      	bls.n	800b56c <_free_r+0x74>
 800b566:	230c      	movs	r3, #12
 800b568:	602b      	str	r3, [r5, #0]
 800b56a:	e7d6      	b.n	800b51a <_free_r+0x22>
 800b56c:	6820      	ldr	r0, [r4, #0]
 800b56e:	1821      	adds	r1, r4, r0
 800b570:	428b      	cmp	r3, r1
 800b572:	bf04      	itt	eq
 800b574:	6819      	ldreq	r1, [r3, #0]
 800b576:	685b      	ldreq	r3, [r3, #4]
 800b578:	6063      	str	r3, [r4, #4]
 800b57a:	bf04      	itt	eq
 800b57c:	1809      	addeq	r1, r1, r0
 800b57e:	6021      	streq	r1, [r4, #0]
 800b580:	6054      	str	r4, [r2, #4]
 800b582:	e7ca      	b.n	800b51a <_free_r+0x22>
 800b584:	bd38      	pop	{r3, r4, r5, pc}
 800b586:	bf00      	nop
 800b588:	200021a0 	.word	0x200021a0

0800b58c <malloc>:
 800b58c:	4b02      	ldr	r3, [pc, #8]	@ (800b598 <malloc+0xc>)
 800b58e:	4601      	mov	r1, r0
 800b590:	6818      	ldr	r0, [r3, #0]
 800b592:	f000 b825 	b.w	800b5e0 <_malloc_r>
 800b596:	bf00      	nop
 800b598:	20000108 	.word	0x20000108

0800b59c <sbrk_aligned>:
 800b59c:	b570      	push	{r4, r5, r6, lr}
 800b59e:	4e0f      	ldr	r6, [pc, #60]	@ (800b5dc <sbrk_aligned+0x40>)
 800b5a0:	460c      	mov	r4, r1
 800b5a2:	6831      	ldr	r1, [r6, #0]
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	b911      	cbnz	r1, 800b5ae <sbrk_aligned+0x12>
 800b5a8:	f000 fe46 	bl	800c238 <_sbrk_r>
 800b5ac:	6030      	str	r0, [r6, #0]
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	f000 fe41 	bl	800c238 <_sbrk_r>
 800b5b6:	1c43      	adds	r3, r0, #1
 800b5b8:	d103      	bne.n	800b5c2 <sbrk_aligned+0x26>
 800b5ba:	f04f 34ff 	mov.w	r4, #4294967295
 800b5be:	4620      	mov	r0, r4
 800b5c0:	bd70      	pop	{r4, r5, r6, pc}
 800b5c2:	1cc4      	adds	r4, r0, #3
 800b5c4:	f024 0403 	bic.w	r4, r4, #3
 800b5c8:	42a0      	cmp	r0, r4
 800b5ca:	d0f8      	beq.n	800b5be <sbrk_aligned+0x22>
 800b5cc:	1a21      	subs	r1, r4, r0
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f000 fe32 	bl	800c238 <_sbrk_r>
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	d1f2      	bne.n	800b5be <sbrk_aligned+0x22>
 800b5d8:	e7ef      	b.n	800b5ba <sbrk_aligned+0x1e>
 800b5da:	bf00      	nop
 800b5dc:	2000219c 	.word	0x2000219c

0800b5e0 <_malloc_r>:
 800b5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e4:	1ccd      	adds	r5, r1, #3
 800b5e6:	f025 0503 	bic.w	r5, r5, #3
 800b5ea:	3508      	adds	r5, #8
 800b5ec:	2d0c      	cmp	r5, #12
 800b5ee:	bf38      	it	cc
 800b5f0:	250c      	movcc	r5, #12
 800b5f2:	2d00      	cmp	r5, #0
 800b5f4:	4606      	mov	r6, r0
 800b5f6:	db01      	blt.n	800b5fc <_malloc_r+0x1c>
 800b5f8:	42a9      	cmp	r1, r5
 800b5fa:	d904      	bls.n	800b606 <_malloc_r+0x26>
 800b5fc:	230c      	movs	r3, #12
 800b5fe:	6033      	str	r3, [r6, #0]
 800b600:	2000      	movs	r0, #0
 800b602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6dc <_malloc_r+0xfc>
 800b60a:	f000 f869 	bl	800b6e0 <__malloc_lock>
 800b60e:	f8d8 3000 	ldr.w	r3, [r8]
 800b612:	461c      	mov	r4, r3
 800b614:	bb44      	cbnz	r4, 800b668 <_malloc_r+0x88>
 800b616:	4629      	mov	r1, r5
 800b618:	4630      	mov	r0, r6
 800b61a:	f7ff ffbf 	bl	800b59c <sbrk_aligned>
 800b61e:	1c43      	adds	r3, r0, #1
 800b620:	4604      	mov	r4, r0
 800b622:	d158      	bne.n	800b6d6 <_malloc_r+0xf6>
 800b624:	f8d8 4000 	ldr.w	r4, [r8]
 800b628:	4627      	mov	r7, r4
 800b62a:	2f00      	cmp	r7, #0
 800b62c:	d143      	bne.n	800b6b6 <_malloc_r+0xd6>
 800b62e:	2c00      	cmp	r4, #0
 800b630:	d04b      	beq.n	800b6ca <_malloc_r+0xea>
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	4639      	mov	r1, r7
 800b636:	4630      	mov	r0, r6
 800b638:	eb04 0903 	add.w	r9, r4, r3
 800b63c:	f000 fdfc 	bl	800c238 <_sbrk_r>
 800b640:	4581      	cmp	r9, r0
 800b642:	d142      	bne.n	800b6ca <_malloc_r+0xea>
 800b644:	6821      	ldr	r1, [r4, #0]
 800b646:	1a6d      	subs	r5, r5, r1
 800b648:	4629      	mov	r1, r5
 800b64a:	4630      	mov	r0, r6
 800b64c:	f7ff ffa6 	bl	800b59c <sbrk_aligned>
 800b650:	3001      	adds	r0, #1
 800b652:	d03a      	beq.n	800b6ca <_malloc_r+0xea>
 800b654:	6823      	ldr	r3, [r4, #0]
 800b656:	442b      	add	r3, r5
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	f8d8 3000 	ldr.w	r3, [r8]
 800b65e:	685a      	ldr	r2, [r3, #4]
 800b660:	bb62      	cbnz	r2, 800b6bc <_malloc_r+0xdc>
 800b662:	f8c8 7000 	str.w	r7, [r8]
 800b666:	e00f      	b.n	800b688 <_malloc_r+0xa8>
 800b668:	6822      	ldr	r2, [r4, #0]
 800b66a:	1b52      	subs	r2, r2, r5
 800b66c:	d420      	bmi.n	800b6b0 <_malloc_r+0xd0>
 800b66e:	2a0b      	cmp	r2, #11
 800b670:	d917      	bls.n	800b6a2 <_malloc_r+0xc2>
 800b672:	1961      	adds	r1, r4, r5
 800b674:	42a3      	cmp	r3, r4
 800b676:	6025      	str	r5, [r4, #0]
 800b678:	bf18      	it	ne
 800b67a:	6059      	strne	r1, [r3, #4]
 800b67c:	6863      	ldr	r3, [r4, #4]
 800b67e:	bf08      	it	eq
 800b680:	f8c8 1000 	streq.w	r1, [r8]
 800b684:	5162      	str	r2, [r4, r5]
 800b686:	604b      	str	r3, [r1, #4]
 800b688:	4630      	mov	r0, r6
 800b68a:	f000 f82f 	bl	800b6ec <__malloc_unlock>
 800b68e:	f104 000b 	add.w	r0, r4, #11
 800b692:	1d23      	adds	r3, r4, #4
 800b694:	f020 0007 	bic.w	r0, r0, #7
 800b698:	1ac2      	subs	r2, r0, r3
 800b69a:	bf1c      	itt	ne
 800b69c:	1a1b      	subne	r3, r3, r0
 800b69e:	50a3      	strne	r3, [r4, r2]
 800b6a0:	e7af      	b.n	800b602 <_malloc_r+0x22>
 800b6a2:	6862      	ldr	r2, [r4, #4]
 800b6a4:	42a3      	cmp	r3, r4
 800b6a6:	bf0c      	ite	eq
 800b6a8:	f8c8 2000 	streq.w	r2, [r8]
 800b6ac:	605a      	strne	r2, [r3, #4]
 800b6ae:	e7eb      	b.n	800b688 <_malloc_r+0xa8>
 800b6b0:	4623      	mov	r3, r4
 800b6b2:	6864      	ldr	r4, [r4, #4]
 800b6b4:	e7ae      	b.n	800b614 <_malloc_r+0x34>
 800b6b6:	463c      	mov	r4, r7
 800b6b8:	687f      	ldr	r7, [r7, #4]
 800b6ba:	e7b6      	b.n	800b62a <_malloc_r+0x4a>
 800b6bc:	461a      	mov	r2, r3
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	42a3      	cmp	r3, r4
 800b6c2:	d1fb      	bne.n	800b6bc <_malloc_r+0xdc>
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	6053      	str	r3, [r2, #4]
 800b6c8:	e7de      	b.n	800b688 <_malloc_r+0xa8>
 800b6ca:	230c      	movs	r3, #12
 800b6cc:	6033      	str	r3, [r6, #0]
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f000 f80c 	bl	800b6ec <__malloc_unlock>
 800b6d4:	e794      	b.n	800b600 <_malloc_r+0x20>
 800b6d6:	6005      	str	r5, [r0, #0]
 800b6d8:	e7d6      	b.n	800b688 <_malloc_r+0xa8>
 800b6da:	bf00      	nop
 800b6dc:	200021a0 	.word	0x200021a0

0800b6e0 <__malloc_lock>:
 800b6e0:	4801      	ldr	r0, [pc, #4]	@ (800b6e8 <__malloc_lock+0x8>)
 800b6e2:	f7ff b8ba 	b.w	800a85a <__retarget_lock_acquire_recursive>
 800b6e6:	bf00      	nop
 800b6e8:	20002198 	.word	0x20002198

0800b6ec <__malloc_unlock>:
 800b6ec:	4801      	ldr	r0, [pc, #4]	@ (800b6f4 <__malloc_unlock+0x8>)
 800b6ee:	f7ff b8b5 	b.w	800a85c <__retarget_lock_release_recursive>
 800b6f2:	bf00      	nop
 800b6f4:	20002198 	.word	0x20002198

0800b6f8 <_Balloc>:
 800b6f8:	b570      	push	{r4, r5, r6, lr}
 800b6fa:	69c6      	ldr	r6, [r0, #28]
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	460d      	mov	r5, r1
 800b700:	b976      	cbnz	r6, 800b720 <_Balloc+0x28>
 800b702:	2010      	movs	r0, #16
 800b704:	f7ff ff42 	bl	800b58c <malloc>
 800b708:	4602      	mov	r2, r0
 800b70a:	61e0      	str	r0, [r4, #28]
 800b70c:	b920      	cbnz	r0, 800b718 <_Balloc+0x20>
 800b70e:	4b18      	ldr	r3, [pc, #96]	@ (800b770 <_Balloc+0x78>)
 800b710:	4818      	ldr	r0, [pc, #96]	@ (800b774 <_Balloc+0x7c>)
 800b712:	216b      	movs	r1, #107	@ 0x6b
 800b714:	f000 fdae 	bl	800c274 <__assert_func>
 800b718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b71c:	6006      	str	r6, [r0, #0]
 800b71e:	60c6      	str	r6, [r0, #12]
 800b720:	69e6      	ldr	r6, [r4, #28]
 800b722:	68f3      	ldr	r3, [r6, #12]
 800b724:	b183      	cbz	r3, 800b748 <_Balloc+0x50>
 800b726:	69e3      	ldr	r3, [r4, #28]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b72e:	b9b8      	cbnz	r0, 800b760 <_Balloc+0x68>
 800b730:	2101      	movs	r1, #1
 800b732:	fa01 f605 	lsl.w	r6, r1, r5
 800b736:	1d72      	adds	r2, r6, #5
 800b738:	0092      	lsls	r2, r2, #2
 800b73a:	4620      	mov	r0, r4
 800b73c:	f000 fdb8 	bl	800c2b0 <_calloc_r>
 800b740:	b160      	cbz	r0, 800b75c <_Balloc+0x64>
 800b742:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b746:	e00e      	b.n	800b766 <_Balloc+0x6e>
 800b748:	2221      	movs	r2, #33	@ 0x21
 800b74a:	2104      	movs	r1, #4
 800b74c:	4620      	mov	r0, r4
 800b74e:	f000 fdaf 	bl	800c2b0 <_calloc_r>
 800b752:	69e3      	ldr	r3, [r4, #28]
 800b754:	60f0      	str	r0, [r6, #12]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1e4      	bne.n	800b726 <_Balloc+0x2e>
 800b75c:	2000      	movs	r0, #0
 800b75e:	bd70      	pop	{r4, r5, r6, pc}
 800b760:	6802      	ldr	r2, [r0, #0]
 800b762:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b766:	2300      	movs	r3, #0
 800b768:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b76c:	e7f7      	b.n	800b75e <_Balloc+0x66>
 800b76e:	bf00      	nop
 800b770:	0800dbd1 	.word	0x0800dbd1
 800b774:	0800dc51 	.word	0x0800dc51

0800b778 <_Bfree>:
 800b778:	b570      	push	{r4, r5, r6, lr}
 800b77a:	69c6      	ldr	r6, [r0, #28]
 800b77c:	4605      	mov	r5, r0
 800b77e:	460c      	mov	r4, r1
 800b780:	b976      	cbnz	r6, 800b7a0 <_Bfree+0x28>
 800b782:	2010      	movs	r0, #16
 800b784:	f7ff ff02 	bl	800b58c <malloc>
 800b788:	4602      	mov	r2, r0
 800b78a:	61e8      	str	r0, [r5, #28]
 800b78c:	b920      	cbnz	r0, 800b798 <_Bfree+0x20>
 800b78e:	4b09      	ldr	r3, [pc, #36]	@ (800b7b4 <_Bfree+0x3c>)
 800b790:	4809      	ldr	r0, [pc, #36]	@ (800b7b8 <_Bfree+0x40>)
 800b792:	218f      	movs	r1, #143	@ 0x8f
 800b794:	f000 fd6e 	bl	800c274 <__assert_func>
 800b798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b79c:	6006      	str	r6, [r0, #0]
 800b79e:	60c6      	str	r6, [r0, #12]
 800b7a0:	b13c      	cbz	r4, 800b7b2 <_Bfree+0x3a>
 800b7a2:	69eb      	ldr	r3, [r5, #28]
 800b7a4:	6862      	ldr	r2, [r4, #4]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7ac:	6021      	str	r1, [r4, #0]
 800b7ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7b2:	bd70      	pop	{r4, r5, r6, pc}
 800b7b4:	0800dbd1 	.word	0x0800dbd1
 800b7b8:	0800dc51 	.word	0x0800dc51

0800b7bc <__multadd>:
 800b7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c0:	690d      	ldr	r5, [r1, #16]
 800b7c2:	4607      	mov	r7, r0
 800b7c4:	460c      	mov	r4, r1
 800b7c6:	461e      	mov	r6, r3
 800b7c8:	f101 0c14 	add.w	ip, r1, #20
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	f8dc 3000 	ldr.w	r3, [ip]
 800b7d2:	b299      	uxth	r1, r3
 800b7d4:	fb02 6101 	mla	r1, r2, r1, r6
 800b7d8:	0c1e      	lsrs	r6, r3, #16
 800b7da:	0c0b      	lsrs	r3, r1, #16
 800b7dc:	fb02 3306 	mla	r3, r2, r6, r3
 800b7e0:	b289      	uxth	r1, r1
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b7e8:	4285      	cmp	r5, r0
 800b7ea:	f84c 1b04 	str.w	r1, [ip], #4
 800b7ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7f2:	dcec      	bgt.n	800b7ce <__multadd+0x12>
 800b7f4:	b30e      	cbz	r6, 800b83a <__multadd+0x7e>
 800b7f6:	68a3      	ldr	r3, [r4, #8]
 800b7f8:	42ab      	cmp	r3, r5
 800b7fa:	dc19      	bgt.n	800b830 <__multadd+0x74>
 800b7fc:	6861      	ldr	r1, [r4, #4]
 800b7fe:	4638      	mov	r0, r7
 800b800:	3101      	adds	r1, #1
 800b802:	f7ff ff79 	bl	800b6f8 <_Balloc>
 800b806:	4680      	mov	r8, r0
 800b808:	b928      	cbnz	r0, 800b816 <__multadd+0x5a>
 800b80a:	4602      	mov	r2, r0
 800b80c:	4b0c      	ldr	r3, [pc, #48]	@ (800b840 <__multadd+0x84>)
 800b80e:	480d      	ldr	r0, [pc, #52]	@ (800b844 <__multadd+0x88>)
 800b810:	21ba      	movs	r1, #186	@ 0xba
 800b812:	f000 fd2f 	bl	800c274 <__assert_func>
 800b816:	6922      	ldr	r2, [r4, #16]
 800b818:	3202      	adds	r2, #2
 800b81a:	f104 010c 	add.w	r1, r4, #12
 800b81e:	0092      	lsls	r2, r2, #2
 800b820:	300c      	adds	r0, #12
 800b822:	f000 fd19 	bl	800c258 <memcpy>
 800b826:	4621      	mov	r1, r4
 800b828:	4638      	mov	r0, r7
 800b82a:	f7ff ffa5 	bl	800b778 <_Bfree>
 800b82e:	4644      	mov	r4, r8
 800b830:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b834:	3501      	adds	r5, #1
 800b836:	615e      	str	r6, [r3, #20]
 800b838:	6125      	str	r5, [r4, #16]
 800b83a:	4620      	mov	r0, r4
 800b83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b840:	0800dc40 	.word	0x0800dc40
 800b844:	0800dc51 	.word	0x0800dc51

0800b848 <__hi0bits>:
 800b848:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b84c:	4603      	mov	r3, r0
 800b84e:	bf36      	itet	cc
 800b850:	0403      	lslcc	r3, r0, #16
 800b852:	2000      	movcs	r0, #0
 800b854:	2010      	movcc	r0, #16
 800b856:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b85a:	bf3c      	itt	cc
 800b85c:	021b      	lslcc	r3, r3, #8
 800b85e:	3008      	addcc	r0, #8
 800b860:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b864:	bf3c      	itt	cc
 800b866:	011b      	lslcc	r3, r3, #4
 800b868:	3004      	addcc	r0, #4
 800b86a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b86e:	bf3c      	itt	cc
 800b870:	009b      	lslcc	r3, r3, #2
 800b872:	3002      	addcc	r0, #2
 800b874:	2b00      	cmp	r3, #0
 800b876:	db05      	blt.n	800b884 <__hi0bits+0x3c>
 800b878:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b87c:	f100 0001 	add.w	r0, r0, #1
 800b880:	bf08      	it	eq
 800b882:	2020      	moveq	r0, #32
 800b884:	4770      	bx	lr

0800b886 <__lo0bits>:
 800b886:	6803      	ldr	r3, [r0, #0]
 800b888:	4602      	mov	r2, r0
 800b88a:	f013 0007 	ands.w	r0, r3, #7
 800b88e:	d00b      	beq.n	800b8a8 <__lo0bits+0x22>
 800b890:	07d9      	lsls	r1, r3, #31
 800b892:	d421      	bmi.n	800b8d8 <__lo0bits+0x52>
 800b894:	0798      	lsls	r0, r3, #30
 800b896:	bf49      	itett	mi
 800b898:	085b      	lsrmi	r3, r3, #1
 800b89a:	089b      	lsrpl	r3, r3, #2
 800b89c:	2001      	movmi	r0, #1
 800b89e:	6013      	strmi	r3, [r2, #0]
 800b8a0:	bf5c      	itt	pl
 800b8a2:	6013      	strpl	r3, [r2, #0]
 800b8a4:	2002      	movpl	r0, #2
 800b8a6:	4770      	bx	lr
 800b8a8:	b299      	uxth	r1, r3
 800b8aa:	b909      	cbnz	r1, 800b8b0 <__lo0bits+0x2a>
 800b8ac:	0c1b      	lsrs	r3, r3, #16
 800b8ae:	2010      	movs	r0, #16
 800b8b0:	b2d9      	uxtb	r1, r3
 800b8b2:	b909      	cbnz	r1, 800b8b8 <__lo0bits+0x32>
 800b8b4:	3008      	adds	r0, #8
 800b8b6:	0a1b      	lsrs	r3, r3, #8
 800b8b8:	0719      	lsls	r1, r3, #28
 800b8ba:	bf04      	itt	eq
 800b8bc:	091b      	lsreq	r3, r3, #4
 800b8be:	3004      	addeq	r0, #4
 800b8c0:	0799      	lsls	r1, r3, #30
 800b8c2:	bf04      	itt	eq
 800b8c4:	089b      	lsreq	r3, r3, #2
 800b8c6:	3002      	addeq	r0, #2
 800b8c8:	07d9      	lsls	r1, r3, #31
 800b8ca:	d403      	bmi.n	800b8d4 <__lo0bits+0x4e>
 800b8cc:	085b      	lsrs	r3, r3, #1
 800b8ce:	f100 0001 	add.w	r0, r0, #1
 800b8d2:	d003      	beq.n	800b8dc <__lo0bits+0x56>
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	4770      	bx	lr
 800b8d8:	2000      	movs	r0, #0
 800b8da:	4770      	bx	lr
 800b8dc:	2020      	movs	r0, #32
 800b8de:	4770      	bx	lr

0800b8e0 <__i2b>:
 800b8e0:	b510      	push	{r4, lr}
 800b8e2:	460c      	mov	r4, r1
 800b8e4:	2101      	movs	r1, #1
 800b8e6:	f7ff ff07 	bl	800b6f8 <_Balloc>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	b928      	cbnz	r0, 800b8fa <__i2b+0x1a>
 800b8ee:	4b05      	ldr	r3, [pc, #20]	@ (800b904 <__i2b+0x24>)
 800b8f0:	4805      	ldr	r0, [pc, #20]	@ (800b908 <__i2b+0x28>)
 800b8f2:	f240 1145 	movw	r1, #325	@ 0x145
 800b8f6:	f000 fcbd 	bl	800c274 <__assert_func>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	6144      	str	r4, [r0, #20]
 800b8fe:	6103      	str	r3, [r0, #16]
 800b900:	bd10      	pop	{r4, pc}
 800b902:	bf00      	nop
 800b904:	0800dc40 	.word	0x0800dc40
 800b908:	0800dc51 	.word	0x0800dc51

0800b90c <__multiply>:
 800b90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b910:	4614      	mov	r4, r2
 800b912:	690a      	ldr	r2, [r1, #16]
 800b914:	6923      	ldr	r3, [r4, #16]
 800b916:	429a      	cmp	r2, r3
 800b918:	bfa8      	it	ge
 800b91a:	4623      	movge	r3, r4
 800b91c:	460f      	mov	r7, r1
 800b91e:	bfa4      	itt	ge
 800b920:	460c      	movge	r4, r1
 800b922:	461f      	movge	r7, r3
 800b924:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b928:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b92c:	68a3      	ldr	r3, [r4, #8]
 800b92e:	6861      	ldr	r1, [r4, #4]
 800b930:	eb0a 0609 	add.w	r6, sl, r9
 800b934:	42b3      	cmp	r3, r6
 800b936:	b085      	sub	sp, #20
 800b938:	bfb8      	it	lt
 800b93a:	3101      	addlt	r1, #1
 800b93c:	f7ff fedc 	bl	800b6f8 <_Balloc>
 800b940:	b930      	cbnz	r0, 800b950 <__multiply+0x44>
 800b942:	4602      	mov	r2, r0
 800b944:	4b44      	ldr	r3, [pc, #272]	@ (800ba58 <__multiply+0x14c>)
 800b946:	4845      	ldr	r0, [pc, #276]	@ (800ba5c <__multiply+0x150>)
 800b948:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b94c:	f000 fc92 	bl	800c274 <__assert_func>
 800b950:	f100 0514 	add.w	r5, r0, #20
 800b954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b958:	462b      	mov	r3, r5
 800b95a:	2200      	movs	r2, #0
 800b95c:	4543      	cmp	r3, r8
 800b95e:	d321      	bcc.n	800b9a4 <__multiply+0x98>
 800b960:	f107 0114 	add.w	r1, r7, #20
 800b964:	f104 0214 	add.w	r2, r4, #20
 800b968:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b96c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b970:	9302      	str	r3, [sp, #8]
 800b972:	1b13      	subs	r3, r2, r4
 800b974:	3b15      	subs	r3, #21
 800b976:	f023 0303 	bic.w	r3, r3, #3
 800b97a:	3304      	adds	r3, #4
 800b97c:	f104 0715 	add.w	r7, r4, #21
 800b980:	42ba      	cmp	r2, r7
 800b982:	bf38      	it	cc
 800b984:	2304      	movcc	r3, #4
 800b986:	9301      	str	r3, [sp, #4]
 800b988:	9b02      	ldr	r3, [sp, #8]
 800b98a:	9103      	str	r1, [sp, #12]
 800b98c:	428b      	cmp	r3, r1
 800b98e:	d80c      	bhi.n	800b9aa <__multiply+0x9e>
 800b990:	2e00      	cmp	r6, #0
 800b992:	dd03      	ble.n	800b99c <__multiply+0x90>
 800b994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d05b      	beq.n	800ba54 <__multiply+0x148>
 800b99c:	6106      	str	r6, [r0, #16]
 800b99e:	b005      	add	sp, #20
 800b9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a4:	f843 2b04 	str.w	r2, [r3], #4
 800b9a8:	e7d8      	b.n	800b95c <__multiply+0x50>
 800b9aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800b9ae:	f1ba 0f00 	cmp.w	sl, #0
 800b9b2:	d024      	beq.n	800b9fe <__multiply+0xf2>
 800b9b4:	f104 0e14 	add.w	lr, r4, #20
 800b9b8:	46a9      	mov	r9, r5
 800b9ba:	f04f 0c00 	mov.w	ip, #0
 800b9be:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b9c2:	f8d9 3000 	ldr.w	r3, [r9]
 800b9c6:	fa1f fb87 	uxth.w	fp, r7
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	fb0a 330b 	mla	r3, sl, fp, r3
 800b9d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b9d4:	f8d9 7000 	ldr.w	r7, [r9]
 800b9d8:	4463      	add	r3, ip
 800b9da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b9de:	fb0a c70b 	mla	r7, sl, fp, ip
 800b9e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b9ec:	4572      	cmp	r2, lr
 800b9ee:	f849 3b04 	str.w	r3, [r9], #4
 800b9f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b9f6:	d8e2      	bhi.n	800b9be <__multiply+0xb2>
 800b9f8:	9b01      	ldr	r3, [sp, #4]
 800b9fa:	f845 c003 	str.w	ip, [r5, r3]
 800b9fe:	9b03      	ldr	r3, [sp, #12]
 800ba00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ba04:	3104      	adds	r1, #4
 800ba06:	f1b9 0f00 	cmp.w	r9, #0
 800ba0a:	d021      	beq.n	800ba50 <__multiply+0x144>
 800ba0c:	682b      	ldr	r3, [r5, #0]
 800ba0e:	f104 0c14 	add.w	ip, r4, #20
 800ba12:	46ae      	mov	lr, r5
 800ba14:	f04f 0a00 	mov.w	sl, #0
 800ba18:	f8bc b000 	ldrh.w	fp, [ip]
 800ba1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ba20:	fb09 770b 	mla	r7, r9, fp, r7
 800ba24:	4457      	add	r7, sl
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ba2c:	f84e 3b04 	str.w	r3, [lr], #4
 800ba30:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba38:	f8be 3000 	ldrh.w	r3, [lr]
 800ba3c:	fb09 330a 	mla	r3, r9, sl, r3
 800ba40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ba44:	4562      	cmp	r2, ip
 800ba46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba4a:	d8e5      	bhi.n	800ba18 <__multiply+0x10c>
 800ba4c:	9f01      	ldr	r7, [sp, #4]
 800ba4e:	51eb      	str	r3, [r5, r7]
 800ba50:	3504      	adds	r5, #4
 800ba52:	e799      	b.n	800b988 <__multiply+0x7c>
 800ba54:	3e01      	subs	r6, #1
 800ba56:	e79b      	b.n	800b990 <__multiply+0x84>
 800ba58:	0800dc40 	.word	0x0800dc40
 800ba5c:	0800dc51 	.word	0x0800dc51

0800ba60 <__pow5mult>:
 800ba60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba64:	4615      	mov	r5, r2
 800ba66:	f012 0203 	ands.w	r2, r2, #3
 800ba6a:	4607      	mov	r7, r0
 800ba6c:	460e      	mov	r6, r1
 800ba6e:	d007      	beq.n	800ba80 <__pow5mult+0x20>
 800ba70:	4c25      	ldr	r4, [pc, #148]	@ (800bb08 <__pow5mult+0xa8>)
 800ba72:	3a01      	subs	r2, #1
 800ba74:	2300      	movs	r3, #0
 800ba76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba7a:	f7ff fe9f 	bl	800b7bc <__multadd>
 800ba7e:	4606      	mov	r6, r0
 800ba80:	10ad      	asrs	r5, r5, #2
 800ba82:	d03d      	beq.n	800bb00 <__pow5mult+0xa0>
 800ba84:	69fc      	ldr	r4, [r7, #28]
 800ba86:	b97c      	cbnz	r4, 800baa8 <__pow5mult+0x48>
 800ba88:	2010      	movs	r0, #16
 800ba8a:	f7ff fd7f 	bl	800b58c <malloc>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	61f8      	str	r0, [r7, #28]
 800ba92:	b928      	cbnz	r0, 800baa0 <__pow5mult+0x40>
 800ba94:	4b1d      	ldr	r3, [pc, #116]	@ (800bb0c <__pow5mult+0xac>)
 800ba96:	481e      	ldr	r0, [pc, #120]	@ (800bb10 <__pow5mult+0xb0>)
 800ba98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ba9c:	f000 fbea 	bl	800c274 <__assert_func>
 800baa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800baa4:	6004      	str	r4, [r0, #0]
 800baa6:	60c4      	str	r4, [r0, #12]
 800baa8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800baac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bab0:	b94c      	cbnz	r4, 800bac6 <__pow5mult+0x66>
 800bab2:	f240 2171 	movw	r1, #625	@ 0x271
 800bab6:	4638      	mov	r0, r7
 800bab8:	f7ff ff12 	bl	800b8e0 <__i2b>
 800babc:	2300      	movs	r3, #0
 800babe:	f8c8 0008 	str.w	r0, [r8, #8]
 800bac2:	4604      	mov	r4, r0
 800bac4:	6003      	str	r3, [r0, #0]
 800bac6:	f04f 0900 	mov.w	r9, #0
 800baca:	07eb      	lsls	r3, r5, #31
 800bacc:	d50a      	bpl.n	800bae4 <__pow5mult+0x84>
 800bace:	4631      	mov	r1, r6
 800bad0:	4622      	mov	r2, r4
 800bad2:	4638      	mov	r0, r7
 800bad4:	f7ff ff1a 	bl	800b90c <__multiply>
 800bad8:	4631      	mov	r1, r6
 800bada:	4680      	mov	r8, r0
 800badc:	4638      	mov	r0, r7
 800bade:	f7ff fe4b 	bl	800b778 <_Bfree>
 800bae2:	4646      	mov	r6, r8
 800bae4:	106d      	asrs	r5, r5, #1
 800bae6:	d00b      	beq.n	800bb00 <__pow5mult+0xa0>
 800bae8:	6820      	ldr	r0, [r4, #0]
 800baea:	b938      	cbnz	r0, 800bafc <__pow5mult+0x9c>
 800baec:	4622      	mov	r2, r4
 800baee:	4621      	mov	r1, r4
 800baf0:	4638      	mov	r0, r7
 800baf2:	f7ff ff0b 	bl	800b90c <__multiply>
 800baf6:	6020      	str	r0, [r4, #0]
 800baf8:	f8c0 9000 	str.w	r9, [r0]
 800bafc:	4604      	mov	r4, r0
 800bafe:	e7e4      	b.n	800baca <__pow5mult+0x6a>
 800bb00:	4630      	mov	r0, r6
 800bb02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb06:	bf00      	nop
 800bb08:	0800dcac 	.word	0x0800dcac
 800bb0c:	0800dbd1 	.word	0x0800dbd1
 800bb10:	0800dc51 	.word	0x0800dc51

0800bb14 <__lshift>:
 800bb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb18:	460c      	mov	r4, r1
 800bb1a:	6849      	ldr	r1, [r1, #4]
 800bb1c:	6923      	ldr	r3, [r4, #16]
 800bb1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb22:	68a3      	ldr	r3, [r4, #8]
 800bb24:	4607      	mov	r7, r0
 800bb26:	4691      	mov	r9, r2
 800bb28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb2c:	f108 0601 	add.w	r6, r8, #1
 800bb30:	42b3      	cmp	r3, r6
 800bb32:	db0b      	blt.n	800bb4c <__lshift+0x38>
 800bb34:	4638      	mov	r0, r7
 800bb36:	f7ff fddf 	bl	800b6f8 <_Balloc>
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	b948      	cbnz	r0, 800bb52 <__lshift+0x3e>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	4b28      	ldr	r3, [pc, #160]	@ (800bbe4 <__lshift+0xd0>)
 800bb42:	4829      	ldr	r0, [pc, #164]	@ (800bbe8 <__lshift+0xd4>)
 800bb44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bb48:	f000 fb94 	bl	800c274 <__assert_func>
 800bb4c:	3101      	adds	r1, #1
 800bb4e:	005b      	lsls	r3, r3, #1
 800bb50:	e7ee      	b.n	800bb30 <__lshift+0x1c>
 800bb52:	2300      	movs	r3, #0
 800bb54:	f100 0114 	add.w	r1, r0, #20
 800bb58:	f100 0210 	add.w	r2, r0, #16
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	4553      	cmp	r3, sl
 800bb60:	db33      	blt.n	800bbca <__lshift+0xb6>
 800bb62:	6920      	ldr	r0, [r4, #16]
 800bb64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb68:	f104 0314 	add.w	r3, r4, #20
 800bb6c:	f019 091f 	ands.w	r9, r9, #31
 800bb70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb78:	d02b      	beq.n	800bbd2 <__lshift+0xbe>
 800bb7a:	f1c9 0e20 	rsb	lr, r9, #32
 800bb7e:	468a      	mov	sl, r1
 800bb80:	2200      	movs	r2, #0
 800bb82:	6818      	ldr	r0, [r3, #0]
 800bb84:	fa00 f009 	lsl.w	r0, r0, r9
 800bb88:	4310      	orrs	r0, r2
 800bb8a:	f84a 0b04 	str.w	r0, [sl], #4
 800bb8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb92:	459c      	cmp	ip, r3
 800bb94:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb98:	d8f3      	bhi.n	800bb82 <__lshift+0x6e>
 800bb9a:	ebac 0304 	sub.w	r3, ip, r4
 800bb9e:	3b15      	subs	r3, #21
 800bba0:	f023 0303 	bic.w	r3, r3, #3
 800bba4:	3304      	adds	r3, #4
 800bba6:	f104 0015 	add.w	r0, r4, #21
 800bbaa:	4584      	cmp	ip, r0
 800bbac:	bf38      	it	cc
 800bbae:	2304      	movcc	r3, #4
 800bbb0:	50ca      	str	r2, [r1, r3]
 800bbb2:	b10a      	cbz	r2, 800bbb8 <__lshift+0xa4>
 800bbb4:	f108 0602 	add.w	r6, r8, #2
 800bbb8:	3e01      	subs	r6, #1
 800bbba:	4638      	mov	r0, r7
 800bbbc:	612e      	str	r6, [r5, #16]
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	f7ff fdda 	bl	800b778 <_Bfree>
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbca:	f842 0f04 	str.w	r0, [r2, #4]!
 800bbce:	3301      	adds	r3, #1
 800bbd0:	e7c5      	b.n	800bb5e <__lshift+0x4a>
 800bbd2:	3904      	subs	r1, #4
 800bbd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbd8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbdc:	459c      	cmp	ip, r3
 800bbde:	d8f9      	bhi.n	800bbd4 <__lshift+0xc0>
 800bbe0:	e7ea      	b.n	800bbb8 <__lshift+0xa4>
 800bbe2:	bf00      	nop
 800bbe4:	0800dc40 	.word	0x0800dc40
 800bbe8:	0800dc51 	.word	0x0800dc51

0800bbec <__mcmp>:
 800bbec:	690a      	ldr	r2, [r1, #16]
 800bbee:	4603      	mov	r3, r0
 800bbf0:	6900      	ldr	r0, [r0, #16]
 800bbf2:	1a80      	subs	r0, r0, r2
 800bbf4:	b530      	push	{r4, r5, lr}
 800bbf6:	d10e      	bne.n	800bc16 <__mcmp+0x2a>
 800bbf8:	3314      	adds	r3, #20
 800bbfa:	3114      	adds	r1, #20
 800bbfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bc00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bc04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bc0c:	4295      	cmp	r5, r2
 800bc0e:	d003      	beq.n	800bc18 <__mcmp+0x2c>
 800bc10:	d205      	bcs.n	800bc1e <__mcmp+0x32>
 800bc12:	f04f 30ff 	mov.w	r0, #4294967295
 800bc16:	bd30      	pop	{r4, r5, pc}
 800bc18:	42a3      	cmp	r3, r4
 800bc1a:	d3f3      	bcc.n	800bc04 <__mcmp+0x18>
 800bc1c:	e7fb      	b.n	800bc16 <__mcmp+0x2a>
 800bc1e:	2001      	movs	r0, #1
 800bc20:	e7f9      	b.n	800bc16 <__mcmp+0x2a>
	...

0800bc24 <__mdiff>:
 800bc24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc28:	4689      	mov	r9, r1
 800bc2a:	4606      	mov	r6, r0
 800bc2c:	4611      	mov	r1, r2
 800bc2e:	4648      	mov	r0, r9
 800bc30:	4614      	mov	r4, r2
 800bc32:	f7ff ffdb 	bl	800bbec <__mcmp>
 800bc36:	1e05      	subs	r5, r0, #0
 800bc38:	d112      	bne.n	800bc60 <__mdiff+0x3c>
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f7ff fd5b 	bl	800b6f8 <_Balloc>
 800bc42:	4602      	mov	r2, r0
 800bc44:	b928      	cbnz	r0, 800bc52 <__mdiff+0x2e>
 800bc46:	4b3f      	ldr	r3, [pc, #252]	@ (800bd44 <__mdiff+0x120>)
 800bc48:	f240 2137 	movw	r1, #567	@ 0x237
 800bc4c:	483e      	ldr	r0, [pc, #248]	@ (800bd48 <__mdiff+0x124>)
 800bc4e:	f000 fb11 	bl	800c274 <__assert_func>
 800bc52:	2301      	movs	r3, #1
 800bc54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc58:	4610      	mov	r0, r2
 800bc5a:	b003      	add	sp, #12
 800bc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc60:	bfbc      	itt	lt
 800bc62:	464b      	movlt	r3, r9
 800bc64:	46a1      	movlt	r9, r4
 800bc66:	4630      	mov	r0, r6
 800bc68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bc6c:	bfba      	itte	lt
 800bc6e:	461c      	movlt	r4, r3
 800bc70:	2501      	movlt	r5, #1
 800bc72:	2500      	movge	r5, #0
 800bc74:	f7ff fd40 	bl	800b6f8 <_Balloc>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	b918      	cbnz	r0, 800bc84 <__mdiff+0x60>
 800bc7c:	4b31      	ldr	r3, [pc, #196]	@ (800bd44 <__mdiff+0x120>)
 800bc7e:	f240 2145 	movw	r1, #581	@ 0x245
 800bc82:	e7e3      	b.n	800bc4c <__mdiff+0x28>
 800bc84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bc88:	6926      	ldr	r6, [r4, #16]
 800bc8a:	60c5      	str	r5, [r0, #12]
 800bc8c:	f109 0310 	add.w	r3, r9, #16
 800bc90:	f109 0514 	add.w	r5, r9, #20
 800bc94:	f104 0e14 	add.w	lr, r4, #20
 800bc98:	f100 0b14 	add.w	fp, r0, #20
 800bc9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bca0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bca4:	9301      	str	r3, [sp, #4]
 800bca6:	46d9      	mov	r9, fp
 800bca8:	f04f 0c00 	mov.w	ip, #0
 800bcac:	9b01      	ldr	r3, [sp, #4]
 800bcae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bcb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bcb6:	9301      	str	r3, [sp, #4]
 800bcb8:	fa1f f38a 	uxth.w	r3, sl
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	b283      	uxth	r3, r0
 800bcc0:	1acb      	subs	r3, r1, r3
 800bcc2:	0c00      	lsrs	r0, r0, #16
 800bcc4:	4463      	add	r3, ip
 800bcc6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bcca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bcd4:	4576      	cmp	r6, lr
 800bcd6:	f849 3b04 	str.w	r3, [r9], #4
 800bcda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bcde:	d8e5      	bhi.n	800bcac <__mdiff+0x88>
 800bce0:	1b33      	subs	r3, r6, r4
 800bce2:	3b15      	subs	r3, #21
 800bce4:	f023 0303 	bic.w	r3, r3, #3
 800bce8:	3415      	adds	r4, #21
 800bcea:	3304      	adds	r3, #4
 800bcec:	42a6      	cmp	r6, r4
 800bcee:	bf38      	it	cc
 800bcf0:	2304      	movcc	r3, #4
 800bcf2:	441d      	add	r5, r3
 800bcf4:	445b      	add	r3, fp
 800bcf6:	461e      	mov	r6, r3
 800bcf8:	462c      	mov	r4, r5
 800bcfa:	4544      	cmp	r4, r8
 800bcfc:	d30e      	bcc.n	800bd1c <__mdiff+0xf8>
 800bcfe:	f108 0103 	add.w	r1, r8, #3
 800bd02:	1b49      	subs	r1, r1, r5
 800bd04:	f021 0103 	bic.w	r1, r1, #3
 800bd08:	3d03      	subs	r5, #3
 800bd0a:	45a8      	cmp	r8, r5
 800bd0c:	bf38      	it	cc
 800bd0e:	2100      	movcc	r1, #0
 800bd10:	440b      	add	r3, r1
 800bd12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd16:	b191      	cbz	r1, 800bd3e <__mdiff+0x11a>
 800bd18:	6117      	str	r7, [r2, #16]
 800bd1a:	e79d      	b.n	800bc58 <__mdiff+0x34>
 800bd1c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bd20:	46e6      	mov	lr, ip
 800bd22:	0c08      	lsrs	r0, r1, #16
 800bd24:	fa1c fc81 	uxtah	ip, ip, r1
 800bd28:	4471      	add	r1, lr
 800bd2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bd2e:	b289      	uxth	r1, r1
 800bd30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bd34:	f846 1b04 	str.w	r1, [r6], #4
 800bd38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd3c:	e7dd      	b.n	800bcfa <__mdiff+0xd6>
 800bd3e:	3f01      	subs	r7, #1
 800bd40:	e7e7      	b.n	800bd12 <__mdiff+0xee>
 800bd42:	bf00      	nop
 800bd44:	0800dc40 	.word	0x0800dc40
 800bd48:	0800dc51 	.word	0x0800dc51

0800bd4c <__d2b>:
 800bd4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd50:	460f      	mov	r7, r1
 800bd52:	2101      	movs	r1, #1
 800bd54:	ec59 8b10 	vmov	r8, r9, d0
 800bd58:	4616      	mov	r6, r2
 800bd5a:	f7ff fccd 	bl	800b6f8 <_Balloc>
 800bd5e:	4604      	mov	r4, r0
 800bd60:	b930      	cbnz	r0, 800bd70 <__d2b+0x24>
 800bd62:	4602      	mov	r2, r0
 800bd64:	4b23      	ldr	r3, [pc, #140]	@ (800bdf4 <__d2b+0xa8>)
 800bd66:	4824      	ldr	r0, [pc, #144]	@ (800bdf8 <__d2b+0xac>)
 800bd68:	f240 310f 	movw	r1, #783	@ 0x30f
 800bd6c:	f000 fa82 	bl	800c274 <__assert_func>
 800bd70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd78:	b10d      	cbz	r5, 800bd7e <__d2b+0x32>
 800bd7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd7e:	9301      	str	r3, [sp, #4]
 800bd80:	f1b8 0300 	subs.w	r3, r8, #0
 800bd84:	d023      	beq.n	800bdce <__d2b+0x82>
 800bd86:	4668      	mov	r0, sp
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	f7ff fd7c 	bl	800b886 <__lo0bits>
 800bd8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd92:	b1d0      	cbz	r0, 800bdca <__d2b+0x7e>
 800bd94:	f1c0 0320 	rsb	r3, r0, #32
 800bd98:	fa02 f303 	lsl.w	r3, r2, r3
 800bd9c:	430b      	orrs	r3, r1
 800bd9e:	40c2      	lsrs	r2, r0
 800bda0:	6163      	str	r3, [r4, #20]
 800bda2:	9201      	str	r2, [sp, #4]
 800bda4:	9b01      	ldr	r3, [sp, #4]
 800bda6:	61a3      	str	r3, [r4, #24]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	bf0c      	ite	eq
 800bdac:	2201      	moveq	r2, #1
 800bdae:	2202      	movne	r2, #2
 800bdb0:	6122      	str	r2, [r4, #16]
 800bdb2:	b1a5      	cbz	r5, 800bdde <__d2b+0x92>
 800bdb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bdb8:	4405      	add	r5, r0
 800bdba:	603d      	str	r5, [r7, #0]
 800bdbc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bdc0:	6030      	str	r0, [r6, #0]
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	b003      	add	sp, #12
 800bdc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdca:	6161      	str	r1, [r4, #20]
 800bdcc:	e7ea      	b.n	800bda4 <__d2b+0x58>
 800bdce:	a801      	add	r0, sp, #4
 800bdd0:	f7ff fd59 	bl	800b886 <__lo0bits>
 800bdd4:	9b01      	ldr	r3, [sp, #4]
 800bdd6:	6163      	str	r3, [r4, #20]
 800bdd8:	3020      	adds	r0, #32
 800bdda:	2201      	movs	r2, #1
 800bddc:	e7e8      	b.n	800bdb0 <__d2b+0x64>
 800bdde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bde2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bde6:	6038      	str	r0, [r7, #0]
 800bde8:	6918      	ldr	r0, [r3, #16]
 800bdea:	f7ff fd2d 	bl	800b848 <__hi0bits>
 800bdee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bdf2:	e7e5      	b.n	800bdc0 <__d2b+0x74>
 800bdf4:	0800dc40 	.word	0x0800dc40
 800bdf8:	0800dc51 	.word	0x0800dc51

0800bdfc <__ssputs_r>:
 800bdfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be00:	688e      	ldr	r6, [r1, #8]
 800be02:	461f      	mov	r7, r3
 800be04:	42be      	cmp	r6, r7
 800be06:	680b      	ldr	r3, [r1, #0]
 800be08:	4682      	mov	sl, r0
 800be0a:	460c      	mov	r4, r1
 800be0c:	4690      	mov	r8, r2
 800be0e:	d82d      	bhi.n	800be6c <__ssputs_r+0x70>
 800be10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800be18:	d026      	beq.n	800be68 <__ssputs_r+0x6c>
 800be1a:	6965      	ldr	r5, [r4, #20]
 800be1c:	6909      	ldr	r1, [r1, #16]
 800be1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be22:	eba3 0901 	sub.w	r9, r3, r1
 800be26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be2a:	1c7b      	adds	r3, r7, #1
 800be2c:	444b      	add	r3, r9
 800be2e:	106d      	asrs	r5, r5, #1
 800be30:	429d      	cmp	r5, r3
 800be32:	bf38      	it	cc
 800be34:	461d      	movcc	r5, r3
 800be36:	0553      	lsls	r3, r2, #21
 800be38:	d527      	bpl.n	800be8a <__ssputs_r+0x8e>
 800be3a:	4629      	mov	r1, r5
 800be3c:	f7ff fbd0 	bl	800b5e0 <_malloc_r>
 800be40:	4606      	mov	r6, r0
 800be42:	b360      	cbz	r0, 800be9e <__ssputs_r+0xa2>
 800be44:	6921      	ldr	r1, [r4, #16]
 800be46:	464a      	mov	r2, r9
 800be48:	f000 fa06 	bl	800c258 <memcpy>
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be56:	81a3      	strh	r3, [r4, #12]
 800be58:	6126      	str	r6, [r4, #16]
 800be5a:	6165      	str	r5, [r4, #20]
 800be5c:	444e      	add	r6, r9
 800be5e:	eba5 0509 	sub.w	r5, r5, r9
 800be62:	6026      	str	r6, [r4, #0]
 800be64:	60a5      	str	r5, [r4, #8]
 800be66:	463e      	mov	r6, r7
 800be68:	42be      	cmp	r6, r7
 800be6a:	d900      	bls.n	800be6e <__ssputs_r+0x72>
 800be6c:	463e      	mov	r6, r7
 800be6e:	6820      	ldr	r0, [r4, #0]
 800be70:	4632      	mov	r2, r6
 800be72:	4641      	mov	r1, r8
 800be74:	f000 f9c6 	bl	800c204 <memmove>
 800be78:	68a3      	ldr	r3, [r4, #8]
 800be7a:	1b9b      	subs	r3, r3, r6
 800be7c:	60a3      	str	r3, [r4, #8]
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	4433      	add	r3, r6
 800be82:	6023      	str	r3, [r4, #0]
 800be84:	2000      	movs	r0, #0
 800be86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be8a:	462a      	mov	r2, r5
 800be8c:	f000 fa36 	bl	800c2fc <_realloc_r>
 800be90:	4606      	mov	r6, r0
 800be92:	2800      	cmp	r0, #0
 800be94:	d1e0      	bne.n	800be58 <__ssputs_r+0x5c>
 800be96:	6921      	ldr	r1, [r4, #16]
 800be98:	4650      	mov	r0, sl
 800be9a:	f7ff fb2d 	bl	800b4f8 <_free_r>
 800be9e:	230c      	movs	r3, #12
 800bea0:	f8ca 3000 	str.w	r3, [sl]
 800bea4:	89a3      	ldrh	r3, [r4, #12]
 800bea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beaa:	81a3      	strh	r3, [r4, #12]
 800beac:	f04f 30ff 	mov.w	r0, #4294967295
 800beb0:	e7e9      	b.n	800be86 <__ssputs_r+0x8a>
	...

0800beb4 <_svfiprintf_r>:
 800beb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb8:	4698      	mov	r8, r3
 800beba:	898b      	ldrh	r3, [r1, #12]
 800bebc:	061b      	lsls	r3, r3, #24
 800bebe:	b09d      	sub	sp, #116	@ 0x74
 800bec0:	4607      	mov	r7, r0
 800bec2:	460d      	mov	r5, r1
 800bec4:	4614      	mov	r4, r2
 800bec6:	d510      	bpl.n	800beea <_svfiprintf_r+0x36>
 800bec8:	690b      	ldr	r3, [r1, #16]
 800beca:	b973      	cbnz	r3, 800beea <_svfiprintf_r+0x36>
 800becc:	2140      	movs	r1, #64	@ 0x40
 800bece:	f7ff fb87 	bl	800b5e0 <_malloc_r>
 800bed2:	6028      	str	r0, [r5, #0]
 800bed4:	6128      	str	r0, [r5, #16]
 800bed6:	b930      	cbnz	r0, 800bee6 <_svfiprintf_r+0x32>
 800bed8:	230c      	movs	r3, #12
 800beda:	603b      	str	r3, [r7, #0]
 800bedc:	f04f 30ff 	mov.w	r0, #4294967295
 800bee0:	b01d      	add	sp, #116	@ 0x74
 800bee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee6:	2340      	movs	r3, #64	@ 0x40
 800bee8:	616b      	str	r3, [r5, #20]
 800beea:	2300      	movs	r3, #0
 800beec:	9309      	str	r3, [sp, #36]	@ 0x24
 800beee:	2320      	movs	r3, #32
 800bef0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bef4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bef8:	2330      	movs	r3, #48	@ 0x30
 800befa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c098 <_svfiprintf_r+0x1e4>
 800befe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf02:	f04f 0901 	mov.w	r9, #1
 800bf06:	4623      	mov	r3, r4
 800bf08:	469a      	mov	sl, r3
 800bf0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf0e:	b10a      	cbz	r2, 800bf14 <_svfiprintf_r+0x60>
 800bf10:	2a25      	cmp	r2, #37	@ 0x25
 800bf12:	d1f9      	bne.n	800bf08 <_svfiprintf_r+0x54>
 800bf14:	ebba 0b04 	subs.w	fp, sl, r4
 800bf18:	d00b      	beq.n	800bf32 <_svfiprintf_r+0x7e>
 800bf1a:	465b      	mov	r3, fp
 800bf1c:	4622      	mov	r2, r4
 800bf1e:	4629      	mov	r1, r5
 800bf20:	4638      	mov	r0, r7
 800bf22:	f7ff ff6b 	bl	800bdfc <__ssputs_r>
 800bf26:	3001      	adds	r0, #1
 800bf28:	f000 80a7 	beq.w	800c07a <_svfiprintf_r+0x1c6>
 800bf2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf2e:	445a      	add	r2, fp
 800bf30:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf32:	f89a 3000 	ldrb.w	r3, [sl]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f000 809f 	beq.w	800c07a <_svfiprintf_r+0x1c6>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf46:	f10a 0a01 	add.w	sl, sl, #1
 800bf4a:	9304      	str	r3, [sp, #16]
 800bf4c:	9307      	str	r3, [sp, #28]
 800bf4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf52:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf54:	4654      	mov	r4, sl
 800bf56:	2205      	movs	r2, #5
 800bf58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf5c:	484e      	ldr	r0, [pc, #312]	@ (800c098 <_svfiprintf_r+0x1e4>)
 800bf5e:	f7f4 f937 	bl	80001d0 <memchr>
 800bf62:	9a04      	ldr	r2, [sp, #16]
 800bf64:	b9d8      	cbnz	r0, 800bf9e <_svfiprintf_r+0xea>
 800bf66:	06d0      	lsls	r0, r2, #27
 800bf68:	bf44      	itt	mi
 800bf6a:	2320      	movmi	r3, #32
 800bf6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf70:	0711      	lsls	r1, r2, #28
 800bf72:	bf44      	itt	mi
 800bf74:	232b      	movmi	r3, #43	@ 0x2b
 800bf76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf7a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf80:	d015      	beq.n	800bfae <_svfiprintf_r+0xfa>
 800bf82:	9a07      	ldr	r2, [sp, #28]
 800bf84:	4654      	mov	r4, sl
 800bf86:	2000      	movs	r0, #0
 800bf88:	f04f 0c0a 	mov.w	ip, #10
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf92:	3b30      	subs	r3, #48	@ 0x30
 800bf94:	2b09      	cmp	r3, #9
 800bf96:	d94b      	bls.n	800c030 <_svfiprintf_r+0x17c>
 800bf98:	b1b0      	cbz	r0, 800bfc8 <_svfiprintf_r+0x114>
 800bf9a:	9207      	str	r2, [sp, #28]
 800bf9c:	e014      	b.n	800bfc8 <_svfiprintf_r+0x114>
 800bf9e:	eba0 0308 	sub.w	r3, r0, r8
 800bfa2:	fa09 f303 	lsl.w	r3, r9, r3
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	9304      	str	r3, [sp, #16]
 800bfaa:	46a2      	mov	sl, r4
 800bfac:	e7d2      	b.n	800bf54 <_svfiprintf_r+0xa0>
 800bfae:	9b03      	ldr	r3, [sp, #12]
 800bfb0:	1d19      	adds	r1, r3, #4
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	9103      	str	r1, [sp, #12]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	bfbb      	ittet	lt
 800bfba:	425b      	neglt	r3, r3
 800bfbc:	f042 0202 	orrlt.w	r2, r2, #2
 800bfc0:	9307      	strge	r3, [sp, #28]
 800bfc2:	9307      	strlt	r3, [sp, #28]
 800bfc4:	bfb8      	it	lt
 800bfc6:	9204      	strlt	r2, [sp, #16]
 800bfc8:	7823      	ldrb	r3, [r4, #0]
 800bfca:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfcc:	d10a      	bne.n	800bfe4 <_svfiprintf_r+0x130>
 800bfce:	7863      	ldrb	r3, [r4, #1]
 800bfd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfd2:	d132      	bne.n	800c03a <_svfiprintf_r+0x186>
 800bfd4:	9b03      	ldr	r3, [sp, #12]
 800bfd6:	1d1a      	adds	r2, r3, #4
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	9203      	str	r2, [sp, #12]
 800bfdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfe0:	3402      	adds	r4, #2
 800bfe2:	9305      	str	r3, [sp, #20]
 800bfe4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c0a8 <_svfiprintf_r+0x1f4>
 800bfe8:	7821      	ldrb	r1, [r4, #0]
 800bfea:	2203      	movs	r2, #3
 800bfec:	4650      	mov	r0, sl
 800bfee:	f7f4 f8ef 	bl	80001d0 <memchr>
 800bff2:	b138      	cbz	r0, 800c004 <_svfiprintf_r+0x150>
 800bff4:	9b04      	ldr	r3, [sp, #16]
 800bff6:	eba0 000a 	sub.w	r0, r0, sl
 800bffa:	2240      	movs	r2, #64	@ 0x40
 800bffc:	4082      	lsls	r2, r0
 800bffe:	4313      	orrs	r3, r2
 800c000:	3401      	adds	r4, #1
 800c002:	9304      	str	r3, [sp, #16]
 800c004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c008:	4824      	ldr	r0, [pc, #144]	@ (800c09c <_svfiprintf_r+0x1e8>)
 800c00a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c00e:	2206      	movs	r2, #6
 800c010:	f7f4 f8de 	bl	80001d0 <memchr>
 800c014:	2800      	cmp	r0, #0
 800c016:	d036      	beq.n	800c086 <_svfiprintf_r+0x1d2>
 800c018:	4b21      	ldr	r3, [pc, #132]	@ (800c0a0 <_svfiprintf_r+0x1ec>)
 800c01a:	bb1b      	cbnz	r3, 800c064 <_svfiprintf_r+0x1b0>
 800c01c:	9b03      	ldr	r3, [sp, #12]
 800c01e:	3307      	adds	r3, #7
 800c020:	f023 0307 	bic.w	r3, r3, #7
 800c024:	3308      	adds	r3, #8
 800c026:	9303      	str	r3, [sp, #12]
 800c028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c02a:	4433      	add	r3, r6
 800c02c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c02e:	e76a      	b.n	800bf06 <_svfiprintf_r+0x52>
 800c030:	fb0c 3202 	mla	r2, ip, r2, r3
 800c034:	460c      	mov	r4, r1
 800c036:	2001      	movs	r0, #1
 800c038:	e7a8      	b.n	800bf8c <_svfiprintf_r+0xd8>
 800c03a:	2300      	movs	r3, #0
 800c03c:	3401      	adds	r4, #1
 800c03e:	9305      	str	r3, [sp, #20]
 800c040:	4619      	mov	r1, r3
 800c042:	f04f 0c0a 	mov.w	ip, #10
 800c046:	4620      	mov	r0, r4
 800c048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c04c:	3a30      	subs	r2, #48	@ 0x30
 800c04e:	2a09      	cmp	r2, #9
 800c050:	d903      	bls.n	800c05a <_svfiprintf_r+0x1a6>
 800c052:	2b00      	cmp	r3, #0
 800c054:	d0c6      	beq.n	800bfe4 <_svfiprintf_r+0x130>
 800c056:	9105      	str	r1, [sp, #20]
 800c058:	e7c4      	b.n	800bfe4 <_svfiprintf_r+0x130>
 800c05a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c05e:	4604      	mov	r4, r0
 800c060:	2301      	movs	r3, #1
 800c062:	e7f0      	b.n	800c046 <_svfiprintf_r+0x192>
 800c064:	ab03      	add	r3, sp, #12
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	462a      	mov	r2, r5
 800c06a:	4b0e      	ldr	r3, [pc, #56]	@ (800c0a4 <_svfiprintf_r+0x1f0>)
 800c06c:	a904      	add	r1, sp, #16
 800c06e:	4638      	mov	r0, r7
 800c070:	f7fd fe84 	bl	8009d7c <_printf_float>
 800c074:	1c42      	adds	r2, r0, #1
 800c076:	4606      	mov	r6, r0
 800c078:	d1d6      	bne.n	800c028 <_svfiprintf_r+0x174>
 800c07a:	89ab      	ldrh	r3, [r5, #12]
 800c07c:	065b      	lsls	r3, r3, #25
 800c07e:	f53f af2d 	bmi.w	800bedc <_svfiprintf_r+0x28>
 800c082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c084:	e72c      	b.n	800bee0 <_svfiprintf_r+0x2c>
 800c086:	ab03      	add	r3, sp, #12
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	462a      	mov	r2, r5
 800c08c:	4b05      	ldr	r3, [pc, #20]	@ (800c0a4 <_svfiprintf_r+0x1f0>)
 800c08e:	a904      	add	r1, sp, #16
 800c090:	4638      	mov	r0, r7
 800c092:	f7fe f90b 	bl	800a2ac <_printf_i>
 800c096:	e7ed      	b.n	800c074 <_svfiprintf_r+0x1c0>
 800c098:	0800dda8 	.word	0x0800dda8
 800c09c:	0800ddb2 	.word	0x0800ddb2
 800c0a0:	08009d7d 	.word	0x08009d7d
 800c0a4:	0800bdfd 	.word	0x0800bdfd
 800c0a8:	0800ddae 	.word	0x0800ddae

0800c0ac <__sflush_r>:
 800c0ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b4:	0716      	lsls	r6, r2, #28
 800c0b6:	4605      	mov	r5, r0
 800c0b8:	460c      	mov	r4, r1
 800c0ba:	d454      	bmi.n	800c166 <__sflush_r+0xba>
 800c0bc:	684b      	ldr	r3, [r1, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	dc02      	bgt.n	800c0c8 <__sflush_r+0x1c>
 800c0c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	dd48      	ble.n	800c15a <__sflush_r+0xae>
 800c0c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0ca:	2e00      	cmp	r6, #0
 800c0cc:	d045      	beq.n	800c15a <__sflush_r+0xae>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c0d4:	682f      	ldr	r7, [r5, #0]
 800c0d6:	6a21      	ldr	r1, [r4, #32]
 800c0d8:	602b      	str	r3, [r5, #0]
 800c0da:	d030      	beq.n	800c13e <__sflush_r+0x92>
 800c0dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c0de:	89a3      	ldrh	r3, [r4, #12]
 800c0e0:	0759      	lsls	r1, r3, #29
 800c0e2:	d505      	bpl.n	800c0f0 <__sflush_r+0x44>
 800c0e4:	6863      	ldr	r3, [r4, #4]
 800c0e6:	1ad2      	subs	r2, r2, r3
 800c0e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0ea:	b10b      	cbz	r3, 800c0f0 <__sflush_r+0x44>
 800c0ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0ee:	1ad2      	subs	r2, r2, r3
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0f4:	6a21      	ldr	r1, [r4, #32]
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	47b0      	blx	r6
 800c0fa:	1c43      	adds	r3, r0, #1
 800c0fc:	89a3      	ldrh	r3, [r4, #12]
 800c0fe:	d106      	bne.n	800c10e <__sflush_r+0x62>
 800c100:	6829      	ldr	r1, [r5, #0]
 800c102:	291d      	cmp	r1, #29
 800c104:	d82b      	bhi.n	800c15e <__sflush_r+0xb2>
 800c106:	4a2a      	ldr	r2, [pc, #168]	@ (800c1b0 <__sflush_r+0x104>)
 800c108:	410a      	asrs	r2, r1
 800c10a:	07d6      	lsls	r6, r2, #31
 800c10c:	d427      	bmi.n	800c15e <__sflush_r+0xb2>
 800c10e:	2200      	movs	r2, #0
 800c110:	6062      	str	r2, [r4, #4]
 800c112:	04d9      	lsls	r1, r3, #19
 800c114:	6922      	ldr	r2, [r4, #16]
 800c116:	6022      	str	r2, [r4, #0]
 800c118:	d504      	bpl.n	800c124 <__sflush_r+0x78>
 800c11a:	1c42      	adds	r2, r0, #1
 800c11c:	d101      	bne.n	800c122 <__sflush_r+0x76>
 800c11e:	682b      	ldr	r3, [r5, #0]
 800c120:	b903      	cbnz	r3, 800c124 <__sflush_r+0x78>
 800c122:	6560      	str	r0, [r4, #84]	@ 0x54
 800c124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c126:	602f      	str	r7, [r5, #0]
 800c128:	b1b9      	cbz	r1, 800c15a <__sflush_r+0xae>
 800c12a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c12e:	4299      	cmp	r1, r3
 800c130:	d002      	beq.n	800c138 <__sflush_r+0x8c>
 800c132:	4628      	mov	r0, r5
 800c134:	f7ff f9e0 	bl	800b4f8 <_free_r>
 800c138:	2300      	movs	r3, #0
 800c13a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c13c:	e00d      	b.n	800c15a <__sflush_r+0xae>
 800c13e:	2301      	movs	r3, #1
 800c140:	4628      	mov	r0, r5
 800c142:	47b0      	blx	r6
 800c144:	4602      	mov	r2, r0
 800c146:	1c50      	adds	r0, r2, #1
 800c148:	d1c9      	bne.n	800c0de <__sflush_r+0x32>
 800c14a:	682b      	ldr	r3, [r5, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d0c6      	beq.n	800c0de <__sflush_r+0x32>
 800c150:	2b1d      	cmp	r3, #29
 800c152:	d001      	beq.n	800c158 <__sflush_r+0xac>
 800c154:	2b16      	cmp	r3, #22
 800c156:	d11e      	bne.n	800c196 <__sflush_r+0xea>
 800c158:	602f      	str	r7, [r5, #0]
 800c15a:	2000      	movs	r0, #0
 800c15c:	e022      	b.n	800c1a4 <__sflush_r+0xf8>
 800c15e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c162:	b21b      	sxth	r3, r3
 800c164:	e01b      	b.n	800c19e <__sflush_r+0xf2>
 800c166:	690f      	ldr	r7, [r1, #16]
 800c168:	2f00      	cmp	r7, #0
 800c16a:	d0f6      	beq.n	800c15a <__sflush_r+0xae>
 800c16c:	0793      	lsls	r3, r2, #30
 800c16e:	680e      	ldr	r6, [r1, #0]
 800c170:	bf08      	it	eq
 800c172:	694b      	ldreq	r3, [r1, #20]
 800c174:	600f      	str	r7, [r1, #0]
 800c176:	bf18      	it	ne
 800c178:	2300      	movne	r3, #0
 800c17a:	eba6 0807 	sub.w	r8, r6, r7
 800c17e:	608b      	str	r3, [r1, #8]
 800c180:	f1b8 0f00 	cmp.w	r8, #0
 800c184:	dde9      	ble.n	800c15a <__sflush_r+0xae>
 800c186:	6a21      	ldr	r1, [r4, #32]
 800c188:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c18a:	4643      	mov	r3, r8
 800c18c:	463a      	mov	r2, r7
 800c18e:	4628      	mov	r0, r5
 800c190:	47b0      	blx	r6
 800c192:	2800      	cmp	r0, #0
 800c194:	dc08      	bgt.n	800c1a8 <__sflush_r+0xfc>
 800c196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c19a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c19e:	81a3      	strh	r3, [r4, #12]
 800c1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a8:	4407      	add	r7, r0
 800c1aa:	eba8 0800 	sub.w	r8, r8, r0
 800c1ae:	e7e7      	b.n	800c180 <__sflush_r+0xd4>
 800c1b0:	dfbffffe 	.word	0xdfbffffe

0800c1b4 <_fflush_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	690b      	ldr	r3, [r1, #16]
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	b913      	cbnz	r3, 800c1c4 <_fflush_r+0x10>
 800c1be:	2500      	movs	r5, #0
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	bd38      	pop	{r3, r4, r5, pc}
 800c1c4:	b118      	cbz	r0, 800c1ce <_fflush_r+0x1a>
 800c1c6:	6a03      	ldr	r3, [r0, #32]
 800c1c8:	b90b      	cbnz	r3, 800c1ce <_fflush_r+0x1a>
 800c1ca:	f7fe fa1b 	bl	800a604 <__sinit>
 800c1ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d0f3      	beq.n	800c1be <_fflush_r+0xa>
 800c1d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c1d8:	07d0      	lsls	r0, r2, #31
 800c1da:	d404      	bmi.n	800c1e6 <_fflush_r+0x32>
 800c1dc:	0599      	lsls	r1, r3, #22
 800c1de:	d402      	bmi.n	800c1e6 <_fflush_r+0x32>
 800c1e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1e2:	f7fe fb3a 	bl	800a85a <__retarget_lock_acquire_recursive>
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	f7ff ff5f 	bl	800c0ac <__sflush_r>
 800c1ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1f0:	07da      	lsls	r2, r3, #31
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	d4e4      	bmi.n	800c1c0 <_fflush_r+0xc>
 800c1f6:	89a3      	ldrh	r3, [r4, #12]
 800c1f8:	059b      	lsls	r3, r3, #22
 800c1fa:	d4e1      	bmi.n	800c1c0 <_fflush_r+0xc>
 800c1fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1fe:	f7fe fb2d 	bl	800a85c <__retarget_lock_release_recursive>
 800c202:	e7dd      	b.n	800c1c0 <_fflush_r+0xc>

0800c204 <memmove>:
 800c204:	4288      	cmp	r0, r1
 800c206:	b510      	push	{r4, lr}
 800c208:	eb01 0402 	add.w	r4, r1, r2
 800c20c:	d902      	bls.n	800c214 <memmove+0x10>
 800c20e:	4284      	cmp	r4, r0
 800c210:	4623      	mov	r3, r4
 800c212:	d807      	bhi.n	800c224 <memmove+0x20>
 800c214:	1e43      	subs	r3, r0, #1
 800c216:	42a1      	cmp	r1, r4
 800c218:	d008      	beq.n	800c22c <memmove+0x28>
 800c21a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c21e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c222:	e7f8      	b.n	800c216 <memmove+0x12>
 800c224:	4402      	add	r2, r0
 800c226:	4601      	mov	r1, r0
 800c228:	428a      	cmp	r2, r1
 800c22a:	d100      	bne.n	800c22e <memmove+0x2a>
 800c22c:	bd10      	pop	{r4, pc}
 800c22e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c232:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c236:	e7f7      	b.n	800c228 <memmove+0x24>

0800c238 <_sbrk_r>:
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	4d06      	ldr	r5, [pc, #24]	@ (800c254 <_sbrk_r+0x1c>)
 800c23c:	2300      	movs	r3, #0
 800c23e:	4604      	mov	r4, r0
 800c240:	4608      	mov	r0, r1
 800c242:	602b      	str	r3, [r5, #0]
 800c244:	f7f5 fba4 	bl	8001990 <_sbrk>
 800c248:	1c43      	adds	r3, r0, #1
 800c24a:	d102      	bne.n	800c252 <_sbrk_r+0x1a>
 800c24c:	682b      	ldr	r3, [r5, #0]
 800c24e:	b103      	cbz	r3, 800c252 <_sbrk_r+0x1a>
 800c250:	6023      	str	r3, [r4, #0]
 800c252:	bd38      	pop	{r3, r4, r5, pc}
 800c254:	20002194 	.word	0x20002194

0800c258 <memcpy>:
 800c258:	440a      	add	r2, r1
 800c25a:	4291      	cmp	r1, r2
 800c25c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c260:	d100      	bne.n	800c264 <memcpy+0xc>
 800c262:	4770      	bx	lr
 800c264:	b510      	push	{r4, lr}
 800c266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c26a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c26e:	4291      	cmp	r1, r2
 800c270:	d1f9      	bne.n	800c266 <memcpy+0xe>
 800c272:	bd10      	pop	{r4, pc}

0800c274 <__assert_func>:
 800c274:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c276:	4614      	mov	r4, r2
 800c278:	461a      	mov	r2, r3
 800c27a:	4b09      	ldr	r3, [pc, #36]	@ (800c2a0 <__assert_func+0x2c>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4605      	mov	r5, r0
 800c280:	68d8      	ldr	r0, [r3, #12]
 800c282:	b954      	cbnz	r4, 800c29a <__assert_func+0x26>
 800c284:	4b07      	ldr	r3, [pc, #28]	@ (800c2a4 <__assert_func+0x30>)
 800c286:	461c      	mov	r4, r3
 800c288:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c28c:	9100      	str	r1, [sp, #0]
 800c28e:	462b      	mov	r3, r5
 800c290:	4905      	ldr	r1, [pc, #20]	@ (800c2a8 <__assert_func+0x34>)
 800c292:	f000 f86f 	bl	800c374 <fiprintf>
 800c296:	f000 f87f 	bl	800c398 <abort>
 800c29a:	4b04      	ldr	r3, [pc, #16]	@ (800c2ac <__assert_func+0x38>)
 800c29c:	e7f4      	b.n	800c288 <__assert_func+0x14>
 800c29e:	bf00      	nop
 800c2a0:	20000108 	.word	0x20000108
 800c2a4:	0800ddfe 	.word	0x0800ddfe
 800c2a8:	0800ddd0 	.word	0x0800ddd0
 800c2ac:	0800ddc3 	.word	0x0800ddc3

0800c2b0 <_calloc_r>:
 800c2b0:	b570      	push	{r4, r5, r6, lr}
 800c2b2:	fba1 5402 	umull	r5, r4, r1, r2
 800c2b6:	b93c      	cbnz	r4, 800c2c8 <_calloc_r+0x18>
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	f7ff f991 	bl	800b5e0 <_malloc_r>
 800c2be:	4606      	mov	r6, r0
 800c2c0:	b928      	cbnz	r0, 800c2ce <_calloc_r+0x1e>
 800c2c2:	2600      	movs	r6, #0
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	bd70      	pop	{r4, r5, r6, pc}
 800c2c8:	220c      	movs	r2, #12
 800c2ca:	6002      	str	r2, [r0, #0]
 800c2cc:	e7f9      	b.n	800c2c2 <_calloc_r+0x12>
 800c2ce:	462a      	mov	r2, r5
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	f7fe fa44 	bl	800a75e <memset>
 800c2d6:	e7f5      	b.n	800c2c4 <_calloc_r+0x14>

0800c2d8 <__ascii_mbtowc>:
 800c2d8:	b082      	sub	sp, #8
 800c2da:	b901      	cbnz	r1, 800c2de <__ascii_mbtowc+0x6>
 800c2dc:	a901      	add	r1, sp, #4
 800c2de:	b142      	cbz	r2, 800c2f2 <__ascii_mbtowc+0x1a>
 800c2e0:	b14b      	cbz	r3, 800c2f6 <__ascii_mbtowc+0x1e>
 800c2e2:	7813      	ldrb	r3, [r2, #0]
 800c2e4:	600b      	str	r3, [r1, #0]
 800c2e6:	7812      	ldrb	r2, [r2, #0]
 800c2e8:	1e10      	subs	r0, r2, #0
 800c2ea:	bf18      	it	ne
 800c2ec:	2001      	movne	r0, #1
 800c2ee:	b002      	add	sp, #8
 800c2f0:	4770      	bx	lr
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	e7fb      	b.n	800c2ee <__ascii_mbtowc+0x16>
 800c2f6:	f06f 0001 	mvn.w	r0, #1
 800c2fa:	e7f8      	b.n	800c2ee <__ascii_mbtowc+0x16>

0800c2fc <_realloc_r>:
 800c2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c300:	4680      	mov	r8, r0
 800c302:	4615      	mov	r5, r2
 800c304:	460c      	mov	r4, r1
 800c306:	b921      	cbnz	r1, 800c312 <_realloc_r+0x16>
 800c308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c30c:	4611      	mov	r1, r2
 800c30e:	f7ff b967 	b.w	800b5e0 <_malloc_r>
 800c312:	b92a      	cbnz	r2, 800c320 <_realloc_r+0x24>
 800c314:	f7ff f8f0 	bl	800b4f8 <_free_r>
 800c318:	2400      	movs	r4, #0
 800c31a:	4620      	mov	r0, r4
 800c31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c320:	f000 f841 	bl	800c3a6 <_malloc_usable_size_r>
 800c324:	4285      	cmp	r5, r0
 800c326:	4606      	mov	r6, r0
 800c328:	d802      	bhi.n	800c330 <_realloc_r+0x34>
 800c32a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c32e:	d8f4      	bhi.n	800c31a <_realloc_r+0x1e>
 800c330:	4629      	mov	r1, r5
 800c332:	4640      	mov	r0, r8
 800c334:	f7ff f954 	bl	800b5e0 <_malloc_r>
 800c338:	4607      	mov	r7, r0
 800c33a:	2800      	cmp	r0, #0
 800c33c:	d0ec      	beq.n	800c318 <_realloc_r+0x1c>
 800c33e:	42b5      	cmp	r5, r6
 800c340:	462a      	mov	r2, r5
 800c342:	4621      	mov	r1, r4
 800c344:	bf28      	it	cs
 800c346:	4632      	movcs	r2, r6
 800c348:	f7ff ff86 	bl	800c258 <memcpy>
 800c34c:	4621      	mov	r1, r4
 800c34e:	4640      	mov	r0, r8
 800c350:	f7ff f8d2 	bl	800b4f8 <_free_r>
 800c354:	463c      	mov	r4, r7
 800c356:	e7e0      	b.n	800c31a <_realloc_r+0x1e>

0800c358 <__ascii_wctomb>:
 800c358:	4603      	mov	r3, r0
 800c35a:	4608      	mov	r0, r1
 800c35c:	b141      	cbz	r1, 800c370 <__ascii_wctomb+0x18>
 800c35e:	2aff      	cmp	r2, #255	@ 0xff
 800c360:	d904      	bls.n	800c36c <__ascii_wctomb+0x14>
 800c362:	228a      	movs	r2, #138	@ 0x8a
 800c364:	601a      	str	r2, [r3, #0]
 800c366:	f04f 30ff 	mov.w	r0, #4294967295
 800c36a:	4770      	bx	lr
 800c36c:	700a      	strb	r2, [r1, #0]
 800c36e:	2001      	movs	r0, #1
 800c370:	4770      	bx	lr
	...

0800c374 <fiprintf>:
 800c374:	b40e      	push	{r1, r2, r3}
 800c376:	b503      	push	{r0, r1, lr}
 800c378:	4601      	mov	r1, r0
 800c37a:	ab03      	add	r3, sp, #12
 800c37c:	4805      	ldr	r0, [pc, #20]	@ (800c394 <fiprintf+0x20>)
 800c37e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c382:	6800      	ldr	r0, [r0, #0]
 800c384:	9301      	str	r3, [sp, #4]
 800c386:	f000 f83f 	bl	800c408 <_vfiprintf_r>
 800c38a:	b002      	add	sp, #8
 800c38c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c390:	b003      	add	sp, #12
 800c392:	4770      	bx	lr
 800c394:	20000108 	.word	0x20000108

0800c398 <abort>:
 800c398:	b508      	push	{r3, lr}
 800c39a:	2006      	movs	r0, #6
 800c39c:	f000 fa08 	bl	800c7b0 <raise>
 800c3a0:	2001      	movs	r0, #1
 800c3a2:	f7f5 fa7d 	bl	80018a0 <_exit>

0800c3a6 <_malloc_usable_size_r>:
 800c3a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3aa:	1f18      	subs	r0, r3, #4
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	bfbc      	itt	lt
 800c3b0:	580b      	ldrlt	r3, [r1, r0]
 800c3b2:	18c0      	addlt	r0, r0, r3
 800c3b4:	4770      	bx	lr

0800c3b6 <__sfputc_r>:
 800c3b6:	6893      	ldr	r3, [r2, #8]
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	b410      	push	{r4}
 800c3be:	6093      	str	r3, [r2, #8]
 800c3c0:	da08      	bge.n	800c3d4 <__sfputc_r+0x1e>
 800c3c2:	6994      	ldr	r4, [r2, #24]
 800c3c4:	42a3      	cmp	r3, r4
 800c3c6:	db01      	blt.n	800c3cc <__sfputc_r+0x16>
 800c3c8:	290a      	cmp	r1, #10
 800c3ca:	d103      	bne.n	800c3d4 <__sfputc_r+0x1e>
 800c3cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3d0:	f000 b932 	b.w	800c638 <__swbuf_r>
 800c3d4:	6813      	ldr	r3, [r2, #0]
 800c3d6:	1c58      	adds	r0, r3, #1
 800c3d8:	6010      	str	r0, [r2, #0]
 800c3da:	7019      	strb	r1, [r3, #0]
 800c3dc:	4608      	mov	r0, r1
 800c3de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <__sfputs_r>:
 800c3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e6:	4606      	mov	r6, r0
 800c3e8:	460f      	mov	r7, r1
 800c3ea:	4614      	mov	r4, r2
 800c3ec:	18d5      	adds	r5, r2, r3
 800c3ee:	42ac      	cmp	r4, r5
 800c3f0:	d101      	bne.n	800c3f6 <__sfputs_r+0x12>
 800c3f2:	2000      	movs	r0, #0
 800c3f4:	e007      	b.n	800c406 <__sfputs_r+0x22>
 800c3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3fa:	463a      	mov	r2, r7
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	f7ff ffda 	bl	800c3b6 <__sfputc_r>
 800c402:	1c43      	adds	r3, r0, #1
 800c404:	d1f3      	bne.n	800c3ee <__sfputs_r+0xa>
 800c406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c408 <_vfiprintf_r>:
 800c408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c40c:	460d      	mov	r5, r1
 800c40e:	b09d      	sub	sp, #116	@ 0x74
 800c410:	4614      	mov	r4, r2
 800c412:	4698      	mov	r8, r3
 800c414:	4606      	mov	r6, r0
 800c416:	b118      	cbz	r0, 800c420 <_vfiprintf_r+0x18>
 800c418:	6a03      	ldr	r3, [r0, #32]
 800c41a:	b90b      	cbnz	r3, 800c420 <_vfiprintf_r+0x18>
 800c41c:	f7fe f8f2 	bl	800a604 <__sinit>
 800c420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c422:	07d9      	lsls	r1, r3, #31
 800c424:	d405      	bmi.n	800c432 <_vfiprintf_r+0x2a>
 800c426:	89ab      	ldrh	r3, [r5, #12]
 800c428:	059a      	lsls	r2, r3, #22
 800c42a:	d402      	bmi.n	800c432 <_vfiprintf_r+0x2a>
 800c42c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c42e:	f7fe fa14 	bl	800a85a <__retarget_lock_acquire_recursive>
 800c432:	89ab      	ldrh	r3, [r5, #12]
 800c434:	071b      	lsls	r3, r3, #28
 800c436:	d501      	bpl.n	800c43c <_vfiprintf_r+0x34>
 800c438:	692b      	ldr	r3, [r5, #16]
 800c43a:	b99b      	cbnz	r3, 800c464 <_vfiprintf_r+0x5c>
 800c43c:	4629      	mov	r1, r5
 800c43e:	4630      	mov	r0, r6
 800c440:	f000 f938 	bl	800c6b4 <__swsetup_r>
 800c444:	b170      	cbz	r0, 800c464 <_vfiprintf_r+0x5c>
 800c446:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c448:	07dc      	lsls	r4, r3, #31
 800c44a:	d504      	bpl.n	800c456 <_vfiprintf_r+0x4e>
 800c44c:	f04f 30ff 	mov.w	r0, #4294967295
 800c450:	b01d      	add	sp, #116	@ 0x74
 800c452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c456:	89ab      	ldrh	r3, [r5, #12]
 800c458:	0598      	lsls	r0, r3, #22
 800c45a:	d4f7      	bmi.n	800c44c <_vfiprintf_r+0x44>
 800c45c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c45e:	f7fe f9fd 	bl	800a85c <__retarget_lock_release_recursive>
 800c462:	e7f3      	b.n	800c44c <_vfiprintf_r+0x44>
 800c464:	2300      	movs	r3, #0
 800c466:	9309      	str	r3, [sp, #36]	@ 0x24
 800c468:	2320      	movs	r3, #32
 800c46a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c46e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c472:	2330      	movs	r3, #48	@ 0x30
 800c474:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c624 <_vfiprintf_r+0x21c>
 800c478:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c47c:	f04f 0901 	mov.w	r9, #1
 800c480:	4623      	mov	r3, r4
 800c482:	469a      	mov	sl, r3
 800c484:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c488:	b10a      	cbz	r2, 800c48e <_vfiprintf_r+0x86>
 800c48a:	2a25      	cmp	r2, #37	@ 0x25
 800c48c:	d1f9      	bne.n	800c482 <_vfiprintf_r+0x7a>
 800c48e:	ebba 0b04 	subs.w	fp, sl, r4
 800c492:	d00b      	beq.n	800c4ac <_vfiprintf_r+0xa4>
 800c494:	465b      	mov	r3, fp
 800c496:	4622      	mov	r2, r4
 800c498:	4629      	mov	r1, r5
 800c49a:	4630      	mov	r0, r6
 800c49c:	f7ff ffa2 	bl	800c3e4 <__sfputs_r>
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	f000 80a7 	beq.w	800c5f4 <_vfiprintf_r+0x1ec>
 800c4a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4a8:	445a      	add	r2, fp
 800c4aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 809f 	beq.w	800c5f4 <_vfiprintf_r+0x1ec>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4c0:	f10a 0a01 	add.w	sl, sl, #1
 800c4c4:	9304      	str	r3, [sp, #16]
 800c4c6:	9307      	str	r3, [sp, #28]
 800c4c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c4cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4ce:	4654      	mov	r4, sl
 800c4d0:	2205      	movs	r2, #5
 800c4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4d6:	4853      	ldr	r0, [pc, #332]	@ (800c624 <_vfiprintf_r+0x21c>)
 800c4d8:	f7f3 fe7a 	bl	80001d0 <memchr>
 800c4dc:	9a04      	ldr	r2, [sp, #16]
 800c4de:	b9d8      	cbnz	r0, 800c518 <_vfiprintf_r+0x110>
 800c4e0:	06d1      	lsls	r1, r2, #27
 800c4e2:	bf44      	itt	mi
 800c4e4:	2320      	movmi	r3, #32
 800c4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4ea:	0713      	lsls	r3, r2, #28
 800c4ec:	bf44      	itt	mi
 800c4ee:	232b      	movmi	r3, #43	@ 0x2b
 800c4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4fa:	d015      	beq.n	800c528 <_vfiprintf_r+0x120>
 800c4fc:	9a07      	ldr	r2, [sp, #28]
 800c4fe:	4654      	mov	r4, sl
 800c500:	2000      	movs	r0, #0
 800c502:	f04f 0c0a 	mov.w	ip, #10
 800c506:	4621      	mov	r1, r4
 800c508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c50c:	3b30      	subs	r3, #48	@ 0x30
 800c50e:	2b09      	cmp	r3, #9
 800c510:	d94b      	bls.n	800c5aa <_vfiprintf_r+0x1a2>
 800c512:	b1b0      	cbz	r0, 800c542 <_vfiprintf_r+0x13a>
 800c514:	9207      	str	r2, [sp, #28]
 800c516:	e014      	b.n	800c542 <_vfiprintf_r+0x13a>
 800c518:	eba0 0308 	sub.w	r3, r0, r8
 800c51c:	fa09 f303 	lsl.w	r3, r9, r3
 800c520:	4313      	orrs	r3, r2
 800c522:	9304      	str	r3, [sp, #16]
 800c524:	46a2      	mov	sl, r4
 800c526:	e7d2      	b.n	800c4ce <_vfiprintf_r+0xc6>
 800c528:	9b03      	ldr	r3, [sp, #12]
 800c52a:	1d19      	adds	r1, r3, #4
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	9103      	str	r1, [sp, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	bfbb      	ittet	lt
 800c534:	425b      	neglt	r3, r3
 800c536:	f042 0202 	orrlt.w	r2, r2, #2
 800c53a:	9307      	strge	r3, [sp, #28]
 800c53c:	9307      	strlt	r3, [sp, #28]
 800c53e:	bfb8      	it	lt
 800c540:	9204      	strlt	r2, [sp, #16]
 800c542:	7823      	ldrb	r3, [r4, #0]
 800c544:	2b2e      	cmp	r3, #46	@ 0x2e
 800c546:	d10a      	bne.n	800c55e <_vfiprintf_r+0x156>
 800c548:	7863      	ldrb	r3, [r4, #1]
 800c54a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c54c:	d132      	bne.n	800c5b4 <_vfiprintf_r+0x1ac>
 800c54e:	9b03      	ldr	r3, [sp, #12]
 800c550:	1d1a      	adds	r2, r3, #4
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	9203      	str	r2, [sp, #12]
 800c556:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c55a:	3402      	adds	r4, #2
 800c55c:	9305      	str	r3, [sp, #20]
 800c55e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c634 <_vfiprintf_r+0x22c>
 800c562:	7821      	ldrb	r1, [r4, #0]
 800c564:	2203      	movs	r2, #3
 800c566:	4650      	mov	r0, sl
 800c568:	f7f3 fe32 	bl	80001d0 <memchr>
 800c56c:	b138      	cbz	r0, 800c57e <_vfiprintf_r+0x176>
 800c56e:	9b04      	ldr	r3, [sp, #16]
 800c570:	eba0 000a 	sub.w	r0, r0, sl
 800c574:	2240      	movs	r2, #64	@ 0x40
 800c576:	4082      	lsls	r2, r0
 800c578:	4313      	orrs	r3, r2
 800c57a:	3401      	adds	r4, #1
 800c57c:	9304      	str	r3, [sp, #16]
 800c57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c582:	4829      	ldr	r0, [pc, #164]	@ (800c628 <_vfiprintf_r+0x220>)
 800c584:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c588:	2206      	movs	r2, #6
 800c58a:	f7f3 fe21 	bl	80001d0 <memchr>
 800c58e:	2800      	cmp	r0, #0
 800c590:	d03f      	beq.n	800c612 <_vfiprintf_r+0x20a>
 800c592:	4b26      	ldr	r3, [pc, #152]	@ (800c62c <_vfiprintf_r+0x224>)
 800c594:	bb1b      	cbnz	r3, 800c5de <_vfiprintf_r+0x1d6>
 800c596:	9b03      	ldr	r3, [sp, #12]
 800c598:	3307      	adds	r3, #7
 800c59a:	f023 0307 	bic.w	r3, r3, #7
 800c59e:	3308      	adds	r3, #8
 800c5a0:	9303      	str	r3, [sp, #12]
 800c5a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a4:	443b      	add	r3, r7
 800c5a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5a8:	e76a      	b.n	800c480 <_vfiprintf_r+0x78>
 800c5aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	2001      	movs	r0, #1
 800c5b2:	e7a8      	b.n	800c506 <_vfiprintf_r+0xfe>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	3401      	adds	r4, #1
 800c5b8:	9305      	str	r3, [sp, #20]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	f04f 0c0a 	mov.w	ip, #10
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5c6:	3a30      	subs	r2, #48	@ 0x30
 800c5c8:	2a09      	cmp	r2, #9
 800c5ca:	d903      	bls.n	800c5d4 <_vfiprintf_r+0x1cc>
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d0c6      	beq.n	800c55e <_vfiprintf_r+0x156>
 800c5d0:	9105      	str	r1, [sp, #20]
 800c5d2:	e7c4      	b.n	800c55e <_vfiprintf_r+0x156>
 800c5d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5d8:	4604      	mov	r4, r0
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e7f0      	b.n	800c5c0 <_vfiprintf_r+0x1b8>
 800c5de:	ab03      	add	r3, sp, #12
 800c5e0:	9300      	str	r3, [sp, #0]
 800c5e2:	462a      	mov	r2, r5
 800c5e4:	4b12      	ldr	r3, [pc, #72]	@ (800c630 <_vfiprintf_r+0x228>)
 800c5e6:	a904      	add	r1, sp, #16
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	f7fd fbc7 	bl	8009d7c <_printf_float>
 800c5ee:	4607      	mov	r7, r0
 800c5f0:	1c78      	adds	r0, r7, #1
 800c5f2:	d1d6      	bne.n	800c5a2 <_vfiprintf_r+0x19a>
 800c5f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5f6:	07d9      	lsls	r1, r3, #31
 800c5f8:	d405      	bmi.n	800c606 <_vfiprintf_r+0x1fe>
 800c5fa:	89ab      	ldrh	r3, [r5, #12]
 800c5fc:	059a      	lsls	r2, r3, #22
 800c5fe:	d402      	bmi.n	800c606 <_vfiprintf_r+0x1fe>
 800c600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c602:	f7fe f92b 	bl	800a85c <__retarget_lock_release_recursive>
 800c606:	89ab      	ldrh	r3, [r5, #12]
 800c608:	065b      	lsls	r3, r3, #25
 800c60a:	f53f af1f 	bmi.w	800c44c <_vfiprintf_r+0x44>
 800c60e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c610:	e71e      	b.n	800c450 <_vfiprintf_r+0x48>
 800c612:	ab03      	add	r3, sp, #12
 800c614:	9300      	str	r3, [sp, #0]
 800c616:	462a      	mov	r2, r5
 800c618:	4b05      	ldr	r3, [pc, #20]	@ (800c630 <_vfiprintf_r+0x228>)
 800c61a:	a904      	add	r1, sp, #16
 800c61c:	4630      	mov	r0, r6
 800c61e:	f7fd fe45 	bl	800a2ac <_printf_i>
 800c622:	e7e4      	b.n	800c5ee <_vfiprintf_r+0x1e6>
 800c624:	0800dda8 	.word	0x0800dda8
 800c628:	0800ddb2 	.word	0x0800ddb2
 800c62c:	08009d7d 	.word	0x08009d7d
 800c630:	0800c3e5 	.word	0x0800c3e5
 800c634:	0800ddae 	.word	0x0800ddae

0800c638 <__swbuf_r>:
 800c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63a:	460e      	mov	r6, r1
 800c63c:	4614      	mov	r4, r2
 800c63e:	4605      	mov	r5, r0
 800c640:	b118      	cbz	r0, 800c64a <__swbuf_r+0x12>
 800c642:	6a03      	ldr	r3, [r0, #32]
 800c644:	b90b      	cbnz	r3, 800c64a <__swbuf_r+0x12>
 800c646:	f7fd ffdd 	bl	800a604 <__sinit>
 800c64a:	69a3      	ldr	r3, [r4, #24]
 800c64c:	60a3      	str	r3, [r4, #8]
 800c64e:	89a3      	ldrh	r3, [r4, #12]
 800c650:	071a      	lsls	r2, r3, #28
 800c652:	d501      	bpl.n	800c658 <__swbuf_r+0x20>
 800c654:	6923      	ldr	r3, [r4, #16]
 800c656:	b943      	cbnz	r3, 800c66a <__swbuf_r+0x32>
 800c658:	4621      	mov	r1, r4
 800c65a:	4628      	mov	r0, r5
 800c65c:	f000 f82a 	bl	800c6b4 <__swsetup_r>
 800c660:	b118      	cbz	r0, 800c66a <__swbuf_r+0x32>
 800c662:	f04f 37ff 	mov.w	r7, #4294967295
 800c666:	4638      	mov	r0, r7
 800c668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c66a:	6823      	ldr	r3, [r4, #0]
 800c66c:	6922      	ldr	r2, [r4, #16]
 800c66e:	1a98      	subs	r0, r3, r2
 800c670:	6963      	ldr	r3, [r4, #20]
 800c672:	b2f6      	uxtb	r6, r6
 800c674:	4283      	cmp	r3, r0
 800c676:	4637      	mov	r7, r6
 800c678:	dc05      	bgt.n	800c686 <__swbuf_r+0x4e>
 800c67a:	4621      	mov	r1, r4
 800c67c:	4628      	mov	r0, r5
 800c67e:	f7ff fd99 	bl	800c1b4 <_fflush_r>
 800c682:	2800      	cmp	r0, #0
 800c684:	d1ed      	bne.n	800c662 <__swbuf_r+0x2a>
 800c686:	68a3      	ldr	r3, [r4, #8]
 800c688:	3b01      	subs	r3, #1
 800c68a:	60a3      	str	r3, [r4, #8]
 800c68c:	6823      	ldr	r3, [r4, #0]
 800c68e:	1c5a      	adds	r2, r3, #1
 800c690:	6022      	str	r2, [r4, #0]
 800c692:	701e      	strb	r6, [r3, #0]
 800c694:	6962      	ldr	r2, [r4, #20]
 800c696:	1c43      	adds	r3, r0, #1
 800c698:	429a      	cmp	r2, r3
 800c69a:	d004      	beq.n	800c6a6 <__swbuf_r+0x6e>
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	07db      	lsls	r3, r3, #31
 800c6a0:	d5e1      	bpl.n	800c666 <__swbuf_r+0x2e>
 800c6a2:	2e0a      	cmp	r6, #10
 800c6a4:	d1df      	bne.n	800c666 <__swbuf_r+0x2e>
 800c6a6:	4621      	mov	r1, r4
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	f7ff fd83 	bl	800c1b4 <_fflush_r>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d0d9      	beq.n	800c666 <__swbuf_r+0x2e>
 800c6b2:	e7d6      	b.n	800c662 <__swbuf_r+0x2a>

0800c6b4 <__swsetup_r>:
 800c6b4:	b538      	push	{r3, r4, r5, lr}
 800c6b6:	4b29      	ldr	r3, [pc, #164]	@ (800c75c <__swsetup_r+0xa8>)
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	6818      	ldr	r0, [r3, #0]
 800c6bc:	460c      	mov	r4, r1
 800c6be:	b118      	cbz	r0, 800c6c8 <__swsetup_r+0x14>
 800c6c0:	6a03      	ldr	r3, [r0, #32]
 800c6c2:	b90b      	cbnz	r3, 800c6c8 <__swsetup_r+0x14>
 800c6c4:	f7fd ff9e 	bl	800a604 <__sinit>
 800c6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6cc:	0719      	lsls	r1, r3, #28
 800c6ce:	d422      	bmi.n	800c716 <__swsetup_r+0x62>
 800c6d0:	06da      	lsls	r2, r3, #27
 800c6d2:	d407      	bmi.n	800c6e4 <__swsetup_r+0x30>
 800c6d4:	2209      	movs	r2, #9
 800c6d6:	602a      	str	r2, [r5, #0]
 800c6d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6dc:	81a3      	strh	r3, [r4, #12]
 800c6de:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e2:	e033      	b.n	800c74c <__swsetup_r+0x98>
 800c6e4:	0758      	lsls	r0, r3, #29
 800c6e6:	d512      	bpl.n	800c70e <__swsetup_r+0x5a>
 800c6e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6ea:	b141      	cbz	r1, 800c6fe <__swsetup_r+0x4a>
 800c6ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6f0:	4299      	cmp	r1, r3
 800c6f2:	d002      	beq.n	800c6fa <__swsetup_r+0x46>
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	f7fe feff 	bl	800b4f8 <_free_r>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c6fe:	89a3      	ldrh	r3, [r4, #12]
 800c700:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c704:	81a3      	strh	r3, [r4, #12]
 800c706:	2300      	movs	r3, #0
 800c708:	6063      	str	r3, [r4, #4]
 800c70a:	6923      	ldr	r3, [r4, #16]
 800c70c:	6023      	str	r3, [r4, #0]
 800c70e:	89a3      	ldrh	r3, [r4, #12]
 800c710:	f043 0308 	orr.w	r3, r3, #8
 800c714:	81a3      	strh	r3, [r4, #12]
 800c716:	6923      	ldr	r3, [r4, #16]
 800c718:	b94b      	cbnz	r3, 800c72e <__swsetup_r+0x7a>
 800c71a:	89a3      	ldrh	r3, [r4, #12]
 800c71c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c724:	d003      	beq.n	800c72e <__swsetup_r+0x7a>
 800c726:	4621      	mov	r1, r4
 800c728:	4628      	mov	r0, r5
 800c72a:	f000 f883 	bl	800c834 <__smakebuf_r>
 800c72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c732:	f013 0201 	ands.w	r2, r3, #1
 800c736:	d00a      	beq.n	800c74e <__swsetup_r+0x9a>
 800c738:	2200      	movs	r2, #0
 800c73a:	60a2      	str	r2, [r4, #8]
 800c73c:	6962      	ldr	r2, [r4, #20]
 800c73e:	4252      	negs	r2, r2
 800c740:	61a2      	str	r2, [r4, #24]
 800c742:	6922      	ldr	r2, [r4, #16]
 800c744:	b942      	cbnz	r2, 800c758 <__swsetup_r+0xa4>
 800c746:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c74a:	d1c5      	bne.n	800c6d8 <__swsetup_r+0x24>
 800c74c:	bd38      	pop	{r3, r4, r5, pc}
 800c74e:	0799      	lsls	r1, r3, #30
 800c750:	bf58      	it	pl
 800c752:	6962      	ldrpl	r2, [r4, #20]
 800c754:	60a2      	str	r2, [r4, #8]
 800c756:	e7f4      	b.n	800c742 <__swsetup_r+0x8e>
 800c758:	2000      	movs	r0, #0
 800c75a:	e7f7      	b.n	800c74c <__swsetup_r+0x98>
 800c75c:	20000108 	.word	0x20000108

0800c760 <_raise_r>:
 800c760:	291f      	cmp	r1, #31
 800c762:	b538      	push	{r3, r4, r5, lr}
 800c764:	4605      	mov	r5, r0
 800c766:	460c      	mov	r4, r1
 800c768:	d904      	bls.n	800c774 <_raise_r+0x14>
 800c76a:	2316      	movs	r3, #22
 800c76c:	6003      	str	r3, [r0, #0]
 800c76e:	f04f 30ff 	mov.w	r0, #4294967295
 800c772:	bd38      	pop	{r3, r4, r5, pc}
 800c774:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c776:	b112      	cbz	r2, 800c77e <_raise_r+0x1e>
 800c778:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c77c:	b94b      	cbnz	r3, 800c792 <_raise_r+0x32>
 800c77e:	4628      	mov	r0, r5
 800c780:	f000 f830 	bl	800c7e4 <_getpid_r>
 800c784:	4622      	mov	r2, r4
 800c786:	4601      	mov	r1, r0
 800c788:	4628      	mov	r0, r5
 800c78a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c78e:	f000 b817 	b.w	800c7c0 <_kill_r>
 800c792:	2b01      	cmp	r3, #1
 800c794:	d00a      	beq.n	800c7ac <_raise_r+0x4c>
 800c796:	1c59      	adds	r1, r3, #1
 800c798:	d103      	bne.n	800c7a2 <_raise_r+0x42>
 800c79a:	2316      	movs	r3, #22
 800c79c:	6003      	str	r3, [r0, #0]
 800c79e:	2001      	movs	r0, #1
 800c7a0:	e7e7      	b.n	800c772 <_raise_r+0x12>
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	4798      	blx	r3
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	e7e0      	b.n	800c772 <_raise_r+0x12>

0800c7b0 <raise>:
 800c7b0:	4b02      	ldr	r3, [pc, #8]	@ (800c7bc <raise+0xc>)
 800c7b2:	4601      	mov	r1, r0
 800c7b4:	6818      	ldr	r0, [r3, #0]
 800c7b6:	f7ff bfd3 	b.w	800c760 <_raise_r>
 800c7ba:	bf00      	nop
 800c7bc:	20000108 	.word	0x20000108

0800c7c0 <_kill_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	4d07      	ldr	r5, [pc, #28]	@ (800c7e0 <_kill_r+0x20>)
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	4608      	mov	r0, r1
 800c7ca:	4611      	mov	r1, r2
 800c7cc:	602b      	str	r3, [r5, #0]
 800c7ce:	f7f5 f857 	bl	8001880 <_kill>
 800c7d2:	1c43      	adds	r3, r0, #1
 800c7d4:	d102      	bne.n	800c7dc <_kill_r+0x1c>
 800c7d6:	682b      	ldr	r3, [r5, #0]
 800c7d8:	b103      	cbz	r3, 800c7dc <_kill_r+0x1c>
 800c7da:	6023      	str	r3, [r4, #0]
 800c7dc:	bd38      	pop	{r3, r4, r5, pc}
 800c7de:	bf00      	nop
 800c7e0:	20002194 	.word	0x20002194

0800c7e4 <_getpid_r>:
 800c7e4:	f7f5 b844 	b.w	8001870 <_getpid>

0800c7e8 <__swhatbuf_r>:
 800c7e8:	b570      	push	{r4, r5, r6, lr}
 800c7ea:	460c      	mov	r4, r1
 800c7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f0:	2900      	cmp	r1, #0
 800c7f2:	b096      	sub	sp, #88	@ 0x58
 800c7f4:	4615      	mov	r5, r2
 800c7f6:	461e      	mov	r6, r3
 800c7f8:	da0d      	bge.n	800c816 <__swhatbuf_r+0x2e>
 800c7fa:	89a3      	ldrh	r3, [r4, #12]
 800c7fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c800:	f04f 0100 	mov.w	r1, #0
 800c804:	bf14      	ite	ne
 800c806:	2340      	movne	r3, #64	@ 0x40
 800c808:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c80c:	2000      	movs	r0, #0
 800c80e:	6031      	str	r1, [r6, #0]
 800c810:	602b      	str	r3, [r5, #0]
 800c812:	b016      	add	sp, #88	@ 0x58
 800c814:	bd70      	pop	{r4, r5, r6, pc}
 800c816:	466a      	mov	r2, sp
 800c818:	f000 f848 	bl	800c8ac <_fstat_r>
 800c81c:	2800      	cmp	r0, #0
 800c81e:	dbec      	blt.n	800c7fa <__swhatbuf_r+0x12>
 800c820:	9901      	ldr	r1, [sp, #4]
 800c822:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c826:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c82a:	4259      	negs	r1, r3
 800c82c:	4159      	adcs	r1, r3
 800c82e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c832:	e7eb      	b.n	800c80c <__swhatbuf_r+0x24>

0800c834 <__smakebuf_r>:
 800c834:	898b      	ldrh	r3, [r1, #12]
 800c836:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c838:	079d      	lsls	r5, r3, #30
 800c83a:	4606      	mov	r6, r0
 800c83c:	460c      	mov	r4, r1
 800c83e:	d507      	bpl.n	800c850 <__smakebuf_r+0x1c>
 800c840:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c844:	6023      	str	r3, [r4, #0]
 800c846:	6123      	str	r3, [r4, #16]
 800c848:	2301      	movs	r3, #1
 800c84a:	6163      	str	r3, [r4, #20]
 800c84c:	b003      	add	sp, #12
 800c84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c850:	ab01      	add	r3, sp, #4
 800c852:	466a      	mov	r2, sp
 800c854:	f7ff ffc8 	bl	800c7e8 <__swhatbuf_r>
 800c858:	9f00      	ldr	r7, [sp, #0]
 800c85a:	4605      	mov	r5, r0
 800c85c:	4639      	mov	r1, r7
 800c85e:	4630      	mov	r0, r6
 800c860:	f7fe febe 	bl	800b5e0 <_malloc_r>
 800c864:	b948      	cbnz	r0, 800c87a <__smakebuf_r+0x46>
 800c866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c86a:	059a      	lsls	r2, r3, #22
 800c86c:	d4ee      	bmi.n	800c84c <__smakebuf_r+0x18>
 800c86e:	f023 0303 	bic.w	r3, r3, #3
 800c872:	f043 0302 	orr.w	r3, r3, #2
 800c876:	81a3      	strh	r3, [r4, #12]
 800c878:	e7e2      	b.n	800c840 <__smakebuf_r+0xc>
 800c87a:	89a3      	ldrh	r3, [r4, #12]
 800c87c:	6020      	str	r0, [r4, #0]
 800c87e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c882:	81a3      	strh	r3, [r4, #12]
 800c884:	9b01      	ldr	r3, [sp, #4]
 800c886:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c88a:	b15b      	cbz	r3, 800c8a4 <__smakebuf_r+0x70>
 800c88c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c890:	4630      	mov	r0, r6
 800c892:	f000 f81d 	bl	800c8d0 <_isatty_r>
 800c896:	b128      	cbz	r0, 800c8a4 <__smakebuf_r+0x70>
 800c898:	89a3      	ldrh	r3, [r4, #12]
 800c89a:	f023 0303 	bic.w	r3, r3, #3
 800c89e:	f043 0301 	orr.w	r3, r3, #1
 800c8a2:	81a3      	strh	r3, [r4, #12]
 800c8a4:	89a3      	ldrh	r3, [r4, #12]
 800c8a6:	431d      	orrs	r5, r3
 800c8a8:	81a5      	strh	r5, [r4, #12]
 800c8aa:	e7cf      	b.n	800c84c <__smakebuf_r+0x18>

0800c8ac <_fstat_r>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	4d07      	ldr	r5, [pc, #28]	@ (800c8cc <_fstat_r+0x20>)
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	602b      	str	r3, [r5, #0]
 800c8ba:	f7f5 f841 	bl	8001940 <_fstat>
 800c8be:	1c43      	adds	r3, r0, #1
 800c8c0:	d102      	bne.n	800c8c8 <_fstat_r+0x1c>
 800c8c2:	682b      	ldr	r3, [r5, #0]
 800c8c4:	b103      	cbz	r3, 800c8c8 <_fstat_r+0x1c>
 800c8c6:	6023      	str	r3, [r4, #0]
 800c8c8:	bd38      	pop	{r3, r4, r5, pc}
 800c8ca:	bf00      	nop
 800c8cc:	20002194 	.word	0x20002194

0800c8d0 <_isatty_r>:
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	4d06      	ldr	r5, [pc, #24]	@ (800c8ec <_isatty_r+0x1c>)
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	4608      	mov	r0, r1
 800c8da:	602b      	str	r3, [r5, #0]
 800c8dc:	f7f5 f840 	bl	8001960 <_isatty>
 800c8e0:	1c43      	adds	r3, r0, #1
 800c8e2:	d102      	bne.n	800c8ea <_isatty_r+0x1a>
 800c8e4:	682b      	ldr	r3, [r5, #0]
 800c8e6:	b103      	cbz	r3, 800c8ea <_isatty_r+0x1a>
 800c8e8:	6023      	str	r3, [r4, #0]
 800c8ea:	bd38      	pop	{r3, r4, r5, pc}
 800c8ec:	20002194 	.word	0x20002194

0800c8f0 <sqrt>:
 800c8f0:	b538      	push	{r3, r4, r5, lr}
 800c8f2:	ed2d 8b02 	vpush	{d8}
 800c8f6:	ec55 4b10 	vmov	r4, r5, d0
 800c8fa:	f000 f8dd 	bl	800cab8 <__ieee754_sqrt>
 800c8fe:	4622      	mov	r2, r4
 800c900:	462b      	mov	r3, r5
 800c902:	4620      	mov	r0, r4
 800c904:	4629      	mov	r1, r5
 800c906:	eeb0 8a40 	vmov.f32	s16, s0
 800c90a:	eef0 8a60 	vmov.f32	s17, s1
 800c90e:	f7f4 f90d 	bl	8000b2c <__aeabi_dcmpun>
 800c912:	b990      	cbnz	r0, 800c93a <sqrt+0x4a>
 800c914:	2200      	movs	r2, #0
 800c916:	2300      	movs	r3, #0
 800c918:	4620      	mov	r0, r4
 800c91a:	4629      	mov	r1, r5
 800c91c:	f7f4 f8de 	bl	8000adc <__aeabi_dcmplt>
 800c920:	b158      	cbz	r0, 800c93a <sqrt+0x4a>
 800c922:	f7fd ff6f 	bl	800a804 <__errno>
 800c926:	2321      	movs	r3, #33	@ 0x21
 800c928:	6003      	str	r3, [r0, #0]
 800c92a:	2200      	movs	r2, #0
 800c92c:	2300      	movs	r3, #0
 800c92e:	4610      	mov	r0, r2
 800c930:	4619      	mov	r1, r3
 800c932:	f7f3 ff8b 	bl	800084c <__aeabi_ddiv>
 800c936:	ec41 0b18 	vmov	d8, r0, r1
 800c93a:	eeb0 0a48 	vmov.f32	s0, s16
 800c93e:	eef0 0a68 	vmov.f32	s1, s17
 800c942:	ecbd 8b02 	vpop	{d8}
 800c946:	bd38      	pop	{r3, r4, r5, pc}

0800c948 <atan2f>:
 800c948:	f000 bb10 	b.w	800cf6c <__ieee754_atan2f>

0800c94c <cosf>:
 800c94c:	ee10 3a10 	vmov	r3, s0
 800c950:	b507      	push	{r0, r1, r2, lr}
 800c952:	4a1e      	ldr	r2, [pc, #120]	@ (800c9cc <cosf+0x80>)
 800c954:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c958:	4293      	cmp	r3, r2
 800c95a:	d806      	bhi.n	800c96a <cosf+0x1e>
 800c95c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800c9d0 <cosf+0x84>
 800c960:	b003      	add	sp, #12
 800c962:	f85d eb04 	ldr.w	lr, [sp], #4
 800c966:	f000 b981 	b.w	800cc6c <__kernel_cosf>
 800c96a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c96e:	d304      	bcc.n	800c97a <cosf+0x2e>
 800c970:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c974:	b003      	add	sp, #12
 800c976:	f85d fb04 	ldr.w	pc, [sp], #4
 800c97a:	4668      	mov	r0, sp
 800c97c:	f000 fb96 	bl	800d0ac <__ieee754_rem_pio2f>
 800c980:	f000 0003 	and.w	r0, r0, #3
 800c984:	2801      	cmp	r0, #1
 800c986:	d009      	beq.n	800c99c <cosf+0x50>
 800c988:	2802      	cmp	r0, #2
 800c98a:	d010      	beq.n	800c9ae <cosf+0x62>
 800c98c:	b9b0      	cbnz	r0, 800c9bc <cosf+0x70>
 800c98e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c992:	ed9d 0a00 	vldr	s0, [sp]
 800c996:	f000 f969 	bl	800cc6c <__kernel_cosf>
 800c99a:	e7eb      	b.n	800c974 <cosf+0x28>
 800c99c:	eddd 0a01 	vldr	s1, [sp, #4]
 800c9a0:	ed9d 0a00 	vldr	s0, [sp]
 800c9a4:	f000 f9ba 	bl	800cd1c <__kernel_sinf>
 800c9a8:	eeb1 0a40 	vneg.f32	s0, s0
 800c9ac:	e7e2      	b.n	800c974 <cosf+0x28>
 800c9ae:	eddd 0a01 	vldr	s1, [sp, #4]
 800c9b2:	ed9d 0a00 	vldr	s0, [sp]
 800c9b6:	f000 f959 	bl	800cc6c <__kernel_cosf>
 800c9ba:	e7f5      	b.n	800c9a8 <cosf+0x5c>
 800c9bc:	eddd 0a01 	vldr	s1, [sp, #4]
 800c9c0:	ed9d 0a00 	vldr	s0, [sp]
 800c9c4:	2001      	movs	r0, #1
 800c9c6:	f000 f9a9 	bl	800cd1c <__kernel_sinf>
 800c9ca:	e7d3      	b.n	800c974 <cosf+0x28>
 800c9cc:	3f490fd8 	.word	0x3f490fd8
 800c9d0:	00000000 	.word	0x00000000

0800c9d4 <sinf>:
 800c9d4:	ee10 3a10 	vmov	r3, s0
 800c9d8:	b507      	push	{r0, r1, r2, lr}
 800c9da:	4a1f      	ldr	r2, [pc, #124]	@ (800ca58 <sinf+0x84>)
 800c9dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d807      	bhi.n	800c9f4 <sinf+0x20>
 800c9e4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800ca5c <sinf+0x88>
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	b003      	add	sp, #12
 800c9ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9f0:	f000 b994 	b.w	800cd1c <__kernel_sinf>
 800c9f4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c9f8:	d304      	bcc.n	800ca04 <sinf+0x30>
 800c9fa:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c9fe:	b003      	add	sp, #12
 800ca00:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca04:	4668      	mov	r0, sp
 800ca06:	f000 fb51 	bl	800d0ac <__ieee754_rem_pio2f>
 800ca0a:	f000 0003 	and.w	r0, r0, #3
 800ca0e:	2801      	cmp	r0, #1
 800ca10:	d00a      	beq.n	800ca28 <sinf+0x54>
 800ca12:	2802      	cmp	r0, #2
 800ca14:	d00f      	beq.n	800ca36 <sinf+0x62>
 800ca16:	b9c0      	cbnz	r0, 800ca4a <sinf+0x76>
 800ca18:	eddd 0a01 	vldr	s1, [sp, #4]
 800ca1c:	ed9d 0a00 	vldr	s0, [sp]
 800ca20:	2001      	movs	r0, #1
 800ca22:	f000 f97b 	bl	800cd1c <__kernel_sinf>
 800ca26:	e7ea      	b.n	800c9fe <sinf+0x2a>
 800ca28:	eddd 0a01 	vldr	s1, [sp, #4]
 800ca2c:	ed9d 0a00 	vldr	s0, [sp]
 800ca30:	f000 f91c 	bl	800cc6c <__kernel_cosf>
 800ca34:	e7e3      	b.n	800c9fe <sinf+0x2a>
 800ca36:	eddd 0a01 	vldr	s1, [sp, #4]
 800ca3a:	ed9d 0a00 	vldr	s0, [sp]
 800ca3e:	2001      	movs	r0, #1
 800ca40:	f000 f96c 	bl	800cd1c <__kernel_sinf>
 800ca44:	eeb1 0a40 	vneg.f32	s0, s0
 800ca48:	e7d9      	b.n	800c9fe <sinf+0x2a>
 800ca4a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ca4e:	ed9d 0a00 	vldr	s0, [sp]
 800ca52:	f000 f90b 	bl	800cc6c <__kernel_cosf>
 800ca56:	e7f5      	b.n	800ca44 <sinf+0x70>
 800ca58:	3f490fd8 	.word	0x3f490fd8
 800ca5c:	00000000 	.word	0x00000000

0800ca60 <tanf>:
 800ca60:	ee10 3a10 	vmov	r3, s0
 800ca64:	b507      	push	{r0, r1, r2, lr}
 800ca66:	4a12      	ldr	r2, [pc, #72]	@ (800cab0 <tanf+0x50>)
 800ca68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d807      	bhi.n	800ca80 <tanf+0x20>
 800ca70:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800cab4 <tanf+0x54>
 800ca74:	2001      	movs	r0, #1
 800ca76:	b003      	add	sp, #12
 800ca78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca7c:	f000 b996 	b.w	800cdac <__kernel_tanf>
 800ca80:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ca84:	d304      	bcc.n	800ca90 <tanf+0x30>
 800ca86:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ca8a:	b003      	add	sp, #12
 800ca8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca90:	4668      	mov	r0, sp
 800ca92:	f000 fb0b 	bl	800d0ac <__ieee754_rem_pio2f>
 800ca96:	0040      	lsls	r0, r0, #1
 800ca98:	f000 0002 	and.w	r0, r0, #2
 800ca9c:	eddd 0a01 	vldr	s1, [sp, #4]
 800caa0:	ed9d 0a00 	vldr	s0, [sp]
 800caa4:	f1c0 0001 	rsb	r0, r0, #1
 800caa8:	f000 f980 	bl	800cdac <__kernel_tanf>
 800caac:	e7ed      	b.n	800ca8a <tanf+0x2a>
 800caae:	bf00      	nop
 800cab0:	3f490fda 	.word	0x3f490fda
 800cab4:	00000000 	.word	0x00000000

0800cab8 <__ieee754_sqrt>:
 800cab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cabc:	4a68      	ldr	r2, [pc, #416]	@ (800cc60 <__ieee754_sqrt+0x1a8>)
 800cabe:	ec55 4b10 	vmov	r4, r5, d0
 800cac2:	43aa      	bics	r2, r5
 800cac4:	462b      	mov	r3, r5
 800cac6:	4621      	mov	r1, r4
 800cac8:	d110      	bne.n	800caec <__ieee754_sqrt+0x34>
 800caca:	4622      	mov	r2, r4
 800cacc:	4620      	mov	r0, r4
 800cace:	4629      	mov	r1, r5
 800cad0:	f7f3 fd92 	bl	80005f8 <__aeabi_dmul>
 800cad4:	4602      	mov	r2, r0
 800cad6:	460b      	mov	r3, r1
 800cad8:	4620      	mov	r0, r4
 800cada:	4629      	mov	r1, r5
 800cadc:	f7f3 fbd6 	bl	800028c <__adddf3>
 800cae0:	4604      	mov	r4, r0
 800cae2:	460d      	mov	r5, r1
 800cae4:	ec45 4b10 	vmov	d0, r4, r5
 800cae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caec:	2d00      	cmp	r5, #0
 800caee:	dc0e      	bgt.n	800cb0e <__ieee754_sqrt+0x56>
 800caf0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800caf4:	4322      	orrs	r2, r4
 800caf6:	d0f5      	beq.n	800cae4 <__ieee754_sqrt+0x2c>
 800caf8:	b19d      	cbz	r5, 800cb22 <__ieee754_sqrt+0x6a>
 800cafa:	4622      	mov	r2, r4
 800cafc:	4620      	mov	r0, r4
 800cafe:	4629      	mov	r1, r5
 800cb00:	f7f3 fbc2 	bl	8000288 <__aeabi_dsub>
 800cb04:	4602      	mov	r2, r0
 800cb06:	460b      	mov	r3, r1
 800cb08:	f7f3 fea0 	bl	800084c <__aeabi_ddiv>
 800cb0c:	e7e8      	b.n	800cae0 <__ieee754_sqrt+0x28>
 800cb0e:	152a      	asrs	r2, r5, #20
 800cb10:	d115      	bne.n	800cb3e <__ieee754_sqrt+0x86>
 800cb12:	2000      	movs	r0, #0
 800cb14:	e009      	b.n	800cb2a <__ieee754_sqrt+0x72>
 800cb16:	0acb      	lsrs	r3, r1, #11
 800cb18:	3a15      	subs	r2, #21
 800cb1a:	0549      	lsls	r1, r1, #21
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d0fa      	beq.n	800cb16 <__ieee754_sqrt+0x5e>
 800cb20:	e7f7      	b.n	800cb12 <__ieee754_sqrt+0x5a>
 800cb22:	462a      	mov	r2, r5
 800cb24:	e7fa      	b.n	800cb1c <__ieee754_sqrt+0x64>
 800cb26:	005b      	lsls	r3, r3, #1
 800cb28:	3001      	adds	r0, #1
 800cb2a:	02dc      	lsls	r4, r3, #11
 800cb2c:	d5fb      	bpl.n	800cb26 <__ieee754_sqrt+0x6e>
 800cb2e:	1e44      	subs	r4, r0, #1
 800cb30:	1b12      	subs	r2, r2, r4
 800cb32:	f1c0 0420 	rsb	r4, r0, #32
 800cb36:	fa21 f404 	lsr.w	r4, r1, r4
 800cb3a:	4323      	orrs	r3, r4
 800cb3c:	4081      	lsls	r1, r0
 800cb3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb42:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800cb46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb4a:	07d2      	lsls	r2, r2, #31
 800cb4c:	bf5c      	itt	pl
 800cb4e:	005b      	lslpl	r3, r3, #1
 800cb50:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800cb54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cb58:	bf58      	it	pl
 800cb5a:	0049      	lslpl	r1, r1, #1
 800cb5c:	2600      	movs	r6, #0
 800cb5e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800cb62:	106d      	asrs	r5, r5, #1
 800cb64:	0049      	lsls	r1, r1, #1
 800cb66:	2016      	movs	r0, #22
 800cb68:	4632      	mov	r2, r6
 800cb6a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800cb6e:	1917      	adds	r7, r2, r4
 800cb70:	429f      	cmp	r7, r3
 800cb72:	bfde      	ittt	le
 800cb74:	193a      	addle	r2, r7, r4
 800cb76:	1bdb      	suble	r3, r3, r7
 800cb78:	1936      	addle	r6, r6, r4
 800cb7a:	0fcf      	lsrs	r7, r1, #31
 800cb7c:	3801      	subs	r0, #1
 800cb7e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800cb82:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cb86:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cb8a:	d1f0      	bne.n	800cb6e <__ieee754_sqrt+0xb6>
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	2720      	movs	r7, #32
 800cb90:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800cb94:	429a      	cmp	r2, r3
 800cb96:	eb00 0e0c 	add.w	lr, r0, ip
 800cb9a:	db02      	blt.n	800cba2 <__ieee754_sqrt+0xea>
 800cb9c:	d113      	bne.n	800cbc6 <__ieee754_sqrt+0x10e>
 800cb9e:	458e      	cmp	lr, r1
 800cba0:	d811      	bhi.n	800cbc6 <__ieee754_sqrt+0x10e>
 800cba2:	f1be 0f00 	cmp.w	lr, #0
 800cba6:	eb0e 000c 	add.w	r0, lr, ip
 800cbaa:	da42      	bge.n	800cc32 <__ieee754_sqrt+0x17a>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	db40      	blt.n	800cc32 <__ieee754_sqrt+0x17a>
 800cbb0:	f102 0801 	add.w	r8, r2, #1
 800cbb4:	1a9b      	subs	r3, r3, r2
 800cbb6:	458e      	cmp	lr, r1
 800cbb8:	bf88      	it	hi
 800cbba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cbbe:	eba1 010e 	sub.w	r1, r1, lr
 800cbc2:	4464      	add	r4, ip
 800cbc4:	4642      	mov	r2, r8
 800cbc6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800cbca:	3f01      	subs	r7, #1
 800cbcc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800cbd0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cbd4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cbd8:	d1dc      	bne.n	800cb94 <__ieee754_sqrt+0xdc>
 800cbda:	4319      	orrs	r1, r3
 800cbdc:	d01b      	beq.n	800cc16 <__ieee754_sqrt+0x15e>
 800cbde:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cc64 <__ieee754_sqrt+0x1ac>
 800cbe2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cc68 <__ieee754_sqrt+0x1b0>
 800cbe6:	e9da 0100 	ldrd	r0, r1, [sl]
 800cbea:	e9db 2300 	ldrd	r2, r3, [fp]
 800cbee:	f7f3 fb4b 	bl	8000288 <__aeabi_dsub>
 800cbf2:	e9da 8900 	ldrd	r8, r9, [sl]
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	4640      	mov	r0, r8
 800cbfc:	4649      	mov	r1, r9
 800cbfe:	f7f3 ff77 	bl	8000af0 <__aeabi_dcmple>
 800cc02:	b140      	cbz	r0, 800cc16 <__ieee754_sqrt+0x15e>
 800cc04:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cc08:	e9da 0100 	ldrd	r0, r1, [sl]
 800cc0c:	e9db 2300 	ldrd	r2, r3, [fp]
 800cc10:	d111      	bne.n	800cc36 <__ieee754_sqrt+0x17e>
 800cc12:	3601      	adds	r6, #1
 800cc14:	463c      	mov	r4, r7
 800cc16:	1072      	asrs	r2, r6, #1
 800cc18:	0863      	lsrs	r3, r4, #1
 800cc1a:	07f1      	lsls	r1, r6, #31
 800cc1c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800cc20:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800cc24:	bf48      	it	mi
 800cc26:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800cc2a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800cc2e:	4618      	mov	r0, r3
 800cc30:	e756      	b.n	800cae0 <__ieee754_sqrt+0x28>
 800cc32:	4690      	mov	r8, r2
 800cc34:	e7be      	b.n	800cbb4 <__ieee754_sqrt+0xfc>
 800cc36:	f7f3 fb29 	bl	800028c <__adddf3>
 800cc3a:	e9da 8900 	ldrd	r8, r9, [sl]
 800cc3e:	4602      	mov	r2, r0
 800cc40:	460b      	mov	r3, r1
 800cc42:	4640      	mov	r0, r8
 800cc44:	4649      	mov	r1, r9
 800cc46:	f7f3 ff49 	bl	8000adc <__aeabi_dcmplt>
 800cc4a:	b120      	cbz	r0, 800cc56 <__ieee754_sqrt+0x19e>
 800cc4c:	1ca0      	adds	r0, r4, #2
 800cc4e:	bf08      	it	eq
 800cc50:	3601      	addeq	r6, #1
 800cc52:	3402      	adds	r4, #2
 800cc54:	e7df      	b.n	800cc16 <__ieee754_sqrt+0x15e>
 800cc56:	1c63      	adds	r3, r4, #1
 800cc58:	f023 0401 	bic.w	r4, r3, #1
 800cc5c:	e7db      	b.n	800cc16 <__ieee754_sqrt+0x15e>
 800cc5e:	bf00      	nop
 800cc60:	7ff00000 	.word	0x7ff00000
 800cc64:	200002d0 	.word	0x200002d0
 800cc68:	200002c8 	.word	0x200002c8

0800cc6c <__kernel_cosf>:
 800cc6c:	ee10 3a10 	vmov	r3, s0
 800cc70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cc74:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800cc78:	eef0 6a40 	vmov.f32	s13, s0
 800cc7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cc80:	d204      	bcs.n	800cc8c <__kernel_cosf+0x20>
 800cc82:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800cc86:	ee17 2a90 	vmov	r2, s15
 800cc8a:	b342      	cbz	r2, 800ccde <__kernel_cosf+0x72>
 800cc8c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800cc90:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ccfc <__kernel_cosf+0x90>
 800cc94:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800cd00 <__kernel_cosf+0x94>
 800cc98:	4a1a      	ldr	r2, [pc, #104]	@ (800cd04 <__kernel_cosf+0x98>)
 800cc9a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cd08 <__kernel_cosf+0x9c>
 800cca4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cca8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800cd0c <__kernel_cosf+0xa0>
 800ccac:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ccb0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800cd10 <__kernel_cosf+0xa4>
 800ccb4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ccb8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800cd14 <__kernel_cosf+0xa8>
 800ccbc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ccc0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ccc4:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ccc8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cccc:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ccd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccd4:	d804      	bhi.n	800cce0 <__kernel_cosf+0x74>
 800ccd6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ccda:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ccde:	4770      	bx	lr
 800cce0:	4a0d      	ldr	r2, [pc, #52]	@ (800cd18 <__kernel_cosf+0xac>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	bf9a      	itte	ls
 800cce6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ccea:	ee07 3a10 	vmovls	s14, r3
 800ccee:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ccf2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ccf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccfa:	e7ec      	b.n	800ccd6 <__kernel_cosf+0x6a>
 800ccfc:	ad47d74e 	.word	0xad47d74e
 800cd00:	310f74f6 	.word	0x310f74f6
 800cd04:	3e999999 	.word	0x3e999999
 800cd08:	b493f27c 	.word	0xb493f27c
 800cd0c:	37d00d01 	.word	0x37d00d01
 800cd10:	bab60b61 	.word	0xbab60b61
 800cd14:	3d2aaaab 	.word	0x3d2aaaab
 800cd18:	3f480000 	.word	0x3f480000

0800cd1c <__kernel_sinf>:
 800cd1c:	ee10 3a10 	vmov	r3, s0
 800cd20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cd24:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800cd28:	d204      	bcs.n	800cd34 <__kernel_sinf+0x18>
 800cd2a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cd2e:	ee17 3a90 	vmov	r3, s15
 800cd32:	b35b      	cbz	r3, 800cd8c <__kernel_sinf+0x70>
 800cd34:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cd38:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800cd90 <__kernel_sinf+0x74>
 800cd3c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800cd94 <__kernel_sinf+0x78>
 800cd40:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cd44:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800cd98 <__kernel_sinf+0x7c>
 800cd48:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cd4c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800cd9c <__kernel_sinf+0x80>
 800cd50:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cd54:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800cda0 <__kernel_sinf+0x84>
 800cd58:	ee60 6a07 	vmul.f32	s13, s0, s14
 800cd5c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cd60:	b930      	cbnz	r0, 800cd70 <__kernel_sinf+0x54>
 800cd62:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800cda4 <__kernel_sinf+0x88>
 800cd66:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cd6a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800cd6e:	4770      	bx	lr
 800cd70:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800cd74:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800cd78:	eee0 7a86 	vfma.f32	s15, s1, s12
 800cd7c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800cd80:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800cda8 <__kernel_sinf+0x8c>
 800cd84:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800cd88:	ee30 0a60 	vsub.f32	s0, s0, s1
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	2f2ec9d3 	.word	0x2f2ec9d3
 800cd94:	b2d72f34 	.word	0xb2d72f34
 800cd98:	3638ef1b 	.word	0x3638ef1b
 800cd9c:	b9500d01 	.word	0xb9500d01
 800cda0:	3c088889 	.word	0x3c088889
 800cda4:	be2aaaab 	.word	0xbe2aaaab
 800cda8:	3e2aaaab 	.word	0x3e2aaaab

0800cdac <__kernel_tanf>:
 800cdac:	b508      	push	{r3, lr}
 800cdae:	ee10 3a10 	vmov	r3, s0
 800cdb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800cdb6:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 800cdba:	eef0 7a40 	vmov.f32	s15, s0
 800cdbe:	d217      	bcs.n	800cdf0 <__kernel_tanf+0x44>
 800cdc0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800cdc4:	ee17 1a10 	vmov	r1, s14
 800cdc8:	bb41      	cbnz	r1, 800ce1c <__kernel_tanf+0x70>
 800cdca:	1c43      	adds	r3, r0, #1
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	d108      	bne.n	800cde2 <__kernel_tanf+0x36>
 800cdd0:	f000 fb70 	bl	800d4b4 <fabsf>
 800cdd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cdd8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cddc:	eeb0 0a67 	vmov.f32	s0, s15
 800cde0:	bd08      	pop	{r3, pc}
 800cde2:	2801      	cmp	r0, #1
 800cde4:	d0fa      	beq.n	800cddc <__kernel_tanf+0x30>
 800cde6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cdea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cdee:	e7f5      	b.n	800cddc <__kernel_tanf+0x30>
 800cdf0:	494c      	ldr	r1, [pc, #304]	@ (800cf24 <__kernel_tanf+0x178>)
 800cdf2:	428a      	cmp	r2, r1
 800cdf4:	d312      	bcc.n	800ce1c <__kernel_tanf+0x70>
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800cf28 <__kernel_tanf+0x17c>
 800cdfc:	bfb8      	it	lt
 800cdfe:	eef1 7a40 	vneglt.f32	s15, s0
 800ce02:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ce06:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800cf2c <__kernel_tanf+0x180>
 800ce0a:	bfb8      	it	lt
 800ce0c:	eef1 0a60 	vneglt.f32	s1, s1
 800ce10:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ce14:	eddf 0a46 	vldr	s1, [pc, #280]	@ 800cf30 <__kernel_tanf+0x184>
 800ce18:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce1c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800ce20:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800cf34 <__kernel_tanf+0x188>
 800ce24:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 800cf38 <__kernel_tanf+0x18c>
 800ce28:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 800cf3c <__kernel_tanf+0x190>
 800ce2c:	493d      	ldr	r1, [pc, #244]	@ (800cf24 <__kernel_tanf+0x178>)
 800ce2e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ce32:	428a      	cmp	r2, r1
 800ce34:	eea7 6a25 	vfma.f32	s12, s14, s11
 800ce38:	eddf 5a41 	vldr	s11, [pc, #260]	@ 800cf40 <__kernel_tanf+0x194>
 800ce3c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ce40:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800cf44 <__kernel_tanf+0x198>
 800ce44:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ce48:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800cf48 <__kernel_tanf+0x19c>
 800ce4c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ce50:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 800cf4c <__kernel_tanf+0x1a0>
 800ce54:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ce58:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800cf50 <__kernel_tanf+0x1a4>
 800ce5c:	eee7 5a05 	vfma.f32	s11, s14, s10
 800ce60:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800cf54 <__kernel_tanf+0x1a8>
 800ce64:	eea5 5a87 	vfma.f32	s10, s11, s14
 800ce68:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800cf58 <__kernel_tanf+0x1ac>
 800ce6c:	eee5 5a07 	vfma.f32	s11, s10, s14
 800ce70:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800cf5c <__kernel_tanf+0x1b0>
 800ce74:	eea5 5a87 	vfma.f32	s10, s11, s14
 800ce78:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800cf60 <__kernel_tanf+0x1b4>
 800ce7c:	eee5 5a07 	vfma.f32	s11, s10, s14
 800ce80:	eeb0 7a46 	vmov.f32	s14, s12
 800ce84:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ce88:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800ce8c:	eeb0 6a60 	vmov.f32	s12, s1
 800ce90:	eea7 6a05 	vfma.f32	s12, s14, s10
 800ce94:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800cf64 <__kernel_tanf+0x1b8>
 800ce98:	eee6 0a26 	vfma.f32	s1, s12, s13
 800ce9c:	eee5 0a07 	vfma.f32	s1, s10, s14
 800cea0:	ee37 6aa0 	vadd.f32	s12, s15, s1
 800cea4:	d31d      	bcc.n	800cee2 <__kernel_tanf+0x136>
 800cea6:	ee07 0a10 	vmov	s14, r0
 800ceaa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ceae:	ee26 5a06 	vmul.f32	s10, s12, s12
 800ceb2:	ee36 6a07 	vadd.f32	s12, s12, s14
 800ceb6:	179b      	asrs	r3, r3, #30
 800ceb8:	eec5 5a06 	vdiv.f32	s11, s10, s12
 800cebc:	f003 0302 	and.w	r3, r3, #2
 800cec0:	f1c3 0301 	rsb	r3, r3, #1
 800cec4:	ee06 3a90 	vmov	s13, r3
 800cec8:	ee35 6ae0 	vsub.f32	s12, s11, s1
 800cecc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ced0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ced4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800ced8:	eea7 7ac6 	vfms.f32	s14, s15, s12
 800cedc:	ee66 7a87 	vmul.f32	s15, s13, s14
 800cee0:	e77c      	b.n	800cddc <__kernel_tanf+0x30>
 800cee2:	2801      	cmp	r0, #1
 800cee4:	d01b      	beq.n	800cf1e <__kernel_tanf+0x172>
 800cee6:	4b20      	ldr	r3, [pc, #128]	@ (800cf68 <__kernel_tanf+0x1bc>)
 800cee8:	ee16 2a10 	vmov	r2, s12
 800ceec:	401a      	ands	r2, r3
 800ceee:	ee05 2a90 	vmov	s11, r2
 800cef2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800cef6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cefa:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800cefe:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800cf02:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800cf06:	ee16 2a90 	vmov	r2, s13
 800cf0a:	4013      	ands	r3, r2
 800cf0c:	ee07 3a90 	vmov	s15, r3
 800cf10:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cf14:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800cf18:	eee7 7a26 	vfma.f32	s15, s14, s13
 800cf1c:	e75e      	b.n	800cddc <__kernel_tanf+0x30>
 800cf1e:	eef0 7a46 	vmov.f32	s15, s12
 800cf22:	e75b      	b.n	800cddc <__kernel_tanf+0x30>
 800cf24:	3f2ca140 	.word	0x3f2ca140
 800cf28:	3f490fda 	.word	0x3f490fda
 800cf2c:	33222168 	.word	0x33222168
 800cf30:	00000000 	.word	0x00000000
 800cf34:	b79bae5f 	.word	0xb79bae5f
 800cf38:	38a3f445 	.word	0x38a3f445
 800cf3c:	37d95384 	.word	0x37d95384
 800cf40:	3a1a26c8 	.word	0x3a1a26c8
 800cf44:	3b6b6916 	.word	0x3b6b6916
 800cf48:	3cb327a4 	.word	0x3cb327a4
 800cf4c:	3e088889 	.word	0x3e088889
 800cf50:	3895c07a 	.word	0x3895c07a
 800cf54:	398137b9 	.word	0x398137b9
 800cf58:	3abede48 	.word	0x3abede48
 800cf5c:	3c11371f 	.word	0x3c11371f
 800cf60:	3d5d0dd1 	.word	0x3d5d0dd1
 800cf64:	3eaaaaab 	.word	0x3eaaaaab
 800cf68:	fffff000 	.word	0xfffff000

0800cf6c <__ieee754_atan2f>:
 800cf6c:	ee10 2a90 	vmov	r2, s1
 800cf70:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800cf74:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cf78:	b510      	push	{r4, lr}
 800cf7a:	eef0 7a40 	vmov.f32	s15, s0
 800cf7e:	d806      	bhi.n	800cf8e <__ieee754_atan2f+0x22>
 800cf80:	ee10 0a10 	vmov	r0, s0
 800cf84:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800cf88:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cf8c:	d904      	bls.n	800cf98 <__ieee754_atan2f+0x2c>
 800cf8e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800cf92:	eeb0 0a67 	vmov.f32	s0, s15
 800cf96:	bd10      	pop	{r4, pc}
 800cf98:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800cf9c:	d103      	bne.n	800cfa6 <__ieee754_atan2f+0x3a>
 800cf9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfa2:	f000 b9b3 	b.w	800d30c <atanf>
 800cfa6:	1794      	asrs	r4, r2, #30
 800cfa8:	f004 0402 	and.w	r4, r4, #2
 800cfac:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800cfb0:	b943      	cbnz	r3, 800cfc4 <__ieee754_atan2f+0x58>
 800cfb2:	2c02      	cmp	r4, #2
 800cfb4:	d05e      	beq.n	800d074 <__ieee754_atan2f+0x108>
 800cfb6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d088 <__ieee754_atan2f+0x11c>
 800cfba:	2c03      	cmp	r4, #3
 800cfbc:	bf08      	it	eq
 800cfbe:	eef0 7a47 	vmoveq.f32	s15, s14
 800cfc2:	e7e6      	b.n	800cf92 <__ieee754_atan2f+0x26>
 800cfc4:	b941      	cbnz	r1, 800cfd8 <__ieee754_atan2f+0x6c>
 800cfc6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800d08c <__ieee754_atan2f+0x120>
 800cfca:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d090 <__ieee754_atan2f+0x124>
 800cfce:	2800      	cmp	r0, #0
 800cfd0:	bfb8      	it	lt
 800cfd2:	eef0 7a47 	vmovlt.f32	s15, s14
 800cfd6:	e7dc      	b.n	800cf92 <__ieee754_atan2f+0x26>
 800cfd8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cfdc:	d110      	bne.n	800d000 <__ieee754_atan2f+0x94>
 800cfde:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cfe2:	f104 34ff 	add.w	r4, r4, #4294967295
 800cfe6:	d107      	bne.n	800cff8 <__ieee754_atan2f+0x8c>
 800cfe8:	2c02      	cmp	r4, #2
 800cfea:	d846      	bhi.n	800d07a <__ieee754_atan2f+0x10e>
 800cfec:	4b29      	ldr	r3, [pc, #164]	@ (800d094 <__ieee754_atan2f+0x128>)
 800cfee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cff2:	edd3 7a00 	vldr	s15, [r3]
 800cff6:	e7cc      	b.n	800cf92 <__ieee754_atan2f+0x26>
 800cff8:	2c02      	cmp	r4, #2
 800cffa:	d841      	bhi.n	800d080 <__ieee754_atan2f+0x114>
 800cffc:	4b26      	ldr	r3, [pc, #152]	@ (800d098 <__ieee754_atan2f+0x12c>)
 800cffe:	e7f6      	b.n	800cfee <__ieee754_atan2f+0x82>
 800d000:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d004:	d0df      	beq.n	800cfc6 <__ieee754_atan2f+0x5a>
 800d006:	1a5b      	subs	r3, r3, r1
 800d008:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800d00c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d010:	da1a      	bge.n	800d048 <__ieee754_atan2f+0xdc>
 800d012:	2a00      	cmp	r2, #0
 800d014:	da01      	bge.n	800d01a <__ieee754_atan2f+0xae>
 800d016:	313c      	adds	r1, #60	@ 0x3c
 800d018:	db19      	blt.n	800d04e <__ieee754_atan2f+0xe2>
 800d01a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d01e:	f000 fa49 	bl	800d4b4 <fabsf>
 800d022:	f000 f973 	bl	800d30c <atanf>
 800d026:	eef0 7a40 	vmov.f32	s15, s0
 800d02a:	2c01      	cmp	r4, #1
 800d02c:	d012      	beq.n	800d054 <__ieee754_atan2f+0xe8>
 800d02e:	2c02      	cmp	r4, #2
 800d030:	d017      	beq.n	800d062 <__ieee754_atan2f+0xf6>
 800d032:	2c00      	cmp	r4, #0
 800d034:	d0ad      	beq.n	800cf92 <__ieee754_atan2f+0x26>
 800d036:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d09c <__ieee754_atan2f+0x130>
 800d03a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d03e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800d0a0 <__ieee754_atan2f+0x134>
 800d042:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d046:	e7a4      	b.n	800cf92 <__ieee754_atan2f+0x26>
 800d048:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800d08c <__ieee754_atan2f+0x120>
 800d04c:	e7ed      	b.n	800d02a <__ieee754_atan2f+0xbe>
 800d04e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d0a4 <__ieee754_atan2f+0x138>
 800d052:	e7ea      	b.n	800d02a <__ieee754_atan2f+0xbe>
 800d054:	ee17 3a90 	vmov	r3, s15
 800d058:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d05c:	ee07 3a90 	vmov	s15, r3
 800d060:	e797      	b.n	800cf92 <__ieee754_atan2f+0x26>
 800d062:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d09c <__ieee754_atan2f+0x130>
 800d066:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d06a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800d0a0 <__ieee754_atan2f+0x134>
 800d06e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d072:	e78e      	b.n	800cf92 <__ieee754_atan2f+0x26>
 800d074:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d0a0 <__ieee754_atan2f+0x134>
 800d078:	e78b      	b.n	800cf92 <__ieee754_atan2f+0x26>
 800d07a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800d0a8 <__ieee754_atan2f+0x13c>
 800d07e:	e788      	b.n	800cf92 <__ieee754_atan2f+0x26>
 800d080:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d0a4 <__ieee754_atan2f+0x138>
 800d084:	e785      	b.n	800cf92 <__ieee754_atan2f+0x26>
 800d086:	bf00      	nop
 800d088:	c0490fdb 	.word	0xc0490fdb
 800d08c:	3fc90fdb 	.word	0x3fc90fdb
 800d090:	bfc90fdb 	.word	0xbfc90fdb
 800d094:	0800df0c 	.word	0x0800df0c
 800d098:	0800df00 	.word	0x0800df00
 800d09c:	33bbbd2e 	.word	0x33bbbd2e
 800d0a0:	40490fdb 	.word	0x40490fdb
 800d0a4:	00000000 	.word	0x00000000
 800d0a8:	3f490fdb 	.word	0x3f490fdb

0800d0ac <__ieee754_rem_pio2f>:
 800d0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0ae:	ee10 6a10 	vmov	r6, s0
 800d0b2:	4b88      	ldr	r3, [pc, #544]	@ (800d2d4 <__ieee754_rem_pio2f+0x228>)
 800d0b4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d0b8:	429d      	cmp	r5, r3
 800d0ba:	b087      	sub	sp, #28
 800d0bc:	4604      	mov	r4, r0
 800d0be:	d805      	bhi.n	800d0cc <__ieee754_rem_pio2f+0x20>
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	ed80 0a00 	vstr	s0, [r0]
 800d0c6:	6043      	str	r3, [r0, #4]
 800d0c8:	2000      	movs	r0, #0
 800d0ca:	e022      	b.n	800d112 <__ieee754_rem_pio2f+0x66>
 800d0cc:	4b82      	ldr	r3, [pc, #520]	@ (800d2d8 <__ieee754_rem_pio2f+0x22c>)
 800d0ce:	429d      	cmp	r5, r3
 800d0d0:	d83a      	bhi.n	800d148 <__ieee754_rem_pio2f+0x9c>
 800d0d2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d0d6:	2e00      	cmp	r6, #0
 800d0d8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800d2dc <__ieee754_rem_pio2f+0x230>
 800d0dc:	4a80      	ldr	r2, [pc, #512]	@ (800d2e0 <__ieee754_rem_pio2f+0x234>)
 800d0de:	f023 030f 	bic.w	r3, r3, #15
 800d0e2:	dd18      	ble.n	800d116 <__ieee754_rem_pio2f+0x6a>
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d0ea:	bf09      	itett	eq
 800d0ec:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800d2e4 <__ieee754_rem_pio2f+0x238>
 800d0f0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800d2e8 <__ieee754_rem_pio2f+0x23c>
 800d0f4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800d2ec <__ieee754_rem_pio2f+0x240>
 800d0f8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d0fc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d104:	ed80 7a00 	vstr	s14, [r0]
 800d108:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d10c:	edc0 7a01 	vstr	s15, [r0, #4]
 800d110:	2001      	movs	r0, #1
 800d112:	b007      	add	sp, #28
 800d114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d116:	4293      	cmp	r3, r2
 800d118:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d11c:	bf09      	itett	eq
 800d11e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800d2e4 <__ieee754_rem_pio2f+0x238>
 800d122:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800d2e8 <__ieee754_rem_pio2f+0x23c>
 800d126:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800d2ec <__ieee754_rem_pio2f+0x240>
 800d12a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d12e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d132:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d136:	ed80 7a00 	vstr	s14, [r0]
 800d13a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d13e:	edc0 7a01 	vstr	s15, [r0, #4]
 800d142:	f04f 30ff 	mov.w	r0, #4294967295
 800d146:	e7e4      	b.n	800d112 <__ieee754_rem_pio2f+0x66>
 800d148:	4b69      	ldr	r3, [pc, #420]	@ (800d2f0 <__ieee754_rem_pio2f+0x244>)
 800d14a:	429d      	cmp	r5, r3
 800d14c:	d873      	bhi.n	800d236 <__ieee754_rem_pio2f+0x18a>
 800d14e:	f000 f9b1 	bl	800d4b4 <fabsf>
 800d152:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d2f4 <__ieee754_rem_pio2f+0x248>
 800d156:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d15a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d15e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d166:	ee17 0a90 	vmov	r0, s15
 800d16a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d2dc <__ieee754_rem_pio2f+0x230>
 800d16e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d172:	281f      	cmp	r0, #31
 800d174:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d2e8 <__ieee754_rem_pio2f+0x23c>
 800d178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d17c:	eeb1 6a47 	vneg.f32	s12, s14
 800d180:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d184:	ee16 1a90 	vmov	r1, s13
 800d188:	dc09      	bgt.n	800d19e <__ieee754_rem_pio2f+0xf2>
 800d18a:	4a5b      	ldr	r2, [pc, #364]	@ (800d2f8 <__ieee754_rem_pio2f+0x24c>)
 800d18c:	1e47      	subs	r7, r0, #1
 800d18e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d192:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d196:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d107      	bne.n	800d1ae <__ieee754_rem_pio2f+0x102>
 800d19e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d1a2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d1a6:	2a08      	cmp	r2, #8
 800d1a8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d1ac:	dc14      	bgt.n	800d1d8 <__ieee754_rem_pio2f+0x12c>
 800d1ae:	6021      	str	r1, [r4, #0]
 800d1b0:	ed94 7a00 	vldr	s14, [r4]
 800d1b4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d1b8:	2e00      	cmp	r6, #0
 800d1ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d1be:	ed84 0a01 	vstr	s0, [r4, #4]
 800d1c2:	daa6      	bge.n	800d112 <__ieee754_rem_pio2f+0x66>
 800d1c4:	eeb1 7a47 	vneg.f32	s14, s14
 800d1c8:	eeb1 0a40 	vneg.f32	s0, s0
 800d1cc:	ed84 7a00 	vstr	s14, [r4]
 800d1d0:	ed84 0a01 	vstr	s0, [r4, #4]
 800d1d4:	4240      	negs	r0, r0
 800d1d6:	e79c      	b.n	800d112 <__ieee754_rem_pio2f+0x66>
 800d1d8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800d2e4 <__ieee754_rem_pio2f+0x238>
 800d1dc:	eef0 6a40 	vmov.f32	s13, s0
 800d1e0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d1e4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d1e8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d1ec:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d2ec <__ieee754_rem_pio2f+0x240>
 800d1f0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d1f4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d1f8:	ee15 2a90 	vmov	r2, s11
 800d1fc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d200:	1a5b      	subs	r3, r3, r1
 800d202:	2b19      	cmp	r3, #25
 800d204:	dc04      	bgt.n	800d210 <__ieee754_rem_pio2f+0x164>
 800d206:	edc4 5a00 	vstr	s11, [r4]
 800d20a:	eeb0 0a66 	vmov.f32	s0, s13
 800d20e:	e7cf      	b.n	800d1b0 <__ieee754_rem_pio2f+0x104>
 800d210:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d2fc <__ieee754_rem_pio2f+0x250>
 800d214:	eeb0 0a66 	vmov.f32	s0, s13
 800d218:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d21c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d220:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d300 <__ieee754_rem_pio2f+0x254>
 800d224:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d228:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d22c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d230:	ed84 7a00 	vstr	s14, [r4]
 800d234:	e7bc      	b.n	800d1b0 <__ieee754_rem_pio2f+0x104>
 800d236:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d23a:	d306      	bcc.n	800d24a <__ieee754_rem_pio2f+0x19e>
 800d23c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d240:	edc0 7a01 	vstr	s15, [r0, #4]
 800d244:	edc0 7a00 	vstr	s15, [r0]
 800d248:	e73e      	b.n	800d0c8 <__ieee754_rem_pio2f+0x1c>
 800d24a:	15ea      	asrs	r2, r5, #23
 800d24c:	3a86      	subs	r2, #134	@ 0x86
 800d24e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d252:	ee07 3a90 	vmov	s15, r3
 800d256:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d25a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d304 <__ieee754_rem_pio2f+0x258>
 800d25e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d262:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d266:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d26a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d26e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d272:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d276:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d27a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d27e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d282:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d28a:	edcd 7a05 	vstr	s15, [sp, #20]
 800d28e:	d11e      	bne.n	800d2ce <__ieee754_rem_pio2f+0x222>
 800d290:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d298:	bf0c      	ite	eq
 800d29a:	2301      	moveq	r3, #1
 800d29c:	2302      	movne	r3, #2
 800d29e:	491a      	ldr	r1, [pc, #104]	@ (800d308 <__ieee754_rem_pio2f+0x25c>)
 800d2a0:	9101      	str	r1, [sp, #4]
 800d2a2:	2102      	movs	r1, #2
 800d2a4:	9100      	str	r1, [sp, #0]
 800d2a6:	a803      	add	r0, sp, #12
 800d2a8:	4621      	mov	r1, r4
 800d2aa:	f000 f90b 	bl	800d4c4 <__kernel_rem_pio2f>
 800d2ae:	2e00      	cmp	r6, #0
 800d2b0:	f6bf af2f 	bge.w	800d112 <__ieee754_rem_pio2f+0x66>
 800d2b4:	edd4 7a00 	vldr	s15, [r4]
 800d2b8:	eef1 7a67 	vneg.f32	s15, s15
 800d2bc:	edc4 7a00 	vstr	s15, [r4]
 800d2c0:	edd4 7a01 	vldr	s15, [r4, #4]
 800d2c4:	eef1 7a67 	vneg.f32	s15, s15
 800d2c8:	edc4 7a01 	vstr	s15, [r4, #4]
 800d2cc:	e782      	b.n	800d1d4 <__ieee754_rem_pio2f+0x128>
 800d2ce:	2303      	movs	r3, #3
 800d2d0:	e7e5      	b.n	800d29e <__ieee754_rem_pio2f+0x1f2>
 800d2d2:	bf00      	nop
 800d2d4:	3f490fd8 	.word	0x3f490fd8
 800d2d8:	4016cbe3 	.word	0x4016cbe3
 800d2dc:	3fc90f80 	.word	0x3fc90f80
 800d2e0:	3fc90fd0 	.word	0x3fc90fd0
 800d2e4:	37354400 	.word	0x37354400
 800d2e8:	37354443 	.word	0x37354443
 800d2ec:	2e85a308 	.word	0x2e85a308
 800d2f0:	43490f80 	.word	0x43490f80
 800d2f4:	3f22f984 	.word	0x3f22f984
 800d2f8:	0800df18 	.word	0x0800df18
 800d2fc:	2e85a300 	.word	0x2e85a300
 800d300:	248d3132 	.word	0x248d3132
 800d304:	43800000 	.word	0x43800000
 800d308:	0800df98 	.word	0x0800df98

0800d30c <atanf>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	ee10 5a10 	vmov	r5, s0
 800d312:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d316:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d31a:	eef0 7a40 	vmov.f32	s15, s0
 800d31e:	d310      	bcc.n	800d342 <atanf+0x36>
 800d320:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d324:	d904      	bls.n	800d330 <atanf+0x24>
 800d326:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d32a:	eeb0 0a67 	vmov.f32	s0, s15
 800d32e:	bd38      	pop	{r3, r4, r5, pc}
 800d330:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d468 <atanf+0x15c>
 800d334:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d46c <atanf+0x160>
 800d338:	2d00      	cmp	r5, #0
 800d33a:	bfc8      	it	gt
 800d33c:	eef0 7a47 	vmovgt.f32	s15, s14
 800d340:	e7f3      	b.n	800d32a <atanf+0x1e>
 800d342:	4b4b      	ldr	r3, [pc, #300]	@ (800d470 <atanf+0x164>)
 800d344:	429c      	cmp	r4, r3
 800d346:	d810      	bhi.n	800d36a <atanf+0x5e>
 800d348:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d34c:	d20a      	bcs.n	800d364 <atanf+0x58>
 800d34e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d474 <atanf+0x168>
 800d352:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d35a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d362:	dce2      	bgt.n	800d32a <atanf+0x1e>
 800d364:	f04f 33ff 	mov.w	r3, #4294967295
 800d368:	e013      	b.n	800d392 <atanf+0x86>
 800d36a:	f000 f8a3 	bl	800d4b4 <fabsf>
 800d36e:	4b42      	ldr	r3, [pc, #264]	@ (800d478 <atanf+0x16c>)
 800d370:	429c      	cmp	r4, r3
 800d372:	d84f      	bhi.n	800d414 <atanf+0x108>
 800d374:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d378:	429c      	cmp	r4, r3
 800d37a:	d841      	bhi.n	800d400 <atanf+0xf4>
 800d37c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d380:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d384:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d388:	2300      	movs	r3, #0
 800d38a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d38e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d398:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800d47c <atanf+0x170>
 800d39c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800d480 <atanf+0x174>
 800d3a0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800d484 <atanf+0x178>
 800d3a4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d3a8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d3ac:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d488 <atanf+0x17c>
 800d3b0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d3b4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800d48c <atanf+0x180>
 800d3b8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d3bc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d490 <atanf+0x184>
 800d3c0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d3c4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d494 <atanf+0x188>
 800d3c8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d3cc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d498 <atanf+0x18c>
 800d3d0:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d3d4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d49c <atanf+0x190>
 800d3d8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d3dc:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800d4a0 <atanf+0x194>
 800d3e0:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d3e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800d4a4 <atanf+0x198>
 800d3e8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d3ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d3f0:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d3f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d3f8:	d121      	bne.n	800d43e <atanf+0x132>
 800d3fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3fe:	e794      	b.n	800d32a <atanf+0x1e>
 800d400:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d404:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d408:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d40c:	2301      	movs	r3, #1
 800d40e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d412:	e7be      	b.n	800d392 <atanf+0x86>
 800d414:	4b24      	ldr	r3, [pc, #144]	@ (800d4a8 <atanf+0x19c>)
 800d416:	429c      	cmp	r4, r3
 800d418:	d80b      	bhi.n	800d432 <atanf+0x126>
 800d41a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d41e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d422:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d426:	2302      	movs	r3, #2
 800d428:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d42c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d430:	e7af      	b.n	800d392 <atanf+0x86>
 800d432:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d436:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d43a:	2303      	movs	r3, #3
 800d43c:	e7a9      	b.n	800d392 <atanf+0x86>
 800d43e:	4a1b      	ldr	r2, [pc, #108]	@ (800d4ac <atanf+0x1a0>)
 800d440:	491b      	ldr	r1, [pc, #108]	@ (800d4b0 <atanf+0x1a4>)
 800d442:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d446:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d44a:	edd3 6a00 	vldr	s13, [r3]
 800d44e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d452:	2d00      	cmp	r5, #0
 800d454:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d458:	edd2 7a00 	vldr	s15, [r2]
 800d45c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d460:	bfb8      	it	lt
 800d462:	eef1 7a67 	vneglt.f32	s15, s15
 800d466:	e760      	b.n	800d32a <atanf+0x1e>
 800d468:	bfc90fdb 	.word	0xbfc90fdb
 800d46c:	3fc90fdb 	.word	0x3fc90fdb
 800d470:	3edfffff 	.word	0x3edfffff
 800d474:	7149f2ca 	.word	0x7149f2ca
 800d478:	3f97ffff 	.word	0x3f97ffff
 800d47c:	3c8569d7 	.word	0x3c8569d7
 800d480:	3d4bda59 	.word	0x3d4bda59
 800d484:	bd6ef16b 	.word	0xbd6ef16b
 800d488:	3d886b35 	.word	0x3d886b35
 800d48c:	3dba2e6e 	.word	0x3dba2e6e
 800d490:	3e124925 	.word	0x3e124925
 800d494:	3eaaaaab 	.word	0x3eaaaaab
 800d498:	bd15a221 	.word	0xbd15a221
 800d49c:	bd9d8795 	.word	0xbd9d8795
 800d4a0:	bde38e38 	.word	0xbde38e38
 800d4a4:	be4ccccd 	.word	0xbe4ccccd
 800d4a8:	401bffff 	.word	0x401bffff
 800d4ac:	0800e2c0 	.word	0x0800e2c0
 800d4b0:	0800e2b0 	.word	0x0800e2b0

0800d4b4 <fabsf>:
 800d4b4:	ee10 3a10 	vmov	r3, s0
 800d4b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d4bc:	ee00 3a10 	vmov	s0, r3
 800d4c0:	4770      	bx	lr
	...

0800d4c4 <__kernel_rem_pio2f>:
 800d4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c8:	ed2d 8b04 	vpush	{d8-d9}
 800d4cc:	b0d9      	sub	sp, #356	@ 0x164
 800d4ce:	4690      	mov	r8, r2
 800d4d0:	9001      	str	r0, [sp, #4]
 800d4d2:	4ab9      	ldr	r2, [pc, #740]	@ (800d7b8 <__kernel_rem_pio2f+0x2f4>)
 800d4d4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d4d6:	f118 0f04 	cmn.w	r8, #4
 800d4da:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d4de:	460f      	mov	r7, r1
 800d4e0:	f103 3bff 	add.w	fp, r3, #4294967295
 800d4e4:	db27      	blt.n	800d536 <__kernel_rem_pio2f+0x72>
 800d4e6:	f1b8 0203 	subs.w	r2, r8, #3
 800d4ea:	bf48      	it	mi
 800d4ec:	f108 0204 	addmi.w	r2, r8, #4
 800d4f0:	10d2      	asrs	r2, r2, #3
 800d4f2:	1c55      	adds	r5, r2, #1
 800d4f4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d4f6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800d7c8 <__kernel_rem_pio2f+0x304>
 800d4fa:	00e8      	lsls	r0, r5, #3
 800d4fc:	eba2 060b 	sub.w	r6, r2, fp
 800d500:	9002      	str	r0, [sp, #8]
 800d502:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d506:	eb0a 0c0b 	add.w	ip, sl, fp
 800d50a:	ac1c      	add	r4, sp, #112	@ 0x70
 800d50c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d510:	2000      	movs	r0, #0
 800d512:	4560      	cmp	r0, ip
 800d514:	dd11      	ble.n	800d53a <__kernel_rem_pio2f+0x76>
 800d516:	a91c      	add	r1, sp, #112	@ 0x70
 800d518:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d51c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d520:	f04f 0c00 	mov.w	ip, #0
 800d524:	45d4      	cmp	ip, sl
 800d526:	dc27      	bgt.n	800d578 <__kernel_rem_pio2f+0xb4>
 800d528:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d52c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800d7c8 <__kernel_rem_pio2f+0x304>
 800d530:	4606      	mov	r6, r0
 800d532:	2400      	movs	r4, #0
 800d534:	e016      	b.n	800d564 <__kernel_rem_pio2f+0xa0>
 800d536:	2200      	movs	r2, #0
 800d538:	e7db      	b.n	800d4f2 <__kernel_rem_pio2f+0x2e>
 800d53a:	42c6      	cmn	r6, r0
 800d53c:	bf5d      	ittte	pl
 800d53e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d542:	ee07 1a90 	vmovpl	s15, r1
 800d546:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d54a:	eef0 7a47 	vmovmi.f32	s15, s14
 800d54e:	ece4 7a01 	vstmia	r4!, {s15}
 800d552:	3001      	adds	r0, #1
 800d554:	e7dd      	b.n	800d512 <__kernel_rem_pio2f+0x4e>
 800d556:	ecfe 6a01 	vldmia	lr!, {s13}
 800d55a:	ed96 7a00 	vldr	s14, [r6]
 800d55e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d562:	3401      	adds	r4, #1
 800d564:	455c      	cmp	r4, fp
 800d566:	f1a6 0604 	sub.w	r6, r6, #4
 800d56a:	ddf4      	ble.n	800d556 <__kernel_rem_pio2f+0x92>
 800d56c:	ece9 7a01 	vstmia	r9!, {s15}
 800d570:	f10c 0c01 	add.w	ip, ip, #1
 800d574:	3004      	adds	r0, #4
 800d576:	e7d5      	b.n	800d524 <__kernel_rem_pio2f+0x60>
 800d578:	a908      	add	r1, sp, #32
 800d57a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d57e:	9104      	str	r1, [sp, #16]
 800d580:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d582:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800d7c4 <__kernel_rem_pio2f+0x300>
 800d586:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800d7c0 <__kernel_rem_pio2f+0x2fc>
 800d58a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d58e:	9203      	str	r2, [sp, #12]
 800d590:	4654      	mov	r4, sl
 800d592:	00a2      	lsls	r2, r4, #2
 800d594:	9205      	str	r2, [sp, #20]
 800d596:	aa58      	add	r2, sp, #352	@ 0x160
 800d598:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d59c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d5a0:	a944      	add	r1, sp, #272	@ 0x110
 800d5a2:	aa08      	add	r2, sp, #32
 800d5a4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d5a8:	4694      	mov	ip, r2
 800d5aa:	4626      	mov	r6, r4
 800d5ac:	2e00      	cmp	r6, #0
 800d5ae:	f1a0 0004 	sub.w	r0, r0, #4
 800d5b2:	dc4c      	bgt.n	800d64e <__kernel_rem_pio2f+0x18a>
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d5ba:	f000 f9f5 	bl	800d9a8 <scalbnf>
 800d5be:	eeb0 8a40 	vmov.f32	s16, s0
 800d5c2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d5c6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d5ca:	f000 fa53 	bl	800da74 <floorf>
 800d5ce:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d5d2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d5d6:	2d00      	cmp	r5, #0
 800d5d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5dc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d5e0:	ee17 9a90 	vmov	r9, s15
 800d5e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5e8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d5ec:	dd41      	ble.n	800d672 <__kernel_rem_pio2f+0x1ae>
 800d5ee:	f104 3cff 	add.w	ip, r4, #4294967295
 800d5f2:	a908      	add	r1, sp, #32
 800d5f4:	f1c5 0e08 	rsb	lr, r5, #8
 800d5f8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d5fc:	fa46 f00e 	asr.w	r0, r6, lr
 800d600:	4481      	add	r9, r0
 800d602:	fa00 f00e 	lsl.w	r0, r0, lr
 800d606:	1a36      	subs	r6, r6, r0
 800d608:	f1c5 0007 	rsb	r0, r5, #7
 800d60c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d610:	4106      	asrs	r6, r0
 800d612:	2e00      	cmp	r6, #0
 800d614:	dd3c      	ble.n	800d690 <__kernel_rem_pio2f+0x1cc>
 800d616:	f04f 0e00 	mov.w	lr, #0
 800d61a:	f109 0901 	add.w	r9, r9, #1
 800d61e:	4670      	mov	r0, lr
 800d620:	4574      	cmp	r4, lr
 800d622:	dc68      	bgt.n	800d6f6 <__kernel_rem_pio2f+0x232>
 800d624:	2d00      	cmp	r5, #0
 800d626:	dd03      	ble.n	800d630 <__kernel_rem_pio2f+0x16c>
 800d628:	2d01      	cmp	r5, #1
 800d62a:	d074      	beq.n	800d716 <__kernel_rem_pio2f+0x252>
 800d62c:	2d02      	cmp	r5, #2
 800d62e:	d07d      	beq.n	800d72c <__kernel_rem_pio2f+0x268>
 800d630:	2e02      	cmp	r6, #2
 800d632:	d12d      	bne.n	800d690 <__kernel_rem_pio2f+0x1cc>
 800d634:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d638:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d63c:	b340      	cbz	r0, 800d690 <__kernel_rem_pio2f+0x1cc>
 800d63e:	4628      	mov	r0, r5
 800d640:	9306      	str	r3, [sp, #24]
 800d642:	f000 f9b1 	bl	800d9a8 <scalbnf>
 800d646:	9b06      	ldr	r3, [sp, #24]
 800d648:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d64c:	e020      	b.n	800d690 <__kernel_rem_pio2f+0x1cc>
 800d64e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d652:	3e01      	subs	r6, #1
 800d654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d65c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d660:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d664:	ecac 0a01 	vstmia	ip!, {s0}
 800d668:	ed90 0a00 	vldr	s0, [r0]
 800d66c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d670:	e79c      	b.n	800d5ac <__kernel_rem_pio2f+0xe8>
 800d672:	d105      	bne.n	800d680 <__kernel_rem_pio2f+0x1bc>
 800d674:	1e60      	subs	r0, r4, #1
 800d676:	a908      	add	r1, sp, #32
 800d678:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d67c:	11f6      	asrs	r6, r6, #7
 800d67e:	e7c8      	b.n	800d612 <__kernel_rem_pio2f+0x14e>
 800d680:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d684:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d68c:	da31      	bge.n	800d6f2 <__kernel_rem_pio2f+0x22e>
 800d68e:	2600      	movs	r6, #0
 800d690:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d698:	f040 8098 	bne.w	800d7cc <__kernel_rem_pio2f+0x308>
 800d69c:	1e60      	subs	r0, r4, #1
 800d69e:	2200      	movs	r2, #0
 800d6a0:	4550      	cmp	r0, sl
 800d6a2:	da4b      	bge.n	800d73c <__kernel_rem_pio2f+0x278>
 800d6a4:	2a00      	cmp	r2, #0
 800d6a6:	d065      	beq.n	800d774 <__kernel_rem_pio2f+0x2b0>
 800d6a8:	3c01      	subs	r4, #1
 800d6aa:	ab08      	add	r3, sp, #32
 800d6ac:	3d08      	subs	r5, #8
 800d6ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d0f8      	beq.n	800d6a8 <__kernel_rem_pio2f+0x1e4>
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d6bc:	f000 f974 	bl	800d9a8 <scalbnf>
 800d6c0:	1c63      	adds	r3, r4, #1
 800d6c2:	aa44      	add	r2, sp, #272	@ 0x110
 800d6c4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d7c4 <__kernel_rem_pio2f+0x300>
 800d6c8:	0099      	lsls	r1, r3, #2
 800d6ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d6ce:	4623      	mov	r3, r4
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	f280 80a9 	bge.w	800d828 <__kernel_rem_pio2f+0x364>
 800d6d6:	4623      	mov	r3, r4
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f2c0 80c7 	blt.w	800d86c <__kernel_rem_pio2f+0x3a8>
 800d6de:	aa44      	add	r2, sp, #272	@ 0x110
 800d6e0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d6e4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d7bc <__kernel_rem_pio2f+0x2f8>
 800d6e8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d7c8 <__kernel_rem_pio2f+0x304>
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	1ae2      	subs	r2, r4, r3
 800d6f0:	e0b1      	b.n	800d856 <__kernel_rem_pio2f+0x392>
 800d6f2:	2602      	movs	r6, #2
 800d6f4:	e78f      	b.n	800d616 <__kernel_rem_pio2f+0x152>
 800d6f6:	f852 1b04 	ldr.w	r1, [r2], #4
 800d6fa:	b948      	cbnz	r0, 800d710 <__kernel_rem_pio2f+0x24c>
 800d6fc:	b121      	cbz	r1, 800d708 <__kernel_rem_pio2f+0x244>
 800d6fe:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d702:	f842 1c04 	str.w	r1, [r2, #-4]
 800d706:	2101      	movs	r1, #1
 800d708:	f10e 0e01 	add.w	lr, lr, #1
 800d70c:	4608      	mov	r0, r1
 800d70e:	e787      	b.n	800d620 <__kernel_rem_pio2f+0x15c>
 800d710:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d714:	e7f5      	b.n	800d702 <__kernel_rem_pio2f+0x23e>
 800d716:	f104 3cff 	add.w	ip, r4, #4294967295
 800d71a:	aa08      	add	r2, sp, #32
 800d71c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d720:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d724:	a908      	add	r1, sp, #32
 800d726:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d72a:	e781      	b.n	800d630 <__kernel_rem_pio2f+0x16c>
 800d72c:	f104 3cff 	add.w	ip, r4, #4294967295
 800d730:	aa08      	add	r2, sp, #32
 800d732:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d736:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d73a:	e7f3      	b.n	800d724 <__kernel_rem_pio2f+0x260>
 800d73c:	a908      	add	r1, sp, #32
 800d73e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d742:	3801      	subs	r0, #1
 800d744:	430a      	orrs	r2, r1
 800d746:	e7ab      	b.n	800d6a0 <__kernel_rem_pio2f+0x1dc>
 800d748:	3201      	adds	r2, #1
 800d74a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d74e:	2e00      	cmp	r6, #0
 800d750:	d0fa      	beq.n	800d748 <__kernel_rem_pio2f+0x284>
 800d752:	9905      	ldr	r1, [sp, #20]
 800d754:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d758:	eb0d 0001 	add.w	r0, sp, r1
 800d75c:	18e6      	adds	r6, r4, r3
 800d75e:	a91c      	add	r1, sp, #112	@ 0x70
 800d760:	f104 0c01 	add.w	ip, r4, #1
 800d764:	384c      	subs	r0, #76	@ 0x4c
 800d766:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d76a:	4422      	add	r2, r4
 800d76c:	4562      	cmp	r2, ip
 800d76e:	da04      	bge.n	800d77a <__kernel_rem_pio2f+0x2b6>
 800d770:	4614      	mov	r4, r2
 800d772:	e70e      	b.n	800d592 <__kernel_rem_pio2f+0xce>
 800d774:	9804      	ldr	r0, [sp, #16]
 800d776:	2201      	movs	r2, #1
 800d778:	e7e7      	b.n	800d74a <__kernel_rem_pio2f+0x286>
 800d77a:	9903      	ldr	r1, [sp, #12]
 800d77c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d780:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d784:	9105      	str	r1, [sp, #20]
 800d786:	ee07 1a90 	vmov	s15, r1
 800d78a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d78e:	2400      	movs	r4, #0
 800d790:	ece6 7a01 	vstmia	r6!, {s15}
 800d794:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d7c8 <__kernel_rem_pio2f+0x304>
 800d798:	46b1      	mov	r9, r6
 800d79a:	455c      	cmp	r4, fp
 800d79c:	dd04      	ble.n	800d7a8 <__kernel_rem_pio2f+0x2e4>
 800d79e:	ece0 7a01 	vstmia	r0!, {s15}
 800d7a2:	f10c 0c01 	add.w	ip, ip, #1
 800d7a6:	e7e1      	b.n	800d76c <__kernel_rem_pio2f+0x2a8>
 800d7a8:	ecfe 6a01 	vldmia	lr!, {s13}
 800d7ac:	ed39 7a01 	vldmdb	r9!, {s14}
 800d7b0:	3401      	adds	r4, #1
 800d7b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d7b6:	e7f0      	b.n	800d79a <__kernel_rem_pio2f+0x2d6>
 800d7b8:	0800e2fc 	.word	0x0800e2fc
 800d7bc:	0800e2d0 	.word	0x0800e2d0
 800d7c0:	43800000 	.word	0x43800000
 800d7c4:	3b800000 	.word	0x3b800000
 800d7c8:	00000000 	.word	0x00000000
 800d7cc:	9b02      	ldr	r3, [sp, #8]
 800d7ce:	eeb0 0a48 	vmov.f32	s0, s16
 800d7d2:	eba3 0008 	sub.w	r0, r3, r8
 800d7d6:	f000 f8e7 	bl	800d9a8 <scalbnf>
 800d7da:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d7c0 <__kernel_rem_pio2f+0x2fc>
 800d7de:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e6:	db19      	blt.n	800d81c <__kernel_rem_pio2f+0x358>
 800d7e8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d7c4 <__kernel_rem_pio2f+0x300>
 800d7ec:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d7f0:	aa08      	add	r2, sp, #32
 800d7f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d7f6:	3508      	adds	r5, #8
 800d7f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7fc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d804:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d808:	ee10 3a10 	vmov	r3, s0
 800d80c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d810:	ee17 3a90 	vmov	r3, s15
 800d814:	3401      	adds	r4, #1
 800d816:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d81a:	e74c      	b.n	800d6b6 <__kernel_rem_pio2f+0x1f2>
 800d81c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d820:	aa08      	add	r2, sp, #32
 800d822:	ee10 3a10 	vmov	r3, s0
 800d826:	e7f6      	b.n	800d816 <__kernel_rem_pio2f+0x352>
 800d828:	a808      	add	r0, sp, #32
 800d82a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d82e:	9001      	str	r0, [sp, #4]
 800d830:	ee07 0a90 	vmov	s15, r0
 800d834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d838:	3b01      	subs	r3, #1
 800d83a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d83e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d842:	ed62 7a01 	vstmdb	r2!, {s15}
 800d846:	e743      	b.n	800d6d0 <__kernel_rem_pio2f+0x20c>
 800d848:	ecfc 6a01 	vldmia	ip!, {s13}
 800d84c:	ecb5 7a01 	vldmia	r5!, {s14}
 800d850:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d854:	3001      	adds	r0, #1
 800d856:	4550      	cmp	r0, sl
 800d858:	dc01      	bgt.n	800d85e <__kernel_rem_pio2f+0x39a>
 800d85a:	4282      	cmp	r2, r0
 800d85c:	daf4      	bge.n	800d848 <__kernel_rem_pio2f+0x384>
 800d85e:	a858      	add	r0, sp, #352	@ 0x160
 800d860:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d864:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d868:	3b01      	subs	r3, #1
 800d86a:	e735      	b.n	800d6d8 <__kernel_rem_pio2f+0x214>
 800d86c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d86e:	2b02      	cmp	r3, #2
 800d870:	dc09      	bgt.n	800d886 <__kernel_rem_pio2f+0x3c2>
 800d872:	2b00      	cmp	r3, #0
 800d874:	dc2b      	bgt.n	800d8ce <__kernel_rem_pio2f+0x40a>
 800d876:	d044      	beq.n	800d902 <__kernel_rem_pio2f+0x43e>
 800d878:	f009 0007 	and.w	r0, r9, #7
 800d87c:	b059      	add	sp, #356	@ 0x164
 800d87e:	ecbd 8b04 	vpop	{d8-d9}
 800d882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d886:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d888:	2b03      	cmp	r3, #3
 800d88a:	d1f5      	bne.n	800d878 <__kernel_rem_pio2f+0x3b4>
 800d88c:	aa30      	add	r2, sp, #192	@ 0xc0
 800d88e:	1f0b      	subs	r3, r1, #4
 800d890:	4413      	add	r3, r2
 800d892:	461a      	mov	r2, r3
 800d894:	4620      	mov	r0, r4
 800d896:	2800      	cmp	r0, #0
 800d898:	f1a2 0204 	sub.w	r2, r2, #4
 800d89c:	dc52      	bgt.n	800d944 <__kernel_rem_pio2f+0x480>
 800d89e:	4622      	mov	r2, r4
 800d8a0:	2a01      	cmp	r2, #1
 800d8a2:	f1a3 0304 	sub.w	r3, r3, #4
 800d8a6:	dc5d      	bgt.n	800d964 <__kernel_rem_pio2f+0x4a0>
 800d8a8:	ab30      	add	r3, sp, #192	@ 0xc0
 800d8aa:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800d7c8 <__kernel_rem_pio2f+0x304>
 800d8ae:	440b      	add	r3, r1
 800d8b0:	2c01      	cmp	r4, #1
 800d8b2:	dc67      	bgt.n	800d984 <__kernel_rem_pio2f+0x4c0>
 800d8b4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d8b8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d8bc:	2e00      	cmp	r6, #0
 800d8be:	d167      	bne.n	800d990 <__kernel_rem_pio2f+0x4cc>
 800d8c0:	edc7 6a00 	vstr	s13, [r7]
 800d8c4:	ed87 7a01 	vstr	s14, [r7, #4]
 800d8c8:	edc7 7a02 	vstr	s15, [r7, #8]
 800d8cc:	e7d4      	b.n	800d878 <__kernel_rem_pio2f+0x3b4>
 800d8ce:	ab30      	add	r3, sp, #192	@ 0xc0
 800d8d0:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800d7c8 <__kernel_rem_pio2f+0x304>
 800d8d4:	440b      	add	r3, r1
 800d8d6:	4622      	mov	r2, r4
 800d8d8:	2a00      	cmp	r2, #0
 800d8da:	da24      	bge.n	800d926 <__kernel_rem_pio2f+0x462>
 800d8dc:	b34e      	cbz	r6, 800d932 <__kernel_rem_pio2f+0x46e>
 800d8de:	eef1 7a47 	vneg.f32	s15, s14
 800d8e2:	edc7 7a00 	vstr	s15, [r7]
 800d8e6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d8ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d8ee:	aa31      	add	r2, sp, #196	@ 0xc4
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	429c      	cmp	r4, r3
 800d8f4:	da20      	bge.n	800d938 <__kernel_rem_pio2f+0x474>
 800d8f6:	b10e      	cbz	r6, 800d8fc <__kernel_rem_pio2f+0x438>
 800d8f8:	eef1 7a67 	vneg.f32	s15, s15
 800d8fc:	edc7 7a01 	vstr	s15, [r7, #4]
 800d900:	e7ba      	b.n	800d878 <__kernel_rem_pio2f+0x3b4>
 800d902:	ab30      	add	r3, sp, #192	@ 0xc0
 800d904:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800d7c8 <__kernel_rem_pio2f+0x304>
 800d908:	440b      	add	r3, r1
 800d90a:	2c00      	cmp	r4, #0
 800d90c:	da05      	bge.n	800d91a <__kernel_rem_pio2f+0x456>
 800d90e:	b10e      	cbz	r6, 800d914 <__kernel_rem_pio2f+0x450>
 800d910:	eef1 7a67 	vneg.f32	s15, s15
 800d914:	edc7 7a00 	vstr	s15, [r7]
 800d918:	e7ae      	b.n	800d878 <__kernel_rem_pio2f+0x3b4>
 800d91a:	ed33 7a01 	vldmdb	r3!, {s14}
 800d91e:	3c01      	subs	r4, #1
 800d920:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d924:	e7f1      	b.n	800d90a <__kernel_rem_pio2f+0x446>
 800d926:	ed73 7a01 	vldmdb	r3!, {s15}
 800d92a:	3a01      	subs	r2, #1
 800d92c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d930:	e7d2      	b.n	800d8d8 <__kernel_rem_pio2f+0x414>
 800d932:	eef0 7a47 	vmov.f32	s15, s14
 800d936:	e7d4      	b.n	800d8e2 <__kernel_rem_pio2f+0x41e>
 800d938:	ecb2 7a01 	vldmia	r2!, {s14}
 800d93c:	3301      	adds	r3, #1
 800d93e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d942:	e7d6      	b.n	800d8f2 <__kernel_rem_pio2f+0x42e>
 800d944:	edd2 7a00 	vldr	s15, [r2]
 800d948:	edd2 6a01 	vldr	s13, [r2, #4]
 800d94c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d950:	3801      	subs	r0, #1
 800d952:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d956:	ed82 7a00 	vstr	s14, [r2]
 800d95a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d95e:	edc2 7a01 	vstr	s15, [r2, #4]
 800d962:	e798      	b.n	800d896 <__kernel_rem_pio2f+0x3d2>
 800d964:	edd3 7a00 	vldr	s15, [r3]
 800d968:	edd3 6a01 	vldr	s13, [r3, #4]
 800d96c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d970:	3a01      	subs	r2, #1
 800d972:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d976:	ed83 7a00 	vstr	s14, [r3]
 800d97a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d97e:	edc3 7a01 	vstr	s15, [r3, #4]
 800d982:	e78d      	b.n	800d8a0 <__kernel_rem_pio2f+0x3dc>
 800d984:	ed33 7a01 	vldmdb	r3!, {s14}
 800d988:	3c01      	subs	r4, #1
 800d98a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d98e:	e78f      	b.n	800d8b0 <__kernel_rem_pio2f+0x3ec>
 800d990:	eef1 6a66 	vneg.f32	s13, s13
 800d994:	eeb1 7a47 	vneg.f32	s14, s14
 800d998:	edc7 6a00 	vstr	s13, [r7]
 800d99c:	ed87 7a01 	vstr	s14, [r7, #4]
 800d9a0:	eef1 7a67 	vneg.f32	s15, s15
 800d9a4:	e790      	b.n	800d8c8 <__kernel_rem_pio2f+0x404>
 800d9a6:	bf00      	nop

0800d9a8 <scalbnf>:
 800d9a8:	ee10 3a10 	vmov	r3, s0
 800d9ac:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d9b0:	d02b      	beq.n	800da0a <scalbnf+0x62>
 800d9b2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d9b6:	d302      	bcc.n	800d9be <scalbnf+0x16>
 800d9b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d9bc:	4770      	bx	lr
 800d9be:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d9c2:	d123      	bne.n	800da0c <scalbnf+0x64>
 800d9c4:	4b24      	ldr	r3, [pc, #144]	@ (800da58 <scalbnf+0xb0>)
 800d9c6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800da5c <scalbnf+0xb4>
 800d9ca:	4298      	cmp	r0, r3
 800d9cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d9d0:	db17      	blt.n	800da02 <scalbnf+0x5a>
 800d9d2:	ee10 3a10 	vmov	r3, s0
 800d9d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d9da:	3a19      	subs	r2, #25
 800d9dc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d9e0:	4288      	cmp	r0, r1
 800d9e2:	dd15      	ble.n	800da10 <scalbnf+0x68>
 800d9e4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800da60 <scalbnf+0xb8>
 800d9e8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800da64 <scalbnf+0xbc>
 800d9ec:	ee10 3a10 	vmov	r3, s0
 800d9f0:	eeb0 7a67 	vmov.f32	s14, s15
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	bfb8      	it	lt
 800d9f8:	eef0 7a66 	vmovlt.f32	s15, s13
 800d9fc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800da00:	4770      	bx	lr
 800da02:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800da68 <scalbnf+0xc0>
 800da06:	ee27 0a80 	vmul.f32	s0, s15, s0
 800da0a:	4770      	bx	lr
 800da0c:	0dd2      	lsrs	r2, r2, #23
 800da0e:	e7e5      	b.n	800d9dc <scalbnf+0x34>
 800da10:	4410      	add	r0, r2
 800da12:	28fe      	cmp	r0, #254	@ 0xfe
 800da14:	dce6      	bgt.n	800d9e4 <scalbnf+0x3c>
 800da16:	2800      	cmp	r0, #0
 800da18:	dd06      	ble.n	800da28 <scalbnf+0x80>
 800da1a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800da1e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800da22:	ee00 3a10 	vmov	s0, r3
 800da26:	4770      	bx	lr
 800da28:	f110 0f16 	cmn.w	r0, #22
 800da2c:	da09      	bge.n	800da42 <scalbnf+0x9a>
 800da2e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800da68 <scalbnf+0xc0>
 800da32:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800da6c <scalbnf+0xc4>
 800da36:	ee10 3a10 	vmov	r3, s0
 800da3a:	eeb0 7a67 	vmov.f32	s14, s15
 800da3e:	2b00      	cmp	r3, #0
 800da40:	e7d9      	b.n	800d9f6 <scalbnf+0x4e>
 800da42:	3019      	adds	r0, #25
 800da44:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800da48:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800da4c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800da70 <scalbnf+0xc8>
 800da50:	ee07 3a90 	vmov	s15, r3
 800da54:	e7d7      	b.n	800da06 <scalbnf+0x5e>
 800da56:	bf00      	nop
 800da58:	ffff3cb0 	.word	0xffff3cb0
 800da5c:	4c000000 	.word	0x4c000000
 800da60:	7149f2ca 	.word	0x7149f2ca
 800da64:	f149f2ca 	.word	0xf149f2ca
 800da68:	0da24260 	.word	0x0da24260
 800da6c:	8da24260 	.word	0x8da24260
 800da70:	33000000 	.word	0x33000000

0800da74 <floorf>:
 800da74:	ee10 3a10 	vmov	r3, s0
 800da78:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800da7c:	3a7f      	subs	r2, #127	@ 0x7f
 800da7e:	2a16      	cmp	r2, #22
 800da80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800da84:	dc2b      	bgt.n	800dade <floorf+0x6a>
 800da86:	2a00      	cmp	r2, #0
 800da88:	da12      	bge.n	800dab0 <floorf+0x3c>
 800da8a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800daf0 <floorf+0x7c>
 800da8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800da92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800da96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da9a:	dd06      	ble.n	800daaa <floorf+0x36>
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	da24      	bge.n	800daea <floorf+0x76>
 800daa0:	2900      	cmp	r1, #0
 800daa2:	4b14      	ldr	r3, [pc, #80]	@ (800daf4 <floorf+0x80>)
 800daa4:	bf08      	it	eq
 800daa6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800daaa:	ee00 3a10 	vmov	s0, r3
 800daae:	4770      	bx	lr
 800dab0:	4911      	ldr	r1, [pc, #68]	@ (800daf8 <floorf+0x84>)
 800dab2:	4111      	asrs	r1, r2
 800dab4:	420b      	tst	r3, r1
 800dab6:	d0fa      	beq.n	800daae <floorf+0x3a>
 800dab8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800daf0 <floorf+0x7c>
 800dabc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dac0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dac8:	ddef      	ble.n	800daaa <floorf+0x36>
 800daca:	2b00      	cmp	r3, #0
 800dacc:	bfbe      	ittt	lt
 800dace:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800dad2:	fa40 f202 	asrlt.w	r2, r0, r2
 800dad6:	189b      	addlt	r3, r3, r2
 800dad8:	ea23 0301 	bic.w	r3, r3, r1
 800dadc:	e7e5      	b.n	800daaa <floorf+0x36>
 800dade:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800dae2:	d3e4      	bcc.n	800daae <floorf+0x3a>
 800dae4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dae8:	4770      	bx	lr
 800daea:	2300      	movs	r3, #0
 800daec:	e7dd      	b.n	800daaa <floorf+0x36>
 800daee:	bf00      	nop
 800daf0:	7149f2ca 	.word	0x7149f2ca
 800daf4:	bf800000 	.word	0xbf800000
 800daf8:	007fffff 	.word	0x007fffff

0800dafc <_init>:
 800dafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dafe:	bf00      	nop
 800db00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db02:	bc08      	pop	{r3}
 800db04:	469e      	mov	lr, r3
 800db06:	4770      	bx	lr

0800db08 <_fini>:
 800db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0a:	bf00      	nop
 800db0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db0e:	bc08      	pop	{r3}
 800db10:	469e      	mov	lr, r3
 800db12:	4770      	bx	lr
