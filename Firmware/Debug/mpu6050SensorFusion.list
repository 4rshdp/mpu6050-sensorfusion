
mpu6050SensorFusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e990  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0800eb20  0800eb20  0000fb20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0f0  0800f0f0  00011310  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0f0  0800f0f0  000100f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0f8  0800f0f8  00011310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0f8  0800f0f8  000100f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f0fc  0800f0fc  000100fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000310  20000000  0800f100  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011310  2**0
                  CONTENTS
 10 .bss          00001ee4  20000310  20000310  00011310  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200021f4  200021f4  00011310  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011310  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a21  00000000  00000000  00011340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037f3  00000000  00000000  00024d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  00028558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cee  00000000  00000000  00029670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021121  00000000  00000000  0002a35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175e1  00000000  00000000  0004b47f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000beaf5  00000000  00000000  00062a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121555  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a48  00000000  00000000  00121598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00126fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000310 	.word	0x20000310
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eb08 	.word	0x0800eb08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000314 	.word	0x20000314
 80001cc:	0800eb08 	.word	0x0800eb08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <_mulmat>:
        const _float_t * b, 
        _float_t * c, 
        const int arows, 
        const int acols, 
        const int bcols)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	@ 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	603b      	str	r3, [r7, #0]
    for (int i=0; i<arows; ++i) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e052      	b.n	8000ff2 <_mulmat+0xba>
        for (int j=0; j<bcols; ++j) {
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	e048      	b.n	8000fe4 <_mulmat+0xac>
            c[i*bcols+j] = 0;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f56:	fb03 f202 	mul.w	r2, r3, r2
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
            for (int k=0; k<acols; ++k) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	e032      	b.n	8000fd6 <_mulmat+0x9e>
                c[i*bcols+j] += a[i*acols+k] * b[k*bcols+j];
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f74:	fb03 f202 	mul.w	r2, r3, r2
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	ed93 7a00 	vldr	s14, [r3]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f8a:	fb03 f202 	mul.w	r2, r3, r2
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	edd3 6a00 	vldr	s13, [r3]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fa0:	fb03 f202 	mul.w	r2, r3, r2
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	4413      	add	r3, r2
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fba:	fb03 f202 	mul.w	r2, r3, r2
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fcc:	edc3 7a00 	vstr	s15, [r3]
            for (int k=0; k<acols; ++k) {
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	dbc8      	blt.n	8000f70 <_mulmat+0x38>
        for (int j=0; j<bcols; ++j) {
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbb2      	blt.n	8000f52 <_mulmat+0x1a>
    for (int i=0; i<arows; ++i) {
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	dba8      	blt.n	8000f4c <_mulmat+0x14>
            }
        }
    }
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3724      	adds	r7, #36	@ 0x24
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_mulvec>:
        const _float_t * a, 
        const _float_t * x, 
        _float_t * y, 
        const int m, 
        const int n)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e034      	b.n	8001086 <_mulvec+0x7e>
        y[i] = 0;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j)
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	e023      	b.n	8001078 <_mulvec+0x70>
            y[i] += x[j] * a[i*n+j];
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	ed93 7a00 	vldr	s14, [r3]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	4413      	add	r3, r2
 8001044:	edd3 6a00 	vldr	s13, [r3]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	6a3a      	ldr	r2, [r7, #32]
 800104c:	fb03 f202 	mul.w	r2, r3, r2
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106e:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	3301      	adds	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbd7      	blt.n	8001030 <_mulvec+0x28>
    for (int i=0; i<m; ++i) {
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	dbc6      	blt.n	800101c <_mulvec+0x14>
    }
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	371c      	adds	r7, #28
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_transpose>:

/// @private
static void _transpose(
        const _float_t * a, _float_t * at, const int m, const int n)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i)
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	e020      	b.n	80010f2 <_transpose+0x56>
        for (int j=0; j<n; ++j) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	e016      	b.n	80010e4 <_transpose+0x48>
            at[j*m+i] = a[i*n+j];
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	fb03 f202 	mul.w	r2, r3, r2
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	441a      	add	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	fb03 f101 	mul.w	r1, r3, r1
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	440b      	add	r3, r1
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	440b      	add	r3, r1
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j) {
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	3301      	adds	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbe4      	blt.n	80010b6 <_transpose+0x1a>
    for (int i=0; i<m; ++i)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dbda      	blt.n	80010b0 <_transpose+0x14>
        }
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <_addmat>:

/// @private
static void _addmat(
        const _float_t * a, const _float_t * b, _float_t * c, 
        const int m, const int n)
{
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	e02f      	b.n	800117c <_addmat+0x74>
        for (int j=0; j<n; ++j) {
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	e025      	b.n	800116e <_addmat+0x66>
            c[i*n+j] = a[i*n+j] + b[i*n+j];
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	6a3a      	ldr	r2, [r7, #32]
 8001126:	fb03 f202 	mul.w	r2, r3, r2
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	ed93 7a00 	vldr	s14, [r3]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	6a3a      	ldr	r2, [r7, #32]
 800113c:	fb03 f202 	mul.w	r2, r3, r2
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4413      	add	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	4413      	add	r3, r2
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	6a3a      	ldr	r2, [r7, #32]
 8001152:	fb03 f202 	mul.w	r2, r3, r2
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001164:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	3301      	adds	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	429a      	cmp	r2, r3
 8001174:	dbd5      	blt.n	8001122 <_addmat+0x1a>
    for (int i=0; i<m; ++i) {
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	dbcb      	blt.n	800111c <_addmat+0x14>
        }
    }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <_negate>:

/// @private
static void _negate(_float_t * a, const int m, const int n)
{        
 8001192:	b480      	push	{r7}
 8001194:	b087      	sub	sp, #28
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
    for (int i=0; i<m; ++i) {
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	e024      	b.n	80011ee <_negate+0x5c>
        for (int j=0; j<n; ++j) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	e01a      	b.n	80011e0 <_negate+0x4e>
            a[i*n+j] = -a[i*n+j];
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	fb03 f202 	mul.w	r2, r3, r2
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	fb03 f202 	mul.w	r2, r3, r2
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4413      	add	r3, r2
 80011d2:	eef1 7a67 	vneg.f32	s15, s15
 80011d6:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	3301      	adds	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dbe0      	blt.n	80011aa <_negate+0x18>
    for (int i=0; i<m; ++i) {
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	dbd6      	blt.n	80011a4 <_negate+0x12>
        }
    }
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_addeye>:

/// @private
static void _addeye(_float_t * a, const int n)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
    for (int i=0; i<n; ++i) {
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	e01c      	b.n	800124e <_addeye+0x4a>
        a[i*n+i] += 1;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	fb03 f202 	mul.w	r2, r3, r2
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	fb03 f202 	mul.w	r2, r3, r2
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001240:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001244:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<n; ++i) {
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3301      	adds	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	dbde      	blt.n	8001214 <_addeye+0x10>
    }
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_choldc1>:
/* Cholesky-decomposition matrix-inversion code, adapated from
http://jean-pierre.moreau.pagesperso-orange.fr/Cplus/_choles_cpp.txt */

/// @private
static int _choldc1(_float_t * a, _float_t * p, const int n) 
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b089      	sub	sp, #36	@ 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < n; i++) {
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	e075      	b.n	8001362 <_choldc1+0xfe>
        for (int j = i; j < n; j++) {
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	e06b      	b.n	8001354 <_choldc1+0xf0>
            _float_t sum = a[i*n+j];
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	fb03 f202 	mul.w	r2, r3, r2
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4413      	add	r3, r2
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	617b      	str	r3, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b01      	subs	r3, #1
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	e020      	b.n	80012dc <_choldc1+0x78>
                sum -= a[i*n+k] * a[j*n+k];
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	fb03 f202 	mul.w	r2, r3, r2
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	ed93 7a00 	vldr	s14, [r3]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	fb03 f202 	mul.w	r2, r3, r2
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	4413      	add	r3, r2
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80012ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d2:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	3b01      	subs	r3, #1
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	dadb      	bge.n	800129a <_choldc1+0x36>
            }
            if (i == j) {
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d11c      	bne.n	8001324 <_choldc1+0xc0>
                if (sum <= 0) {
 80012ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f6:	d801      	bhi.n	80012fc <_choldc1+0x98>
                    return 1; /* error */
 80012f8:	2301      	movs	r3, #1
 80012fa:	e037      	b.n	800136c <_choldc1+0x108>
                }
                p[i] = sqrt(sum);
 80012fc:	6978      	ldr	r0, [r7, #20]
 80012fe:	f7ff f923 	bl	8000548 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	ec43 2b10 	vmov	d0, r2, r3
 800130a:	f00c fa6f 	bl	800d7ec <sqrt>
 800130e:	ec51 0b10 	vmov	r0, r1, d0
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	18d4      	adds	r4, r2, r3
 800131a:	f7ff fc45 	bl	8000ba8 <__aeabi_d2f>
 800131e:	4603      	mov	r3, r0
 8001320:	6023      	str	r3, [r4, #0]
 8001322:	e014      	b.n	800134e <_choldc1+0xea>
            }
            else {
                a[j*n+i] = sum / p[i];
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	4413      	add	r3, r2
 800132c:	ed93 7a00 	vldr	s14, [r3]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	fb03 f202 	mul.w	r2, r3, r2
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4413      	add	r3, r2
 8001342:	edd7 6a05 	vldr	s13, [r7, #20]
 8001346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i; j < n; j++) {
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	3301      	adds	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	db8f      	blt.n	800127c <_choldc1+0x18>
    for (int i = 0; i < n; i++) {
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	3301      	adds	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	429a      	cmp	r2, r3
 8001368:	db85      	blt.n	8001276 <_choldc1+0x12>
            }
        }
    }

    return 0; // success:w
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3724      	adds	r7, #36	@ 0x24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd90      	pop	{r4, r7, pc}

08001374 <_choldcsl>:

/// @private
static int _choldcsl(const _float_t * A, _float_t * a, _float_t * p, const int n) 
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
 8001386:	e020      	b.n	80013ca <_choldcsl+0x56>
        for (int j = 0; j < n; j++) {
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
 800138c:	e016      	b.n	80013bc <_choldcsl+0x48>
            a[i*n+j] = A[i*n+j];
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	fb03 f202 	mul.w	r2, r3, r2
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	441a      	add	r2, r3
 80013a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	fb03 f101 	mul.w	r1, r3, r1
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	440b      	add	r3, r1
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	440b      	add	r3, r1
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < n; j++) {
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	3301      	adds	r3, #1
 80013ba:	623b      	str	r3, [r7, #32]
 80013bc:	6a3a      	ldr	r2, [r7, #32]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbe4      	blt.n	800138e <_choldcsl+0x1a>
    for (int i = 0; i < n; i++) {
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	3301      	adds	r3, #1
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dbda      	blt.n	8001388 <_choldcsl+0x14>
        }
    }
    if (_choldc1(a, p, n)) {
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	68b8      	ldr	r0, [r7, #8]
 80013d8:	f7ff ff44 	bl	8001264 <_choldc1>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <_choldcsl+0x72>
        return 1;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e06a      	b.n	80014bc <_choldcsl+0x148>
    }
    for (int i = 0; i < n; i++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	e062      	b.n	80014b2 <_choldcsl+0x13e>
        a[i*n+i] = 1 / p[i];
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	fb03 f202 	mul.w	r2, r3, r2
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	4413      	add	r3, r2
 800140a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800140e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001412:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	e042      	b.n	80014a4 <_choldcsl+0x130>
            _float_t sum = 0;
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
            for (int k = i; k < j; k++) {
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	e020      	b.n	800146c <_choldcsl+0xf8>
                sum -= a[j*n+k] * a[k*n+i];
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	fb03 f202 	mul.w	r2, r3, r2
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	4413      	add	r3, r2
 800143c:	ed93 7a00 	vldr	s14, [r3]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	fb03 f202 	mul.w	r2, r3, r2
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	4413      	add	r3, r2
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145a:	ed97 7a05 	vldr	s14, [r7, #20]
 800145e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001462:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i; k < j; k++) {
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	3301      	adds	r3, #1
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	429a      	cmp	r2, r3
 8001472:	dbda      	blt.n	800142a <_choldcsl+0xb6>
            }
            a[j*n+i] = sum / p[j];
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	ed93 7a00 	vldr	s14, [r3]
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	fb03 f202 	mul.w	r2, r3, r2
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	4413      	add	r3, r2
 8001492:	edd7 6a05 	vldr	s13, [r7, #20]
 8001496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	3301      	adds	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbb8      	blt.n	800141e <_choldcsl+0xaa>
    for (int i = 0; i < n; i++) {
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	3301      	adds	r3, #1
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	db98      	blt.n	80013ec <_choldcsl+0x78>
        }
    }

    return 0; // success
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3728      	adds	r7, #40	@ 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_cholsl>:

/// @private
static int _cholsl(const _float_t * A, _float_t * a, _float_t * p, const int n) 
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	@ 0x30
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
    if (_choldcsl(A,a,p,n)) {
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f7ff ff4b 	bl	8001374 <_choldcsl>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <_cholsl+0x24>
        return 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0f7      	b.n	80016d8 <_cholsl+0x214>
    }

    for (int i = 0; i < n; i++) {
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ec:	e019      	b.n	8001522 <_cholsl+0x5e>
        for (int j = i + 1; j < n; j++) {
 80014ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f0:	3301      	adds	r3, #1
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014f4:	e00e      	b.n	8001514 <_cholsl+0x50>
            a[i*n+j] = 0.0;
 80014f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	fb03 f202 	mul.w	r2, r3, r2
 80014fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	4413      	add	r3, r2
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
        for (int j = i + 1; j < n; j++) {
 800150e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001510:	3301      	adds	r3, #1
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001514:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbec      	blt.n	80014f6 <_cholsl+0x32>
    for (int i = 0; i < n; i++) {
 800151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151e:	3301      	adds	r3, #1
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	dbe1      	blt.n	80014ee <_cholsl+0x2a>
        }
    }
    for (int i = 0; i < n; i++) {
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
 800152e:	e0a5      	b.n	800167c <_cholsl+0x1b8>
        a[i*n+i] *= a[i*n+i];
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	fb03 f202 	mul.w	r2, r3, r2
 8001538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	4413      	add	r3, r2
 8001542:	ed93 7a00 	vldr	s14, [r3]
 8001546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	fb03 f202 	mul.w	r2, r3, r2
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	4413      	add	r3, r2
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	fb03 f202 	mul.w	r2, r3, r2
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	4413      	add	r3, r2
 800156e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001572:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	3301      	adds	r3, #1
 800157a:	623b      	str	r3, [r7, #32]
 800157c:	e032      	b.n	80015e4 <_cholsl+0x120>
            a[i*n+i] += a[k*n+i] * a[k*n+i];
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	fb03 f202 	mul.w	r2, r3, r2
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	4413      	add	r3, r2
 8001590:	ed93 7a00 	vldr	s14, [r3]
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	fb03 f202 	mul.w	r2, r3, r2
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	4413      	add	r3, r2
 80015a6:	edd3 6a00 	vldr	s13, [r3]
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	fb03 f202 	mul.w	r2, r3, r2
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	4413      	add	r3, r2
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	fb03 f202 	mul.w	r2, r3, r2
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	4413      	add	r3, r2
 80015d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015da:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	3301      	adds	r3, #1
 80015e2:	623b      	str	r3, [r7, #32]
 80015e4:	6a3a      	ldr	r2, [r7, #32]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbc8      	blt.n	800157e <_cholsl+0xba>
        }
        for (int j = i + 1; j < n; j++) {
 80015ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ee:	3301      	adds	r3, #1
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	e03c      	b.n	800166e <_cholsl+0x1aa>
            for (int k = j; k < n; k++) {
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	e032      	b.n	8001660 <_cholsl+0x19c>
                a[i*n+j] += a[k*n+i] * a[k*n+j];
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	fb03 f202 	mul.w	r2, r3, r2
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	4413      	add	r3, r2
 800160c:	ed93 7a00 	vldr	s14, [r3]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	fb03 f202 	mul.w	r2, r3, r2
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	4413      	add	r3, r2
 8001622:	edd3 6a00 	vldr	s13, [r3]
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	fb03 f202 	mul.w	r2, r3, r2
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	4413      	add	r3, r2
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	fb03 f202 	mul.w	r2, r3, r2
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	4413      	add	r3, r2
 8001652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001656:	edc3 7a00 	vstr	s15, [r3]
            for (int k = j; k < n; k++) {
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	3301      	adds	r3, #1
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbc8      	blt.n	80015fa <_cholsl+0x136>
        for (int j = i + 1; j < n; j++) {
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	3301      	adds	r3, #1
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	dbbe      	blt.n	80015f4 <_cholsl+0x130>
    for (int i = 0; i < n; i++) {
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	3301      	adds	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
 800167c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	f6ff af55 	blt.w	8001530 <_cholsl+0x6c>
            }
        }
    }
    for (int i = 0; i < n; i++) {
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e020      	b.n	80016ce <_cholsl+0x20a>
        for (int j = 0; j < i; j++) {
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	e016      	b.n	80016c0 <_cholsl+0x1fc>
            a[i*n+j] = a[j*n+i];
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	fb03 f202 	mul.w	r2, r3, r2
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	441a      	add	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	6839      	ldr	r1, [r7, #0]
 80016a8:	fb03 f101 	mul.w	r1, r3, r1
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	440b      	add	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	440b      	add	r3, r1
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < i; j++) {
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	3301      	adds	r3, #1
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbe4      	blt.n	8001692 <_cholsl+0x1ce>
    for (int i = 0; i < n; i++) {
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	dbda      	blt.n	800168c <_cholsl+0x1c8>
        }
    }

    return 0; // success
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3730      	adds	r7, #48	@ 0x30
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_addvec>:

/// @private
static void _addvec(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e016      	b.n	8001722 <_addvec+0x42>
        c[j] = a[j] + b[j];
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	ed93 7a00 	vldr	s14, [r3]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	4413      	add	r3, r2
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001718:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	dbe4      	blt.n	80016f4 <_addvec+0x14>
    }
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_sub>:

/// @private
static void _sub(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e016      	b.n	800177a <_sub+0x42>
        c[j] = a[j] - b[j];
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	ed93 7a00 	vldr	s14, [r3]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	4413      	add	r3, r2
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001770:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3301      	adds	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	dbe4      	blt.n	800174c <_sub+0x14>
    }
}
 8001782:	bf00      	nop
 8001784:	bf00      	nop
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <invert>:

/// @private
static bool invert(const _float_t * a, _float_t * ainv)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
    _float_t tmp[EKF_M];

    return _cholsl(a, ainv, tmp, EKF_M) == 0;
 800179a:	f107 020c 	add.w	r2, r7, #12
 800179e:	2303      	movs	r3, #3
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fe8e 	bl	80014c4 <_cholsl>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf0c      	ite	eq
 80017ae:	2301      	moveq	r3, #1
 80017b0:	2300      	movne	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <ekf_initialize>:
 * @param ekf pointer to an ekf_t structure
 * @param pdiag a vector of length EKF_N containing the initial values for the
 * covariance matrix diagonal
 */
static void ekf_initialize(ekf_t * ekf, const _float_t pdiag[EKF_N])
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
    for (int i=0; i<EKF_N; ++i) {
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	e027      	b.n	800181c <ekf_initialize+0x60>

        for (int j=0; j<EKF_N; ++j) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	e017      	b.n	8001802 <ekf_initialize+0x46>

            ekf->P[i*EKF_N+j] = i==j ? pdiag[i] : 0;
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d105      	bne.n	80017e6 <ekf_initialize+0x2a>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	4413      	add	r3, r2
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	e001      	b.n	80017ea <ekf_initialize+0x2e>
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	0051      	lsls	r1, r2, #1
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	440a      	add	r2, r1
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	3202      	adds	r2, #2
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	440a      	add	r2, r1
 80017fa:	6013      	str	r3, [r2, #0]
        for (int j=0; j<EKF_N; ++j) {
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	3301      	adds	r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b01      	cmp	r3, #1
 8001806:	dde4      	ble.n	80017d2 <ekf_initialize+0x16>
        }

        ekf->x[i] = 0;
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
    for (int i=0; i<EKF_N; ++i) {
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3301      	adds	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b01      	cmp	r3, #1
 8001820:	ddd4      	ble.n	80017cc <ekf_initialize+0x10>
    }
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <ekf_predict>:
  */static void ekf_predict(
        ekf_t * ekf, 
        const _float_t fx[EKF_N],
        const _float_t F[EKF_N*EKF_N],
        const _float_t Q[EKF_N*EKF_N])
{        
 8001830:	b580      	push	{r7, lr}
 8001832:	b092      	sub	sp, #72	@ 0x48
 8001834:	af02      	add	r7, sp, #8
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	603b      	str	r3, [r7, #0]
    // \hat{x}_k = f(\hat{x}_{k-1}, u_k)
    memcpy(ekf->x, fx, EKF_N*sizeof(_float_t));
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2208      	movs	r2, #8
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	4618      	mov	r0, r3
 8001846:	f009 ff86 	bl	800b756 <memcpy>

    // P_k = F_{k-1} P_{k-1} F^T_{k-1} + Q_{k-1}

    _float_t FP[EKF_N*EKF_N] = {};
 800184a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
    _mulmat(F, ekf->P,  FP, EKF_N, EKF_N, EKF_N);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f103 0108 	add.w	r1, r3, #8
 800185e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001862:	2302      	movs	r3, #2
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	2302      	movs	r3, #2
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2302      	movs	r3, #2
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fb63 	bl	8000f38 <_mulmat>

    _float_t Ft[EKF_N*EKF_N] = {};
 8001872:	f107 0320 	add.w	r3, r7, #32
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
    _transpose(F, Ft, EKF_N, EKF_N);
 8001880:	f107 0120 	add.w	r1, r7, #32
 8001884:	2302      	movs	r3, #2
 8001886:	2202      	movs	r2, #2
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fc07 	bl	800109c <_transpose>

    _float_t FPFt[EKF_N*EKF_N] = {};
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
    _mulmat(FP, Ft, FPFt, EKF_N, EKF_N, EKF_N);
 800189c:	f107 0210 	add.w	r2, r7, #16
 80018a0:	f107 0120 	add.w	r1, r7, #32
 80018a4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80018a8:	2302      	movs	r3, #2
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	2302      	movs	r3, #2
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2302      	movs	r3, #2
 80018b2:	f7ff fb41 	bl	8000f38 <_mulmat>

    _addmat(FPFt, Q, ekf->P, EKF_N, EKF_N);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f103 0208 	add.w	r2, r3, #8
 80018bc:	f107 0010 	add.w	r0, r7, #16
 80018c0:	2302      	movs	r3, #2
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2302      	movs	r3, #2
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	f7ff fc1e 	bl	8001108 <_addmat>
}
 80018cc:	bf00      	nop
 80018ce:	3740      	adds	r7, #64	@ 0x40
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <ekf_update_step3>:

/// @private
static void ekf_update_step3(ekf_t * ekf, _float_t GH[EKF_N*EKF_N])
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af02      	add	r7, sp, #8
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
    _negate(GH, EKF_N, EKF_N);
 80018de:	2202      	movs	r2, #2
 80018e0:	2102      	movs	r1, #2
 80018e2:	6838      	ldr	r0, [r7, #0]
 80018e4:	f7ff fc55 	bl	8001192 <_negate>
    _addeye(GH, EKF_N);
 80018e8:	2102      	movs	r1, #2
 80018ea:	6838      	ldr	r0, [r7, #0]
 80018ec:	f7ff fc8a 	bl	8001204 <_addeye>
    _float_t GHP[EKF_N*EKF_N];
    _mulmat(GH, ekf->P, GHP, EKF_N, EKF_N, EKF_N);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f103 0108 	add.w	r1, r3, #8
 80018f6:	f107 0208 	add.w	r2, r7, #8
 80018fa:	2302      	movs	r3, #2
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	2302      	movs	r3, #2
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2302      	movs	r3, #2
 8001904:	6838      	ldr	r0, [r7, #0]
 8001906:	f7ff fb17 	bl	8000f38 <_mulmat>
    memcpy(ekf->P, GHP, EKF_N*EKF_N*sizeof(_float_t));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3308      	adds	r3, #8
 800190e:	f107 0108 	add.w	r1, r7, #8
 8001912:	2210      	movs	r2, #16
 8001914:	4618      	mov	r0, r3
 8001916:	f009 ff1e 	bl	800b756 <memcpy>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <ekf_update>:
        ekf_t * ekf, 
        const _float_t z[EKF_M], 
        const _float_t hx[EKF_N],
        const _float_t H[EKF_M*EKF_N],
        const _float_t R[EKF_M*EKF_M])
{        
 8001922:	b590      	push	{r4, r7, lr}
 8001924:	b0c7      	sub	sp, #284	@ 0x11c
 8001926:	af02      	add	r7, sp, #8
 8001928:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800192c:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 8001930:	6020      	str	r0, [r4, #0]
 8001932:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8001936:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 800193a:	6001      	str	r1, [r0, #0]
 800193c:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001940:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8001944:	600a      	str	r2, [r1, #0]
 8001946:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800194a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800194e:	6013      	str	r3, [r2, #0]
    // G_k = P_k H^T_k (H_k P_k H^T_k + R)^{-1}
    _float_t G[EKF_N*EKF_M];
    _float_t Ht[EKF_N*EKF_M];
    _transpose(H, Ht, EKF_M, EKF_N);
 8001950:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001954:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001958:	f5a3 7088 	sub.w	r0, r3, #272	@ 0x110
 800195c:	2302      	movs	r3, #2
 800195e:	2203      	movs	r2, #3
 8001960:	6800      	ldr	r0, [r0, #0]
 8001962:	f7ff fb9b 	bl	800109c <_transpose>
    _float_t PHt[EKF_N*EKF_M];
    _mulmat(ekf->P, Ht, PHt, EKF_N, EKF_N, EKF_M);
 8001966:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800196a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f103 0008 	add.w	r0, r3, #8
 8001974:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8001978:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800197c:	2303      	movs	r3, #3
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	2302      	movs	r3, #2
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2302      	movs	r3, #2
 8001986:	f7ff fad7 	bl	8000f38 <_mulmat>
    _float_t HP[EKF_M*EKF_N];
    _mulmat(H, ekf->P, HP, EKF_M, EKF_N, EKF_N);
 800198a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800198e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f103 0108 	add.w	r1, r3, #8
 8001998:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800199c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019a0:	f5a3 7088 	sub.w	r0, r3, #272	@ 0x110
 80019a4:	2302      	movs	r3, #2
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	2302      	movs	r3, #2
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2303      	movs	r3, #3
 80019ae:	6800      	ldr	r0, [r0, #0]
 80019b0:	f7ff fac2 	bl	8000f38 <_mulmat>
    _float_t HpHt[EKF_M*EKF_M];
    _mulmat(HP, Ht, HpHt, EKF_M, EKF_N, EKF_M);
 80019b4:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80019b8:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 80019bc:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 80019c0:	2303      	movs	r3, #3
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2303      	movs	r3, #3
 80019ca:	f7ff fab5 	bl	8000f38 <_mulmat>
    _float_t HpHtR[EKF_M*EKF_M];
    _addmat(HpHt, R, HpHtR, EKF_M, EKF_M);
 80019ce:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80019d2:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 80019d6:	2303      	movs	r3, #3
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2303      	movs	r3, #3
 80019dc:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 80019e0:	f7ff fb92 	bl	8001108 <_addmat>
    _float_t HPHtRinv[EKF_M*EKF_M];
    if (!invert(HpHtR, HPHtRinv)) {
 80019e4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80019e8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fece 	bl	8001790 <invert>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f083 0301 	eor.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <ekf_update+0xe2>
        return false;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e050      	b.n	8001aa6 <ekf_update+0x184>
    }
    _mulmat(PHt, HPHtRinv, G, EKF_N, EKF_M, EKF_M);
 8001a04:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8001a08:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001a0c:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8001a10:	2303      	movs	r3, #3
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	2303      	movs	r3, #3
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2302      	movs	r3, #2
 8001a1a:	f7ff fa8d 	bl	8000f38 <_mulmat>

    // \hat{x}_k = \hat{x_k} + G_k(z_k - h(\hat{x}_k))
    _float_t z_hx[EKF_M];
    _sub(z, hx, z_hx, EKF_M);
 8001a1e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001a22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a26:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 8001a2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a2e:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8001a32:	2303      	movs	r3, #3
 8001a34:	6809      	ldr	r1, [r1, #0]
 8001a36:	6800      	ldr	r0, [r0, #0]
 8001a38:	f7ff fe7e 	bl	8001738 <_sub>
    _float_t Gz_hx[EKF_M*EKF_N];
    _mulvec(G, z_hx, Gz_hx, EKF_N, EKF_M);
 8001a3c:	f107 0220 	add.w	r2, r7, #32
 8001a40:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001a44:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8001a48:	2303      	movs	r3, #3
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	f7ff fadb 	bl	8001008 <_mulvec>
    _addvec(ekf->x, Gz_hx, ekf->x, EKF_N);
 8001a52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	f107 0120 	add.w	r1, r7, #32
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	f7ff fe38 	bl	80016e0 <_addvec>

    // P_k = (I - G_k H_k) P_k
    _float_t GH[EKF_N*EKF_N];
    _mulmat(G, H, GH, EKF_N, EKF_M, EKF_N);
 8001a70:	f107 0210 	add.w	r2, r7, #16
 8001a74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a78:	f5a3 7188 	sub.w	r1, r3, #272	@ 0x110
 8001a7c:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8001a80:	2302      	movs	r3, #2
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	2303      	movs	r3, #3
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2302      	movs	r3, #2
 8001a8a:	6809      	ldr	r1, [r1, #0]
 8001a8c:	f7ff fa54 	bl	8000f38 <_mulmat>
    ekf_update_step3(ekf, GH);
 8001a90:	f107 0210 	add.w	r2, r7, #16
 8001a94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	f7ff ff18 	bl	80018d4 <ekf_update_step3>

    // success
    return true;
 8001aa4:	2301      	movs	r3, #1
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}

08001ab0 <sensor_model>:
 * @param ekf Pointer to the current EKF state.
 * @param hx  Output predicted measurement vector (length EKF_M).
 * @param H   Output Jacobian matrix (EKF_M x EKF_N).
 */
static void sensor_model(const ekf_t * ekf, _float_t hx[EKF_M], _float_t H[EKF_M * EKF_N])
{
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
    // Extract current state estimates (in radians)
    _float_t phi   = ekf->x[0];  // roll
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61fb      	str	r3, [r7, #28]
    _float_t theta = ekf->x[1];  // pitch
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
    const _float_t g = 9.81f;
 8001ac8:	4bc6      	ldr	r3, [pc, #792]	@ (8001de4 <sensor_model+0x334>)
 8001aca:	617b      	str	r3, [r7, #20]

    // Predicted measurements:
    hx[0] = -g * sin(theta);            // ax
 8001acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ad0:	eef1 7a67 	vneg.f32	s15, s15
 8001ad4:	ee17 3a90 	vmov	r3, s15
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd35 	bl	8000548 <__aeabi_f2d>
 8001ade:	4604      	mov	r4, r0
 8001ae0:	460d      	mov	r5, r1
 8001ae2:	69b8      	ldr	r0, [r7, #24]
 8001ae4:	f7fe fd30 	bl	8000548 <__aeabi_f2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	ec43 2b10 	vmov	d0, r2, r3
 8001af0:	f00b fefe 	bl	800d8f0 <sin>
 8001af4:	ec53 2b10 	vmov	r2, r3, d0
 8001af8:	4620      	mov	r0, r4
 8001afa:	4629      	mov	r1, r5
 8001afc:	f7fe fd7c 	bl	80005f8 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f7ff f84e 	bl	8000ba8 <__aeabi_d2f>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	601a      	str	r2, [r3, #0]
    hx[1] =  g * sin(phi) * cos(theta);   // ay
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7fe fd18 	bl	8000548 <__aeabi_f2d>
 8001b18:	4604      	mov	r4, r0
 8001b1a:	460d      	mov	r5, r1
 8001b1c:	69f8      	ldr	r0, [r7, #28]
 8001b1e:	f7fe fd13 	bl	8000548 <__aeabi_f2d>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	ec43 2b10 	vmov	d0, r2, r3
 8001b2a:	f00b fee1 	bl	800d8f0 <sin>
 8001b2e:	ec53 2b10 	vmov	r2, r3, d0
 8001b32:	4620      	mov	r0, r4
 8001b34:	4629      	mov	r1, r5
 8001b36:	f7fe fd5f 	bl	80005f8 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4614      	mov	r4, r2
 8001b40:	461d      	mov	r5, r3
 8001b42:	69b8      	ldr	r0, [r7, #24]
 8001b44:	f7fe fd00 	bl	8000548 <__aeabi_f2d>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	ec43 2b10 	vmov	d0, r2, r3
 8001b50:	f00b fe7a 	bl	800d848 <cos>
 8001b54:	ec53 2b10 	vmov	r2, r3, d0
 8001b58:	4620      	mov	r0, r4
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	f7fe fd4c 	bl	80005f8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1d1c      	adds	r4, r3, #4
 8001b6c:	f7ff f81c 	bl	8000ba8 <__aeabi_d2f>
 8001b70:	4603      	mov	r3, r0
 8001b72:	6023      	str	r3, [r4, #0]
    hx[2] =  g * cos(phi) * cos(theta);   // az
 8001b74:	6978      	ldr	r0, [r7, #20]
 8001b76:	f7fe fce7 	bl	8000548 <__aeabi_f2d>
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	460d      	mov	r5, r1
 8001b7e:	69f8      	ldr	r0, [r7, #28]
 8001b80:	f7fe fce2 	bl	8000548 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	ec43 2b10 	vmov	d0, r2, r3
 8001b8c:	f00b fe5c 	bl	800d848 <cos>
 8001b90:	ec53 2b10 	vmov	r2, r3, d0
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe fd2e 	bl	80005f8 <__aeabi_dmul>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	461d      	mov	r5, r3
 8001ba4:	69b8      	ldr	r0, [r7, #24]
 8001ba6:	f7fe fccf 	bl	8000548 <__aeabi_f2d>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	ec43 2b10 	vmov	d0, r2, r3
 8001bb2:	f00b fe49 	bl	800d848 <cos>
 8001bb6:	ec53 2b10 	vmov	r2, r3, d0
 8001bba:	4620      	mov	r0, r4
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	f7fe fd1b 	bl	80005f8 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f103 0408 	add.w	r4, r3, #8
 8001bd0:	f7fe ffea 	bl	8000ba8 <__aeabi_d2f>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	6023      	str	r3, [r4, #0]

    // Compute the Jacobian H = d[hx]/d[x]
    // For ax = -g*sin(theta)
    H[0 * EKF_N + 0] = 0.0f;              // ∂ax/∂phi
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
    H[0 * EKF_N + 1] = -g * cos(theta);    // ∂ax/∂theta
 8001be0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be4:	eef1 7a67 	vneg.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fcab 	bl	8000548 <__aeabi_f2d>
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	460d      	mov	r5, r1
 8001bf6:	69b8      	ldr	r0, [r7, #24]
 8001bf8:	f7fe fca6 	bl	8000548 <__aeabi_f2d>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	ec43 2b10 	vmov	d0, r2, r3
 8001c04:	f00b fe20 	bl	800d848 <cos>
 8001c08:	ec53 2b10 	vmov	r2, r3, d0
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	4629      	mov	r1, r5
 8001c10:	f7fe fcf2 	bl	80005f8 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	1d1c      	adds	r4, r3, #4
 8001c20:	f7fe ffc2 	bl	8000ba8 <__aeabi_d2f>
 8001c24:	4603      	mov	r3, r0
 8001c26:	6023      	str	r3, [r4, #0]

    // For ay = g*sin(phi)*cos(theta)
    H[1 * EKF_N + 0] = g * cos(phi) * cos(theta);   // ∂ay/∂phi
 8001c28:	6978      	ldr	r0, [r7, #20]
 8001c2a:	f7fe fc8d 	bl	8000548 <__aeabi_f2d>
 8001c2e:	4604      	mov	r4, r0
 8001c30:	460d      	mov	r5, r1
 8001c32:	69f8      	ldr	r0, [r7, #28]
 8001c34:	f7fe fc88 	bl	8000548 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	ec43 2b10 	vmov	d0, r2, r3
 8001c40:	f00b fe02 	bl	800d848 <cos>
 8001c44:	ec53 2b10 	vmov	r2, r3, d0
 8001c48:	4620      	mov	r0, r4
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	f7fe fcd4 	bl	80005f8 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4614      	mov	r4, r2
 8001c56:	461d      	mov	r5, r3
 8001c58:	69b8      	ldr	r0, [r7, #24]
 8001c5a:	f7fe fc75 	bl	8000548 <__aeabi_f2d>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	ec43 2b10 	vmov	d0, r2, r3
 8001c66:	f00b fdef 	bl	800d848 <cos>
 8001c6a:	ec53 2b10 	vmov	r2, r3, d0
 8001c6e:	4620      	mov	r0, r4
 8001c70:	4629      	mov	r1, r5
 8001c72:	f7fe fcc1 	bl	80005f8 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f103 0408 	add.w	r4, r3, #8
 8001c84:	f7fe ff90 	bl	8000ba8 <__aeabi_d2f>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	6023      	str	r3, [r4, #0]
    H[1 * EKF_N + 1] = -g * sin(phi) * sin(theta);    // ∂ay/∂theta
 8001c8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c90:	eef1 7a67 	vneg.f32	s15, s15
 8001c94:	ee17 3a90 	vmov	r3, s15
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc55 	bl	8000548 <__aeabi_f2d>
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	460d      	mov	r5, r1
 8001ca2:	69f8      	ldr	r0, [r7, #28]
 8001ca4:	f7fe fc50 	bl	8000548 <__aeabi_f2d>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	ec43 2b10 	vmov	d0, r2, r3
 8001cb0:	f00b fe1e 	bl	800d8f0 <sin>
 8001cb4:	ec53 2b10 	vmov	r2, r3, d0
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4629      	mov	r1, r5
 8001cbc:	f7fe fc9c 	bl	80005f8 <__aeabi_dmul>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4614      	mov	r4, r2
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	69b8      	ldr	r0, [r7, #24]
 8001cca:	f7fe fc3d 	bl	8000548 <__aeabi_f2d>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	ec43 2b10 	vmov	d0, r2, r3
 8001cd6:	f00b fe0b 	bl	800d8f0 <sin>
 8001cda:	ec53 2b10 	vmov	r2, r3, d0
 8001cde:	4620      	mov	r0, r4
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	f7fe fc89 	bl	80005f8 <__aeabi_dmul>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f103 040c 	add.w	r4, r3, #12
 8001cf4:	f7fe ff58 	bl	8000ba8 <__aeabi_d2f>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	6023      	str	r3, [r4, #0]

    // For az = g*cos(phi)*cos(theta)
    H[2 * EKF_N + 0] = -g * sin(phi) * cos(theta);    // ∂az/∂phi
 8001cfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d00:	eef1 7a67 	vneg.f32	s15, s15
 8001d04:	ee17 3a90 	vmov	r3, s15
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc1d 	bl	8000548 <__aeabi_f2d>
 8001d0e:	4604      	mov	r4, r0
 8001d10:	460d      	mov	r5, r1
 8001d12:	69f8      	ldr	r0, [r7, #28]
 8001d14:	f7fe fc18 	bl	8000548 <__aeabi_f2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	ec43 2b10 	vmov	d0, r2, r3
 8001d20:	f00b fde6 	bl	800d8f0 <sin>
 8001d24:	ec53 2b10 	vmov	r2, r3, d0
 8001d28:	4620      	mov	r0, r4
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	f7fe fc64 	bl	80005f8 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4614      	mov	r4, r2
 8001d36:	461d      	mov	r5, r3
 8001d38:	69b8      	ldr	r0, [r7, #24]
 8001d3a:	f7fe fc05 	bl	8000548 <__aeabi_f2d>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	ec43 2b10 	vmov	d0, r2, r3
 8001d46:	f00b fd7f 	bl	800d848 <cos>
 8001d4a:	ec53 2b10 	vmov	r2, r3, d0
 8001d4e:	4620      	mov	r0, r4
 8001d50:	4629      	mov	r1, r5
 8001d52:	f7fe fc51 	bl	80005f8 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f103 0410 	add.w	r4, r3, #16
 8001d64:	f7fe ff20 	bl	8000ba8 <__aeabi_d2f>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	6023      	str	r3, [r4, #0]
    H[2 * EKF_N + 1] = -g * cos(phi) * sin(theta);    // ∂az/∂theta
 8001d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d70:	eef1 7a67 	vneg.f32	s15, s15
 8001d74:	ee17 3a90 	vmov	r3, s15
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbe5 	bl	8000548 <__aeabi_f2d>
 8001d7e:	4604      	mov	r4, r0
 8001d80:	460d      	mov	r5, r1
 8001d82:	69f8      	ldr	r0, [r7, #28]
 8001d84:	f7fe fbe0 	bl	8000548 <__aeabi_f2d>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	ec43 2b10 	vmov	d0, r2, r3
 8001d90:	f00b fd5a 	bl	800d848 <cos>
 8001d94:	ec53 2b10 	vmov	r2, r3, d0
 8001d98:	4620      	mov	r0, r4
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4614      	mov	r4, r2
 8001da6:	461d      	mov	r5, r3
 8001da8:	69b8      	ldr	r0, [r7, #24]
 8001daa:	f7fe fbcd 	bl	8000548 <__aeabi_f2d>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	ec43 2b10 	vmov	d0, r2, r3
 8001db6:	f00b fd9b 	bl	800d8f0 <sin>
 8001dba:	ec53 2b10 	vmov	r2, r3, d0
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	4629      	mov	r1, r5
 8001dc2:	f7fe fc19 	bl	80005f8 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f103 0414 	add.w	r4, r3, #20
 8001dd4:	f7fe fee8 	bl	8000ba8 <__aeabi_d2f>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	6023      	str	r3, [r4, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bdb0      	pop	{r4, r5, r7, pc}
 8001de4:	411cf5c3 	.word	0x411cf5c3

08001de8 <imu_fusion_init>:

// Initialize EKF fusion
void imu_fusion_init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
    ekf_initialize(&ekf, Pdiag);
 8001dec:	4902      	ldr	r1, [pc, #8]	@ (8001df8 <imu_fusion_init+0x10>)
 8001dee:	4803      	ldr	r0, [pc, #12]	@ (8001dfc <imu_fusion_init+0x14>)
 8001df0:	f7ff fce4 	bl	80017bc <ekf_initialize>
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	2000032c 	.word	0x2000032c

08001e00 <imu_fusion_update>:

// Update EKF fusion state
void imu_fusion_update(float Gx, float Gy, float Gz, float Ax, float Ay, float Az, float dt,
                       float *roll_deg, float *pitch_deg)
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b0a1      	sub	sp, #132	@ 0x84
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8001e0a:	edc7 0a08 	vstr	s1, [r7, #32]
 8001e0e:	ed87 1a07 	vstr	s2, [r7, #28]
 8001e12:	edc7 1a06 	vstr	s3, [r7, #24]
 8001e16:	ed87 2a05 	vstr	s4, [r7, #20]
 8001e1a:	edc7 2a04 	vstr	s5, [r7, #16]
 8001e1e:	ed87 3a03 	vstr	s6, [r7, #12]
 8001e22:	60b8      	str	r0, [r7, #8]
 8001e24:	6079      	str	r1, [r7, #4]
    // Gyro data converted to rad/s
    float p_rps = Gx * DEG_TO_RAD;
 8001e26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e28:	f7fe fb8e 	bl	8000548 <__aeabi_f2d>
 8001e2c:	a34a      	add	r3, pc, #296	@ (adr r3, 8001f58 <imu_fusion_update+0x158>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	f7fe fbe1 	bl	80005f8 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe feb3 	bl	8000ba8 <__aeabi_d2f>
 8001e42:	4603      	mov	r3, r0
 8001e44:	677b      	str	r3, [r7, #116]	@ 0x74
    float q_rps = Gy * DEG_TO_RAD;
 8001e46:	6a38      	ldr	r0, [r7, #32]
 8001e48:	f7fe fb7e 	bl	8000548 <__aeabi_f2d>
 8001e4c:	a342      	add	r3, pc, #264	@ (adr r3, 8001f58 <imu_fusion_update+0x158>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe fbd1 	bl	80005f8 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f7fe fea3 	bl	8000ba8 <__aeabi_d2f>
 8001e62:	4603      	mov	r3, r0
 8001e64:	673b      	str	r3, [r7, #112]	@ 0x70

    // Prediction step
    _float_t fx[EKF_N] = {
        ekf.x[0] + p_rps * dt,
 8001e66:	4b38      	ldr	r3, [pc, #224]	@ (8001f48 <imu_fusion_update+0x148>)
 8001e68:	ed93 7a00 	vldr	s14, [r3]
 8001e6c:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8001e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e78:	ee77 7a27 	vadd.f32	s15, s14, s15
    _float_t fx[EKF_N] = {
 8001e7c:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
        ekf.x[1] + q_rps * dt
 8001e80:	4b31      	ldr	r3, [pc, #196]	@ (8001f48 <imu_fusion_update+0x148>)
 8001e82:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e86:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8001e8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e92:	ee77 7a27 	vadd.f32	s15, s14, s15
    _float_t fx[EKF_N] = {
 8001e96:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    };

    _float_t F[EKF_N * EKF_N] = {
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f4c <imu_fusion_update+0x14c>)
 8001e9c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001ea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        1.0f, 0.0f,
        0.0f, 1.0f
    };

    ekf_predict(&ekf, fx, F, Q);
 8001ea6:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001eaa:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001eae:	4b28      	ldr	r3, [pc, #160]	@ (8001f50 <imu_fusion_update+0x150>)
 8001eb0:	4825      	ldr	r0, [pc, #148]	@ (8001f48 <imu_fusion_update+0x148>)
 8001eb2:	f7ff fcbd 	bl	8001830 <ekf_predict>

    // Measurement update
    _float_t z[EKF_M] = { Ax, Ay, Az };
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	657b      	str	r3, [r7, #84]	@ 0x54
    _float_t hx[EKF_M];
    _float_t H[EKF_M * EKF_N];
    sensor_model(&ekf, hx, H);
 8001ec2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001ec6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001eca:	4619      	mov	r1, r3
 8001ecc:	481e      	ldr	r0, [pc, #120]	@ (8001f48 <imu_fusion_update+0x148>)
 8001ece:	f7ff fdef 	bl	8001ab0 <sensor_model>

    ekf_update(&ekf, z, hx, H, R);
 8001ed2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ed6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001eda:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001ede:	481d      	ldr	r0, [pc, #116]	@ (8001f54 <imu_fusion_update+0x154>)
 8001ee0:	9000      	str	r0, [sp, #0]
 8001ee2:	4819      	ldr	r0, [pc, #100]	@ (8001f48 <imu_fusion_update+0x148>)
 8001ee4:	f7ff fd1d 	bl	8001922 <ekf_update>

    // Export roll and pitch in degrees
    *roll_deg = ekf.x[0] * RAD_TO_DEG;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	@ (8001f48 <imu_fusion_update+0x148>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fb2b 	bl	8000548 <__aeabi_f2d>
 8001ef2:	a313      	add	r3, pc, #76	@ (adr r3, 8001f40 <imu_fusion_update+0x140>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fb7e 	bl	80005f8 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f7fe fe50 	bl	8000ba8 <__aeabi_d2f>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	601a      	str	r2, [r3, #0]
    *pitch_deg = ekf.x[1] * RAD_TO_DEG;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f48 <imu_fusion_update+0x148>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fb18 	bl	8000548 <__aeabi_f2d>
 8001f18:	a309      	add	r3, pc, #36	@ (adr r3, 8001f40 <imu_fusion_update+0x140>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fb6b 	bl	80005f8 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7fe fe3d 	bl	8000ba8 <__aeabi_d2f>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	601a      	str	r2, [r3, #0]
}
 8001f34:	bf00      	nop
 8001f36:	377c      	adds	r7, #124	@ 0x7c
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd90      	pop	{r4, r7, pc}
 8001f3c:	f3af 8000 	nop.w
 8001f40:	1a63c1f8 	.word	0x1a63c1f8
 8001f44:	404ca5dc 	.word	0x404ca5dc
 8001f48:	2000032c 	.word	0x2000032c
 8001f4c:	0800eb20 	.word	0x0800eb20
 8001f50:	20000008 	.word	0x20000008
 8001f54:	20000018 	.word	0x20000018
 8001f58:	a2529d39 	.word	0xa2529d39
 8001f5c:	3f91df46 	.word	0x3f91df46

08001f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f60:	b5b0      	push	{r4, r5, r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f66:	f000 fd01 	bl	800296c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f6a:	f000 f873 	bl	8002054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f6e:	f000 f929 	bl	80021c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f72:	f000 f907 	bl	8002184 <MX_DMA_Init>
  MX_I2C1_Init();
 8001f76:	f000 f8d7 	bl	8002128 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001f7a:	f008 f8c1 	bl	800a100 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  mpu6050Config();
 8001f7e:	f000 fa07 	bl	8002390 <mpu6050Config>
  mpu6050Read_DMA();
 8001f82:	f000 fa1f 	bl	80023c4 <mpu6050Read_DMA>

  imu_fusion_init();
 8001f86:	f7ff ff2f 	bl	8001de8 <imu_fusion_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t timerUSB = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]


  while (1)
  {
	  /* Log data via USB */
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 8001f8e:	f000 fd53 	bl	8002a38 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b31      	cmp	r3, #49	@ 0x31
 8001f9a:	d9f8      	bls.n	8001f8e <main+0x2e>


		  float dt = SAMPLE_TIME_MS_USB / 1000.0f;
 8001f9c:	4b24      	ldr	r3, [pc, #144]	@ (8002030 <main+0xd0>)
 8001f9e:	60bb      	str	r3, [r7, #8]
		  float roll_estimate_deg, pitch_estimate_deg;

		  // Update fusion algorithm with sensor data
		  imu_fusion_update(Gx, Gy, Gz, Ax, Ay, Az, dt,
 8001fa0:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <main+0xd4>)
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	4b24      	ldr	r3, [pc, #144]	@ (8002038 <main+0xd8>)
 8001fa8:	ed93 7a00 	vldr	s14, [r3]
 8001fac:	4b23      	ldr	r3, [pc, #140]	@ (800203c <main+0xdc>)
 8001fae:	edd3 6a00 	vldr	s13, [r3]
 8001fb2:	4b23      	ldr	r3, [pc, #140]	@ (8002040 <main+0xe0>)
 8001fb4:	ed93 6a00 	vldr	s12, [r3]
 8001fb8:	4b22      	ldr	r3, [pc, #136]	@ (8002044 <main+0xe4>)
 8001fba:	edd3 5a00 	vldr	s11, [r3]
 8001fbe:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <main+0xe8>)
 8001fc0:	ed93 5a00 	vldr	s10, [r3]
 8001fc4:	463a      	mov	r2, r7
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	ed97 3a02 	vldr	s6, [r7, #8]
 8001fd0:	eef0 2a45 	vmov.f32	s5, s10
 8001fd4:	eeb0 2a65 	vmov.f32	s4, s11
 8001fd8:	eef0 1a46 	vmov.f32	s3, s12
 8001fdc:	eeb0 1a66 	vmov.f32	s2, s13
 8001fe0:	eef0 0a47 	vmov.f32	s1, s14
 8001fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe8:	f7ff ff0a 	bl	8001e00 <imu_fusion_update>
		                    &roll_estimate_deg, &pitch_estimate_deg);

	      snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe faaa 	bl	8000548 <__aeabi_f2d>
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	460d      	mov	r5, r1
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe faa4 	bl	8000548 <__aeabi_f2d>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002008:	e9cd 4500 	strd	r4, r5, [sp]
 800200c:	4a0f      	ldr	r2, [pc, #60]	@ (800204c <main+0xec>)
 800200e:	2196      	movs	r1, #150	@ 0x96
 8002010:	480f      	ldr	r0, [pc, #60]	@ (8002050 <main+0xf0>)
 8002012:	f009 faa9 	bl	800b568 <sniprintf>
	               "%.3f, %.3f\r\n",
				   roll_estimate_deg,
				   pitch_estimate_deg);


	      CDC_Transmit_FS((uint8_t*)usb_tx_buffer, strlen(usb_tx_buffer));
 8002016:	480e      	ldr	r0, [pc, #56]	@ (8002050 <main+0xf0>)
 8002018:	f7fe f92a 	bl	8000270 <strlen>
 800201c:	4603      	mov	r3, r0
 800201e:	b29b      	uxth	r3, r3
 8002020:	4619      	mov	r1, r3
 8002022:	480b      	ldr	r0, [pc, #44]	@ (8002050 <main+0xf0>)
 8002024:	f008 f92a 	bl	800a27c <CDC_Transmit_FS>
	      timerUSB = HAL_GetTick();
 8002028:	f000 fd06 	bl	8002a38 <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 800202e:	e7ae      	b.n	8001f8e <main+0x2e>
 8002030:	3d4ccccd 	.word	0x3d4ccccd
 8002034:	2000049c 	.word	0x2000049c
 8002038:	200004a0 	.word	0x200004a0
 800203c:	200004a4 	.word	0x200004a4
 8002040:	20000490 	.word	0x20000490
 8002044:	20000494 	.word	0x20000494
 8002048:	20000498 	.word	0x20000498
 800204c:	0800eb30 	.word	0x0800eb30
 8002050:	200003f8 	.word	0x200003f8

08002054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b094      	sub	sp, #80	@ 0x50
 8002058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800205a:	f107 0320 	add.w	r3, r7, #32
 800205e:	2230      	movs	r2, #48	@ 0x30
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f009 faf7 	bl	800b656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	4b28      	ldr	r3, [pc, #160]	@ (8002120 <SystemClock_Config+0xcc>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	4a27      	ldr	r2, [pc, #156]	@ (8002120 <SystemClock_Config+0xcc>)
 8002082:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002086:	6413      	str	r3, [r2, #64]	@ 0x40
 8002088:	4b25      	ldr	r3, [pc, #148]	@ (8002120 <SystemClock_Config+0xcc>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002094:	2300      	movs	r3, #0
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	4b22      	ldr	r3, [pc, #136]	@ (8002124 <SystemClock_Config+0xd0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a21      	ldr	r2, [pc, #132]	@ (8002124 <SystemClock_Config+0xd0>)
 800209e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002124 <SystemClock_Config+0xd0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020b0:	2301      	movs	r3, #1
 80020b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ba:	2302      	movs	r3, #2
 80020bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020c4:	2304      	movs	r3, #4
 80020c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80020c8:	23a8      	movs	r3, #168	@ 0xa8
 80020ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020cc:	2302      	movs	r3, #2
 80020ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020d0:	2307      	movs	r3, #7
 80020d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020d4:	f107 0320 	add.w	r3, r7, #32
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 f873 	bl	80061c4 <HAL_RCC_OscConfig>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020e4:	f000 f8a4 	bl	8002230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020e8:	230f      	movs	r3, #15
 80020ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020ec:	2302      	movs	r3, #2
 80020ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80020fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	2105      	movs	r1, #5
 8002106:	4618      	mov	r0, r3
 8002108:	f004 fad4 	bl	80066b4 <HAL_RCC_ClockConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002112:	f000 f88d 	bl	8002230 <Error_Handler>
  }
}
 8002116:	bf00      	nop
 8002118:	3750      	adds	r7, #80	@ 0x50
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40007000 	.word	0x40007000

08002128 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800212c:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <MX_I2C1_Init+0x50>)
 800212e:	4a13      	ldr	r2, [pc, #76]	@ (800217c <MX_I2C1_Init+0x54>)
 8002130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002132:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <MX_I2C1_Init+0x50>)
 8002134:	4a12      	ldr	r2, [pc, #72]	@ (8002180 <MX_I2C1_Init+0x58>)
 8002136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002138:	4b0f      	ldr	r3, [pc, #60]	@ (8002178 <MX_I2C1_Init+0x50>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800213e:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <MX_I2C1_Init+0x50>)
 8002140:	2200      	movs	r2, #0
 8002142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <MX_I2C1_Init+0x50>)
 8002146:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800214a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800214c:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <MX_I2C1_Init+0x50>)
 800214e:	2200      	movs	r2, #0
 8002150:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <MX_I2C1_Init+0x50>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002158:	4b07      	ldr	r3, [pc, #28]	@ (8002178 <MX_I2C1_Init+0x50>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <MX_I2C1_Init+0x50>)
 8002160:	2200      	movs	r2, #0
 8002162:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002164:	4804      	ldr	r0, [pc, #16]	@ (8002178 <MX_I2C1_Init+0x50>)
 8002166:	f001 fae3 	bl	8003730 <HAL_I2C_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002170:	f000 f85e 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000344 	.word	0x20000344
 800217c:	40005400 	.word	0x40005400
 8002180:	000186a0 	.word	0x000186a0

08002184 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <MX_DMA_Init+0x3c>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	4a0b      	ldr	r2, [pc, #44]	@ (80021c0 <MX_DMA_Init+0x3c>)
 8002194:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002198:	6313      	str	r3, [r2, #48]	@ 0x30
 800219a:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <MX_DMA_Init+0x3c>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	200b      	movs	r0, #11
 80021ac:	f000 fd4f 	bl	8002c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80021b0:	200b      	movs	r0, #11
 80021b2:	f000 fd68 	bl	8002c86 <HAL_NVIC_EnableIRQ>

}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800

080021c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b17      	ldr	r3, [pc, #92]	@ (800222c <MX_GPIO_Init+0x68>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	4a16      	ldr	r2, [pc, #88]	@ (800222c <MX_GPIO_Init+0x68>)
 80021d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021da:	4b14      	ldr	r3, [pc, #80]	@ (800222c <MX_GPIO_Init+0x68>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <MX_GPIO_Init+0x68>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4a0f      	ldr	r2, [pc, #60]	@ (800222c <MX_GPIO_Init+0x68>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f6:	4b0d      	ldr	r3, [pc, #52]	@ (800222c <MX_GPIO_Init+0x68>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	4b09      	ldr	r3, [pc, #36]	@ (800222c <MX_GPIO_Init+0x68>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a08      	ldr	r2, [pc, #32]	@ (800222c <MX_GPIO_Init+0x68>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b06      	ldr	r3, [pc, #24]	@ (800222c <MX_GPIO_Init+0x68>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800

08002230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002234:	b672      	cpsid	i
}
 8002236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <Error_Handler+0x8>

0800223c <mpu6050Init>:
uint8_t mpu6050Data[14];




void mpu6050Init(void){
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(
 8002242:	2364      	movs	r3, #100	@ 0x64
 8002244:	9302      	str	r3, [sp, #8]
 8002246:	2301      	movs	r3, #1
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <mpu6050Init+0x24>)
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2301      	movs	r3, #1
 8002250:	2275      	movs	r2, #117	@ 0x75
 8002252:	21d0      	movs	r1, #208	@ 0xd0
 8002254:	4803      	ldr	r0, [pc, #12]	@ (8002264 <mpu6050Init+0x28>)
 8002256:	f001 fca9 	bl	8003bac <HAL_I2C_Mem_Read>
				1,
				&whoAreYou,
				1,
				100
				);
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	2000048e 	.word	0x2000048e
 8002264:	20000344 	.word	0x20000344

08002268 <mpu6050powerOn>:

void mpu6050powerOn(void){
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af04      	add	r7, sp, #16
	MemData = 0x00;
 800226e:	4b09      	ldr	r3, [pc, #36]	@ (8002294 <mpu6050powerOn+0x2c>)
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(
 8002274:	2364      	movs	r3, #100	@ 0x64
 8002276:	9302      	str	r3, [sp, #8]
 8002278:	2301      	movs	r3, #1
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <mpu6050powerOn+0x2c>)
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2301      	movs	r3, #1
 8002282:	226b      	movs	r2, #107	@ 0x6b
 8002284:	21d0      	movs	r1, #208	@ 0xd0
 8002286:	4804      	ldr	r0, [pc, #16]	@ (8002298 <mpu6050powerOn+0x30>)
 8002288:	f001 fb96 	bl	80039b8 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000048f 	.word	0x2000048f
 8002298:	20000344 	.word	0x20000344

0800229c <mpu6050Sampling>:

void mpu6050Sampling(void){
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af04      	add	r7, sp, #16
	MemData = 0x07;
 80022a2:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <mpu6050Sampling+0x2c>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(
 80022a8:	2364      	movs	r3, #100	@ 0x64
 80022aa:	9302      	str	r3, [sp, #8]
 80022ac:	2301      	movs	r3, #1
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <mpu6050Sampling+0x2c>)
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2301      	movs	r3, #1
 80022b6:	2219      	movs	r2, #25
 80022b8:	21d0      	movs	r1, #208	@ 0xd0
 80022ba:	4804      	ldr	r0, [pc, #16]	@ (80022cc <mpu6050Sampling+0x30>)
 80022bc:	f001 fb7c 	bl	80039b8 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000048f 	.word	0x2000048f
 80022cc:	20000344 	.word	0x20000344

080022d0 <mpu6050GyroScale>:

void mpu6050GyroScale(gyroScale_t scale){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af04      	add	r7, sp, #16
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
	MemData = 0x00 | (scale << 3);
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <mpu6050GyroScale+0x34>)
 80022e2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(
 80022e4:	2364      	movs	r3, #100	@ 0x64
 80022e6:	9302      	str	r3, [sp, #8]
 80022e8:	2301      	movs	r3, #1
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <mpu6050GyroScale+0x34>)
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2301      	movs	r3, #1
 80022f2:	221b      	movs	r2, #27
 80022f4:	21d0      	movs	r1, #208	@ 0xd0
 80022f6:	4804      	ldr	r0, [pc, #16]	@ (8002308 <mpu6050GyroScale+0x38>)
 80022f8:	f001 fb5e 	bl	80039b8 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	2000048f 	.word	0x2000048f
 8002308:	20000344 	.word	0x20000344

0800230c <mpu6050AccelScale>:

void mpu6050AccelScale(accelScale_t scale){
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af04      	add	r7, sp, #16
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
	MemData = 0x00 | (scale << 3);
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <mpu6050AccelScale+0x34>)
 800231e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(
 8002320:	2364      	movs	r3, #100	@ 0x64
 8002322:	9302      	str	r3, [sp, #8]
 8002324:	2301      	movs	r3, #1
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <mpu6050AccelScale+0x34>)
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2301      	movs	r3, #1
 800232e:	221c      	movs	r2, #28
 8002330:	21d0      	movs	r1, #208	@ 0xd0
 8002332:	4804      	ldr	r0, [pc, #16]	@ (8002344 <mpu6050AccelScale+0x38>)
 8002334:	f001 fb40 	bl	80039b8 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	2000048f 	.word	0x2000048f
 8002344:	20000344 	.word	0x20000344

08002348 <mpu6050ConfigFilter>:

void mpu6050ConfigFilter(uint8_t ext_sync, dlpfCfg_t dlpf_cfg) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af04      	add	r7, sp, #16
 800234e:	4603      	mov	r3, r0
 8002350:	460a      	mov	r2, r1
 8002352:	71fb      	strb	r3, [r7, #7]
 8002354:	4613      	mov	r3, r2
 8002356:	71bb      	strb	r3, [r7, #6]
    // The CONFIG register (address 0x1A) combines EXT_SYNC_SET (bits 5–3) and DLPF_CFG (bits 2–0).
    // ext_sync: external sync setting (0 if not used).
    // dlpf_cfg: desired digital low pass filter configuration.
    uint8_t config = (ext_sync << 3) | (uint8_t)dlpf_cfg;
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	b25a      	sxtb	r2, r3
 800235e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002362:	4313      	orrs	r3, r2
 8002364:	b25b      	sxtb	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Mem_Write(
 800236a:	2364      	movs	r3, #100	@ 0x64
 800236c:	9302      	str	r3, [sp, #8]
 800236e:	2301      	movs	r3, #1
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	f107 030f 	add.w	r3, r7, #15
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2301      	movs	r3, #1
 800237a:	221a      	movs	r2, #26
 800237c:	21d0      	movs	r1, #208	@ 0xd0
 800237e:	4803      	ldr	r0, [pc, #12]	@ (800238c <mpu6050ConfigFilter+0x44>)
 8002380:	f001 fb1a 	bl	80039b8 <HAL_I2C_Mem_Write>
        1,
        &config,
        1,
        100
    );
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000344 	.word	0x20000344

08002390 <mpu6050Config>:


void mpu6050Config(void){
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
	// is valid Condition true 0x68
	mpu6050Init();
 8002394:	f7ff ff52 	bl	800223c <mpu6050Init>

	if(validCondition1){
 8002398:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <mpu6050Config+0x30>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b68      	cmp	r3, #104	@ 0x68
 800239e:	d10d      	bne.n	80023bc <mpu6050Config+0x2c>
	// power on
		mpu6050powerOn();
 80023a0:	f7ff ff62 	bl	8002268 <mpu6050powerOn>
	// sampling data ratio
		mpu6050Sampling();
 80023a4:	f7ff ff7a 	bl	800229c <mpu6050Sampling>
	// gyro scale   (RAW)
		mpu6050GyroScale(degS500);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f7ff ff91 	bl	80022d0 <mpu6050GyroScale>
	// accel scale  (RAW)
		mpu6050AccelScale(g4);
 80023ae:	2001      	movs	r0, #1
 80023b0:	f7ff ffac 	bl	800230c <mpu6050AccelScale>
	// using low pass filter
		mpu6050ConfigFilter(0, DLPF_CFG_10HZ);
 80023b4:	2105      	movs	r1, #5
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7ff ffc6 	bl	8002348 <mpu6050ConfigFilter>

	}
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	2000048e 	.word	0x2000048e

080023c4 <mpu6050Read_DMA>:
	Ay = RAWaccelY/2048.0;
	Az = RAWaccelZ/2048.0;
}


void mpu6050Read_DMA(void) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(&hi2c1,
 80023ca:	230e      	movs	r3, #14
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	4b07      	ldr	r3, [pc, #28]	@ (80023ec <mpu6050Read_DMA+0x28>)
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2301      	movs	r3, #1
 80023d4:	223b      	movs	r2, #59	@ 0x3b
 80023d6:	21d0      	movs	r1, #208	@ 0xd0
 80023d8:	4805      	ldr	r0, [pc, #20]	@ (80023f0 <mpu6050Read_DMA+0x2c>)
 80023da:	f001 fe19 	bl	8004010 <HAL_I2C_Mem_Read_DMA>
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
                                                    mpu6050Data,// Buffer to store the 14 bytes
                                                    14);        // Number of bytes to read
    if(status != HAL_OK) {
        // Handle error here, e.g., log or trigger an error flag.
    }
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200004ac 	.word	0x200004ac
 80023f0:	20000344 	.word	0x20000344
 80023f4:	00000000 	.word	0x00000000

080023f8 <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
    if(hi2c->Instance == I2C1) {
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a58      	ldr	r2, [pc, #352]	@ (8002568 <HAL_I2C_MemRxCpltCallback+0x170>)
 8002406:	4293      	cmp	r3, r2
 8002408:	f040 80a6 	bne.w	8002558 <HAL_I2C_MemRxCpltCallback+0x160>
        // Accelerometer data conversion
        int16_t rawAccelX = (int16_t)((mpu6050Data[0] << 8) | mpu6050Data[1]);
 800240c:	4b57      	ldr	r3, [pc, #348]	@ (800256c <HAL_I2C_MemRxCpltCallback+0x174>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	b21a      	sxth	r2, r3
 8002414:	4b55      	ldr	r3, [pc, #340]	@ (800256c <HAL_I2C_MemRxCpltCallback+0x174>)
 8002416:	785b      	ldrb	r3, [r3, #1]
 8002418:	b21b      	sxth	r3, r3
 800241a:	4313      	orrs	r3, r2
 800241c:	82fb      	strh	r3, [r7, #22]
        int16_t rawAccelY = (int16_t)((mpu6050Data[2] << 8) | mpu6050Data[3]);
 800241e:	4b53      	ldr	r3, [pc, #332]	@ (800256c <HAL_I2C_MemRxCpltCallback+0x174>)
 8002420:	789b      	ldrb	r3, [r3, #2]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	b21a      	sxth	r2, r3
 8002426:	4b51      	ldr	r3, [pc, #324]	@ (800256c <HAL_I2C_MemRxCpltCallback+0x174>)
 8002428:	78db      	ldrb	r3, [r3, #3]
 800242a:	b21b      	sxth	r3, r3
 800242c:	4313      	orrs	r3, r2
 800242e:	82bb      	strh	r3, [r7, #20]
        int16_t rawAccelZ = (int16_t)((mpu6050Data[4] << 8) | mpu6050Data[5]);
 8002430:	4b4e      	ldr	r3, [pc, #312]	@ (800256c <HAL_I2C_MemRxCpltCallback+0x174>)
 8002432:	791b      	ldrb	r3, [r3, #4]
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	b21a      	sxth	r2, r3
 8002438:	4b4c      	ldr	r3, [pc, #304]	@ (800256c <HAL_I2C_MemRxCpltCallback+0x174>)
 800243a:	795b      	ldrb	r3, [r3, #5]
 800243c:	b21b      	sxth	r3, r3
 800243e:	4313      	orrs	r3, r2
 8002440:	827b      	strh	r3, [r7, #18]

        // Temperature data conversion
        int16_t rawTemp = (int16_t)((mpu6050Data[6] << 8) | mpu6050Data[7]);
 8002442:	4b4a      	ldr	r3, [pc, #296]	@ (800256c <HAL_I2C_MemRxCpltCallback+0x174>)
 8002444:	799b      	ldrb	r3, [r3, #6]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	b21a      	sxth	r2, r3
 800244a:	4b48      	ldr	r3, [pc, #288]	@ (800256c <HAL_I2C_MemRxCpltCallback+0x174>)
 800244c:	79db      	ldrb	r3, [r3, #7]
 800244e:	b21b      	sxth	r3, r3
 8002450:	4313      	orrs	r3, r2
 8002452:	823b      	strh	r3, [r7, #16]
        // Conversion formula example: actualTemp = (rawTemp / 340.0) + 36.53

        // Gyro data conversion
        int16_t rawGyroX = (int16_t)((mpu6050Data[8]  << 8) | mpu6050Data[9]);
 8002454:	4b45      	ldr	r3, [pc, #276]	@ (800256c <HAL_I2C_MemRxCpltCallback+0x174>)
 8002456:	7a1b      	ldrb	r3, [r3, #8]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	b21a      	sxth	r2, r3
 800245c:	4b43      	ldr	r3, [pc, #268]	@ (800256c <HAL_I2C_MemRxCpltCallback+0x174>)
 800245e:	7a5b      	ldrb	r3, [r3, #9]
 8002460:	b21b      	sxth	r3, r3
 8002462:	4313      	orrs	r3, r2
 8002464:	81fb      	strh	r3, [r7, #14]
        int16_t rawGyroY = (int16_t)((mpu6050Data[10] << 8) | mpu6050Data[11]);
 8002466:	4b41      	ldr	r3, [pc, #260]	@ (800256c <HAL_I2C_MemRxCpltCallback+0x174>)
 8002468:	7a9b      	ldrb	r3, [r3, #10]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	b21a      	sxth	r2, r3
 800246e:	4b3f      	ldr	r3, [pc, #252]	@ (800256c <HAL_I2C_MemRxCpltCallback+0x174>)
 8002470:	7adb      	ldrb	r3, [r3, #11]
 8002472:	b21b      	sxth	r3, r3
 8002474:	4313      	orrs	r3, r2
 8002476:	81bb      	strh	r3, [r7, #12]
        int16_t rawGyroZ = (int16_t)((mpu6050Data[12] << 8) | mpu6050Data[13]);
 8002478:	4b3c      	ldr	r3, [pc, #240]	@ (800256c <HAL_I2C_MemRxCpltCallback+0x174>)
 800247a:	7b1b      	ldrb	r3, [r3, #12]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	b21a      	sxth	r2, r3
 8002480:	4b3a      	ldr	r3, [pc, #232]	@ (800256c <HAL_I2C_MemRxCpltCallback+0x174>)
 8002482:	7b5b      	ldrb	r3, [r3, #13]
 8002484:	b21b      	sxth	r3, r3
 8002486:	4313      	orrs	r3, r2
 8002488:	817b      	strh	r3, [r7, #10]


        Ax = rawAccelX / 8192.0f;
 800248a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002496:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002570 <HAL_I2C_MemRxCpltCallback+0x178>
 800249a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800249e:	4b35      	ldr	r3, [pc, #212]	@ (8002574 <HAL_I2C_MemRxCpltCallback+0x17c>)
 80024a0:	edc3 7a00 	vstr	s15, [r3]
        Ay = rawAccelY / 8192.0f;
 80024a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024a8:	ee07 3a90 	vmov	s15, r3
 80024ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b0:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8002570 <HAL_I2C_MemRxCpltCallback+0x178>
 80024b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002578 <HAL_I2C_MemRxCpltCallback+0x180>)
 80024ba:	edc3 7a00 	vstr	s15, [r3]
        Az = rawAccelZ / 8192.0f;
 80024be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ca:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8002570 <HAL_I2C_MemRxCpltCallback+0x178>
 80024ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024d2:	4b2a      	ldr	r3, [pc, #168]	@ (800257c <HAL_I2C_MemRxCpltCallback+0x184>)
 80024d4:	edc3 7a00 	vstr	s15, [r3]

        temperature = (rawTemp / 340.0f) + 36.53f; // Example conversion formula
 80024d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002580 <HAL_I2C_MemRxCpltCallback+0x188>
 80024e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ec:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002584 <HAL_I2C_MemRxCpltCallback+0x18c>
 80024f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024f4:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <HAL_I2C_MemRxCpltCallback+0x190>)
 80024f6:	edc3 7a00 	vstr	s15, [r3]

        Gx = rawGyroX / 65.5f;
 80024fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002506:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800258c <HAL_I2C_MemRxCpltCallback+0x194>
 800250a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800250e:	4b20      	ldr	r3, [pc, #128]	@ (8002590 <HAL_I2C_MemRxCpltCallback+0x198>)
 8002510:	edc3 7a00 	vstr	s15, [r3]
        Gy = rawGyroY / 65.5;
 8002514:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe f803 	bl	8000524 <__aeabi_i2d>
 800251e:	a310      	add	r3, pc, #64	@ (adr r3, 8002560 <HAL_I2C_MemRxCpltCallback+0x168>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fe f992 	bl	800084c <__aeabi_ddiv>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	f7fe fb3a 	bl	8000ba8 <__aeabi_d2f>
 8002534:	4603      	mov	r3, r0
 8002536:	4a17      	ldr	r2, [pc, #92]	@ (8002594 <HAL_I2C_MemRxCpltCallback+0x19c>)
 8002538:	6013      	str	r3, [r2, #0]
        Gz = rawGyroZ / 65.5f;
 800253a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002546:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800258c <HAL_I2C_MemRxCpltCallback+0x194>
 800254a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800254e:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <HAL_I2C_MemRxCpltCallback+0x1a0>)
 8002550:	edc3 7a00 	vstr	s15, [r3]
        // Process or store these values as needed
        // For example, update global variables or send them to another module

        // If you need continuous reading and are not using circular mode,
        // you can re-initiate the DMA read here.
        mpu6050Read_DMA();
 8002554:	f7ff ff36 	bl	80023c4 <mpu6050Read_DMA>
    }
}
 8002558:	bf00      	nop
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	00000000 	.word	0x00000000
 8002564:	40506000 	.word	0x40506000
 8002568:	40005400 	.word	0x40005400
 800256c:	200004ac 	.word	0x200004ac
 8002570:	46000000 	.word	0x46000000
 8002574:	20000490 	.word	0x20000490
 8002578:	20000494 	.word	0x20000494
 800257c:	20000498 	.word	0x20000498
 8002580:	43aa0000 	.word	0x43aa0000
 8002584:	42121eb8 	.word	0x42121eb8
 8002588:	200004a8 	.word	0x200004a8
 800258c:	42830000 	.word	0x42830000
 8002590:	2000049c 	.word	0x2000049c
 8002594:	200004a0 	.word	0x200004a0
 8002598:	200004a4 	.word	0x200004a4

0800259c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <HAL_MspInit+0x4c>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	4a0f      	ldr	r2, [pc, #60]	@ (80025e8 <HAL_MspInit+0x4c>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b2:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <HAL_MspInit+0x4c>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_MspInit+0x4c>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	4a08      	ldr	r2, [pc, #32]	@ (80025e8 <HAL_MspInit+0x4c>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ce:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <HAL_MspInit+0x4c>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800

080025ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	@ 0x28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a30      	ldr	r2, [pc, #192]	@ (80026cc <HAL_I2C_MspInit+0xe0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d15a      	bne.n	80026c4 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	4b2f      	ldr	r3, [pc, #188]	@ (80026d0 <HAL_I2C_MspInit+0xe4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	4a2e      	ldr	r2, [pc, #184]	@ (80026d0 <HAL_I2C_MspInit+0xe4>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	6313      	str	r3, [r2, #48]	@ 0x30
 800261e:	4b2c      	ldr	r3, [pc, #176]	@ (80026d0 <HAL_I2C_MspInit+0xe4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800262a:	23c0      	movs	r3, #192	@ 0xc0
 800262c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800262e:	2312      	movs	r3, #18
 8002630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002636:	2303      	movs	r3, #3
 8002638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800263a:	2304      	movs	r3, #4
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4619      	mov	r1, r3
 8002644:	4823      	ldr	r0, [pc, #140]	@ (80026d4 <HAL_I2C_MspInit+0xe8>)
 8002646:	f000 fed7 	bl	80033f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <HAL_I2C_MspInit+0xe4>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	4a1f      	ldr	r2, [pc, #124]	@ (80026d0 <HAL_I2C_MspInit+0xe4>)
 8002654:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002658:	6413      	str	r3, [r2, #64]	@ 0x40
 800265a:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <HAL_I2C_MspInit+0xe4>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002666:	4b1c      	ldr	r3, [pc, #112]	@ (80026d8 <HAL_I2C_MspInit+0xec>)
 8002668:	4a1c      	ldr	r2, [pc, #112]	@ (80026dc <HAL_I2C_MspInit+0xf0>)
 800266a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800266c:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <HAL_I2C_MspInit+0xec>)
 800266e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002672:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002674:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <HAL_I2C_MspInit+0xec>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800267a:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <HAL_I2C_MspInit+0xec>)
 800267c:	2200      	movs	r2, #0
 800267e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002680:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <HAL_I2C_MspInit+0xec>)
 8002682:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002686:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002688:	4b13      	ldr	r3, [pc, #76]	@ (80026d8 <HAL_I2C_MspInit+0xec>)
 800268a:	2200      	movs	r2, #0
 800268c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800268e:	4b12      	ldr	r3, [pc, #72]	@ (80026d8 <HAL_I2C_MspInit+0xec>)
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002694:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <HAL_I2C_MspInit+0xec>)
 8002696:	2200      	movs	r2, #0
 8002698:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800269a:	4b0f      	ldr	r3, [pc, #60]	@ (80026d8 <HAL_I2C_MspInit+0xec>)
 800269c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026a0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026a2:	4b0d      	ldr	r3, [pc, #52]	@ (80026d8 <HAL_I2C_MspInit+0xec>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80026a8:	480b      	ldr	r0, [pc, #44]	@ (80026d8 <HAL_I2C_MspInit+0xec>)
 80026aa:	f000 fb07 	bl	8002cbc <HAL_DMA_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80026b4:	f7ff fdbc 	bl	8002230 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a07      	ldr	r2, [pc, #28]	@ (80026d8 <HAL_I2C_MspInit+0xec>)
 80026bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80026be:	4a06      	ldr	r2, [pc, #24]	@ (80026d8 <HAL_I2C_MspInit+0xec>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80026c4:	bf00      	nop
 80026c6:	3728      	adds	r7, #40	@ 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40005400 	.word	0x40005400
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020400 	.word	0x40020400
 80026d8:	20000398 	.word	0x20000398
 80026dc:	40026010 	.word	0x40026010

080026e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <NMI_Handler+0x4>

080026e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <HardFault_Handler+0x4>

080026f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <MemManage_Handler+0x4>

080026f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <BusFault_Handler+0x4>

08002700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <UsageFault_Handler+0x4>

08002708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002736:	f000 f96b 	bl	8002a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002744:	4802      	ldr	r0, [pc, #8]	@ (8002750 <DMA1_Stream0_IRQHandler+0x10>)
 8002746:	f000 fbe1 	bl	8002f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000398 	.word	0x20000398

08002754 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002758:	4802      	ldr	r0, [pc, #8]	@ (8002764 <OTG_FS_IRQHandler+0x10>)
 800275a:	f002 fc25 	bl	8004fa8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200019a4 	.word	0x200019a4

08002768 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return 1;
 800276c:	2301      	movs	r3, #1
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_kill>:

int _kill(int pid, int sig)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002782:	f008 ffbb 	bl	800b6fc <__errno>
 8002786:	4603      	mov	r3, r0
 8002788:	2216      	movs	r2, #22
 800278a:	601a      	str	r2, [r3, #0]
  return -1;
 800278c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <_exit>:

void _exit (int status)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ffe7 	bl	8002778 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027aa:	bf00      	nop
 80027ac:	e7fd      	b.n	80027aa <_exit+0x12>

080027ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	e00a      	b.n	80027d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027c0:	f3af 8000 	nop.w
 80027c4:	4601      	mov	r1, r0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	60ba      	str	r2, [r7, #8]
 80027cc:	b2ca      	uxtb	r2, r1
 80027ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3301      	adds	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	429a      	cmp	r2, r3
 80027dc:	dbf0      	blt.n	80027c0 <_read+0x12>
  }

  return len;
 80027de:	687b      	ldr	r3, [r7, #4]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	e009      	b.n	800280e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	60ba      	str	r2, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3301      	adds	r3, #1
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	429a      	cmp	r2, r3
 8002814:	dbf1      	blt.n	80027fa <_write+0x12>
  }
  return len;
 8002816:	687b      	ldr	r3, [r7, #4]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <_close>:

int _close(int file)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002828:	f04f 33ff 	mov.w	r3, #4294967295
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002848:	605a      	str	r2, [r3, #4]
  return 0;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_isatty>:

int _isatty(int file)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002860:	2301      	movs	r3, #1
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800286e:	b480      	push	{r7}
 8002870:	b085      	sub	sp, #20
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002890:	4a14      	ldr	r2, [pc, #80]	@ (80028e4 <_sbrk+0x5c>)
 8002892:	4b15      	ldr	r3, [pc, #84]	@ (80028e8 <_sbrk+0x60>)
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800289c:	4b13      	ldr	r3, [pc, #76]	@ (80028ec <_sbrk+0x64>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a4:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <_sbrk+0x64>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	@ (80028f0 <_sbrk+0x68>)
 80028a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <_sbrk+0x64>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d207      	bcs.n	80028c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b8:	f008 ff20 	bl	800b6fc <__errno>
 80028bc:	4603      	mov	r3, r0
 80028be:	220c      	movs	r2, #12
 80028c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	e009      	b.n	80028dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c8:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <_sbrk+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ce:	4b07      	ldr	r3, [pc, #28]	@ (80028ec <_sbrk+0x64>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	4a05      	ldr	r2, [pc, #20]	@ (80028ec <_sbrk+0x64>)
 80028d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028da:	68fb      	ldr	r3, [r7, #12]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20020000 	.word	0x20020000
 80028e8:	00000400 	.word	0x00000400
 80028ec:	200004bc 	.word	0x200004bc
 80028f0:	200021f8 	.word	0x200021f8

080028f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f8:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <SystemInit+0x20>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	4a05      	ldr	r2, [pc, #20]	@ (8002914 <SystemInit+0x20>)
 8002900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002950 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800291c:	f7ff ffea 	bl	80028f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002920:	480c      	ldr	r0, [pc, #48]	@ (8002954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002922:	490d      	ldr	r1, [pc, #52]	@ (8002958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002924:	4a0d      	ldr	r2, [pc, #52]	@ (800295c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002928:	e002      	b.n	8002930 <LoopCopyDataInit>

0800292a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800292c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292e:	3304      	adds	r3, #4

08002930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002934:	d3f9      	bcc.n	800292a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002936:	4a0a      	ldr	r2, [pc, #40]	@ (8002960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002938:	4c0a      	ldr	r4, [pc, #40]	@ (8002964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800293c:	e001      	b.n	8002942 <LoopFillZerobss>

0800293e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002940:	3204      	adds	r2, #4

08002942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002944:	d3fb      	bcc.n	800293e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002946:	f008 fedf 	bl	800b708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800294a:	f7ff fb09 	bl	8001f60 <main>
  bx  lr    
 800294e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002958:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 800295c:	0800f100 	.word	0x0800f100
  ldr r2, =_sbss
 8002960:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8002964:	200021f4 	.word	0x200021f4

08002968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002968:	e7fe      	b.n	8002968 <ADC_IRQHandler>
	...

0800296c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002970:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <HAL_Init+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0d      	ldr	r2, [pc, #52]	@ (80029ac <HAL_Init+0x40>)
 8002976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800297a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800297c:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_Init+0x40>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <HAL_Init+0x40>)
 8002982:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002988:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <HAL_Init+0x40>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a07      	ldr	r2, [pc, #28]	@ (80029ac <HAL_Init+0x40>)
 800298e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002994:	2003      	movs	r0, #3
 8002996:	f000 f94f 	bl	8002c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299a:	200f      	movs	r0, #15
 800299c:	f000 f808 	bl	80029b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a0:	f7ff fdfc 	bl	800259c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40023c00 	.word	0x40023c00

080029b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b8:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <HAL_InitTick+0x54>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <HAL_InitTick+0x58>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	4619      	mov	r1, r3
 80029c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f967 	bl	8002ca2 <HAL_SYSTICK_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e00e      	b.n	80029fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b0f      	cmp	r3, #15
 80029e2:	d80a      	bhi.n	80029fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e4:	2200      	movs	r2, #0
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	f000 f92f 	bl	8002c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f0:	4a06      	ldr	r2, [pc, #24]	@ (8002a0c <HAL_InitTick+0x5c>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e000      	b.n	80029fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	2000003c 	.word	0x2000003c
 8002a08:	20000044 	.word	0x20000044
 8002a0c:	20000040 	.word	0x20000040

08002a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <HAL_IncTick+0x20>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <HAL_IncTick+0x24>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a04      	ldr	r2, [pc, #16]	@ (8002a34 <HAL_IncTick+0x24>)
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000044 	.word	0x20000044
 8002a34:	200004c0 	.word	0x200004c0

08002a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a3c:	4b03      	ldr	r3, [pc, #12]	@ (8002a4c <HAL_GetTick+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	200004c0 	.word	0x200004c0

08002a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff ffee 	bl	8002a38 <HAL_GetTick>
 8002a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d005      	beq.n	8002a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a94 <HAL_Delay+0x44>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a76:	bf00      	nop
 8002a78:	f7ff ffde 	bl	8002a38 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d8f7      	bhi.n	8002a78 <HAL_Delay+0x28>
  {
  }
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000044 	.word	0x20000044

08002a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aca:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	60d3      	str	r3, [r2, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae4:	4b04      	ldr	r3, [pc, #16]	@ (8002af8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	f003 0307 	and.w	r3, r3, #7
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	db0b      	blt.n	8002b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	f003 021f 	and.w	r2, r3, #31
 8002b14:	4907      	ldr	r1, [pc, #28]	@ (8002b34 <__NVIC_EnableIRQ+0x38>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000e100 	.word	0xe000e100

08002b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	6039      	str	r1, [r7, #0]
 8002b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	db0a      	blt.n	8002b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	490c      	ldr	r1, [pc, #48]	@ (8002b84 <__NVIC_SetPriority+0x4c>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b60:	e00a      	b.n	8002b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4908      	ldr	r1, [pc, #32]	@ (8002b88 <__NVIC_SetPriority+0x50>)
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	3b04      	subs	r3, #4
 8002b70:	0112      	lsls	r2, r2, #4
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	440b      	add	r3, r1
 8002b76:	761a      	strb	r2, [r3, #24]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000e100 	.word	0xe000e100
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	@ 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f1c3 0307 	rsb	r3, r3, #7
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	bf28      	it	cs
 8002baa:	2304      	movcs	r3, #4
 8002bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	2b06      	cmp	r3, #6
 8002bb4:	d902      	bls.n	8002bbc <NVIC_EncodePriority+0x30>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3b03      	subs	r3, #3
 8002bba:	e000      	b.n	8002bbe <NVIC_EncodePriority+0x32>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	401a      	ands	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	43d9      	mvns	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	4313      	orrs	r3, r2
         );
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3724      	adds	r7, #36	@ 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c04:	d301      	bcc.n	8002c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00f      	b.n	8002c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c34 <SysTick_Config+0x40>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c12:	210f      	movs	r1, #15
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	f7ff ff8e 	bl	8002b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c1c:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <SysTick_Config+0x40>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c22:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <SysTick_Config+0x40>)
 8002c24:	2207      	movs	r2, #7
 8002c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	e000e010 	.word	0xe000e010

08002c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ff29 	bl	8002a98 <__NVIC_SetPriorityGrouping>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	4603      	mov	r3, r0
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c60:	f7ff ff3e 	bl	8002ae0 <__NVIC_GetPriorityGrouping>
 8002c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	6978      	ldr	r0, [r7, #20]
 8002c6c:	f7ff ff8e 	bl	8002b8c <NVIC_EncodePriority>
 8002c70:	4602      	mov	r2, r0
 8002c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff5d 	bl	8002b38 <__NVIC_SetPriority>
}
 8002c7e:	bf00      	nop
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff31 	bl	8002afc <__NVIC_EnableIRQ>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff ffa2 	bl	8002bf4 <SysTick_Config>
 8002cb0:	4603      	mov	r3, r0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff feb6 	bl	8002a38 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e099      	b.n	8002e0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf8:	e00f      	b.n	8002d1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cfa:	f7ff fe9d 	bl	8002a38 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d908      	bls.n	8002d1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2203      	movs	r2, #3
 8002d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e078      	b.n	8002e0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e8      	bne.n	8002cfa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4b38      	ldr	r3, [pc, #224]	@ (8002e14 <HAL_DMA_Init+0x158>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d107      	bne.n	8002d84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f023 0307 	bic.w	r3, r3, #7
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d117      	bne.n	8002dde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00e      	beq.n	8002dde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fa9d 	bl	8003300 <DMA_CheckFifoParam>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2240      	movs	r2, #64	@ 0x40
 8002dd0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e016      	b.n	8002e0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa54 	bl	8003294 <DMA_CalcBaseAndBitshift>
 8002dec:	4603      	mov	r3, r0
 8002dee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df4:	223f      	movs	r2, #63	@ 0x3f
 8002df6:	409a      	lsls	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	f010803f 	.word	0xf010803f

08002e18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_DMA_Start_IT+0x26>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e040      	b.n	8002ec0 <HAL_DMA_Start_IT+0xa8>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d12f      	bne.n	8002eb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f9e6 	bl	8003238 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e70:	223f      	movs	r2, #63	@ 0x3f
 8002e72:	409a      	lsls	r2, r3
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0216 	orr.w	r2, r2, #22
 8002e86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0208 	orr.w	r2, r2, #8
 8002e9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e005      	b.n	8002ebe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d004      	beq.n	8002ee6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2280      	movs	r2, #128	@ 0x80
 8002ee0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00c      	b.n	8002f00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2205      	movs	r2, #5
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f18:	4b8e      	ldr	r3, [pc, #568]	@ (8003154 <HAL_DMA_IRQHandler+0x248>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a8e      	ldr	r2, [pc, #568]	@ (8003158 <HAL_DMA_IRQHandler+0x24c>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	0a9b      	lsrs	r3, r3, #10
 8002f24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f36:	2208      	movs	r2, #8
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01a      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0204 	bic.w	r2, r2, #4
 8002f5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f64:	2208      	movs	r2, #8
 8002f66:	409a      	lsls	r2, r3
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d012      	beq.n	8002fae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa6:	f043 0202 	orr.w	r2, r3, #2
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d012      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fdc:	f043 0204 	orr.w	r2, r3, #4
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe8:	2210      	movs	r2, #16
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d043      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d03c      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003006:	2210      	movs	r2, #16
 8003008:	409a      	lsls	r2, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d018      	beq.n	800304e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d024      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
 800303a:	e01f      	b.n	800307c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e016      	b.n	800307c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0208 	bic.w	r2, r2, #8
 800306a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003080:	2220      	movs	r2, #32
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 808f 	beq.w	80031ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8087 	beq.w	80031ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a2:	2220      	movs	r2, #32
 80030a4:	409a      	lsls	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b05      	cmp	r3, #5
 80030b4:	d136      	bne.n	8003124 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0216 	bic.w	r2, r2, #22
 80030c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <HAL_DMA_IRQHandler+0x1da>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0208 	bic.w	r2, r2, #8
 80030f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fa:	223f      	movs	r2, #63	@ 0x3f
 80030fc:	409a      	lsls	r2, r3
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003116:	2b00      	cmp	r3, #0
 8003118:	d07e      	beq.n	8003218 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
        }
        return;
 8003122:	e079      	b.n	8003218 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01d      	beq.n	800316e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10d      	bne.n	800315c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003144:	2b00      	cmp	r3, #0
 8003146:	d031      	beq.n	80031ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
 8003150:	e02c      	b.n	80031ac <HAL_DMA_IRQHandler+0x2a0>
 8003152:	bf00      	nop
 8003154:	2000003c 	.word	0x2000003c
 8003158:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003160:	2b00      	cmp	r3, #0
 8003162:	d023      	beq.n	80031ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4798      	blx	r3
 800316c:	e01e      	b.n	80031ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10f      	bne.n	800319c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0210 	bic.w	r2, r2, #16
 800318a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d032      	beq.n	800321a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d022      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2205      	movs	r2, #5
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0201 	bic.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	3301      	adds	r3, #1
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d307      	bcc.n	80031f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f2      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x2cc>
 80031f2:	e000      	b.n	80031f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	4798      	blx	r3
 8003216:	e000      	b.n	800321a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003218:	bf00      	nop
    }
  }
}
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003254:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b40      	cmp	r3, #64	@ 0x40
 8003264:	d108      	bne.n	8003278 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003276:	e007      	b.n	8003288 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	60da      	str	r2, [r3, #12]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	3b10      	subs	r3, #16
 80032a4:	4a14      	ldr	r2, [pc, #80]	@ (80032f8 <DMA_CalcBaseAndBitshift+0x64>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032ae:	4a13      	ldr	r2, [pc, #76]	@ (80032fc <DMA_CalcBaseAndBitshift+0x68>)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d909      	bls.n	80032d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032ca:	f023 0303 	bic.w	r3, r3, #3
 80032ce:	1d1a      	adds	r2, r3, #4
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80032d4:	e007      	b.n	80032e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	aaaaaaab 	.word	0xaaaaaaab
 80032fc:	0800eba0 	.word	0x0800eba0

08003300 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11f      	bne.n	800335a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b03      	cmp	r3, #3
 800331e:	d856      	bhi.n	80033ce <DMA_CheckFifoParam+0xce>
 8003320:	a201      	add	r2, pc, #4	@ (adr r2, 8003328 <DMA_CheckFifoParam+0x28>)
 8003322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003326:	bf00      	nop
 8003328:	08003339 	.word	0x08003339
 800332c:	0800334b 	.word	0x0800334b
 8003330:	08003339 	.word	0x08003339
 8003334:	080033cf 	.word	0x080033cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d046      	beq.n	80033d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003348:	e043      	b.n	80033d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003352:	d140      	bne.n	80033d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003358:	e03d      	b.n	80033d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003362:	d121      	bne.n	80033a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b03      	cmp	r3, #3
 8003368:	d837      	bhi.n	80033da <DMA_CheckFifoParam+0xda>
 800336a:	a201      	add	r2, pc, #4	@ (adr r2, 8003370 <DMA_CheckFifoParam+0x70>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	08003381 	.word	0x08003381
 8003374:	08003387 	.word	0x08003387
 8003378:	08003381 	.word	0x08003381
 800337c:	08003399 	.word	0x08003399
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      break;
 8003384:	e030      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d025      	beq.n	80033de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003396:	e022      	b.n	80033de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033a0:	d11f      	bne.n	80033e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033a6:	e01c      	b.n	80033e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d903      	bls.n	80033b6 <DMA_CheckFifoParam+0xb6>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d003      	beq.n	80033bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033b4:	e018      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
      break;
 80033ba:	e015      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00e      	beq.n	80033e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
      break;
 80033cc:	e00b      	b.n	80033e6 <DMA_CheckFifoParam+0xe6>
      break;
 80033ce:	bf00      	nop
 80033d0:	e00a      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033d2:	bf00      	nop
 80033d4:	e008      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033d6:	bf00      	nop
 80033d8:	e006      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033da:	bf00      	nop
 80033dc:	e004      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033de:	bf00      	nop
 80033e0:	e002      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80033e2:	bf00      	nop
 80033e4:	e000      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033e6:	bf00      	nop
    }
  } 
  
  return status; 
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop

080033f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b089      	sub	sp, #36	@ 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	e16b      	b.n	80036ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003414:	2201      	movs	r2, #1
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	429a      	cmp	r2, r3
 800342e:	f040 815a 	bne.w	80036e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d005      	beq.n	800344a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003446:	2b02      	cmp	r3, #2
 8003448:	d130      	bne.n	80034ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	2203      	movs	r2, #3
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003480:	2201      	movs	r2, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	f003 0201 	and.w	r2, r3, #1
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d017      	beq.n	80034e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d123      	bne.n	800353c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	08da      	lsrs	r2, r3, #3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3208      	adds	r2, #8
 80034fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	220f      	movs	r2, #15
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	08da      	lsrs	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3208      	adds	r2, #8
 8003536:	69b9      	ldr	r1, [r7, #24]
 8003538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	2203      	movs	r2, #3
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0203 	and.w	r2, r3, #3
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80b4 	beq.w	80036e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	4b60      	ldr	r3, [pc, #384]	@ (8003704 <HAL_GPIO_Init+0x30c>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	4a5f      	ldr	r2, [pc, #380]	@ (8003704 <HAL_GPIO_Init+0x30c>)
 8003588:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800358c:	6453      	str	r3, [r2, #68]	@ 0x44
 800358e:	4b5d      	ldr	r3, [pc, #372]	@ (8003704 <HAL_GPIO_Init+0x30c>)
 8003590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800359a:	4a5b      	ldr	r2, [pc, #364]	@ (8003708 <HAL_GPIO_Init+0x310>)
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	089b      	lsrs	r3, r3, #2
 80035a0:	3302      	adds	r3, #2
 80035a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	220f      	movs	r2, #15
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a52      	ldr	r2, [pc, #328]	@ (800370c <HAL_GPIO_Init+0x314>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d02b      	beq.n	800361e <HAL_GPIO_Init+0x226>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a51      	ldr	r2, [pc, #324]	@ (8003710 <HAL_GPIO_Init+0x318>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d025      	beq.n	800361a <HAL_GPIO_Init+0x222>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a50      	ldr	r2, [pc, #320]	@ (8003714 <HAL_GPIO_Init+0x31c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01f      	beq.n	8003616 <HAL_GPIO_Init+0x21e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a4f      	ldr	r2, [pc, #316]	@ (8003718 <HAL_GPIO_Init+0x320>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d019      	beq.n	8003612 <HAL_GPIO_Init+0x21a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4e      	ldr	r2, [pc, #312]	@ (800371c <HAL_GPIO_Init+0x324>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_GPIO_Init+0x216>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4d      	ldr	r2, [pc, #308]	@ (8003720 <HAL_GPIO_Init+0x328>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00d      	beq.n	800360a <HAL_GPIO_Init+0x212>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4c      	ldr	r2, [pc, #304]	@ (8003724 <HAL_GPIO_Init+0x32c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <HAL_GPIO_Init+0x20e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003728 <HAL_GPIO_Init+0x330>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d101      	bne.n	8003602 <HAL_GPIO_Init+0x20a>
 80035fe:	2307      	movs	r3, #7
 8003600:	e00e      	b.n	8003620 <HAL_GPIO_Init+0x228>
 8003602:	2308      	movs	r3, #8
 8003604:	e00c      	b.n	8003620 <HAL_GPIO_Init+0x228>
 8003606:	2306      	movs	r3, #6
 8003608:	e00a      	b.n	8003620 <HAL_GPIO_Init+0x228>
 800360a:	2305      	movs	r3, #5
 800360c:	e008      	b.n	8003620 <HAL_GPIO_Init+0x228>
 800360e:	2304      	movs	r3, #4
 8003610:	e006      	b.n	8003620 <HAL_GPIO_Init+0x228>
 8003612:	2303      	movs	r3, #3
 8003614:	e004      	b.n	8003620 <HAL_GPIO_Init+0x228>
 8003616:	2302      	movs	r3, #2
 8003618:	e002      	b.n	8003620 <HAL_GPIO_Init+0x228>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_GPIO_Init+0x228>
 800361e:	2300      	movs	r3, #0
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	f002 0203 	and.w	r2, r2, #3
 8003626:	0092      	lsls	r2, r2, #2
 8003628:	4093      	lsls	r3, r2
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003630:	4935      	ldr	r1, [pc, #212]	@ (8003708 <HAL_GPIO_Init+0x310>)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	3302      	adds	r3, #2
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800363e:	4b3b      	ldr	r3, [pc, #236]	@ (800372c <HAL_GPIO_Init+0x334>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003662:	4a32      	ldr	r2, [pc, #200]	@ (800372c <HAL_GPIO_Init+0x334>)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003668:	4b30      	ldr	r3, [pc, #192]	@ (800372c <HAL_GPIO_Init+0x334>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800368c:	4a27      	ldr	r2, [pc, #156]	@ (800372c <HAL_GPIO_Init+0x334>)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003692:	4b26      	ldr	r3, [pc, #152]	@ (800372c <HAL_GPIO_Init+0x334>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036b6:	4a1d      	ldr	r2, [pc, #116]	@ (800372c <HAL_GPIO_Init+0x334>)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036bc:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <HAL_GPIO_Init+0x334>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e0:	4a12      	ldr	r2, [pc, #72]	@ (800372c <HAL_GPIO_Init+0x334>)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3301      	adds	r3, #1
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b0f      	cmp	r3, #15
 80036f0:	f67f ae90 	bls.w	8003414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	3724      	adds	r7, #36	@ 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	40013800 	.word	0x40013800
 800370c:	40020000 	.word	0x40020000
 8003710:	40020400 	.word	0x40020400
 8003714:	40020800 	.word	0x40020800
 8003718:	40020c00 	.word	0x40020c00
 800371c:	40021000 	.word	0x40021000
 8003720:	40021400 	.word	0x40021400
 8003724:	40021800 	.word	0x40021800
 8003728:	40021c00 	.word	0x40021c00
 800372c:	40013c00 	.word	0x40013c00

08003730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e12b      	b.n	800399a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fe ff48 	bl	80025ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2224      	movs	r2, #36	@ 0x24
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003782:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003792:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003794:	f003 f986 	bl	8006aa4 <HAL_RCC_GetPCLK1Freq>
 8003798:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4a81      	ldr	r2, [pc, #516]	@ (80039a4 <HAL_I2C_Init+0x274>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d807      	bhi.n	80037b4 <HAL_I2C_Init+0x84>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a80      	ldr	r2, [pc, #512]	@ (80039a8 <HAL_I2C_Init+0x278>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	bf94      	ite	ls
 80037ac:	2301      	movls	r3, #1
 80037ae:	2300      	movhi	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e006      	b.n	80037c2 <HAL_I2C_Init+0x92>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a7d      	ldr	r2, [pc, #500]	@ (80039ac <HAL_I2C_Init+0x27c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	bf94      	ite	ls
 80037bc:	2301      	movls	r3, #1
 80037be:	2300      	movhi	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e0e7      	b.n	800399a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4a78      	ldr	r2, [pc, #480]	@ (80039b0 <HAL_I2C_Init+0x280>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	0c9b      	lsrs	r3, r3, #18
 80037d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4a6a      	ldr	r2, [pc, #424]	@ (80039a4 <HAL_I2C_Init+0x274>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d802      	bhi.n	8003804 <HAL_I2C_Init+0xd4>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	3301      	adds	r3, #1
 8003802:	e009      	b.n	8003818 <HAL_I2C_Init+0xe8>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	4a69      	ldr	r2, [pc, #420]	@ (80039b4 <HAL_I2C_Init+0x284>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	099b      	lsrs	r3, r3, #6
 8003816:	3301      	adds	r3, #1
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	430b      	orrs	r3, r1
 800381e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800382a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	495c      	ldr	r1, [pc, #368]	@ (80039a4 <HAL_I2C_Init+0x274>)
 8003834:	428b      	cmp	r3, r1
 8003836:	d819      	bhi.n	800386c <HAL_I2C_Init+0x13c>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1e59      	subs	r1, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	fbb1 f3f3 	udiv	r3, r1, r3
 8003846:	1c59      	adds	r1, r3, #1
 8003848:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800384c:	400b      	ands	r3, r1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_I2C_Init+0x138>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1e59      	subs	r1, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003860:	3301      	adds	r3, #1
 8003862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003866:	e051      	b.n	800390c <HAL_I2C_Init+0x1dc>
 8003868:	2304      	movs	r3, #4
 800386a:	e04f      	b.n	800390c <HAL_I2C_Init+0x1dc>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d111      	bne.n	8003898 <HAL_I2C_Init+0x168>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1e58      	subs	r0, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6859      	ldr	r1, [r3, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	440b      	add	r3, r1
 8003882:	fbb0 f3f3 	udiv	r3, r0, r3
 8003886:	3301      	adds	r3, #1
 8003888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e012      	b.n	80038be <HAL_I2C_Init+0x18e>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1e58      	subs	r0, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	0099      	lsls	r1, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ae:	3301      	adds	r3, #1
 80038b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_I2C_Init+0x196>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e022      	b.n	800390c <HAL_I2C_Init+0x1dc>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10e      	bne.n	80038ec <HAL_I2C_Init+0x1bc>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1e58      	subs	r0, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6859      	ldr	r1, [r3, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	440b      	add	r3, r1
 80038dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e0:	3301      	adds	r3, #1
 80038e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ea:	e00f      	b.n	800390c <HAL_I2C_Init+0x1dc>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1e58      	subs	r0, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	0099      	lsls	r1, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003902:	3301      	adds	r3, #1
 8003904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003908:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	6809      	ldr	r1, [r1, #0]
 8003910:	4313      	orrs	r3, r2
 8003912:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800393a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6911      	ldr	r1, [r2, #16]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68d2      	ldr	r2, [r2, #12]
 8003946:	4311      	orrs	r1, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	430b      	orrs	r3, r1
 800394e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	000186a0 	.word	0x000186a0
 80039a8:	001e847f 	.word	0x001e847f
 80039ac:	003d08ff 	.word	0x003d08ff
 80039b0:	431bde83 	.word	0x431bde83
 80039b4:	10624dd3 	.word	0x10624dd3

080039b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	461a      	mov	r2, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	817b      	strh	r3, [r7, #10]
 80039ca:	460b      	mov	r3, r1
 80039cc:	813b      	strh	r3, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039d2:	f7ff f831 	bl	8002a38 <HAL_GetTick>
 80039d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	f040 80d9 	bne.w	8003b98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2319      	movs	r3, #25
 80039ec:	2201      	movs	r2, #1
 80039ee:	496d      	ldr	r1, [pc, #436]	@ (8003ba4 <HAL_I2C_Mem_Write+0x1ec>)
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 ff5f 	bl	80048b4 <I2C_WaitOnFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
 80039fe:	e0cc      	b.n	8003b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_I2C_Mem_Write+0x56>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e0c5      	b.n	8003b9a <HAL_I2C_Mem_Write+0x1e2>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d007      	beq.n	8003a34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2221      	movs	r2, #33	@ 0x21
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2240      	movs	r2, #64	@ 0x40
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a3a      	ldr	r2, [r7, #32]
 8003a5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4a4d      	ldr	r2, [pc, #308]	@ (8003ba8 <HAL_I2C_Mem_Write+0x1f0>)
 8003a74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a76:	88f8      	ldrh	r0, [r7, #6]
 8003a78:	893a      	ldrh	r2, [r7, #8]
 8003a7a:	8979      	ldrh	r1, [r7, #10]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	4603      	mov	r3, r0
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fc7a 	bl	8004380 <I2C_RequestMemoryWrite>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d052      	beq.n	8003b38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e081      	b.n	8003b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f001 f824 	bl	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00d      	beq.n	8003ac2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d107      	bne.n	8003abe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003abc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e06b      	b.n	8003b9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d11b      	bne.n	8003b38 <HAL_I2C_Mem_Write+0x180>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d017      	beq.n	8003b38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	781a      	ldrb	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1aa      	bne.n	8003a96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f001 f817 	bl	8004b78 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00d      	beq.n	8003b6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d107      	bne.n	8003b68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e016      	b.n	8003b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	00100002 	.word	0x00100002
 8003ba8:	ffff0000 	.word	0xffff0000

08003bac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	@ 0x30
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	4608      	mov	r0, r1
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4603      	mov	r3, r0
 8003bbc:	817b      	strh	r3, [r7, #10]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	813b      	strh	r3, [r7, #8]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bc6:	f7fe ff37 	bl	8002a38 <HAL_GetTick>
 8003bca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	f040 8214 	bne.w	8004002 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2319      	movs	r3, #25
 8003be0:	2201      	movs	r2, #1
 8003be2:	497b      	ldr	r1, [pc, #492]	@ (8003dd0 <HAL_I2C_Mem_Read+0x224>)
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fe65 	bl	80048b4 <I2C_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e207      	b.n	8004004 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2C_Mem_Read+0x56>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e200      	b.n	8004004 <HAL_I2C_Mem_Read+0x458>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d007      	beq.n	8003c28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2222      	movs	r2, #34	@ 0x22
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2240      	movs	r2, #64	@ 0x40
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4a5b      	ldr	r2, [pc, #364]	@ (8003dd4 <HAL_I2C_Mem_Read+0x228>)
 8003c68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c6a:	88f8      	ldrh	r0, [r7, #6]
 8003c6c:	893a      	ldrh	r2, [r7, #8]
 8003c6e:	8979      	ldrh	r1, [r7, #10]
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	4603      	mov	r3, r0
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fc16 	bl	80044ac <I2C_RequestMemoryRead>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e1bc      	b.n	8004004 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d113      	bne.n	8003cba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c92:	2300      	movs	r3, #0
 8003c94:	623b      	str	r3, [r7, #32]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	623b      	str	r3, [r7, #32]
 8003ca6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e190      	b.n	8003fdc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d11b      	bne.n	8003cfa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e170      	b.n	8003fdc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d11b      	bne.n	8003d3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d22:	2300      	movs	r3, #0
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	e150      	b.n	8003fdc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d50:	e144      	b.n	8003fdc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	f200 80f1 	bhi.w	8003f3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d123      	bne.n	8003dac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 ff4d 	bl	8004c08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e145      	b.n	8004004 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003daa:	e117      	b.n	8003fdc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d14e      	bne.n	8003e52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dba:	2200      	movs	r2, #0
 8003dbc:	4906      	ldr	r1, [pc, #24]	@ (8003dd8 <HAL_I2C_Mem_Read+0x22c>)
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fd78 	bl	80048b4 <I2C_WaitOnFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e11a      	b.n	8004004 <HAL_I2C_Mem_Read+0x458>
 8003dce:	bf00      	nop
 8003dd0:	00100002 	.word	0x00100002
 8003dd4:	ffff0000 	.word	0xffff0000
 8003dd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e50:	e0c4      	b.n	8003fdc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e58:	2200      	movs	r2, #0
 8003e5a:	496c      	ldr	r1, [pc, #432]	@ (800400c <HAL_I2C_Mem_Read+0x460>)
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fd29 	bl	80048b4 <I2C_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0cb      	b.n	8004004 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	4955      	ldr	r1, [pc, #340]	@ (800400c <HAL_I2C_Mem_Read+0x460>)
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fcfb 	bl	80048b4 <I2C_WaitOnFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e09d      	b.n	8004004 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ed6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f3c:	e04e      	b.n	8003fdc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fe60 	bl	8004c08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e058      	b.n	8004004 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d124      	bne.n	8003fdc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d107      	bne.n	8003faa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f47f aeb6 	bne.w	8003d52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e000      	b.n	8004004 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004002:	2302      	movs	r3, #2
  }
}
 8004004:	4618      	mov	r0, r3
 8004006:	3728      	adds	r7, #40	@ 0x28
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	00010004 	.word	0x00010004

08004010 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08c      	sub	sp, #48	@ 0x30
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	4608      	mov	r0, r1
 800401a:	4611      	mov	r1, r2
 800401c:	461a      	mov	r2, r3
 800401e:	4603      	mov	r3, r0
 8004020:	817b      	strh	r3, [r7, #10]
 8004022:	460b      	mov	r3, r1
 8004024:	813b      	strh	r3, [r7, #8]
 8004026:	4613      	mov	r3, r2
 8004028:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800402a:	f7fe fd05 	bl	8002a38 <HAL_GetTick>
 800402e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b20      	cmp	r3, #32
 800403e:	f040 8172 	bne.w	8004326 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004042:	4b93      	ldr	r3, [pc, #588]	@ (8004290 <HAL_I2C_Mem_Read_DMA+0x280>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	08db      	lsrs	r3, r3, #3
 8004048:	4a92      	ldr	r2, [pc, #584]	@ (8004294 <HAL_I2C_Mem_Read_DMA+0x284>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0a1a      	lsrs	r2, r3, #8
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	009a      	lsls	r2, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	3b01      	subs	r3, #1
 8004060:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d112      	bne.n	800408e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004082:	f043 0220 	orr.w	r2, r3, #32
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800408a:	2302      	movs	r3, #2
 800408c:	e14c      	b.n	8004328 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b02      	cmp	r3, #2
 800409a:	d0df      	beq.n	800405c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_I2C_Mem_Read_DMA+0x9a>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e13e      	b.n	8004328 <HAL_I2C_Mem_Read_DMA+0x318>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d007      	beq.n	80040d0 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2222      	movs	r2, #34	@ 0x22
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2240      	movs	r2, #64	@ 0x40
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004100:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4a62      	ldr	r2, [pc, #392]	@ (8004298 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004110:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004112:	897a      	ldrh	r2, [r7, #10]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004118:	893a      	ldrh	r2, [r7, #8]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80cc 	beq.w	80042cc <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004138:	2b00      	cmp	r3, #0
 800413a:	d02d      	beq.n	8004198 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004140:	4a56      	ldr	r2, [pc, #344]	@ (800429c <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004142:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004148:	4a55      	ldr	r2, [pc, #340]	@ (80042a0 <HAL_I2C_Mem_Read_DMA+0x290>)
 800414a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004150:	2200      	movs	r2, #0
 8004152:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004158:	2200      	movs	r2, #0
 800415a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004160:	2200      	movs	r2, #0
 8004162:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004168:	2200      	movs	r2, #0
 800416a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3310      	adds	r3, #16
 8004176:	4619      	mov	r1, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	461a      	mov	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004182:	f7fe fe49 	bl	8002e18 <HAL_DMA_Start_IT>
 8004186:	4603      	mov	r3, r0
 8004188:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800418c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 8087 	bne.w	80042a4 <HAL_I2C_Mem_Read_DMA+0x294>
 8004196:	e013      	b.n	80041c0 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0b3      	b.n	8004328 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80041c0:	88f8      	ldrh	r0, [r7, #6]
 80041c2:	893a      	ldrh	r2, [r7, #8]
 80041c4:	8979      	ldrh	r1, [r7, #10]
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	9301      	str	r3, [sp, #4]
 80041ca:	2323      	movs	r3, #35	@ 0x23
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	4603      	mov	r3, r0
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f96b 	bl	80044ac <I2C_RequestMemoryRead>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d023      	beq.n	8004224 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fe fe71 	bl	8002ec8 <HAL_DMA_Abort_IT>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f0:	2200      	movs	r2, #0
 80041f2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004202:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0201 	bic.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e081      	b.n	8004328 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004228:	2b01      	cmp	r3, #1
 800422a:	d108      	bne.n	800423e <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	e007      	b.n	800424e <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800424c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800424e:	2300      	movs	r3, #0
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800427a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800428a:	605a      	str	r2, [r3, #4]
 800428c:	e049      	b.n	8004322 <HAL_I2C_Mem_Read_DMA+0x312>
 800428e:	bf00      	nop
 8004290:	2000003c 	.word	0x2000003c
 8004294:	14f8b589 	.word	0x14f8b589
 8004298:	ffff0000 	.word	0xffff0000
 800429c:	0800467d 	.word	0x0800467d
 80042a0:	0800483b 	.word	0x0800483b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b8:	f043 0210 	orr.w	r2, r3, #16
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e02d      	b.n	8004328 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80042cc:	88f8      	ldrh	r0, [r7, #6]
 80042ce:	893a      	ldrh	r2, [r7, #8]
 80042d0:	8979      	ldrh	r1, [r7, #10]
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	2323      	movs	r3, #35	@ 0x23
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	4603      	mov	r3, r0
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f8e5 	bl	80044ac <I2C_RequestMemoryRead>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e01d      	b.n	8004328 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004310:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	e000      	b.n	8004328 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8004326:	2302      	movs	r3, #2
  }
}
 8004328:	4618      	mov	r0, r3
 800432a:	3728      	adds	r7, #40	@ 0x28
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4603      	mov	r3, r0
 8004390:	817b      	strh	r3, [r7, #10]
 8004392:	460b      	mov	r3, r1
 8004394:	813b      	strh	r3, [r7, #8]
 8004396:	4613      	mov	r3, r2
 8004398:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fa7c 	bl	80048b4 <I2C_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043d0:	d103      	bne.n	80043da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e05f      	b.n	800449e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043de:	897b      	ldrh	r3, [r7, #10]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	6a3a      	ldr	r2, [r7, #32]
 80043f2:	492d      	ldr	r1, [pc, #180]	@ (80044a8 <I2C_RequestMemoryWrite+0x128>)
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fad7 	bl	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e04c      	b.n	800449e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800441a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800441c:	6a39      	ldr	r1, [r7, #32]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fb62 	bl	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	2b04      	cmp	r3, #4
 8004430:	d107      	bne.n	8004442 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004440:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e02b      	b.n	800449e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d105      	bne.n	8004458 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800444c:	893b      	ldrh	r3, [r7, #8]
 800444e:	b2da      	uxtb	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	611a      	str	r2, [r3, #16]
 8004456:	e021      	b.n	800449c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004458:	893b      	ldrh	r3, [r7, #8]
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	b29b      	uxth	r3, r3
 800445e:	b2da      	uxtb	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004468:	6a39      	ldr	r1, [r7, #32]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fb3c 	bl	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	2b04      	cmp	r3, #4
 800447c:	d107      	bne.n	800448e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800448c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e005      	b.n	800449e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004492:	893b      	ldrh	r3, [r7, #8]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	00010002 	.word	0x00010002

080044ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	4608      	mov	r0, r1
 80044b6:	4611      	mov	r1, r2
 80044b8:	461a      	mov	r2, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	817b      	strh	r3, [r7, #10]
 80044be:	460b      	mov	r3, r1
 80044c0:	813b      	strh	r3, [r7, #8]
 80044c2:	4613      	mov	r3, r2
 80044c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f9de 	bl	80048b4 <I2C_WaitOnFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00d      	beq.n	800451a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800450c:	d103      	bne.n	8004516 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004514:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e0aa      	b.n	8004670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800451a:	897b      	ldrh	r3, [r7, #10]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004528:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	6a3a      	ldr	r2, [r7, #32]
 800452e:	4952      	ldr	r1, [pc, #328]	@ (8004678 <I2C_RequestMemoryRead+0x1cc>)
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fa39 	bl	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e097      	b.n	8004670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004558:	6a39      	ldr	r1, [r7, #32]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 fac4 	bl	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00d      	beq.n	8004582 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	2b04      	cmp	r3, #4
 800456c:	d107      	bne.n	800457e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800457c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e076      	b.n	8004670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d105      	bne.n	8004594 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004588:	893b      	ldrh	r3, [r7, #8]
 800458a:	b2da      	uxtb	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	611a      	str	r2, [r3, #16]
 8004592:	e021      	b.n	80045d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004594:	893b      	ldrh	r3, [r7, #8]
 8004596:	0a1b      	lsrs	r3, r3, #8
 8004598:	b29b      	uxth	r3, r3
 800459a:	b2da      	uxtb	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a4:	6a39      	ldr	r1, [r7, #32]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fa9e 	bl	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00d      	beq.n	80045ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d107      	bne.n	80045ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e050      	b.n	8004670 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045ce:	893b      	ldrh	r3, [r7, #8]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045da:	6a39      	ldr	r1, [r7, #32]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fa83 	bl	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00d      	beq.n	8004604 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d107      	bne.n	8004600 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e035      	b.n	8004670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004612:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	2200      	movs	r2, #0
 800461c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f947 	bl	80048b4 <I2C_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00d      	beq.n	8004648 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800463a:	d103      	bne.n	8004644 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004642:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e013      	b.n	8004670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004648:	897b      	ldrh	r3, [r7, #10]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	b2da      	uxtb	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	6a3a      	ldr	r2, [r7, #32]
 800465c:	4906      	ldr	r1, [pc, #24]	@ (8004678 <I2C_RequestMemoryRead+0x1cc>)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f9a2 	bl	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	00010002 	.word	0x00010002

0800467c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004690:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004698:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80046ae:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046bc:	2200      	movs	r2, #0
 80046be:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80046d6:	2b21      	cmp	r3, #33	@ 0x21
 80046d8:	d007      	beq.n	80046ea <I2C_DMAXferCplt+0x6e>
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80046e0:	2b22      	cmp	r3, #34	@ 0x22
 80046e2:	d131      	bne.n	8004748 <I2C_DMAXferCplt+0xcc>
 80046e4:	7cbb      	ldrb	r3, [r7, #18]
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	d12e      	bne.n	8004748 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046f8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2200      	movs	r2, #0
 80046fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	2b29      	cmp	r3, #41	@ 0x29
 8004704:	d10a      	bne.n	800471c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2221      	movs	r2, #33	@ 0x21
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2228      	movs	r2, #40	@ 0x28
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004714:	6978      	ldr	r0, [r7, #20]
 8004716:	f7ff fe15 	bl	8004344 <HAL_I2C_SlaveTxCpltCallback>
 800471a:	e00c      	b.n	8004736 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800471c:	7cfb      	ldrb	r3, [r7, #19]
 800471e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004720:	d109      	bne.n	8004736 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2222      	movs	r2, #34	@ 0x22
 8004726:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2228      	movs	r2, #40	@ 0x28
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004730:	6978      	ldr	r0, [r7, #20]
 8004732:	f7ff fe11 	bl	8004358 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004744:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004746:	e074      	b.n	8004832 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d06e      	beq.n	8004832 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b01      	cmp	r3, #1
 800475c:	d107      	bne.n	800476e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800476c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800477c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004784:	d009      	beq.n	800479a <I2C_DMAXferCplt+0x11e>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b08      	cmp	r3, #8
 800478a:	d006      	beq.n	800479a <I2C_DMAXferCplt+0x11e>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004792:	d002      	beq.n	800479a <I2C_DMAXferCplt+0x11e>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b20      	cmp	r3, #32
 8004798:	d107      	bne.n	80047aa <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047a8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047b8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047c8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2200      	movs	r2, #0
 80047ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80047d8:	6978      	ldr	r0, [r7, #20]
 80047da:	f7ff fdc7 	bl	800436c <HAL_I2C_ErrorCallback>
}
 80047de:	e028      	b.n	8004832 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b40      	cmp	r3, #64	@ 0x40
 80047f2:	d10a      	bne.n	800480a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004802:	6978      	ldr	r0, [r7, #20]
 8004804:	f7fd fdf8 	bl	80023f8 <HAL_I2C_MemRxCpltCallback>
}
 8004808:	e013      	b.n	8004832 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d002      	beq.n	800481e <I2C_DMAXferCplt+0x1a2>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b20      	cmp	r3, #32
 800481c:	d103      	bne.n	8004826 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2200      	movs	r2, #0
 8004822:	631a      	str	r2, [r3, #48]	@ 0x30
 8004824:	e002      	b.n	800482c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2212      	movs	r2, #18
 800482a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800482c:	6978      	ldr	r0, [r7, #20]
 800482e:	f7ff fd7f 	bl	8004330 <HAL_I2C_MasterRxCpltCallback>
}
 8004832:	bf00      	nop
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004846:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004854:	2200      	movs	r2, #0
 8004856:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004864:	2200      	movs	r2, #0
 8004866:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fe fcd9 	bl	8003220 <HAL_DMA_GetError>
 800486e:	4603      	mov	r3, r0
 8004870:	2b02      	cmp	r3, #2
 8004872:	d01b      	beq.n	80048ac <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004882:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489e:	f043 0210 	orr.w	r2, r3, #16
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7ff fd60 	bl	800436c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048c4:	e048      	b.n	8004958 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d044      	beq.n	8004958 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ce:	f7fe f8b3 	bl	8002a38 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d302      	bcc.n	80048e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d139      	bne.n	8004958 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	0c1b      	lsrs	r3, r3, #16
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d10d      	bne.n	800490a <I2C_WaitOnFlagUntilTimeout+0x56>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	43da      	mvns	r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4013      	ands	r3, r2
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bf0c      	ite	eq
 8004900:	2301      	moveq	r3, #1
 8004902:	2300      	movne	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	e00c      	b.n	8004924 <I2C_WaitOnFlagUntilTimeout+0x70>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	43da      	mvns	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4013      	ands	r3, r2
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	429a      	cmp	r2, r3
 8004928:	d116      	bne.n	8004958 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	f043 0220 	orr.w	r2, r3, #32
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e023      	b.n	80049a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	0c1b      	lsrs	r3, r3, #16
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b01      	cmp	r3, #1
 8004960:	d10d      	bne.n	800497e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	43da      	mvns	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	4013      	ands	r3, r2
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	bf0c      	ite	eq
 8004974:	2301      	moveq	r3, #1
 8004976:	2300      	movne	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	461a      	mov	r2, r3
 800497c:	e00c      	b.n	8004998 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	43da      	mvns	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4013      	ands	r3, r2
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	bf0c      	ite	eq
 8004990:	2301      	moveq	r3, #1
 8004992:	2300      	movne	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	461a      	mov	r2, r3
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	429a      	cmp	r2, r3
 800499c:	d093      	beq.n	80048c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b6:	e071      	b.n	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c6:	d123      	bne.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	f043 0204 	orr.w	r2, r3, #4
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e067      	b.n	8004ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d041      	beq.n	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a18:	f7fe f80e 	bl	8002a38 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d302      	bcc.n	8004a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d136      	bne.n	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d10c      	bne.n	8004a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	43da      	mvns	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4013      	ands	r3, r2
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bf14      	ite	ne
 8004a4a:	2301      	movne	r3, #1
 8004a4c:	2300      	moveq	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	e00b      	b.n	8004a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	43da      	mvns	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf14      	ite	ne
 8004a64:	2301      	movne	r3, #1
 8004a66:	2300      	moveq	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d016      	beq.n	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a88:	f043 0220 	orr.w	r2, r3, #32
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e021      	b.n	8004ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	0c1b      	lsrs	r3, r3, #16
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d10c      	bne.n	8004ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	43da      	mvns	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf14      	ite	ne
 8004ab8:	2301      	movne	r3, #1
 8004aba:	2300      	moveq	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e00b      	b.n	8004ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	43da      	mvns	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4013      	ands	r3, r2
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bf14      	ite	ne
 8004ad2:	2301      	movne	r3, #1
 8004ad4:	2300      	moveq	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f47f af6d 	bne.w	80049b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004af4:	e034      	b.n	8004b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f8e3 	bl	8004cc2 <I2C_IsAcknowledgeFailed>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e034      	b.n	8004b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d028      	beq.n	8004b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0e:	f7fd ff93 	bl	8002a38 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d302      	bcc.n	8004b24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d11d      	bne.n	8004b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2e:	2b80      	cmp	r3, #128	@ 0x80
 8004b30:	d016      	beq.n	8004b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	f043 0220 	orr.w	r2, r3, #32
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e007      	b.n	8004b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6a:	2b80      	cmp	r3, #128	@ 0x80
 8004b6c:	d1c3      	bne.n	8004af6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b84:	e034      	b.n	8004bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f89b 	bl	8004cc2 <I2C_IsAcknowledgeFailed>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e034      	b.n	8004c00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d028      	beq.n	8004bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9e:	f7fd ff4b 	bl	8002a38 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d302      	bcc.n	8004bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d11d      	bne.n	8004bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d016      	beq.n	8004bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bdc:	f043 0220 	orr.w	r2, r3, #32
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e007      	b.n	8004c00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d1c3      	bne.n	8004b86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c14:	e049      	b.n	8004caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f003 0310 	and.w	r3, r3, #16
 8004c20:	2b10      	cmp	r3, #16
 8004c22:	d119      	bne.n	8004c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0210 	mvn.w	r2, #16
 8004c2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e030      	b.n	8004cba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c58:	f7fd feee 	bl	8002a38 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d302      	bcc.n	8004c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d11d      	bne.n	8004caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c78:	2b40      	cmp	r3, #64	@ 0x40
 8004c7a:	d016      	beq.n	8004caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f043 0220 	orr.w	r2, r3, #32
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e007      	b.n	8004cba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb4:	2b40      	cmp	r3, #64	@ 0x40
 8004cb6:	d1ae      	bne.n	8004c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cd8:	d11b      	bne.n	8004d12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ce2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfe:	f043 0204 	orr.w	r2, r3, #4
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e101      	b.n	8004f36 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f005 fbdd 	bl	800a50c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2203      	movs	r2, #3
 8004d56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d60:	d102      	bne.n	8004d68 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f001 ffc4 	bl	8006cfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	7c1a      	ldrb	r2, [r3, #16]
 8004d7a:	f88d 2000 	strb.w	r2, [sp]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d82:	f001 fea3 	bl	8006acc <USB_CoreInit>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0ce      	b.n	8004f36 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 ffbc 	bl	8006d1c <USB_SetCurrentMode>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e0bf      	b.n	8004f36 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	73fb      	strb	r3, [r7, #15]
 8004dba:	e04a      	b.n	8004e52 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004dbc:	7bfa      	ldrb	r2, [r7, #15]
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	3315      	adds	r3, #21
 8004dcc:	2201      	movs	r2, #1
 8004dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004dd0:	7bfa      	ldrb	r2, [r7, #15]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	3314      	adds	r3, #20
 8004de0:	7bfa      	ldrb	r2, [r7, #15]
 8004de2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004de4:	7bfa      	ldrb	r2, [r7, #15]
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	b298      	uxth	r0, r3
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	332e      	adds	r3, #46	@ 0x2e
 8004df8:	4602      	mov	r2, r0
 8004dfa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004dfc:	7bfa      	ldrb	r2, [r7, #15]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	3318      	adds	r3, #24
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	331c      	adds	r3, #28
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e24:	7bfa      	ldrb	r2, [r7, #15]
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	3320      	adds	r3, #32
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e38:	7bfa      	ldrb	r2, [r7, #15]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	3324      	adds	r3, #36	@ 0x24
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	791b      	ldrb	r3, [r3, #4]
 8004e56:	7bfa      	ldrb	r2, [r7, #15]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d3af      	bcc.n	8004dbc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	73fb      	strb	r3, [r7, #15]
 8004e60:	e044      	b.n	8004eec <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e62:	7bfa      	ldrb	r2, [r7, #15]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004e74:	2200      	movs	r2, #0
 8004e76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e78:	7bfa      	ldrb	r2, [r7, #15]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004e8a:	7bfa      	ldrb	r2, [r7, #15]
 8004e8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e8e:	7bfa      	ldrb	r2, [r7, #15]
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ea4:	7bfa      	ldrb	r2, [r7, #15]
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004eba:	7bfa      	ldrb	r2, [r7, #15]
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ed0:	7bfa      	ldrb	r2, [r7, #15]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	791b      	ldrb	r3, [r3, #4]
 8004ef0:	7bfa      	ldrb	r2, [r7, #15]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d3b5      	bcc.n	8004e62 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	7c1a      	ldrb	r2, [r3, #16]
 8004efe:	f88d 2000 	strb.w	r2, [sp]
 8004f02:	3304      	adds	r3, #4
 8004f04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f06:	f001 ff55 	bl	8006db4 <USB_DevInit>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e00c      	b.n	8004f36 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f002 ff9f 	bl	8007e72 <USB_DevDisconnect>

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_PCD_Start+0x1c>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e022      	b.n	8004fa0 <HAL_PCD_Start+0x62>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d009      	beq.n	8004f82 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d105      	bne.n	8004f82 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f001 fea6 	bl	8006cd8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f002 ff4d 	bl	8007e30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b08d      	sub	sp, #52	@ 0x34
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f003 f80b 	bl	8007fda <USB_GetMode>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f040 848c 	bne.w	80058e4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f002 ff6f 	bl	8007eb4 <USB_ReadInterrupts>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8482 	beq.w	80058e2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	0a1b      	lsrs	r3, r3, #8
 8004fe8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f002 ff5c 	bl	8007eb4 <USB_ReadInterrupts>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d107      	bne.n	8005016 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695a      	ldr	r2, [r3, #20]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f002 0202 	and.w	r2, r2, #2
 8005014:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f002 ff4a 	bl	8007eb4 <USB_ReadInterrupts>
 8005020:	4603      	mov	r3, r0
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b10      	cmp	r3, #16
 8005028:	d161      	bne.n	80050ee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699a      	ldr	r2, [r3, #24]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0210 	bic.w	r2, r2, #16
 8005038:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f003 020f 	and.w	r2, r3, #15
 8005046:	4613      	mov	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	4413      	add	r3, r2
 8005056:	3304      	adds	r3, #4
 8005058:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	0c5b      	lsrs	r3, r3, #17
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	2b02      	cmp	r3, #2
 8005064:	d124      	bne.n	80050b0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800506c:	4013      	ands	r3, r2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d035      	beq.n	80050de <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	091b      	lsrs	r3, r3, #4
 800507a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800507c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005080:	b29b      	uxth	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	6a38      	ldr	r0, [r7, #32]
 8005086:	f002 fd81 	bl	8007b8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	091b      	lsrs	r3, r3, #4
 8005092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005096:	441a      	add	r2, r3
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	695a      	ldr	r2, [r3, #20]
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	091b      	lsrs	r3, r3, #4
 80050a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050a8:	441a      	add	r2, r3
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	615a      	str	r2, [r3, #20]
 80050ae:	e016      	b.n	80050de <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	0c5b      	lsrs	r3, r3, #17
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	2b06      	cmp	r3, #6
 80050ba:	d110      	bne.n	80050de <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050c2:	2208      	movs	r2, #8
 80050c4:	4619      	mov	r1, r3
 80050c6:	6a38      	ldr	r0, [r7, #32]
 80050c8:	f002 fd60 	bl	8007b8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	695a      	ldr	r2, [r3, #20]
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	091b      	lsrs	r3, r3, #4
 80050d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050d8:	441a      	add	r2, r3
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699a      	ldr	r2, [r3, #24]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0210 	orr.w	r2, r2, #16
 80050ec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f002 fede 	bl	8007eb4 <USB_ReadInterrupts>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050fe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005102:	f040 80a7 	bne.w	8005254 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f002 fee3 	bl	8007eda <USB_ReadDevAllOutEpInterrupt>
 8005114:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005116:	e099      	b.n	800524c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 808e 	beq.w	8005240 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	4611      	mov	r1, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f002 ff07 	bl	8007f42 <USB_ReadDevOutEPInterrupt>
 8005134:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00c      	beq.n	800515a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800514c:	461a      	mov	r2, r3
 800514e:	2301      	movs	r3, #1
 8005150:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005152:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fea3 	bl	8005ea0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00c      	beq.n	800517e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005170:	461a      	mov	r2, r3
 8005172:	2308      	movs	r3, #8
 8005174:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005176:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 ff79 	bl	8006070 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005194:	461a      	mov	r2, r3
 8005196:	2310      	movs	r3, #16
 8005198:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d030      	beq.n	8005206 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ac:	2b80      	cmp	r3, #128	@ 0x80
 80051ae:	d109      	bne.n	80051c4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051c2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80051c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c6:	4613      	mov	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	4413      	add	r3, r2
 80051d6:	3304      	adds	r3, #4
 80051d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	78db      	ldrb	r3, [r3, #3]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d108      	bne.n	80051f4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2200      	movs	r2, #0
 80051e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f005 fa92 	bl	800a718 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80051f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005200:	461a      	mov	r2, r3
 8005202:	2302      	movs	r3, #2
 8005204:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b00      	cmp	r3, #0
 800520e:	d008      	beq.n	8005222 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521c:	461a      	mov	r2, r3
 800521e:	2320      	movs	r3, #32
 8005220:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005238:	461a      	mov	r2, r3
 800523a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800523e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	3301      	adds	r3, #1
 8005244:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005248:	085b      	lsrs	r3, r3, #1
 800524a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	f47f af62 	bne.w	8005118 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f002 fe2b 	bl	8007eb4 <USB_ReadInterrupts>
 800525e:	4603      	mov	r3, r0
 8005260:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005264:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005268:	f040 80db 	bne.w	8005422 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f002 fe4c 	bl	8007f0e <USB_ReadDevAllInEpInterrupt>
 8005276:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800527c:	e0cd      	b.n	800541a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800527e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 80c2 	beq.w	800540e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	4611      	mov	r1, r2
 8005294:	4618      	mov	r0, r3
 8005296:	f002 fe72 	bl	8007f7e <USB_ReadDevInEPInterrupt>
 800529a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d057      	beq.n	8005356 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	2201      	movs	r2, #1
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	43db      	mvns	r3, r3
 80052c0:	69f9      	ldr	r1, [r7, #28]
 80052c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052c6:	4013      	ands	r3, r2
 80052c8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d6:	461a      	mov	r2, r3
 80052d8:	2301      	movs	r3, #1
 80052da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	799b      	ldrb	r3, [r3, #6]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d132      	bne.n	800534a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	3320      	adds	r3, #32
 80052f4:	6819      	ldr	r1, [r3, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052fa:	4613      	mov	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4403      	add	r3, r0
 8005304:	331c      	adds	r3, #28
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4419      	add	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800530e:	4613      	mov	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4403      	add	r3, r0
 8005318:	3320      	adds	r3, #32
 800531a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531e:	2b00      	cmp	r3, #0
 8005320:	d113      	bne.n	800534a <HAL_PCD_IRQHandler+0x3a2>
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005326:	4613      	mov	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	3324      	adds	r3, #36	@ 0x24
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d108      	bne.n	800534a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005342:	461a      	mov	r2, r3
 8005344:	2101      	movs	r1, #1
 8005346:	f002 fe79 	bl	800803c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	b2db      	uxtb	r3, r3
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f005 f95c 	bl	800a60e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536c:	461a      	mov	r2, r3
 800536e:	2308      	movs	r3, #8
 8005370:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005388:	461a      	mov	r2, r3
 800538a:	2310      	movs	r3, #16
 800538c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d008      	beq.n	80053aa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a4:	461a      	mov	r2, r3
 80053a6:	2340      	movs	r3, #64	@ 0x40
 80053a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d023      	beq.n	80053fc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80053b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053b6:	6a38      	ldr	r0, [r7, #32]
 80053b8:	f001 fe60 	bl	800707c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80053bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053be:	4613      	mov	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	3310      	adds	r3, #16
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	4413      	add	r3, r2
 80053cc:	3304      	adds	r3, #4
 80053ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	78db      	ldrb	r3, [r3, #3]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d108      	bne.n	80053ea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2200      	movs	r2, #0
 80053dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f005 f9a9 	bl	800a73c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f6:	461a      	mov	r2, r3
 80053f8:	2302      	movs	r3, #2
 80053fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005406:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fcbd 	bl	8005d88 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	3301      	adds	r3, #1
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541c:	2b00      	cmp	r3, #0
 800541e:	f47f af2e 	bne.w	800527e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f002 fd44 	bl	8007eb4 <USB_ReadInterrupts>
 800542c:	4603      	mov	r3, r0
 800542e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005432:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005436:	d122      	bne.n	800547e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005452:	2b01      	cmp	r3, #1
 8005454:	d108      	bne.n	8005468 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800545e:	2100      	movs	r1, #0
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fea3 	bl	80061ac <HAL_PCDEx_LPM_Callback>
 8005466:	e002      	b.n	800546e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f005 f947 	bl	800a6fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695a      	ldr	r2, [r3, #20]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800547c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f002 fd16 	bl	8007eb4 <USB_ReadInterrupts>
 8005488:	4603      	mov	r3, r0
 800548a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800548e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005492:	d112      	bne.n	80054ba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d102      	bne.n	80054aa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f005 f903 	bl	800a6b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695a      	ldr	r2, [r3, #20]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80054b8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f002 fcf8 	bl	8007eb4 <USB_ReadInterrupts>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ce:	f040 80b7 	bne.w	8005640 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2110      	movs	r1, #16
 80054ec:	4618      	mov	r0, r3
 80054ee:	f001 fdc5 	bl	800707c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054f2:	2300      	movs	r3, #0
 80054f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054f6:	e046      	b.n	8005586 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80054f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005504:	461a      	mov	r2, r3
 8005506:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800550a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800550c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005526:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800552a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800552c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005538:	461a      	mov	r2, r3
 800553a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800553e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005550:	0151      	lsls	r1, r2, #5
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	440a      	add	r2, r1
 8005556:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800555a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800555e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005570:	0151      	lsls	r1, r2, #5
 8005572:	69fa      	ldr	r2, [r7, #28]
 8005574:	440a      	add	r2, r1
 8005576:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800557a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800557e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005582:	3301      	adds	r3, #1
 8005584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	791b      	ldrb	r3, [r3, #4]
 800558a:	461a      	mov	r2, r3
 800558c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558e:	4293      	cmp	r3, r2
 8005590:	d3b2      	bcc.n	80054f8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055a0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80055a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	7bdb      	ldrb	r3, [r3, #15]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055be:	f043 030b 	orr.w	r3, r3, #11
 80055c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055d4:	f043 030b 	orr.w	r3, r3, #11
 80055d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80055da:	e015      	b.n	8005608 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	69fa      	ldr	r2, [r7, #28]
 80055e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80055ee:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80055f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005602:	f043 030b 	orr.w	r3, r3, #11
 8005606:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005616:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800561a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800562a:	461a      	mov	r2, r3
 800562c:	f002 fd06 	bl	800803c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800563e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f002 fc35 	bl	8007eb4 <USB_ReadInterrupts>
 800564a:	4603      	mov	r3, r0
 800564c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005654:	d123      	bne.n	800569e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f002 fccb 	bl	8007ff6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f001 fd82 	bl	800716e <USB_GetDevSpeed>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681c      	ldr	r4, [r3, #0]
 8005676:	f001 fa09 	bl	8006a8c <HAL_RCC_GetHCLKFreq>
 800567a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005680:	461a      	mov	r2, r3
 8005682:	4620      	mov	r0, r4
 8005684:	f001 fa86 	bl	8006b94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f004 ffe8 	bl	800a65e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695a      	ldr	r2, [r3, #20]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800569c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f002 fc06 	bl	8007eb4 <USB_ReadInterrupts>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d10a      	bne.n	80056c8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f004 ffc5 	bl	800a642 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f002 0208 	and.w	r2, r2, #8
 80056c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f002 fbf1 	bl	8007eb4 <USB_ReadInterrupts>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d8:	2b80      	cmp	r3, #128	@ 0x80
 80056da:	d123      	bne.n	8005724 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056e8:	2301      	movs	r3, #1
 80056ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ec:	e014      	b.n	8005718 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f2:	4613      	mov	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d105      	bne.n	8005712 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	b2db      	uxtb	r3, r3
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fb0a 	bl	8005d26 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	3301      	adds	r3, #1
 8005716:	627b      	str	r3, [r7, #36]	@ 0x24
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	791b      	ldrb	r3, [r3, #4]
 800571c:	461a      	mov	r2, r3
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	4293      	cmp	r3, r2
 8005722:	d3e4      	bcc.n	80056ee <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f002 fbc3 	bl	8007eb4 <USB_ReadInterrupts>
 800572e:	4603      	mov	r3, r0
 8005730:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005734:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005738:	d13c      	bne.n	80057b4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800573a:	2301      	movs	r3, #1
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24
 800573e:	e02b      	b.n	8005798 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005754:	4613      	mov	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	3318      	adds	r3, #24
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d115      	bne.n	8005792 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005766:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005768:	2b00      	cmp	r3, #0
 800576a:	da12      	bge.n	8005792 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005770:	4613      	mov	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	3317      	adds	r3, #23
 800577c:	2201      	movs	r2, #1
 800577e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005788:	b2db      	uxtb	r3, r3
 800578a:	4619      	mov	r1, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 faca 	bl	8005d26 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	3301      	adds	r3, #1
 8005796:	627b      	str	r3, [r7, #36]	@ 0x24
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	791b      	ldrb	r3, [r3, #4]
 800579c:	461a      	mov	r2, r3
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d3cd      	bcc.n	8005740 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695a      	ldr	r2, [r3, #20]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80057b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f002 fb7b 	bl	8007eb4 <USB_ReadInterrupts>
 80057be:	4603      	mov	r3, r0
 80057c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057c8:	d156      	bne.n	8005878 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057ca:	2301      	movs	r3, #1
 80057cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ce:	e045      	b.n	800585c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e4:	4613      	mov	r3, r2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d12e      	bne.n	8005856 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	da2b      	bge.n	8005856 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800580a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800580e:	429a      	cmp	r2, r3
 8005810:	d121      	bne.n	8005856 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005816:	4613      	mov	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005824:	2201      	movs	r2, #1
 8005826:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800584e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005852:	6053      	str	r3, [r2, #4]
            break;
 8005854:	e008      	b.n	8005868 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	3301      	adds	r3, #1
 800585a:	627b      	str	r3, [r7, #36]	@ 0x24
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	791b      	ldrb	r3, [r3, #4]
 8005860:	461a      	mov	r2, r3
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	4293      	cmp	r3, r2
 8005866:	d3b3      	bcc.n	80057d0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005876:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f002 fb19 	bl	8007eb4 <USB_ReadInterrupts>
 8005882:	4603      	mov	r3, r0
 8005884:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800588c:	d10a      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f004 ff66 	bl	800a760 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80058a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f002 fb03 	bl	8007eb4 <USB_ReadInterrupts>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d115      	bne.n	80058e4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f004 ff56 	bl	800a77c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6859      	ldr	r1, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
 80058e0:	e000      	b.n	80058e4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80058e2:	bf00      	nop
    }
  }
}
 80058e4:	3734      	adds	r7, #52	@ 0x34
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd90      	pop	{r4, r7, pc}

080058ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	460b      	mov	r3, r1
 80058f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_PCD_SetAddress+0x1a>
 8005900:	2302      	movs	r3, #2
 8005902:	e012      	b.n	800592a <HAL_PCD_SetAddress+0x40>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	78fa      	ldrb	r2, [r7, #3]
 8005910:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	78fa      	ldrb	r2, [r7, #3]
 8005918:	4611      	mov	r1, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f002 fa62 	bl	8007de4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	4608      	mov	r0, r1
 800593c:	4611      	mov	r1, r2
 800593e:	461a      	mov	r2, r3
 8005940:	4603      	mov	r3, r0
 8005942:	70fb      	strb	r3, [r7, #3]
 8005944:	460b      	mov	r3, r1
 8005946:	803b      	strh	r3, [r7, #0]
 8005948:	4613      	mov	r3, r2
 800594a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005954:	2b00      	cmp	r3, #0
 8005956:	da0f      	bge.n	8005978 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	f003 020f 	and.w	r2, r3, #15
 800595e:	4613      	mov	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	3310      	adds	r3, #16
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	4413      	add	r3, r2
 800596c:	3304      	adds	r3, #4
 800596e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	705a      	strb	r2, [r3, #1]
 8005976:	e00f      	b.n	8005998 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	f003 020f 	and.w	r2, r3, #15
 800597e:	4613      	mov	r3, r2
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	4413      	add	r3, r2
 800598e:	3304      	adds	r3, #4
 8005990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80059a4:	883b      	ldrh	r3, [r7, #0]
 80059a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	78ba      	ldrb	r2, [r7, #2]
 80059b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	785b      	ldrb	r3, [r3, #1]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d004      	beq.n	80059c6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80059c6:	78bb      	ldrb	r3, [r7, #2]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d102      	bne.n	80059d2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_PCD_EP_Open+0xae>
 80059dc:	2302      	movs	r3, #2
 80059de:	e00e      	b.n	80059fe <HAL_PCD_EP_Open+0xcc>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68f9      	ldr	r1, [r7, #12]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f001 fbe2 	bl	80071b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80059fc:	7afb      	ldrb	r3, [r7, #11]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	da0f      	bge.n	8005a3a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	f003 020f 	and.w	r2, r3, #15
 8005a20:	4613      	mov	r3, r2
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	3310      	adds	r3, #16
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3304      	adds	r3, #4
 8005a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	705a      	strb	r2, [r3, #1]
 8005a38:	e00f      	b.n	8005a5a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	f003 020f 	and.w	r2, r3, #15
 8005a40:	4613      	mov	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	4413      	add	r3, r2
 8005a50:	3304      	adds	r3, #4
 8005a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a5a:	78fb      	ldrb	r3, [r7, #3]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_PCD_EP_Close+0x6e>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e00e      	b.n	8005a92 <HAL_PCD_EP_Close+0x8c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68f9      	ldr	r1, [r7, #12]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fc20 	bl	80072c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b086      	sub	sp, #24
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aaa:	7afb      	ldrb	r3, [r7, #11]
 8005aac:	f003 020f 	and.w	r2, r3, #15
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005adc:	7afb      	ldrb	r3, [r7, #11]
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	799b      	ldrb	r3, [r3, #6]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d102      	bne.n	8005af6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	799b      	ldrb	r3, [r3, #6]
 8005afe:	461a      	mov	r2, r3
 8005b00:	6979      	ldr	r1, [r7, #20]
 8005b02:	f001 fcbd 	bl	8007480 <USB_EPStartXfer>

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	f003 020f 	and.w	r2, r3, #15
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	4613      	mov	r3, r2
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005b32:	681b      	ldr	r3, [r3, #0]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	607a      	str	r2, [r7, #4]
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b50:	7afb      	ldrb	r3, [r7, #11]
 8005b52:	f003 020f 	and.w	r2, r3, #15
 8005b56:	4613      	mov	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	3310      	adds	r3, #16
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4413      	add	r3, r2
 8005b64:	3304      	adds	r3, #4
 8005b66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2200      	movs	r2, #0
 8005b78:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b80:	7afb      	ldrb	r3, [r7, #11]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	799b      	ldrb	r3, [r3, #6]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d102      	bne.n	8005b9a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	799b      	ldrb	r3, [r3, #6]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	6979      	ldr	r1, [r7, #20]
 8005ba6:	f001 fc6b 	bl	8007480 <USB_EPStartXfer>

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	7912      	ldrb	r2, [r2, #4]
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e04f      	b.n	8005c72 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	da0f      	bge.n	8005bfa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	f003 020f 	and.w	r2, r3, #15
 8005be0:	4613      	mov	r3, r2
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	4413      	add	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	3310      	adds	r3, #16
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	4413      	add	r3, r2
 8005bee:	3304      	adds	r3, #4
 8005bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	705a      	strb	r2, [r3, #1]
 8005bf8:	e00d      	b.n	8005c16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005bfa:	78fa      	ldrb	r2, [r7, #3]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c1c:	78fb      	ldrb	r3, [r7, #3]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_PCD_EP_SetStall+0x82>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e01d      	b.n	8005c72 <HAL_PCD_EP_SetStall+0xbe>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68f9      	ldr	r1, [r7, #12]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 fff9 	bl	8007c3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d109      	bne.n	8005c68 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6818      	ldr	r0, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	7999      	ldrb	r1, [r3, #6]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c62:	461a      	mov	r2, r3
 8005c64:	f002 f9ea 	bl	800803c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c86:	78fb      	ldrb	r3, [r7, #3]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	7912      	ldrb	r2, [r2, #4]
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d901      	bls.n	8005c98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e042      	b.n	8005d1e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	da0f      	bge.n	8005cc0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	f003 020f 	and.w	r2, r3, #15
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	3310      	adds	r3, #16
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	705a      	strb	r2, [r3, #1]
 8005cbe:	e00f      	b.n	8005ce0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	f003 020f 	and.w	r2, r3, #15
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ce6:	78fb      	ldrb	r3, [r7, #3]
 8005ce8:	f003 030f 	and.w	r3, r3, #15
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_PCD_EP_ClrStall+0x86>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e00e      	b.n	8005d1e <HAL_PCD_EP_ClrStall+0xa4>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68f9      	ldr	r1, [r7, #12]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f002 f802 	bl	8007d18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	da0c      	bge.n	8005d54 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	f003 020f 	and.w	r2, r3, #15
 8005d40:	4613      	mov	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	3310      	adds	r3, #16
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	3304      	adds	r3, #4
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	e00c      	b.n	8005d6e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	f003 020f 	and.w	r2, r3, #15
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	4413      	add	r3, r2
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68f9      	ldr	r1, [r7, #12]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 fe21 	bl	80079bc <USB_EPStopXfer>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	@ 0x28
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	3310      	adds	r3, #16
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	4413      	add	r3, r2
 8005dac:	3304      	adds	r3, #4
 8005dae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	695a      	ldr	r2, [r3, #20]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d901      	bls.n	8005dc0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e06b      	b.n	8005e98 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d902      	bls.n	8005ddc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	3303      	adds	r3, #3
 8005de0:	089b      	lsrs	r3, r3, #2
 8005de2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005de4:	e02a      	b.n	8005e3c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d902      	bls.n	8005e02 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	3303      	adds	r3, #3
 8005e06:	089b      	lsrs	r3, r3, #2
 8005e08:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	68d9      	ldr	r1, [r3, #12]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	6978      	ldr	r0, [r7, #20]
 8005e20:	f001 fe76 	bl	8007b10 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	441a      	add	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	695a      	ldr	r2, [r3, #20]
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	441a      	add	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d809      	bhi.n	8005e66 <PCD_WriteEmptyTxFifo+0xde>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	695a      	ldr	r2, [r3, #20]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d203      	bcs.n	8005e66 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1bf      	bne.n	8005de6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	691a      	ldr	r2, [r3, #16]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d811      	bhi.n	8005e96 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	2201      	movs	r2, #1
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	6939      	ldr	r1, [r7, #16]
 8005e8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e92:	4013      	ands	r3, r2
 8005e94:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3720      	adds	r7, #32
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	333c      	adds	r3, #60	@ 0x3c
 8005eb8:	3304      	adds	r3, #4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	799b      	ldrb	r3, [r3, #6]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d17b      	bne.n	8005fce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d015      	beq.n	8005f0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	4a61      	ldr	r2, [pc, #388]	@ (8006068 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	f240 80b9 	bls.w	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 80b3 	beq.w	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f02:	461a      	mov	r2, r3
 8005f04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f08:	6093      	str	r3, [r2, #8]
 8005f0a:	e0a7      	b.n	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d009      	beq.n	8005f2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f22:	461a      	mov	r2, r3
 8005f24:	2320      	movs	r3, #32
 8005f26:	6093      	str	r3, [r2, #8]
 8005f28:	e098      	b.n	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f040 8093 	bne.w	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	4a4b      	ldr	r2, [pc, #300]	@ (8006068 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d90f      	bls.n	8005f5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f54:	461a      	mov	r2, r3
 8005f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f5a:	6093      	str	r3, [r2, #8]
 8005f5c:	e07e      	b.n	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	4613      	mov	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	4413      	add	r3, r2
 8005f70:	3304      	adds	r3, #4
 8005f72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a1a      	ldr	r2, [r3, #32]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	0159      	lsls	r1, r3, #5
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	440b      	add	r3, r1
 8005f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f8a:	1ad2      	subs	r2, r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d114      	bne.n	8005fc0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fa8:	461a      	mov	r2, r3
 8005faa:	2101      	movs	r1, #1
 8005fac:	f002 f846 	bl	800803c <USB_EP0_OutStart>
 8005fb0:	e006      	b.n	8005fc0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	441a      	add	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f004 fb06 	bl	800a5d8 <HAL_PCD_DataOutStageCallback>
 8005fcc:	e046      	b.n	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	4a26      	ldr	r2, [pc, #152]	@ (800606c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d124      	bne.n	8006020 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fec:	461a      	mov	r2, r3
 8005fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ff2:	6093      	str	r3, [r2, #8]
 8005ff4:	e032      	b.n	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d008      	beq.n	8006012 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600c:	461a      	mov	r2, r3
 800600e:	2320      	movs	r3, #32
 8006010:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f004 fadd 	bl	800a5d8 <HAL_PCD_DataOutStageCallback>
 800601e:	e01d      	b.n	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d114      	bne.n	8006050 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	4613      	mov	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	440b      	add	r3, r1
 8006034:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d108      	bne.n	8006050 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006048:	461a      	mov	r2, r3
 800604a:	2100      	movs	r1, #0
 800604c:	f001 fff6 	bl	800803c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f004 fabe 	bl	800a5d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3720      	adds	r7, #32
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	4f54300a 	.word	0x4f54300a
 800606c:	4f54310a 	.word	0x4f54310a

08006070 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	333c      	adds	r3, #60	@ 0x3c
 8006088:	3304      	adds	r3, #4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4a15      	ldr	r2, [pc, #84]	@ (80060f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d90e      	bls.n	80060c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d009      	beq.n	80060c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060bc:	461a      	mov	r2, r3
 80060be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f004 fa75 	bl	800a5b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4a0a      	ldr	r2, [pc, #40]	@ (80060f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d90c      	bls.n	80060ec <PCD_EP_OutSetupPacket_int+0x7c>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	799b      	ldrb	r3, [r3, #6]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d108      	bne.n	80060ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6818      	ldr	r0, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80060e4:	461a      	mov	r2, r3
 80060e6:	2101      	movs	r1, #1
 80060e8:	f001 ffa8 	bl	800803c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	4f54300a 	.word	0x4f54300a

080060fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
 8006108:	4613      	mov	r3, r2
 800610a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006112:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d107      	bne.n	800612a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800611a:	883b      	ldrh	r3, [r7, #0]
 800611c:	0419      	lsls	r1, r3, #16
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	430a      	orrs	r2, r1
 8006126:	629a      	str	r2, [r3, #40]	@ 0x28
 8006128:	e028      	b.n	800617c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006130:	0c1b      	lsrs	r3, r3, #16
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	4413      	add	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006138:	2300      	movs	r3, #0
 800613a:	73fb      	strb	r3, [r7, #15]
 800613c:	e00d      	b.n	800615a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	3340      	adds	r3, #64	@ 0x40
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	0c1b      	lsrs	r3, r3, #16
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	4413      	add	r3, r2
 8006152:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	3301      	adds	r3, #1
 8006158:	73fb      	strb	r3, [r7, #15]
 800615a:	7bfa      	ldrb	r2, [r7, #15]
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	3b01      	subs	r3, #1
 8006160:	429a      	cmp	r2, r3
 8006162:	d3ec      	bcc.n	800613e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006164:	883b      	ldrh	r3, [r7, #0]
 8006166:	0418      	lsls	r0, r3, #16
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6819      	ldr	r1, [r3, #0]
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	3b01      	subs	r3, #1
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	4302      	orrs	r2, r0
 8006174:	3340      	adds	r3, #64	@ 0x40
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	460b      	mov	r3, r1
 8006194:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	887a      	ldrh	r2, [r7, #2]
 800619c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e267      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d075      	beq.n	80062ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061e2:	4b88      	ldr	r3, [pc, #544]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 030c 	and.w	r3, r3, #12
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d00c      	beq.n	8006208 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061ee:	4b85      	ldr	r3, [pc, #532]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d112      	bne.n	8006220 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061fa:	4b82      	ldr	r3, [pc, #520]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006202:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006206:	d10b      	bne.n	8006220 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006208:	4b7e      	ldr	r3, [pc, #504]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d05b      	beq.n	80062cc <HAL_RCC_OscConfig+0x108>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d157      	bne.n	80062cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e242      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006228:	d106      	bne.n	8006238 <HAL_RCC_OscConfig+0x74>
 800622a:	4b76      	ldr	r3, [pc, #472]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a75      	ldr	r2, [pc, #468]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	e01d      	b.n	8006274 <HAL_RCC_OscConfig+0xb0>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006240:	d10c      	bne.n	800625c <HAL_RCC_OscConfig+0x98>
 8006242:	4b70      	ldr	r3, [pc, #448]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a6f      	ldr	r2, [pc, #444]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	4b6d      	ldr	r3, [pc, #436]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a6c      	ldr	r2, [pc, #432]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	e00b      	b.n	8006274 <HAL_RCC_OscConfig+0xb0>
 800625c:	4b69      	ldr	r3, [pc, #420]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a68      	ldr	r2, [pc, #416]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	4b66      	ldr	r3, [pc, #408]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a65      	ldr	r2, [pc, #404]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 800626e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d013      	beq.n	80062a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800627c:	f7fc fbdc 	bl	8002a38 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006284:	f7fc fbd8 	bl	8002a38 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b64      	cmp	r3, #100	@ 0x64
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e207      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006296:	4b5b      	ldr	r3, [pc, #364]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0f0      	beq.n	8006284 <HAL_RCC_OscConfig+0xc0>
 80062a2:	e014      	b.n	80062ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a4:	f7fc fbc8 	bl	8002a38 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062ac:	f7fc fbc4 	bl	8002a38 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b64      	cmp	r3, #100	@ 0x64
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e1f3      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062be:	4b51      	ldr	r3, [pc, #324]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0xe8>
 80062ca:	e000      	b.n	80062ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d063      	beq.n	80063a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062da:	4b4a      	ldr	r3, [pc, #296]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 030c 	and.w	r3, r3, #12
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00b      	beq.n	80062fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062e6:	4b47      	ldr	r3, [pc, #284]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d11c      	bne.n	800632c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062f2:	4b44      	ldr	r3, [pc, #272]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d116      	bne.n	800632c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062fe:	4b41      	ldr	r3, [pc, #260]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <HAL_RCC_OscConfig+0x152>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d001      	beq.n	8006316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e1c7      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006316:	4b3b      	ldr	r3, [pc, #236]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	4937      	ldr	r1, [pc, #220]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006326:	4313      	orrs	r3, r2
 8006328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800632a:	e03a      	b.n	80063a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d020      	beq.n	8006376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006334:	4b34      	ldr	r3, [pc, #208]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006336:	2201      	movs	r2, #1
 8006338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633a:	f7fc fb7d 	bl	8002a38 <HAL_GetTick>
 800633e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006340:	e008      	b.n	8006354 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006342:	f7fc fb79 	bl	8002a38 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d901      	bls.n	8006354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e1a8      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006354:	4b2b      	ldr	r3, [pc, #172]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0f0      	beq.n	8006342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006360:	4b28      	ldr	r3, [pc, #160]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4925      	ldr	r1, [pc, #148]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006370:	4313      	orrs	r3, r2
 8006372:	600b      	str	r3, [r1, #0]
 8006374:	e015      	b.n	80063a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006376:	4b24      	ldr	r3, [pc, #144]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637c:	f7fc fb5c 	bl	8002a38 <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006384:	f7fc fb58 	bl	8002a38 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e187      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006396:	4b1b      	ldr	r3, [pc, #108]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1f0      	bne.n	8006384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d036      	beq.n	800641c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d016      	beq.n	80063e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063b6:	4b15      	ldr	r3, [pc, #84]	@ (800640c <HAL_RCC_OscConfig+0x248>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063bc:	f7fc fb3c 	bl	8002a38 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063c4:	f7fc fb38 	bl	8002a38 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e167      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80063d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f0      	beq.n	80063c4 <HAL_RCC_OscConfig+0x200>
 80063e2:	e01b      	b.n	800641c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e4:	4b09      	ldr	r3, [pc, #36]	@ (800640c <HAL_RCC_OscConfig+0x248>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ea:	f7fc fb25 	bl	8002a38 <HAL_GetTick>
 80063ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f0:	e00e      	b.n	8006410 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f2:	f7fc fb21 	bl	8002a38 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d907      	bls.n	8006410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e150      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
 8006404:	40023800 	.word	0x40023800
 8006408:	42470000 	.word	0x42470000
 800640c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006410:	4b88      	ldr	r3, [pc, #544]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1ea      	bne.n	80063f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8097 	beq.w	8006558 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800642a:	2300      	movs	r3, #0
 800642c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800642e:	4b81      	ldr	r3, [pc, #516]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10f      	bne.n	800645a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800643a:	2300      	movs	r3, #0
 800643c:	60bb      	str	r3, [r7, #8]
 800643e:	4b7d      	ldr	r3, [pc, #500]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006442:	4a7c      	ldr	r2, [pc, #496]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006448:	6413      	str	r3, [r2, #64]	@ 0x40
 800644a:	4b7a      	ldr	r3, [pc, #488]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006452:	60bb      	str	r3, [r7, #8]
 8006454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006456:	2301      	movs	r3, #1
 8006458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800645a:	4b77      	ldr	r3, [pc, #476]	@ (8006638 <HAL_RCC_OscConfig+0x474>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006462:	2b00      	cmp	r3, #0
 8006464:	d118      	bne.n	8006498 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006466:	4b74      	ldr	r3, [pc, #464]	@ (8006638 <HAL_RCC_OscConfig+0x474>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a73      	ldr	r2, [pc, #460]	@ (8006638 <HAL_RCC_OscConfig+0x474>)
 800646c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006472:	f7fc fae1 	bl	8002a38 <HAL_GetTick>
 8006476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800647a:	f7fc fadd 	bl	8002a38 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e10c      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648c:	4b6a      	ldr	r3, [pc, #424]	@ (8006638 <HAL_RCC_OscConfig+0x474>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0f0      	beq.n	800647a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d106      	bne.n	80064ae <HAL_RCC_OscConfig+0x2ea>
 80064a0:	4b64      	ldr	r3, [pc, #400]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a4:	4a63      	ldr	r2, [pc, #396]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ac:	e01c      	b.n	80064e8 <HAL_RCC_OscConfig+0x324>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b05      	cmp	r3, #5
 80064b4:	d10c      	bne.n	80064d0 <HAL_RCC_OscConfig+0x30c>
 80064b6:	4b5f      	ldr	r3, [pc, #380]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ba:	4a5e      	ldr	r2, [pc, #376]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064bc:	f043 0304 	orr.w	r3, r3, #4
 80064c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80064c2:	4b5c      	ldr	r3, [pc, #368]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c6:	4a5b      	ldr	r2, [pc, #364]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064c8:	f043 0301 	orr.w	r3, r3, #1
 80064cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ce:	e00b      	b.n	80064e8 <HAL_RCC_OscConfig+0x324>
 80064d0:	4b58      	ldr	r3, [pc, #352]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d4:	4a57      	ldr	r2, [pc, #348]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064d6:	f023 0301 	bic.w	r3, r3, #1
 80064da:	6713      	str	r3, [r2, #112]	@ 0x70
 80064dc:	4b55      	ldr	r3, [pc, #340]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e0:	4a54      	ldr	r2, [pc, #336]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064e2:	f023 0304 	bic.w	r3, r3, #4
 80064e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d015      	beq.n	800651c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f0:	f7fc faa2 	bl	8002a38 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f6:	e00a      	b.n	800650e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064f8:	f7fc fa9e 	bl	8002a38 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006506:	4293      	cmp	r3, r2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e0cb      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650e:	4b49      	ldr	r3, [pc, #292]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0ee      	beq.n	80064f8 <HAL_RCC_OscConfig+0x334>
 800651a:	e014      	b.n	8006546 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800651c:	f7fc fa8c 	bl	8002a38 <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006522:	e00a      	b.n	800653a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006524:	f7fc fa88 	bl	8002a38 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e0b5      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800653a:	4b3e      	ldr	r3, [pc, #248]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 800653c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1ee      	bne.n	8006524 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d105      	bne.n	8006558 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800654c:	4b39      	ldr	r3, [pc, #228]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 800654e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006550:	4a38      	ldr	r2, [pc, #224]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006556:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 80a1 	beq.w	80066a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006562:	4b34      	ldr	r3, [pc, #208]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 030c 	and.w	r3, r3, #12
 800656a:	2b08      	cmp	r3, #8
 800656c:	d05c      	beq.n	8006628 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d141      	bne.n	80065fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006576:	4b31      	ldr	r3, [pc, #196]	@ (800663c <HAL_RCC_OscConfig+0x478>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800657c:	f7fc fa5c 	bl	8002a38 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006584:	f7fc fa58 	bl	8002a38 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e087      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006596:	4b27      	ldr	r3, [pc, #156]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f0      	bne.n	8006584 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69da      	ldr	r2, [r3, #28]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b0:	019b      	lsls	r3, r3, #6
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b8:	085b      	lsrs	r3, r3, #1
 80065ba:	3b01      	subs	r3, #1
 80065bc:	041b      	lsls	r3, r3, #16
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c4:	061b      	lsls	r3, r3, #24
 80065c6:	491b      	ldr	r1, [pc, #108]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065cc:	4b1b      	ldr	r3, [pc, #108]	@ (800663c <HAL_RCC_OscConfig+0x478>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d2:	f7fc fa31 	bl	8002a38 <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065da:	f7fc fa2d 	bl	8002a38 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e05c      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ec:	4b11      	ldr	r3, [pc, #68]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0f0      	beq.n	80065da <HAL_RCC_OscConfig+0x416>
 80065f8:	e054      	b.n	80066a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065fa:	4b10      	ldr	r3, [pc, #64]	@ (800663c <HAL_RCC_OscConfig+0x478>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006600:	f7fc fa1a 	bl	8002a38 <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006608:	f7fc fa16 	bl	8002a38 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e045      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800661a:	4b06      	ldr	r3, [pc, #24]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1f0      	bne.n	8006608 <HAL_RCC_OscConfig+0x444>
 8006626:	e03d      	b.n	80066a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d107      	bne.n	8006640 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e038      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
 8006634:	40023800 	.word	0x40023800
 8006638:	40007000 	.word	0x40007000
 800663c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006640:	4b1b      	ldr	r3, [pc, #108]	@ (80066b0 <HAL_RCC_OscConfig+0x4ec>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d028      	beq.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006658:	429a      	cmp	r2, r3
 800665a:	d121      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006666:	429a      	cmp	r2, r3
 8006668:	d11a      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006670:	4013      	ands	r3, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006676:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006678:	4293      	cmp	r3, r2
 800667a:	d111      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	3b01      	subs	r3, #1
 800668a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800668c:	429a      	cmp	r2, r3
 800668e:	d107      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800669c:	429a      	cmp	r2, r3
 800669e:	d001      	beq.n	80066a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40023800 	.word	0x40023800

080066b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e0cc      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066c8:	4b68      	ldr	r3, [pc, #416]	@ (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d90c      	bls.n	80066f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d6:	4b65      	ldr	r3, [pc, #404]	@ (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066de:	4b63      	ldr	r3, [pc, #396]	@ (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d001      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0b8      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d020      	beq.n	800673e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006708:	4b59      	ldr	r3, [pc, #356]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	4a58      	ldr	r2, [pc, #352]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800670e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006712:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006720:	4b53      	ldr	r3, [pc, #332]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	4a52      	ldr	r2, [pc, #328]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006726:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800672a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800672c:	4b50      	ldr	r3, [pc, #320]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	494d      	ldr	r1, [pc, #308]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	4313      	orrs	r3, r2
 800673c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d044      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d107      	bne.n	8006762 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006752:	4b47      	ldr	r3, [pc, #284]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d119      	bne.n	8006792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e07f      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d003      	beq.n	8006772 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800676e:	2b03      	cmp	r3, #3
 8006770:	d107      	bne.n	8006782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006772:	4b3f      	ldr	r3, [pc, #252]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e06f      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006782:	4b3b      	ldr	r3, [pc, #236]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e067      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006792:	4b37      	ldr	r3, [pc, #220]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f023 0203 	bic.w	r2, r3, #3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	4934      	ldr	r1, [pc, #208]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067a4:	f7fc f948 	bl	8002a38 <HAL_GetTick>
 80067a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067aa:	e00a      	b.n	80067c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067ac:	f7fc f944 	bl	8002a38 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e04f      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f003 020c 	and.w	r2, r3, #12
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d1eb      	bne.n	80067ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067d4:	4b25      	ldr	r3, [pc, #148]	@ (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d20c      	bcs.n	80067fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e2:	4b22      	ldr	r3, [pc, #136]	@ (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ea:	4b20      	ldr	r3, [pc, #128]	@ (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d001      	beq.n	80067fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e032      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006808:	4b19      	ldr	r3, [pc, #100]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	4916      	ldr	r1, [pc, #88]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006816:	4313      	orrs	r3, r2
 8006818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006826:	4b12      	ldr	r3, [pc, #72]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	490e      	ldr	r1, [pc, #56]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006836:	4313      	orrs	r3, r2
 8006838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800683a:	f000 f821 	bl	8006880 <HAL_RCC_GetSysClockFreq>
 800683e:	4602      	mov	r2, r0
 8006840:	4b0b      	ldr	r3, [pc, #44]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	091b      	lsrs	r3, r3, #4
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	490a      	ldr	r1, [pc, #40]	@ (8006874 <HAL_RCC_ClockConfig+0x1c0>)
 800684c:	5ccb      	ldrb	r3, [r1, r3]
 800684e:	fa22 f303 	lsr.w	r3, r2, r3
 8006852:	4a09      	ldr	r2, [pc, #36]	@ (8006878 <HAL_RCC_ClockConfig+0x1c4>)
 8006854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006856:	4b09      	ldr	r3, [pc, #36]	@ (800687c <HAL_RCC_ClockConfig+0x1c8>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7fc f8a8 	bl	80029b0 <HAL_InitTick>

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40023c00 	.word	0x40023c00
 8006870:	40023800 	.word	0x40023800
 8006874:	0800eb88 	.word	0x0800eb88
 8006878:	2000003c 	.word	0x2000003c
 800687c:	20000040 	.word	0x20000040

08006880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006884:	b094      	sub	sp, #80	@ 0x50
 8006886:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006898:	4b79      	ldr	r3, [pc, #484]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f003 030c 	and.w	r3, r3, #12
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d00d      	beq.n	80068c0 <HAL_RCC_GetSysClockFreq+0x40>
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	f200 80e1 	bhi.w	8006a6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <HAL_RCC_GetSysClockFreq+0x34>
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d003      	beq.n	80068ba <HAL_RCC_GetSysClockFreq+0x3a>
 80068b2:	e0db      	b.n	8006a6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068b4:	4b73      	ldr	r3, [pc, #460]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x204>)
 80068b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068b8:	e0db      	b.n	8006a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ba:	4b73      	ldr	r3, [pc, #460]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0x208>)
 80068bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068be:	e0d8      	b.n	8006a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d063      	beq.n	800699e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	099b      	lsrs	r3, r3, #6
 80068dc:	2200      	movs	r2, #0
 80068de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80068e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80068ea:	2300      	movs	r3, #0
 80068ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80068f2:	4622      	mov	r2, r4
 80068f4:	462b      	mov	r3, r5
 80068f6:	f04f 0000 	mov.w	r0, #0
 80068fa:	f04f 0100 	mov.w	r1, #0
 80068fe:	0159      	lsls	r1, r3, #5
 8006900:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006904:	0150      	lsls	r0, r2, #5
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4621      	mov	r1, r4
 800690c:	1a51      	subs	r1, r2, r1
 800690e:	6139      	str	r1, [r7, #16]
 8006910:	4629      	mov	r1, r5
 8006912:	eb63 0301 	sbc.w	r3, r3, r1
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006924:	4659      	mov	r1, fp
 8006926:	018b      	lsls	r3, r1, #6
 8006928:	4651      	mov	r1, sl
 800692a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800692e:	4651      	mov	r1, sl
 8006930:	018a      	lsls	r2, r1, #6
 8006932:	4651      	mov	r1, sl
 8006934:	ebb2 0801 	subs.w	r8, r2, r1
 8006938:	4659      	mov	r1, fp
 800693a:	eb63 0901 	sbc.w	r9, r3, r1
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800694a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800694e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006952:	4690      	mov	r8, r2
 8006954:	4699      	mov	r9, r3
 8006956:	4623      	mov	r3, r4
 8006958:	eb18 0303 	adds.w	r3, r8, r3
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	462b      	mov	r3, r5
 8006960:	eb49 0303 	adc.w	r3, r9, r3
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	f04f 0200 	mov.w	r2, #0
 800696a:	f04f 0300 	mov.w	r3, #0
 800696e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006972:	4629      	mov	r1, r5
 8006974:	024b      	lsls	r3, r1, #9
 8006976:	4621      	mov	r1, r4
 8006978:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800697c:	4621      	mov	r1, r4
 800697e:	024a      	lsls	r2, r1, #9
 8006980:	4610      	mov	r0, r2
 8006982:	4619      	mov	r1, r3
 8006984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006986:	2200      	movs	r2, #0
 8006988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800698a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800698c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006990:	f7fa f95a 	bl	8000c48 <__aeabi_uldivmod>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4613      	mov	r3, r2
 800699a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800699c:	e058      	b.n	8006a50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699e:	4b38      	ldr	r3, [pc, #224]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	099b      	lsrs	r3, r3, #6
 80069a4:	2200      	movs	r2, #0
 80069a6:	4618      	mov	r0, r3
 80069a8:	4611      	mov	r1, r2
 80069aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069ae:	623b      	str	r3, [r7, #32]
 80069b0:	2300      	movs	r3, #0
 80069b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80069b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	f04f 0000 	mov.w	r0, #0
 80069c0:	f04f 0100 	mov.w	r1, #0
 80069c4:	0159      	lsls	r1, r3, #5
 80069c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069ca:	0150      	lsls	r0, r2, #5
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4641      	mov	r1, r8
 80069d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80069d6:	4649      	mov	r1, r9
 80069d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069f0:	ebb2 040a 	subs.w	r4, r2, sl
 80069f4:	eb63 050b 	sbc.w	r5, r3, fp
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	00eb      	lsls	r3, r5, #3
 8006a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a06:	00e2      	lsls	r2, r4, #3
 8006a08:	4614      	mov	r4, r2
 8006a0a:	461d      	mov	r5, r3
 8006a0c:	4643      	mov	r3, r8
 8006a0e:	18e3      	adds	r3, r4, r3
 8006a10:	603b      	str	r3, [r7, #0]
 8006a12:	464b      	mov	r3, r9
 8006a14:	eb45 0303 	adc.w	r3, r5, r3
 8006a18:	607b      	str	r3, [r7, #4]
 8006a1a:	f04f 0200 	mov.w	r2, #0
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a26:	4629      	mov	r1, r5
 8006a28:	028b      	lsls	r3, r1, #10
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a30:	4621      	mov	r1, r4
 8006a32:	028a      	lsls	r2, r1, #10
 8006a34:	4610      	mov	r0, r2
 8006a36:	4619      	mov	r1, r3
 8006a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	61bb      	str	r3, [r7, #24]
 8006a3e:	61fa      	str	r2, [r7, #28]
 8006a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a44:	f7fa f900 	bl	8000c48 <__aeabi_uldivmod>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a50:	4b0b      	ldr	r3, [pc, #44]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	0c1b      	lsrs	r3, r3, #16
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006a60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a6a:	e002      	b.n	8006a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a6c:	4b05      	ldr	r3, [pc, #20]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3750      	adds	r7, #80	@ 0x50
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a7e:	bf00      	nop
 8006a80:	40023800 	.word	0x40023800
 8006a84:	00f42400 	.word	0x00f42400
 8006a88:	007a1200 	.word	0x007a1200

08006a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a90:	4b03      	ldr	r3, [pc, #12]	@ (8006aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a92:	681b      	ldr	r3, [r3, #0]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	2000003c 	.word	0x2000003c

08006aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006aa8:	f7ff fff0 	bl	8006a8c <HAL_RCC_GetHCLKFreq>
 8006aac:	4602      	mov	r2, r0
 8006aae:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	0a9b      	lsrs	r3, r3, #10
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	4903      	ldr	r1, [pc, #12]	@ (8006ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aba:	5ccb      	ldrb	r3, [r1, r3]
 8006abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	0800eb98 	.word	0x0800eb98

08006acc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006acc:	b084      	sub	sp, #16
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	f107 001c 	add.w	r0, r7, #28
 8006ada:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ade:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d123      	bne.n	8006b2e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006afa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d105      	bne.n	8006b22 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 fae8 	bl	80080f8 <USB_CoreReset>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]
 8006b2c:	e01b      	b.n	8006b66 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f001 fadc 	bl	80080f8 <USB_CoreReset>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b44:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d106      	bne.n	8006b5a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b58:	e005      	b.n	8006b66 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b66:	7fbb      	ldrb	r3, [r7, #30]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d10b      	bne.n	8006b84 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f043 0206 	orr.w	r2, r3, #6
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f043 0220 	orr.w	r2, r3, #32
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b90:	b004      	add	sp, #16
 8006b92:	4770      	bx	lr

08006b94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d165      	bne.n	8006c74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4a41      	ldr	r2, [pc, #260]	@ (8006cb0 <USB_SetTurnaroundTime+0x11c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d906      	bls.n	8006bbe <USB_SetTurnaroundTime+0x2a>
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4a40      	ldr	r2, [pc, #256]	@ (8006cb4 <USB_SetTurnaroundTime+0x120>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d202      	bcs.n	8006bbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006bb8:	230f      	movs	r3, #15
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	e062      	b.n	8006c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8006cb4 <USB_SetTurnaroundTime+0x120>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d306      	bcc.n	8006bd4 <USB_SetTurnaroundTime+0x40>
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	4a3b      	ldr	r2, [pc, #236]	@ (8006cb8 <USB_SetTurnaroundTime+0x124>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d202      	bcs.n	8006bd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006bce:	230e      	movs	r3, #14
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	e057      	b.n	8006c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4a38      	ldr	r2, [pc, #224]	@ (8006cb8 <USB_SetTurnaroundTime+0x124>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d306      	bcc.n	8006bea <USB_SetTurnaroundTime+0x56>
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4a37      	ldr	r2, [pc, #220]	@ (8006cbc <USB_SetTurnaroundTime+0x128>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d202      	bcs.n	8006bea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006be4:	230d      	movs	r3, #13
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	e04c      	b.n	8006c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	4a33      	ldr	r2, [pc, #204]	@ (8006cbc <USB_SetTurnaroundTime+0x128>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d306      	bcc.n	8006c00 <USB_SetTurnaroundTime+0x6c>
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	4a32      	ldr	r2, [pc, #200]	@ (8006cc0 <USB_SetTurnaroundTime+0x12c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d802      	bhi.n	8006c00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	e041      	b.n	8006c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	4a2f      	ldr	r2, [pc, #188]	@ (8006cc0 <USB_SetTurnaroundTime+0x12c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d906      	bls.n	8006c16 <USB_SetTurnaroundTime+0x82>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8006cc4 <USB_SetTurnaroundTime+0x130>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d802      	bhi.n	8006c16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006c10:	230b      	movs	r3, #11
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	e036      	b.n	8006c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	4a2a      	ldr	r2, [pc, #168]	@ (8006cc4 <USB_SetTurnaroundTime+0x130>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d906      	bls.n	8006c2c <USB_SetTurnaroundTime+0x98>
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	4a29      	ldr	r2, [pc, #164]	@ (8006cc8 <USB_SetTurnaroundTime+0x134>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d802      	bhi.n	8006c2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006c26:	230a      	movs	r3, #10
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	e02b      	b.n	8006c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4a26      	ldr	r2, [pc, #152]	@ (8006cc8 <USB_SetTurnaroundTime+0x134>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d906      	bls.n	8006c42 <USB_SetTurnaroundTime+0xae>
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	4a25      	ldr	r2, [pc, #148]	@ (8006ccc <USB_SetTurnaroundTime+0x138>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d202      	bcs.n	8006c42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006c3c:	2309      	movs	r3, #9
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	e020      	b.n	8006c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	4a21      	ldr	r2, [pc, #132]	@ (8006ccc <USB_SetTurnaroundTime+0x138>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d306      	bcc.n	8006c58 <USB_SetTurnaroundTime+0xc4>
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	4a20      	ldr	r2, [pc, #128]	@ (8006cd0 <USB_SetTurnaroundTime+0x13c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d802      	bhi.n	8006c58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c52:	2308      	movs	r3, #8
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	e015      	b.n	8006c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8006cd0 <USB_SetTurnaroundTime+0x13c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d906      	bls.n	8006c6e <USB_SetTurnaroundTime+0xda>
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4a1c      	ldr	r2, [pc, #112]	@ (8006cd4 <USB_SetTurnaroundTime+0x140>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d202      	bcs.n	8006c6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c68:	2307      	movs	r3, #7
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	e00a      	b.n	8006c84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c6e:	2306      	movs	r3, #6
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	e007      	b.n	8006c84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d102      	bne.n	8006c80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c7a:	2309      	movs	r3, #9
 8006c7c:	617b      	str	r3, [r7, #20]
 8006c7e:	e001      	b.n	8006c84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c80:	2309      	movs	r3, #9
 8006c82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	029b      	lsls	r3, r3, #10
 8006c98:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	371c      	adds	r7, #28
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	00d8acbf 	.word	0x00d8acbf
 8006cb4:	00e4e1c0 	.word	0x00e4e1c0
 8006cb8:	00f42400 	.word	0x00f42400
 8006cbc:	01067380 	.word	0x01067380
 8006cc0:	011a499f 	.word	0x011a499f
 8006cc4:	01312cff 	.word	0x01312cff
 8006cc8:	014ca43f 	.word	0x014ca43f
 8006ccc:	016e3600 	.word	0x016e3600
 8006cd0:	01a6ab1f 	.word	0x01a6ab1f
 8006cd4:	01e84800 	.word	0x01e84800

08006cd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f043 0201 	orr.w	r2, r3, #1
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f023 0201 	bic.w	r2, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d38:	78fb      	ldrb	r3, [r7, #3]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d115      	bne.n	8006d6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d4a:	200a      	movs	r0, #10
 8006d4c:	f7fb fe80 	bl	8002a50 <HAL_Delay>
      ms += 10U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	330a      	adds	r3, #10
 8006d54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 f93f 	bl	8007fda <USB_GetMode>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d01e      	beq.n	8006da0 <USB_SetCurrentMode+0x84>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d66:	d9f0      	bls.n	8006d4a <USB_SetCurrentMode+0x2e>
 8006d68:	e01a      	b.n	8006da0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d6a:	78fb      	ldrb	r3, [r7, #3]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d115      	bne.n	8006d9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d7c:	200a      	movs	r0, #10
 8006d7e:	f7fb fe67 	bl	8002a50 <HAL_Delay>
      ms += 10U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	330a      	adds	r3, #10
 8006d86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 f926 	bl	8007fda <USB_GetMode>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d005      	beq.n	8006da0 <USB_SetCurrentMode+0x84>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d98:	d9f0      	bls.n	8006d7c <USB_SetCurrentMode+0x60>
 8006d9a:	e001      	b.n	8006da0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e005      	b.n	8006dac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2bc8      	cmp	r3, #200	@ 0xc8
 8006da4:	d101      	bne.n	8006daa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e000      	b.n	8006dac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006db4:	b084      	sub	sp, #16
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b086      	sub	sp, #24
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006dce:	2300      	movs	r3, #0
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	e009      	b.n	8006de8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	3340      	adds	r3, #64	@ 0x40
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	2200      	movs	r2, #0
 8006de0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	3301      	adds	r3, #1
 8006de6:	613b      	str	r3, [r7, #16]
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	2b0e      	cmp	r3, #14
 8006dec:	d9f2      	bls.n	8006dd4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006dee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d11c      	bne.n	8006e30 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e04:	f043 0302 	orr.w	r3, r3, #2
 8006e08:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e26:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e2e:	e00b      	b.n	8006e48 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e34:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e40:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e4e:	461a      	mov	r2, r3
 8006e50:	2300      	movs	r3, #0
 8006e52:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e54:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d10d      	bne.n	8006e78 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d104      	bne.n	8006e6e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e64:	2100      	movs	r1, #0
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f968 	bl	800713c <USB_SetDevSpeed>
 8006e6c:	e008      	b.n	8006e80 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e6e:	2101      	movs	r1, #1
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f963 	bl	800713c <USB_SetDevSpeed>
 8006e76:	e003      	b.n	8006e80 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e78:	2103      	movs	r1, #3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f95e 	bl	800713c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e80:	2110      	movs	r1, #16
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f8fa 	bl	800707c <USB_FlushTxFifo>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f924 	bl	80070e0 <USB_FlushRxFifo>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	2300      	movs	r3, #0
 8006eac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	e043      	b.n	8006f54 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ee2:	d118      	bne.n	8006f16 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10a      	bne.n	8006f00 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	e013      	b.n	8006f28 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	e008      	b.n	8006f28 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f22:	461a      	mov	r2, r3
 8006f24:	2300      	movs	r3, #0
 8006f26:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f34:	461a      	mov	r2, r3
 8006f36:	2300      	movs	r3, #0
 8006f38:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f46:	461a      	mov	r2, r3
 8006f48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	3301      	adds	r3, #1
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f58:	461a      	mov	r2, r3
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d3b5      	bcc.n	8006ecc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f60:	2300      	movs	r3, #0
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	e043      	b.n	8006fee <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f7c:	d118      	bne.n	8006fb0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10a      	bne.n	8006f9a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f90:	461a      	mov	r2, r3
 8006f92:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	e013      	b.n	8006fc2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	e008      	b.n	8006fc2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fce:	461a      	mov	r2, r3
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fe6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	3301      	adds	r3, #1
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d3b5      	bcc.n	8006f66 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800700c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800701a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800701c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	f043 0210 	orr.w	r2, r3, #16
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699a      	ldr	r2, [r3, #24]
 8007034:	4b10      	ldr	r3, [pc, #64]	@ (8007078 <USB_DevInit+0x2c4>)
 8007036:	4313      	orrs	r3, r2
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800703c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	f043 0208 	orr.w	r2, r3, #8
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007050:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007054:	2b01      	cmp	r3, #1
 8007056:	d107      	bne.n	8007068 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007060:	f043 0304 	orr.w	r3, r3, #4
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007074:	b004      	add	sp, #16
 8007076:	4770      	bx	lr
 8007078:	803c3800 	.word	0x803c3800

0800707c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3301      	adds	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007096:	d901      	bls.n	800709c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e01b      	b.n	80070d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	daf2      	bge.n	800708a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	019b      	lsls	r3, r3, #6
 80070ac:	f043 0220 	orr.w	r2, r3, #32
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3301      	adds	r3, #1
 80070b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070c0:	d901      	bls.n	80070c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e006      	b.n	80070d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	d0f0      	beq.n	80070b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	3301      	adds	r3, #1
 80070f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070f8:	d901      	bls.n	80070fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e018      	b.n	8007130 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	daf2      	bge.n	80070ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2210      	movs	r2, #16
 800710e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3301      	adds	r3, #1
 8007114:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800711c:	d901      	bls.n	8007122 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e006      	b.n	8007130 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f003 0310 	and.w	r3, r3, #16
 800712a:	2b10      	cmp	r3, #16
 800712c:	d0f0      	beq.n	8007110 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	68f9      	ldr	r1, [r7, #12]
 8007158:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800715c:	4313      	orrs	r3, r2
 800715e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800716e:	b480      	push	{r7}
 8007170:	b087      	sub	sp, #28
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 0306 	and.w	r3, r3, #6
 8007186:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800718e:	2300      	movs	r3, #0
 8007190:	75fb      	strb	r3, [r7, #23]
 8007192:	e00a      	b.n	80071aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2b02      	cmp	r3, #2
 8007198:	d002      	beq.n	80071a0 <USB_GetDevSpeed+0x32>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b06      	cmp	r3, #6
 800719e:	d102      	bne.n	80071a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80071a0:	2302      	movs	r3, #2
 80071a2:	75fb      	strb	r3, [r7, #23]
 80071a4:	e001      	b.n	80071aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80071a6:	230f      	movs	r3, #15
 80071a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	371c      	adds	r7, #28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	785b      	ldrb	r3, [r3, #1]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d13a      	bne.n	800724a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071da:	69da      	ldr	r2, [r3, #28]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	f003 030f 	and.w	r3, r3, #15
 80071e4:	2101      	movs	r1, #1
 80071e6:	fa01 f303 	lsl.w	r3, r1, r3
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	68f9      	ldr	r1, [r7, #12]
 80071ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071f2:	4313      	orrs	r3, r2
 80071f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d155      	bne.n	80072b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	015a      	lsls	r2, r3, #5
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4413      	add	r3, r2
 8007214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	791b      	ldrb	r3, [r3, #4]
 8007226:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007228:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	059b      	lsls	r3, r3, #22
 800722e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007230:	4313      	orrs	r3, r2
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	440a      	add	r2, r1
 800723a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800723e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	e036      	b.n	80072b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007250:	69da      	ldr	r2, [r3, #28]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	2101      	movs	r1, #1
 800725c:	fa01 f303 	lsl.w	r3, r1, r3
 8007260:	041b      	lsls	r3, r3, #16
 8007262:	68f9      	ldr	r1, [r7, #12]
 8007264:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007268:	4313      	orrs	r3, r2
 800726a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4413      	add	r3, r2
 8007274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d11a      	bne.n	80072b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	791b      	ldrb	r3, [r3, #4]
 800729c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800729e:	430b      	orrs	r3, r1
 80072a0:	4313      	orrs	r3, r2
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	0151      	lsls	r1, r2, #5
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	440a      	add	r2, r1
 80072aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
	...

080072c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	785b      	ldrb	r3, [r3, #1]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d161      	bne.n	80073a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072fa:	d11f      	bne.n	800733c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	440a      	add	r2, r1
 8007312:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007316:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800731a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	0151      	lsls	r1, r2, #5
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	440a      	add	r2, r1
 8007332:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007336:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800733a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007342:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	f003 030f 	and.w	r3, r3, #15
 800734c:	2101      	movs	r1, #1
 800734e:	fa01 f303 	lsl.w	r3, r1, r3
 8007352:	b29b      	uxth	r3, r3
 8007354:	43db      	mvns	r3, r3
 8007356:	68f9      	ldr	r1, [r7, #12]
 8007358:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800735c:	4013      	ands	r3, r2
 800735e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007366:	69da      	ldr	r2, [r3, #28]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	f003 030f 	and.w	r3, r3, #15
 8007370:	2101      	movs	r1, #1
 8007372:	fa01 f303 	lsl.w	r3, r1, r3
 8007376:	b29b      	uxth	r3, r3
 8007378:	43db      	mvns	r3, r3
 800737a:	68f9      	ldr	r1, [r7, #12]
 800737c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007380:	4013      	ands	r3, r2
 8007382:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	0159      	lsls	r1, r3, #5
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	440b      	add	r3, r1
 800739a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800739e:	4619      	mov	r1, r3
 80073a0:	4b35      	ldr	r3, [pc, #212]	@ (8007478 <USB_DeactivateEndpoint+0x1b0>)
 80073a2:	4013      	ands	r3, r2
 80073a4:	600b      	str	r3, [r1, #0]
 80073a6:	e060      	b.n	800746a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073be:	d11f      	bne.n	8007400 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80073de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	2101      	movs	r1, #1
 8007412:	fa01 f303 	lsl.w	r3, r1, r3
 8007416:	041b      	lsls	r3, r3, #16
 8007418:	43db      	mvns	r3, r3
 800741a:	68f9      	ldr	r1, [r7, #12]
 800741c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007420:	4013      	ands	r3, r2
 8007422:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800742a:	69da      	ldr	r2, [r3, #28]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	f003 030f 	and.w	r3, r3, #15
 8007434:	2101      	movs	r1, #1
 8007436:	fa01 f303 	lsl.w	r3, r1, r3
 800743a:	041b      	lsls	r3, r3, #16
 800743c:	43db      	mvns	r3, r3
 800743e:	68f9      	ldr	r1, [r7, #12]
 8007440:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007444:	4013      	ands	r3, r2
 8007446:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	0159      	lsls	r1, r3, #5
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	440b      	add	r3, r1
 800745e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007462:	4619      	mov	r1, r3
 8007464:	4b05      	ldr	r3, [pc, #20]	@ (800747c <USB_DeactivateEndpoint+0x1b4>)
 8007466:	4013      	ands	r3, r2
 8007468:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	ec337800 	.word	0xec337800
 800747c:	eff37800 	.word	0xeff37800

08007480 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	@ 0x28
 8007484:	af02      	add	r7, sp, #8
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	4613      	mov	r3, r2
 800748c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	785b      	ldrb	r3, [r3, #1]
 800749c:	2b01      	cmp	r3, #1
 800749e:	f040 817f 	bne.w	80077a0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d132      	bne.n	8007510 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	69fa      	ldr	r2, [r7, #28]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074c4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80074c8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80074cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	0151      	lsls	r1, r2, #5
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	440a      	add	r2, r1
 80074e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	0151      	lsls	r1, r2, #5
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	440a      	add	r2, r1
 8007504:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007508:	0cdb      	lsrs	r3, r3, #19
 800750a:	04db      	lsls	r3, r3, #19
 800750c:	6113      	str	r3, [r2, #16]
 800750e:	e097      	b.n	8007640 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	69ba      	ldr	r2, [r7, #24]
 8007520:	0151      	lsls	r1, r2, #5
 8007522:	69fa      	ldr	r2, [r7, #28]
 8007524:	440a      	add	r2, r1
 8007526:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800752a:	0cdb      	lsrs	r3, r3, #19
 800752c:	04db      	lsls	r3, r3, #19
 800752e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	0151      	lsls	r1, r2, #5
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	440a      	add	r2, r1
 8007546:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800754a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800754e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007552:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d11a      	bne.n	8007590 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	691a      	ldr	r2, [r3, #16]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	429a      	cmp	r2, r3
 8007564:	d903      	bls.n	800756e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	689a      	ldr	r2, [r3, #8]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	0151      	lsls	r1, r2, #5
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	440a      	add	r2, r1
 8007584:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007588:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800758c:	6113      	str	r3, [r2, #16]
 800758e:	e044      	b.n	800761a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	691a      	ldr	r2, [r3, #16]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	4413      	add	r3, r2
 800759a:	1e5a      	subs	r2, r3, #1
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	8afb      	ldrh	r3, [r7, #22]
 80075b6:	04d9      	lsls	r1, r3, #19
 80075b8:	4ba4      	ldr	r3, [pc, #656]	@ (800784c <USB_EPStartXfer+0x3cc>)
 80075ba:	400b      	ands	r3, r1
 80075bc:	69b9      	ldr	r1, [r7, #24]
 80075be:	0148      	lsls	r0, r1, #5
 80075c0:	69f9      	ldr	r1, [r7, #28]
 80075c2:	4401      	add	r1, r0
 80075c4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075c8:	4313      	orrs	r3, r2
 80075ca:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	791b      	ldrb	r3, [r3, #4]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d122      	bne.n	800761a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	0151      	lsls	r1, r2, #5
 80075e6:	69fa      	ldr	r2, [r7, #28]
 80075e8:	440a      	add	r2, r1
 80075ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075ee:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80075f2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007600:	691a      	ldr	r2, [r3, #16]
 8007602:	8afb      	ldrh	r3, [r7, #22]
 8007604:	075b      	lsls	r3, r3, #29
 8007606:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800760a:	69b9      	ldr	r1, [r7, #24]
 800760c:	0148      	lsls	r0, r1, #5
 800760e:	69f9      	ldr	r1, [r7, #28]
 8007610:	4401      	add	r1, r0
 8007612:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007616:	4313      	orrs	r3, r2
 8007618:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007630:	69b9      	ldr	r1, [r7, #24]
 8007632:	0148      	lsls	r0, r1, #5
 8007634:	69f9      	ldr	r1, [r7, #28]
 8007636:	4401      	add	r1, r0
 8007638:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800763c:	4313      	orrs	r3, r2
 800763e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d14b      	bne.n	80076de <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800765a:	461a      	mov	r2, r3
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	791b      	ldrb	r3, [r3, #4]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d128      	bne.n	80076bc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007676:	2b00      	cmp	r3, #0
 8007678:	d110      	bne.n	800769c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	0151      	lsls	r1, r2, #5
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	440a      	add	r2, r1
 8007690:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007694:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007698:	6013      	str	r3, [r2, #0]
 800769a:	e00f      	b.n	80076bc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	0151      	lsls	r1, r2, #5
 80076ae:	69fa      	ldr	r2, [r7, #28]
 80076b0:	440a      	add	r2, r1
 80076b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076ba:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69ba      	ldr	r2, [r7, #24]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80076da:	6013      	str	r3, [r2, #0]
 80076dc:	e166      	b.n	80079ac <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076f8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80076fc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	791b      	ldrb	r3, [r3, #4]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d015      	beq.n	8007732 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 814e 	beq.w	80079ac <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007716:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	2101      	movs	r1, #1
 8007722:	fa01 f303 	lsl.w	r3, r1, r3
 8007726:	69f9      	ldr	r1, [r7, #28]
 8007728:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800772c:	4313      	orrs	r3, r2
 800772e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007730:	e13c      	b.n	80079ac <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800773e:	2b00      	cmp	r3, #0
 8007740:	d110      	bne.n	8007764 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	0151      	lsls	r1, r2, #5
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	440a      	add	r2, r1
 8007758:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800775c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	e00f      	b.n	8007784 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	0151      	lsls	r1, r2, #5
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	440a      	add	r2, r1
 800777a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800777e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007782:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	68d9      	ldr	r1, [r3, #12]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	781a      	ldrb	r2, [r3, #0]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	b298      	uxth	r0, r3
 8007792:	79fb      	ldrb	r3, [r7, #7]
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	4603      	mov	r3, r0
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 f9b9 	bl	8007b10 <USB_WritePacket>
 800779e:	e105      	b.n	80079ac <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	0151      	lsls	r1, r2, #5
 80077b2:	69fa      	ldr	r2, [r7, #28]
 80077b4:	440a      	add	r2, r1
 80077b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077ba:	0cdb      	lsrs	r3, r3, #19
 80077bc:	04db      	lsls	r3, r3, #19
 80077be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	0151      	lsls	r1, r2, #5
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	440a      	add	r2, r1
 80077d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077da:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80077de:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80077e2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d132      	bne.n	8007850 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800780e:	691a      	ldr	r2, [r3, #16]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007818:	69b9      	ldr	r1, [r7, #24]
 800781a:	0148      	lsls	r0, r1, #5
 800781c:	69f9      	ldr	r1, [r7, #28]
 800781e:	4401      	add	r1, r0
 8007820:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007824:	4313      	orrs	r3, r2
 8007826:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	0151      	lsls	r1, r2, #5
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	440a      	add	r2, r1
 800783e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007842:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007846:	6113      	str	r3, [r2, #16]
 8007848:	e062      	b.n	8007910 <USB_EPStartXfer+0x490>
 800784a:	bf00      	nop
 800784c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d123      	bne.n	80078a0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007864:	691a      	ldr	r2, [r3, #16]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800786e:	69b9      	ldr	r1, [r7, #24]
 8007870:	0148      	lsls	r0, r1, #5
 8007872:	69f9      	ldr	r1, [r7, #28]
 8007874:	4401      	add	r1, r0
 8007876:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800787a:	4313      	orrs	r3, r2
 800787c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	0151      	lsls	r1, r2, #5
 8007890:	69fa      	ldr	r2, [r7, #28]
 8007892:	440a      	add	r2, r1
 8007894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007898:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800789c:	6113      	str	r3, [r2, #16]
 800789e:	e037      	b.n	8007910 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	691a      	ldr	r2, [r3, #16]
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	4413      	add	r3, r2
 80078aa:	1e5a      	subs	r2, r3, #1
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	8afa      	ldrh	r2, [r7, #22]
 80078bc:	fb03 f202 	mul.w	r2, r3, r2
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d0:	691a      	ldr	r2, [r3, #16]
 80078d2:	8afb      	ldrh	r3, [r7, #22]
 80078d4:	04d9      	lsls	r1, r3, #19
 80078d6:	4b38      	ldr	r3, [pc, #224]	@ (80079b8 <USB_EPStartXfer+0x538>)
 80078d8:	400b      	ands	r3, r1
 80078da:	69b9      	ldr	r1, [r7, #24]
 80078dc:	0148      	lsls	r0, r1, #5
 80078de:	69f9      	ldr	r1, [r7, #28]
 80078e0:	4401      	add	r1, r0
 80078e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078e6:	4313      	orrs	r3, r2
 80078e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f6:	691a      	ldr	r2, [r3, #16]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007900:	69b9      	ldr	r1, [r7, #24]
 8007902:	0148      	lsls	r0, r1, #5
 8007904:	69f9      	ldr	r1, [r7, #28]
 8007906:	4401      	add	r1, r0
 8007908:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800790c:	4313      	orrs	r3, r2
 800790e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007910:	79fb      	ldrb	r3, [r7, #7]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d10d      	bne.n	8007932 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d009      	beq.n	8007932 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	68d9      	ldr	r1, [r3, #12]
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792e:	460a      	mov	r2, r1
 8007930:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	791b      	ldrb	r3, [r3, #4]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d128      	bne.n	800798c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007946:	2b00      	cmp	r3, #0
 8007948:	d110      	bne.n	800796c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	0151      	lsls	r1, r2, #5
 800795c:	69fa      	ldr	r2, [r7, #28]
 800795e:	440a      	add	r2, r1
 8007960:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007964:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	e00f      	b.n	800798c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	0151      	lsls	r1, r2, #5
 800797e:	69fa      	ldr	r2, [r7, #28]
 8007980:	440a      	add	r2, r1
 8007982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800798a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69ba      	ldr	r2, [r7, #24]
 800799c:	0151      	lsls	r1, r2, #5
 800799e:	69fa      	ldr	r2, [r7, #28]
 80079a0:	440a      	add	r2, r1
 80079a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80079aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3720      	adds	r7, #32
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	1ff80000 	.word	0x1ff80000

080079bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	785b      	ldrb	r3, [r3, #1]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d14a      	bne.n	8007a70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079f2:	f040 8086 	bne.w	8007b02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	7812      	ldrb	r2, [r2, #0]
 8007a0a:	0151      	lsls	r1, r2, #5
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	440a      	add	r2, r1
 8007a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	7812      	ldrb	r2, [r2, #0]
 8007a2e:	0151      	lsls	r1, r2, #5
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	440a      	add	r2, r1
 8007a34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3301      	adds	r3, #1
 8007a42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d902      	bls.n	8007a54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	75fb      	strb	r3, [r7, #23]
          break;
 8007a52:	e056      	b.n	8007b02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a6c:	d0e7      	beq.n	8007a3e <USB_EPStopXfer+0x82>
 8007a6e:	e048      	b.n	8007b02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a88:	d13b      	bne.n	8007b02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	7812      	ldrb	r2, [r2, #0]
 8007a9e:	0151      	lsls	r1, r2, #5
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007aa8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007aac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	7812      	ldrb	r2, [r2, #0]
 8007ac2:	0151      	lsls	r1, r2, #5
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	440a      	add	r2, r1
 8007ac8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007acc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ad0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d902      	bls.n	8007ae8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ae6:	e00c      	b.n	8007b02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007afc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b00:	d0e7      	beq.n	8007ad2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	371c      	adds	r7, #28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b089      	sub	sp, #36	@ 0x24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	460b      	mov	r3, r1
 8007b20:	71fb      	strb	r3, [r7, #7]
 8007b22:	4613      	mov	r3, r2
 8007b24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d123      	bne.n	8007b7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b36:	88bb      	ldrh	r3, [r7, #4]
 8007b38:	3303      	adds	r3, #3
 8007b3a:	089b      	lsrs	r3, r3, #2
 8007b3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b3e:	2300      	movs	r3, #0
 8007b40:	61bb      	str	r3, [r7, #24]
 8007b42:	e018      	b.n	8007b76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	031a      	lsls	r2, r3, #12
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b50:	461a      	mov	r2, r3
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	3301      	adds	r3, #1
 8007b62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	3301      	adds	r3, #1
 8007b68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	3301      	adds	r3, #1
 8007b74:	61bb      	str	r3, [r7, #24]
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d3e2      	bcc.n	8007b44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3724      	adds	r7, #36	@ 0x24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b08b      	sub	sp, #44	@ 0x2c
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ba2:	88fb      	ldrh	r3, [r7, #6]
 8007ba4:	089b      	lsrs	r3, r3, #2
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	f003 0303 	and.w	r3, r3, #3
 8007bb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	623b      	str	r3, [r7, #32]
 8007bb6:	e014      	b.n	8007be2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bcc:	3301      	adds	r3, #1
 8007bce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd8:	3301      	adds	r3, #1
 8007bda:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	3301      	adds	r3, #1
 8007be0:	623b      	str	r3, [r7, #32]
 8007be2:	6a3a      	ldr	r2, [r7, #32]
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d3e6      	bcc.n	8007bb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007bea:	8bfb      	ldrh	r3, [r7, #30]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d01e      	beq.n	8007c2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f107 0310 	add.w	r3, r7, #16
 8007c00:	6812      	ldr	r2, [r2, #0]
 8007c02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	00db      	lsls	r3, r3, #3
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c14:	701a      	strb	r2, [r3, #0]
      i++;
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1e:	3301      	adds	r3, #1
 8007c20:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007c22:	8bfb      	ldrh	r3, [r7, #30]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c28:	8bfb      	ldrh	r3, [r7, #30]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1ea      	bne.n	8007c04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	372c      	adds	r7, #44	@ 0x2c
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d12c      	bne.n	8007cb2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	db12      	blt.n	8007c90 <USB_EPSetStall+0x54>
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00f      	beq.n	8007c90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	0151      	lsls	r1, r2, #5
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	440a      	add	r2, r1
 8007c86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c8a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	0151      	lsls	r1, r2, #5
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	440a      	add	r2, r1
 8007ca6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007caa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	e02b      	b.n	8007d0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	db12      	blt.n	8007cea <USB_EPSetStall+0xae>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00f      	beq.n	8007cea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	0151      	lsls	r1, r2, #5
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	440a      	add	r2, r1
 8007ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ce4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ce8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	0151      	lsls	r1, r2, #5
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	440a      	add	r2, r1
 8007d00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	785b      	ldrb	r3, [r3, #1]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d128      	bne.n	8007d86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	0151      	lsls	r1, r2, #5
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	440a      	add	r2, r1
 8007d4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	791b      	ldrb	r3, [r3, #4]
 8007d58:	2b03      	cmp	r3, #3
 8007d5a:	d003      	beq.n	8007d64 <USB_EPClearStall+0x4c>
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	791b      	ldrb	r3, [r3, #4]
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d138      	bne.n	8007dd6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	0151      	lsls	r1, r2, #5
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	440a      	add	r2, r1
 8007d7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	e027      	b.n	8007dd6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	0151      	lsls	r1, r2, #5
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	440a      	add	r2, r1
 8007d9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007da0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007da4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	791b      	ldrb	r3, [r3, #4]
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d003      	beq.n	8007db6 <USB_EPClearStall+0x9e>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	791b      	ldrb	r3, [r3, #4]
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d10f      	bne.n	8007dd6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	0151      	lsls	r1, r2, #5
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	440a      	add	r2, r1
 8007dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dd4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e02:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007e06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	011b      	lsls	r3, r3, #4
 8007e14:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007e18:	68f9      	ldr	r1, [r7, #12]
 8007e1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e4a:	f023 0303 	bic.w	r3, r3, #3
 8007e4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e5e:	f023 0302 	bic.w	r3, r3, #2
 8007e62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e8c:	f023 0303 	bic.w	r3, r3, #3
 8007e90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ea0:	f043 0302 	orr.w	r3, r3, #2
 8007ea4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4013      	ands	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b085      	sub	sp, #20
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	4013      	ands	r3, r2
 8007efc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	0c1b      	lsrs	r3, r3, #16
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b085      	sub	sp, #20
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	4013      	ands	r3, r2
 8007f30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	b29b      	uxth	r3, r3
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b085      	sub	sp, #20
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f70:	68bb      	ldr	r3, [r7, #8]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b087      	sub	sp, #28
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	460b      	mov	r3, r1
 8007f88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007fa2:	78fb      	ldrb	r3, [r7, #3]
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	fa22 f303 	lsr.w	r3, r2, r3
 8007fae:	01db      	lsls	r3, r3, #7
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b085      	sub	sp, #20
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008010:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008014:	f023 0307 	bic.w	r3, r3, #7
 8008018:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800802c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	460b      	mov	r3, r1
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	333c      	adds	r3, #60	@ 0x3c
 8008052:	3304      	adds	r3, #4
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	4a26      	ldr	r2, [pc, #152]	@ (80080f4 <USB_EP0_OutStart+0xb8>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d90a      	bls.n	8008076 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800806c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008070:	d101      	bne.n	8008076 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	e037      	b.n	80080e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800807c:	461a      	mov	r2, r3
 800807e:	2300      	movs	r3, #0
 8008080:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008090:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008094:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080a4:	f043 0318 	orr.w	r3, r3, #24
 80080a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080b8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80080bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80080be:	7afb      	ldrb	r3, [r7, #11]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d10f      	bne.n	80080e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ca:	461a      	mov	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080de:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80080e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	371c      	adds	r7, #28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	4f54300a 	.word	0x4f54300a

080080f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3301      	adds	r3, #1
 8008108:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008110:	d901      	bls.n	8008116 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e01b      	b.n	800814e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	daf2      	bge.n	8008104 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f043 0201 	orr.w	r2, r3, #1
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3301      	adds	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800813a:	d901      	bls.n	8008140 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e006      	b.n	800814e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	f003 0301 	and.w	r3, r3, #1
 8008148:	2b01      	cmp	r3, #1
 800814a:	d0f0      	beq.n	800812e <USB_CoreReset+0x36>

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
	...

0800815c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008168:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800816c:	f002 fc9e 	bl	800aaac <USBD_static_malloc>
 8008170:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d109      	bne.n	800818c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	32b0      	adds	r2, #176	@ 0xb0
 8008182:	2100      	movs	r1, #0
 8008184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008188:	2302      	movs	r3, #2
 800818a:	e0d4      	b.n	8008336 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800818c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008190:	2100      	movs	r1, #0
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f003 fa5f 	bl	800b656 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	32b0      	adds	r2, #176	@ 0xb0
 80081a2:	68f9      	ldr	r1, [r7, #12]
 80081a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	32b0      	adds	r2, #176	@ 0xb0
 80081b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	7c1b      	ldrb	r3, [r3, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d138      	bne.n	8008236 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80081c4:	4b5e      	ldr	r3, [pc, #376]	@ (8008340 <USBD_CDC_Init+0x1e4>)
 80081c6:	7819      	ldrb	r1, [r3, #0]
 80081c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081cc:	2202      	movs	r2, #2
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f002 fb49 	bl	800a866 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80081d4:	4b5a      	ldr	r3, [pc, #360]	@ (8008340 <USBD_CDC_Init+0x1e4>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	f003 020f 	and.w	r2, r3, #15
 80081dc:	6879      	ldr	r1, [r7, #4]
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	3324      	adds	r3, #36	@ 0x24
 80081ea:	2201      	movs	r2, #1
 80081ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80081ee:	4b55      	ldr	r3, [pc, #340]	@ (8008344 <USBD_CDC_Init+0x1e8>)
 80081f0:	7819      	ldrb	r1, [r3, #0]
 80081f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081f6:	2202      	movs	r2, #2
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f002 fb34 	bl	800a866 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80081fe:	4b51      	ldr	r3, [pc, #324]	@ (8008344 <USBD_CDC_Init+0x1e8>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	f003 020f 	and.w	r2, r3, #15
 8008206:	6879      	ldr	r1, [r7, #4]
 8008208:	4613      	mov	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	440b      	add	r3, r1
 8008212:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008216:	2201      	movs	r2, #1
 8008218:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800821a:	4b4b      	ldr	r3, [pc, #300]	@ (8008348 <USBD_CDC_Init+0x1ec>)
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	f003 020f 	and.w	r2, r3, #15
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	4613      	mov	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	440b      	add	r3, r1
 800822e:	3326      	adds	r3, #38	@ 0x26
 8008230:	2210      	movs	r2, #16
 8008232:	801a      	strh	r2, [r3, #0]
 8008234:	e035      	b.n	80082a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008236:	4b42      	ldr	r3, [pc, #264]	@ (8008340 <USBD_CDC_Init+0x1e4>)
 8008238:	7819      	ldrb	r1, [r3, #0]
 800823a:	2340      	movs	r3, #64	@ 0x40
 800823c:	2202      	movs	r2, #2
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f002 fb11 	bl	800a866 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008244:	4b3e      	ldr	r3, [pc, #248]	@ (8008340 <USBD_CDC_Init+0x1e4>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	f003 020f 	and.w	r2, r3, #15
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	4613      	mov	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	440b      	add	r3, r1
 8008258:	3324      	adds	r3, #36	@ 0x24
 800825a:	2201      	movs	r2, #1
 800825c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800825e:	4b39      	ldr	r3, [pc, #228]	@ (8008344 <USBD_CDC_Init+0x1e8>)
 8008260:	7819      	ldrb	r1, [r3, #0]
 8008262:	2340      	movs	r3, #64	@ 0x40
 8008264:	2202      	movs	r2, #2
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f002 fafd 	bl	800a866 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800826c:	4b35      	ldr	r3, [pc, #212]	@ (8008344 <USBD_CDC_Init+0x1e8>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	f003 020f 	and.w	r2, r3, #15
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	4613      	mov	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	440b      	add	r3, r1
 8008280:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008284:	2201      	movs	r2, #1
 8008286:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008288:	4b2f      	ldr	r3, [pc, #188]	@ (8008348 <USBD_CDC_Init+0x1ec>)
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	f003 020f 	and.w	r2, r3, #15
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	440b      	add	r3, r1
 800829c:	3326      	adds	r3, #38	@ 0x26
 800829e:	2210      	movs	r2, #16
 80082a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082a2:	4b29      	ldr	r3, [pc, #164]	@ (8008348 <USBD_CDC_Init+0x1ec>)
 80082a4:	7819      	ldrb	r1, [r3, #0]
 80082a6:	2308      	movs	r3, #8
 80082a8:	2203      	movs	r2, #3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f002 fadb 	bl	800a866 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80082b0:	4b25      	ldr	r3, [pc, #148]	@ (8008348 <USBD_CDC_Init+0x1ec>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	f003 020f 	and.w	r2, r3, #15
 80082b8:	6879      	ldr	r1, [r7, #4]
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	440b      	add	r3, r1
 80082c4:	3324      	adds	r3, #36	@ 0x24
 80082c6:	2201      	movs	r2, #1
 80082c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	33b0      	adds	r3, #176	@ 0xb0
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008300:	2302      	movs	r3, #2
 8008302:	e018      	b.n	8008336 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	7c1b      	ldrb	r3, [r3, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800830c:	4b0d      	ldr	r3, [pc, #52]	@ (8008344 <USBD_CDC_Init+0x1e8>)
 800830e:	7819      	ldrb	r1, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008316:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f002 fb92 	bl	800aa44 <USBD_LL_PrepareReceive>
 8008320:	e008      	b.n	8008334 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008322:	4b08      	ldr	r3, [pc, #32]	@ (8008344 <USBD_CDC_Init+0x1e8>)
 8008324:	7819      	ldrb	r1, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800832c:	2340      	movs	r3, #64	@ 0x40
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f002 fb88 	bl	800aa44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	200000cf 	.word	0x200000cf
 8008344:	200000d0 	.word	0x200000d0
 8008348:	200000d1 	.word	0x200000d1

0800834c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008358:	4b3a      	ldr	r3, [pc, #232]	@ (8008444 <USBD_CDC_DeInit+0xf8>)
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f002 faa7 	bl	800a8b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008364:	4b37      	ldr	r3, [pc, #220]	@ (8008444 <USBD_CDC_DeInit+0xf8>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	f003 020f 	and.w	r2, r3, #15
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	4613      	mov	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	440b      	add	r3, r1
 8008378:	3324      	adds	r3, #36	@ 0x24
 800837a:	2200      	movs	r2, #0
 800837c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800837e:	4b32      	ldr	r3, [pc, #200]	@ (8008448 <USBD_CDC_DeInit+0xfc>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f002 fa94 	bl	800a8b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800838a:	4b2f      	ldr	r3, [pc, #188]	@ (8008448 <USBD_CDC_DeInit+0xfc>)
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	f003 020f 	and.w	r2, r3, #15
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	4613      	mov	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	440b      	add	r3, r1
 800839e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80083a2:	2200      	movs	r2, #0
 80083a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80083a6:	4b29      	ldr	r3, [pc, #164]	@ (800844c <USBD_CDC_DeInit+0x100>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f002 fa80 	bl	800a8b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80083b2:	4b26      	ldr	r3, [pc, #152]	@ (800844c <USBD_CDC_DeInit+0x100>)
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	f003 020f 	and.w	r2, r3, #15
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	3324      	adds	r3, #36	@ 0x24
 80083c8:	2200      	movs	r2, #0
 80083ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80083cc:	4b1f      	ldr	r3, [pc, #124]	@ (800844c <USBD_CDC_DeInit+0x100>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	f003 020f 	and.w	r2, r3, #15
 80083d4:	6879      	ldr	r1, [r7, #4]
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	440b      	add	r3, r1
 80083e0:	3326      	adds	r3, #38	@ 0x26
 80083e2:	2200      	movs	r2, #0
 80083e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	32b0      	adds	r2, #176	@ 0xb0
 80083f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01f      	beq.n	8008438 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	33b0      	adds	r3, #176	@ 0xb0
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	32b0      	adds	r2, #176	@ 0xb0
 8008416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841a:	4618      	mov	r0, r3
 800841c:	f002 fb54 	bl	800aac8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	32b0      	adds	r2, #176	@ 0xb0
 800842a:	2100      	movs	r1, #0
 800842c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	200000cf 	.word	0x200000cf
 8008448:	200000d0 	.word	0x200000d0
 800844c:	200000d1 	.word	0x200000d1

08008450 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	32b0      	adds	r2, #176	@ 0xb0
 8008464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008468:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800847c:	2303      	movs	r3, #3
 800847e:	e0bf      	b.n	8008600 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008488:	2b00      	cmp	r3, #0
 800848a:	d050      	beq.n	800852e <USBD_CDC_Setup+0xde>
 800848c:	2b20      	cmp	r3, #32
 800848e:	f040 80af 	bne.w	80085f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	88db      	ldrh	r3, [r3, #6]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d03a      	beq.n	8008510 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	b25b      	sxtb	r3, r3
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	da1b      	bge.n	80084dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	33b0      	adds	r3, #176	@ 0xb0
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80084ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	88d2      	ldrh	r2, [r2, #6]
 80084c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	88db      	ldrh	r3, [r3, #6]
 80084c6:	2b07      	cmp	r3, #7
 80084c8:	bf28      	it	cs
 80084ca:	2307      	movcs	r3, #7
 80084cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	89fa      	ldrh	r2, [r7, #14]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 fd93 	bl	800a000 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80084da:	e090      	b.n	80085fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	785a      	ldrb	r2, [r3, #1]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	88db      	ldrh	r3, [r3, #6]
 80084ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80084ec:	d803      	bhi.n	80084f6 <USBD_CDC_Setup+0xa6>
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	88db      	ldrh	r3, [r3, #6]
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	e000      	b.n	80084f8 <USBD_CDC_Setup+0xa8>
 80084f6:	2240      	movs	r2, #64	@ 0x40
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80084fe:	6939      	ldr	r1, [r7, #16]
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008506:	461a      	mov	r2, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f001 fda5 	bl	800a058 <USBD_CtlPrepareRx>
      break;
 800850e:	e076      	b.n	80085fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	33b0      	adds	r3, #176	@ 0xb0
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	7850      	ldrb	r0, [r2, #1]
 8008526:	2200      	movs	r2, #0
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	4798      	blx	r3
      break;
 800852c:	e067      	b.n	80085fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	785b      	ldrb	r3, [r3, #1]
 8008532:	2b0b      	cmp	r3, #11
 8008534:	d851      	bhi.n	80085da <USBD_CDC_Setup+0x18a>
 8008536:	a201      	add	r2, pc, #4	@ (adr r2, 800853c <USBD_CDC_Setup+0xec>)
 8008538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853c:	0800856d 	.word	0x0800856d
 8008540:	080085e9 	.word	0x080085e9
 8008544:	080085db 	.word	0x080085db
 8008548:	080085db 	.word	0x080085db
 800854c:	080085db 	.word	0x080085db
 8008550:	080085db 	.word	0x080085db
 8008554:	080085db 	.word	0x080085db
 8008558:	080085db 	.word	0x080085db
 800855c:	080085db 	.word	0x080085db
 8008560:	080085db 	.word	0x080085db
 8008564:	08008597 	.word	0x08008597
 8008568:	080085c1 	.word	0x080085c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008572:	b2db      	uxtb	r3, r3
 8008574:	2b03      	cmp	r3, #3
 8008576:	d107      	bne.n	8008588 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008578:	f107 030a 	add.w	r3, r7, #10
 800857c:	2202      	movs	r2, #2
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 fd3d 	bl	800a000 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008586:	e032      	b.n	80085ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f001 fcbb 	bl	8009f06 <USBD_CtlError>
            ret = USBD_FAIL;
 8008590:	2303      	movs	r3, #3
 8008592:	75fb      	strb	r3, [r7, #23]
          break;
 8008594:	e02b      	b.n	80085ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d107      	bne.n	80085b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80085a2:	f107 030d 	add.w	r3, r7, #13
 80085a6:	2201      	movs	r2, #1
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f001 fd28 	bl	800a000 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085b0:	e01d      	b.n	80085ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 fca6 	bl	8009f06 <USBD_CtlError>
            ret = USBD_FAIL;
 80085ba:	2303      	movs	r3, #3
 80085bc:	75fb      	strb	r3, [r7, #23]
          break;
 80085be:	e016      	b.n	80085ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d00f      	beq.n	80085ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f001 fc99 	bl	8009f06 <USBD_CtlError>
            ret = USBD_FAIL;
 80085d4:	2303      	movs	r3, #3
 80085d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80085d8:	e008      	b.n	80085ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 fc92 	bl	8009f06 <USBD_CtlError>
          ret = USBD_FAIL;
 80085e2:	2303      	movs	r3, #3
 80085e4:	75fb      	strb	r3, [r7, #23]
          break;
 80085e6:	e002      	b.n	80085ee <USBD_CDC_Setup+0x19e>
          break;
 80085e8:	bf00      	nop
 80085ea:	e008      	b.n	80085fe <USBD_CDC_Setup+0x1ae>
          break;
 80085ec:	bf00      	nop
      }
      break;
 80085ee:	e006      	b.n	80085fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f001 fc87 	bl	8009f06 <USBD_CtlError>
      ret = USBD_FAIL;
 80085f8:	2303      	movs	r3, #3
 80085fa:	75fb      	strb	r3, [r7, #23]
      break;
 80085fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800861a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	32b0      	adds	r2, #176	@ 0xb0
 8008626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800862e:	2303      	movs	r3, #3
 8008630:	e065      	b.n	80086fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	32b0      	adds	r2, #176	@ 0xb0
 800863c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008640:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008642:	78fb      	ldrb	r3, [r7, #3]
 8008644:	f003 020f 	and.w	r2, r3, #15
 8008648:	6879      	ldr	r1, [r7, #4]
 800864a:	4613      	mov	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	440b      	add	r3, r1
 8008654:	3318      	adds	r3, #24
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d02f      	beq.n	80086bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800865c:	78fb      	ldrb	r3, [r7, #3]
 800865e:	f003 020f 	and.w	r2, r3, #15
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	4613      	mov	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	3318      	adds	r3, #24
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	78fb      	ldrb	r3, [r7, #3]
 8008674:	f003 010f 	and.w	r1, r3, #15
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	460b      	mov	r3, r1
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	440b      	add	r3, r1
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4403      	add	r3, r0
 8008684:	331c      	adds	r3, #28
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	fbb2 f1f3 	udiv	r1, r2, r3
 800868c:	fb01 f303 	mul.w	r3, r1, r3
 8008690:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008692:	2b00      	cmp	r3, #0
 8008694:	d112      	bne.n	80086bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008696:	78fb      	ldrb	r3, [r7, #3]
 8008698:	f003 020f 	and.w	r2, r3, #15
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	440b      	add	r3, r1
 80086a8:	3318      	adds	r3, #24
 80086aa:	2200      	movs	r2, #0
 80086ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80086ae:	78f9      	ldrb	r1, [r7, #3]
 80086b0:	2300      	movs	r3, #0
 80086b2:	2200      	movs	r2, #0
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f002 f9a4 	bl	800aa02 <USBD_LL_Transmit>
 80086ba:	e01f      	b.n	80086fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2200      	movs	r2, #0
 80086c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	33b0      	adds	r3, #176	@ 0xb0
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d010      	beq.n	80086fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	33b0      	adds	r3, #176	@ 0xb0
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80086f8:	78fa      	ldrb	r2, [r7, #3]
 80086fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	32b0      	adds	r2, #176	@ 0xb0
 800871c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008720:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	32b0      	adds	r2, #176	@ 0xb0
 800872c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008734:	2303      	movs	r3, #3
 8008736:	e01a      	b.n	800876e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f002 f9a2 	bl	800aa86 <USBD_LL_GetRxDataSize>
 8008742:	4602      	mov	r2, r0
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	33b0      	adds	r3, #176	@ 0xb0
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008768:	4611      	mov	r1, r2
 800876a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	32b0      	adds	r2, #176	@ 0xb0
 8008788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008794:	2303      	movs	r3, #3
 8008796:	e024      	b.n	80087e2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	33b0      	adds	r3, #176	@ 0xb0
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d019      	beq.n	80087e0 <USBD_CDC_EP0_RxReady+0x6a>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80087b2:	2bff      	cmp	r3, #255	@ 0xff
 80087b4:	d014      	beq.n	80087e0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	33b0      	adds	r3, #176	@ 0xb0
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80087ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80087d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	22ff      	movs	r2, #255	@ 0xff
 80087dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087f4:	2182      	movs	r1, #130	@ 0x82
 80087f6:	4818      	ldr	r0, [pc, #96]	@ (8008858 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087f8:	f000 fd4f 	bl	800929a <USBD_GetEpDesc>
 80087fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087fe:	2101      	movs	r1, #1
 8008800:	4815      	ldr	r0, [pc, #84]	@ (8008858 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008802:	f000 fd4a 	bl	800929a <USBD_GetEpDesc>
 8008806:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008808:	2181      	movs	r1, #129	@ 0x81
 800880a:	4813      	ldr	r0, [pc, #76]	@ (8008858 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800880c:	f000 fd45 	bl	800929a <USBD_GetEpDesc>
 8008810:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	2210      	movs	r2, #16
 800881c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d006      	beq.n	8008832 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	2200      	movs	r2, #0
 8008828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800882c:	711a      	strb	r2, [r3, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d006      	beq.n	8008846 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008840:	711a      	strb	r2, [r3, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2243      	movs	r2, #67	@ 0x43
 800884a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800884c:	4b02      	ldr	r3, [pc, #8]	@ (8008858 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	2000008c 	.word	0x2000008c

0800885c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008864:	2182      	movs	r1, #130	@ 0x82
 8008866:	4818      	ldr	r0, [pc, #96]	@ (80088c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008868:	f000 fd17 	bl	800929a <USBD_GetEpDesc>
 800886c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800886e:	2101      	movs	r1, #1
 8008870:	4815      	ldr	r0, [pc, #84]	@ (80088c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008872:	f000 fd12 	bl	800929a <USBD_GetEpDesc>
 8008876:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008878:	2181      	movs	r1, #129	@ 0x81
 800887a:	4813      	ldr	r0, [pc, #76]	@ (80088c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800887c:	f000 fd0d 	bl	800929a <USBD_GetEpDesc>
 8008880:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2210      	movs	r2, #16
 800888c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d006      	beq.n	80088a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	2200      	movs	r2, #0
 8008898:	711a      	strb	r2, [r3, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f042 0202 	orr.w	r2, r2, #2
 80088a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d006      	beq.n	80088b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	711a      	strb	r2, [r3, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f042 0202 	orr.w	r2, r2, #2
 80088b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2243      	movs	r2, #67	@ 0x43
 80088ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088bc:	4b02      	ldr	r3, [pc, #8]	@ (80088c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	2000008c 	.word	0x2000008c

080088cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088d4:	2182      	movs	r1, #130	@ 0x82
 80088d6:	4818      	ldr	r0, [pc, #96]	@ (8008938 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088d8:	f000 fcdf 	bl	800929a <USBD_GetEpDesc>
 80088dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088de:	2101      	movs	r1, #1
 80088e0:	4815      	ldr	r0, [pc, #84]	@ (8008938 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088e2:	f000 fcda 	bl	800929a <USBD_GetEpDesc>
 80088e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088e8:	2181      	movs	r1, #129	@ 0x81
 80088ea:	4813      	ldr	r0, [pc, #76]	@ (8008938 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088ec:	f000 fcd5 	bl	800929a <USBD_GetEpDesc>
 80088f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	2210      	movs	r2, #16
 80088fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d006      	beq.n	8008912 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	2200      	movs	r2, #0
 8008908:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800890c:	711a      	strb	r2, [r3, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d006      	beq.n	8008926 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008920:	711a      	strb	r2, [r3, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2243      	movs	r2, #67	@ 0x43
 800892a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800892c:	4b02      	ldr	r3, [pc, #8]	@ (8008938 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800892e:	4618      	mov	r0, r3
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	2000008c 	.word	0x2000008c

0800893c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	220a      	movs	r2, #10
 8008948:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800894a:	4b03      	ldr	r3, [pc, #12]	@ (8008958 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800894c:	4618      	mov	r0, r3
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	20000048 	.word	0x20000048

0800895c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800896c:	2303      	movs	r3, #3
 800896e:	e009      	b.n	8008984 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	33b0      	adds	r3, #176	@ 0xb0
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	32b0      	adds	r2, #176	@ 0xb0
 80089a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e008      	b.n	80089c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	371c      	adds	r7, #28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	32b0      	adds	r2, #176	@ 0xb0
 80089e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e004      	b.n	8008a02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
	...

08008a10 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	32b0      	adds	r2, #176	@ 0xb0
 8008a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a26:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e025      	b.n	8008a82 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d11f      	bne.n	8008a80 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008a48:	4b10      	ldr	r3, [pc, #64]	@ (8008a8c <USBD_CDC_TransmitPacket+0x7c>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	f003 020f 	and.w	r2, r3, #15
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4403      	add	r3, r0
 8008a62:	3318      	adds	r3, #24
 8008a64:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008a66:	4b09      	ldr	r3, [pc, #36]	@ (8008a8c <USBD_CDC_TransmitPacket+0x7c>)
 8008a68:	7819      	ldrb	r1, [r3, #0]
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f001 ffc3 	bl	800aa02 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	200000cf 	.word	0x200000cf

08008a90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	32b0      	adds	r2, #176	@ 0xb0
 8008aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	32b0      	adds	r2, #176	@ 0xb0
 8008ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e018      	b.n	8008af0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	7c1b      	ldrb	r3, [r3, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10a      	bne.n	8008adc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8008af8 <USBD_CDC_ReceivePacket+0x68>)
 8008ac8:	7819      	ldrb	r1, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 ffb5 	bl	800aa44 <USBD_LL_PrepareReceive>
 8008ada:	e008      	b.n	8008aee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008adc:	4b06      	ldr	r3, [pc, #24]	@ (8008af8 <USBD_CDC_ReceivePacket+0x68>)
 8008ade:	7819      	ldrb	r1, [r3, #0]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ae6:	2340      	movs	r3, #64	@ 0x40
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f001 ffab 	bl	800aa44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	200000d0 	.word	0x200000d0

08008afc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	4613      	mov	r3, r2
 8008b08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e01f      	b.n	8008b54 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d003      	beq.n	8008b3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	79fa      	ldrb	r2, [r7, #7]
 8008b46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f001 fe25 	bl	800a798 <USBD_LL_Init>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e025      	b.n	8008bc0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	32ae      	adds	r2, #174	@ 0xae
 8008b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00f      	beq.n	8008bb0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	32ae      	adds	r2, #174	@ 0xae
 8008b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba0:	f107 020e 	add.w	r2, r7, #14
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	4798      	blx	r3
 8008ba8:	4602      	mov	r2, r0
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f001 fe2d 	bl	800a830 <USBD_LL_Start>
 8008bd6:	4603      	mov	r3, r0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008be8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d009      	beq.n	8008c24 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	78fa      	ldrb	r2, [r7, #3]
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	4798      	blx	r3
 8008c20:	4603      	mov	r3, r0
 8008c22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	460b      	mov	r3, r1
 8008c38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	78fa      	ldrb	r2, [r7, #3]
 8008c48:	4611      	mov	r1, r2
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	4798      	blx	r3
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008c54:	2303      	movs	r3, #3
 8008c56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f001 f90c 	bl	8009e92 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008c88:	461a      	mov	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008c96:	f003 031f 	and.w	r3, r3, #31
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d01a      	beq.n	8008cd4 <USBD_LL_SetupStage+0x72>
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d822      	bhi.n	8008ce8 <USBD_LL_SetupStage+0x86>
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d002      	beq.n	8008cac <USBD_LL_SetupStage+0x4a>
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d00a      	beq.n	8008cc0 <USBD_LL_SetupStage+0x5e>
 8008caa:	e01d      	b.n	8008ce8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fb63 	bl	8009380 <USBD_StdDevReq>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008cbe:	e020      	b.n	8008d02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fbcb 	bl	8009464 <USBD_StdItfReq>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd2:	e016      	b.n	8008d02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fc2d 	bl	800953c <USBD_StdEPReq>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ce6:	e00c      	b.n	8008d02 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008cee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f001 fdfa 	bl	800a8f0 <USBD_LL_StallEP>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8008d00:	bf00      	nop
  }

  return ret;
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	460b      	mov	r3, r1
 8008d16:	607a      	str	r2, [r7, #4]
 8008d18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008d1e:	7afb      	ldrb	r3, [r7, #11]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d16e      	bne.n	8008e02 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008d2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	f040 8098 	bne.w	8008e68 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	689a      	ldr	r2, [r3, #8]
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d913      	bls.n	8008d6c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	689a      	ldr	r2, [r3, #8]
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	1ad2      	subs	r2, r2, r3
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	68da      	ldr	r2, [r3, #12]
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	bf28      	it	cs
 8008d5e:	4613      	movcs	r3, r2
 8008d60:	461a      	mov	r2, r3
 8008d62:	6879      	ldr	r1, [r7, #4]
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f001 f994 	bl	800a092 <USBD_CtlContinueRx>
 8008d6a:	e07d      	b.n	8008e68 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d72:	f003 031f 	and.w	r3, r3, #31
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d014      	beq.n	8008da4 <USBD_LL_DataOutStage+0x98>
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d81d      	bhi.n	8008dba <USBD_LL_DataOutStage+0xae>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <USBD_LL_DataOutStage+0x7c>
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d003      	beq.n	8008d8e <USBD_LL_DataOutStage+0x82>
 8008d86:	e018      	b.n	8008dba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	75bb      	strb	r3, [r7, #22]
            break;
 8008d8c:	e018      	b.n	8008dc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	4619      	mov	r1, r3
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 fa64 	bl	8009266 <USBD_CoreFindIF>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	75bb      	strb	r3, [r7, #22]
            break;
 8008da2:	e00d      	b.n	8008dc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	4619      	mov	r1, r3
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 fa66 	bl	8009280 <USBD_CoreFindEP>
 8008db4:	4603      	mov	r3, r0
 8008db6:	75bb      	strb	r3, [r7, #22]
            break;
 8008db8:	e002      	b.n	8008dc0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	75bb      	strb	r3, [r7, #22]
            break;
 8008dbe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008dc0:	7dbb      	ldrb	r3, [r7, #22]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d119      	bne.n	8008dfa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d113      	bne.n	8008dfa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008dd2:	7dba      	ldrb	r2, [r7, #22]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	32ae      	adds	r2, #174	@ 0xae
 8008dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00b      	beq.n	8008dfa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008de2:	7dba      	ldrb	r2, [r7, #22]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008dea:	7dba      	ldrb	r2, [r7, #22]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	32ae      	adds	r2, #174	@ 0xae
 8008df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f001 f95a 	bl	800a0b4 <USBD_CtlSendStatus>
 8008e00:	e032      	b.n	8008e68 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008e02:	7afb      	ldrb	r3, [r7, #11]
 8008e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 fa37 	bl	8009280 <USBD_CoreFindEP>
 8008e12:	4603      	mov	r3, r0
 8008e14:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e16:	7dbb      	ldrb	r3, [r7, #22]
 8008e18:	2bff      	cmp	r3, #255	@ 0xff
 8008e1a:	d025      	beq.n	8008e68 <USBD_LL_DataOutStage+0x15c>
 8008e1c:	7dbb      	ldrb	r3, [r7, #22]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d122      	bne.n	8008e68 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d117      	bne.n	8008e5e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008e2e:	7dba      	ldrb	r2, [r7, #22]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	32ae      	adds	r2, #174	@ 0xae
 8008e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00f      	beq.n	8008e5e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008e3e:	7dba      	ldrb	r2, [r7, #22]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008e46:	7dba      	ldrb	r2, [r7, #22]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	32ae      	adds	r2, #174	@ 0xae
 8008e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	7afa      	ldrb	r2, [r7, #11]
 8008e54:	4611      	mov	r1, r2
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	4798      	blx	r3
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	e000      	b.n	8008e6a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b086      	sub	sp, #24
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	607a      	str	r2, [r7, #4]
 8008e7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008e80:	7afb      	ldrb	r3, [r7, #11]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d16f      	bne.n	8008f66 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3314      	adds	r3, #20
 8008e8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d15a      	bne.n	8008f4c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	689a      	ldr	r2, [r3, #8]
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d914      	bls.n	8008ecc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	689a      	ldr	r2, [r3, #8]
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	1ad2      	subs	r2, r2, r3
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	6879      	ldr	r1, [r7, #4]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f001 f8bc 	bl	800a036 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f001 fdbd 	bl	800aa44 <USBD_LL_PrepareReceive>
 8008eca:	e03f      	b.n	8008f4c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	68da      	ldr	r2, [r3, #12]
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d11c      	bne.n	8008f12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d316      	bcc.n	8008f12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d20f      	bcs.n	8008f12 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f001 f89d 	bl	800a036 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f04:	2300      	movs	r3, #0
 8008f06:	2200      	movs	r2, #0
 8008f08:	2100      	movs	r1, #0
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f001 fd9a 	bl	800aa44 <USBD_LL_PrepareReceive>
 8008f10:	e01c      	b.n	8008f4c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d10f      	bne.n	8008f3e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d009      	beq.n	8008f3e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f3e:	2180      	movs	r1, #128	@ 0x80
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f001 fcd5 	bl	800a8f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f001 f8c7 	bl	800a0da <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d03a      	beq.n	8008fcc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f7ff fe42 	bl	8008be0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008f64:	e032      	b.n	8008fcc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008f66:	7afb      	ldrb	r3, [r7, #11]
 8008f68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	4619      	mov	r1, r3
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 f985 	bl	8009280 <USBD_CoreFindEP>
 8008f76:	4603      	mov	r3, r0
 8008f78:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	2bff      	cmp	r3, #255	@ 0xff
 8008f7e:	d025      	beq.n	8008fcc <USBD_LL_DataInStage+0x15a>
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d122      	bne.n	8008fcc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d11c      	bne.n	8008fcc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008f92:	7dfa      	ldrb	r2, [r7, #23]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	32ae      	adds	r2, #174	@ 0xae
 8008f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d014      	beq.n	8008fcc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008fa2:	7dfa      	ldrb	r2, [r7, #23]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008faa:	7dfa      	ldrb	r2, [r7, #23]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	32ae      	adds	r2, #174	@ 0xae
 8008fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	7afa      	ldrb	r2, [r7, #11]
 8008fb8:	4611      	mov	r1, r2
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	4798      	blx	r3
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008fc2:	7dbb      	ldrb	r3, [r7, #22]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008fc8:	7dbb      	ldrb	r3, [r7, #22]
 8008fca:	e000      	b.n	8008fce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b084      	sub	sp, #16
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800900e:	2b00      	cmp	r3, #0
 8009010:	d014      	beq.n	800903c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00e      	beq.n	800903c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	6852      	ldr	r2, [r2, #4]
 800902a:	b2d2      	uxtb	r2, r2
 800902c:	4611      	mov	r1, r2
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	4798      	blx	r3
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009038:	2303      	movs	r3, #3
 800903a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800903c:	2340      	movs	r3, #64	@ 0x40
 800903e:	2200      	movs	r2, #0
 8009040:	2100      	movs	r1, #0
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f001 fc0f 	bl	800a866 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2240      	movs	r2, #64	@ 0x40
 8009054:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009058:	2340      	movs	r3, #64	@ 0x40
 800905a:	2200      	movs	r2, #0
 800905c:	2180      	movs	r1, #128	@ 0x80
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f001 fc01 	bl	800a866 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2240      	movs	r2, #64	@ 0x40
 800906e:	621a      	str	r2, [r3, #32]

  return ret;
 8009070:	7bfb      	ldrb	r3, [r7, #15]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	460b      	mov	r3, r1
 8009084:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	78fa      	ldrb	r2, [r7, #3]
 800908a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800909a:	b480      	push	{r7}
 800909c:	b083      	sub	sp, #12
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d006      	beq.n	80090bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2204      	movs	r2, #4
 80090c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b04      	cmp	r3, #4
 80090e4:	d106      	bne.n	80090f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b03      	cmp	r3, #3
 8009114:	d110      	bne.n	8009138 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00b      	beq.n	8009138 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d005      	beq.n	8009138 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b082      	sub	sp, #8
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	460b      	mov	r3, r1
 800914c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	32ae      	adds	r2, #174	@ 0xae
 8009158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d101      	bne.n	8009164 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009160:	2303      	movs	r3, #3
 8009162:	e01c      	b.n	800919e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b03      	cmp	r3, #3
 800916e:	d115      	bne.n	800919c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	32ae      	adds	r2, #174	@ 0xae
 800917a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00b      	beq.n	800919c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	32ae      	adds	r2, #174	@ 0xae
 800918e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	78fa      	ldrb	r2, [r7, #3]
 8009196:	4611      	mov	r1, r2
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b082      	sub	sp, #8
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	460b      	mov	r3, r1
 80091b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	32ae      	adds	r2, #174	@ 0xae
 80091bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d101      	bne.n	80091c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e01c      	b.n	8009202 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d115      	bne.n	8009200 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	32ae      	adds	r2, #174	@ 0xae
 80091de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00b      	beq.n	8009200 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	32ae      	adds	r2, #174	@ 0xae
 80091f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f8:	78fa      	ldrb	r2, [r7, #3]
 80091fa:	4611      	mov	r1, r2
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00e      	beq.n	800925c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	6852      	ldr	r2, [r2, #4]
 800924a:	b2d2      	uxtb	r2, r2
 800924c:	4611      	mov	r1, r2
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	4798      	blx	r3
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009258:	2303      	movs	r3, #3
 800925a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800925c:	7bfb      	ldrb	r3, [r7, #15]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	460b      	mov	r3, r1
 8009270:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009272:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	460b      	mov	r3, r1
 800928a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800928c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800928e:	4618      	mov	r0, r3
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b086      	sub	sp, #24
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80092ae:	2300      	movs	r3, #0
 80092b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	885b      	ldrh	r3, [r3, #2]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	7812      	ldrb	r2, [r2, #0]
 80092bc:	4293      	cmp	r3, r2
 80092be:	d91f      	bls.n	8009300 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80092c6:	e013      	b.n	80092f0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80092c8:	f107 030a 	add.w	r3, r7, #10
 80092cc:	4619      	mov	r1, r3
 80092ce:	6978      	ldr	r0, [r7, #20]
 80092d0:	f000 f81b 	bl	800930a <USBD_GetNextDesc>
 80092d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	2b05      	cmp	r3, #5
 80092dc:	d108      	bne.n	80092f0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	789b      	ldrb	r3, [r3, #2]
 80092e6:	78fa      	ldrb	r2, [r7, #3]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d008      	beq.n	80092fe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80092ec:	2300      	movs	r3, #0
 80092ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	885b      	ldrh	r3, [r3, #2]
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	897b      	ldrh	r3, [r7, #10]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d8e5      	bhi.n	80092c8 <USBD_GetEpDesc+0x2e>
 80092fc:	e000      	b.n	8009300 <USBD_GetEpDesc+0x66>
          break;
 80092fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009300:	693b      	ldr	r3, [r7, #16]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800930a:	b480      	push	{r7}
 800930c:	b085      	sub	sp, #20
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	7812      	ldrb	r2, [r2, #0]
 8009320:	4413      	add	r3, r2
 8009322:	b29a      	uxth	r2, r3
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	461a      	mov	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4413      	add	r3, r2
 8009332:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009334:	68fb      	ldr	r3, [r7, #12]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009342:	b480      	push	{r7}
 8009344:	b087      	sub	sp, #28
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	3301      	adds	r3, #1
 8009358:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009360:	8a3b      	ldrh	r3, [r7, #16]
 8009362:	021b      	lsls	r3, r3, #8
 8009364:	b21a      	sxth	r2, r3
 8009366:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800936a:	4313      	orrs	r3, r2
 800936c:	b21b      	sxth	r3, r3
 800936e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009370:	89fb      	ldrh	r3, [r7, #14]
}
 8009372:	4618      	mov	r0, r3
 8009374:	371c      	adds	r7, #28
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
	...

08009380 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009396:	2b40      	cmp	r3, #64	@ 0x40
 8009398:	d005      	beq.n	80093a6 <USBD_StdDevReq+0x26>
 800939a:	2b40      	cmp	r3, #64	@ 0x40
 800939c:	d857      	bhi.n	800944e <USBD_StdDevReq+0xce>
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00f      	beq.n	80093c2 <USBD_StdDevReq+0x42>
 80093a2:	2b20      	cmp	r3, #32
 80093a4:	d153      	bne.n	800944e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	32ae      	adds	r2, #174	@ 0xae
 80093b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	4798      	blx	r3
 80093bc:	4603      	mov	r3, r0
 80093be:	73fb      	strb	r3, [r7, #15]
      break;
 80093c0:	e04a      	b.n	8009458 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	785b      	ldrb	r3, [r3, #1]
 80093c6:	2b09      	cmp	r3, #9
 80093c8:	d83b      	bhi.n	8009442 <USBD_StdDevReq+0xc2>
 80093ca:	a201      	add	r2, pc, #4	@ (adr r2, 80093d0 <USBD_StdDevReq+0x50>)
 80093cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d0:	08009425 	.word	0x08009425
 80093d4:	08009439 	.word	0x08009439
 80093d8:	08009443 	.word	0x08009443
 80093dc:	0800942f 	.word	0x0800942f
 80093e0:	08009443 	.word	0x08009443
 80093e4:	08009403 	.word	0x08009403
 80093e8:	080093f9 	.word	0x080093f9
 80093ec:	08009443 	.word	0x08009443
 80093f0:	0800941b 	.word	0x0800941b
 80093f4:	0800940d 	.word	0x0800940d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa3c 	bl	8009878 <USBD_GetDescriptor>
          break;
 8009400:	e024      	b.n	800944c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fba1 	bl	8009b4c <USBD_SetAddress>
          break;
 800940a:	e01f      	b.n	800944c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fbe0 	bl	8009bd4 <USBD_SetConfig>
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]
          break;
 8009418:	e018      	b.n	800944c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fc83 	bl	8009d28 <USBD_GetConfig>
          break;
 8009422:	e013      	b.n	800944c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fcb4 	bl	8009d94 <USBD_GetStatus>
          break;
 800942c:	e00e      	b.n	800944c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fce3 	bl	8009dfc <USBD_SetFeature>
          break;
 8009436:	e009      	b.n	800944c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009438:	6839      	ldr	r1, [r7, #0]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fd07 	bl	8009e4e <USBD_ClrFeature>
          break;
 8009440:	e004      	b.n	800944c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fd5e 	bl	8009f06 <USBD_CtlError>
          break;
 800944a:	bf00      	nop
      }
      break;
 800944c:	e004      	b.n	8009458 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fd58 	bl	8009f06 <USBD_CtlError>
      break;
 8009456:	bf00      	nop
  }

  return ret;
 8009458:	7bfb      	ldrb	r3, [r7, #15]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop

08009464 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800947a:	2b40      	cmp	r3, #64	@ 0x40
 800947c:	d005      	beq.n	800948a <USBD_StdItfReq+0x26>
 800947e:	2b40      	cmp	r3, #64	@ 0x40
 8009480:	d852      	bhi.n	8009528 <USBD_StdItfReq+0xc4>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <USBD_StdItfReq+0x26>
 8009486:	2b20      	cmp	r3, #32
 8009488:	d14e      	bne.n	8009528 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009490:	b2db      	uxtb	r3, r3
 8009492:	3b01      	subs	r3, #1
 8009494:	2b02      	cmp	r3, #2
 8009496:	d840      	bhi.n	800951a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	889b      	ldrh	r3, [r3, #4]
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d836      	bhi.n	8009510 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	889b      	ldrh	r3, [r3, #4]
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	4619      	mov	r1, r3
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7ff fedb 	bl	8009266 <USBD_CoreFindIF>
 80094b0:	4603      	mov	r3, r0
 80094b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
 80094b6:	2bff      	cmp	r3, #255	@ 0xff
 80094b8:	d01d      	beq.n	80094f6 <USBD_StdItfReq+0x92>
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d11a      	bne.n	80094f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80094c0:	7bba      	ldrb	r2, [r7, #14]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	32ae      	adds	r2, #174	@ 0xae
 80094c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00f      	beq.n	80094f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80094d0:	7bba      	ldrb	r2, [r7, #14]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094d8:	7bba      	ldrb	r2, [r7, #14]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	32ae      	adds	r2, #174	@ 0xae
 80094de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	4798      	blx	r3
 80094ea:	4603      	mov	r3, r0
 80094ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094ee:	e004      	b.n	80094fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80094f0:	2303      	movs	r3, #3
 80094f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094f4:	e001      	b.n	80094fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80094f6:	2303      	movs	r3, #3
 80094f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	88db      	ldrh	r3, [r3, #6]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d110      	bne.n	8009524 <USBD_StdItfReq+0xc0>
 8009502:	7bfb      	ldrb	r3, [r7, #15]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10d      	bne.n	8009524 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fdd3 	bl	800a0b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800950e:	e009      	b.n	8009524 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fcf7 	bl	8009f06 <USBD_CtlError>
          break;
 8009518:	e004      	b.n	8009524 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fcf2 	bl	8009f06 <USBD_CtlError>
          break;
 8009522:	e000      	b.n	8009526 <USBD_StdItfReq+0xc2>
          break;
 8009524:	bf00      	nop
      }
      break;
 8009526:	e004      	b.n	8009532 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fceb 	bl	8009f06 <USBD_CtlError>
      break;
 8009530:	bf00      	nop
  }

  return ret;
 8009532:	7bfb      	ldrb	r3, [r7, #15]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	889b      	ldrh	r3, [r3, #4]
 800954e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009558:	2b40      	cmp	r3, #64	@ 0x40
 800955a:	d007      	beq.n	800956c <USBD_StdEPReq+0x30>
 800955c:	2b40      	cmp	r3, #64	@ 0x40
 800955e:	f200 817f 	bhi.w	8009860 <USBD_StdEPReq+0x324>
 8009562:	2b00      	cmp	r3, #0
 8009564:	d02a      	beq.n	80095bc <USBD_StdEPReq+0x80>
 8009566:	2b20      	cmp	r3, #32
 8009568:	f040 817a 	bne.w	8009860 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7ff fe85 	bl	8009280 <USBD_CoreFindEP>
 8009576:	4603      	mov	r3, r0
 8009578:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800957a:	7b7b      	ldrb	r3, [r7, #13]
 800957c:	2bff      	cmp	r3, #255	@ 0xff
 800957e:	f000 8174 	beq.w	800986a <USBD_StdEPReq+0x32e>
 8009582:	7b7b      	ldrb	r3, [r7, #13]
 8009584:	2b00      	cmp	r3, #0
 8009586:	f040 8170 	bne.w	800986a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800958a:	7b7a      	ldrb	r2, [r7, #13]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009592:	7b7a      	ldrb	r2, [r7, #13]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	32ae      	adds	r2, #174	@ 0xae
 8009598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f000 8163 	beq.w	800986a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80095a4:	7b7a      	ldrb	r2, [r7, #13]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	32ae      	adds	r2, #174	@ 0xae
 80095aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	4798      	blx	r3
 80095b6:	4603      	mov	r3, r0
 80095b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80095ba:	e156      	b.n	800986a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	785b      	ldrb	r3, [r3, #1]
 80095c0:	2b03      	cmp	r3, #3
 80095c2:	d008      	beq.n	80095d6 <USBD_StdEPReq+0x9a>
 80095c4:	2b03      	cmp	r3, #3
 80095c6:	f300 8145 	bgt.w	8009854 <USBD_StdEPReq+0x318>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 809b 	beq.w	8009706 <USBD_StdEPReq+0x1ca>
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d03c      	beq.n	800964e <USBD_StdEPReq+0x112>
 80095d4:	e13e      	b.n	8009854 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d002      	beq.n	80095e8 <USBD_StdEPReq+0xac>
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d016      	beq.n	8009614 <USBD_StdEPReq+0xd8>
 80095e6:	e02c      	b.n	8009642 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095e8:	7bbb      	ldrb	r3, [r7, #14]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00d      	beq.n	800960a <USBD_StdEPReq+0xce>
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
 80095f0:	2b80      	cmp	r3, #128	@ 0x80
 80095f2:	d00a      	beq.n	800960a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80095f4:	7bbb      	ldrb	r3, [r7, #14]
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f001 f979 	bl	800a8f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80095fe:	2180      	movs	r1, #128	@ 0x80
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f001 f975 	bl	800a8f0 <USBD_LL_StallEP>
 8009606:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009608:	e020      	b.n	800964c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 fc7a 	bl	8009f06 <USBD_CtlError>
              break;
 8009612:	e01b      	b.n	800964c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	885b      	ldrh	r3, [r3, #2]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10e      	bne.n	800963a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800961c:	7bbb      	ldrb	r3, [r7, #14]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00b      	beq.n	800963a <USBD_StdEPReq+0xfe>
 8009622:	7bbb      	ldrb	r3, [r7, #14]
 8009624:	2b80      	cmp	r3, #128	@ 0x80
 8009626:	d008      	beq.n	800963a <USBD_StdEPReq+0xfe>
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	88db      	ldrh	r3, [r3, #6]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d104      	bne.n	800963a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009630:	7bbb      	ldrb	r3, [r7, #14]
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f001 f95b 	bl	800a8f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fd3a 	bl	800a0b4 <USBD_CtlSendStatus>

              break;
 8009640:	e004      	b.n	800964c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fc5e 	bl	8009f06 <USBD_CtlError>
              break;
 800964a:	bf00      	nop
          }
          break;
 800964c:	e107      	b.n	800985e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b02      	cmp	r3, #2
 8009658:	d002      	beq.n	8009660 <USBD_StdEPReq+0x124>
 800965a:	2b03      	cmp	r3, #3
 800965c:	d016      	beq.n	800968c <USBD_StdEPReq+0x150>
 800965e:	e04b      	b.n	80096f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00d      	beq.n	8009682 <USBD_StdEPReq+0x146>
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	2b80      	cmp	r3, #128	@ 0x80
 800966a:	d00a      	beq.n	8009682 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f001 f93d 	bl	800a8f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009676:	2180      	movs	r1, #128	@ 0x80
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f001 f939 	bl	800a8f0 <USBD_LL_StallEP>
 800967e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009680:	e040      	b.n	8009704 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fc3e 	bl	8009f06 <USBD_CtlError>
              break;
 800968a:	e03b      	b.n	8009704 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	885b      	ldrh	r3, [r3, #2]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d136      	bne.n	8009702 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009694:	7bbb      	ldrb	r3, [r7, #14]
 8009696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800969a:	2b00      	cmp	r3, #0
 800969c:	d004      	beq.n	80096a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800969e:	7bbb      	ldrb	r3, [r7, #14]
 80096a0:	4619      	mov	r1, r3
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f001 f943 	bl	800a92e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 fd03 	bl	800a0b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff fde4 	bl	8009280 <USBD_CoreFindEP>
 80096b8:	4603      	mov	r3, r0
 80096ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096bc:	7b7b      	ldrb	r3, [r7, #13]
 80096be:	2bff      	cmp	r3, #255	@ 0xff
 80096c0:	d01f      	beq.n	8009702 <USBD_StdEPReq+0x1c6>
 80096c2:	7b7b      	ldrb	r3, [r7, #13]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d11c      	bne.n	8009702 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80096c8:	7b7a      	ldrb	r2, [r7, #13]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80096d0:	7b7a      	ldrb	r2, [r7, #13]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	32ae      	adds	r2, #174	@ 0xae
 80096d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d010      	beq.n	8009702 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80096e0:	7b7a      	ldrb	r2, [r7, #13]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	32ae      	adds	r2, #174	@ 0xae
 80096e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	4798      	blx	r3
 80096f2:	4603      	mov	r3, r0
 80096f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80096f6:	e004      	b.n	8009702 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fc03 	bl	8009f06 <USBD_CtlError>
              break;
 8009700:	e000      	b.n	8009704 <USBD_StdEPReq+0x1c8>
              break;
 8009702:	bf00      	nop
          }
          break;
 8009704:	e0ab      	b.n	800985e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b02      	cmp	r3, #2
 8009710:	d002      	beq.n	8009718 <USBD_StdEPReq+0x1dc>
 8009712:	2b03      	cmp	r3, #3
 8009714:	d032      	beq.n	800977c <USBD_StdEPReq+0x240>
 8009716:	e097      	b.n	8009848 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d007      	beq.n	800972e <USBD_StdEPReq+0x1f2>
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	2b80      	cmp	r3, #128	@ 0x80
 8009722:	d004      	beq.n	800972e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fbed 	bl	8009f06 <USBD_CtlError>
                break;
 800972c:	e091      	b.n	8009852 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800972e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009732:	2b00      	cmp	r3, #0
 8009734:	da0b      	bge.n	800974e <USBD_StdEPReq+0x212>
 8009736:	7bbb      	ldrb	r3, [r7, #14]
 8009738:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800973c:	4613      	mov	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	3310      	adds	r3, #16
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	4413      	add	r3, r2
 800974a:	3304      	adds	r3, #4
 800974c:	e00b      	b.n	8009766 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800974e:	7bbb      	ldrb	r3, [r7, #14]
 8009750:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009754:	4613      	mov	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	4413      	add	r3, r2
 8009764:	3304      	adds	r3, #4
 8009766:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2200      	movs	r2, #0
 800976c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2202      	movs	r2, #2
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fc43 	bl	800a000 <USBD_CtlSendData>
              break;
 800977a:	e06a      	b.n	8009852 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800977c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009780:	2b00      	cmp	r3, #0
 8009782:	da11      	bge.n	80097a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009784:	7bbb      	ldrb	r3, [r7, #14]
 8009786:	f003 020f 	and.w	r2, r3, #15
 800978a:	6879      	ldr	r1, [r7, #4]
 800978c:	4613      	mov	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	440b      	add	r3, r1
 8009796:	3324      	adds	r3, #36	@ 0x24
 8009798:	881b      	ldrh	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d117      	bne.n	80097ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fbb0 	bl	8009f06 <USBD_CtlError>
                  break;
 80097a6:	e054      	b.n	8009852 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	f003 020f 	and.w	r2, r3, #15
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	4613      	mov	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	440b      	add	r3, r1
 80097ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097be:	881b      	ldrh	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d104      	bne.n	80097ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fb9d 	bl	8009f06 <USBD_CtlError>
                  break;
 80097cc:	e041      	b.n	8009852 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	da0b      	bge.n	80097ee <USBD_StdEPReq+0x2b2>
 80097d6:	7bbb      	ldrb	r3, [r7, #14]
 80097d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097dc:	4613      	mov	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	3310      	adds	r3, #16
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	4413      	add	r3, r2
 80097ea:	3304      	adds	r3, #4
 80097ec:	e00b      	b.n	8009806 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097ee:	7bbb      	ldrb	r3, [r7, #14]
 80097f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097f4:	4613      	mov	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	4413      	add	r3, r2
 8009804:	3304      	adds	r3, #4
 8009806:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009808:	7bbb      	ldrb	r3, [r7, #14]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d002      	beq.n	8009814 <USBD_StdEPReq+0x2d8>
 800980e:	7bbb      	ldrb	r3, [r7, #14]
 8009810:	2b80      	cmp	r3, #128	@ 0x80
 8009812:	d103      	bne.n	800981c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2200      	movs	r2, #0
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	e00e      	b.n	800983a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800981c:	7bbb      	ldrb	r3, [r7, #14]
 800981e:	4619      	mov	r1, r3
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f001 f8a3 	bl	800a96c <USBD_LL_IsStallEP>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	2201      	movs	r2, #1
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	e002      	b.n	800983a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2200      	movs	r2, #0
 8009838:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2202      	movs	r2, #2
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fbdd 	bl	800a000 <USBD_CtlSendData>
              break;
 8009846:	e004      	b.n	8009852 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fb5b 	bl	8009f06 <USBD_CtlError>
              break;
 8009850:	bf00      	nop
          }
          break;
 8009852:	e004      	b.n	800985e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fb55 	bl	8009f06 <USBD_CtlError>
          break;
 800985c:	bf00      	nop
      }
      break;
 800985e:	e005      	b.n	800986c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fb4f 	bl	8009f06 <USBD_CtlError>
      break;
 8009868:	e000      	b.n	800986c <USBD_StdEPReq+0x330>
      break;
 800986a:	bf00      	nop
  }

  return ret;
 800986c:	7bfb      	ldrb	r3, [r7, #15]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
	...

08009878 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009886:	2300      	movs	r3, #0
 8009888:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800988a:	2300      	movs	r3, #0
 800988c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	885b      	ldrh	r3, [r3, #2]
 8009892:	0a1b      	lsrs	r3, r3, #8
 8009894:	b29b      	uxth	r3, r3
 8009896:	3b01      	subs	r3, #1
 8009898:	2b06      	cmp	r3, #6
 800989a:	f200 8128 	bhi.w	8009aee <USBD_GetDescriptor+0x276>
 800989e:	a201      	add	r2, pc, #4	@ (adr r2, 80098a4 <USBD_GetDescriptor+0x2c>)
 80098a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a4:	080098c1 	.word	0x080098c1
 80098a8:	080098d9 	.word	0x080098d9
 80098ac:	08009919 	.word	0x08009919
 80098b0:	08009aef 	.word	0x08009aef
 80098b4:	08009aef 	.word	0x08009aef
 80098b8:	08009a8f 	.word	0x08009a8f
 80098bc:	08009abb 	.word	0x08009abb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	7c12      	ldrb	r2, [r2, #16]
 80098cc:	f107 0108 	add.w	r1, r7, #8
 80098d0:	4610      	mov	r0, r2
 80098d2:	4798      	blx	r3
 80098d4:	60f8      	str	r0, [r7, #12]
      break;
 80098d6:	e112      	b.n	8009afe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	7c1b      	ldrb	r3, [r3, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10d      	bne.n	80098fc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e8:	f107 0208 	add.w	r2, r7, #8
 80098ec:	4610      	mov	r0, r2
 80098ee:	4798      	blx	r3
 80098f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	3301      	adds	r3, #1
 80098f6:	2202      	movs	r2, #2
 80098f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80098fa:	e100      	b.n	8009afe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009904:	f107 0208 	add.w	r2, r7, #8
 8009908:	4610      	mov	r0, r2
 800990a:	4798      	blx	r3
 800990c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3301      	adds	r3, #1
 8009912:	2202      	movs	r2, #2
 8009914:	701a      	strb	r2, [r3, #0]
      break;
 8009916:	e0f2      	b.n	8009afe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	885b      	ldrh	r3, [r3, #2]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b05      	cmp	r3, #5
 8009920:	f200 80ac 	bhi.w	8009a7c <USBD_GetDescriptor+0x204>
 8009924:	a201      	add	r2, pc, #4	@ (adr r2, 800992c <USBD_GetDescriptor+0xb4>)
 8009926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992a:	bf00      	nop
 800992c:	08009945 	.word	0x08009945
 8009930:	08009979 	.word	0x08009979
 8009934:	080099ad 	.word	0x080099ad
 8009938:	080099e1 	.word	0x080099e1
 800993c:	08009a15 	.word	0x08009a15
 8009940:	08009a49 	.word	0x08009a49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00b      	beq.n	8009968 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	7c12      	ldrb	r2, [r2, #16]
 800995c:	f107 0108 	add.w	r1, r7, #8
 8009960:	4610      	mov	r0, r2
 8009962:	4798      	blx	r3
 8009964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009966:	e091      	b.n	8009a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 facb 	bl	8009f06 <USBD_CtlError>
            err++;
 8009970:	7afb      	ldrb	r3, [r7, #11]
 8009972:	3301      	adds	r3, #1
 8009974:	72fb      	strb	r3, [r7, #11]
          break;
 8009976:	e089      	b.n	8009a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00b      	beq.n	800999c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	7c12      	ldrb	r2, [r2, #16]
 8009990:	f107 0108 	add.w	r1, r7, #8
 8009994:	4610      	mov	r0, r2
 8009996:	4798      	blx	r3
 8009998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800999a:	e077      	b.n	8009a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fab1 	bl	8009f06 <USBD_CtlError>
            err++;
 80099a4:	7afb      	ldrb	r3, [r7, #11]
 80099a6:	3301      	adds	r3, #1
 80099a8:	72fb      	strb	r3, [r7, #11]
          break;
 80099aa:	e06f      	b.n	8009a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00b      	beq.n	80099d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	7c12      	ldrb	r2, [r2, #16]
 80099c4:	f107 0108 	add.w	r1, r7, #8
 80099c8:	4610      	mov	r0, r2
 80099ca:	4798      	blx	r3
 80099cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ce:	e05d      	b.n	8009a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fa97 	bl	8009f06 <USBD_CtlError>
            err++;
 80099d8:	7afb      	ldrb	r3, [r7, #11]
 80099da:	3301      	adds	r3, #1
 80099dc:	72fb      	strb	r3, [r7, #11]
          break;
 80099de:	e055      	b.n	8009a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00b      	beq.n	8009a04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	7c12      	ldrb	r2, [r2, #16]
 80099f8:	f107 0108 	add.w	r1, r7, #8
 80099fc:	4610      	mov	r0, r2
 80099fe:	4798      	blx	r3
 8009a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a02:	e043      	b.n	8009a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fa7d 	bl	8009f06 <USBD_CtlError>
            err++;
 8009a0c:	7afb      	ldrb	r3, [r7, #11]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	72fb      	strb	r3, [r7, #11]
          break;
 8009a12:	e03b      	b.n	8009a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00b      	beq.n	8009a38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a26:	695b      	ldr	r3, [r3, #20]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	7c12      	ldrb	r2, [r2, #16]
 8009a2c:	f107 0108 	add.w	r1, r7, #8
 8009a30:	4610      	mov	r0, r2
 8009a32:	4798      	blx	r3
 8009a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a36:	e029      	b.n	8009a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa63 	bl	8009f06 <USBD_CtlError>
            err++;
 8009a40:	7afb      	ldrb	r3, [r7, #11]
 8009a42:	3301      	adds	r3, #1
 8009a44:	72fb      	strb	r3, [r7, #11]
          break;
 8009a46:	e021      	b.n	8009a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00b      	beq.n	8009a6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	7c12      	ldrb	r2, [r2, #16]
 8009a60:	f107 0108 	add.w	r1, r7, #8
 8009a64:	4610      	mov	r0, r2
 8009a66:	4798      	blx	r3
 8009a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a6a:	e00f      	b.n	8009a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fa49 	bl	8009f06 <USBD_CtlError>
            err++;
 8009a74:	7afb      	ldrb	r3, [r7, #11]
 8009a76:	3301      	adds	r3, #1
 8009a78:	72fb      	strb	r3, [r7, #11]
          break;
 8009a7a:	e007      	b.n	8009a8c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fa41 	bl	8009f06 <USBD_CtlError>
          err++;
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	3301      	adds	r3, #1
 8009a88:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009a8a:	bf00      	nop
      }
      break;
 8009a8c:	e037      	b.n	8009afe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	7c1b      	ldrb	r3, [r3, #16]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d109      	bne.n	8009aaa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a9e:	f107 0208 	add.w	r2, r7, #8
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	4798      	blx	r3
 8009aa6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009aa8:	e029      	b.n	8009afe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fa2a 	bl	8009f06 <USBD_CtlError>
        err++;
 8009ab2:	7afb      	ldrb	r3, [r7, #11]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ab8:	e021      	b.n	8009afe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	7c1b      	ldrb	r3, [r3, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10d      	bne.n	8009ade <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aca:	f107 0208 	add.w	r2, r7, #8
 8009ace:	4610      	mov	r0, r2
 8009ad0:	4798      	blx	r3
 8009ad2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	2207      	movs	r2, #7
 8009ada:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009adc:	e00f      	b.n	8009afe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fa10 	bl	8009f06 <USBD_CtlError>
        err++;
 8009ae6:	7afb      	ldrb	r3, [r7, #11]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	72fb      	strb	r3, [r7, #11]
      break;
 8009aec:	e007      	b.n	8009afe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fa08 	bl	8009f06 <USBD_CtlError>
      err++;
 8009af6:	7afb      	ldrb	r3, [r7, #11]
 8009af8:	3301      	adds	r3, #1
 8009afa:	72fb      	strb	r3, [r7, #11]
      break;
 8009afc:	bf00      	nop
  }

  if (err != 0U)
 8009afe:	7afb      	ldrb	r3, [r7, #11]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d11e      	bne.n	8009b42 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	88db      	ldrh	r3, [r3, #6]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d016      	beq.n	8009b3a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009b0c:	893b      	ldrh	r3, [r7, #8]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00e      	beq.n	8009b30 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	88da      	ldrh	r2, [r3, #6]
 8009b16:	893b      	ldrh	r3, [r7, #8]
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	bf28      	it	cs
 8009b1c:	4613      	movcs	r3, r2
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b22:	893b      	ldrh	r3, [r7, #8]
 8009b24:	461a      	mov	r2, r3
 8009b26:	68f9      	ldr	r1, [r7, #12]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fa69 	bl	800a000 <USBD_CtlSendData>
 8009b2e:	e009      	b.n	8009b44 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f9e7 	bl	8009f06 <USBD_CtlError>
 8009b38:	e004      	b.n	8009b44 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 faba 	bl	800a0b4 <USBD_CtlSendStatus>
 8009b40:	e000      	b.n	8009b44 <USBD_GetDescriptor+0x2cc>
    return;
 8009b42:	bf00      	nop
  }
}
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop

08009b4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	889b      	ldrh	r3, [r3, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d131      	bne.n	8009bc2 <USBD_SetAddress+0x76>
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	88db      	ldrh	r3, [r3, #6]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d12d      	bne.n	8009bc2 <USBD_SetAddress+0x76>
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	885b      	ldrh	r3, [r3, #2]
 8009b6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b6c:	d829      	bhi.n	8009bc2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	885b      	ldrh	r3, [r3, #2]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	d104      	bne.n	8009b90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009b86:	6839      	ldr	r1, [r7, #0]
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f9bc 	bl	8009f06 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b8e:	e01d      	b.n	8009bcc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	7bfa      	ldrb	r2, [r7, #15]
 8009b94:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 ff11 	bl	800a9c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fa86 	bl	800a0b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d004      	beq.n	8009bb8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bb6:	e009      	b.n	8009bcc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bc0:	e004      	b.n	8009bcc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f99e 	bl	8009f06 <USBD_CtlError>
  }
}
 8009bca:	bf00      	nop
 8009bcc:	bf00      	nop
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	885b      	ldrh	r3, [r3, #2]
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	4b4e      	ldr	r3, [pc, #312]	@ (8009d24 <USBD_SetConfig+0x150>)
 8009bea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009bec:	4b4d      	ldr	r3, [pc, #308]	@ (8009d24 <USBD_SetConfig+0x150>)
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d905      	bls.n	8009c00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f985 	bl	8009f06 <USBD_CtlError>
    return USBD_FAIL;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e08c      	b.n	8009d1a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d002      	beq.n	8009c12 <USBD_SetConfig+0x3e>
 8009c0c:	2b03      	cmp	r3, #3
 8009c0e:	d029      	beq.n	8009c64 <USBD_SetConfig+0x90>
 8009c10:	e075      	b.n	8009cfe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c12:	4b44      	ldr	r3, [pc, #272]	@ (8009d24 <USBD_SetConfig+0x150>)
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d020      	beq.n	8009c5c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009c1a:	4b42      	ldr	r3, [pc, #264]	@ (8009d24 <USBD_SetConfig+0x150>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c24:	4b3f      	ldr	r3, [pc, #252]	@ (8009d24 <USBD_SetConfig+0x150>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f7fe ffe3 	bl	8008bf6 <USBD_SetClassConfig>
 8009c30:	4603      	mov	r3, r0
 8009c32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d008      	beq.n	8009c4c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f962 	bl	8009f06 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2202      	movs	r2, #2
 8009c46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c4a:	e065      	b.n	8009d18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fa31 	bl	800a0b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2203      	movs	r2, #3
 8009c56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009c5a:	e05d      	b.n	8009d18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fa29 	bl	800a0b4 <USBD_CtlSendStatus>
      break;
 8009c62:	e059      	b.n	8009d18 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009c64:	4b2f      	ldr	r3, [pc, #188]	@ (8009d24 <USBD_SetConfig+0x150>)
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d112      	bne.n	8009c92 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009c74:	4b2b      	ldr	r3, [pc, #172]	@ (8009d24 <USBD_SetConfig+0x150>)
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c7e:	4b29      	ldr	r3, [pc, #164]	@ (8009d24 <USBD_SetConfig+0x150>)
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7fe ffd2 	bl	8008c2e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fa12 	bl	800a0b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c90:	e042      	b.n	8009d18 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009c92:	4b24      	ldr	r3, [pc, #144]	@ (8009d24 <USBD_SetConfig+0x150>)
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d02a      	beq.n	8009cf6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7fe ffc0 	bl	8008c2e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009cae:	4b1d      	ldr	r3, [pc, #116]	@ (8009d24 <USBD_SetConfig+0x150>)
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8009d24 <USBD_SetConfig+0x150>)
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7fe ff99 	bl	8008bf6 <USBD_SetClassConfig>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00f      	beq.n	8009cee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009cce:	6839      	ldr	r1, [r7, #0]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f918 	bl	8009f06 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7fe ffa5 	bl	8008c2e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009cec:	e014      	b.n	8009d18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f9e0 	bl	800a0b4 <USBD_CtlSendStatus>
      break;
 8009cf4:	e010      	b.n	8009d18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f9dc 	bl	800a0b4 <USBD_CtlSendStatus>
      break;
 8009cfc:	e00c      	b.n	8009d18 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f900 	bl	8009f06 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d06:	4b07      	ldr	r3, [pc, #28]	@ (8009d24 <USBD_SetConfig+0x150>)
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7fe ff8e 	bl	8008c2e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d12:	2303      	movs	r3, #3
 8009d14:	73fb      	strb	r3, [r7, #15]
      break;
 8009d16:	bf00      	nop
  }

  return ret;
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	200004c4 	.word	0x200004c4

08009d28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	88db      	ldrh	r3, [r3, #6]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d004      	beq.n	8009d44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f8e2 	bl	8009f06 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d42:	e023      	b.n	8009d8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	dc02      	bgt.n	8009d56 <USBD_GetConfig+0x2e>
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	dc03      	bgt.n	8009d5c <USBD_GetConfig+0x34>
 8009d54:	e015      	b.n	8009d82 <USBD_GetConfig+0x5a>
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d00b      	beq.n	8009d72 <USBD_GetConfig+0x4a>
 8009d5a:	e012      	b.n	8009d82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	3308      	adds	r3, #8
 8009d66:	2201      	movs	r2, #1
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f948 	bl	800a000 <USBD_CtlSendData>
        break;
 8009d70:	e00c      	b.n	8009d8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3304      	adds	r3, #4
 8009d76:	2201      	movs	r2, #1
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f940 	bl	800a000 <USBD_CtlSendData>
        break;
 8009d80:	e004      	b.n	8009d8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f8be 	bl	8009f06 <USBD_CtlError>
        break;
 8009d8a:	bf00      	nop
}
 8009d8c:	bf00      	nop
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	3b01      	subs	r3, #1
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d81e      	bhi.n	8009dea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	88db      	ldrh	r3, [r3, #6]
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d004      	beq.n	8009dbe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f8a5 	bl	8009f06 <USBD_CtlError>
        break;
 8009dbc:	e01a      	b.n	8009df4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d005      	beq.n	8009dda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	f043 0202 	orr.w	r2, r3, #2
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	330c      	adds	r3, #12
 8009dde:	2202      	movs	r2, #2
 8009de0:	4619      	mov	r1, r3
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f90c 	bl	800a000 <USBD_CtlSendData>
      break;
 8009de8:	e004      	b.n	8009df4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f88a 	bl	8009f06 <USBD_CtlError>
      break;
 8009df2:	bf00      	nop
  }
}
 8009df4:	bf00      	nop
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	885b      	ldrh	r3, [r3, #2]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d107      	bne.n	8009e1e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f94c 	bl	800a0b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009e1c:	e013      	b.n	8009e46 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	885b      	ldrh	r3, [r3, #2]
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d10b      	bne.n	8009e3e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	889b      	ldrh	r3, [r3, #4]
 8009e2a:	0a1b      	lsrs	r3, r3, #8
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f93c 	bl	800a0b4 <USBD_CtlSendStatus>
}
 8009e3c:	e003      	b.n	8009e46 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f860 	bl	8009f06 <USBD_CtlError>
}
 8009e46:	bf00      	nop
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b082      	sub	sp, #8
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	3b01      	subs	r3, #1
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d80b      	bhi.n	8009e7e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	885b      	ldrh	r3, [r3, #2]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d10c      	bne.n	8009e88 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f91c 	bl	800a0b4 <USBD_CtlSendStatus>
      }
      break;
 8009e7c:	e004      	b.n	8009e88 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f840 	bl	8009f06 <USBD_CtlError>
      break;
 8009e86:	e000      	b.n	8009e8a <USBD_ClrFeature+0x3c>
      break;
 8009e88:	bf00      	nop
  }
}
 8009e8a:	bf00      	nop
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b084      	sub	sp, #16
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	781a      	ldrb	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	781a      	ldrb	r2, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f7ff fa40 	bl	8009342 <SWAPBYTE>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f7ff fa33 	bl	8009342 <SWAPBYTE>
 8009edc:	4603      	mov	r3, r0
 8009ede:	461a      	mov	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3301      	adds	r3, #1
 8009eee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f7ff fa26 	bl	8009342 <SWAPBYTE>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	461a      	mov	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	80da      	strh	r2, [r3, #6]
}
 8009efe:	bf00      	nop
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f10:	2180      	movs	r1, #128	@ 0x80
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fcec 	bl	800a8f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f18:	2100      	movs	r1, #0
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fce8 	bl	800a8f0 <USBD_LL_StallEP>
}
 8009f20:	bf00      	nop
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f34:	2300      	movs	r3, #0
 8009f36:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d042      	beq.n	8009fc4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009f42:	6938      	ldr	r0, [r7, #16]
 8009f44:	f000 f842 	bl	8009fcc <USBD_GetLen>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	005b      	lsls	r3, r3, #1
 8009f4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f52:	d808      	bhi.n	8009f66 <USBD_GetString+0x3e>
 8009f54:	6938      	ldr	r0, [r7, #16]
 8009f56:	f000 f839 	bl	8009fcc <USBD_GetLen>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	e001      	b.n	8009f6a <USBD_GetString+0x42>
 8009f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	4413      	add	r3, r2
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	7812      	ldrb	r2, [r2, #0]
 8009f78:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	4413      	add	r3, r2
 8009f86:	2203      	movs	r2, #3
 8009f88:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f90:	e013      	b.n	8009fba <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009f92:	7dfb      	ldrb	r3, [r7, #23]
 8009f94:	68ba      	ldr	r2, [r7, #8]
 8009f96:	4413      	add	r3, r2
 8009f98:	693a      	ldr	r2, [r7, #16]
 8009f9a:	7812      	ldrb	r2, [r2, #0]
 8009f9c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	613b      	str	r3, [r7, #16]
    idx++;
 8009fa4:	7dfb      	ldrb	r3, [r7, #23]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009faa:	7dfb      	ldrb	r3, [r7, #23]
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	4413      	add	r3, r2
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	701a      	strb	r2, [r3, #0]
    idx++;
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1e7      	bne.n	8009f92 <USBD_GetString+0x6a>
 8009fc2:	e000      	b.n	8009fc6 <USBD_GetString+0x9e>
    return;
 8009fc4:	bf00      	nop
  }
}
 8009fc6:	3718      	adds	r7, #24
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009fdc:	e005      	b.n	8009fea <USBD_GetLen+0x1e>
  {
    len++;
 8009fde:	7bfb      	ldrb	r3, [r7, #15]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1f5      	bne.n	8009fde <USBD_GetLen+0x12>
  }

  return len;
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2202      	movs	r2, #2
 800a010:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	2100      	movs	r1, #0
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f000 fceb 	bl	800aa02 <USBD_LL_Transmit>

  return USBD_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	60b9      	str	r1, [r7, #8]
 800a040:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	2100      	movs	r1, #0
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f000 fcda 	bl	800aa02 <USBD_LL_Transmit>

  return USBD_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2203      	movs	r2, #3
 800a068:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	2100      	movs	r1, #0
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f000 fcde 	bl	800aa44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	60f8      	str	r0, [r7, #12]
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f000 fccd 	bl	800aa44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2204      	movs	r2, #4
 800a0c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fc99 	bl	800aa02 <USBD_LL_Transmit>

  return USBD_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b082      	sub	sp, #8
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2205      	movs	r2, #5
 800a0e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fca7 	bl	800aa44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a104:	2200      	movs	r2, #0
 800a106:	4912      	ldr	r1, [pc, #72]	@ (800a150 <MX_USB_DEVICE_Init+0x50>)
 800a108:	4812      	ldr	r0, [pc, #72]	@ (800a154 <MX_USB_DEVICE_Init+0x54>)
 800a10a:	f7fe fcf7 	bl	8008afc <USBD_Init>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a114:	f7f8 f88c 	bl	8002230 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a118:	490f      	ldr	r1, [pc, #60]	@ (800a158 <MX_USB_DEVICE_Init+0x58>)
 800a11a:	480e      	ldr	r0, [pc, #56]	@ (800a154 <MX_USB_DEVICE_Init+0x54>)
 800a11c:	f7fe fd1e 	bl	8008b5c <USBD_RegisterClass>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a126:	f7f8 f883 	bl	8002230 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a12a:	490c      	ldr	r1, [pc, #48]	@ (800a15c <MX_USB_DEVICE_Init+0x5c>)
 800a12c:	4809      	ldr	r0, [pc, #36]	@ (800a154 <MX_USB_DEVICE_Init+0x54>)
 800a12e:	f7fe fc15 	bl	800895c <USBD_CDC_RegisterInterface>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a138:	f7f8 f87a 	bl	8002230 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a13c:	4805      	ldr	r0, [pc, #20]	@ (800a154 <MX_USB_DEVICE_Init+0x54>)
 800a13e:	f7fe fd43 	bl	8008bc8 <USBD_Start>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a148:	f7f8 f872 	bl	8002230 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a14c:	bf00      	nop
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	200000e8 	.word	0x200000e8
 800a154:	200004c8 	.word	0x200004c8
 800a158:	20000054 	.word	0x20000054
 800a15c:	200000d4 	.word	0x200000d4

0800a160 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a164:	2200      	movs	r2, #0
 800a166:	4905      	ldr	r1, [pc, #20]	@ (800a17c <CDC_Init_FS+0x1c>)
 800a168:	4805      	ldr	r0, [pc, #20]	@ (800a180 <CDC_Init_FS+0x20>)
 800a16a:	f7fe fc11 	bl	8008990 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a16e:	4905      	ldr	r1, [pc, #20]	@ (800a184 <CDC_Init_FS+0x24>)
 800a170:	4803      	ldr	r0, [pc, #12]	@ (800a180 <CDC_Init_FS+0x20>)
 800a172:	f7fe fc2f 	bl	80089d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a176:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a178:	4618      	mov	r0, r3
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	20000fa4 	.word	0x20000fa4
 800a180:	200004c8 	.word	0x200004c8
 800a184:	200007a4 	.word	0x200007a4

0800a188 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a188:	b480      	push	{r7}
 800a18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a18c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a18e:	4618      	mov	r0, r3
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	6039      	str	r1, [r7, #0]
 800a1a2:	71fb      	strb	r3, [r7, #7]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a1a8:	79fb      	ldrb	r3, [r7, #7]
 800a1aa:	2b23      	cmp	r3, #35	@ 0x23
 800a1ac:	d84a      	bhi.n	800a244 <CDC_Control_FS+0xac>
 800a1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b4 <CDC_Control_FS+0x1c>)
 800a1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b4:	0800a245 	.word	0x0800a245
 800a1b8:	0800a245 	.word	0x0800a245
 800a1bc:	0800a245 	.word	0x0800a245
 800a1c0:	0800a245 	.word	0x0800a245
 800a1c4:	0800a245 	.word	0x0800a245
 800a1c8:	0800a245 	.word	0x0800a245
 800a1cc:	0800a245 	.word	0x0800a245
 800a1d0:	0800a245 	.word	0x0800a245
 800a1d4:	0800a245 	.word	0x0800a245
 800a1d8:	0800a245 	.word	0x0800a245
 800a1dc:	0800a245 	.word	0x0800a245
 800a1e0:	0800a245 	.word	0x0800a245
 800a1e4:	0800a245 	.word	0x0800a245
 800a1e8:	0800a245 	.word	0x0800a245
 800a1ec:	0800a245 	.word	0x0800a245
 800a1f0:	0800a245 	.word	0x0800a245
 800a1f4:	0800a245 	.word	0x0800a245
 800a1f8:	0800a245 	.word	0x0800a245
 800a1fc:	0800a245 	.word	0x0800a245
 800a200:	0800a245 	.word	0x0800a245
 800a204:	0800a245 	.word	0x0800a245
 800a208:	0800a245 	.word	0x0800a245
 800a20c:	0800a245 	.word	0x0800a245
 800a210:	0800a245 	.word	0x0800a245
 800a214:	0800a245 	.word	0x0800a245
 800a218:	0800a245 	.word	0x0800a245
 800a21c:	0800a245 	.word	0x0800a245
 800a220:	0800a245 	.word	0x0800a245
 800a224:	0800a245 	.word	0x0800a245
 800a228:	0800a245 	.word	0x0800a245
 800a22c:	0800a245 	.word	0x0800a245
 800a230:	0800a245 	.word	0x0800a245
 800a234:	0800a245 	.word	0x0800a245
 800a238:	0800a245 	.word	0x0800a245
 800a23c:	0800a245 	.word	0x0800a245
 800a240:	0800a245 	.word	0x0800a245
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a244:	bf00      	nop
  }

  return (USBD_OK);
 800a246:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a248:	4618      	mov	r0, r3
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a25e:	6879      	ldr	r1, [r7, #4]
 800a260:	4805      	ldr	r0, [pc, #20]	@ (800a278 <CDC_Receive_FS+0x24>)
 800a262:	f7fe fbb7 	bl	80089d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a266:	4804      	ldr	r0, [pc, #16]	@ (800a278 <CDC_Receive_FS+0x24>)
 800a268:	f7fe fc12 	bl	8008a90 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a26c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3708      	adds	r7, #8
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	200004c8 	.word	0x200004c8

0800a27c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a28c:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c4 <CDC_Transmit_FS+0x48>)
 800a28e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a292:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e00b      	b.n	800a2ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a2a2:	887b      	ldrh	r3, [r7, #2]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	6879      	ldr	r1, [r7, #4]
 800a2a8:	4806      	ldr	r0, [pc, #24]	@ (800a2c4 <CDC_Transmit_FS+0x48>)
 800a2aa:	f7fe fb71 	bl	8008990 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a2ae:	4805      	ldr	r0, [pc, #20]	@ (800a2c4 <CDC_Transmit_FS+0x48>)
 800a2b0:	f7fe fbae 	bl	8008a10 <USBD_CDC_TransmitPacket>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	200004c8 	.word	0x200004c8

0800a2c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a2da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	371c      	adds	r7, #28
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
	...

0800a2ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	6039      	str	r1, [r7, #0]
 800a2f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	2212      	movs	r2, #18
 800a2fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a2fe:	4b03      	ldr	r3, [pc, #12]	@ (800a30c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a300:	4618      	mov	r0, r3
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	20000104 	.word	0x20000104

0800a310 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	4603      	mov	r3, r0
 800a318:	6039      	str	r1, [r7, #0]
 800a31a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	2204      	movs	r2, #4
 800a320:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a322:	4b03      	ldr	r3, [pc, #12]	@ (800a330 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a324:	4618      	mov	r0, r3
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr
 800a330:	20000118 	.word	0x20000118

0800a334 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	6039      	str	r1, [r7, #0]
 800a33e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a340:	79fb      	ldrb	r3, [r7, #7]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d105      	bne.n	800a352 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	4907      	ldr	r1, [pc, #28]	@ (800a368 <USBD_FS_ProductStrDescriptor+0x34>)
 800a34a:	4808      	ldr	r0, [pc, #32]	@ (800a36c <USBD_FS_ProductStrDescriptor+0x38>)
 800a34c:	f7ff fdec 	bl	8009f28 <USBD_GetString>
 800a350:	e004      	b.n	800a35c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	4904      	ldr	r1, [pc, #16]	@ (800a368 <USBD_FS_ProductStrDescriptor+0x34>)
 800a356:	4805      	ldr	r0, [pc, #20]	@ (800a36c <USBD_FS_ProductStrDescriptor+0x38>)
 800a358:	f7ff fde6 	bl	8009f28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a35c:	4b02      	ldr	r3, [pc, #8]	@ (800a368 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	200017a4 	.word	0x200017a4
 800a36c:	0800eb40 	.word	0x0800eb40

0800a370 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	4603      	mov	r3, r0
 800a378:	6039      	str	r1, [r7, #0]
 800a37a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	4904      	ldr	r1, [pc, #16]	@ (800a390 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a380:	4804      	ldr	r0, [pc, #16]	@ (800a394 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a382:	f7ff fdd1 	bl	8009f28 <USBD_GetString>
  return USBD_StrDesc;
 800a386:	4b02      	ldr	r3, [pc, #8]	@ (800a390 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	200017a4 	.word	0x200017a4
 800a394:	0800eb58 	.word	0x0800eb58

0800a398 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	6039      	str	r1, [r7, #0]
 800a3a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	221a      	movs	r2, #26
 800a3a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a3aa:	f000 f843 	bl	800a434 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a3ae:	4b02      	ldr	r3, [pc, #8]	@ (800a3b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	2000011c 	.word	0x2000011c

0800a3bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	6039      	str	r1, [r7, #0]
 800a3c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d105      	bne.n	800a3da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	4907      	ldr	r1, [pc, #28]	@ (800a3f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3d2:	4808      	ldr	r0, [pc, #32]	@ (800a3f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3d4:	f7ff fda8 	bl	8009f28 <USBD_GetString>
 800a3d8:	e004      	b.n	800a3e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	4904      	ldr	r1, [pc, #16]	@ (800a3f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3de:	4805      	ldr	r0, [pc, #20]	@ (800a3f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3e0:	f7ff fda2 	bl	8009f28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3e4:	4b02      	ldr	r3, [pc, #8]	@ (800a3f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	200017a4 	.word	0x200017a4
 800a3f4:	0800eb6c 	.word	0x0800eb6c

0800a3f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	4603      	mov	r3, r0
 800a400:	6039      	str	r1, [r7, #0]
 800a402:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d105      	bne.n	800a416 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	4907      	ldr	r1, [pc, #28]	@ (800a42c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a40e:	4808      	ldr	r0, [pc, #32]	@ (800a430 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a410:	f7ff fd8a 	bl	8009f28 <USBD_GetString>
 800a414:	e004      	b.n	800a420 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	4904      	ldr	r1, [pc, #16]	@ (800a42c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a41a:	4805      	ldr	r0, [pc, #20]	@ (800a430 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a41c:	f7ff fd84 	bl	8009f28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a420:	4b02      	ldr	r3, [pc, #8]	@ (800a42c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	200017a4 	.word	0x200017a4
 800a430:	0800eb78 	.word	0x0800eb78

0800a434 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a43a:	4b0f      	ldr	r3, [pc, #60]	@ (800a478 <Get_SerialNum+0x44>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a440:	4b0e      	ldr	r3, [pc, #56]	@ (800a47c <Get_SerialNum+0x48>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a446:	4b0e      	ldr	r3, [pc, #56]	@ (800a480 <Get_SerialNum+0x4c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4413      	add	r3, r2
 800a452:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d009      	beq.n	800a46e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a45a:	2208      	movs	r2, #8
 800a45c:	4909      	ldr	r1, [pc, #36]	@ (800a484 <Get_SerialNum+0x50>)
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f000 f814 	bl	800a48c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a464:	2204      	movs	r2, #4
 800a466:	4908      	ldr	r1, [pc, #32]	@ (800a488 <Get_SerialNum+0x54>)
 800a468:	68b8      	ldr	r0, [r7, #8]
 800a46a:	f000 f80f 	bl	800a48c <IntToUnicode>
  }
}
 800a46e:	bf00      	nop
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	1fff7a10 	.word	0x1fff7a10
 800a47c:	1fff7a14 	.word	0x1fff7a14
 800a480:	1fff7a18 	.word	0x1fff7a18
 800a484:	2000011e 	.word	0x2000011e
 800a488:	2000012e 	.word	0x2000012e

0800a48c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b087      	sub	sp, #28
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	4613      	mov	r3, r2
 800a498:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a49e:	2300      	movs	r3, #0
 800a4a0:	75fb      	strb	r3, [r7, #23]
 800a4a2:	e027      	b.n	800a4f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	0f1b      	lsrs	r3, r3, #28
 800a4a8:	2b09      	cmp	r3, #9
 800a4aa:	d80b      	bhi.n	800a4c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	0f1b      	lsrs	r3, r3, #28
 800a4b0:	b2da      	uxtb	r2, r3
 800a4b2:	7dfb      	ldrb	r3, [r7, #23]
 800a4b4:	005b      	lsls	r3, r3, #1
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	440b      	add	r3, r1
 800a4bc:	3230      	adds	r2, #48	@ 0x30
 800a4be:	b2d2      	uxtb	r2, r2
 800a4c0:	701a      	strb	r2, [r3, #0]
 800a4c2:	e00a      	b.n	800a4da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	0f1b      	lsrs	r3, r3, #28
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	7dfb      	ldrb	r3, [r7, #23]
 800a4cc:	005b      	lsls	r3, r3, #1
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	440b      	add	r3, r1
 800a4d4:	3237      	adds	r2, #55	@ 0x37
 800a4d6:	b2d2      	uxtb	r2, r2
 800a4d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	011b      	lsls	r3, r3, #4
 800a4de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4e0:	7dfb      	ldrb	r3, [r7, #23]
 800a4e2:	005b      	lsls	r3, r3, #1
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4ee:	7dfb      	ldrb	r3, [r7, #23]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	75fb      	strb	r3, [r7, #23]
 800a4f4:	7dfa      	ldrb	r2, [r7, #23]
 800a4f6:	79fb      	ldrb	r3, [r7, #7]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d3d3      	bcc.n	800a4a4 <IntToUnicode+0x18>
  }
}
 800a4fc:	bf00      	nop
 800a4fe:	bf00      	nop
 800a500:	371c      	adds	r7, #28
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
	...

0800a50c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08a      	sub	sp, #40	@ 0x28
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a514:	f107 0314 	add.w	r3, r7, #20
 800a518:	2200      	movs	r2, #0
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	605a      	str	r2, [r3, #4]
 800a51e:	609a      	str	r2, [r3, #8]
 800a520:	60da      	str	r2, [r3, #12]
 800a522:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a52c:	d13a      	bne.n	800a5a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a52e:	2300      	movs	r3, #0
 800a530:	613b      	str	r3, [r7, #16]
 800a532:	4b1e      	ldr	r3, [pc, #120]	@ (800a5ac <HAL_PCD_MspInit+0xa0>)
 800a534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a536:	4a1d      	ldr	r2, [pc, #116]	@ (800a5ac <HAL_PCD_MspInit+0xa0>)
 800a538:	f043 0301 	orr.w	r3, r3, #1
 800a53c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a53e:	4b1b      	ldr	r3, [pc, #108]	@ (800a5ac <HAL_PCD_MspInit+0xa0>)
 800a540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	613b      	str	r3, [r7, #16]
 800a548:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a54a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a54e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a550:	2302      	movs	r3, #2
 800a552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a554:	2300      	movs	r3, #0
 800a556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a558:	2303      	movs	r3, #3
 800a55a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a55c:	230a      	movs	r3, #10
 800a55e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a560:	f107 0314 	add.w	r3, r7, #20
 800a564:	4619      	mov	r1, r3
 800a566:	4812      	ldr	r0, [pc, #72]	@ (800a5b0 <HAL_PCD_MspInit+0xa4>)
 800a568:	f7f8 ff46 	bl	80033f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a56c:	4b0f      	ldr	r3, [pc, #60]	@ (800a5ac <HAL_PCD_MspInit+0xa0>)
 800a56e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a570:	4a0e      	ldr	r2, [pc, #56]	@ (800a5ac <HAL_PCD_MspInit+0xa0>)
 800a572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a576:	6353      	str	r3, [r2, #52]	@ 0x34
 800a578:	2300      	movs	r3, #0
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	4b0b      	ldr	r3, [pc, #44]	@ (800a5ac <HAL_PCD_MspInit+0xa0>)
 800a57e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a580:	4a0a      	ldr	r2, [pc, #40]	@ (800a5ac <HAL_PCD_MspInit+0xa0>)
 800a582:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a586:	6453      	str	r3, [r2, #68]	@ 0x44
 800a588:	4b08      	ldr	r3, [pc, #32]	@ (800a5ac <HAL_PCD_MspInit+0xa0>)
 800a58a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a58c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a590:	60fb      	str	r3, [r7, #12]
 800a592:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a594:	2200      	movs	r2, #0
 800a596:	2100      	movs	r1, #0
 800a598:	2043      	movs	r0, #67	@ 0x43
 800a59a:	f7f8 fb58 	bl	8002c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a59e:	2043      	movs	r0, #67	@ 0x43
 800a5a0:	f7f8 fb71 	bl	8002c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a5a4:	bf00      	nop
 800a5a6:	3728      	adds	r7, #40	@ 0x28
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	40023800 	.word	0x40023800
 800a5b0:	40020000 	.word	0x40020000

0800a5b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4610      	mov	r0, r2
 800a5cc:	f7fe fb49 	bl	8008c62 <USBD_LL_SetupStage>
}
 800a5d0:	bf00      	nop
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a5ea:	78fa      	ldrb	r2, [r7, #3]
 800a5ec:	6879      	ldr	r1, [r7, #4]
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	4413      	add	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	440b      	add	r3, r1
 800a5f8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	78fb      	ldrb	r3, [r7, #3]
 800a600:	4619      	mov	r1, r3
 800a602:	f7fe fb83 	bl	8008d0c <USBD_LL_DataOutStage>
}
 800a606:	bf00      	nop
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b082      	sub	sp, #8
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	460b      	mov	r3, r1
 800a618:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a620:	78fa      	ldrb	r2, [r7, #3]
 800a622:	6879      	ldr	r1, [r7, #4]
 800a624:	4613      	mov	r3, r2
 800a626:	00db      	lsls	r3, r3, #3
 800a628:	4413      	add	r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	440b      	add	r3, r1
 800a62e:	3320      	adds	r3, #32
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	78fb      	ldrb	r3, [r7, #3]
 800a634:	4619      	mov	r1, r3
 800a636:	f7fe fc1c 	bl	8008e72 <USBD_LL_DataInStage>
}
 800a63a:	bf00      	nop
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b082      	sub	sp, #8
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a650:	4618      	mov	r0, r3
 800a652:	f7fe fd56 	bl	8009102 <USBD_LL_SOF>
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b084      	sub	sp, #16
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a666:	2301      	movs	r3, #1
 800a668:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	79db      	ldrb	r3, [r3, #7]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d102      	bne.n	800a678 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a672:	2300      	movs	r3, #0
 800a674:	73fb      	strb	r3, [r7, #15]
 800a676:	e008      	b.n	800a68a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	79db      	ldrb	r3, [r3, #7]
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d102      	bne.n	800a686 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a680:	2301      	movs	r3, #1
 800a682:	73fb      	strb	r3, [r7, #15]
 800a684:	e001      	b.n	800a68a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a686:	f7f7 fdd3 	bl	8002230 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a690:	7bfa      	ldrb	r2, [r7, #15]
 800a692:	4611      	mov	r1, r2
 800a694:	4618      	mov	r0, r3
 800a696:	f7fe fcf0 	bl	800907a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fe fc98 	bl	8008fd6 <USBD_LL_Reset>
}
 800a6a6:	bf00      	nop
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
	...

0800a6b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fe fceb 	bl	800909a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	6812      	ldr	r2, [r2, #0]
 800a6d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a6d6:	f043 0301 	orr.w	r3, r3, #1
 800a6da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	7adb      	ldrb	r3, [r3, #11]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d005      	beq.n	800a6f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6e4:	4b04      	ldr	r3, [pc, #16]	@ (800a6f8 <HAL_PCD_SuspendCallback+0x48>)
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	4a03      	ldr	r2, [pc, #12]	@ (800a6f8 <HAL_PCD_SuspendCallback+0x48>)
 800a6ea:	f043 0306 	orr.w	r3, r3, #6
 800a6ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	e000ed00 	.word	0xe000ed00

0800a6fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fe fce1 	bl	80090d2 <USBD_LL_Resume>
}
 800a710:	bf00      	nop
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	460b      	mov	r3, r1
 800a722:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a72a:	78fa      	ldrb	r2, [r7, #3]
 800a72c:	4611      	mov	r1, r2
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fe fd39 	bl	80091a6 <USBD_LL_IsoOUTIncomplete>
}
 800a734:	bf00      	nop
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a74e:	78fa      	ldrb	r2, [r7, #3]
 800a750:	4611      	mov	r1, r2
 800a752:	4618      	mov	r0, r3
 800a754:	f7fe fcf5 	bl	8009142 <USBD_LL_IsoINIncomplete>
}
 800a758:	bf00      	nop
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe fd4b 	bl	800920a <USBD_LL_DevConnected>
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fe fd48 	bl	8009220 <USBD_LL_DevDisconnected>
}
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d13c      	bne.n	800a822 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a7a8:	4a20      	ldr	r2, [pc, #128]	@ (800a82c <USBD_LL_Init+0x94>)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a1e      	ldr	r2, [pc, #120]	@ (800a82c <USBD_LL_Init+0x94>)
 800a7b4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a7b8:	4b1c      	ldr	r3, [pc, #112]	@ (800a82c <USBD_LL_Init+0x94>)
 800a7ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a7be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a7c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a82c <USBD_LL_Init+0x94>)
 800a7c2:	2204      	movs	r2, #4
 800a7c4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a7c6:	4b19      	ldr	r3, [pc, #100]	@ (800a82c <USBD_LL_Init+0x94>)
 800a7c8:	2202      	movs	r2, #2
 800a7ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a7cc:	4b17      	ldr	r3, [pc, #92]	@ (800a82c <USBD_LL_Init+0x94>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a7d2:	4b16      	ldr	r3, [pc, #88]	@ (800a82c <USBD_LL_Init+0x94>)
 800a7d4:	2202      	movs	r2, #2
 800a7d6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a7d8:	4b14      	ldr	r3, [pc, #80]	@ (800a82c <USBD_LL_Init+0x94>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a7de:	4b13      	ldr	r3, [pc, #76]	@ (800a82c <USBD_LL_Init+0x94>)
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a7e4:	4b11      	ldr	r3, [pc, #68]	@ (800a82c <USBD_LL_Init+0x94>)
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a7ea:	4b10      	ldr	r3, [pc, #64]	@ (800a82c <USBD_LL_Init+0x94>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a7f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a82c <USBD_LL_Init+0x94>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a7f6:	480d      	ldr	r0, [pc, #52]	@ (800a82c <USBD_LL_Init+0x94>)
 800a7f8:	f7fa fa92 	bl	8004d20 <HAL_PCD_Init>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a802:	f7f7 fd15 	bl	8002230 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a806:	2180      	movs	r1, #128	@ 0x80
 800a808:	4808      	ldr	r0, [pc, #32]	@ (800a82c <USBD_LL_Init+0x94>)
 800a80a:	f7fb fcbe 	bl	800618a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a80e:	2240      	movs	r2, #64	@ 0x40
 800a810:	2100      	movs	r1, #0
 800a812:	4806      	ldr	r0, [pc, #24]	@ (800a82c <USBD_LL_Init+0x94>)
 800a814:	f7fb fc72 	bl	80060fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a818:	2280      	movs	r2, #128	@ 0x80
 800a81a:	2101      	movs	r1, #1
 800a81c:	4803      	ldr	r0, [pc, #12]	@ (800a82c <USBD_LL_Init+0x94>)
 800a81e:	f7fb fc6d 	bl	80060fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	200019a4 	.word	0x200019a4

0800a830 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a846:	4618      	mov	r0, r3
 800a848:	f7fa fb79 	bl	8004f3e <HAL_PCD_Start>
 800a84c:	4603      	mov	r3, r0
 800a84e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a850:	7bfb      	ldrb	r3, [r7, #15]
 800a852:	4618      	mov	r0, r3
 800a854:	f000 f942 	bl	800aadc <USBD_Get_USB_Status>
 800a858:	4603      	mov	r3, r0
 800a85a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b084      	sub	sp, #16
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	4608      	mov	r0, r1
 800a870:	4611      	mov	r1, r2
 800a872:	461a      	mov	r2, r3
 800a874:	4603      	mov	r3, r0
 800a876:	70fb      	strb	r3, [r7, #3]
 800a878:	460b      	mov	r3, r1
 800a87a:	70bb      	strb	r3, [r7, #2]
 800a87c:	4613      	mov	r3, r2
 800a87e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a88e:	78bb      	ldrb	r3, [r7, #2]
 800a890:	883a      	ldrh	r2, [r7, #0]
 800a892:	78f9      	ldrb	r1, [r7, #3]
 800a894:	f7fb f84d 	bl	8005932 <HAL_PCD_EP_Open>
 800a898:	4603      	mov	r3, r0
 800a89a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 f91c 	bl	800aadc <USBD_Get_USB_Status>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8cc:	78fa      	ldrb	r2, [r7, #3]
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7fb f898 	bl	8005a06 <HAL_PCD_EP_Close>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8da:	7bfb      	ldrb	r3, [r7, #15]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 f8fd 	bl	800aadc <USBD_Get_USB_Status>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a90a:	78fa      	ldrb	r2, [r7, #3]
 800a90c:	4611      	mov	r1, r2
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fb f950 	bl	8005bb4 <HAL_PCD_EP_SetStall>
 800a914:	4603      	mov	r3, r0
 800a916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a918:	7bfb      	ldrb	r3, [r7, #15]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 f8de 	bl	800aadc <USBD_Get_USB_Status>
 800a920:	4603      	mov	r3, r0
 800a922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a924:	7bbb      	ldrb	r3, [r7, #14]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b084      	sub	sp, #16
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	460b      	mov	r3, r1
 800a938:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a948:	78fa      	ldrb	r2, [r7, #3]
 800a94a:	4611      	mov	r1, r2
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7fb f994 	bl	8005c7a <HAL_PCD_EP_ClrStall>
 800a952:	4603      	mov	r3, r0
 800a954:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a956:	7bfb      	ldrb	r3, [r7, #15]
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 f8bf 	bl	800aadc <USBD_Get_USB_Status>
 800a95e:	4603      	mov	r3, r0
 800a960:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a962:	7bbb      	ldrb	r3, [r7, #14]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	460b      	mov	r3, r1
 800a976:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a97e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a984:	2b00      	cmp	r3, #0
 800a986:	da0b      	bge.n	800a9a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a988:	78fb      	ldrb	r3, [r7, #3]
 800a98a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a98e:	68f9      	ldr	r1, [r7, #12]
 800a990:	4613      	mov	r3, r2
 800a992:	00db      	lsls	r3, r3, #3
 800a994:	4413      	add	r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	440b      	add	r3, r1
 800a99a:	3316      	adds	r3, #22
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	e00b      	b.n	800a9b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a9a0:	78fb      	ldrb	r3, [r7, #3]
 800a9a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9a6:	68f9      	ldr	r1, [r7, #12]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	00db      	lsls	r3, r3, #3
 800a9ac:	4413      	add	r3, r2
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	440b      	add	r3, r1
 800a9b2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a9b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9de:	78fa      	ldrb	r2, [r7, #3]
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fa ff81 	bl	80058ea <HAL_PCD_SetAddress>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 f874 	bl	800aadc <USBD_Get_USB_Status>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b086      	sub	sp, #24
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	60f8      	str	r0, [r7, #12]
 800aa0a:	607a      	str	r2, [r7, #4]
 800aa0c:	603b      	str	r3, [r7, #0]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aa20:	7af9      	ldrb	r1, [r7, #11]
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	f7fb f88b 	bl	8005b40 <HAL_PCD_EP_Transmit>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f000 f853 	bl	800aadc <USBD_Get_USB_Status>
 800aa36:	4603      	mov	r3, r0
 800aa38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa3a:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3718      	adds	r7, #24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	607a      	str	r2, [r7, #4]
 800aa4e:	603b      	str	r3, [r7, #0]
 800aa50:	460b      	mov	r3, r1
 800aa52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa54:	2300      	movs	r3, #0
 800aa56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aa62:	7af9      	ldrb	r1, [r7, #11]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	f7fb f817 	bl	8005a9a <HAL_PCD_EP_Receive>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa70:	7dfb      	ldrb	r3, [r7, #23]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f000 f832 	bl	800aadc <USBD_Get_USB_Status>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa7c:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3718      	adds	r7, #24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b082      	sub	sp, #8
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	460b      	mov	r3, r1
 800aa90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa98:	78fa      	ldrb	r2, [r7, #3]
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fb f837 	bl	8005b10 <HAL_PCD_EP_GetRxCount>
 800aaa2:	4603      	mov	r3, r0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3708      	adds	r7, #8
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aab4:	4b03      	ldr	r3, [pc, #12]	@ (800aac4 <USBD_static_malloc+0x18>)
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	370c      	adds	r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	20001e88 	.word	0x20001e88

0800aac8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]

}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aaea:	79fb      	ldrb	r3, [r7, #7]
 800aaec:	2b03      	cmp	r3, #3
 800aaee:	d817      	bhi.n	800ab20 <USBD_Get_USB_Status+0x44>
 800aaf0:	a201      	add	r2, pc, #4	@ (adr r2, 800aaf8 <USBD_Get_USB_Status+0x1c>)
 800aaf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf6:	bf00      	nop
 800aaf8:	0800ab09 	.word	0x0800ab09
 800aafc:	0800ab0f 	.word	0x0800ab0f
 800ab00:	0800ab15 	.word	0x0800ab15
 800ab04:	0800ab1b 	.word	0x0800ab1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab0c:	e00b      	b.n	800ab26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	73fb      	strb	r3, [r7, #15]
    break;
 800ab12:	e008      	b.n	800ab26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab14:	2301      	movs	r3, #1
 800ab16:	73fb      	strb	r3, [r7, #15]
    break;
 800ab18:	e005      	b.n	800ab26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab1e:	e002      	b.n	800ab26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab20:	2303      	movs	r3, #3
 800ab22:	73fb      	strb	r3, [r7, #15]
    break;
 800ab24:	bf00      	nop
  }
  return usb_status;
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <__cvt>:
 800ab34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab38:	ec57 6b10 	vmov	r6, r7, d0
 800ab3c:	2f00      	cmp	r7, #0
 800ab3e:	460c      	mov	r4, r1
 800ab40:	4619      	mov	r1, r3
 800ab42:	463b      	mov	r3, r7
 800ab44:	bfbb      	ittet	lt
 800ab46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ab4a:	461f      	movlt	r7, r3
 800ab4c:	2300      	movge	r3, #0
 800ab4e:	232d      	movlt	r3, #45	@ 0x2d
 800ab50:	700b      	strb	r3, [r1, #0]
 800ab52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ab58:	4691      	mov	r9, r2
 800ab5a:	f023 0820 	bic.w	r8, r3, #32
 800ab5e:	bfbc      	itt	lt
 800ab60:	4632      	movlt	r2, r6
 800ab62:	4616      	movlt	r6, r2
 800ab64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab68:	d005      	beq.n	800ab76 <__cvt+0x42>
 800ab6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ab6e:	d100      	bne.n	800ab72 <__cvt+0x3e>
 800ab70:	3401      	adds	r4, #1
 800ab72:	2102      	movs	r1, #2
 800ab74:	e000      	b.n	800ab78 <__cvt+0x44>
 800ab76:	2103      	movs	r1, #3
 800ab78:	ab03      	add	r3, sp, #12
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	ab02      	add	r3, sp, #8
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	ec47 6b10 	vmov	d0, r6, r7
 800ab84:	4653      	mov	r3, sl
 800ab86:	4622      	mov	r2, r4
 800ab88:	f000 fe7e 	bl	800b888 <_dtoa_r>
 800ab8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ab90:	4605      	mov	r5, r0
 800ab92:	d119      	bne.n	800abc8 <__cvt+0x94>
 800ab94:	f019 0f01 	tst.w	r9, #1
 800ab98:	d00e      	beq.n	800abb8 <__cvt+0x84>
 800ab9a:	eb00 0904 	add.w	r9, r0, r4
 800ab9e:	2200      	movs	r2, #0
 800aba0:	2300      	movs	r3, #0
 800aba2:	4630      	mov	r0, r6
 800aba4:	4639      	mov	r1, r7
 800aba6:	f7f5 ff8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800abaa:	b108      	cbz	r0, 800abb0 <__cvt+0x7c>
 800abac:	f8cd 900c 	str.w	r9, [sp, #12]
 800abb0:	2230      	movs	r2, #48	@ 0x30
 800abb2:	9b03      	ldr	r3, [sp, #12]
 800abb4:	454b      	cmp	r3, r9
 800abb6:	d31e      	bcc.n	800abf6 <__cvt+0xc2>
 800abb8:	9b03      	ldr	r3, [sp, #12]
 800abba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abbc:	1b5b      	subs	r3, r3, r5
 800abbe:	4628      	mov	r0, r5
 800abc0:	6013      	str	r3, [r2, #0]
 800abc2:	b004      	add	sp, #16
 800abc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800abcc:	eb00 0904 	add.w	r9, r0, r4
 800abd0:	d1e5      	bne.n	800ab9e <__cvt+0x6a>
 800abd2:	7803      	ldrb	r3, [r0, #0]
 800abd4:	2b30      	cmp	r3, #48	@ 0x30
 800abd6:	d10a      	bne.n	800abee <__cvt+0xba>
 800abd8:	2200      	movs	r2, #0
 800abda:	2300      	movs	r3, #0
 800abdc:	4630      	mov	r0, r6
 800abde:	4639      	mov	r1, r7
 800abe0:	f7f5 ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 800abe4:	b918      	cbnz	r0, 800abee <__cvt+0xba>
 800abe6:	f1c4 0401 	rsb	r4, r4, #1
 800abea:	f8ca 4000 	str.w	r4, [sl]
 800abee:	f8da 3000 	ldr.w	r3, [sl]
 800abf2:	4499      	add	r9, r3
 800abf4:	e7d3      	b.n	800ab9e <__cvt+0x6a>
 800abf6:	1c59      	adds	r1, r3, #1
 800abf8:	9103      	str	r1, [sp, #12]
 800abfa:	701a      	strb	r2, [r3, #0]
 800abfc:	e7d9      	b.n	800abb2 <__cvt+0x7e>

0800abfe <__exponent>:
 800abfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac00:	2900      	cmp	r1, #0
 800ac02:	bfba      	itte	lt
 800ac04:	4249      	neglt	r1, r1
 800ac06:	232d      	movlt	r3, #45	@ 0x2d
 800ac08:	232b      	movge	r3, #43	@ 0x2b
 800ac0a:	2909      	cmp	r1, #9
 800ac0c:	7002      	strb	r2, [r0, #0]
 800ac0e:	7043      	strb	r3, [r0, #1]
 800ac10:	dd29      	ble.n	800ac66 <__exponent+0x68>
 800ac12:	f10d 0307 	add.w	r3, sp, #7
 800ac16:	461d      	mov	r5, r3
 800ac18:	270a      	movs	r7, #10
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ac20:	fb07 1416 	mls	r4, r7, r6, r1
 800ac24:	3430      	adds	r4, #48	@ 0x30
 800ac26:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	2c63      	cmp	r4, #99	@ 0x63
 800ac2e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac32:	4631      	mov	r1, r6
 800ac34:	dcf1      	bgt.n	800ac1a <__exponent+0x1c>
 800ac36:	3130      	adds	r1, #48	@ 0x30
 800ac38:	1e94      	subs	r4, r2, #2
 800ac3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ac3e:	1c41      	adds	r1, r0, #1
 800ac40:	4623      	mov	r3, r4
 800ac42:	42ab      	cmp	r3, r5
 800ac44:	d30a      	bcc.n	800ac5c <__exponent+0x5e>
 800ac46:	f10d 0309 	add.w	r3, sp, #9
 800ac4a:	1a9b      	subs	r3, r3, r2
 800ac4c:	42ac      	cmp	r4, r5
 800ac4e:	bf88      	it	hi
 800ac50:	2300      	movhi	r3, #0
 800ac52:	3302      	adds	r3, #2
 800ac54:	4403      	add	r3, r0
 800ac56:	1a18      	subs	r0, r3, r0
 800ac58:	b003      	add	sp, #12
 800ac5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ac60:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ac64:	e7ed      	b.n	800ac42 <__exponent+0x44>
 800ac66:	2330      	movs	r3, #48	@ 0x30
 800ac68:	3130      	adds	r1, #48	@ 0x30
 800ac6a:	7083      	strb	r3, [r0, #2]
 800ac6c:	70c1      	strb	r1, [r0, #3]
 800ac6e:	1d03      	adds	r3, r0, #4
 800ac70:	e7f1      	b.n	800ac56 <__exponent+0x58>
	...

0800ac74 <_printf_float>:
 800ac74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac78:	b08d      	sub	sp, #52	@ 0x34
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac80:	4616      	mov	r6, r2
 800ac82:	461f      	mov	r7, r3
 800ac84:	4605      	mov	r5, r0
 800ac86:	f000 fcef 	bl	800b668 <_localeconv_r>
 800ac8a:	6803      	ldr	r3, [r0, #0]
 800ac8c:	9304      	str	r3, [sp, #16]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7f5 faee 	bl	8000270 <strlen>
 800ac94:	2300      	movs	r3, #0
 800ac96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac98:	f8d8 3000 	ldr.w	r3, [r8]
 800ac9c:	9005      	str	r0, [sp, #20]
 800ac9e:	3307      	adds	r3, #7
 800aca0:	f023 0307 	bic.w	r3, r3, #7
 800aca4:	f103 0208 	add.w	r2, r3, #8
 800aca8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800acac:	f8d4 b000 	ldr.w	fp, [r4]
 800acb0:	f8c8 2000 	str.w	r2, [r8]
 800acb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800acbc:	9307      	str	r3, [sp, #28]
 800acbe:	f8cd 8018 	str.w	r8, [sp, #24]
 800acc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800acc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acca:	4b9c      	ldr	r3, [pc, #624]	@ (800af3c <_printf_float+0x2c8>)
 800accc:	f04f 32ff 	mov.w	r2, #4294967295
 800acd0:	f7f5 ff2c 	bl	8000b2c <__aeabi_dcmpun>
 800acd4:	bb70      	cbnz	r0, 800ad34 <_printf_float+0xc0>
 800acd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acda:	4b98      	ldr	r3, [pc, #608]	@ (800af3c <_printf_float+0x2c8>)
 800acdc:	f04f 32ff 	mov.w	r2, #4294967295
 800ace0:	f7f5 ff06 	bl	8000af0 <__aeabi_dcmple>
 800ace4:	bb30      	cbnz	r0, 800ad34 <_printf_float+0xc0>
 800ace6:	2200      	movs	r2, #0
 800ace8:	2300      	movs	r3, #0
 800acea:	4640      	mov	r0, r8
 800acec:	4649      	mov	r1, r9
 800acee:	f7f5 fef5 	bl	8000adc <__aeabi_dcmplt>
 800acf2:	b110      	cbz	r0, 800acfa <_printf_float+0x86>
 800acf4:	232d      	movs	r3, #45	@ 0x2d
 800acf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acfa:	4a91      	ldr	r2, [pc, #580]	@ (800af40 <_printf_float+0x2cc>)
 800acfc:	4b91      	ldr	r3, [pc, #580]	@ (800af44 <_printf_float+0x2d0>)
 800acfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ad02:	bf94      	ite	ls
 800ad04:	4690      	movls	r8, r2
 800ad06:	4698      	movhi	r8, r3
 800ad08:	2303      	movs	r3, #3
 800ad0a:	6123      	str	r3, [r4, #16]
 800ad0c:	f02b 0304 	bic.w	r3, fp, #4
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	f04f 0900 	mov.w	r9, #0
 800ad16:	9700      	str	r7, [sp, #0]
 800ad18:	4633      	mov	r3, r6
 800ad1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f000 f9d2 	bl	800b0c8 <_printf_common>
 800ad24:	3001      	adds	r0, #1
 800ad26:	f040 808d 	bne.w	800ae44 <_printf_float+0x1d0>
 800ad2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2e:	b00d      	add	sp, #52	@ 0x34
 800ad30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad34:	4642      	mov	r2, r8
 800ad36:	464b      	mov	r3, r9
 800ad38:	4640      	mov	r0, r8
 800ad3a:	4649      	mov	r1, r9
 800ad3c:	f7f5 fef6 	bl	8000b2c <__aeabi_dcmpun>
 800ad40:	b140      	cbz	r0, 800ad54 <_printf_float+0xe0>
 800ad42:	464b      	mov	r3, r9
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	bfbc      	itt	lt
 800ad48:	232d      	movlt	r3, #45	@ 0x2d
 800ad4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ad4e:	4a7e      	ldr	r2, [pc, #504]	@ (800af48 <_printf_float+0x2d4>)
 800ad50:	4b7e      	ldr	r3, [pc, #504]	@ (800af4c <_printf_float+0x2d8>)
 800ad52:	e7d4      	b.n	800acfe <_printf_float+0x8a>
 800ad54:	6863      	ldr	r3, [r4, #4]
 800ad56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ad5a:	9206      	str	r2, [sp, #24]
 800ad5c:	1c5a      	adds	r2, r3, #1
 800ad5e:	d13b      	bne.n	800add8 <_printf_float+0x164>
 800ad60:	2306      	movs	r3, #6
 800ad62:	6063      	str	r3, [r4, #4]
 800ad64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ad68:	2300      	movs	r3, #0
 800ad6a:	6022      	str	r2, [r4, #0]
 800ad6c:	9303      	str	r3, [sp, #12]
 800ad6e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad70:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ad74:	ab09      	add	r3, sp, #36	@ 0x24
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	6861      	ldr	r1, [r4, #4]
 800ad7a:	ec49 8b10 	vmov	d0, r8, r9
 800ad7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ad82:	4628      	mov	r0, r5
 800ad84:	f7ff fed6 	bl	800ab34 <__cvt>
 800ad88:	9b06      	ldr	r3, [sp, #24]
 800ad8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad8c:	2b47      	cmp	r3, #71	@ 0x47
 800ad8e:	4680      	mov	r8, r0
 800ad90:	d129      	bne.n	800ade6 <_printf_float+0x172>
 800ad92:	1cc8      	adds	r0, r1, #3
 800ad94:	db02      	blt.n	800ad9c <_printf_float+0x128>
 800ad96:	6863      	ldr	r3, [r4, #4]
 800ad98:	4299      	cmp	r1, r3
 800ad9a:	dd41      	ble.n	800ae20 <_printf_float+0x1ac>
 800ad9c:	f1aa 0a02 	sub.w	sl, sl, #2
 800ada0:	fa5f fa8a 	uxtb.w	sl, sl
 800ada4:	3901      	subs	r1, #1
 800ada6:	4652      	mov	r2, sl
 800ada8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800adac:	9109      	str	r1, [sp, #36]	@ 0x24
 800adae:	f7ff ff26 	bl	800abfe <__exponent>
 800adb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800adb4:	1813      	adds	r3, r2, r0
 800adb6:	2a01      	cmp	r2, #1
 800adb8:	4681      	mov	r9, r0
 800adba:	6123      	str	r3, [r4, #16]
 800adbc:	dc02      	bgt.n	800adc4 <_printf_float+0x150>
 800adbe:	6822      	ldr	r2, [r4, #0]
 800adc0:	07d2      	lsls	r2, r2, #31
 800adc2:	d501      	bpl.n	800adc8 <_printf_float+0x154>
 800adc4:	3301      	adds	r3, #1
 800adc6:	6123      	str	r3, [r4, #16]
 800adc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d0a2      	beq.n	800ad16 <_printf_float+0xa2>
 800add0:	232d      	movs	r3, #45	@ 0x2d
 800add2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800add6:	e79e      	b.n	800ad16 <_printf_float+0xa2>
 800add8:	9a06      	ldr	r2, [sp, #24]
 800adda:	2a47      	cmp	r2, #71	@ 0x47
 800addc:	d1c2      	bne.n	800ad64 <_printf_float+0xf0>
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1c0      	bne.n	800ad64 <_printf_float+0xf0>
 800ade2:	2301      	movs	r3, #1
 800ade4:	e7bd      	b.n	800ad62 <_printf_float+0xee>
 800ade6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800adea:	d9db      	bls.n	800ada4 <_printf_float+0x130>
 800adec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800adf0:	d118      	bne.n	800ae24 <_printf_float+0x1b0>
 800adf2:	2900      	cmp	r1, #0
 800adf4:	6863      	ldr	r3, [r4, #4]
 800adf6:	dd0b      	ble.n	800ae10 <_printf_float+0x19c>
 800adf8:	6121      	str	r1, [r4, #16]
 800adfa:	b913      	cbnz	r3, 800ae02 <_printf_float+0x18e>
 800adfc:	6822      	ldr	r2, [r4, #0]
 800adfe:	07d0      	lsls	r0, r2, #31
 800ae00:	d502      	bpl.n	800ae08 <_printf_float+0x194>
 800ae02:	3301      	adds	r3, #1
 800ae04:	440b      	add	r3, r1
 800ae06:	6123      	str	r3, [r4, #16]
 800ae08:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ae0a:	f04f 0900 	mov.w	r9, #0
 800ae0e:	e7db      	b.n	800adc8 <_printf_float+0x154>
 800ae10:	b913      	cbnz	r3, 800ae18 <_printf_float+0x1a4>
 800ae12:	6822      	ldr	r2, [r4, #0]
 800ae14:	07d2      	lsls	r2, r2, #31
 800ae16:	d501      	bpl.n	800ae1c <_printf_float+0x1a8>
 800ae18:	3302      	adds	r3, #2
 800ae1a:	e7f4      	b.n	800ae06 <_printf_float+0x192>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e7f2      	b.n	800ae06 <_printf_float+0x192>
 800ae20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ae24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae26:	4299      	cmp	r1, r3
 800ae28:	db05      	blt.n	800ae36 <_printf_float+0x1c2>
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	6121      	str	r1, [r4, #16]
 800ae2e:	07d8      	lsls	r0, r3, #31
 800ae30:	d5ea      	bpl.n	800ae08 <_printf_float+0x194>
 800ae32:	1c4b      	adds	r3, r1, #1
 800ae34:	e7e7      	b.n	800ae06 <_printf_float+0x192>
 800ae36:	2900      	cmp	r1, #0
 800ae38:	bfd4      	ite	le
 800ae3a:	f1c1 0202 	rsble	r2, r1, #2
 800ae3e:	2201      	movgt	r2, #1
 800ae40:	4413      	add	r3, r2
 800ae42:	e7e0      	b.n	800ae06 <_printf_float+0x192>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	055a      	lsls	r2, r3, #21
 800ae48:	d407      	bmi.n	800ae5a <_printf_float+0x1e6>
 800ae4a:	6923      	ldr	r3, [r4, #16]
 800ae4c:	4642      	mov	r2, r8
 800ae4e:	4631      	mov	r1, r6
 800ae50:	4628      	mov	r0, r5
 800ae52:	47b8      	blx	r7
 800ae54:	3001      	adds	r0, #1
 800ae56:	d12b      	bne.n	800aeb0 <_printf_float+0x23c>
 800ae58:	e767      	b.n	800ad2a <_printf_float+0xb6>
 800ae5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae5e:	f240 80dd 	bls.w	800b01c <_printf_float+0x3a8>
 800ae62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae66:	2200      	movs	r2, #0
 800ae68:	2300      	movs	r3, #0
 800ae6a:	f7f5 fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d033      	beq.n	800aeda <_printf_float+0x266>
 800ae72:	4a37      	ldr	r2, [pc, #220]	@ (800af50 <_printf_float+0x2dc>)
 800ae74:	2301      	movs	r3, #1
 800ae76:	4631      	mov	r1, r6
 800ae78:	4628      	mov	r0, r5
 800ae7a:	47b8      	blx	r7
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	f43f af54 	beq.w	800ad2a <_printf_float+0xb6>
 800ae82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ae86:	4543      	cmp	r3, r8
 800ae88:	db02      	blt.n	800ae90 <_printf_float+0x21c>
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	07d8      	lsls	r0, r3, #31
 800ae8e:	d50f      	bpl.n	800aeb0 <_printf_float+0x23c>
 800ae90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae94:	4631      	mov	r1, r6
 800ae96:	4628      	mov	r0, r5
 800ae98:	47b8      	blx	r7
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	f43f af45 	beq.w	800ad2a <_printf_float+0xb6>
 800aea0:	f04f 0900 	mov.w	r9, #0
 800aea4:	f108 38ff 	add.w	r8, r8, #4294967295
 800aea8:	f104 0a1a 	add.w	sl, r4, #26
 800aeac:	45c8      	cmp	r8, r9
 800aeae:	dc09      	bgt.n	800aec4 <_printf_float+0x250>
 800aeb0:	6823      	ldr	r3, [r4, #0]
 800aeb2:	079b      	lsls	r3, r3, #30
 800aeb4:	f100 8103 	bmi.w	800b0be <_printf_float+0x44a>
 800aeb8:	68e0      	ldr	r0, [r4, #12]
 800aeba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aebc:	4298      	cmp	r0, r3
 800aebe:	bfb8      	it	lt
 800aec0:	4618      	movlt	r0, r3
 800aec2:	e734      	b.n	800ad2e <_printf_float+0xba>
 800aec4:	2301      	movs	r3, #1
 800aec6:	4652      	mov	r2, sl
 800aec8:	4631      	mov	r1, r6
 800aeca:	4628      	mov	r0, r5
 800aecc:	47b8      	blx	r7
 800aece:	3001      	adds	r0, #1
 800aed0:	f43f af2b 	beq.w	800ad2a <_printf_float+0xb6>
 800aed4:	f109 0901 	add.w	r9, r9, #1
 800aed8:	e7e8      	b.n	800aeac <_printf_float+0x238>
 800aeda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aedc:	2b00      	cmp	r3, #0
 800aede:	dc39      	bgt.n	800af54 <_printf_float+0x2e0>
 800aee0:	4a1b      	ldr	r2, [pc, #108]	@ (800af50 <_printf_float+0x2dc>)
 800aee2:	2301      	movs	r3, #1
 800aee4:	4631      	mov	r1, r6
 800aee6:	4628      	mov	r0, r5
 800aee8:	47b8      	blx	r7
 800aeea:	3001      	adds	r0, #1
 800aeec:	f43f af1d 	beq.w	800ad2a <_printf_float+0xb6>
 800aef0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aef4:	ea59 0303 	orrs.w	r3, r9, r3
 800aef8:	d102      	bne.n	800af00 <_printf_float+0x28c>
 800aefa:	6823      	ldr	r3, [r4, #0]
 800aefc:	07d9      	lsls	r1, r3, #31
 800aefe:	d5d7      	bpl.n	800aeb0 <_printf_float+0x23c>
 800af00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af04:	4631      	mov	r1, r6
 800af06:	4628      	mov	r0, r5
 800af08:	47b8      	blx	r7
 800af0a:	3001      	adds	r0, #1
 800af0c:	f43f af0d 	beq.w	800ad2a <_printf_float+0xb6>
 800af10:	f04f 0a00 	mov.w	sl, #0
 800af14:	f104 0b1a 	add.w	fp, r4, #26
 800af18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af1a:	425b      	negs	r3, r3
 800af1c:	4553      	cmp	r3, sl
 800af1e:	dc01      	bgt.n	800af24 <_printf_float+0x2b0>
 800af20:	464b      	mov	r3, r9
 800af22:	e793      	b.n	800ae4c <_printf_float+0x1d8>
 800af24:	2301      	movs	r3, #1
 800af26:	465a      	mov	r2, fp
 800af28:	4631      	mov	r1, r6
 800af2a:	4628      	mov	r0, r5
 800af2c:	47b8      	blx	r7
 800af2e:	3001      	adds	r0, #1
 800af30:	f43f aefb 	beq.w	800ad2a <_printf_float+0xb6>
 800af34:	f10a 0a01 	add.w	sl, sl, #1
 800af38:	e7ee      	b.n	800af18 <_printf_float+0x2a4>
 800af3a:	bf00      	nop
 800af3c:	7fefffff 	.word	0x7fefffff
 800af40:	0800eba8 	.word	0x0800eba8
 800af44:	0800ebac 	.word	0x0800ebac
 800af48:	0800ebb0 	.word	0x0800ebb0
 800af4c:	0800ebb4 	.word	0x0800ebb4
 800af50:	0800ebb8 	.word	0x0800ebb8
 800af54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af5a:	4553      	cmp	r3, sl
 800af5c:	bfa8      	it	ge
 800af5e:	4653      	movge	r3, sl
 800af60:	2b00      	cmp	r3, #0
 800af62:	4699      	mov	r9, r3
 800af64:	dc36      	bgt.n	800afd4 <_printf_float+0x360>
 800af66:	f04f 0b00 	mov.w	fp, #0
 800af6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af6e:	f104 021a 	add.w	r2, r4, #26
 800af72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af74:	9306      	str	r3, [sp, #24]
 800af76:	eba3 0309 	sub.w	r3, r3, r9
 800af7a:	455b      	cmp	r3, fp
 800af7c:	dc31      	bgt.n	800afe2 <_printf_float+0x36e>
 800af7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af80:	459a      	cmp	sl, r3
 800af82:	dc3a      	bgt.n	800affa <_printf_float+0x386>
 800af84:	6823      	ldr	r3, [r4, #0]
 800af86:	07da      	lsls	r2, r3, #31
 800af88:	d437      	bmi.n	800affa <_printf_float+0x386>
 800af8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af8c:	ebaa 0903 	sub.w	r9, sl, r3
 800af90:	9b06      	ldr	r3, [sp, #24]
 800af92:	ebaa 0303 	sub.w	r3, sl, r3
 800af96:	4599      	cmp	r9, r3
 800af98:	bfa8      	it	ge
 800af9a:	4699      	movge	r9, r3
 800af9c:	f1b9 0f00 	cmp.w	r9, #0
 800afa0:	dc33      	bgt.n	800b00a <_printf_float+0x396>
 800afa2:	f04f 0800 	mov.w	r8, #0
 800afa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afaa:	f104 0b1a 	add.w	fp, r4, #26
 800afae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb0:	ebaa 0303 	sub.w	r3, sl, r3
 800afb4:	eba3 0309 	sub.w	r3, r3, r9
 800afb8:	4543      	cmp	r3, r8
 800afba:	f77f af79 	ble.w	800aeb0 <_printf_float+0x23c>
 800afbe:	2301      	movs	r3, #1
 800afc0:	465a      	mov	r2, fp
 800afc2:	4631      	mov	r1, r6
 800afc4:	4628      	mov	r0, r5
 800afc6:	47b8      	blx	r7
 800afc8:	3001      	adds	r0, #1
 800afca:	f43f aeae 	beq.w	800ad2a <_printf_float+0xb6>
 800afce:	f108 0801 	add.w	r8, r8, #1
 800afd2:	e7ec      	b.n	800afae <_printf_float+0x33a>
 800afd4:	4642      	mov	r2, r8
 800afd6:	4631      	mov	r1, r6
 800afd8:	4628      	mov	r0, r5
 800afda:	47b8      	blx	r7
 800afdc:	3001      	adds	r0, #1
 800afde:	d1c2      	bne.n	800af66 <_printf_float+0x2f2>
 800afe0:	e6a3      	b.n	800ad2a <_printf_float+0xb6>
 800afe2:	2301      	movs	r3, #1
 800afe4:	4631      	mov	r1, r6
 800afe6:	4628      	mov	r0, r5
 800afe8:	9206      	str	r2, [sp, #24]
 800afea:	47b8      	blx	r7
 800afec:	3001      	adds	r0, #1
 800afee:	f43f ae9c 	beq.w	800ad2a <_printf_float+0xb6>
 800aff2:	9a06      	ldr	r2, [sp, #24]
 800aff4:	f10b 0b01 	add.w	fp, fp, #1
 800aff8:	e7bb      	b.n	800af72 <_printf_float+0x2fe>
 800affa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800affe:	4631      	mov	r1, r6
 800b000:	4628      	mov	r0, r5
 800b002:	47b8      	blx	r7
 800b004:	3001      	adds	r0, #1
 800b006:	d1c0      	bne.n	800af8a <_printf_float+0x316>
 800b008:	e68f      	b.n	800ad2a <_printf_float+0xb6>
 800b00a:	9a06      	ldr	r2, [sp, #24]
 800b00c:	464b      	mov	r3, r9
 800b00e:	4442      	add	r2, r8
 800b010:	4631      	mov	r1, r6
 800b012:	4628      	mov	r0, r5
 800b014:	47b8      	blx	r7
 800b016:	3001      	adds	r0, #1
 800b018:	d1c3      	bne.n	800afa2 <_printf_float+0x32e>
 800b01a:	e686      	b.n	800ad2a <_printf_float+0xb6>
 800b01c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b020:	f1ba 0f01 	cmp.w	sl, #1
 800b024:	dc01      	bgt.n	800b02a <_printf_float+0x3b6>
 800b026:	07db      	lsls	r3, r3, #31
 800b028:	d536      	bpl.n	800b098 <_printf_float+0x424>
 800b02a:	2301      	movs	r3, #1
 800b02c:	4642      	mov	r2, r8
 800b02e:	4631      	mov	r1, r6
 800b030:	4628      	mov	r0, r5
 800b032:	47b8      	blx	r7
 800b034:	3001      	adds	r0, #1
 800b036:	f43f ae78 	beq.w	800ad2a <_printf_float+0xb6>
 800b03a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b03e:	4631      	mov	r1, r6
 800b040:	4628      	mov	r0, r5
 800b042:	47b8      	blx	r7
 800b044:	3001      	adds	r0, #1
 800b046:	f43f ae70 	beq.w	800ad2a <_printf_float+0xb6>
 800b04a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b04e:	2200      	movs	r2, #0
 800b050:	2300      	movs	r3, #0
 800b052:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b056:	f7f5 fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800b05a:	b9c0      	cbnz	r0, 800b08e <_printf_float+0x41a>
 800b05c:	4653      	mov	r3, sl
 800b05e:	f108 0201 	add.w	r2, r8, #1
 800b062:	4631      	mov	r1, r6
 800b064:	4628      	mov	r0, r5
 800b066:	47b8      	blx	r7
 800b068:	3001      	adds	r0, #1
 800b06a:	d10c      	bne.n	800b086 <_printf_float+0x412>
 800b06c:	e65d      	b.n	800ad2a <_printf_float+0xb6>
 800b06e:	2301      	movs	r3, #1
 800b070:	465a      	mov	r2, fp
 800b072:	4631      	mov	r1, r6
 800b074:	4628      	mov	r0, r5
 800b076:	47b8      	blx	r7
 800b078:	3001      	adds	r0, #1
 800b07a:	f43f ae56 	beq.w	800ad2a <_printf_float+0xb6>
 800b07e:	f108 0801 	add.w	r8, r8, #1
 800b082:	45d0      	cmp	r8, sl
 800b084:	dbf3      	blt.n	800b06e <_printf_float+0x3fa>
 800b086:	464b      	mov	r3, r9
 800b088:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b08c:	e6df      	b.n	800ae4e <_printf_float+0x1da>
 800b08e:	f04f 0800 	mov.w	r8, #0
 800b092:	f104 0b1a 	add.w	fp, r4, #26
 800b096:	e7f4      	b.n	800b082 <_printf_float+0x40e>
 800b098:	2301      	movs	r3, #1
 800b09a:	4642      	mov	r2, r8
 800b09c:	e7e1      	b.n	800b062 <_printf_float+0x3ee>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	464a      	mov	r2, r9
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	47b8      	blx	r7
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	f43f ae3e 	beq.w	800ad2a <_printf_float+0xb6>
 800b0ae:	f108 0801 	add.w	r8, r8, #1
 800b0b2:	68e3      	ldr	r3, [r4, #12]
 800b0b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b0b6:	1a5b      	subs	r3, r3, r1
 800b0b8:	4543      	cmp	r3, r8
 800b0ba:	dcf0      	bgt.n	800b09e <_printf_float+0x42a>
 800b0bc:	e6fc      	b.n	800aeb8 <_printf_float+0x244>
 800b0be:	f04f 0800 	mov.w	r8, #0
 800b0c2:	f104 0919 	add.w	r9, r4, #25
 800b0c6:	e7f4      	b.n	800b0b2 <_printf_float+0x43e>

0800b0c8 <_printf_common>:
 800b0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0cc:	4616      	mov	r6, r2
 800b0ce:	4698      	mov	r8, r3
 800b0d0:	688a      	ldr	r2, [r1, #8]
 800b0d2:	690b      	ldr	r3, [r1, #16]
 800b0d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	bfb8      	it	lt
 800b0dc:	4613      	movlt	r3, r2
 800b0de:	6033      	str	r3, [r6, #0]
 800b0e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b0e4:	4607      	mov	r7, r0
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	b10a      	cbz	r2, 800b0ee <_printf_common+0x26>
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	6033      	str	r3, [r6, #0]
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	0699      	lsls	r1, r3, #26
 800b0f2:	bf42      	ittt	mi
 800b0f4:	6833      	ldrmi	r3, [r6, #0]
 800b0f6:	3302      	addmi	r3, #2
 800b0f8:	6033      	strmi	r3, [r6, #0]
 800b0fa:	6825      	ldr	r5, [r4, #0]
 800b0fc:	f015 0506 	ands.w	r5, r5, #6
 800b100:	d106      	bne.n	800b110 <_printf_common+0x48>
 800b102:	f104 0a19 	add.w	sl, r4, #25
 800b106:	68e3      	ldr	r3, [r4, #12]
 800b108:	6832      	ldr	r2, [r6, #0]
 800b10a:	1a9b      	subs	r3, r3, r2
 800b10c:	42ab      	cmp	r3, r5
 800b10e:	dc26      	bgt.n	800b15e <_printf_common+0x96>
 800b110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b114:	6822      	ldr	r2, [r4, #0]
 800b116:	3b00      	subs	r3, #0
 800b118:	bf18      	it	ne
 800b11a:	2301      	movne	r3, #1
 800b11c:	0692      	lsls	r2, r2, #26
 800b11e:	d42b      	bmi.n	800b178 <_printf_common+0xb0>
 800b120:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b124:	4641      	mov	r1, r8
 800b126:	4638      	mov	r0, r7
 800b128:	47c8      	blx	r9
 800b12a:	3001      	adds	r0, #1
 800b12c:	d01e      	beq.n	800b16c <_printf_common+0xa4>
 800b12e:	6823      	ldr	r3, [r4, #0]
 800b130:	6922      	ldr	r2, [r4, #16]
 800b132:	f003 0306 	and.w	r3, r3, #6
 800b136:	2b04      	cmp	r3, #4
 800b138:	bf02      	ittt	eq
 800b13a:	68e5      	ldreq	r5, [r4, #12]
 800b13c:	6833      	ldreq	r3, [r6, #0]
 800b13e:	1aed      	subeq	r5, r5, r3
 800b140:	68a3      	ldr	r3, [r4, #8]
 800b142:	bf0c      	ite	eq
 800b144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b148:	2500      	movne	r5, #0
 800b14a:	4293      	cmp	r3, r2
 800b14c:	bfc4      	itt	gt
 800b14e:	1a9b      	subgt	r3, r3, r2
 800b150:	18ed      	addgt	r5, r5, r3
 800b152:	2600      	movs	r6, #0
 800b154:	341a      	adds	r4, #26
 800b156:	42b5      	cmp	r5, r6
 800b158:	d11a      	bne.n	800b190 <_printf_common+0xc8>
 800b15a:	2000      	movs	r0, #0
 800b15c:	e008      	b.n	800b170 <_printf_common+0xa8>
 800b15e:	2301      	movs	r3, #1
 800b160:	4652      	mov	r2, sl
 800b162:	4641      	mov	r1, r8
 800b164:	4638      	mov	r0, r7
 800b166:	47c8      	blx	r9
 800b168:	3001      	adds	r0, #1
 800b16a:	d103      	bne.n	800b174 <_printf_common+0xac>
 800b16c:	f04f 30ff 	mov.w	r0, #4294967295
 800b170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b174:	3501      	adds	r5, #1
 800b176:	e7c6      	b.n	800b106 <_printf_common+0x3e>
 800b178:	18e1      	adds	r1, r4, r3
 800b17a:	1c5a      	adds	r2, r3, #1
 800b17c:	2030      	movs	r0, #48	@ 0x30
 800b17e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b182:	4422      	add	r2, r4
 800b184:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b188:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b18c:	3302      	adds	r3, #2
 800b18e:	e7c7      	b.n	800b120 <_printf_common+0x58>
 800b190:	2301      	movs	r3, #1
 800b192:	4622      	mov	r2, r4
 800b194:	4641      	mov	r1, r8
 800b196:	4638      	mov	r0, r7
 800b198:	47c8      	blx	r9
 800b19a:	3001      	adds	r0, #1
 800b19c:	d0e6      	beq.n	800b16c <_printf_common+0xa4>
 800b19e:	3601      	adds	r6, #1
 800b1a0:	e7d9      	b.n	800b156 <_printf_common+0x8e>
	...

0800b1a4 <_printf_i>:
 800b1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1a8:	7e0f      	ldrb	r7, [r1, #24]
 800b1aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1ac:	2f78      	cmp	r7, #120	@ 0x78
 800b1ae:	4691      	mov	r9, r2
 800b1b0:	4680      	mov	r8, r0
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	469a      	mov	sl, r3
 800b1b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b1ba:	d807      	bhi.n	800b1cc <_printf_i+0x28>
 800b1bc:	2f62      	cmp	r7, #98	@ 0x62
 800b1be:	d80a      	bhi.n	800b1d6 <_printf_i+0x32>
 800b1c0:	2f00      	cmp	r7, #0
 800b1c2:	f000 80d2 	beq.w	800b36a <_printf_i+0x1c6>
 800b1c6:	2f58      	cmp	r7, #88	@ 0x58
 800b1c8:	f000 80b9 	beq.w	800b33e <_printf_i+0x19a>
 800b1cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b1d4:	e03a      	b.n	800b24c <_printf_i+0xa8>
 800b1d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b1da:	2b15      	cmp	r3, #21
 800b1dc:	d8f6      	bhi.n	800b1cc <_printf_i+0x28>
 800b1de:	a101      	add	r1, pc, #4	@ (adr r1, 800b1e4 <_printf_i+0x40>)
 800b1e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1e4:	0800b23d 	.word	0x0800b23d
 800b1e8:	0800b251 	.word	0x0800b251
 800b1ec:	0800b1cd 	.word	0x0800b1cd
 800b1f0:	0800b1cd 	.word	0x0800b1cd
 800b1f4:	0800b1cd 	.word	0x0800b1cd
 800b1f8:	0800b1cd 	.word	0x0800b1cd
 800b1fc:	0800b251 	.word	0x0800b251
 800b200:	0800b1cd 	.word	0x0800b1cd
 800b204:	0800b1cd 	.word	0x0800b1cd
 800b208:	0800b1cd 	.word	0x0800b1cd
 800b20c:	0800b1cd 	.word	0x0800b1cd
 800b210:	0800b351 	.word	0x0800b351
 800b214:	0800b27b 	.word	0x0800b27b
 800b218:	0800b30b 	.word	0x0800b30b
 800b21c:	0800b1cd 	.word	0x0800b1cd
 800b220:	0800b1cd 	.word	0x0800b1cd
 800b224:	0800b373 	.word	0x0800b373
 800b228:	0800b1cd 	.word	0x0800b1cd
 800b22c:	0800b27b 	.word	0x0800b27b
 800b230:	0800b1cd 	.word	0x0800b1cd
 800b234:	0800b1cd 	.word	0x0800b1cd
 800b238:	0800b313 	.word	0x0800b313
 800b23c:	6833      	ldr	r3, [r6, #0]
 800b23e:	1d1a      	adds	r2, r3, #4
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	6032      	str	r2, [r6, #0]
 800b244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b248:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b24c:	2301      	movs	r3, #1
 800b24e:	e09d      	b.n	800b38c <_printf_i+0x1e8>
 800b250:	6833      	ldr	r3, [r6, #0]
 800b252:	6820      	ldr	r0, [r4, #0]
 800b254:	1d19      	adds	r1, r3, #4
 800b256:	6031      	str	r1, [r6, #0]
 800b258:	0606      	lsls	r6, r0, #24
 800b25a:	d501      	bpl.n	800b260 <_printf_i+0xbc>
 800b25c:	681d      	ldr	r5, [r3, #0]
 800b25e:	e003      	b.n	800b268 <_printf_i+0xc4>
 800b260:	0645      	lsls	r5, r0, #25
 800b262:	d5fb      	bpl.n	800b25c <_printf_i+0xb8>
 800b264:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b268:	2d00      	cmp	r5, #0
 800b26a:	da03      	bge.n	800b274 <_printf_i+0xd0>
 800b26c:	232d      	movs	r3, #45	@ 0x2d
 800b26e:	426d      	negs	r5, r5
 800b270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b274:	4859      	ldr	r0, [pc, #356]	@ (800b3dc <_printf_i+0x238>)
 800b276:	230a      	movs	r3, #10
 800b278:	e011      	b.n	800b29e <_printf_i+0xfa>
 800b27a:	6821      	ldr	r1, [r4, #0]
 800b27c:	6833      	ldr	r3, [r6, #0]
 800b27e:	0608      	lsls	r0, r1, #24
 800b280:	f853 5b04 	ldr.w	r5, [r3], #4
 800b284:	d402      	bmi.n	800b28c <_printf_i+0xe8>
 800b286:	0649      	lsls	r1, r1, #25
 800b288:	bf48      	it	mi
 800b28a:	b2ad      	uxthmi	r5, r5
 800b28c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b28e:	4853      	ldr	r0, [pc, #332]	@ (800b3dc <_printf_i+0x238>)
 800b290:	6033      	str	r3, [r6, #0]
 800b292:	bf14      	ite	ne
 800b294:	230a      	movne	r3, #10
 800b296:	2308      	moveq	r3, #8
 800b298:	2100      	movs	r1, #0
 800b29a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b29e:	6866      	ldr	r6, [r4, #4]
 800b2a0:	60a6      	str	r6, [r4, #8]
 800b2a2:	2e00      	cmp	r6, #0
 800b2a4:	bfa2      	ittt	ge
 800b2a6:	6821      	ldrge	r1, [r4, #0]
 800b2a8:	f021 0104 	bicge.w	r1, r1, #4
 800b2ac:	6021      	strge	r1, [r4, #0]
 800b2ae:	b90d      	cbnz	r5, 800b2b4 <_printf_i+0x110>
 800b2b0:	2e00      	cmp	r6, #0
 800b2b2:	d04b      	beq.n	800b34c <_printf_i+0x1a8>
 800b2b4:	4616      	mov	r6, r2
 800b2b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b2ba:	fb03 5711 	mls	r7, r3, r1, r5
 800b2be:	5dc7      	ldrb	r7, [r0, r7]
 800b2c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b2c4:	462f      	mov	r7, r5
 800b2c6:	42bb      	cmp	r3, r7
 800b2c8:	460d      	mov	r5, r1
 800b2ca:	d9f4      	bls.n	800b2b6 <_printf_i+0x112>
 800b2cc:	2b08      	cmp	r3, #8
 800b2ce:	d10b      	bne.n	800b2e8 <_printf_i+0x144>
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	07df      	lsls	r7, r3, #31
 800b2d4:	d508      	bpl.n	800b2e8 <_printf_i+0x144>
 800b2d6:	6923      	ldr	r3, [r4, #16]
 800b2d8:	6861      	ldr	r1, [r4, #4]
 800b2da:	4299      	cmp	r1, r3
 800b2dc:	bfde      	ittt	le
 800b2de:	2330      	movle	r3, #48	@ 0x30
 800b2e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b2e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b2e8:	1b92      	subs	r2, r2, r6
 800b2ea:	6122      	str	r2, [r4, #16]
 800b2ec:	f8cd a000 	str.w	sl, [sp]
 800b2f0:	464b      	mov	r3, r9
 800b2f2:	aa03      	add	r2, sp, #12
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	4640      	mov	r0, r8
 800b2f8:	f7ff fee6 	bl	800b0c8 <_printf_common>
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	d14a      	bne.n	800b396 <_printf_i+0x1f2>
 800b300:	f04f 30ff 	mov.w	r0, #4294967295
 800b304:	b004      	add	sp, #16
 800b306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	f043 0320 	orr.w	r3, r3, #32
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	4833      	ldr	r0, [pc, #204]	@ (800b3e0 <_printf_i+0x23c>)
 800b314:	2778      	movs	r7, #120	@ 0x78
 800b316:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	6831      	ldr	r1, [r6, #0]
 800b31e:	061f      	lsls	r7, r3, #24
 800b320:	f851 5b04 	ldr.w	r5, [r1], #4
 800b324:	d402      	bmi.n	800b32c <_printf_i+0x188>
 800b326:	065f      	lsls	r7, r3, #25
 800b328:	bf48      	it	mi
 800b32a:	b2ad      	uxthmi	r5, r5
 800b32c:	6031      	str	r1, [r6, #0]
 800b32e:	07d9      	lsls	r1, r3, #31
 800b330:	bf44      	itt	mi
 800b332:	f043 0320 	orrmi.w	r3, r3, #32
 800b336:	6023      	strmi	r3, [r4, #0]
 800b338:	b11d      	cbz	r5, 800b342 <_printf_i+0x19e>
 800b33a:	2310      	movs	r3, #16
 800b33c:	e7ac      	b.n	800b298 <_printf_i+0xf4>
 800b33e:	4827      	ldr	r0, [pc, #156]	@ (800b3dc <_printf_i+0x238>)
 800b340:	e7e9      	b.n	800b316 <_printf_i+0x172>
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	f023 0320 	bic.w	r3, r3, #32
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	e7f6      	b.n	800b33a <_printf_i+0x196>
 800b34c:	4616      	mov	r6, r2
 800b34e:	e7bd      	b.n	800b2cc <_printf_i+0x128>
 800b350:	6833      	ldr	r3, [r6, #0]
 800b352:	6825      	ldr	r5, [r4, #0]
 800b354:	6961      	ldr	r1, [r4, #20]
 800b356:	1d18      	adds	r0, r3, #4
 800b358:	6030      	str	r0, [r6, #0]
 800b35a:	062e      	lsls	r6, r5, #24
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	d501      	bpl.n	800b364 <_printf_i+0x1c0>
 800b360:	6019      	str	r1, [r3, #0]
 800b362:	e002      	b.n	800b36a <_printf_i+0x1c6>
 800b364:	0668      	lsls	r0, r5, #25
 800b366:	d5fb      	bpl.n	800b360 <_printf_i+0x1bc>
 800b368:	8019      	strh	r1, [r3, #0]
 800b36a:	2300      	movs	r3, #0
 800b36c:	6123      	str	r3, [r4, #16]
 800b36e:	4616      	mov	r6, r2
 800b370:	e7bc      	b.n	800b2ec <_printf_i+0x148>
 800b372:	6833      	ldr	r3, [r6, #0]
 800b374:	1d1a      	adds	r2, r3, #4
 800b376:	6032      	str	r2, [r6, #0]
 800b378:	681e      	ldr	r6, [r3, #0]
 800b37a:	6862      	ldr	r2, [r4, #4]
 800b37c:	2100      	movs	r1, #0
 800b37e:	4630      	mov	r0, r6
 800b380:	f7f4 ff26 	bl	80001d0 <memchr>
 800b384:	b108      	cbz	r0, 800b38a <_printf_i+0x1e6>
 800b386:	1b80      	subs	r0, r0, r6
 800b388:	6060      	str	r0, [r4, #4]
 800b38a:	6863      	ldr	r3, [r4, #4]
 800b38c:	6123      	str	r3, [r4, #16]
 800b38e:	2300      	movs	r3, #0
 800b390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b394:	e7aa      	b.n	800b2ec <_printf_i+0x148>
 800b396:	6923      	ldr	r3, [r4, #16]
 800b398:	4632      	mov	r2, r6
 800b39a:	4649      	mov	r1, r9
 800b39c:	4640      	mov	r0, r8
 800b39e:	47d0      	blx	sl
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d0ad      	beq.n	800b300 <_printf_i+0x15c>
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	079b      	lsls	r3, r3, #30
 800b3a8:	d413      	bmi.n	800b3d2 <_printf_i+0x22e>
 800b3aa:	68e0      	ldr	r0, [r4, #12]
 800b3ac:	9b03      	ldr	r3, [sp, #12]
 800b3ae:	4298      	cmp	r0, r3
 800b3b0:	bfb8      	it	lt
 800b3b2:	4618      	movlt	r0, r3
 800b3b4:	e7a6      	b.n	800b304 <_printf_i+0x160>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	4632      	mov	r2, r6
 800b3ba:	4649      	mov	r1, r9
 800b3bc:	4640      	mov	r0, r8
 800b3be:	47d0      	blx	sl
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	d09d      	beq.n	800b300 <_printf_i+0x15c>
 800b3c4:	3501      	adds	r5, #1
 800b3c6:	68e3      	ldr	r3, [r4, #12]
 800b3c8:	9903      	ldr	r1, [sp, #12]
 800b3ca:	1a5b      	subs	r3, r3, r1
 800b3cc:	42ab      	cmp	r3, r5
 800b3ce:	dcf2      	bgt.n	800b3b6 <_printf_i+0x212>
 800b3d0:	e7eb      	b.n	800b3aa <_printf_i+0x206>
 800b3d2:	2500      	movs	r5, #0
 800b3d4:	f104 0619 	add.w	r6, r4, #25
 800b3d8:	e7f5      	b.n	800b3c6 <_printf_i+0x222>
 800b3da:	bf00      	nop
 800b3dc:	0800ebba 	.word	0x0800ebba
 800b3e0:	0800ebcb 	.word	0x0800ebcb

0800b3e4 <std>:
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	b510      	push	{r4, lr}
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	e9c0 3300 	strd	r3, r3, [r0]
 800b3ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3f2:	6083      	str	r3, [r0, #8]
 800b3f4:	8181      	strh	r1, [r0, #12]
 800b3f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b3f8:	81c2      	strh	r2, [r0, #14]
 800b3fa:	6183      	str	r3, [r0, #24]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	2208      	movs	r2, #8
 800b400:	305c      	adds	r0, #92	@ 0x5c
 800b402:	f000 f928 	bl	800b656 <memset>
 800b406:	4b0d      	ldr	r3, [pc, #52]	@ (800b43c <std+0x58>)
 800b408:	6263      	str	r3, [r4, #36]	@ 0x24
 800b40a:	4b0d      	ldr	r3, [pc, #52]	@ (800b440 <std+0x5c>)
 800b40c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b40e:	4b0d      	ldr	r3, [pc, #52]	@ (800b444 <std+0x60>)
 800b410:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b412:	4b0d      	ldr	r3, [pc, #52]	@ (800b448 <std+0x64>)
 800b414:	6323      	str	r3, [r4, #48]	@ 0x30
 800b416:	4b0d      	ldr	r3, [pc, #52]	@ (800b44c <std+0x68>)
 800b418:	6224      	str	r4, [r4, #32]
 800b41a:	429c      	cmp	r4, r3
 800b41c:	d006      	beq.n	800b42c <std+0x48>
 800b41e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b422:	4294      	cmp	r4, r2
 800b424:	d002      	beq.n	800b42c <std+0x48>
 800b426:	33d0      	adds	r3, #208	@ 0xd0
 800b428:	429c      	cmp	r4, r3
 800b42a:	d105      	bne.n	800b438 <std+0x54>
 800b42c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b434:	f000 b98c 	b.w	800b750 <__retarget_lock_init_recursive>
 800b438:	bd10      	pop	{r4, pc}
 800b43a:	bf00      	nop
 800b43c:	0800b5d1 	.word	0x0800b5d1
 800b440:	0800b5f3 	.word	0x0800b5f3
 800b444:	0800b62b 	.word	0x0800b62b
 800b448:	0800b64f 	.word	0x0800b64f
 800b44c:	200020a8 	.word	0x200020a8

0800b450 <stdio_exit_handler>:
 800b450:	4a02      	ldr	r2, [pc, #8]	@ (800b45c <stdio_exit_handler+0xc>)
 800b452:	4903      	ldr	r1, [pc, #12]	@ (800b460 <stdio_exit_handler+0x10>)
 800b454:	4803      	ldr	r0, [pc, #12]	@ (800b464 <stdio_exit_handler+0x14>)
 800b456:	f000 b869 	b.w	800b52c <_fwalk_sglue>
 800b45a:	bf00      	nop
 800b45c:	20000138 	.word	0x20000138
 800b460:	0800d0cd 	.word	0x0800d0cd
 800b464:	20000148 	.word	0x20000148

0800b468 <cleanup_stdio>:
 800b468:	6841      	ldr	r1, [r0, #4]
 800b46a:	4b0c      	ldr	r3, [pc, #48]	@ (800b49c <cleanup_stdio+0x34>)
 800b46c:	4299      	cmp	r1, r3
 800b46e:	b510      	push	{r4, lr}
 800b470:	4604      	mov	r4, r0
 800b472:	d001      	beq.n	800b478 <cleanup_stdio+0x10>
 800b474:	f001 fe2a 	bl	800d0cc <_fflush_r>
 800b478:	68a1      	ldr	r1, [r4, #8]
 800b47a:	4b09      	ldr	r3, [pc, #36]	@ (800b4a0 <cleanup_stdio+0x38>)
 800b47c:	4299      	cmp	r1, r3
 800b47e:	d002      	beq.n	800b486 <cleanup_stdio+0x1e>
 800b480:	4620      	mov	r0, r4
 800b482:	f001 fe23 	bl	800d0cc <_fflush_r>
 800b486:	68e1      	ldr	r1, [r4, #12]
 800b488:	4b06      	ldr	r3, [pc, #24]	@ (800b4a4 <cleanup_stdio+0x3c>)
 800b48a:	4299      	cmp	r1, r3
 800b48c:	d004      	beq.n	800b498 <cleanup_stdio+0x30>
 800b48e:	4620      	mov	r0, r4
 800b490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b494:	f001 be1a 	b.w	800d0cc <_fflush_r>
 800b498:	bd10      	pop	{r4, pc}
 800b49a:	bf00      	nop
 800b49c:	200020a8 	.word	0x200020a8
 800b4a0:	20002110 	.word	0x20002110
 800b4a4:	20002178 	.word	0x20002178

0800b4a8 <global_stdio_init.part.0>:
 800b4a8:	b510      	push	{r4, lr}
 800b4aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b4d8 <global_stdio_init.part.0+0x30>)
 800b4ac:	4c0b      	ldr	r4, [pc, #44]	@ (800b4dc <global_stdio_init.part.0+0x34>)
 800b4ae:	4a0c      	ldr	r2, [pc, #48]	@ (800b4e0 <global_stdio_init.part.0+0x38>)
 800b4b0:	601a      	str	r2, [r3, #0]
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	2104      	movs	r1, #4
 800b4b8:	f7ff ff94 	bl	800b3e4 <std>
 800b4bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	2109      	movs	r1, #9
 800b4c4:	f7ff ff8e 	bl	800b3e4 <std>
 800b4c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d2:	2112      	movs	r1, #18
 800b4d4:	f7ff bf86 	b.w	800b3e4 <std>
 800b4d8:	200021e0 	.word	0x200021e0
 800b4dc:	200020a8 	.word	0x200020a8
 800b4e0:	0800b451 	.word	0x0800b451

0800b4e4 <__sfp_lock_acquire>:
 800b4e4:	4801      	ldr	r0, [pc, #4]	@ (800b4ec <__sfp_lock_acquire+0x8>)
 800b4e6:	f000 b934 	b.w	800b752 <__retarget_lock_acquire_recursive>
 800b4ea:	bf00      	nop
 800b4ec:	200021e9 	.word	0x200021e9

0800b4f0 <__sfp_lock_release>:
 800b4f0:	4801      	ldr	r0, [pc, #4]	@ (800b4f8 <__sfp_lock_release+0x8>)
 800b4f2:	f000 b92f 	b.w	800b754 <__retarget_lock_release_recursive>
 800b4f6:	bf00      	nop
 800b4f8:	200021e9 	.word	0x200021e9

0800b4fc <__sinit>:
 800b4fc:	b510      	push	{r4, lr}
 800b4fe:	4604      	mov	r4, r0
 800b500:	f7ff fff0 	bl	800b4e4 <__sfp_lock_acquire>
 800b504:	6a23      	ldr	r3, [r4, #32]
 800b506:	b11b      	cbz	r3, 800b510 <__sinit+0x14>
 800b508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b50c:	f7ff bff0 	b.w	800b4f0 <__sfp_lock_release>
 800b510:	4b04      	ldr	r3, [pc, #16]	@ (800b524 <__sinit+0x28>)
 800b512:	6223      	str	r3, [r4, #32]
 800b514:	4b04      	ldr	r3, [pc, #16]	@ (800b528 <__sinit+0x2c>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1f5      	bne.n	800b508 <__sinit+0xc>
 800b51c:	f7ff ffc4 	bl	800b4a8 <global_stdio_init.part.0>
 800b520:	e7f2      	b.n	800b508 <__sinit+0xc>
 800b522:	bf00      	nop
 800b524:	0800b469 	.word	0x0800b469
 800b528:	200021e0 	.word	0x200021e0

0800b52c <_fwalk_sglue>:
 800b52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b530:	4607      	mov	r7, r0
 800b532:	4688      	mov	r8, r1
 800b534:	4614      	mov	r4, r2
 800b536:	2600      	movs	r6, #0
 800b538:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b53c:	f1b9 0901 	subs.w	r9, r9, #1
 800b540:	d505      	bpl.n	800b54e <_fwalk_sglue+0x22>
 800b542:	6824      	ldr	r4, [r4, #0]
 800b544:	2c00      	cmp	r4, #0
 800b546:	d1f7      	bne.n	800b538 <_fwalk_sglue+0xc>
 800b548:	4630      	mov	r0, r6
 800b54a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b54e:	89ab      	ldrh	r3, [r5, #12]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d907      	bls.n	800b564 <_fwalk_sglue+0x38>
 800b554:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b558:	3301      	adds	r3, #1
 800b55a:	d003      	beq.n	800b564 <_fwalk_sglue+0x38>
 800b55c:	4629      	mov	r1, r5
 800b55e:	4638      	mov	r0, r7
 800b560:	47c0      	blx	r8
 800b562:	4306      	orrs	r6, r0
 800b564:	3568      	adds	r5, #104	@ 0x68
 800b566:	e7e9      	b.n	800b53c <_fwalk_sglue+0x10>

0800b568 <sniprintf>:
 800b568:	b40c      	push	{r2, r3}
 800b56a:	b530      	push	{r4, r5, lr}
 800b56c:	4b17      	ldr	r3, [pc, #92]	@ (800b5cc <sniprintf+0x64>)
 800b56e:	1e0c      	subs	r4, r1, #0
 800b570:	681d      	ldr	r5, [r3, #0]
 800b572:	b09d      	sub	sp, #116	@ 0x74
 800b574:	da08      	bge.n	800b588 <sniprintf+0x20>
 800b576:	238b      	movs	r3, #139	@ 0x8b
 800b578:	602b      	str	r3, [r5, #0]
 800b57a:	f04f 30ff 	mov.w	r0, #4294967295
 800b57e:	b01d      	add	sp, #116	@ 0x74
 800b580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b584:	b002      	add	sp, #8
 800b586:	4770      	bx	lr
 800b588:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b58c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b590:	bf14      	ite	ne
 800b592:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b596:	4623      	moveq	r3, r4
 800b598:	9304      	str	r3, [sp, #16]
 800b59a:	9307      	str	r3, [sp, #28]
 800b59c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b5a0:	9002      	str	r0, [sp, #8]
 800b5a2:	9006      	str	r0, [sp, #24]
 800b5a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b5a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b5aa:	ab21      	add	r3, sp, #132	@ 0x84
 800b5ac:	a902      	add	r1, sp, #8
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	9301      	str	r3, [sp, #4]
 800b5b2:	f001 fc0b 	bl	800cdcc <_svfiprintf_r>
 800b5b6:	1c43      	adds	r3, r0, #1
 800b5b8:	bfbc      	itt	lt
 800b5ba:	238b      	movlt	r3, #139	@ 0x8b
 800b5bc:	602b      	strlt	r3, [r5, #0]
 800b5be:	2c00      	cmp	r4, #0
 800b5c0:	d0dd      	beq.n	800b57e <sniprintf+0x16>
 800b5c2:	9b02      	ldr	r3, [sp, #8]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	701a      	strb	r2, [r3, #0]
 800b5c8:	e7d9      	b.n	800b57e <sniprintf+0x16>
 800b5ca:	bf00      	nop
 800b5cc:	20000144 	.word	0x20000144

0800b5d0 <__sread>:
 800b5d0:	b510      	push	{r4, lr}
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5d8:	f000 f86c 	bl	800b6b4 <_read_r>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	bfab      	itete	ge
 800b5e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b5e2:	89a3      	ldrhlt	r3, [r4, #12]
 800b5e4:	181b      	addge	r3, r3, r0
 800b5e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b5ea:	bfac      	ite	ge
 800b5ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b5ee:	81a3      	strhlt	r3, [r4, #12]
 800b5f0:	bd10      	pop	{r4, pc}

0800b5f2 <__swrite>:
 800b5f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f6:	461f      	mov	r7, r3
 800b5f8:	898b      	ldrh	r3, [r1, #12]
 800b5fa:	05db      	lsls	r3, r3, #23
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	460c      	mov	r4, r1
 800b600:	4616      	mov	r6, r2
 800b602:	d505      	bpl.n	800b610 <__swrite+0x1e>
 800b604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b608:	2302      	movs	r3, #2
 800b60a:	2200      	movs	r2, #0
 800b60c:	f000 f840 	bl	800b690 <_lseek_r>
 800b610:	89a3      	ldrh	r3, [r4, #12]
 800b612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b616:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b61a:	81a3      	strh	r3, [r4, #12]
 800b61c:	4632      	mov	r2, r6
 800b61e:	463b      	mov	r3, r7
 800b620:	4628      	mov	r0, r5
 800b622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b626:	f000 b857 	b.w	800b6d8 <_write_r>

0800b62a <__sseek>:
 800b62a:	b510      	push	{r4, lr}
 800b62c:	460c      	mov	r4, r1
 800b62e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b632:	f000 f82d 	bl	800b690 <_lseek_r>
 800b636:	1c43      	adds	r3, r0, #1
 800b638:	89a3      	ldrh	r3, [r4, #12]
 800b63a:	bf15      	itete	ne
 800b63c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b63e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b642:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b646:	81a3      	strheq	r3, [r4, #12]
 800b648:	bf18      	it	ne
 800b64a:	81a3      	strhne	r3, [r4, #12]
 800b64c:	bd10      	pop	{r4, pc}

0800b64e <__sclose>:
 800b64e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b652:	f000 b80d 	b.w	800b670 <_close_r>

0800b656 <memset>:
 800b656:	4402      	add	r2, r0
 800b658:	4603      	mov	r3, r0
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d100      	bne.n	800b660 <memset+0xa>
 800b65e:	4770      	bx	lr
 800b660:	f803 1b01 	strb.w	r1, [r3], #1
 800b664:	e7f9      	b.n	800b65a <memset+0x4>
	...

0800b668 <_localeconv_r>:
 800b668:	4800      	ldr	r0, [pc, #0]	@ (800b66c <_localeconv_r+0x4>)
 800b66a:	4770      	bx	lr
 800b66c:	20000284 	.word	0x20000284

0800b670 <_close_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d06      	ldr	r5, [pc, #24]	@ (800b68c <_close_r+0x1c>)
 800b674:	2300      	movs	r3, #0
 800b676:	4604      	mov	r4, r0
 800b678:	4608      	mov	r0, r1
 800b67a:	602b      	str	r3, [r5, #0]
 800b67c:	f7f7 f8d0 	bl	8002820 <_close>
 800b680:	1c43      	adds	r3, r0, #1
 800b682:	d102      	bne.n	800b68a <_close_r+0x1a>
 800b684:	682b      	ldr	r3, [r5, #0]
 800b686:	b103      	cbz	r3, 800b68a <_close_r+0x1a>
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	200021e4 	.word	0x200021e4

0800b690 <_lseek_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4d07      	ldr	r5, [pc, #28]	@ (800b6b0 <_lseek_r+0x20>)
 800b694:	4604      	mov	r4, r0
 800b696:	4608      	mov	r0, r1
 800b698:	4611      	mov	r1, r2
 800b69a:	2200      	movs	r2, #0
 800b69c:	602a      	str	r2, [r5, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f7f7 f8e5 	bl	800286e <_lseek>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d102      	bne.n	800b6ae <_lseek_r+0x1e>
 800b6a8:	682b      	ldr	r3, [r5, #0]
 800b6aa:	b103      	cbz	r3, 800b6ae <_lseek_r+0x1e>
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	200021e4 	.word	0x200021e4

0800b6b4 <_read_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4d07      	ldr	r5, [pc, #28]	@ (800b6d4 <_read_r+0x20>)
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	4608      	mov	r0, r1
 800b6bc:	4611      	mov	r1, r2
 800b6be:	2200      	movs	r2, #0
 800b6c0:	602a      	str	r2, [r5, #0]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f7f7 f873 	bl	80027ae <_read>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d102      	bne.n	800b6d2 <_read_r+0x1e>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	b103      	cbz	r3, 800b6d2 <_read_r+0x1e>
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	200021e4 	.word	0x200021e4

0800b6d8 <_write_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4d07      	ldr	r5, [pc, #28]	@ (800b6f8 <_write_r+0x20>)
 800b6dc:	4604      	mov	r4, r0
 800b6de:	4608      	mov	r0, r1
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	602a      	str	r2, [r5, #0]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	f7f7 f87e 	bl	80027e8 <_write>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d102      	bne.n	800b6f6 <_write_r+0x1e>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	b103      	cbz	r3, 800b6f6 <_write_r+0x1e>
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	200021e4 	.word	0x200021e4

0800b6fc <__errno>:
 800b6fc:	4b01      	ldr	r3, [pc, #4]	@ (800b704 <__errno+0x8>)
 800b6fe:	6818      	ldr	r0, [r3, #0]
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	20000144 	.word	0x20000144

0800b708 <__libc_init_array>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	4d0d      	ldr	r5, [pc, #52]	@ (800b740 <__libc_init_array+0x38>)
 800b70c:	4c0d      	ldr	r4, [pc, #52]	@ (800b744 <__libc_init_array+0x3c>)
 800b70e:	1b64      	subs	r4, r4, r5
 800b710:	10a4      	asrs	r4, r4, #2
 800b712:	2600      	movs	r6, #0
 800b714:	42a6      	cmp	r6, r4
 800b716:	d109      	bne.n	800b72c <__libc_init_array+0x24>
 800b718:	4d0b      	ldr	r5, [pc, #44]	@ (800b748 <__libc_init_array+0x40>)
 800b71a:	4c0c      	ldr	r4, [pc, #48]	@ (800b74c <__libc_init_array+0x44>)
 800b71c:	f003 f9f4 	bl	800eb08 <_init>
 800b720:	1b64      	subs	r4, r4, r5
 800b722:	10a4      	asrs	r4, r4, #2
 800b724:	2600      	movs	r6, #0
 800b726:	42a6      	cmp	r6, r4
 800b728:	d105      	bne.n	800b736 <__libc_init_array+0x2e>
 800b72a:	bd70      	pop	{r4, r5, r6, pc}
 800b72c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b730:	4798      	blx	r3
 800b732:	3601      	adds	r6, #1
 800b734:	e7ee      	b.n	800b714 <__libc_init_array+0xc>
 800b736:	f855 3b04 	ldr.w	r3, [r5], #4
 800b73a:	4798      	blx	r3
 800b73c:	3601      	adds	r6, #1
 800b73e:	e7f2      	b.n	800b726 <__libc_init_array+0x1e>
 800b740:	0800f0f8 	.word	0x0800f0f8
 800b744:	0800f0f8 	.word	0x0800f0f8
 800b748:	0800f0f8 	.word	0x0800f0f8
 800b74c:	0800f0fc 	.word	0x0800f0fc

0800b750 <__retarget_lock_init_recursive>:
 800b750:	4770      	bx	lr

0800b752 <__retarget_lock_acquire_recursive>:
 800b752:	4770      	bx	lr

0800b754 <__retarget_lock_release_recursive>:
 800b754:	4770      	bx	lr

0800b756 <memcpy>:
 800b756:	440a      	add	r2, r1
 800b758:	4291      	cmp	r1, r2
 800b75a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b75e:	d100      	bne.n	800b762 <memcpy+0xc>
 800b760:	4770      	bx	lr
 800b762:	b510      	push	{r4, lr}
 800b764:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b76c:	4291      	cmp	r1, r2
 800b76e:	d1f9      	bne.n	800b764 <memcpy+0xe>
 800b770:	bd10      	pop	{r4, pc}

0800b772 <quorem>:
 800b772:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b776:	6903      	ldr	r3, [r0, #16]
 800b778:	690c      	ldr	r4, [r1, #16]
 800b77a:	42a3      	cmp	r3, r4
 800b77c:	4607      	mov	r7, r0
 800b77e:	db7e      	blt.n	800b87e <quorem+0x10c>
 800b780:	3c01      	subs	r4, #1
 800b782:	f101 0814 	add.w	r8, r1, #20
 800b786:	00a3      	lsls	r3, r4, #2
 800b788:	f100 0514 	add.w	r5, r0, #20
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b792:	9301      	str	r3, [sp, #4]
 800b794:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b798:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b79c:	3301      	adds	r3, #1
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7a8:	d32e      	bcc.n	800b808 <quorem+0x96>
 800b7aa:	f04f 0a00 	mov.w	sl, #0
 800b7ae:	46c4      	mov	ip, r8
 800b7b0:	46ae      	mov	lr, r5
 800b7b2:	46d3      	mov	fp, sl
 800b7b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b7b8:	b298      	uxth	r0, r3
 800b7ba:	fb06 a000 	mla	r0, r6, r0, sl
 800b7be:	0c02      	lsrs	r2, r0, #16
 800b7c0:	0c1b      	lsrs	r3, r3, #16
 800b7c2:	fb06 2303 	mla	r3, r6, r3, r2
 800b7c6:	f8de 2000 	ldr.w	r2, [lr]
 800b7ca:	b280      	uxth	r0, r0
 800b7cc:	b292      	uxth	r2, r2
 800b7ce:	1a12      	subs	r2, r2, r0
 800b7d0:	445a      	add	r2, fp
 800b7d2:	f8de 0000 	ldr.w	r0, [lr]
 800b7d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b7e0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b7e4:	b292      	uxth	r2, r2
 800b7e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b7ea:	45e1      	cmp	r9, ip
 800b7ec:	f84e 2b04 	str.w	r2, [lr], #4
 800b7f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b7f4:	d2de      	bcs.n	800b7b4 <quorem+0x42>
 800b7f6:	9b00      	ldr	r3, [sp, #0]
 800b7f8:	58eb      	ldr	r3, [r5, r3]
 800b7fa:	b92b      	cbnz	r3, 800b808 <quorem+0x96>
 800b7fc:	9b01      	ldr	r3, [sp, #4]
 800b7fe:	3b04      	subs	r3, #4
 800b800:	429d      	cmp	r5, r3
 800b802:	461a      	mov	r2, r3
 800b804:	d32f      	bcc.n	800b866 <quorem+0xf4>
 800b806:	613c      	str	r4, [r7, #16]
 800b808:	4638      	mov	r0, r7
 800b80a:	f001 f97b 	bl	800cb04 <__mcmp>
 800b80e:	2800      	cmp	r0, #0
 800b810:	db25      	blt.n	800b85e <quorem+0xec>
 800b812:	4629      	mov	r1, r5
 800b814:	2000      	movs	r0, #0
 800b816:	f858 2b04 	ldr.w	r2, [r8], #4
 800b81a:	f8d1 c000 	ldr.w	ip, [r1]
 800b81e:	fa1f fe82 	uxth.w	lr, r2
 800b822:	fa1f f38c 	uxth.w	r3, ip
 800b826:	eba3 030e 	sub.w	r3, r3, lr
 800b82a:	4403      	add	r3, r0
 800b82c:	0c12      	lsrs	r2, r2, #16
 800b82e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b832:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b836:	b29b      	uxth	r3, r3
 800b838:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b83c:	45c1      	cmp	r9, r8
 800b83e:	f841 3b04 	str.w	r3, [r1], #4
 800b842:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b846:	d2e6      	bcs.n	800b816 <quorem+0xa4>
 800b848:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b84c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b850:	b922      	cbnz	r2, 800b85c <quorem+0xea>
 800b852:	3b04      	subs	r3, #4
 800b854:	429d      	cmp	r5, r3
 800b856:	461a      	mov	r2, r3
 800b858:	d30b      	bcc.n	800b872 <quorem+0x100>
 800b85a:	613c      	str	r4, [r7, #16]
 800b85c:	3601      	adds	r6, #1
 800b85e:	4630      	mov	r0, r6
 800b860:	b003      	add	sp, #12
 800b862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b866:	6812      	ldr	r2, [r2, #0]
 800b868:	3b04      	subs	r3, #4
 800b86a:	2a00      	cmp	r2, #0
 800b86c:	d1cb      	bne.n	800b806 <quorem+0x94>
 800b86e:	3c01      	subs	r4, #1
 800b870:	e7c6      	b.n	800b800 <quorem+0x8e>
 800b872:	6812      	ldr	r2, [r2, #0]
 800b874:	3b04      	subs	r3, #4
 800b876:	2a00      	cmp	r2, #0
 800b878:	d1ef      	bne.n	800b85a <quorem+0xe8>
 800b87a:	3c01      	subs	r4, #1
 800b87c:	e7ea      	b.n	800b854 <quorem+0xe2>
 800b87e:	2000      	movs	r0, #0
 800b880:	e7ee      	b.n	800b860 <quorem+0xee>
 800b882:	0000      	movs	r0, r0
 800b884:	0000      	movs	r0, r0
	...

0800b888 <_dtoa_r>:
 800b888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88c:	69c7      	ldr	r7, [r0, #28]
 800b88e:	b099      	sub	sp, #100	@ 0x64
 800b890:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b894:	ec55 4b10 	vmov	r4, r5, d0
 800b898:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b89a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b89c:	4683      	mov	fp, r0
 800b89e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b8a2:	b97f      	cbnz	r7, 800b8c4 <_dtoa_r+0x3c>
 800b8a4:	2010      	movs	r0, #16
 800b8a6:	f000 fdfd 	bl	800c4a4 <malloc>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800b8b0:	b920      	cbnz	r0, 800b8bc <_dtoa_r+0x34>
 800b8b2:	4ba7      	ldr	r3, [pc, #668]	@ (800bb50 <_dtoa_r+0x2c8>)
 800b8b4:	21ef      	movs	r1, #239	@ 0xef
 800b8b6:	48a7      	ldr	r0, [pc, #668]	@ (800bb54 <_dtoa_r+0x2cc>)
 800b8b8:	f001 fc5a 	bl	800d170 <__assert_func>
 800b8bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b8c0:	6007      	str	r7, [r0, #0]
 800b8c2:	60c7      	str	r7, [r0, #12]
 800b8c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b8c8:	6819      	ldr	r1, [r3, #0]
 800b8ca:	b159      	cbz	r1, 800b8e4 <_dtoa_r+0x5c>
 800b8cc:	685a      	ldr	r2, [r3, #4]
 800b8ce:	604a      	str	r2, [r1, #4]
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	4093      	lsls	r3, r2
 800b8d4:	608b      	str	r3, [r1, #8]
 800b8d6:	4658      	mov	r0, fp
 800b8d8:	f000 feda 	bl	800c690 <_Bfree>
 800b8dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	601a      	str	r2, [r3, #0]
 800b8e4:	1e2b      	subs	r3, r5, #0
 800b8e6:	bfb9      	ittee	lt
 800b8e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b8ec:	9303      	strlt	r3, [sp, #12]
 800b8ee:	2300      	movge	r3, #0
 800b8f0:	6033      	strge	r3, [r6, #0]
 800b8f2:	9f03      	ldr	r7, [sp, #12]
 800b8f4:	4b98      	ldr	r3, [pc, #608]	@ (800bb58 <_dtoa_r+0x2d0>)
 800b8f6:	bfbc      	itt	lt
 800b8f8:	2201      	movlt	r2, #1
 800b8fa:	6032      	strlt	r2, [r6, #0]
 800b8fc:	43bb      	bics	r3, r7
 800b8fe:	d112      	bne.n	800b926 <_dtoa_r+0x9e>
 800b900:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b902:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b906:	6013      	str	r3, [r2, #0]
 800b908:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b90c:	4323      	orrs	r3, r4
 800b90e:	f000 854d 	beq.w	800c3ac <_dtoa_r+0xb24>
 800b912:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b914:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bb6c <_dtoa_r+0x2e4>
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f000 854f 	beq.w	800c3bc <_dtoa_r+0xb34>
 800b91e:	f10a 0303 	add.w	r3, sl, #3
 800b922:	f000 bd49 	b.w	800c3b8 <_dtoa_r+0xb30>
 800b926:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b92a:	2200      	movs	r2, #0
 800b92c:	ec51 0b17 	vmov	r0, r1, d7
 800b930:	2300      	movs	r3, #0
 800b932:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b936:	f7f5 f8c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b93a:	4680      	mov	r8, r0
 800b93c:	b158      	cbz	r0, 800b956 <_dtoa_r+0xce>
 800b93e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b940:	2301      	movs	r3, #1
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b946:	b113      	cbz	r3, 800b94e <_dtoa_r+0xc6>
 800b948:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b94a:	4b84      	ldr	r3, [pc, #528]	@ (800bb5c <_dtoa_r+0x2d4>)
 800b94c:	6013      	str	r3, [r2, #0]
 800b94e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bb70 <_dtoa_r+0x2e8>
 800b952:	f000 bd33 	b.w	800c3bc <_dtoa_r+0xb34>
 800b956:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b95a:	aa16      	add	r2, sp, #88	@ 0x58
 800b95c:	a917      	add	r1, sp, #92	@ 0x5c
 800b95e:	4658      	mov	r0, fp
 800b960:	f001 f980 	bl	800cc64 <__d2b>
 800b964:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b968:	4681      	mov	r9, r0
 800b96a:	2e00      	cmp	r6, #0
 800b96c:	d077      	beq.n	800ba5e <_dtoa_r+0x1d6>
 800b96e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b970:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b97c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b980:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b984:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b988:	4619      	mov	r1, r3
 800b98a:	2200      	movs	r2, #0
 800b98c:	4b74      	ldr	r3, [pc, #464]	@ (800bb60 <_dtoa_r+0x2d8>)
 800b98e:	f7f4 fc7b 	bl	8000288 <__aeabi_dsub>
 800b992:	a369      	add	r3, pc, #420	@ (adr r3, 800bb38 <_dtoa_r+0x2b0>)
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	f7f4 fe2e 	bl	80005f8 <__aeabi_dmul>
 800b99c:	a368      	add	r3, pc, #416	@ (adr r3, 800bb40 <_dtoa_r+0x2b8>)
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	f7f4 fc73 	bl	800028c <__adddf3>
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	460d      	mov	r5, r1
 800b9ac:	f7f4 fdba 	bl	8000524 <__aeabi_i2d>
 800b9b0:	a365      	add	r3, pc, #404	@ (adr r3, 800bb48 <_dtoa_r+0x2c0>)
 800b9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b6:	f7f4 fe1f 	bl	80005f8 <__aeabi_dmul>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	460b      	mov	r3, r1
 800b9be:	4620      	mov	r0, r4
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	f7f4 fc63 	bl	800028c <__adddf3>
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	460d      	mov	r5, r1
 800b9ca:	f7f5 f8c5 	bl	8000b58 <__aeabi_d2iz>
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	4607      	mov	r7, r0
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	f7f5 f880 	bl	8000adc <__aeabi_dcmplt>
 800b9dc:	b140      	cbz	r0, 800b9f0 <_dtoa_r+0x168>
 800b9de:	4638      	mov	r0, r7
 800b9e0:	f7f4 fda0 	bl	8000524 <__aeabi_i2d>
 800b9e4:	4622      	mov	r2, r4
 800b9e6:	462b      	mov	r3, r5
 800b9e8:	f7f5 f86e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9ec:	b900      	cbnz	r0, 800b9f0 <_dtoa_r+0x168>
 800b9ee:	3f01      	subs	r7, #1
 800b9f0:	2f16      	cmp	r7, #22
 800b9f2:	d851      	bhi.n	800ba98 <_dtoa_r+0x210>
 800b9f4:	4b5b      	ldr	r3, [pc, #364]	@ (800bb64 <_dtoa_r+0x2dc>)
 800b9f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba02:	f7f5 f86b 	bl	8000adc <__aeabi_dcmplt>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d048      	beq.n	800ba9c <_dtoa_r+0x214>
 800ba0a:	3f01      	subs	r7, #1
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba12:	1b9b      	subs	r3, r3, r6
 800ba14:	1e5a      	subs	r2, r3, #1
 800ba16:	bf44      	itt	mi
 800ba18:	f1c3 0801 	rsbmi	r8, r3, #1
 800ba1c:	2300      	movmi	r3, #0
 800ba1e:	9208      	str	r2, [sp, #32]
 800ba20:	bf54      	ite	pl
 800ba22:	f04f 0800 	movpl.w	r8, #0
 800ba26:	9308      	strmi	r3, [sp, #32]
 800ba28:	2f00      	cmp	r7, #0
 800ba2a:	db39      	blt.n	800baa0 <_dtoa_r+0x218>
 800ba2c:	9b08      	ldr	r3, [sp, #32]
 800ba2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ba30:	443b      	add	r3, r7
 800ba32:	9308      	str	r3, [sp, #32]
 800ba34:	2300      	movs	r3, #0
 800ba36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba3a:	2b09      	cmp	r3, #9
 800ba3c:	d864      	bhi.n	800bb08 <_dtoa_r+0x280>
 800ba3e:	2b05      	cmp	r3, #5
 800ba40:	bfc4      	itt	gt
 800ba42:	3b04      	subgt	r3, #4
 800ba44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ba46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba48:	f1a3 0302 	sub.w	r3, r3, #2
 800ba4c:	bfcc      	ite	gt
 800ba4e:	2400      	movgt	r4, #0
 800ba50:	2401      	movle	r4, #1
 800ba52:	2b03      	cmp	r3, #3
 800ba54:	d863      	bhi.n	800bb1e <_dtoa_r+0x296>
 800ba56:	e8df f003 	tbb	[pc, r3]
 800ba5a:	372a      	.short	0x372a
 800ba5c:	5535      	.short	0x5535
 800ba5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ba62:	441e      	add	r6, r3
 800ba64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ba68:	2b20      	cmp	r3, #32
 800ba6a:	bfc1      	itttt	gt
 800ba6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ba70:	409f      	lslgt	r7, r3
 800ba72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ba76:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ba7a:	bfd6      	itet	le
 800ba7c:	f1c3 0320 	rsble	r3, r3, #32
 800ba80:	ea47 0003 	orrgt.w	r0, r7, r3
 800ba84:	fa04 f003 	lslle.w	r0, r4, r3
 800ba88:	f7f4 fd3c 	bl	8000504 <__aeabi_ui2d>
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba92:	3e01      	subs	r6, #1
 800ba94:	9214      	str	r2, [sp, #80]	@ 0x50
 800ba96:	e777      	b.n	800b988 <_dtoa_r+0x100>
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e7b8      	b.n	800ba0e <_dtoa_r+0x186>
 800ba9c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ba9e:	e7b7      	b.n	800ba10 <_dtoa_r+0x188>
 800baa0:	427b      	negs	r3, r7
 800baa2:	930a      	str	r3, [sp, #40]	@ 0x28
 800baa4:	2300      	movs	r3, #0
 800baa6:	eba8 0807 	sub.w	r8, r8, r7
 800baaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800baac:	e7c4      	b.n	800ba38 <_dtoa_r+0x1b0>
 800baae:	2300      	movs	r3, #0
 800bab0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	dc35      	bgt.n	800bb24 <_dtoa_r+0x29c>
 800bab8:	2301      	movs	r3, #1
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	9307      	str	r3, [sp, #28]
 800babe:	461a      	mov	r2, r3
 800bac0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bac2:	e00b      	b.n	800badc <_dtoa_r+0x254>
 800bac4:	2301      	movs	r3, #1
 800bac6:	e7f3      	b.n	800bab0 <_dtoa_r+0x228>
 800bac8:	2300      	movs	r3, #0
 800baca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bacc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bace:	18fb      	adds	r3, r7, r3
 800bad0:	9300      	str	r3, [sp, #0]
 800bad2:	3301      	adds	r3, #1
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	9307      	str	r3, [sp, #28]
 800bad8:	bfb8      	it	lt
 800bada:	2301      	movlt	r3, #1
 800badc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bae0:	2100      	movs	r1, #0
 800bae2:	2204      	movs	r2, #4
 800bae4:	f102 0514 	add.w	r5, r2, #20
 800bae8:	429d      	cmp	r5, r3
 800baea:	d91f      	bls.n	800bb2c <_dtoa_r+0x2a4>
 800baec:	6041      	str	r1, [r0, #4]
 800baee:	4658      	mov	r0, fp
 800baf0:	f000 fd8e 	bl	800c610 <_Balloc>
 800baf4:	4682      	mov	sl, r0
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d13c      	bne.n	800bb74 <_dtoa_r+0x2ec>
 800bafa:	4b1b      	ldr	r3, [pc, #108]	@ (800bb68 <_dtoa_r+0x2e0>)
 800bafc:	4602      	mov	r2, r0
 800bafe:	f240 11af 	movw	r1, #431	@ 0x1af
 800bb02:	e6d8      	b.n	800b8b6 <_dtoa_r+0x2e>
 800bb04:	2301      	movs	r3, #1
 800bb06:	e7e0      	b.n	800baca <_dtoa_r+0x242>
 800bb08:	2401      	movs	r4, #1
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bb10:	f04f 33ff 	mov.w	r3, #4294967295
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	9307      	str	r3, [sp, #28]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	2312      	movs	r3, #18
 800bb1c:	e7d0      	b.n	800bac0 <_dtoa_r+0x238>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb22:	e7f5      	b.n	800bb10 <_dtoa_r+0x288>
 800bb24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	9307      	str	r3, [sp, #28]
 800bb2a:	e7d7      	b.n	800badc <_dtoa_r+0x254>
 800bb2c:	3101      	adds	r1, #1
 800bb2e:	0052      	lsls	r2, r2, #1
 800bb30:	e7d8      	b.n	800bae4 <_dtoa_r+0x25c>
 800bb32:	bf00      	nop
 800bb34:	f3af 8000 	nop.w
 800bb38:	636f4361 	.word	0x636f4361
 800bb3c:	3fd287a7 	.word	0x3fd287a7
 800bb40:	8b60c8b3 	.word	0x8b60c8b3
 800bb44:	3fc68a28 	.word	0x3fc68a28
 800bb48:	509f79fb 	.word	0x509f79fb
 800bb4c:	3fd34413 	.word	0x3fd34413
 800bb50:	0800ebe9 	.word	0x0800ebe9
 800bb54:	0800ec00 	.word	0x0800ec00
 800bb58:	7ff00000 	.word	0x7ff00000
 800bb5c:	0800ebb9 	.word	0x0800ebb9
 800bb60:	3ff80000 	.word	0x3ff80000
 800bb64:	0800ecf8 	.word	0x0800ecf8
 800bb68:	0800ec58 	.word	0x0800ec58
 800bb6c:	0800ebe5 	.word	0x0800ebe5
 800bb70:	0800ebb8 	.word	0x0800ebb8
 800bb74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb78:	6018      	str	r0, [r3, #0]
 800bb7a:	9b07      	ldr	r3, [sp, #28]
 800bb7c:	2b0e      	cmp	r3, #14
 800bb7e:	f200 80a4 	bhi.w	800bcca <_dtoa_r+0x442>
 800bb82:	2c00      	cmp	r4, #0
 800bb84:	f000 80a1 	beq.w	800bcca <_dtoa_r+0x442>
 800bb88:	2f00      	cmp	r7, #0
 800bb8a:	dd33      	ble.n	800bbf4 <_dtoa_r+0x36c>
 800bb8c:	4bad      	ldr	r3, [pc, #692]	@ (800be44 <_dtoa_r+0x5bc>)
 800bb8e:	f007 020f 	and.w	r2, r7, #15
 800bb92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb96:	ed93 7b00 	vldr	d7, [r3]
 800bb9a:	05f8      	lsls	r0, r7, #23
 800bb9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bba0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bba4:	d516      	bpl.n	800bbd4 <_dtoa_r+0x34c>
 800bba6:	4ba8      	ldr	r3, [pc, #672]	@ (800be48 <_dtoa_r+0x5c0>)
 800bba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbb0:	f7f4 fe4c 	bl	800084c <__aeabi_ddiv>
 800bbb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbb8:	f004 040f 	and.w	r4, r4, #15
 800bbbc:	2603      	movs	r6, #3
 800bbbe:	4da2      	ldr	r5, [pc, #648]	@ (800be48 <_dtoa_r+0x5c0>)
 800bbc0:	b954      	cbnz	r4, 800bbd8 <_dtoa_r+0x350>
 800bbc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbca:	f7f4 fe3f 	bl	800084c <__aeabi_ddiv>
 800bbce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbd2:	e028      	b.n	800bc26 <_dtoa_r+0x39e>
 800bbd4:	2602      	movs	r6, #2
 800bbd6:	e7f2      	b.n	800bbbe <_dtoa_r+0x336>
 800bbd8:	07e1      	lsls	r1, r4, #31
 800bbda:	d508      	bpl.n	800bbee <_dtoa_r+0x366>
 800bbdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbe0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbe4:	f7f4 fd08 	bl	80005f8 <__aeabi_dmul>
 800bbe8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbec:	3601      	adds	r6, #1
 800bbee:	1064      	asrs	r4, r4, #1
 800bbf0:	3508      	adds	r5, #8
 800bbf2:	e7e5      	b.n	800bbc0 <_dtoa_r+0x338>
 800bbf4:	f000 80d2 	beq.w	800bd9c <_dtoa_r+0x514>
 800bbf8:	427c      	negs	r4, r7
 800bbfa:	4b92      	ldr	r3, [pc, #584]	@ (800be44 <_dtoa_r+0x5bc>)
 800bbfc:	4d92      	ldr	r5, [pc, #584]	@ (800be48 <_dtoa_r+0x5c0>)
 800bbfe:	f004 020f 	and.w	r2, r4, #15
 800bc02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc0e:	f7f4 fcf3 	bl	80005f8 <__aeabi_dmul>
 800bc12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc16:	1124      	asrs	r4, r4, #4
 800bc18:	2300      	movs	r3, #0
 800bc1a:	2602      	movs	r6, #2
 800bc1c:	2c00      	cmp	r4, #0
 800bc1e:	f040 80b2 	bne.w	800bd86 <_dtoa_r+0x4fe>
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1d3      	bne.n	800bbce <_dtoa_r+0x346>
 800bc26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f000 80b7 	beq.w	800bda0 <_dtoa_r+0x518>
 800bc32:	4b86      	ldr	r3, [pc, #536]	@ (800be4c <_dtoa_r+0x5c4>)
 800bc34:	2200      	movs	r2, #0
 800bc36:	4620      	mov	r0, r4
 800bc38:	4629      	mov	r1, r5
 800bc3a:	f7f4 ff4f 	bl	8000adc <__aeabi_dcmplt>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	f000 80ae 	beq.w	800bda0 <_dtoa_r+0x518>
 800bc44:	9b07      	ldr	r3, [sp, #28]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f000 80aa 	beq.w	800bda0 <_dtoa_r+0x518>
 800bc4c:	9b00      	ldr	r3, [sp, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	dd37      	ble.n	800bcc2 <_dtoa_r+0x43a>
 800bc52:	1e7b      	subs	r3, r7, #1
 800bc54:	9304      	str	r3, [sp, #16]
 800bc56:	4620      	mov	r0, r4
 800bc58:	4b7d      	ldr	r3, [pc, #500]	@ (800be50 <_dtoa_r+0x5c8>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	f7f4 fccb 	bl	80005f8 <__aeabi_dmul>
 800bc62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc66:	9c00      	ldr	r4, [sp, #0]
 800bc68:	3601      	adds	r6, #1
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	f7f4 fc5a 	bl	8000524 <__aeabi_i2d>
 800bc70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc74:	f7f4 fcc0 	bl	80005f8 <__aeabi_dmul>
 800bc78:	4b76      	ldr	r3, [pc, #472]	@ (800be54 <_dtoa_r+0x5cc>)
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f7f4 fb06 	bl	800028c <__adddf3>
 800bc80:	4605      	mov	r5, r0
 800bc82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bc86:	2c00      	cmp	r4, #0
 800bc88:	f040 808d 	bne.w	800bda6 <_dtoa_r+0x51e>
 800bc8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc90:	4b71      	ldr	r3, [pc, #452]	@ (800be58 <_dtoa_r+0x5d0>)
 800bc92:	2200      	movs	r2, #0
 800bc94:	f7f4 faf8 	bl	8000288 <__aeabi_dsub>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bca0:	462a      	mov	r2, r5
 800bca2:	4633      	mov	r3, r6
 800bca4:	f7f4 ff38 	bl	8000b18 <__aeabi_dcmpgt>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	f040 828b 	bne.w	800c1c4 <_dtoa_r+0x93c>
 800bcae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcb2:	462a      	mov	r2, r5
 800bcb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bcb8:	f7f4 ff10 	bl	8000adc <__aeabi_dcmplt>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	f040 8128 	bne.w	800bf12 <_dtoa_r+0x68a>
 800bcc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bcc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bcca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f2c0 815a 	blt.w	800bf86 <_dtoa_r+0x6fe>
 800bcd2:	2f0e      	cmp	r7, #14
 800bcd4:	f300 8157 	bgt.w	800bf86 <_dtoa_r+0x6fe>
 800bcd8:	4b5a      	ldr	r3, [pc, #360]	@ (800be44 <_dtoa_r+0x5bc>)
 800bcda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bcde:	ed93 7b00 	vldr	d7, [r3]
 800bce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	ed8d 7b00 	vstr	d7, [sp]
 800bcea:	da03      	bge.n	800bcf4 <_dtoa_r+0x46c>
 800bcec:	9b07      	ldr	r3, [sp, #28]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f340 8101 	ble.w	800bef6 <_dtoa_r+0x66e>
 800bcf4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bcf8:	4656      	mov	r6, sl
 800bcfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcfe:	4620      	mov	r0, r4
 800bd00:	4629      	mov	r1, r5
 800bd02:	f7f4 fda3 	bl	800084c <__aeabi_ddiv>
 800bd06:	f7f4 ff27 	bl	8000b58 <__aeabi_d2iz>
 800bd0a:	4680      	mov	r8, r0
 800bd0c:	f7f4 fc0a 	bl	8000524 <__aeabi_i2d>
 800bd10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd14:	f7f4 fc70 	bl	80005f8 <__aeabi_dmul>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	4629      	mov	r1, r5
 800bd20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bd24:	f7f4 fab0 	bl	8000288 <__aeabi_dsub>
 800bd28:	f806 4b01 	strb.w	r4, [r6], #1
 800bd2c:	9d07      	ldr	r5, [sp, #28]
 800bd2e:	eba6 040a 	sub.w	r4, r6, sl
 800bd32:	42a5      	cmp	r5, r4
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	f040 8117 	bne.w	800bf6a <_dtoa_r+0x6e2>
 800bd3c:	f7f4 faa6 	bl	800028c <__adddf3>
 800bd40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd44:	4604      	mov	r4, r0
 800bd46:	460d      	mov	r5, r1
 800bd48:	f7f4 fee6 	bl	8000b18 <__aeabi_dcmpgt>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	f040 80f9 	bne.w	800bf44 <_dtoa_r+0x6bc>
 800bd52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd56:	4620      	mov	r0, r4
 800bd58:	4629      	mov	r1, r5
 800bd5a:	f7f4 feb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd5e:	b118      	cbz	r0, 800bd68 <_dtoa_r+0x4e0>
 800bd60:	f018 0f01 	tst.w	r8, #1
 800bd64:	f040 80ee 	bne.w	800bf44 <_dtoa_r+0x6bc>
 800bd68:	4649      	mov	r1, r9
 800bd6a:	4658      	mov	r0, fp
 800bd6c:	f000 fc90 	bl	800c690 <_Bfree>
 800bd70:	2300      	movs	r3, #0
 800bd72:	7033      	strb	r3, [r6, #0]
 800bd74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd76:	3701      	adds	r7, #1
 800bd78:	601f      	str	r7, [r3, #0]
 800bd7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f000 831d 	beq.w	800c3bc <_dtoa_r+0xb34>
 800bd82:	601e      	str	r6, [r3, #0]
 800bd84:	e31a      	b.n	800c3bc <_dtoa_r+0xb34>
 800bd86:	07e2      	lsls	r2, r4, #31
 800bd88:	d505      	bpl.n	800bd96 <_dtoa_r+0x50e>
 800bd8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd8e:	f7f4 fc33 	bl	80005f8 <__aeabi_dmul>
 800bd92:	3601      	adds	r6, #1
 800bd94:	2301      	movs	r3, #1
 800bd96:	1064      	asrs	r4, r4, #1
 800bd98:	3508      	adds	r5, #8
 800bd9a:	e73f      	b.n	800bc1c <_dtoa_r+0x394>
 800bd9c:	2602      	movs	r6, #2
 800bd9e:	e742      	b.n	800bc26 <_dtoa_r+0x39e>
 800bda0:	9c07      	ldr	r4, [sp, #28]
 800bda2:	9704      	str	r7, [sp, #16]
 800bda4:	e761      	b.n	800bc6a <_dtoa_r+0x3e2>
 800bda6:	4b27      	ldr	r3, [pc, #156]	@ (800be44 <_dtoa_r+0x5bc>)
 800bda8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bdaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdb2:	4454      	add	r4, sl
 800bdb4:	2900      	cmp	r1, #0
 800bdb6:	d053      	beq.n	800be60 <_dtoa_r+0x5d8>
 800bdb8:	4928      	ldr	r1, [pc, #160]	@ (800be5c <_dtoa_r+0x5d4>)
 800bdba:	2000      	movs	r0, #0
 800bdbc:	f7f4 fd46 	bl	800084c <__aeabi_ddiv>
 800bdc0:	4633      	mov	r3, r6
 800bdc2:	462a      	mov	r2, r5
 800bdc4:	f7f4 fa60 	bl	8000288 <__aeabi_dsub>
 800bdc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdcc:	4656      	mov	r6, sl
 800bdce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdd2:	f7f4 fec1 	bl	8000b58 <__aeabi_d2iz>
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	f7f4 fba4 	bl	8000524 <__aeabi_i2d>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bde4:	f7f4 fa50 	bl	8000288 <__aeabi_dsub>
 800bde8:	3530      	adds	r5, #48	@ 0x30
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdf2:	f806 5b01 	strb.w	r5, [r6], #1
 800bdf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdfa:	f7f4 fe6f 	bl	8000adc <__aeabi_dcmplt>
 800bdfe:	2800      	cmp	r0, #0
 800be00:	d171      	bne.n	800bee6 <_dtoa_r+0x65e>
 800be02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be06:	4911      	ldr	r1, [pc, #68]	@ (800be4c <_dtoa_r+0x5c4>)
 800be08:	2000      	movs	r0, #0
 800be0a:	f7f4 fa3d 	bl	8000288 <__aeabi_dsub>
 800be0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be12:	f7f4 fe63 	bl	8000adc <__aeabi_dcmplt>
 800be16:	2800      	cmp	r0, #0
 800be18:	f040 8095 	bne.w	800bf46 <_dtoa_r+0x6be>
 800be1c:	42a6      	cmp	r6, r4
 800be1e:	f43f af50 	beq.w	800bcc2 <_dtoa_r+0x43a>
 800be22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be26:	4b0a      	ldr	r3, [pc, #40]	@ (800be50 <_dtoa_r+0x5c8>)
 800be28:	2200      	movs	r2, #0
 800be2a:	f7f4 fbe5 	bl	80005f8 <__aeabi_dmul>
 800be2e:	4b08      	ldr	r3, [pc, #32]	@ (800be50 <_dtoa_r+0x5c8>)
 800be30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be34:	2200      	movs	r2, #0
 800be36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be3a:	f7f4 fbdd 	bl	80005f8 <__aeabi_dmul>
 800be3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be42:	e7c4      	b.n	800bdce <_dtoa_r+0x546>
 800be44:	0800ecf8 	.word	0x0800ecf8
 800be48:	0800ecd0 	.word	0x0800ecd0
 800be4c:	3ff00000 	.word	0x3ff00000
 800be50:	40240000 	.word	0x40240000
 800be54:	401c0000 	.word	0x401c0000
 800be58:	40140000 	.word	0x40140000
 800be5c:	3fe00000 	.word	0x3fe00000
 800be60:	4631      	mov	r1, r6
 800be62:	4628      	mov	r0, r5
 800be64:	f7f4 fbc8 	bl	80005f8 <__aeabi_dmul>
 800be68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be6c:	9415      	str	r4, [sp, #84]	@ 0x54
 800be6e:	4656      	mov	r6, sl
 800be70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be74:	f7f4 fe70 	bl	8000b58 <__aeabi_d2iz>
 800be78:	4605      	mov	r5, r0
 800be7a:	f7f4 fb53 	bl	8000524 <__aeabi_i2d>
 800be7e:	4602      	mov	r2, r0
 800be80:	460b      	mov	r3, r1
 800be82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be86:	f7f4 f9ff 	bl	8000288 <__aeabi_dsub>
 800be8a:	3530      	adds	r5, #48	@ 0x30
 800be8c:	f806 5b01 	strb.w	r5, [r6], #1
 800be90:	4602      	mov	r2, r0
 800be92:	460b      	mov	r3, r1
 800be94:	42a6      	cmp	r6, r4
 800be96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be9a:	f04f 0200 	mov.w	r2, #0
 800be9e:	d124      	bne.n	800beea <_dtoa_r+0x662>
 800bea0:	4bac      	ldr	r3, [pc, #688]	@ (800c154 <_dtoa_r+0x8cc>)
 800bea2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bea6:	f7f4 f9f1 	bl	800028c <__adddf3>
 800beaa:	4602      	mov	r2, r0
 800beac:	460b      	mov	r3, r1
 800beae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beb2:	f7f4 fe31 	bl	8000b18 <__aeabi_dcmpgt>
 800beb6:	2800      	cmp	r0, #0
 800beb8:	d145      	bne.n	800bf46 <_dtoa_r+0x6be>
 800beba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bebe:	49a5      	ldr	r1, [pc, #660]	@ (800c154 <_dtoa_r+0x8cc>)
 800bec0:	2000      	movs	r0, #0
 800bec2:	f7f4 f9e1 	bl	8000288 <__aeabi_dsub>
 800bec6:	4602      	mov	r2, r0
 800bec8:	460b      	mov	r3, r1
 800beca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bece:	f7f4 fe05 	bl	8000adc <__aeabi_dcmplt>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	f43f aef5 	beq.w	800bcc2 <_dtoa_r+0x43a>
 800bed8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800beda:	1e73      	subs	r3, r6, #1
 800bedc:	9315      	str	r3, [sp, #84]	@ 0x54
 800bede:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bee2:	2b30      	cmp	r3, #48	@ 0x30
 800bee4:	d0f8      	beq.n	800bed8 <_dtoa_r+0x650>
 800bee6:	9f04      	ldr	r7, [sp, #16]
 800bee8:	e73e      	b.n	800bd68 <_dtoa_r+0x4e0>
 800beea:	4b9b      	ldr	r3, [pc, #620]	@ (800c158 <_dtoa_r+0x8d0>)
 800beec:	f7f4 fb84 	bl	80005f8 <__aeabi_dmul>
 800bef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bef4:	e7bc      	b.n	800be70 <_dtoa_r+0x5e8>
 800bef6:	d10c      	bne.n	800bf12 <_dtoa_r+0x68a>
 800bef8:	4b98      	ldr	r3, [pc, #608]	@ (800c15c <_dtoa_r+0x8d4>)
 800befa:	2200      	movs	r2, #0
 800befc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf00:	f7f4 fb7a 	bl	80005f8 <__aeabi_dmul>
 800bf04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf08:	f7f4 fdfc 	bl	8000b04 <__aeabi_dcmpge>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	f000 8157 	beq.w	800c1c0 <_dtoa_r+0x938>
 800bf12:	2400      	movs	r4, #0
 800bf14:	4625      	mov	r5, r4
 800bf16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf18:	43db      	mvns	r3, r3
 800bf1a:	9304      	str	r3, [sp, #16]
 800bf1c:	4656      	mov	r6, sl
 800bf1e:	2700      	movs	r7, #0
 800bf20:	4621      	mov	r1, r4
 800bf22:	4658      	mov	r0, fp
 800bf24:	f000 fbb4 	bl	800c690 <_Bfree>
 800bf28:	2d00      	cmp	r5, #0
 800bf2a:	d0dc      	beq.n	800bee6 <_dtoa_r+0x65e>
 800bf2c:	b12f      	cbz	r7, 800bf3a <_dtoa_r+0x6b2>
 800bf2e:	42af      	cmp	r7, r5
 800bf30:	d003      	beq.n	800bf3a <_dtoa_r+0x6b2>
 800bf32:	4639      	mov	r1, r7
 800bf34:	4658      	mov	r0, fp
 800bf36:	f000 fbab 	bl	800c690 <_Bfree>
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	4658      	mov	r0, fp
 800bf3e:	f000 fba7 	bl	800c690 <_Bfree>
 800bf42:	e7d0      	b.n	800bee6 <_dtoa_r+0x65e>
 800bf44:	9704      	str	r7, [sp, #16]
 800bf46:	4633      	mov	r3, r6
 800bf48:	461e      	mov	r6, r3
 800bf4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf4e:	2a39      	cmp	r2, #57	@ 0x39
 800bf50:	d107      	bne.n	800bf62 <_dtoa_r+0x6da>
 800bf52:	459a      	cmp	sl, r3
 800bf54:	d1f8      	bne.n	800bf48 <_dtoa_r+0x6c0>
 800bf56:	9a04      	ldr	r2, [sp, #16]
 800bf58:	3201      	adds	r2, #1
 800bf5a:	9204      	str	r2, [sp, #16]
 800bf5c:	2230      	movs	r2, #48	@ 0x30
 800bf5e:	f88a 2000 	strb.w	r2, [sl]
 800bf62:	781a      	ldrb	r2, [r3, #0]
 800bf64:	3201      	adds	r2, #1
 800bf66:	701a      	strb	r2, [r3, #0]
 800bf68:	e7bd      	b.n	800bee6 <_dtoa_r+0x65e>
 800bf6a:	4b7b      	ldr	r3, [pc, #492]	@ (800c158 <_dtoa_r+0x8d0>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f7f4 fb43 	bl	80005f8 <__aeabi_dmul>
 800bf72:	2200      	movs	r2, #0
 800bf74:	2300      	movs	r3, #0
 800bf76:	4604      	mov	r4, r0
 800bf78:	460d      	mov	r5, r1
 800bf7a:	f7f4 fda5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	f43f aebb 	beq.w	800bcfa <_dtoa_r+0x472>
 800bf84:	e6f0      	b.n	800bd68 <_dtoa_r+0x4e0>
 800bf86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf88:	2a00      	cmp	r2, #0
 800bf8a:	f000 80db 	beq.w	800c144 <_dtoa_r+0x8bc>
 800bf8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf90:	2a01      	cmp	r2, #1
 800bf92:	f300 80bf 	bgt.w	800c114 <_dtoa_r+0x88c>
 800bf96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf98:	2a00      	cmp	r2, #0
 800bf9a:	f000 80b7 	beq.w	800c10c <_dtoa_r+0x884>
 800bf9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bfa2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bfa4:	4646      	mov	r6, r8
 800bfa6:	9a08      	ldr	r2, [sp, #32]
 800bfa8:	2101      	movs	r1, #1
 800bfaa:	441a      	add	r2, r3
 800bfac:	4658      	mov	r0, fp
 800bfae:	4498      	add	r8, r3
 800bfb0:	9208      	str	r2, [sp, #32]
 800bfb2:	f000 fc21 	bl	800c7f8 <__i2b>
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	b15e      	cbz	r6, 800bfd2 <_dtoa_r+0x74a>
 800bfba:	9b08      	ldr	r3, [sp, #32]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	dd08      	ble.n	800bfd2 <_dtoa_r+0x74a>
 800bfc0:	42b3      	cmp	r3, r6
 800bfc2:	9a08      	ldr	r2, [sp, #32]
 800bfc4:	bfa8      	it	ge
 800bfc6:	4633      	movge	r3, r6
 800bfc8:	eba8 0803 	sub.w	r8, r8, r3
 800bfcc:	1af6      	subs	r6, r6, r3
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	9308      	str	r3, [sp, #32]
 800bfd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfd4:	b1f3      	cbz	r3, 800c014 <_dtoa_r+0x78c>
 800bfd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f000 80b7 	beq.w	800c14c <_dtoa_r+0x8c4>
 800bfde:	b18c      	cbz	r4, 800c004 <_dtoa_r+0x77c>
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	4622      	mov	r2, r4
 800bfe4:	4658      	mov	r0, fp
 800bfe6:	f000 fcc7 	bl	800c978 <__pow5mult>
 800bfea:	464a      	mov	r2, r9
 800bfec:	4601      	mov	r1, r0
 800bfee:	4605      	mov	r5, r0
 800bff0:	4658      	mov	r0, fp
 800bff2:	f000 fc17 	bl	800c824 <__multiply>
 800bff6:	4649      	mov	r1, r9
 800bff8:	9004      	str	r0, [sp, #16]
 800bffa:	4658      	mov	r0, fp
 800bffc:	f000 fb48 	bl	800c690 <_Bfree>
 800c000:	9b04      	ldr	r3, [sp, #16]
 800c002:	4699      	mov	r9, r3
 800c004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c006:	1b1a      	subs	r2, r3, r4
 800c008:	d004      	beq.n	800c014 <_dtoa_r+0x78c>
 800c00a:	4649      	mov	r1, r9
 800c00c:	4658      	mov	r0, fp
 800c00e:	f000 fcb3 	bl	800c978 <__pow5mult>
 800c012:	4681      	mov	r9, r0
 800c014:	2101      	movs	r1, #1
 800c016:	4658      	mov	r0, fp
 800c018:	f000 fbee 	bl	800c7f8 <__i2b>
 800c01c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c01e:	4604      	mov	r4, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	f000 81cf 	beq.w	800c3c4 <_dtoa_r+0xb3c>
 800c026:	461a      	mov	r2, r3
 800c028:	4601      	mov	r1, r0
 800c02a:	4658      	mov	r0, fp
 800c02c:	f000 fca4 	bl	800c978 <__pow5mult>
 800c030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c032:	2b01      	cmp	r3, #1
 800c034:	4604      	mov	r4, r0
 800c036:	f300 8095 	bgt.w	800c164 <_dtoa_r+0x8dc>
 800c03a:	9b02      	ldr	r3, [sp, #8]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f040 8087 	bne.w	800c150 <_dtoa_r+0x8c8>
 800c042:	9b03      	ldr	r3, [sp, #12]
 800c044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f040 8089 	bne.w	800c160 <_dtoa_r+0x8d8>
 800c04e:	9b03      	ldr	r3, [sp, #12]
 800c050:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c054:	0d1b      	lsrs	r3, r3, #20
 800c056:	051b      	lsls	r3, r3, #20
 800c058:	b12b      	cbz	r3, 800c066 <_dtoa_r+0x7de>
 800c05a:	9b08      	ldr	r3, [sp, #32]
 800c05c:	3301      	adds	r3, #1
 800c05e:	9308      	str	r3, [sp, #32]
 800c060:	f108 0801 	add.w	r8, r8, #1
 800c064:	2301      	movs	r3, #1
 800c066:	930a      	str	r3, [sp, #40]	@ 0x28
 800c068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 81b0 	beq.w	800c3d0 <_dtoa_r+0xb48>
 800c070:	6923      	ldr	r3, [r4, #16]
 800c072:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c076:	6918      	ldr	r0, [r3, #16]
 800c078:	f000 fb72 	bl	800c760 <__hi0bits>
 800c07c:	f1c0 0020 	rsb	r0, r0, #32
 800c080:	9b08      	ldr	r3, [sp, #32]
 800c082:	4418      	add	r0, r3
 800c084:	f010 001f 	ands.w	r0, r0, #31
 800c088:	d077      	beq.n	800c17a <_dtoa_r+0x8f2>
 800c08a:	f1c0 0320 	rsb	r3, r0, #32
 800c08e:	2b04      	cmp	r3, #4
 800c090:	dd6b      	ble.n	800c16a <_dtoa_r+0x8e2>
 800c092:	9b08      	ldr	r3, [sp, #32]
 800c094:	f1c0 001c 	rsb	r0, r0, #28
 800c098:	4403      	add	r3, r0
 800c09a:	4480      	add	r8, r0
 800c09c:	4406      	add	r6, r0
 800c09e:	9308      	str	r3, [sp, #32]
 800c0a0:	f1b8 0f00 	cmp.w	r8, #0
 800c0a4:	dd05      	ble.n	800c0b2 <_dtoa_r+0x82a>
 800c0a6:	4649      	mov	r1, r9
 800c0a8:	4642      	mov	r2, r8
 800c0aa:	4658      	mov	r0, fp
 800c0ac:	f000 fcbe 	bl	800ca2c <__lshift>
 800c0b0:	4681      	mov	r9, r0
 800c0b2:	9b08      	ldr	r3, [sp, #32]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	dd05      	ble.n	800c0c4 <_dtoa_r+0x83c>
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	4658      	mov	r0, fp
 800c0be:	f000 fcb5 	bl	800ca2c <__lshift>
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d059      	beq.n	800c17e <_dtoa_r+0x8f6>
 800c0ca:	4621      	mov	r1, r4
 800c0cc:	4648      	mov	r0, r9
 800c0ce:	f000 fd19 	bl	800cb04 <__mcmp>
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	da53      	bge.n	800c17e <_dtoa_r+0x8f6>
 800c0d6:	1e7b      	subs	r3, r7, #1
 800c0d8:	9304      	str	r3, [sp, #16]
 800c0da:	4649      	mov	r1, r9
 800c0dc:	2300      	movs	r3, #0
 800c0de:	220a      	movs	r2, #10
 800c0e0:	4658      	mov	r0, fp
 800c0e2:	f000 faf7 	bl	800c6d4 <__multadd>
 800c0e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0e8:	4681      	mov	r9, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f000 8172 	beq.w	800c3d4 <_dtoa_r+0xb4c>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	220a      	movs	r2, #10
 800c0f6:	4658      	mov	r0, fp
 800c0f8:	f000 faec 	bl	800c6d4 <__multadd>
 800c0fc:	9b00      	ldr	r3, [sp, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	4605      	mov	r5, r0
 800c102:	dc67      	bgt.n	800c1d4 <_dtoa_r+0x94c>
 800c104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c106:	2b02      	cmp	r3, #2
 800c108:	dc41      	bgt.n	800c18e <_dtoa_r+0x906>
 800c10a:	e063      	b.n	800c1d4 <_dtoa_r+0x94c>
 800c10c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c10e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c112:	e746      	b.n	800bfa2 <_dtoa_r+0x71a>
 800c114:	9b07      	ldr	r3, [sp, #28]
 800c116:	1e5c      	subs	r4, r3, #1
 800c118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c11a:	42a3      	cmp	r3, r4
 800c11c:	bfbf      	itttt	lt
 800c11e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c120:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c122:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c124:	1ae3      	sublt	r3, r4, r3
 800c126:	bfb4      	ite	lt
 800c128:	18d2      	addlt	r2, r2, r3
 800c12a:	1b1c      	subge	r4, r3, r4
 800c12c:	9b07      	ldr	r3, [sp, #28]
 800c12e:	bfbc      	itt	lt
 800c130:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c132:	2400      	movlt	r4, #0
 800c134:	2b00      	cmp	r3, #0
 800c136:	bfb5      	itete	lt
 800c138:	eba8 0603 	sublt.w	r6, r8, r3
 800c13c:	9b07      	ldrge	r3, [sp, #28]
 800c13e:	2300      	movlt	r3, #0
 800c140:	4646      	movge	r6, r8
 800c142:	e730      	b.n	800bfa6 <_dtoa_r+0x71e>
 800c144:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c146:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c148:	4646      	mov	r6, r8
 800c14a:	e735      	b.n	800bfb8 <_dtoa_r+0x730>
 800c14c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c14e:	e75c      	b.n	800c00a <_dtoa_r+0x782>
 800c150:	2300      	movs	r3, #0
 800c152:	e788      	b.n	800c066 <_dtoa_r+0x7de>
 800c154:	3fe00000 	.word	0x3fe00000
 800c158:	40240000 	.word	0x40240000
 800c15c:	40140000 	.word	0x40140000
 800c160:	9b02      	ldr	r3, [sp, #8]
 800c162:	e780      	b.n	800c066 <_dtoa_r+0x7de>
 800c164:	2300      	movs	r3, #0
 800c166:	930a      	str	r3, [sp, #40]	@ 0x28
 800c168:	e782      	b.n	800c070 <_dtoa_r+0x7e8>
 800c16a:	d099      	beq.n	800c0a0 <_dtoa_r+0x818>
 800c16c:	9a08      	ldr	r2, [sp, #32]
 800c16e:	331c      	adds	r3, #28
 800c170:	441a      	add	r2, r3
 800c172:	4498      	add	r8, r3
 800c174:	441e      	add	r6, r3
 800c176:	9208      	str	r2, [sp, #32]
 800c178:	e792      	b.n	800c0a0 <_dtoa_r+0x818>
 800c17a:	4603      	mov	r3, r0
 800c17c:	e7f6      	b.n	800c16c <_dtoa_r+0x8e4>
 800c17e:	9b07      	ldr	r3, [sp, #28]
 800c180:	9704      	str	r7, [sp, #16]
 800c182:	2b00      	cmp	r3, #0
 800c184:	dc20      	bgt.n	800c1c8 <_dtoa_r+0x940>
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	dd1e      	ble.n	800c1cc <_dtoa_r+0x944>
 800c18e:	9b00      	ldr	r3, [sp, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	f47f aec0 	bne.w	800bf16 <_dtoa_r+0x68e>
 800c196:	4621      	mov	r1, r4
 800c198:	2205      	movs	r2, #5
 800c19a:	4658      	mov	r0, fp
 800c19c:	f000 fa9a 	bl	800c6d4 <__multadd>
 800c1a0:	4601      	mov	r1, r0
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	4648      	mov	r0, r9
 800c1a6:	f000 fcad 	bl	800cb04 <__mcmp>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	f77f aeb3 	ble.w	800bf16 <_dtoa_r+0x68e>
 800c1b0:	4656      	mov	r6, sl
 800c1b2:	2331      	movs	r3, #49	@ 0x31
 800c1b4:	f806 3b01 	strb.w	r3, [r6], #1
 800c1b8:	9b04      	ldr	r3, [sp, #16]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	9304      	str	r3, [sp, #16]
 800c1be:	e6ae      	b.n	800bf1e <_dtoa_r+0x696>
 800c1c0:	9c07      	ldr	r4, [sp, #28]
 800c1c2:	9704      	str	r7, [sp, #16]
 800c1c4:	4625      	mov	r5, r4
 800c1c6:	e7f3      	b.n	800c1b0 <_dtoa_r+0x928>
 800c1c8:	9b07      	ldr	r3, [sp, #28]
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f000 8104 	beq.w	800c3dc <_dtoa_r+0xb54>
 800c1d4:	2e00      	cmp	r6, #0
 800c1d6:	dd05      	ble.n	800c1e4 <_dtoa_r+0x95c>
 800c1d8:	4629      	mov	r1, r5
 800c1da:	4632      	mov	r2, r6
 800c1dc:	4658      	mov	r0, fp
 800c1de:	f000 fc25 	bl	800ca2c <__lshift>
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d05a      	beq.n	800c2a0 <_dtoa_r+0xa18>
 800c1ea:	6869      	ldr	r1, [r5, #4]
 800c1ec:	4658      	mov	r0, fp
 800c1ee:	f000 fa0f 	bl	800c610 <_Balloc>
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	b928      	cbnz	r0, 800c202 <_dtoa_r+0x97a>
 800c1f6:	4b84      	ldr	r3, [pc, #528]	@ (800c408 <_dtoa_r+0xb80>)
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c1fe:	f7ff bb5a 	b.w	800b8b6 <_dtoa_r+0x2e>
 800c202:	692a      	ldr	r2, [r5, #16]
 800c204:	3202      	adds	r2, #2
 800c206:	0092      	lsls	r2, r2, #2
 800c208:	f105 010c 	add.w	r1, r5, #12
 800c20c:	300c      	adds	r0, #12
 800c20e:	f7ff faa2 	bl	800b756 <memcpy>
 800c212:	2201      	movs	r2, #1
 800c214:	4631      	mov	r1, r6
 800c216:	4658      	mov	r0, fp
 800c218:	f000 fc08 	bl	800ca2c <__lshift>
 800c21c:	f10a 0301 	add.w	r3, sl, #1
 800c220:	9307      	str	r3, [sp, #28]
 800c222:	9b00      	ldr	r3, [sp, #0]
 800c224:	4453      	add	r3, sl
 800c226:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c228:	9b02      	ldr	r3, [sp, #8]
 800c22a:	f003 0301 	and.w	r3, r3, #1
 800c22e:	462f      	mov	r7, r5
 800c230:	930a      	str	r3, [sp, #40]	@ 0x28
 800c232:	4605      	mov	r5, r0
 800c234:	9b07      	ldr	r3, [sp, #28]
 800c236:	4621      	mov	r1, r4
 800c238:	3b01      	subs	r3, #1
 800c23a:	4648      	mov	r0, r9
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	f7ff fa98 	bl	800b772 <quorem>
 800c242:	4639      	mov	r1, r7
 800c244:	9002      	str	r0, [sp, #8]
 800c246:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c24a:	4648      	mov	r0, r9
 800c24c:	f000 fc5a 	bl	800cb04 <__mcmp>
 800c250:	462a      	mov	r2, r5
 800c252:	9008      	str	r0, [sp, #32]
 800c254:	4621      	mov	r1, r4
 800c256:	4658      	mov	r0, fp
 800c258:	f000 fc70 	bl	800cb3c <__mdiff>
 800c25c:	68c2      	ldr	r2, [r0, #12]
 800c25e:	4606      	mov	r6, r0
 800c260:	bb02      	cbnz	r2, 800c2a4 <_dtoa_r+0xa1c>
 800c262:	4601      	mov	r1, r0
 800c264:	4648      	mov	r0, r9
 800c266:	f000 fc4d 	bl	800cb04 <__mcmp>
 800c26a:	4602      	mov	r2, r0
 800c26c:	4631      	mov	r1, r6
 800c26e:	4658      	mov	r0, fp
 800c270:	920e      	str	r2, [sp, #56]	@ 0x38
 800c272:	f000 fa0d 	bl	800c690 <_Bfree>
 800c276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c278:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c27a:	9e07      	ldr	r6, [sp, #28]
 800c27c:	ea43 0102 	orr.w	r1, r3, r2
 800c280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c282:	4319      	orrs	r1, r3
 800c284:	d110      	bne.n	800c2a8 <_dtoa_r+0xa20>
 800c286:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c28a:	d029      	beq.n	800c2e0 <_dtoa_r+0xa58>
 800c28c:	9b08      	ldr	r3, [sp, #32]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	dd02      	ble.n	800c298 <_dtoa_r+0xa10>
 800c292:	9b02      	ldr	r3, [sp, #8]
 800c294:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c298:	9b00      	ldr	r3, [sp, #0]
 800c29a:	f883 8000 	strb.w	r8, [r3]
 800c29e:	e63f      	b.n	800bf20 <_dtoa_r+0x698>
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	e7bb      	b.n	800c21c <_dtoa_r+0x994>
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	e7e1      	b.n	800c26c <_dtoa_r+0x9e4>
 800c2a8:	9b08      	ldr	r3, [sp, #32]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	db04      	blt.n	800c2b8 <_dtoa_r+0xa30>
 800c2ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2b0:	430b      	orrs	r3, r1
 800c2b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c2b4:	430b      	orrs	r3, r1
 800c2b6:	d120      	bne.n	800c2fa <_dtoa_r+0xa72>
 800c2b8:	2a00      	cmp	r2, #0
 800c2ba:	dded      	ble.n	800c298 <_dtoa_r+0xa10>
 800c2bc:	4649      	mov	r1, r9
 800c2be:	2201      	movs	r2, #1
 800c2c0:	4658      	mov	r0, fp
 800c2c2:	f000 fbb3 	bl	800ca2c <__lshift>
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4681      	mov	r9, r0
 800c2ca:	f000 fc1b 	bl	800cb04 <__mcmp>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	dc03      	bgt.n	800c2da <_dtoa_r+0xa52>
 800c2d2:	d1e1      	bne.n	800c298 <_dtoa_r+0xa10>
 800c2d4:	f018 0f01 	tst.w	r8, #1
 800c2d8:	d0de      	beq.n	800c298 <_dtoa_r+0xa10>
 800c2da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2de:	d1d8      	bne.n	800c292 <_dtoa_r+0xa0a>
 800c2e0:	9a00      	ldr	r2, [sp, #0]
 800c2e2:	2339      	movs	r3, #57	@ 0x39
 800c2e4:	7013      	strb	r3, [r2, #0]
 800c2e6:	4633      	mov	r3, r6
 800c2e8:	461e      	mov	r6, r3
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c2f0:	2a39      	cmp	r2, #57	@ 0x39
 800c2f2:	d052      	beq.n	800c39a <_dtoa_r+0xb12>
 800c2f4:	3201      	adds	r2, #1
 800c2f6:	701a      	strb	r2, [r3, #0]
 800c2f8:	e612      	b.n	800bf20 <_dtoa_r+0x698>
 800c2fa:	2a00      	cmp	r2, #0
 800c2fc:	dd07      	ble.n	800c30e <_dtoa_r+0xa86>
 800c2fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c302:	d0ed      	beq.n	800c2e0 <_dtoa_r+0xa58>
 800c304:	9a00      	ldr	r2, [sp, #0]
 800c306:	f108 0301 	add.w	r3, r8, #1
 800c30a:	7013      	strb	r3, [r2, #0]
 800c30c:	e608      	b.n	800bf20 <_dtoa_r+0x698>
 800c30e:	9b07      	ldr	r3, [sp, #28]
 800c310:	9a07      	ldr	r2, [sp, #28]
 800c312:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c318:	4293      	cmp	r3, r2
 800c31a:	d028      	beq.n	800c36e <_dtoa_r+0xae6>
 800c31c:	4649      	mov	r1, r9
 800c31e:	2300      	movs	r3, #0
 800c320:	220a      	movs	r2, #10
 800c322:	4658      	mov	r0, fp
 800c324:	f000 f9d6 	bl	800c6d4 <__multadd>
 800c328:	42af      	cmp	r7, r5
 800c32a:	4681      	mov	r9, r0
 800c32c:	f04f 0300 	mov.w	r3, #0
 800c330:	f04f 020a 	mov.w	r2, #10
 800c334:	4639      	mov	r1, r7
 800c336:	4658      	mov	r0, fp
 800c338:	d107      	bne.n	800c34a <_dtoa_r+0xac2>
 800c33a:	f000 f9cb 	bl	800c6d4 <__multadd>
 800c33e:	4607      	mov	r7, r0
 800c340:	4605      	mov	r5, r0
 800c342:	9b07      	ldr	r3, [sp, #28]
 800c344:	3301      	adds	r3, #1
 800c346:	9307      	str	r3, [sp, #28]
 800c348:	e774      	b.n	800c234 <_dtoa_r+0x9ac>
 800c34a:	f000 f9c3 	bl	800c6d4 <__multadd>
 800c34e:	4629      	mov	r1, r5
 800c350:	4607      	mov	r7, r0
 800c352:	2300      	movs	r3, #0
 800c354:	220a      	movs	r2, #10
 800c356:	4658      	mov	r0, fp
 800c358:	f000 f9bc 	bl	800c6d4 <__multadd>
 800c35c:	4605      	mov	r5, r0
 800c35e:	e7f0      	b.n	800c342 <_dtoa_r+0xaba>
 800c360:	9b00      	ldr	r3, [sp, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	bfcc      	ite	gt
 800c366:	461e      	movgt	r6, r3
 800c368:	2601      	movle	r6, #1
 800c36a:	4456      	add	r6, sl
 800c36c:	2700      	movs	r7, #0
 800c36e:	4649      	mov	r1, r9
 800c370:	2201      	movs	r2, #1
 800c372:	4658      	mov	r0, fp
 800c374:	f000 fb5a 	bl	800ca2c <__lshift>
 800c378:	4621      	mov	r1, r4
 800c37a:	4681      	mov	r9, r0
 800c37c:	f000 fbc2 	bl	800cb04 <__mcmp>
 800c380:	2800      	cmp	r0, #0
 800c382:	dcb0      	bgt.n	800c2e6 <_dtoa_r+0xa5e>
 800c384:	d102      	bne.n	800c38c <_dtoa_r+0xb04>
 800c386:	f018 0f01 	tst.w	r8, #1
 800c38a:	d1ac      	bne.n	800c2e6 <_dtoa_r+0xa5e>
 800c38c:	4633      	mov	r3, r6
 800c38e:	461e      	mov	r6, r3
 800c390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c394:	2a30      	cmp	r2, #48	@ 0x30
 800c396:	d0fa      	beq.n	800c38e <_dtoa_r+0xb06>
 800c398:	e5c2      	b.n	800bf20 <_dtoa_r+0x698>
 800c39a:	459a      	cmp	sl, r3
 800c39c:	d1a4      	bne.n	800c2e8 <_dtoa_r+0xa60>
 800c39e:	9b04      	ldr	r3, [sp, #16]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	9304      	str	r3, [sp, #16]
 800c3a4:	2331      	movs	r3, #49	@ 0x31
 800c3a6:	f88a 3000 	strb.w	r3, [sl]
 800c3aa:	e5b9      	b.n	800bf20 <_dtoa_r+0x698>
 800c3ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c3ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c40c <_dtoa_r+0xb84>
 800c3b2:	b11b      	cbz	r3, 800c3bc <_dtoa_r+0xb34>
 800c3b4:	f10a 0308 	add.w	r3, sl, #8
 800c3b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	4650      	mov	r0, sl
 800c3be:	b019      	add	sp, #100	@ 0x64
 800c3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	f77f ae37 	ble.w	800c03a <_dtoa_r+0x7b2>
 800c3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3d0:	2001      	movs	r0, #1
 800c3d2:	e655      	b.n	800c080 <_dtoa_r+0x7f8>
 800c3d4:	9b00      	ldr	r3, [sp, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f77f aed6 	ble.w	800c188 <_dtoa_r+0x900>
 800c3dc:	4656      	mov	r6, sl
 800c3de:	4621      	mov	r1, r4
 800c3e0:	4648      	mov	r0, r9
 800c3e2:	f7ff f9c6 	bl	800b772 <quorem>
 800c3e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c3ea:	f806 8b01 	strb.w	r8, [r6], #1
 800c3ee:	9b00      	ldr	r3, [sp, #0]
 800c3f0:	eba6 020a 	sub.w	r2, r6, sl
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	ddb3      	ble.n	800c360 <_dtoa_r+0xad8>
 800c3f8:	4649      	mov	r1, r9
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	220a      	movs	r2, #10
 800c3fe:	4658      	mov	r0, fp
 800c400:	f000 f968 	bl	800c6d4 <__multadd>
 800c404:	4681      	mov	r9, r0
 800c406:	e7ea      	b.n	800c3de <_dtoa_r+0xb56>
 800c408:	0800ec58 	.word	0x0800ec58
 800c40c:	0800ebdc 	.word	0x0800ebdc

0800c410 <_free_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	4605      	mov	r5, r0
 800c414:	2900      	cmp	r1, #0
 800c416:	d041      	beq.n	800c49c <_free_r+0x8c>
 800c418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c41c:	1f0c      	subs	r4, r1, #4
 800c41e:	2b00      	cmp	r3, #0
 800c420:	bfb8      	it	lt
 800c422:	18e4      	addlt	r4, r4, r3
 800c424:	f000 f8e8 	bl	800c5f8 <__malloc_lock>
 800c428:	4a1d      	ldr	r2, [pc, #116]	@ (800c4a0 <_free_r+0x90>)
 800c42a:	6813      	ldr	r3, [r2, #0]
 800c42c:	b933      	cbnz	r3, 800c43c <_free_r+0x2c>
 800c42e:	6063      	str	r3, [r4, #4]
 800c430:	6014      	str	r4, [r2, #0]
 800c432:	4628      	mov	r0, r5
 800c434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c438:	f000 b8e4 	b.w	800c604 <__malloc_unlock>
 800c43c:	42a3      	cmp	r3, r4
 800c43e:	d908      	bls.n	800c452 <_free_r+0x42>
 800c440:	6820      	ldr	r0, [r4, #0]
 800c442:	1821      	adds	r1, r4, r0
 800c444:	428b      	cmp	r3, r1
 800c446:	bf01      	itttt	eq
 800c448:	6819      	ldreq	r1, [r3, #0]
 800c44a:	685b      	ldreq	r3, [r3, #4]
 800c44c:	1809      	addeq	r1, r1, r0
 800c44e:	6021      	streq	r1, [r4, #0]
 800c450:	e7ed      	b.n	800c42e <_free_r+0x1e>
 800c452:	461a      	mov	r2, r3
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	b10b      	cbz	r3, 800c45c <_free_r+0x4c>
 800c458:	42a3      	cmp	r3, r4
 800c45a:	d9fa      	bls.n	800c452 <_free_r+0x42>
 800c45c:	6811      	ldr	r1, [r2, #0]
 800c45e:	1850      	adds	r0, r2, r1
 800c460:	42a0      	cmp	r0, r4
 800c462:	d10b      	bne.n	800c47c <_free_r+0x6c>
 800c464:	6820      	ldr	r0, [r4, #0]
 800c466:	4401      	add	r1, r0
 800c468:	1850      	adds	r0, r2, r1
 800c46a:	4283      	cmp	r3, r0
 800c46c:	6011      	str	r1, [r2, #0]
 800c46e:	d1e0      	bne.n	800c432 <_free_r+0x22>
 800c470:	6818      	ldr	r0, [r3, #0]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	6053      	str	r3, [r2, #4]
 800c476:	4408      	add	r0, r1
 800c478:	6010      	str	r0, [r2, #0]
 800c47a:	e7da      	b.n	800c432 <_free_r+0x22>
 800c47c:	d902      	bls.n	800c484 <_free_r+0x74>
 800c47e:	230c      	movs	r3, #12
 800c480:	602b      	str	r3, [r5, #0]
 800c482:	e7d6      	b.n	800c432 <_free_r+0x22>
 800c484:	6820      	ldr	r0, [r4, #0]
 800c486:	1821      	adds	r1, r4, r0
 800c488:	428b      	cmp	r3, r1
 800c48a:	bf04      	itt	eq
 800c48c:	6819      	ldreq	r1, [r3, #0]
 800c48e:	685b      	ldreq	r3, [r3, #4]
 800c490:	6063      	str	r3, [r4, #4]
 800c492:	bf04      	itt	eq
 800c494:	1809      	addeq	r1, r1, r0
 800c496:	6021      	streq	r1, [r4, #0]
 800c498:	6054      	str	r4, [r2, #4]
 800c49a:	e7ca      	b.n	800c432 <_free_r+0x22>
 800c49c:	bd38      	pop	{r3, r4, r5, pc}
 800c49e:	bf00      	nop
 800c4a0:	200021f0 	.word	0x200021f0

0800c4a4 <malloc>:
 800c4a4:	4b02      	ldr	r3, [pc, #8]	@ (800c4b0 <malloc+0xc>)
 800c4a6:	4601      	mov	r1, r0
 800c4a8:	6818      	ldr	r0, [r3, #0]
 800c4aa:	f000 b825 	b.w	800c4f8 <_malloc_r>
 800c4ae:	bf00      	nop
 800c4b0:	20000144 	.word	0x20000144

0800c4b4 <sbrk_aligned>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	4e0f      	ldr	r6, [pc, #60]	@ (800c4f4 <sbrk_aligned+0x40>)
 800c4b8:	460c      	mov	r4, r1
 800c4ba:	6831      	ldr	r1, [r6, #0]
 800c4bc:	4605      	mov	r5, r0
 800c4be:	b911      	cbnz	r1, 800c4c6 <sbrk_aligned+0x12>
 800c4c0:	f000 fe46 	bl	800d150 <_sbrk_r>
 800c4c4:	6030      	str	r0, [r6, #0]
 800c4c6:	4621      	mov	r1, r4
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	f000 fe41 	bl	800d150 <_sbrk_r>
 800c4ce:	1c43      	adds	r3, r0, #1
 800c4d0:	d103      	bne.n	800c4da <sbrk_aligned+0x26>
 800c4d2:	f04f 34ff 	mov.w	r4, #4294967295
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	bd70      	pop	{r4, r5, r6, pc}
 800c4da:	1cc4      	adds	r4, r0, #3
 800c4dc:	f024 0403 	bic.w	r4, r4, #3
 800c4e0:	42a0      	cmp	r0, r4
 800c4e2:	d0f8      	beq.n	800c4d6 <sbrk_aligned+0x22>
 800c4e4:	1a21      	subs	r1, r4, r0
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	f000 fe32 	bl	800d150 <_sbrk_r>
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	d1f2      	bne.n	800c4d6 <sbrk_aligned+0x22>
 800c4f0:	e7ef      	b.n	800c4d2 <sbrk_aligned+0x1e>
 800c4f2:	bf00      	nop
 800c4f4:	200021ec 	.word	0x200021ec

0800c4f8 <_malloc_r>:
 800c4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4fc:	1ccd      	adds	r5, r1, #3
 800c4fe:	f025 0503 	bic.w	r5, r5, #3
 800c502:	3508      	adds	r5, #8
 800c504:	2d0c      	cmp	r5, #12
 800c506:	bf38      	it	cc
 800c508:	250c      	movcc	r5, #12
 800c50a:	2d00      	cmp	r5, #0
 800c50c:	4606      	mov	r6, r0
 800c50e:	db01      	blt.n	800c514 <_malloc_r+0x1c>
 800c510:	42a9      	cmp	r1, r5
 800c512:	d904      	bls.n	800c51e <_malloc_r+0x26>
 800c514:	230c      	movs	r3, #12
 800c516:	6033      	str	r3, [r6, #0]
 800c518:	2000      	movs	r0, #0
 800c51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c51e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5f4 <_malloc_r+0xfc>
 800c522:	f000 f869 	bl	800c5f8 <__malloc_lock>
 800c526:	f8d8 3000 	ldr.w	r3, [r8]
 800c52a:	461c      	mov	r4, r3
 800c52c:	bb44      	cbnz	r4, 800c580 <_malloc_r+0x88>
 800c52e:	4629      	mov	r1, r5
 800c530:	4630      	mov	r0, r6
 800c532:	f7ff ffbf 	bl	800c4b4 <sbrk_aligned>
 800c536:	1c43      	adds	r3, r0, #1
 800c538:	4604      	mov	r4, r0
 800c53a:	d158      	bne.n	800c5ee <_malloc_r+0xf6>
 800c53c:	f8d8 4000 	ldr.w	r4, [r8]
 800c540:	4627      	mov	r7, r4
 800c542:	2f00      	cmp	r7, #0
 800c544:	d143      	bne.n	800c5ce <_malloc_r+0xd6>
 800c546:	2c00      	cmp	r4, #0
 800c548:	d04b      	beq.n	800c5e2 <_malloc_r+0xea>
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	4639      	mov	r1, r7
 800c54e:	4630      	mov	r0, r6
 800c550:	eb04 0903 	add.w	r9, r4, r3
 800c554:	f000 fdfc 	bl	800d150 <_sbrk_r>
 800c558:	4581      	cmp	r9, r0
 800c55a:	d142      	bne.n	800c5e2 <_malloc_r+0xea>
 800c55c:	6821      	ldr	r1, [r4, #0]
 800c55e:	1a6d      	subs	r5, r5, r1
 800c560:	4629      	mov	r1, r5
 800c562:	4630      	mov	r0, r6
 800c564:	f7ff ffa6 	bl	800c4b4 <sbrk_aligned>
 800c568:	3001      	adds	r0, #1
 800c56a:	d03a      	beq.n	800c5e2 <_malloc_r+0xea>
 800c56c:	6823      	ldr	r3, [r4, #0]
 800c56e:	442b      	add	r3, r5
 800c570:	6023      	str	r3, [r4, #0]
 800c572:	f8d8 3000 	ldr.w	r3, [r8]
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	bb62      	cbnz	r2, 800c5d4 <_malloc_r+0xdc>
 800c57a:	f8c8 7000 	str.w	r7, [r8]
 800c57e:	e00f      	b.n	800c5a0 <_malloc_r+0xa8>
 800c580:	6822      	ldr	r2, [r4, #0]
 800c582:	1b52      	subs	r2, r2, r5
 800c584:	d420      	bmi.n	800c5c8 <_malloc_r+0xd0>
 800c586:	2a0b      	cmp	r2, #11
 800c588:	d917      	bls.n	800c5ba <_malloc_r+0xc2>
 800c58a:	1961      	adds	r1, r4, r5
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	6025      	str	r5, [r4, #0]
 800c590:	bf18      	it	ne
 800c592:	6059      	strne	r1, [r3, #4]
 800c594:	6863      	ldr	r3, [r4, #4]
 800c596:	bf08      	it	eq
 800c598:	f8c8 1000 	streq.w	r1, [r8]
 800c59c:	5162      	str	r2, [r4, r5]
 800c59e:	604b      	str	r3, [r1, #4]
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	f000 f82f 	bl	800c604 <__malloc_unlock>
 800c5a6:	f104 000b 	add.w	r0, r4, #11
 800c5aa:	1d23      	adds	r3, r4, #4
 800c5ac:	f020 0007 	bic.w	r0, r0, #7
 800c5b0:	1ac2      	subs	r2, r0, r3
 800c5b2:	bf1c      	itt	ne
 800c5b4:	1a1b      	subne	r3, r3, r0
 800c5b6:	50a3      	strne	r3, [r4, r2]
 800c5b8:	e7af      	b.n	800c51a <_malloc_r+0x22>
 800c5ba:	6862      	ldr	r2, [r4, #4]
 800c5bc:	42a3      	cmp	r3, r4
 800c5be:	bf0c      	ite	eq
 800c5c0:	f8c8 2000 	streq.w	r2, [r8]
 800c5c4:	605a      	strne	r2, [r3, #4]
 800c5c6:	e7eb      	b.n	800c5a0 <_malloc_r+0xa8>
 800c5c8:	4623      	mov	r3, r4
 800c5ca:	6864      	ldr	r4, [r4, #4]
 800c5cc:	e7ae      	b.n	800c52c <_malloc_r+0x34>
 800c5ce:	463c      	mov	r4, r7
 800c5d0:	687f      	ldr	r7, [r7, #4]
 800c5d2:	e7b6      	b.n	800c542 <_malloc_r+0x4a>
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	42a3      	cmp	r3, r4
 800c5da:	d1fb      	bne.n	800c5d4 <_malloc_r+0xdc>
 800c5dc:	2300      	movs	r3, #0
 800c5de:	6053      	str	r3, [r2, #4]
 800c5e0:	e7de      	b.n	800c5a0 <_malloc_r+0xa8>
 800c5e2:	230c      	movs	r3, #12
 800c5e4:	6033      	str	r3, [r6, #0]
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	f000 f80c 	bl	800c604 <__malloc_unlock>
 800c5ec:	e794      	b.n	800c518 <_malloc_r+0x20>
 800c5ee:	6005      	str	r5, [r0, #0]
 800c5f0:	e7d6      	b.n	800c5a0 <_malloc_r+0xa8>
 800c5f2:	bf00      	nop
 800c5f4:	200021f0 	.word	0x200021f0

0800c5f8 <__malloc_lock>:
 800c5f8:	4801      	ldr	r0, [pc, #4]	@ (800c600 <__malloc_lock+0x8>)
 800c5fa:	f7ff b8aa 	b.w	800b752 <__retarget_lock_acquire_recursive>
 800c5fe:	bf00      	nop
 800c600:	200021e8 	.word	0x200021e8

0800c604 <__malloc_unlock>:
 800c604:	4801      	ldr	r0, [pc, #4]	@ (800c60c <__malloc_unlock+0x8>)
 800c606:	f7ff b8a5 	b.w	800b754 <__retarget_lock_release_recursive>
 800c60a:	bf00      	nop
 800c60c:	200021e8 	.word	0x200021e8

0800c610 <_Balloc>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	69c6      	ldr	r6, [r0, #28]
 800c614:	4604      	mov	r4, r0
 800c616:	460d      	mov	r5, r1
 800c618:	b976      	cbnz	r6, 800c638 <_Balloc+0x28>
 800c61a:	2010      	movs	r0, #16
 800c61c:	f7ff ff42 	bl	800c4a4 <malloc>
 800c620:	4602      	mov	r2, r0
 800c622:	61e0      	str	r0, [r4, #28]
 800c624:	b920      	cbnz	r0, 800c630 <_Balloc+0x20>
 800c626:	4b18      	ldr	r3, [pc, #96]	@ (800c688 <_Balloc+0x78>)
 800c628:	4818      	ldr	r0, [pc, #96]	@ (800c68c <_Balloc+0x7c>)
 800c62a:	216b      	movs	r1, #107	@ 0x6b
 800c62c:	f000 fda0 	bl	800d170 <__assert_func>
 800c630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c634:	6006      	str	r6, [r0, #0]
 800c636:	60c6      	str	r6, [r0, #12]
 800c638:	69e6      	ldr	r6, [r4, #28]
 800c63a:	68f3      	ldr	r3, [r6, #12]
 800c63c:	b183      	cbz	r3, 800c660 <_Balloc+0x50>
 800c63e:	69e3      	ldr	r3, [r4, #28]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c646:	b9b8      	cbnz	r0, 800c678 <_Balloc+0x68>
 800c648:	2101      	movs	r1, #1
 800c64a:	fa01 f605 	lsl.w	r6, r1, r5
 800c64e:	1d72      	adds	r2, r6, #5
 800c650:	0092      	lsls	r2, r2, #2
 800c652:	4620      	mov	r0, r4
 800c654:	f000 fdaa 	bl	800d1ac <_calloc_r>
 800c658:	b160      	cbz	r0, 800c674 <_Balloc+0x64>
 800c65a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c65e:	e00e      	b.n	800c67e <_Balloc+0x6e>
 800c660:	2221      	movs	r2, #33	@ 0x21
 800c662:	2104      	movs	r1, #4
 800c664:	4620      	mov	r0, r4
 800c666:	f000 fda1 	bl	800d1ac <_calloc_r>
 800c66a:	69e3      	ldr	r3, [r4, #28]
 800c66c:	60f0      	str	r0, [r6, #12]
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1e4      	bne.n	800c63e <_Balloc+0x2e>
 800c674:	2000      	movs	r0, #0
 800c676:	bd70      	pop	{r4, r5, r6, pc}
 800c678:	6802      	ldr	r2, [r0, #0]
 800c67a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c67e:	2300      	movs	r3, #0
 800c680:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c684:	e7f7      	b.n	800c676 <_Balloc+0x66>
 800c686:	bf00      	nop
 800c688:	0800ebe9 	.word	0x0800ebe9
 800c68c:	0800ec69 	.word	0x0800ec69

0800c690 <_Bfree>:
 800c690:	b570      	push	{r4, r5, r6, lr}
 800c692:	69c6      	ldr	r6, [r0, #28]
 800c694:	4605      	mov	r5, r0
 800c696:	460c      	mov	r4, r1
 800c698:	b976      	cbnz	r6, 800c6b8 <_Bfree+0x28>
 800c69a:	2010      	movs	r0, #16
 800c69c:	f7ff ff02 	bl	800c4a4 <malloc>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	61e8      	str	r0, [r5, #28]
 800c6a4:	b920      	cbnz	r0, 800c6b0 <_Bfree+0x20>
 800c6a6:	4b09      	ldr	r3, [pc, #36]	@ (800c6cc <_Bfree+0x3c>)
 800c6a8:	4809      	ldr	r0, [pc, #36]	@ (800c6d0 <_Bfree+0x40>)
 800c6aa:	218f      	movs	r1, #143	@ 0x8f
 800c6ac:	f000 fd60 	bl	800d170 <__assert_func>
 800c6b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6b4:	6006      	str	r6, [r0, #0]
 800c6b6:	60c6      	str	r6, [r0, #12]
 800c6b8:	b13c      	cbz	r4, 800c6ca <_Bfree+0x3a>
 800c6ba:	69eb      	ldr	r3, [r5, #28]
 800c6bc:	6862      	ldr	r2, [r4, #4]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6c4:	6021      	str	r1, [r4, #0]
 800c6c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6ca:	bd70      	pop	{r4, r5, r6, pc}
 800c6cc:	0800ebe9 	.word	0x0800ebe9
 800c6d0:	0800ec69 	.word	0x0800ec69

0800c6d4 <__multadd>:
 800c6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d8:	690d      	ldr	r5, [r1, #16]
 800c6da:	4607      	mov	r7, r0
 800c6dc:	460c      	mov	r4, r1
 800c6de:	461e      	mov	r6, r3
 800c6e0:	f101 0c14 	add.w	ip, r1, #20
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	f8dc 3000 	ldr.w	r3, [ip]
 800c6ea:	b299      	uxth	r1, r3
 800c6ec:	fb02 6101 	mla	r1, r2, r1, r6
 800c6f0:	0c1e      	lsrs	r6, r3, #16
 800c6f2:	0c0b      	lsrs	r3, r1, #16
 800c6f4:	fb02 3306 	mla	r3, r2, r6, r3
 800c6f8:	b289      	uxth	r1, r1
 800c6fa:	3001      	adds	r0, #1
 800c6fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c700:	4285      	cmp	r5, r0
 800c702:	f84c 1b04 	str.w	r1, [ip], #4
 800c706:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c70a:	dcec      	bgt.n	800c6e6 <__multadd+0x12>
 800c70c:	b30e      	cbz	r6, 800c752 <__multadd+0x7e>
 800c70e:	68a3      	ldr	r3, [r4, #8]
 800c710:	42ab      	cmp	r3, r5
 800c712:	dc19      	bgt.n	800c748 <__multadd+0x74>
 800c714:	6861      	ldr	r1, [r4, #4]
 800c716:	4638      	mov	r0, r7
 800c718:	3101      	adds	r1, #1
 800c71a:	f7ff ff79 	bl	800c610 <_Balloc>
 800c71e:	4680      	mov	r8, r0
 800c720:	b928      	cbnz	r0, 800c72e <__multadd+0x5a>
 800c722:	4602      	mov	r2, r0
 800c724:	4b0c      	ldr	r3, [pc, #48]	@ (800c758 <__multadd+0x84>)
 800c726:	480d      	ldr	r0, [pc, #52]	@ (800c75c <__multadd+0x88>)
 800c728:	21ba      	movs	r1, #186	@ 0xba
 800c72a:	f000 fd21 	bl	800d170 <__assert_func>
 800c72e:	6922      	ldr	r2, [r4, #16]
 800c730:	3202      	adds	r2, #2
 800c732:	f104 010c 	add.w	r1, r4, #12
 800c736:	0092      	lsls	r2, r2, #2
 800c738:	300c      	adds	r0, #12
 800c73a:	f7ff f80c 	bl	800b756 <memcpy>
 800c73e:	4621      	mov	r1, r4
 800c740:	4638      	mov	r0, r7
 800c742:	f7ff ffa5 	bl	800c690 <_Bfree>
 800c746:	4644      	mov	r4, r8
 800c748:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c74c:	3501      	adds	r5, #1
 800c74e:	615e      	str	r6, [r3, #20]
 800c750:	6125      	str	r5, [r4, #16]
 800c752:	4620      	mov	r0, r4
 800c754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c758:	0800ec58 	.word	0x0800ec58
 800c75c:	0800ec69 	.word	0x0800ec69

0800c760 <__hi0bits>:
 800c760:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c764:	4603      	mov	r3, r0
 800c766:	bf36      	itet	cc
 800c768:	0403      	lslcc	r3, r0, #16
 800c76a:	2000      	movcs	r0, #0
 800c76c:	2010      	movcc	r0, #16
 800c76e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c772:	bf3c      	itt	cc
 800c774:	021b      	lslcc	r3, r3, #8
 800c776:	3008      	addcc	r0, #8
 800c778:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c77c:	bf3c      	itt	cc
 800c77e:	011b      	lslcc	r3, r3, #4
 800c780:	3004      	addcc	r0, #4
 800c782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c786:	bf3c      	itt	cc
 800c788:	009b      	lslcc	r3, r3, #2
 800c78a:	3002      	addcc	r0, #2
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	db05      	blt.n	800c79c <__hi0bits+0x3c>
 800c790:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c794:	f100 0001 	add.w	r0, r0, #1
 800c798:	bf08      	it	eq
 800c79a:	2020      	moveq	r0, #32
 800c79c:	4770      	bx	lr

0800c79e <__lo0bits>:
 800c79e:	6803      	ldr	r3, [r0, #0]
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	f013 0007 	ands.w	r0, r3, #7
 800c7a6:	d00b      	beq.n	800c7c0 <__lo0bits+0x22>
 800c7a8:	07d9      	lsls	r1, r3, #31
 800c7aa:	d421      	bmi.n	800c7f0 <__lo0bits+0x52>
 800c7ac:	0798      	lsls	r0, r3, #30
 800c7ae:	bf49      	itett	mi
 800c7b0:	085b      	lsrmi	r3, r3, #1
 800c7b2:	089b      	lsrpl	r3, r3, #2
 800c7b4:	2001      	movmi	r0, #1
 800c7b6:	6013      	strmi	r3, [r2, #0]
 800c7b8:	bf5c      	itt	pl
 800c7ba:	6013      	strpl	r3, [r2, #0]
 800c7bc:	2002      	movpl	r0, #2
 800c7be:	4770      	bx	lr
 800c7c0:	b299      	uxth	r1, r3
 800c7c2:	b909      	cbnz	r1, 800c7c8 <__lo0bits+0x2a>
 800c7c4:	0c1b      	lsrs	r3, r3, #16
 800c7c6:	2010      	movs	r0, #16
 800c7c8:	b2d9      	uxtb	r1, r3
 800c7ca:	b909      	cbnz	r1, 800c7d0 <__lo0bits+0x32>
 800c7cc:	3008      	adds	r0, #8
 800c7ce:	0a1b      	lsrs	r3, r3, #8
 800c7d0:	0719      	lsls	r1, r3, #28
 800c7d2:	bf04      	itt	eq
 800c7d4:	091b      	lsreq	r3, r3, #4
 800c7d6:	3004      	addeq	r0, #4
 800c7d8:	0799      	lsls	r1, r3, #30
 800c7da:	bf04      	itt	eq
 800c7dc:	089b      	lsreq	r3, r3, #2
 800c7de:	3002      	addeq	r0, #2
 800c7e0:	07d9      	lsls	r1, r3, #31
 800c7e2:	d403      	bmi.n	800c7ec <__lo0bits+0x4e>
 800c7e4:	085b      	lsrs	r3, r3, #1
 800c7e6:	f100 0001 	add.w	r0, r0, #1
 800c7ea:	d003      	beq.n	800c7f4 <__lo0bits+0x56>
 800c7ec:	6013      	str	r3, [r2, #0]
 800c7ee:	4770      	bx	lr
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	4770      	bx	lr
 800c7f4:	2020      	movs	r0, #32
 800c7f6:	4770      	bx	lr

0800c7f8 <__i2b>:
 800c7f8:	b510      	push	{r4, lr}
 800c7fa:	460c      	mov	r4, r1
 800c7fc:	2101      	movs	r1, #1
 800c7fe:	f7ff ff07 	bl	800c610 <_Balloc>
 800c802:	4602      	mov	r2, r0
 800c804:	b928      	cbnz	r0, 800c812 <__i2b+0x1a>
 800c806:	4b05      	ldr	r3, [pc, #20]	@ (800c81c <__i2b+0x24>)
 800c808:	4805      	ldr	r0, [pc, #20]	@ (800c820 <__i2b+0x28>)
 800c80a:	f240 1145 	movw	r1, #325	@ 0x145
 800c80e:	f000 fcaf 	bl	800d170 <__assert_func>
 800c812:	2301      	movs	r3, #1
 800c814:	6144      	str	r4, [r0, #20]
 800c816:	6103      	str	r3, [r0, #16]
 800c818:	bd10      	pop	{r4, pc}
 800c81a:	bf00      	nop
 800c81c:	0800ec58 	.word	0x0800ec58
 800c820:	0800ec69 	.word	0x0800ec69

0800c824 <__multiply>:
 800c824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c828:	4614      	mov	r4, r2
 800c82a:	690a      	ldr	r2, [r1, #16]
 800c82c:	6923      	ldr	r3, [r4, #16]
 800c82e:	429a      	cmp	r2, r3
 800c830:	bfa8      	it	ge
 800c832:	4623      	movge	r3, r4
 800c834:	460f      	mov	r7, r1
 800c836:	bfa4      	itt	ge
 800c838:	460c      	movge	r4, r1
 800c83a:	461f      	movge	r7, r3
 800c83c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c840:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c844:	68a3      	ldr	r3, [r4, #8]
 800c846:	6861      	ldr	r1, [r4, #4]
 800c848:	eb0a 0609 	add.w	r6, sl, r9
 800c84c:	42b3      	cmp	r3, r6
 800c84e:	b085      	sub	sp, #20
 800c850:	bfb8      	it	lt
 800c852:	3101      	addlt	r1, #1
 800c854:	f7ff fedc 	bl	800c610 <_Balloc>
 800c858:	b930      	cbnz	r0, 800c868 <__multiply+0x44>
 800c85a:	4602      	mov	r2, r0
 800c85c:	4b44      	ldr	r3, [pc, #272]	@ (800c970 <__multiply+0x14c>)
 800c85e:	4845      	ldr	r0, [pc, #276]	@ (800c974 <__multiply+0x150>)
 800c860:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c864:	f000 fc84 	bl	800d170 <__assert_func>
 800c868:	f100 0514 	add.w	r5, r0, #20
 800c86c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c870:	462b      	mov	r3, r5
 800c872:	2200      	movs	r2, #0
 800c874:	4543      	cmp	r3, r8
 800c876:	d321      	bcc.n	800c8bc <__multiply+0x98>
 800c878:	f107 0114 	add.w	r1, r7, #20
 800c87c:	f104 0214 	add.w	r2, r4, #20
 800c880:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c884:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c888:	9302      	str	r3, [sp, #8]
 800c88a:	1b13      	subs	r3, r2, r4
 800c88c:	3b15      	subs	r3, #21
 800c88e:	f023 0303 	bic.w	r3, r3, #3
 800c892:	3304      	adds	r3, #4
 800c894:	f104 0715 	add.w	r7, r4, #21
 800c898:	42ba      	cmp	r2, r7
 800c89a:	bf38      	it	cc
 800c89c:	2304      	movcc	r3, #4
 800c89e:	9301      	str	r3, [sp, #4]
 800c8a0:	9b02      	ldr	r3, [sp, #8]
 800c8a2:	9103      	str	r1, [sp, #12]
 800c8a4:	428b      	cmp	r3, r1
 800c8a6:	d80c      	bhi.n	800c8c2 <__multiply+0x9e>
 800c8a8:	2e00      	cmp	r6, #0
 800c8aa:	dd03      	ble.n	800c8b4 <__multiply+0x90>
 800c8ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d05b      	beq.n	800c96c <__multiply+0x148>
 800c8b4:	6106      	str	r6, [r0, #16]
 800c8b6:	b005      	add	sp, #20
 800c8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8bc:	f843 2b04 	str.w	r2, [r3], #4
 800c8c0:	e7d8      	b.n	800c874 <__multiply+0x50>
 800c8c2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c8c6:	f1ba 0f00 	cmp.w	sl, #0
 800c8ca:	d024      	beq.n	800c916 <__multiply+0xf2>
 800c8cc:	f104 0e14 	add.w	lr, r4, #20
 800c8d0:	46a9      	mov	r9, r5
 800c8d2:	f04f 0c00 	mov.w	ip, #0
 800c8d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8da:	f8d9 3000 	ldr.w	r3, [r9]
 800c8de:	fa1f fb87 	uxth.w	fp, r7
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c8e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c8ec:	f8d9 7000 	ldr.w	r7, [r9]
 800c8f0:	4463      	add	r3, ip
 800c8f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8f6:	fb0a c70b 	mla	r7, sl, fp, ip
 800c8fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c904:	4572      	cmp	r2, lr
 800c906:	f849 3b04 	str.w	r3, [r9], #4
 800c90a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c90e:	d8e2      	bhi.n	800c8d6 <__multiply+0xb2>
 800c910:	9b01      	ldr	r3, [sp, #4]
 800c912:	f845 c003 	str.w	ip, [r5, r3]
 800c916:	9b03      	ldr	r3, [sp, #12]
 800c918:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c91c:	3104      	adds	r1, #4
 800c91e:	f1b9 0f00 	cmp.w	r9, #0
 800c922:	d021      	beq.n	800c968 <__multiply+0x144>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	f104 0c14 	add.w	ip, r4, #20
 800c92a:	46ae      	mov	lr, r5
 800c92c:	f04f 0a00 	mov.w	sl, #0
 800c930:	f8bc b000 	ldrh.w	fp, [ip]
 800c934:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c938:	fb09 770b 	mla	r7, r9, fp, r7
 800c93c:	4457      	add	r7, sl
 800c93e:	b29b      	uxth	r3, r3
 800c940:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c944:	f84e 3b04 	str.w	r3, [lr], #4
 800c948:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c94c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c950:	f8be 3000 	ldrh.w	r3, [lr]
 800c954:	fb09 330a 	mla	r3, r9, sl, r3
 800c958:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c95c:	4562      	cmp	r2, ip
 800c95e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c962:	d8e5      	bhi.n	800c930 <__multiply+0x10c>
 800c964:	9f01      	ldr	r7, [sp, #4]
 800c966:	51eb      	str	r3, [r5, r7]
 800c968:	3504      	adds	r5, #4
 800c96a:	e799      	b.n	800c8a0 <__multiply+0x7c>
 800c96c:	3e01      	subs	r6, #1
 800c96e:	e79b      	b.n	800c8a8 <__multiply+0x84>
 800c970:	0800ec58 	.word	0x0800ec58
 800c974:	0800ec69 	.word	0x0800ec69

0800c978 <__pow5mult>:
 800c978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c97c:	4615      	mov	r5, r2
 800c97e:	f012 0203 	ands.w	r2, r2, #3
 800c982:	4607      	mov	r7, r0
 800c984:	460e      	mov	r6, r1
 800c986:	d007      	beq.n	800c998 <__pow5mult+0x20>
 800c988:	4c25      	ldr	r4, [pc, #148]	@ (800ca20 <__pow5mult+0xa8>)
 800c98a:	3a01      	subs	r2, #1
 800c98c:	2300      	movs	r3, #0
 800c98e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c992:	f7ff fe9f 	bl	800c6d4 <__multadd>
 800c996:	4606      	mov	r6, r0
 800c998:	10ad      	asrs	r5, r5, #2
 800c99a:	d03d      	beq.n	800ca18 <__pow5mult+0xa0>
 800c99c:	69fc      	ldr	r4, [r7, #28]
 800c99e:	b97c      	cbnz	r4, 800c9c0 <__pow5mult+0x48>
 800c9a0:	2010      	movs	r0, #16
 800c9a2:	f7ff fd7f 	bl	800c4a4 <malloc>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	61f8      	str	r0, [r7, #28]
 800c9aa:	b928      	cbnz	r0, 800c9b8 <__pow5mult+0x40>
 800c9ac:	4b1d      	ldr	r3, [pc, #116]	@ (800ca24 <__pow5mult+0xac>)
 800c9ae:	481e      	ldr	r0, [pc, #120]	@ (800ca28 <__pow5mult+0xb0>)
 800c9b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c9b4:	f000 fbdc 	bl	800d170 <__assert_func>
 800c9b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9bc:	6004      	str	r4, [r0, #0]
 800c9be:	60c4      	str	r4, [r0, #12]
 800c9c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c9c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9c8:	b94c      	cbnz	r4, 800c9de <__pow5mult+0x66>
 800c9ca:	f240 2171 	movw	r1, #625	@ 0x271
 800c9ce:	4638      	mov	r0, r7
 800c9d0:	f7ff ff12 	bl	800c7f8 <__i2b>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9da:	4604      	mov	r4, r0
 800c9dc:	6003      	str	r3, [r0, #0]
 800c9de:	f04f 0900 	mov.w	r9, #0
 800c9e2:	07eb      	lsls	r3, r5, #31
 800c9e4:	d50a      	bpl.n	800c9fc <__pow5mult+0x84>
 800c9e6:	4631      	mov	r1, r6
 800c9e8:	4622      	mov	r2, r4
 800c9ea:	4638      	mov	r0, r7
 800c9ec:	f7ff ff1a 	bl	800c824 <__multiply>
 800c9f0:	4631      	mov	r1, r6
 800c9f2:	4680      	mov	r8, r0
 800c9f4:	4638      	mov	r0, r7
 800c9f6:	f7ff fe4b 	bl	800c690 <_Bfree>
 800c9fa:	4646      	mov	r6, r8
 800c9fc:	106d      	asrs	r5, r5, #1
 800c9fe:	d00b      	beq.n	800ca18 <__pow5mult+0xa0>
 800ca00:	6820      	ldr	r0, [r4, #0]
 800ca02:	b938      	cbnz	r0, 800ca14 <__pow5mult+0x9c>
 800ca04:	4622      	mov	r2, r4
 800ca06:	4621      	mov	r1, r4
 800ca08:	4638      	mov	r0, r7
 800ca0a:	f7ff ff0b 	bl	800c824 <__multiply>
 800ca0e:	6020      	str	r0, [r4, #0]
 800ca10:	f8c0 9000 	str.w	r9, [r0]
 800ca14:	4604      	mov	r4, r0
 800ca16:	e7e4      	b.n	800c9e2 <__pow5mult+0x6a>
 800ca18:	4630      	mov	r0, r6
 800ca1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca1e:	bf00      	nop
 800ca20:	0800ecc4 	.word	0x0800ecc4
 800ca24:	0800ebe9 	.word	0x0800ebe9
 800ca28:	0800ec69 	.word	0x0800ec69

0800ca2c <__lshift>:
 800ca2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca30:	460c      	mov	r4, r1
 800ca32:	6849      	ldr	r1, [r1, #4]
 800ca34:	6923      	ldr	r3, [r4, #16]
 800ca36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca3a:	68a3      	ldr	r3, [r4, #8]
 800ca3c:	4607      	mov	r7, r0
 800ca3e:	4691      	mov	r9, r2
 800ca40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca44:	f108 0601 	add.w	r6, r8, #1
 800ca48:	42b3      	cmp	r3, r6
 800ca4a:	db0b      	blt.n	800ca64 <__lshift+0x38>
 800ca4c:	4638      	mov	r0, r7
 800ca4e:	f7ff fddf 	bl	800c610 <_Balloc>
 800ca52:	4605      	mov	r5, r0
 800ca54:	b948      	cbnz	r0, 800ca6a <__lshift+0x3e>
 800ca56:	4602      	mov	r2, r0
 800ca58:	4b28      	ldr	r3, [pc, #160]	@ (800cafc <__lshift+0xd0>)
 800ca5a:	4829      	ldr	r0, [pc, #164]	@ (800cb00 <__lshift+0xd4>)
 800ca5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca60:	f000 fb86 	bl	800d170 <__assert_func>
 800ca64:	3101      	adds	r1, #1
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	e7ee      	b.n	800ca48 <__lshift+0x1c>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	f100 0114 	add.w	r1, r0, #20
 800ca70:	f100 0210 	add.w	r2, r0, #16
 800ca74:	4618      	mov	r0, r3
 800ca76:	4553      	cmp	r3, sl
 800ca78:	db33      	blt.n	800cae2 <__lshift+0xb6>
 800ca7a:	6920      	ldr	r0, [r4, #16]
 800ca7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca80:	f104 0314 	add.w	r3, r4, #20
 800ca84:	f019 091f 	ands.w	r9, r9, #31
 800ca88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca90:	d02b      	beq.n	800caea <__lshift+0xbe>
 800ca92:	f1c9 0e20 	rsb	lr, r9, #32
 800ca96:	468a      	mov	sl, r1
 800ca98:	2200      	movs	r2, #0
 800ca9a:	6818      	ldr	r0, [r3, #0]
 800ca9c:	fa00 f009 	lsl.w	r0, r0, r9
 800caa0:	4310      	orrs	r0, r2
 800caa2:	f84a 0b04 	str.w	r0, [sl], #4
 800caa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800caaa:	459c      	cmp	ip, r3
 800caac:	fa22 f20e 	lsr.w	r2, r2, lr
 800cab0:	d8f3      	bhi.n	800ca9a <__lshift+0x6e>
 800cab2:	ebac 0304 	sub.w	r3, ip, r4
 800cab6:	3b15      	subs	r3, #21
 800cab8:	f023 0303 	bic.w	r3, r3, #3
 800cabc:	3304      	adds	r3, #4
 800cabe:	f104 0015 	add.w	r0, r4, #21
 800cac2:	4584      	cmp	ip, r0
 800cac4:	bf38      	it	cc
 800cac6:	2304      	movcc	r3, #4
 800cac8:	50ca      	str	r2, [r1, r3]
 800caca:	b10a      	cbz	r2, 800cad0 <__lshift+0xa4>
 800cacc:	f108 0602 	add.w	r6, r8, #2
 800cad0:	3e01      	subs	r6, #1
 800cad2:	4638      	mov	r0, r7
 800cad4:	612e      	str	r6, [r5, #16]
 800cad6:	4621      	mov	r1, r4
 800cad8:	f7ff fdda 	bl	800c690 <_Bfree>
 800cadc:	4628      	mov	r0, r5
 800cade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cae2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cae6:	3301      	adds	r3, #1
 800cae8:	e7c5      	b.n	800ca76 <__lshift+0x4a>
 800caea:	3904      	subs	r1, #4
 800caec:	f853 2b04 	ldr.w	r2, [r3], #4
 800caf0:	f841 2f04 	str.w	r2, [r1, #4]!
 800caf4:	459c      	cmp	ip, r3
 800caf6:	d8f9      	bhi.n	800caec <__lshift+0xc0>
 800caf8:	e7ea      	b.n	800cad0 <__lshift+0xa4>
 800cafa:	bf00      	nop
 800cafc:	0800ec58 	.word	0x0800ec58
 800cb00:	0800ec69 	.word	0x0800ec69

0800cb04 <__mcmp>:
 800cb04:	690a      	ldr	r2, [r1, #16]
 800cb06:	4603      	mov	r3, r0
 800cb08:	6900      	ldr	r0, [r0, #16]
 800cb0a:	1a80      	subs	r0, r0, r2
 800cb0c:	b530      	push	{r4, r5, lr}
 800cb0e:	d10e      	bne.n	800cb2e <__mcmp+0x2a>
 800cb10:	3314      	adds	r3, #20
 800cb12:	3114      	adds	r1, #20
 800cb14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb24:	4295      	cmp	r5, r2
 800cb26:	d003      	beq.n	800cb30 <__mcmp+0x2c>
 800cb28:	d205      	bcs.n	800cb36 <__mcmp+0x32>
 800cb2a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb2e:	bd30      	pop	{r4, r5, pc}
 800cb30:	42a3      	cmp	r3, r4
 800cb32:	d3f3      	bcc.n	800cb1c <__mcmp+0x18>
 800cb34:	e7fb      	b.n	800cb2e <__mcmp+0x2a>
 800cb36:	2001      	movs	r0, #1
 800cb38:	e7f9      	b.n	800cb2e <__mcmp+0x2a>
	...

0800cb3c <__mdiff>:
 800cb3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb40:	4689      	mov	r9, r1
 800cb42:	4606      	mov	r6, r0
 800cb44:	4611      	mov	r1, r2
 800cb46:	4648      	mov	r0, r9
 800cb48:	4614      	mov	r4, r2
 800cb4a:	f7ff ffdb 	bl	800cb04 <__mcmp>
 800cb4e:	1e05      	subs	r5, r0, #0
 800cb50:	d112      	bne.n	800cb78 <__mdiff+0x3c>
 800cb52:	4629      	mov	r1, r5
 800cb54:	4630      	mov	r0, r6
 800cb56:	f7ff fd5b 	bl	800c610 <_Balloc>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	b928      	cbnz	r0, 800cb6a <__mdiff+0x2e>
 800cb5e:	4b3f      	ldr	r3, [pc, #252]	@ (800cc5c <__mdiff+0x120>)
 800cb60:	f240 2137 	movw	r1, #567	@ 0x237
 800cb64:	483e      	ldr	r0, [pc, #248]	@ (800cc60 <__mdiff+0x124>)
 800cb66:	f000 fb03 	bl	800d170 <__assert_func>
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb70:	4610      	mov	r0, r2
 800cb72:	b003      	add	sp, #12
 800cb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb78:	bfbc      	itt	lt
 800cb7a:	464b      	movlt	r3, r9
 800cb7c:	46a1      	movlt	r9, r4
 800cb7e:	4630      	mov	r0, r6
 800cb80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb84:	bfba      	itte	lt
 800cb86:	461c      	movlt	r4, r3
 800cb88:	2501      	movlt	r5, #1
 800cb8a:	2500      	movge	r5, #0
 800cb8c:	f7ff fd40 	bl	800c610 <_Balloc>
 800cb90:	4602      	mov	r2, r0
 800cb92:	b918      	cbnz	r0, 800cb9c <__mdiff+0x60>
 800cb94:	4b31      	ldr	r3, [pc, #196]	@ (800cc5c <__mdiff+0x120>)
 800cb96:	f240 2145 	movw	r1, #581	@ 0x245
 800cb9a:	e7e3      	b.n	800cb64 <__mdiff+0x28>
 800cb9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cba0:	6926      	ldr	r6, [r4, #16]
 800cba2:	60c5      	str	r5, [r0, #12]
 800cba4:	f109 0310 	add.w	r3, r9, #16
 800cba8:	f109 0514 	add.w	r5, r9, #20
 800cbac:	f104 0e14 	add.w	lr, r4, #20
 800cbb0:	f100 0b14 	add.w	fp, r0, #20
 800cbb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cbb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cbbc:	9301      	str	r3, [sp, #4]
 800cbbe:	46d9      	mov	r9, fp
 800cbc0:	f04f 0c00 	mov.w	ip, #0
 800cbc4:	9b01      	ldr	r3, [sp, #4]
 800cbc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cbca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cbce:	9301      	str	r3, [sp, #4]
 800cbd0:	fa1f f38a 	uxth.w	r3, sl
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	b283      	uxth	r3, r0
 800cbd8:	1acb      	subs	r3, r1, r3
 800cbda:	0c00      	lsrs	r0, r0, #16
 800cbdc:	4463      	add	r3, ip
 800cbde:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cbe2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cbec:	4576      	cmp	r6, lr
 800cbee:	f849 3b04 	str.w	r3, [r9], #4
 800cbf2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbf6:	d8e5      	bhi.n	800cbc4 <__mdiff+0x88>
 800cbf8:	1b33      	subs	r3, r6, r4
 800cbfa:	3b15      	subs	r3, #21
 800cbfc:	f023 0303 	bic.w	r3, r3, #3
 800cc00:	3415      	adds	r4, #21
 800cc02:	3304      	adds	r3, #4
 800cc04:	42a6      	cmp	r6, r4
 800cc06:	bf38      	it	cc
 800cc08:	2304      	movcc	r3, #4
 800cc0a:	441d      	add	r5, r3
 800cc0c:	445b      	add	r3, fp
 800cc0e:	461e      	mov	r6, r3
 800cc10:	462c      	mov	r4, r5
 800cc12:	4544      	cmp	r4, r8
 800cc14:	d30e      	bcc.n	800cc34 <__mdiff+0xf8>
 800cc16:	f108 0103 	add.w	r1, r8, #3
 800cc1a:	1b49      	subs	r1, r1, r5
 800cc1c:	f021 0103 	bic.w	r1, r1, #3
 800cc20:	3d03      	subs	r5, #3
 800cc22:	45a8      	cmp	r8, r5
 800cc24:	bf38      	it	cc
 800cc26:	2100      	movcc	r1, #0
 800cc28:	440b      	add	r3, r1
 800cc2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc2e:	b191      	cbz	r1, 800cc56 <__mdiff+0x11a>
 800cc30:	6117      	str	r7, [r2, #16]
 800cc32:	e79d      	b.n	800cb70 <__mdiff+0x34>
 800cc34:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc38:	46e6      	mov	lr, ip
 800cc3a:	0c08      	lsrs	r0, r1, #16
 800cc3c:	fa1c fc81 	uxtah	ip, ip, r1
 800cc40:	4471      	add	r1, lr
 800cc42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc46:	b289      	uxth	r1, r1
 800cc48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc4c:	f846 1b04 	str.w	r1, [r6], #4
 800cc50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc54:	e7dd      	b.n	800cc12 <__mdiff+0xd6>
 800cc56:	3f01      	subs	r7, #1
 800cc58:	e7e7      	b.n	800cc2a <__mdiff+0xee>
 800cc5a:	bf00      	nop
 800cc5c:	0800ec58 	.word	0x0800ec58
 800cc60:	0800ec69 	.word	0x0800ec69

0800cc64 <__d2b>:
 800cc64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc68:	460f      	mov	r7, r1
 800cc6a:	2101      	movs	r1, #1
 800cc6c:	ec59 8b10 	vmov	r8, r9, d0
 800cc70:	4616      	mov	r6, r2
 800cc72:	f7ff fccd 	bl	800c610 <_Balloc>
 800cc76:	4604      	mov	r4, r0
 800cc78:	b930      	cbnz	r0, 800cc88 <__d2b+0x24>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	4b23      	ldr	r3, [pc, #140]	@ (800cd0c <__d2b+0xa8>)
 800cc7e:	4824      	ldr	r0, [pc, #144]	@ (800cd10 <__d2b+0xac>)
 800cc80:	f240 310f 	movw	r1, #783	@ 0x30f
 800cc84:	f000 fa74 	bl	800d170 <__assert_func>
 800cc88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc90:	b10d      	cbz	r5, 800cc96 <__d2b+0x32>
 800cc92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc96:	9301      	str	r3, [sp, #4]
 800cc98:	f1b8 0300 	subs.w	r3, r8, #0
 800cc9c:	d023      	beq.n	800cce6 <__d2b+0x82>
 800cc9e:	4668      	mov	r0, sp
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	f7ff fd7c 	bl	800c79e <__lo0bits>
 800cca6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ccaa:	b1d0      	cbz	r0, 800cce2 <__d2b+0x7e>
 800ccac:	f1c0 0320 	rsb	r3, r0, #32
 800ccb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ccb4:	430b      	orrs	r3, r1
 800ccb6:	40c2      	lsrs	r2, r0
 800ccb8:	6163      	str	r3, [r4, #20]
 800ccba:	9201      	str	r2, [sp, #4]
 800ccbc:	9b01      	ldr	r3, [sp, #4]
 800ccbe:	61a3      	str	r3, [r4, #24]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	bf0c      	ite	eq
 800ccc4:	2201      	moveq	r2, #1
 800ccc6:	2202      	movne	r2, #2
 800ccc8:	6122      	str	r2, [r4, #16]
 800ccca:	b1a5      	cbz	r5, 800ccf6 <__d2b+0x92>
 800cccc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ccd0:	4405      	add	r5, r0
 800ccd2:	603d      	str	r5, [r7, #0]
 800ccd4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ccd8:	6030      	str	r0, [r6, #0]
 800ccda:	4620      	mov	r0, r4
 800ccdc:	b003      	add	sp, #12
 800ccde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cce2:	6161      	str	r1, [r4, #20]
 800cce4:	e7ea      	b.n	800ccbc <__d2b+0x58>
 800cce6:	a801      	add	r0, sp, #4
 800cce8:	f7ff fd59 	bl	800c79e <__lo0bits>
 800ccec:	9b01      	ldr	r3, [sp, #4]
 800ccee:	6163      	str	r3, [r4, #20]
 800ccf0:	3020      	adds	r0, #32
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	e7e8      	b.n	800ccc8 <__d2b+0x64>
 800ccf6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ccfa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ccfe:	6038      	str	r0, [r7, #0]
 800cd00:	6918      	ldr	r0, [r3, #16]
 800cd02:	f7ff fd2d 	bl	800c760 <__hi0bits>
 800cd06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd0a:	e7e5      	b.n	800ccd8 <__d2b+0x74>
 800cd0c:	0800ec58 	.word	0x0800ec58
 800cd10:	0800ec69 	.word	0x0800ec69

0800cd14 <__ssputs_r>:
 800cd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd18:	688e      	ldr	r6, [r1, #8]
 800cd1a:	461f      	mov	r7, r3
 800cd1c:	42be      	cmp	r6, r7
 800cd1e:	680b      	ldr	r3, [r1, #0]
 800cd20:	4682      	mov	sl, r0
 800cd22:	460c      	mov	r4, r1
 800cd24:	4690      	mov	r8, r2
 800cd26:	d82d      	bhi.n	800cd84 <__ssputs_r+0x70>
 800cd28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cd30:	d026      	beq.n	800cd80 <__ssputs_r+0x6c>
 800cd32:	6965      	ldr	r5, [r4, #20]
 800cd34:	6909      	ldr	r1, [r1, #16]
 800cd36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd3a:	eba3 0901 	sub.w	r9, r3, r1
 800cd3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd42:	1c7b      	adds	r3, r7, #1
 800cd44:	444b      	add	r3, r9
 800cd46:	106d      	asrs	r5, r5, #1
 800cd48:	429d      	cmp	r5, r3
 800cd4a:	bf38      	it	cc
 800cd4c:	461d      	movcc	r5, r3
 800cd4e:	0553      	lsls	r3, r2, #21
 800cd50:	d527      	bpl.n	800cda2 <__ssputs_r+0x8e>
 800cd52:	4629      	mov	r1, r5
 800cd54:	f7ff fbd0 	bl	800c4f8 <_malloc_r>
 800cd58:	4606      	mov	r6, r0
 800cd5a:	b360      	cbz	r0, 800cdb6 <__ssputs_r+0xa2>
 800cd5c:	6921      	ldr	r1, [r4, #16]
 800cd5e:	464a      	mov	r2, r9
 800cd60:	f7fe fcf9 	bl	800b756 <memcpy>
 800cd64:	89a3      	ldrh	r3, [r4, #12]
 800cd66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cd6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd6e:	81a3      	strh	r3, [r4, #12]
 800cd70:	6126      	str	r6, [r4, #16]
 800cd72:	6165      	str	r5, [r4, #20]
 800cd74:	444e      	add	r6, r9
 800cd76:	eba5 0509 	sub.w	r5, r5, r9
 800cd7a:	6026      	str	r6, [r4, #0]
 800cd7c:	60a5      	str	r5, [r4, #8]
 800cd7e:	463e      	mov	r6, r7
 800cd80:	42be      	cmp	r6, r7
 800cd82:	d900      	bls.n	800cd86 <__ssputs_r+0x72>
 800cd84:	463e      	mov	r6, r7
 800cd86:	6820      	ldr	r0, [r4, #0]
 800cd88:	4632      	mov	r2, r6
 800cd8a:	4641      	mov	r1, r8
 800cd8c:	f000 f9c6 	bl	800d11c <memmove>
 800cd90:	68a3      	ldr	r3, [r4, #8]
 800cd92:	1b9b      	subs	r3, r3, r6
 800cd94:	60a3      	str	r3, [r4, #8]
 800cd96:	6823      	ldr	r3, [r4, #0]
 800cd98:	4433      	add	r3, r6
 800cd9a:	6023      	str	r3, [r4, #0]
 800cd9c:	2000      	movs	r0, #0
 800cd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda2:	462a      	mov	r2, r5
 800cda4:	f000 fa28 	bl	800d1f8 <_realloc_r>
 800cda8:	4606      	mov	r6, r0
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	d1e0      	bne.n	800cd70 <__ssputs_r+0x5c>
 800cdae:	6921      	ldr	r1, [r4, #16]
 800cdb0:	4650      	mov	r0, sl
 800cdb2:	f7ff fb2d 	bl	800c410 <_free_r>
 800cdb6:	230c      	movs	r3, #12
 800cdb8:	f8ca 3000 	str.w	r3, [sl]
 800cdbc:	89a3      	ldrh	r3, [r4, #12]
 800cdbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdc2:	81a3      	strh	r3, [r4, #12]
 800cdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc8:	e7e9      	b.n	800cd9e <__ssputs_r+0x8a>
	...

0800cdcc <_svfiprintf_r>:
 800cdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdd0:	4698      	mov	r8, r3
 800cdd2:	898b      	ldrh	r3, [r1, #12]
 800cdd4:	061b      	lsls	r3, r3, #24
 800cdd6:	b09d      	sub	sp, #116	@ 0x74
 800cdd8:	4607      	mov	r7, r0
 800cdda:	460d      	mov	r5, r1
 800cddc:	4614      	mov	r4, r2
 800cdde:	d510      	bpl.n	800ce02 <_svfiprintf_r+0x36>
 800cde0:	690b      	ldr	r3, [r1, #16]
 800cde2:	b973      	cbnz	r3, 800ce02 <_svfiprintf_r+0x36>
 800cde4:	2140      	movs	r1, #64	@ 0x40
 800cde6:	f7ff fb87 	bl	800c4f8 <_malloc_r>
 800cdea:	6028      	str	r0, [r5, #0]
 800cdec:	6128      	str	r0, [r5, #16]
 800cdee:	b930      	cbnz	r0, 800cdfe <_svfiprintf_r+0x32>
 800cdf0:	230c      	movs	r3, #12
 800cdf2:	603b      	str	r3, [r7, #0]
 800cdf4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf8:	b01d      	add	sp, #116	@ 0x74
 800cdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdfe:	2340      	movs	r3, #64	@ 0x40
 800ce00:	616b      	str	r3, [r5, #20]
 800ce02:	2300      	movs	r3, #0
 800ce04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce06:	2320      	movs	r3, #32
 800ce08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce10:	2330      	movs	r3, #48	@ 0x30
 800ce12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cfb0 <_svfiprintf_r+0x1e4>
 800ce16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce1a:	f04f 0901 	mov.w	r9, #1
 800ce1e:	4623      	mov	r3, r4
 800ce20:	469a      	mov	sl, r3
 800ce22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce26:	b10a      	cbz	r2, 800ce2c <_svfiprintf_r+0x60>
 800ce28:	2a25      	cmp	r2, #37	@ 0x25
 800ce2a:	d1f9      	bne.n	800ce20 <_svfiprintf_r+0x54>
 800ce2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ce30:	d00b      	beq.n	800ce4a <_svfiprintf_r+0x7e>
 800ce32:	465b      	mov	r3, fp
 800ce34:	4622      	mov	r2, r4
 800ce36:	4629      	mov	r1, r5
 800ce38:	4638      	mov	r0, r7
 800ce3a:	f7ff ff6b 	bl	800cd14 <__ssputs_r>
 800ce3e:	3001      	adds	r0, #1
 800ce40:	f000 80a7 	beq.w	800cf92 <_svfiprintf_r+0x1c6>
 800ce44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce46:	445a      	add	r2, fp
 800ce48:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f000 809f 	beq.w	800cf92 <_svfiprintf_r+0x1c6>
 800ce54:	2300      	movs	r3, #0
 800ce56:	f04f 32ff 	mov.w	r2, #4294967295
 800ce5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce5e:	f10a 0a01 	add.w	sl, sl, #1
 800ce62:	9304      	str	r3, [sp, #16]
 800ce64:	9307      	str	r3, [sp, #28]
 800ce66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce6a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce6c:	4654      	mov	r4, sl
 800ce6e:	2205      	movs	r2, #5
 800ce70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce74:	484e      	ldr	r0, [pc, #312]	@ (800cfb0 <_svfiprintf_r+0x1e4>)
 800ce76:	f7f3 f9ab 	bl	80001d0 <memchr>
 800ce7a:	9a04      	ldr	r2, [sp, #16]
 800ce7c:	b9d8      	cbnz	r0, 800ceb6 <_svfiprintf_r+0xea>
 800ce7e:	06d0      	lsls	r0, r2, #27
 800ce80:	bf44      	itt	mi
 800ce82:	2320      	movmi	r3, #32
 800ce84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce88:	0711      	lsls	r1, r2, #28
 800ce8a:	bf44      	itt	mi
 800ce8c:	232b      	movmi	r3, #43	@ 0x2b
 800ce8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce92:	f89a 3000 	ldrb.w	r3, [sl]
 800ce96:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce98:	d015      	beq.n	800cec6 <_svfiprintf_r+0xfa>
 800ce9a:	9a07      	ldr	r2, [sp, #28]
 800ce9c:	4654      	mov	r4, sl
 800ce9e:	2000      	movs	r0, #0
 800cea0:	f04f 0c0a 	mov.w	ip, #10
 800cea4:	4621      	mov	r1, r4
 800cea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceaa:	3b30      	subs	r3, #48	@ 0x30
 800ceac:	2b09      	cmp	r3, #9
 800ceae:	d94b      	bls.n	800cf48 <_svfiprintf_r+0x17c>
 800ceb0:	b1b0      	cbz	r0, 800cee0 <_svfiprintf_r+0x114>
 800ceb2:	9207      	str	r2, [sp, #28]
 800ceb4:	e014      	b.n	800cee0 <_svfiprintf_r+0x114>
 800ceb6:	eba0 0308 	sub.w	r3, r0, r8
 800ceba:	fa09 f303 	lsl.w	r3, r9, r3
 800cebe:	4313      	orrs	r3, r2
 800cec0:	9304      	str	r3, [sp, #16]
 800cec2:	46a2      	mov	sl, r4
 800cec4:	e7d2      	b.n	800ce6c <_svfiprintf_r+0xa0>
 800cec6:	9b03      	ldr	r3, [sp, #12]
 800cec8:	1d19      	adds	r1, r3, #4
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	9103      	str	r1, [sp, #12]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	bfbb      	ittet	lt
 800ced2:	425b      	neglt	r3, r3
 800ced4:	f042 0202 	orrlt.w	r2, r2, #2
 800ced8:	9307      	strge	r3, [sp, #28]
 800ceda:	9307      	strlt	r3, [sp, #28]
 800cedc:	bfb8      	it	lt
 800cede:	9204      	strlt	r2, [sp, #16]
 800cee0:	7823      	ldrb	r3, [r4, #0]
 800cee2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cee4:	d10a      	bne.n	800cefc <_svfiprintf_r+0x130>
 800cee6:	7863      	ldrb	r3, [r4, #1]
 800cee8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ceea:	d132      	bne.n	800cf52 <_svfiprintf_r+0x186>
 800ceec:	9b03      	ldr	r3, [sp, #12]
 800ceee:	1d1a      	adds	r2, r3, #4
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	9203      	str	r2, [sp, #12]
 800cef4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cef8:	3402      	adds	r4, #2
 800cefa:	9305      	str	r3, [sp, #20]
 800cefc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cfc0 <_svfiprintf_r+0x1f4>
 800cf00:	7821      	ldrb	r1, [r4, #0]
 800cf02:	2203      	movs	r2, #3
 800cf04:	4650      	mov	r0, sl
 800cf06:	f7f3 f963 	bl	80001d0 <memchr>
 800cf0a:	b138      	cbz	r0, 800cf1c <_svfiprintf_r+0x150>
 800cf0c:	9b04      	ldr	r3, [sp, #16]
 800cf0e:	eba0 000a 	sub.w	r0, r0, sl
 800cf12:	2240      	movs	r2, #64	@ 0x40
 800cf14:	4082      	lsls	r2, r0
 800cf16:	4313      	orrs	r3, r2
 800cf18:	3401      	adds	r4, #1
 800cf1a:	9304      	str	r3, [sp, #16]
 800cf1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf20:	4824      	ldr	r0, [pc, #144]	@ (800cfb4 <_svfiprintf_r+0x1e8>)
 800cf22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf26:	2206      	movs	r2, #6
 800cf28:	f7f3 f952 	bl	80001d0 <memchr>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d036      	beq.n	800cf9e <_svfiprintf_r+0x1d2>
 800cf30:	4b21      	ldr	r3, [pc, #132]	@ (800cfb8 <_svfiprintf_r+0x1ec>)
 800cf32:	bb1b      	cbnz	r3, 800cf7c <_svfiprintf_r+0x1b0>
 800cf34:	9b03      	ldr	r3, [sp, #12]
 800cf36:	3307      	adds	r3, #7
 800cf38:	f023 0307 	bic.w	r3, r3, #7
 800cf3c:	3308      	adds	r3, #8
 800cf3e:	9303      	str	r3, [sp, #12]
 800cf40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf42:	4433      	add	r3, r6
 800cf44:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf46:	e76a      	b.n	800ce1e <_svfiprintf_r+0x52>
 800cf48:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	2001      	movs	r0, #1
 800cf50:	e7a8      	b.n	800cea4 <_svfiprintf_r+0xd8>
 800cf52:	2300      	movs	r3, #0
 800cf54:	3401      	adds	r4, #1
 800cf56:	9305      	str	r3, [sp, #20]
 800cf58:	4619      	mov	r1, r3
 800cf5a:	f04f 0c0a 	mov.w	ip, #10
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf64:	3a30      	subs	r2, #48	@ 0x30
 800cf66:	2a09      	cmp	r2, #9
 800cf68:	d903      	bls.n	800cf72 <_svfiprintf_r+0x1a6>
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d0c6      	beq.n	800cefc <_svfiprintf_r+0x130>
 800cf6e:	9105      	str	r1, [sp, #20]
 800cf70:	e7c4      	b.n	800cefc <_svfiprintf_r+0x130>
 800cf72:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf76:	4604      	mov	r4, r0
 800cf78:	2301      	movs	r3, #1
 800cf7a:	e7f0      	b.n	800cf5e <_svfiprintf_r+0x192>
 800cf7c:	ab03      	add	r3, sp, #12
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	462a      	mov	r2, r5
 800cf82:	4b0e      	ldr	r3, [pc, #56]	@ (800cfbc <_svfiprintf_r+0x1f0>)
 800cf84:	a904      	add	r1, sp, #16
 800cf86:	4638      	mov	r0, r7
 800cf88:	f7fd fe74 	bl	800ac74 <_printf_float>
 800cf8c:	1c42      	adds	r2, r0, #1
 800cf8e:	4606      	mov	r6, r0
 800cf90:	d1d6      	bne.n	800cf40 <_svfiprintf_r+0x174>
 800cf92:	89ab      	ldrh	r3, [r5, #12]
 800cf94:	065b      	lsls	r3, r3, #25
 800cf96:	f53f af2d 	bmi.w	800cdf4 <_svfiprintf_r+0x28>
 800cf9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf9c:	e72c      	b.n	800cdf8 <_svfiprintf_r+0x2c>
 800cf9e:	ab03      	add	r3, sp, #12
 800cfa0:	9300      	str	r3, [sp, #0]
 800cfa2:	462a      	mov	r2, r5
 800cfa4:	4b05      	ldr	r3, [pc, #20]	@ (800cfbc <_svfiprintf_r+0x1f0>)
 800cfa6:	a904      	add	r1, sp, #16
 800cfa8:	4638      	mov	r0, r7
 800cfaa:	f7fe f8fb 	bl	800b1a4 <_printf_i>
 800cfae:	e7ed      	b.n	800cf8c <_svfiprintf_r+0x1c0>
 800cfb0:	0800edc0 	.word	0x0800edc0
 800cfb4:	0800edca 	.word	0x0800edca
 800cfb8:	0800ac75 	.word	0x0800ac75
 800cfbc:	0800cd15 	.word	0x0800cd15
 800cfc0:	0800edc6 	.word	0x0800edc6

0800cfc4 <__sflush_r>:
 800cfc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfcc:	0716      	lsls	r6, r2, #28
 800cfce:	4605      	mov	r5, r0
 800cfd0:	460c      	mov	r4, r1
 800cfd2:	d454      	bmi.n	800d07e <__sflush_r+0xba>
 800cfd4:	684b      	ldr	r3, [r1, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	dc02      	bgt.n	800cfe0 <__sflush_r+0x1c>
 800cfda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	dd48      	ble.n	800d072 <__sflush_r+0xae>
 800cfe0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfe2:	2e00      	cmp	r6, #0
 800cfe4:	d045      	beq.n	800d072 <__sflush_r+0xae>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cfec:	682f      	ldr	r7, [r5, #0]
 800cfee:	6a21      	ldr	r1, [r4, #32]
 800cff0:	602b      	str	r3, [r5, #0]
 800cff2:	d030      	beq.n	800d056 <__sflush_r+0x92>
 800cff4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	0759      	lsls	r1, r3, #29
 800cffa:	d505      	bpl.n	800d008 <__sflush_r+0x44>
 800cffc:	6863      	ldr	r3, [r4, #4]
 800cffe:	1ad2      	subs	r2, r2, r3
 800d000:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d002:	b10b      	cbz	r3, 800d008 <__sflush_r+0x44>
 800d004:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d006:	1ad2      	subs	r2, r2, r3
 800d008:	2300      	movs	r3, #0
 800d00a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d00c:	6a21      	ldr	r1, [r4, #32]
 800d00e:	4628      	mov	r0, r5
 800d010:	47b0      	blx	r6
 800d012:	1c43      	adds	r3, r0, #1
 800d014:	89a3      	ldrh	r3, [r4, #12]
 800d016:	d106      	bne.n	800d026 <__sflush_r+0x62>
 800d018:	6829      	ldr	r1, [r5, #0]
 800d01a:	291d      	cmp	r1, #29
 800d01c:	d82b      	bhi.n	800d076 <__sflush_r+0xb2>
 800d01e:	4a2a      	ldr	r2, [pc, #168]	@ (800d0c8 <__sflush_r+0x104>)
 800d020:	410a      	asrs	r2, r1
 800d022:	07d6      	lsls	r6, r2, #31
 800d024:	d427      	bmi.n	800d076 <__sflush_r+0xb2>
 800d026:	2200      	movs	r2, #0
 800d028:	6062      	str	r2, [r4, #4]
 800d02a:	04d9      	lsls	r1, r3, #19
 800d02c:	6922      	ldr	r2, [r4, #16]
 800d02e:	6022      	str	r2, [r4, #0]
 800d030:	d504      	bpl.n	800d03c <__sflush_r+0x78>
 800d032:	1c42      	adds	r2, r0, #1
 800d034:	d101      	bne.n	800d03a <__sflush_r+0x76>
 800d036:	682b      	ldr	r3, [r5, #0]
 800d038:	b903      	cbnz	r3, 800d03c <__sflush_r+0x78>
 800d03a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d03c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d03e:	602f      	str	r7, [r5, #0]
 800d040:	b1b9      	cbz	r1, 800d072 <__sflush_r+0xae>
 800d042:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d046:	4299      	cmp	r1, r3
 800d048:	d002      	beq.n	800d050 <__sflush_r+0x8c>
 800d04a:	4628      	mov	r0, r5
 800d04c:	f7ff f9e0 	bl	800c410 <_free_r>
 800d050:	2300      	movs	r3, #0
 800d052:	6363      	str	r3, [r4, #52]	@ 0x34
 800d054:	e00d      	b.n	800d072 <__sflush_r+0xae>
 800d056:	2301      	movs	r3, #1
 800d058:	4628      	mov	r0, r5
 800d05a:	47b0      	blx	r6
 800d05c:	4602      	mov	r2, r0
 800d05e:	1c50      	adds	r0, r2, #1
 800d060:	d1c9      	bne.n	800cff6 <__sflush_r+0x32>
 800d062:	682b      	ldr	r3, [r5, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d0c6      	beq.n	800cff6 <__sflush_r+0x32>
 800d068:	2b1d      	cmp	r3, #29
 800d06a:	d001      	beq.n	800d070 <__sflush_r+0xac>
 800d06c:	2b16      	cmp	r3, #22
 800d06e:	d11e      	bne.n	800d0ae <__sflush_r+0xea>
 800d070:	602f      	str	r7, [r5, #0]
 800d072:	2000      	movs	r0, #0
 800d074:	e022      	b.n	800d0bc <__sflush_r+0xf8>
 800d076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d07a:	b21b      	sxth	r3, r3
 800d07c:	e01b      	b.n	800d0b6 <__sflush_r+0xf2>
 800d07e:	690f      	ldr	r7, [r1, #16]
 800d080:	2f00      	cmp	r7, #0
 800d082:	d0f6      	beq.n	800d072 <__sflush_r+0xae>
 800d084:	0793      	lsls	r3, r2, #30
 800d086:	680e      	ldr	r6, [r1, #0]
 800d088:	bf08      	it	eq
 800d08a:	694b      	ldreq	r3, [r1, #20]
 800d08c:	600f      	str	r7, [r1, #0]
 800d08e:	bf18      	it	ne
 800d090:	2300      	movne	r3, #0
 800d092:	eba6 0807 	sub.w	r8, r6, r7
 800d096:	608b      	str	r3, [r1, #8]
 800d098:	f1b8 0f00 	cmp.w	r8, #0
 800d09c:	dde9      	ble.n	800d072 <__sflush_r+0xae>
 800d09e:	6a21      	ldr	r1, [r4, #32]
 800d0a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d0a2:	4643      	mov	r3, r8
 800d0a4:	463a      	mov	r2, r7
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	47b0      	blx	r6
 800d0aa:	2800      	cmp	r0, #0
 800d0ac:	dc08      	bgt.n	800d0c0 <__sflush_r+0xfc>
 800d0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0b6:	81a3      	strh	r3, [r4, #12]
 800d0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c0:	4407      	add	r7, r0
 800d0c2:	eba8 0800 	sub.w	r8, r8, r0
 800d0c6:	e7e7      	b.n	800d098 <__sflush_r+0xd4>
 800d0c8:	dfbffffe 	.word	0xdfbffffe

0800d0cc <_fflush_r>:
 800d0cc:	b538      	push	{r3, r4, r5, lr}
 800d0ce:	690b      	ldr	r3, [r1, #16]
 800d0d0:	4605      	mov	r5, r0
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	b913      	cbnz	r3, 800d0dc <_fflush_r+0x10>
 800d0d6:	2500      	movs	r5, #0
 800d0d8:	4628      	mov	r0, r5
 800d0da:	bd38      	pop	{r3, r4, r5, pc}
 800d0dc:	b118      	cbz	r0, 800d0e6 <_fflush_r+0x1a>
 800d0de:	6a03      	ldr	r3, [r0, #32]
 800d0e0:	b90b      	cbnz	r3, 800d0e6 <_fflush_r+0x1a>
 800d0e2:	f7fe fa0b 	bl	800b4fc <__sinit>
 800d0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d0f3      	beq.n	800d0d6 <_fflush_r+0xa>
 800d0ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d0f0:	07d0      	lsls	r0, r2, #31
 800d0f2:	d404      	bmi.n	800d0fe <_fflush_r+0x32>
 800d0f4:	0599      	lsls	r1, r3, #22
 800d0f6:	d402      	bmi.n	800d0fe <_fflush_r+0x32>
 800d0f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0fa:	f7fe fb2a 	bl	800b752 <__retarget_lock_acquire_recursive>
 800d0fe:	4628      	mov	r0, r5
 800d100:	4621      	mov	r1, r4
 800d102:	f7ff ff5f 	bl	800cfc4 <__sflush_r>
 800d106:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d108:	07da      	lsls	r2, r3, #31
 800d10a:	4605      	mov	r5, r0
 800d10c:	d4e4      	bmi.n	800d0d8 <_fflush_r+0xc>
 800d10e:	89a3      	ldrh	r3, [r4, #12]
 800d110:	059b      	lsls	r3, r3, #22
 800d112:	d4e1      	bmi.n	800d0d8 <_fflush_r+0xc>
 800d114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d116:	f7fe fb1d 	bl	800b754 <__retarget_lock_release_recursive>
 800d11a:	e7dd      	b.n	800d0d8 <_fflush_r+0xc>

0800d11c <memmove>:
 800d11c:	4288      	cmp	r0, r1
 800d11e:	b510      	push	{r4, lr}
 800d120:	eb01 0402 	add.w	r4, r1, r2
 800d124:	d902      	bls.n	800d12c <memmove+0x10>
 800d126:	4284      	cmp	r4, r0
 800d128:	4623      	mov	r3, r4
 800d12a:	d807      	bhi.n	800d13c <memmove+0x20>
 800d12c:	1e43      	subs	r3, r0, #1
 800d12e:	42a1      	cmp	r1, r4
 800d130:	d008      	beq.n	800d144 <memmove+0x28>
 800d132:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d13a:	e7f8      	b.n	800d12e <memmove+0x12>
 800d13c:	4402      	add	r2, r0
 800d13e:	4601      	mov	r1, r0
 800d140:	428a      	cmp	r2, r1
 800d142:	d100      	bne.n	800d146 <memmove+0x2a>
 800d144:	bd10      	pop	{r4, pc}
 800d146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d14a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d14e:	e7f7      	b.n	800d140 <memmove+0x24>

0800d150 <_sbrk_r>:
 800d150:	b538      	push	{r3, r4, r5, lr}
 800d152:	4d06      	ldr	r5, [pc, #24]	@ (800d16c <_sbrk_r+0x1c>)
 800d154:	2300      	movs	r3, #0
 800d156:	4604      	mov	r4, r0
 800d158:	4608      	mov	r0, r1
 800d15a:	602b      	str	r3, [r5, #0]
 800d15c:	f7f5 fb94 	bl	8002888 <_sbrk>
 800d160:	1c43      	adds	r3, r0, #1
 800d162:	d102      	bne.n	800d16a <_sbrk_r+0x1a>
 800d164:	682b      	ldr	r3, [r5, #0]
 800d166:	b103      	cbz	r3, 800d16a <_sbrk_r+0x1a>
 800d168:	6023      	str	r3, [r4, #0]
 800d16a:	bd38      	pop	{r3, r4, r5, pc}
 800d16c:	200021e4 	.word	0x200021e4

0800d170 <__assert_func>:
 800d170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d172:	4614      	mov	r4, r2
 800d174:	461a      	mov	r2, r3
 800d176:	4b09      	ldr	r3, [pc, #36]	@ (800d19c <__assert_func+0x2c>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4605      	mov	r5, r0
 800d17c:	68d8      	ldr	r0, [r3, #12]
 800d17e:	b954      	cbnz	r4, 800d196 <__assert_func+0x26>
 800d180:	4b07      	ldr	r3, [pc, #28]	@ (800d1a0 <__assert_func+0x30>)
 800d182:	461c      	mov	r4, r3
 800d184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d188:	9100      	str	r1, [sp, #0]
 800d18a:	462b      	mov	r3, r5
 800d18c:	4905      	ldr	r1, [pc, #20]	@ (800d1a4 <__assert_func+0x34>)
 800d18e:	f000 f86f 	bl	800d270 <fiprintf>
 800d192:	f000 f87f 	bl	800d294 <abort>
 800d196:	4b04      	ldr	r3, [pc, #16]	@ (800d1a8 <__assert_func+0x38>)
 800d198:	e7f4      	b.n	800d184 <__assert_func+0x14>
 800d19a:	bf00      	nop
 800d19c:	20000144 	.word	0x20000144
 800d1a0:	0800ee16 	.word	0x0800ee16
 800d1a4:	0800ede8 	.word	0x0800ede8
 800d1a8:	0800eddb 	.word	0x0800eddb

0800d1ac <_calloc_r>:
 800d1ac:	b570      	push	{r4, r5, r6, lr}
 800d1ae:	fba1 5402 	umull	r5, r4, r1, r2
 800d1b2:	b93c      	cbnz	r4, 800d1c4 <_calloc_r+0x18>
 800d1b4:	4629      	mov	r1, r5
 800d1b6:	f7ff f99f 	bl	800c4f8 <_malloc_r>
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	b928      	cbnz	r0, 800d1ca <_calloc_r+0x1e>
 800d1be:	2600      	movs	r6, #0
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	bd70      	pop	{r4, r5, r6, pc}
 800d1c4:	220c      	movs	r2, #12
 800d1c6:	6002      	str	r2, [r0, #0]
 800d1c8:	e7f9      	b.n	800d1be <_calloc_r+0x12>
 800d1ca:	462a      	mov	r2, r5
 800d1cc:	4621      	mov	r1, r4
 800d1ce:	f7fe fa42 	bl	800b656 <memset>
 800d1d2:	e7f5      	b.n	800d1c0 <_calloc_r+0x14>

0800d1d4 <__ascii_mbtowc>:
 800d1d4:	b082      	sub	sp, #8
 800d1d6:	b901      	cbnz	r1, 800d1da <__ascii_mbtowc+0x6>
 800d1d8:	a901      	add	r1, sp, #4
 800d1da:	b142      	cbz	r2, 800d1ee <__ascii_mbtowc+0x1a>
 800d1dc:	b14b      	cbz	r3, 800d1f2 <__ascii_mbtowc+0x1e>
 800d1de:	7813      	ldrb	r3, [r2, #0]
 800d1e0:	600b      	str	r3, [r1, #0]
 800d1e2:	7812      	ldrb	r2, [r2, #0]
 800d1e4:	1e10      	subs	r0, r2, #0
 800d1e6:	bf18      	it	ne
 800d1e8:	2001      	movne	r0, #1
 800d1ea:	b002      	add	sp, #8
 800d1ec:	4770      	bx	lr
 800d1ee:	4610      	mov	r0, r2
 800d1f0:	e7fb      	b.n	800d1ea <__ascii_mbtowc+0x16>
 800d1f2:	f06f 0001 	mvn.w	r0, #1
 800d1f6:	e7f8      	b.n	800d1ea <__ascii_mbtowc+0x16>

0800d1f8 <_realloc_r>:
 800d1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1fc:	4680      	mov	r8, r0
 800d1fe:	4615      	mov	r5, r2
 800d200:	460c      	mov	r4, r1
 800d202:	b921      	cbnz	r1, 800d20e <_realloc_r+0x16>
 800d204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d208:	4611      	mov	r1, r2
 800d20a:	f7ff b975 	b.w	800c4f8 <_malloc_r>
 800d20e:	b92a      	cbnz	r2, 800d21c <_realloc_r+0x24>
 800d210:	f7ff f8fe 	bl	800c410 <_free_r>
 800d214:	2400      	movs	r4, #0
 800d216:	4620      	mov	r0, r4
 800d218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d21c:	f000 f841 	bl	800d2a2 <_malloc_usable_size_r>
 800d220:	4285      	cmp	r5, r0
 800d222:	4606      	mov	r6, r0
 800d224:	d802      	bhi.n	800d22c <_realloc_r+0x34>
 800d226:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d22a:	d8f4      	bhi.n	800d216 <_realloc_r+0x1e>
 800d22c:	4629      	mov	r1, r5
 800d22e:	4640      	mov	r0, r8
 800d230:	f7ff f962 	bl	800c4f8 <_malloc_r>
 800d234:	4607      	mov	r7, r0
 800d236:	2800      	cmp	r0, #0
 800d238:	d0ec      	beq.n	800d214 <_realloc_r+0x1c>
 800d23a:	42b5      	cmp	r5, r6
 800d23c:	462a      	mov	r2, r5
 800d23e:	4621      	mov	r1, r4
 800d240:	bf28      	it	cs
 800d242:	4632      	movcs	r2, r6
 800d244:	f7fe fa87 	bl	800b756 <memcpy>
 800d248:	4621      	mov	r1, r4
 800d24a:	4640      	mov	r0, r8
 800d24c:	f7ff f8e0 	bl	800c410 <_free_r>
 800d250:	463c      	mov	r4, r7
 800d252:	e7e0      	b.n	800d216 <_realloc_r+0x1e>

0800d254 <__ascii_wctomb>:
 800d254:	4603      	mov	r3, r0
 800d256:	4608      	mov	r0, r1
 800d258:	b141      	cbz	r1, 800d26c <__ascii_wctomb+0x18>
 800d25a:	2aff      	cmp	r2, #255	@ 0xff
 800d25c:	d904      	bls.n	800d268 <__ascii_wctomb+0x14>
 800d25e:	228a      	movs	r2, #138	@ 0x8a
 800d260:	601a      	str	r2, [r3, #0]
 800d262:	f04f 30ff 	mov.w	r0, #4294967295
 800d266:	4770      	bx	lr
 800d268:	700a      	strb	r2, [r1, #0]
 800d26a:	2001      	movs	r0, #1
 800d26c:	4770      	bx	lr
	...

0800d270 <fiprintf>:
 800d270:	b40e      	push	{r1, r2, r3}
 800d272:	b503      	push	{r0, r1, lr}
 800d274:	4601      	mov	r1, r0
 800d276:	ab03      	add	r3, sp, #12
 800d278:	4805      	ldr	r0, [pc, #20]	@ (800d290 <fiprintf+0x20>)
 800d27a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d27e:	6800      	ldr	r0, [r0, #0]
 800d280:	9301      	str	r3, [sp, #4]
 800d282:	f000 f83f 	bl	800d304 <_vfiprintf_r>
 800d286:	b002      	add	sp, #8
 800d288:	f85d eb04 	ldr.w	lr, [sp], #4
 800d28c:	b003      	add	sp, #12
 800d28e:	4770      	bx	lr
 800d290:	20000144 	.word	0x20000144

0800d294 <abort>:
 800d294:	b508      	push	{r3, lr}
 800d296:	2006      	movs	r0, #6
 800d298:	f000 fa08 	bl	800d6ac <raise>
 800d29c:	2001      	movs	r0, #1
 800d29e:	f7f5 fa7b 	bl	8002798 <_exit>

0800d2a2 <_malloc_usable_size_r>:
 800d2a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2a6:	1f18      	subs	r0, r3, #4
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	bfbc      	itt	lt
 800d2ac:	580b      	ldrlt	r3, [r1, r0]
 800d2ae:	18c0      	addlt	r0, r0, r3
 800d2b0:	4770      	bx	lr

0800d2b2 <__sfputc_r>:
 800d2b2:	6893      	ldr	r3, [r2, #8]
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	b410      	push	{r4}
 800d2ba:	6093      	str	r3, [r2, #8]
 800d2bc:	da08      	bge.n	800d2d0 <__sfputc_r+0x1e>
 800d2be:	6994      	ldr	r4, [r2, #24]
 800d2c0:	42a3      	cmp	r3, r4
 800d2c2:	db01      	blt.n	800d2c8 <__sfputc_r+0x16>
 800d2c4:	290a      	cmp	r1, #10
 800d2c6:	d103      	bne.n	800d2d0 <__sfputc_r+0x1e>
 800d2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2cc:	f000 b932 	b.w	800d534 <__swbuf_r>
 800d2d0:	6813      	ldr	r3, [r2, #0]
 800d2d2:	1c58      	adds	r0, r3, #1
 800d2d4:	6010      	str	r0, [r2, #0]
 800d2d6:	7019      	strb	r1, [r3, #0]
 800d2d8:	4608      	mov	r0, r1
 800d2da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <__sfputs_r>:
 800d2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e2:	4606      	mov	r6, r0
 800d2e4:	460f      	mov	r7, r1
 800d2e6:	4614      	mov	r4, r2
 800d2e8:	18d5      	adds	r5, r2, r3
 800d2ea:	42ac      	cmp	r4, r5
 800d2ec:	d101      	bne.n	800d2f2 <__sfputs_r+0x12>
 800d2ee:	2000      	movs	r0, #0
 800d2f0:	e007      	b.n	800d302 <__sfputs_r+0x22>
 800d2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2f6:	463a      	mov	r2, r7
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	f7ff ffda 	bl	800d2b2 <__sfputc_r>
 800d2fe:	1c43      	adds	r3, r0, #1
 800d300:	d1f3      	bne.n	800d2ea <__sfputs_r+0xa>
 800d302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d304 <_vfiprintf_r>:
 800d304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d308:	460d      	mov	r5, r1
 800d30a:	b09d      	sub	sp, #116	@ 0x74
 800d30c:	4614      	mov	r4, r2
 800d30e:	4698      	mov	r8, r3
 800d310:	4606      	mov	r6, r0
 800d312:	b118      	cbz	r0, 800d31c <_vfiprintf_r+0x18>
 800d314:	6a03      	ldr	r3, [r0, #32]
 800d316:	b90b      	cbnz	r3, 800d31c <_vfiprintf_r+0x18>
 800d318:	f7fe f8f0 	bl	800b4fc <__sinit>
 800d31c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d31e:	07d9      	lsls	r1, r3, #31
 800d320:	d405      	bmi.n	800d32e <_vfiprintf_r+0x2a>
 800d322:	89ab      	ldrh	r3, [r5, #12]
 800d324:	059a      	lsls	r2, r3, #22
 800d326:	d402      	bmi.n	800d32e <_vfiprintf_r+0x2a>
 800d328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d32a:	f7fe fa12 	bl	800b752 <__retarget_lock_acquire_recursive>
 800d32e:	89ab      	ldrh	r3, [r5, #12]
 800d330:	071b      	lsls	r3, r3, #28
 800d332:	d501      	bpl.n	800d338 <_vfiprintf_r+0x34>
 800d334:	692b      	ldr	r3, [r5, #16]
 800d336:	b99b      	cbnz	r3, 800d360 <_vfiprintf_r+0x5c>
 800d338:	4629      	mov	r1, r5
 800d33a:	4630      	mov	r0, r6
 800d33c:	f000 f938 	bl	800d5b0 <__swsetup_r>
 800d340:	b170      	cbz	r0, 800d360 <_vfiprintf_r+0x5c>
 800d342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d344:	07dc      	lsls	r4, r3, #31
 800d346:	d504      	bpl.n	800d352 <_vfiprintf_r+0x4e>
 800d348:	f04f 30ff 	mov.w	r0, #4294967295
 800d34c:	b01d      	add	sp, #116	@ 0x74
 800d34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d352:	89ab      	ldrh	r3, [r5, #12]
 800d354:	0598      	lsls	r0, r3, #22
 800d356:	d4f7      	bmi.n	800d348 <_vfiprintf_r+0x44>
 800d358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d35a:	f7fe f9fb 	bl	800b754 <__retarget_lock_release_recursive>
 800d35e:	e7f3      	b.n	800d348 <_vfiprintf_r+0x44>
 800d360:	2300      	movs	r3, #0
 800d362:	9309      	str	r3, [sp, #36]	@ 0x24
 800d364:	2320      	movs	r3, #32
 800d366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d36a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d36e:	2330      	movs	r3, #48	@ 0x30
 800d370:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d520 <_vfiprintf_r+0x21c>
 800d374:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d378:	f04f 0901 	mov.w	r9, #1
 800d37c:	4623      	mov	r3, r4
 800d37e:	469a      	mov	sl, r3
 800d380:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d384:	b10a      	cbz	r2, 800d38a <_vfiprintf_r+0x86>
 800d386:	2a25      	cmp	r2, #37	@ 0x25
 800d388:	d1f9      	bne.n	800d37e <_vfiprintf_r+0x7a>
 800d38a:	ebba 0b04 	subs.w	fp, sl, r4
 800d38e:	d00b      	beq.n	800d3a8 <_vfiprintf_r+0xa4>
 800d390:	465b      	mov	r3, fp
 800d392:	4622      	mov	r2, r4
 800d394:	4629      	mov	r1, r5
 800d396:	4630      	mov	r0, r6
 800d398:	f7ff ffa2 	bl	800d2e0 <__sfputs_r>
 800d39c:	3001      	adds	r0, #1
 800d39e:	f000 80a7 	beq.w	800d4f0 <_vfiprintf_r+0x1ec>
 800d3a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3a4:	445a      	add	r2, fp
 800d3a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3a8:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f000 809f 	beq.w	800d4f0 <_vfiprintf_r+0x1ec>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3bc:	f10a 0a01 	add.w	sl, sl, #1
 800d3c0:	9304      	str	r3, [sp, #16]
 800d3c2:	9307      	str	r3, [sp, #28]
 800d3c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3ca:	4654      	mov	r4, sl
 800d3cc:	2205      	movs	r2, #5
 800d3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3d2:	4853      	ldr	r0, [pc, #332]	@ (800d520 <_vfiprintf_r+0x21c>)
 800d3d4:	f7f2 fefc 	bl	80001d0 <memchr>
 800d3d8:	9a04      	ldr	r2, [sp, #16]
 800d3da:	b9d8      	cbnz	r0, 800d414 <_vfiprintf_r+0x110>
 800d3dc:	06d1      	lsls	r1, r2, #27
 800d3de:	bf44      	itt	mi
 800d3e0:	2320      	movmi	r3, #32
 800d3e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3e6:	0713      	lsls	r3, r2, #28
 800d3e8:	bf44      	itt	mi
 800d3ea:	232b      	movmi	r3, #43	@ 0x2b
 800d3ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d3f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3f6:	d015      	beq.n	800d424 <_vfiprintf_r+0x120>
 800d3f8:	9a07      	ldr	r2, [sp, #28]
 800d3fa:	4654      	mov	r4, sl
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	f04f 0c0a 	mov.w	ip, #10
 800d402:	4621      	mov	r1, r4
 800d404:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d408:	3b30      	subs	r3, #48	@ 0x30
 800d40a:	2b09      	cmp	r3, #9
 800d40c:	d94b      	bls.n	800d4a6 <_vfiprintf_r+0x1a2>
 800d40e:	b1b0      	cbz	r0, 800d43e <_vfiprintf_r+0x13a>
 800d410:	9207      	str	r2, [sp, #28]
 800d412:	e014      	b.n	800d43e <_vfiprintf_r+0x13a>
 800d414:	eba0 0308 	sub.w	r3, r0, r8
 800d418:	fa09 f303 	lsl.w	r3, r9, r3
 800d41c:	4313      	orrs	r3, r2
 800d41e:	9304      	str	r3, [sp, #16]
 800d420:	46a2      	mov	sl, r4
 800d422:	e7d2      	b.n	800d3ca <_vfiprintf_r+0xc6>
 800d424:	9b03      	ldr	r3, [sp, #12]
 800d426:	1d19      	adds	r1, r3, #4
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	9103      	str	r1, [sp, #12]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	bfbb      	ittet	lt
 800d430:	425b      	neglt	r3, r3
 800d432:	f042 0202 	orrlt.w	r2, r2, #2
 800d436:	9307      	strge	r3, [sp, #28]
 800d438:	9307      	strlt	r3, [sp, #28]
 800d43a:	bfb8      	it	lt
 800d43c:	9204      	strlt	r2, [sp, #16]
 800d43e:	7823      	ldrb	r3, [r4, #0]
 800d440:	2b2e      	cmp	r3, #46	@ 0x2e
 800d442:	d10a      	bne.n	800d45a <_vfiprintf_r+0x156>
 800d444:	7863      	ldrb	r3, [r4, #1]
 800d446:	2b2a      	cmp	r3, #42	@ 0x2a
 800d448:	d132      	bne.n	800d4b0 <_vfiprintf_r+0x1ac>
 800d44a:	9b03      	ldr	r3, [sp, #12]
 800d44c:	1d1a      	adds	r2, r3, #4
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	9203      	str	r2, [sp, #12]
 800d452:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d456:	3402      	adds	r4, #2
 800d458:	9305      	str	r3, [sp, #20]
 800d45a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d530 <_vfiprintf_r+0x22c>
 800d45e:	7821      	ldrb	r1, [r4, #0]
 800d460:	2203      	movs	r2, #3
 800d462:	4650      	mov	r0, sl
 800d464:	f7f2 feb4 	bl	80001d0 <memchr>
 800d468:	b138      	cbz	r0, 800d47a <_vfiprintf_r+0x176>
 800d46a:	9b04      	ldr	r3, [sp, #16]
 800d46c:	eba0 000a 	sub.w	r0, r0, sl
 800d470:	2240      	movs	r2, #64	@ 0x40
 800d472:	4082      	lsls	r2, r0
 800d474:	4313      	orrs	r3, r2
 800d476:	3401      	adds	r4, #1
 800d478:	9304      	str	r3, [sp, #16]
 800d47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d47e:	4829      	ldr	r0, [pc, #164]	@ (800d524 <_vfiprintf_r+0x220>)
 800d480:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d484:	2206      	movs	r2, #6
 800d486:	f7f2 fea3 	bl	80001d0 <memchr>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	d03f      	beq.n	800d50e <_vfiprintf_r+0x20a>
 800d48e:	4b26      	ldr	r3, [pc, #152]	@ (800d528 <_vfiprintf_r+0x224>)
 800d490:	bb1b      	cbnz	r3, 800d4da <_vfiprintf_r+0x1d6>
 800d492:	9b03      	ldr	r3, [sp, #12]
 800d494:	3307      	adds	r3, #7
 800d496:	f023 0307 	bic.w	r3, r3, #7
 800d49a:	3308      	adds	r3, #8
 800d49c:	9303      	str	r3, [sp, #12]
 800d49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4a0:	443b      	add	r3, r7
 800d4a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4a4:	e76a      	b.n	800d37c <_vfiprintf_r+0x78>
 800d4a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4aa:	460c      	mov	r4, r1
 800d4ac:	2001      	movs	r0, #1
 800d4ae:	e7a8      	b.n	800d402 <_vfiprintf_r+0xfe>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	3401      	adds	r4, #1
 800d4b4:	9305      	str	r3, [sp, #20]
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	f04f 0c0a 	mov.w	ip, #10
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4c2:	3a30      	subs	r2, #48	@ 0x30
 800d4c4:	2a09      	cmp	r2, #9
 800d4c6:	d903      	bls.n	800d4d0 <_vfiprintf_r+0x1cc>
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d0c6      	beq.n	800d45a <_vfiprintf_r+0x156>
 800d4cc:	9105      	str	r1, [sp, #20]
 800d4ce:	e7c4      	b.n	800d45a <_vfiprintf_r+0x156>
 800d4d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4d4:	4604      	mov	r4, r0
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e7f0      	b.n	800d4bc <_vfiprintf_r+0x1b8>
 800d4da:	ab03      	add	r3, sp, #12
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	462a      	mov	r2, r5
 800d4e0:	4b12      	ldr	r3, [pc, #72]	@ (800d52c <_vfiprintf_r+0x228>)
 800d4e2:	a904      	add	r1, sp, #16
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f7fd fbc5 	bl	800ac74 <_printf_float>
 800d4ea:	4607      	mov	r7, r0
 800d4ec:	1c78      	adds	r0, r7, #1
 800d4ee:	d1d6      	bne.n	800d49e <_vfiprintf_r+0x19a>
 800d4f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4f2:	07d9      	lsls	r1, r3, #31
 800d4f4:	d405      	bmi.n	800d502 <_vfiprintf_r+0x1fe>
 800d4f6:	89ab      	ldrh	r3, [r5, #12]
 800d4f8:	059a      	lsls	r2, r3, #22
 800d4fa:	d402      	bmi.n	800d502 <_vfiprintf_r+0x1fe>
 800d4fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4fe:	f7fe f929 	bl	800b754 <__retarget_lock_release_recursive>
 800d502:	89ab      	ldrh	r3, [r5, #12]
 800d504:	065b      	lsls	r3, r3, #25
 800d506:	f53f af1f 	bmi.w	800d348 <_vfiprintf_r+0x44>
 800d50a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d50c:	e71e      	b.n	800d34c <_vfiprintf_r+0x48>
 800d50e:	ab03      	add	r3, sp, #12
 800d510:	9300      	str	r3, [sp, #0]
 800d512:	462a      	mov	r2, r5
 800d514:	4b05      	ldr	r3, [pc, #20]	@ (800d52c <_vfiprintf_r+0x228>)
 800d516:	a904      	add	r1, sp, #16
 800d518:	4630      	mov	r0, r6
 800d51a:	f7fd fe43 	bl	800b1a4 <_printf_i>
 800d51e:	e7e4      	b.n	800d4ea <_vfiprintf_r+0x1e6>
 800d520:	0800edc0 	.word	0x0800edc0
 800d524:	0800edca 	.word	0x0800edca
 800d528:	0800ac75 	.word	0x0800ac75
 800d52c:	0800d2e1 	.word	0x0800d2e1
 800d530:	0800edc6 	.word	0x0800edc6

0800d534 <__swbuf_r>:
 800d534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d536:	460e      	mov	r6, r1
 800d538:	4614      	mov	r4, r2
 800d53a:	4605      	mov	r5, r0
 800d53c:	b118      	cbz	r0, 800d546 <__swbuf_r+0x12>
 800d53e:	6a03      	ldr	r3, [r0, #32]
 800d540:	b90b      	cbnz	r3, 800d546 <__swbuf_r+0x12>
 800d542:	f7fd ffdb 	bl	800b4fc <__sinit>
 800d546:	69a3      	ldr	r3, [r4, #24]
 800d548:	60a3      	str	r3, [r4, #8]
 800d54a:	89a3      	ldrh	r3, [r4, #12]
 800d54c:	071a      	lsls	r2, r3, #28
 800d54e:	d501      	bpl.n	800d554 <__swbuf_r+0x20>
 800d550:	6923      	ldr	r3, [r4, #16]
 800d552:	b943      	cbnz	r3, 800d566 <__swbuf_r+0x32>
 800d554:	4621      	mov	r1, r4
 800d556:	4628      	mov	r0, r5
 800d558:	f000 f82a 	bl	800d5b0 <__swsetup_r>
 800d55c:	b118      	cbz	r0, 800d566 <__swbuf_r+0x32>
 800d55e:	f04f 37ff 	mov.w	r7, #4294967295
 800d562:	4638      	mov	r0, r7
 800d564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d566:	6823      	ldr	r3, [r4, #0]
 800d568:	6922      	ldr	r2, [r4, #16]
 800d56a:	1a98      	subs	r0, r3, r2
 800d56c:	6963      	ldr	r3, [r4, #20]
 800d56e:	b2f6      	uxtb	r6, r6
 800d570:	4283      	cmp	r3, r0
 800d572:	4637      	mov	r7, r6
 800d574:	dc05      	bgt.n	800d582 <__swbuf_r+0x4e>
 800d576:	4621      	mov	r1, r4
 800d578:	4628      	mov	r0, r5
 800d57a:	f7ff fda7 	bl	800d0cc <_fflush_r>
 800d57e:	2800      	cmp	r0, #0
 800d580:	d1ed      	bne.n	800d55e <__swbuf_r+0x2a>
 800d582:	68a3      	ldr	r3, [r4, #8]
 800d584:	3b01      	subs	r3, #1
 800d586:	60a3      	str	r3, [r4, #8]
 800d588:	6823      	ldr	r3, [r4, #0]
 800d58a:	1c5a      	adds	r2, r3, #1
 800d58c:	6022      	str	r2, [r4, #0]
 800d58e:	701e      	strb	r6, [r3, #0]
 800d590:	6962      	ldr	r2, [r4, #20]
 800d592:	1c43      	adds	r3, r0, #1
 800d594:	429a      	cmp	r2, r3
 800d596:	d004      	beq.n	800d5a2 <__swbuf_r+0x6e>
 800d598:	89a3      	ldrh	r3, [r4, #12]
 800d59a:	07db      	lsls	r3, r3, #31
 800d59c:	d5e1      	bpl.n	800d562 <__swbuf_r+0x2e>
 800d59e:	2e0a      	cmp	r6, #10
 800d5a0:	d1df      	bne.n	800d562 <__swbuf_r+0x2e>
 800d5a2:	4621      	mov	r1, r4
 800d5a4:	4628      	mov	r0, r5
 800d5a6:	f7ff fd91 	bl	800d0cc <_fflush_r>
 800d5aa:	2800      	cmp	r0, #0
 800d5ac:	d0d9      	beq.n	800d562 <__swbuf_r+0x2e>
 800d5ae:	e7d6      	b.n	800d55e <__swbuf_r+0x2a>

0800d5b0 <__swsetup_r>:
 800d5b0:	b538      	push	{r3, r4, r5, lr}
 800d5b2:	4b29      	ldr	r3, [pc, #164]	@ (800d658 <__swsetup_r+0xa8>)
 800d5b4:	4605      	mov	r5, r0
 800d5b6:	6818      	ldr	r0, [r3, #0]
 800d5b8:	460c      	mov	r4, r1
 800d5ba:	b118      	cbz	r0, 800d5c4 <__swsetup_r+0x14>
 800d5bc:	6a03      	ldr	r3, [r0, #32]
 800d5be:	b90b      	cbnz	r3, 800d5c4 <__swsetup_r+0x14>
 800d5c0:	f7fd ff9c 	bl	800b4fc <__sinit>
 800d5c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5c8:	0719      	lsls	r1, r3, #28
 800d5ca:	d422      	bmi.n	800d612 <__swsetup_r+0x62>
 800d5cc:	06da      	lsls	r2, r3, #27
 800d5ce:	d407      	bmi.n	800d5e0 <__swsetup_r+0x30>
 800d5d0:	2209      	movs	r2, #9
 800d5d2:	602a      	str	r2, [r5, #0]
 800d5d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5d8:	81a3      	strh	r3, [r4, #12]
 800d5da:	f04f 30ff 	mov.w	r0, #4294967295
 800d5de:	e033      	b.n	800d648 <__swsetup_r+0x98>
 800d5e0:	0758      	lsls	r0, r3, #29
 800d5e2:	d512      	bpl.n	800d60a <__swsetup_r+0x5a>
 800d5e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5e6:	b141      	cbz	r1, 800d5fa <__swsetup_r+0x4a>
 800d5e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d5ec:	4299      	cmp	r1, r3
 800d5ee:	d002      	beq.n	800d5f6 <__swsetup_r+0x46>
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	f7fe ff0d 	bl	800c410 <_free_r>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d5fa:	89a3      	ldrh	r3, [r4, #12]
 800d5fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d600:	81a3      	strh	r3, [r4, #12]
 800d602:	2300      	movs	r3, #0
 800d604:	6063      	str	r3, [r4, #4]
 800d606:	6923      	ldr	r3, [r4, #16]
 800d608:	6023      	str	r3, [r4, #0]
 800d60a:	89a3      	ldrh	r3, [r4, #12]
 800d60c:	f043 0308 	orr.w	r3, r3, #8
 800d610:	81a3      	strh	r3, [r4, #12]
 800d612:	6923      	ldr	r3, [r4, #16]
 800d614:	b94b      	cbnz	r3, 800d62a <__swsetup_r+0x7a>
 800d616:	89a3      	ldrh	r3, [r4, #12]
 800d618:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d61c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d620:	d003      	beq.n	800d62a <__swsetup_r+0x7a>
 800d622:	4621      	mov	r1, r4
 800d624:	4628      	mov	r0, r5
 800d626:	f000 f883 	bl	800d730 <__smakebuf_r>
 800d62a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d62e:	f013 0201 	ands.w	r2, r3, #1
 800d632:	d00a      	beq.n	800d64a <__swsetup_r+0x9a>
 800d634:	2200      	movs	r2, #0
 800d636:	60a2      	str	r2, [r4, #8]
 800d638:	6962      	ldr	r2, [r4, #20]
 800d63a:	4252      	negs	r2, r2
 800d63c:	61a2      	str	r2, [r4, #24]
 800d63e:	6922      	ldr	r2, [r4, #16]
 800d640:	b942      	cbnz	r2, 800d654 <__swsetup_r+0xa4>
 800d642:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d646:	d1c5      	bne.n	800d5d4 <__swsetup_r+0x24>
 800d648:	bd38      	pop	{r3, r4, r5, pc}
 800d64a:	0799      	lsls	r1, r3, #30
 800d64c:	bf58      	it	pl
 800d64e:	6962      	ldrpl	r2, [r4, #20]
 800d650:	60a2      	str	r2, [r4, #8]
 800d652:	e7f4      	b.n	800d63e <__swsetup_r+0x8e>
 800d654:	2000      	movs	r0, #0
 800d656:	e7f7      	b.n	800d648 <__swsetup_r+0x98>
 800d658:	20000144 	.word	0x20000144

0800d65c <_raise_r>:
 800d65c:	291f      	cmp	r1, #31
 800d65e:	b538      	push	{r3, r4, r5, lr}
 800d660:	4605      	mov	r5, r0
 800d662:	460c      	mov	r4, r1
 800d664:	d904      	bls.n	800d670 <_raise_r+0x14>
 800d666:	2316      	movs	r3, #22
 800d668:	6003      	str	r3, [r0, #0]
 800d66a:	f04f 30ff 	mov.w	r0, #4294967295
 800d66e:	bd38      	pop	{r3, r4, r5, pc}
 800d670:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d672:	b112      	cbz	r2, 800d67a <_raise_r+0x1e>
 800d674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d678:	b94b      	cbnz	r3, 800d68e <_raise_r+0x32>
 800d67a:	4628      	mov	r0, r5
 800d67c:	f000 f830 	bl	800d6e0 <_getpid_r>
 800d680:	4622      	mov	r2, r4
 800d682:	4601      	mov	r1, r0
 800d684:	4628      	mov	r0, r5
 800d686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d68a:	f000 b817 	b.w	800d6bc <_kill_r>
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d00a      	beq.n	800d6a8 <_raise_r+0x4c>
 800d692:	1c59      	adds	r1, r3, #1
 800d694:	d103      	bne.n	800d69e <_raise_r+0x42>
 800d696:	2316      	movs	r3, #22
 800d698:	6003      	str	r3, [r0, #0]
 800d69a:	2001      	movs	r0, #1
 800d69c:	e7e7      	b.n	800d66e <_raise_r+0x12>
 800d69e:	2100      	movs	r1, #0
 800d6a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	4798      	blx	r3
 800d6a8:	2000      	movs	r0, #0
 800d6aa:	e7e0      	b.n	800d66e <_raise_r+0x12>

0800d6ac <raise>:
 800d6ac:	4b02      	ldr	r3, [pc, #8]	@ (800d6b8 <raise+0xc>)
 800d6ae:	4601      	mov	r1, r0
 800d6b0:	6818      	ldr	r0, [r3, #0]
 800d6b2:	f7ff bfd3 	b.w	800d65c <_raise_r>
 800d6b6:	bf00      	nop
 800d6b8:	20000144 	.word	0x20000144

0800d6bc <_kill_r>:
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	4d07      	ldr	r5, [pc, #28]	@ (800d6dc <_kill_r+0x20>)
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	4604      	mov	r4, r0
 800d6c4:	4608      	mov	r0, r1
 800d6c6:	4611      	mov	r1, r2
 800d6c8:	602b      	str	r3, [r5, #0]
 800d6ca:	f7f5 f855 	bl	8002778 <_kill>
 800d6ce:	1c43      	adds	r3, r0, #1
 800d6d0:	d102      	bne.n	800d6d8 <_kill_r+0x1c>
 800d6d2:	682b      	ldr	r3, [r5, #0]
 800d6d4:	b103      	cbz	r3, 800d6d8 <_kill_r+0x1c>
 800d6d6:	6023      	str	r3, [r4, #0]
 800d6d8:	bd38      	pop	{r3, r4, r5, pc}
 800d6da:	bf00      	nop
 800d6dc:	200021e4 	.word	0x200021e4

0800d6e0 <_getpid_r>:
 800d6e0:	f7f5 b842 	b.w	8002768 <_getpid>

0800d6e4 <__swhatbuf_r>:
 800d6e4:	b570      	push	{r4, r5, r6, lr}
 800d6e6:	460c      	mov	r4, r1
 800d6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6ec:	2900      	cmp	r1, #0
 800d6ee:	b096      	sub	sp, #88	@ 0x58
 800d6f0:	4615      	mov	r5, r2
 800d6f2:	461e      	mov	r6, r3
 800d6f4:	da0d      	bge.n	800d712 <__swhatbuf_r+0x2e>
 800d6f6:	89a3      	ldrh	r3, [r4, #12]
 800d6f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d6fc:	f04f 0100 	mov.w	r1, #0
 800d700:	bf14      	ite	ne
 800d702:	2340      	movne	r3, #64	@ 0x40
 800d704:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d708:	2000      	movs	r0, #0
 800d70a:	6031      	str	r1, [r6, #0]
 800d70c:	602b      	str	r3, [r5, #0]
 800d70e:	b016      	add	sp, #88	@ 0x58
 800d710:	bd70      	pop	{r4, r5, r6, pc}
 800d712:	466a      	mov	r2, sp
 800d714:	f000 f848 	bl	800d7a8 <_fstat_r>
 800d718:	2800      	cmp	r0, #0
 800d71a:	dbec      	blt.n	800d6f6 <__swhatbuf_r+0x12>
 800d71c:	9901      	ldr	r1, [sp, #4]
 800d71e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d722:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d726:	4259      	negs	r1, r3
 800d728:	4159      	adcs	r1, r3
 800d72a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d72e:	e7eb      	b.n	800d708 <__swhatbuf_r+0x24>

0800d730 <__smakebuf_r>:
 800d730:	898b      	ldrh	r3, [r1, #12]
 800d732:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d734:	079d      	lsls	r5, r3, #30
 800d736:	4606      	mov	r6, r0
 800d738:	460c      	mov	r4, r1
 800d73a:	d507      	bpl.n	800d74c <__smakebuf_r+0x1c>
 800d73c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d740:	6023      	str	r3, [r4, #0]
 800d742:	6123      	str	r3, [r4, #16]
 800d744:	2301      	movs	r3, #1
 800d746:	6163      	str	r3, [r4, #20]
 800d748:	b003      	add	sp, #12
 800d74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d74c:	ab01      	add	r3, sp, #4
 800d74e:	466a      	mov	r2, sp
 800d750:	f7ff ffc8 	bl	800d6e4 <__swhatbuf_r>
 800d754:	9f00      	ldr	r7, [sp, #0]
 800d756:	4605      	mov	r5, r0
 800d758:	4639      	mov	r1, r7
 800d75a:	4630      	mov	r0, r6
 800d75c:	f7fe fecc 	bl	800c4f8 <_malloc_r>
 800d760:	b948      	cbnz	r0, 800d776 <__smakebuf_r+0x46>
 800d762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d766:	059a      	lsls	r2, r3, #22
 800d768:	d4ee      	bmi.n	800d748 <__smakebuf_r+0x18>
 800d76a:	f023 0303 	bic.w	r3, r3, #3
 800d76e:	f043 0302 	orr.w	r3, r3, #2
 800d772:	81a3      	strh	r3, [r4, #12]
 800d774:	e7e2      	b.n	800d73c <__smakebuf_r+0xc>
 800d776:	89a3      	ldrh	r3, [r4, #12]
 800d778:	6020      	str	r0, [r4, #0]
 800d77a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d77e:	81a3      	strh	r3, [r4, #12]
 800d780:	9b01      	ldr	r3, [sp, #4]
 800d782:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d786:	b15b      	cbz	r3, 800d7a0 <__smakebuf_r+0x70>
 800d788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d78c:	4630      	mov	r0, r6
 800d78e:	f000 f81d 	bl	800d7cc <_isatty_r>
 800d792:	b128      	cbz	r0, 800d7a0 <__smakebuf_r+0x70>
 800d794:	89a3      	ldrh	r3, [r4, #12]
 800d796:	f023 0303 	bic.w	r3, r3, #3
 800d79a:	f043 0301 	orr.w	r3, r3, #1
 800d79e:	81a3      	strh	r3, [r4, #12]
 800d7a0:	89a3      	ldrh	r3, [r4, #12]
 800d7a2:	431d      	orrs	r5, r3
 800d7a4:	81a5      	strh	r5, [r4, #12]
 800d7a6:	e7cf      	b.n	800d748 <__smakebuf_r+0x18>

0800d7a8 <_fstat_r>:
 800d7a8:	b538      	push	{r3, r4, r5, lr}
 800d7aa:	4d07      	ldr	r5, [pc, #28]	@ (800d7c8 <_fstat_r+0x20>)
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	4608      	mov	r0, r1
 800d7b2:	4611      	mov	r1, r2
 800d7b4:	602b      	str	r3, [r5, #0]
 800d7b6:	f7f5 f83f 	bl	8002838 <_fstat>
 800d7ba:	1c43      	adds	r3, r0, #1
 800d7bc:	d102      	bne.n	800d7c4 <_fstat_r+0x1c>
 800d7be:	682b      	ldr	r3, [r5, #0]
 800d7c0:	b103      	cbz	r3, 800d7c4 <_fstat_r+0x1c>
 800d7c2:	6023      	str	r3, [r4, #0]
 800d7c4:	bd38      	pop	{r3, r4, r5, pc}
 800d7c6:	bf00      	nop
 800d7c8:	200021e4 	.word	0x200021e4

0800d7cc <_isatty_r>:
 800d7cc:	b538      	push	{r3, r4, r5, lr}
 800d7ce:	4d06      	ldr	r5, [pc, #24]	@ (800d7e8 <_isatty_r+0x1c>)
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	4608      	mov	r0, r1
 800d7d6:	602b      	str	r3, [r5, #0]
 800d7d8:	f7f5 f83e 	bl	8002858 <_isatty>
 800d7dc:	1c43      	adds	r3, r0, #1
 800d7de:	d102      	bne.n	800d7e6 <_isatty_r+0x1a>
 800d7e0:	682b      	ldr	r3, [r5, #0]
 800d7e2:	b103      	cbz	r3, 800d7e6 <_isatty_r+0x1a>
 800d7e4:	6023      	str	r3, [r4, #0]
 800d7e6:	bd38      	pop	{r3, r4, r5, pc}
 800d7e8:	200021e4 	.word	0x200021e4

0800d7ec <sqrt>:
 800d7ec:	b538      	push	{r3, r4, r5, lr}
 800d7ee:	ed2d 8b02 	vpush	{d8}
 800d7f2:	ec55 4b10 	vmov	r4, r5, d0
 800d7f6:	f000 f8cf 	bl	800d998 <__ieee754_sqrt>
 800d7fa:	4622      	mov	r2, r4
 800d7fc:	462b      	mov	r3, r5
 800d7fe:	4620      	mov	r0, r4
 800d800:	4629      	mov	r1, r5
 800d802:	eeb0 8a40 	vmov.f32	s16, s0
 800d806:	eef0 8a60 	vmov.f32	s17, s1
 800d80a:	f7f3 f98f 	bl	8000b2c <__aeabi_dcmpun>
 800d80e:	b990      	cbnz	r0, 800d836 <sqrt+0x4a>
 800d810:	2200      	movs	r2, #0
 800d812:	2300      	movs	r3, #0
 800d814:	4620      	mov	r0, r4
 800d816:	4629      	mov	r1, r5
 800d818:	f7f3 f960 	bl	8000adc <__aeabi_dcmplt>
 800d81c:	b158      	cbz	r0, 800d836 <sqrt+0x4a>
 800d81e:	f7fd ff6d 	bl	800b6fc <__errno>
 800d822:	2321      	movs	r3, #33	@ 0x21
 800d824:	6003      	str	r3, [r0, #0]
 800d826:	2200      	movs	r2, #0
 800d828:	2300      	movs	r3, #0
 800d82a:	4610      	mov	r0, r2
 800d82c:	4619      	mov	r1, r3
 800d82e:	f7f3 f80d 	bl	800084c <__aeabi_ddiv>
 800d832:	ec41 0b18 	vmov	d8, r0, r1
 800d836:	eeb0 0a48 	vmov.f32	s0, s16
 800d83a:	eef0 0a68 	vmov.f32	s1, s17
 800d83e:	ecbd 8b02 	vpop	{d8}
 800d842:	bd38      	pop	{r3, r4, r5, pc}
 800d844:	0000      	movs	r0, r0
	...

0800d848 <cos>:
 800d848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d84a:	ec53 2b10 	vmov	r2, r3, d0
 800d84e:	4826      	ldr	r0, [pc, #152]	@ (800d8e8 <cos+0xa0>)
 800d850:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d854:	4281      	cmp	r1, r0
 800d856:	d806      	bhi.n	800d866 <cos+0x1e>
 800d858:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d8e0 <cos+0x98>
 800d85c:	b005      	add	sp, #20
 800d85e:	f85d eb04 	ldr.w	lr, [sp], #4
 800d862:	f000 b975 	b.w	800db50 <__kernel_cos>
 800d866:	4821      	ldr	r0, [pc, #132]	@ (800d8ec <cos+0xa4>)
 800d868:	4281      	cmp	r1, r0
 800d86a:	d908      	bls.n	800d87e <cos+0x36>
 800d86c:	4610      	mov	r0, r2
 800d86e:	4619      	mov	r1, r3
 800d870:	f7f2 fd0a 	bl	8000288 <__aeabi_dsub>
 800d874:	ec41 0b10 	vmov	d0, r0, r1
 800d878:	b005      	add	sp, #20
 800d87a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d87e:	4668      	mov	r0, sp
 800d880:	f000 faea 	bl	800de58 <__ieee754_rem_pio2>
 800d884:	f000 0003 	and.w	r0, r0, #3
 800d888:	2801      	cmp	r0, #1
 800d88a:	d00b      	beq.n	800d8a4 <cos+0x5c>
 800d88c:	2802      	cmp	r0, #2
 800d88e:	d015      	beq.n	800d8bc <cos+0x74>
 800d890:	b9d8      	cbnz	r0, 800d8ca <cos+0x82>
 800d892:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d896:	ed9d 0b00 	vldr	d0, [sp]
 800d89a:	f000 f959 	bl	800db50 <__kernel_cos>
 800d89e:	ec51 0b10 	vmov	r0, r1, d0
 800d8a2:	e7e7      	b.n	800d874 <cos+0x2c>
 800d8a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8a8:	ed9d 0b00 	vldr	d0, [sp]
 800d8ac:	f000 fa18 	bl	800dce0 <__kernel_sin>
 800d8b0:	ec53 2b10 	vmov	r2, r3, d0
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d8ba:	e7db      	b.n	800d874 <cos+0x2c>
 800d8bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8c0:	ed9d 0b00 	vldr	d0, [sp]
 800d8c4:	f000 f944 	bl	800db50 <__kernel_cos>
 800d8c8:	e7f2      	b.n	800d8b0 <cos+0x68>
 800d8ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8ce:	ed9d 0b00 	vldr	d0, [sp]
 800d8d2:	2001      	movs	r0, #1
 800d8d4:	f000 fa04 	bl	800dce0 <__kernel_sin>
 800d8d8:	e7e1      	b.n	800d89e <cos+0x56>
 800d8da:	bf00      	nop
 800d8dc:	f3af 8000 	nop.w
	...
 800d8e8:	3fe921fb 	.word	0x3fe921fb
 800d8ec:	7fefffff 	.word	0x7fefffff

0800d8f0 <sin>:
 800d8f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8f2:	ec53 2b10 	vmov	r2, r3, d0
 800d8f6:	4826      	ldr	r0, [pc, #152]	@ (800d990 <sin+0xa0>)
 800d8f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d8fc:	4281      	cmp	r1, r0
 800d8fe:	d807      	bhi.n	800d910 <sin+0x20>
 800d900:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d988 <sin+0x98>
 800d904:	2000      	movs	r0, #0
 800d906:	b005      	add	sp, #20
 800d908:	f85d eb04 	ldr.w	lr, [sp], #4
 800d90c:	f000 b9e8 	b.w	800dce0 <__kernel_sin>
 800d910:	4820      	ldr	r0, [pc, #128]	@ (800d994 <sin+0xa4>)
 800d912:	4281      	cmp	r1, r0
 800d914:	d908      	bls.n	800d928 <sin+0x38>
 800d916:	4610      	mov	r0, r2
 800d918:	4619      	mov	r1, r3
 800d91a:	f7f2 fcb5 	bl	8000288 <__aeabi_dsub>
 800d91e:	ec41 0b10 	vmov	d0, r0, r1
 800d922:	b005      	add	sp, #20
 800d924:	f85d fb04 	ldr.w	pc, [sp], #4
 800d928:	4668      	mov	r0, sp
 800d92a:	f000 fa95 	bl	800de58 <__ieee754_rem_pio2>
 800d92e:	f000 0003 	and.w	r0, r0, #3
 800d932:	2801      	cmp	r0, #1
 800d934:	d00c      	beq.n	800d950 <sin+0x60>
 800d936:	2802      	cmp	r0, #2
 800d938:	d011      	beq.n	800d95e <sin+0x6e>
 800d93a:	b9e8      	cbnz	r0, 800d978 <sin+0x88>
 800d93c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d940:	ed9d 0b00 	vldr	d0, [sp]
 800d944:	2001      	movs	r0, #1
 800d946:	f000 f9cb 	bl	800dce0 <__kernel_sin>
 800d94a:	ec51 0b10 	vmov	r0, r1, d0
 800d94e:	e7e6      	b.n	800d91e <sin+0x2e>
 800d950:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d954:	ed9d 0b00 	vldr	d0, [sp]
 800d958:	f000 f8fa 	bl	800db50 <__kernel_cos>
 800d95c:	e7f5      	b.n	800d94a <sin+0x5a>
 800d95e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d962:	ed9d 0b00 	vldr	d0, [sp]
 800d966:	2001      	movs	r0, #1
 800d968:	f000 f9ba 	bl	800dce0 <__kernel_sin>
 800d96c:	ec53 2b10 	vmov	r2, r3, d0
 800d970:	4610      	mov	r0, r2
 800d972:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d976:	e7d2      	b.n	800d91e <sin+0x2e>
 800d978:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d97c:	ed9d 0b00 	vldr	d0, [sp]
 800d980:	f000 f8e6 	bl	800db50 <__kernel_cos>
 800d984:	e7f2      	b.n	800d96c <sin+0x7c>
 800d986:	bf00      	nop
	...
 800d990:	3fe921fb 	.word	0x3fe921fb
 800d994:	7fefffff 	.word	0x7fefffff

0800d998 <__ieee754_sqrt>:
 800d998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d99c:	4a68      	ldr	r2, [pc, #416]	@ (800db40 <__ieee754_sqrt+0x1a8>)
 800d99e:	ec55 4b10 	vmov	r4, r5, d0
 800d9a2:	43aa      	bics	r2, r5
 800d9a4:	462b      	mov	r3, r5
 800d9a6:	4621      	mov	r1, r4
 800d9a8:	d110      	bne.n	800d9cc <__ieee754_sqrt+0x34>
 800d9aa:	4622      	mov	r2, r4
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	4629      	mov	r1, r5
 800d9b0:	f7f2 fe22 	bl	80005f8 <__aeabi_dmul>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	4629      	mov	r1, r5
 800d9bc:	f7f2 fc66 	bl	800028c <__adddf3>
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	460d      	mov	r5, r1
 800d9c4:	ec45 4b10 	vmov	d0, r4, r5
 800d9c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9cc:	2d00      	cmp	r5, #0
 800d9ce:	dc0e      	bgt.n	800d9ee <__ieee754_sqrt+0x56>
 800d9d0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d9d4:	4322      	orrs	r2, r4
 800d9d6:	d0f5      	beq.n	800d9c4 <__ieee754_sqrt+0x2c>
 800d9d8:	b19d      	cbz	r5, 800da02 <__ieee754_sqrt+0x6a>
 800d9da:	4622      	mov	r2, r4
 800d9dc:	4620      	mov	r0, r4
 800d9de:	4629      	mov	r1, r5
 800d9e0:	f7f2 fc52 	bl	8000288 <__aeabi_dsub>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	f7f2 ff30 	bl	800084c <__aeabi_ddiv>
 800d9ec:	e7e8      	b.n	800d9c0 <__ieee754_sqrt+0x28>
 800d9ee:	152a      	asrs	r2, r5, #20
 800d9f0:	d115      	bne.n	800da1e <__ieee754_sqrt+0x86>
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	e009      	b.n	800da0a <__ieee754_sqrt+0x72>
 800d9f6:	0acb      	lsrs	r3, r1, #11
 800d9f8:	3a15      	subs	r2, #21
 800d9fa:	0549      	lsls	r1, r1, #21
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d0fa      	beq.n	800d9f6 <__ieee754_sqrt+0x5e>
 800da00:	e7f7      	b.n	800d9f2 <__ieee754_sqrt+0x5a>
 800da02:	462a      	mov	r2, r5
 800da04:	e7fa      	b.n	800d9fc <__ieee754_sqrt+0x64>
 800da06:	005b      	lsls	r3, r3, #1
 800da08:	3001      	adds	r0, #1
 800da0a:	02dc      	lsls	r4, r3, #11
 800da0c:	d5fb      	bpl.n	800da06 <__ieee754_sqrt+0x6e>
 800da0e:	1e44      	subs	r4, r0, #1
 800da10:	1b12      	subs	r2, r2, r4
 800da12:	f1c0 0420 	rsb	r4, r0, #32
 800da16:	fa21 f404 	lsr.w	r4, r1, r4
 800da1a:	4323      	orrs	r3, r4
 800da1c:	4081      	lsls	r1, r0
 800da1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da22:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800da26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da2a:	07d2      	lsls	r2, r2, #31
 800da2c:	bf5c      	itt	pl
 800da2e:	005b      	lslpl	r3, r3, #1
 800da30:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800da34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800da38:	bf58      	it	pl
 800da3a:	0049      	lslpl	r1, r1, #1
 800da3c:	2600      	movs	r6, #0
 800da3e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800da42:	106d      	asrs	r5, r5, #1
 800da44:	0049      	lsls	r1, r1, #1
 800da46:	2016      	movs	r0, #22
 800da48:	4632      	mov	r2, r6
 800da4a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800da4e:	1917      	adds	r7, r2, r4
 800da50:	429f      	cmp	r7, r3
 800da52:	bfde      	ittt	le
 800da54:	193a      	addle	r2, r7, r4
 800da56:	1bdb      	suble	r3, r3, r7
 800da58:	1936      	addle	r6, r6, r4
 800da5a:	0fcf      	lsrs	r7, r1, #31
 800da5c:	3801      	subs	r0, #1
 800da5e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800da62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800da66:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800da6a:	d1f0      	bne.n	800da4e <__ieee754_sqrt+0xb6>
 800da6c:	4604      	mov	r4, r0
 800da6e:	2720      	movs	r7, #32
 800da70:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800da74:	429a      	cmp	r2, r3
 800da76:	eb00 0e0c 	add.w	lr, r0, ip
 800da7a:	db02      	blt.n	800da82 <__ieee754_sqrt+0xea>
 800da7c:	d113      	bne.n	800daa6 <__ieee754_sqrt+0x10e>
 800da7e:	458e      	cmp	lr, r1
 800da80:	d811      	bhi.n	800daa6 <__ieee754_sqrt+0x10e>
 800da82:	f1be 0f00 	cmp.w	lr, #0
 800da86:	eb0e 000c 	add.w	r0, lr, ip
 800da8a:	da42      	bge.n	800db12 <__ieee754_sqrt+0x17a>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	db40      	blt.n	800db12 <__ieee754_sqrt+0x17a>
 800da90:	f102 0801 	add.w	r8, r2, #1
 800da94:	1a9b      	subs	r3, r3, r2
 800da96:	458e      	cmp	lr, r1
 800da98:	bf88      	it	hi
 800da9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800da9e:	eba1 010e 	sub.w	r1, r1, lr
 800daa2:	4464      	add	r4, ip
 800daa4:	4642      	mov	r2, r8
 800daa6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800daaa:	3f01      	subs	r7, #1
 800daac:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800dab0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dab4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800dab8:	d1dc      	bne.n	800da74 <__ieee754_sqrt+0xdc>
 800daba:	4319      	orrs	r1, r3
 800dabc:	d01b      	beq.n	800daf6 <__ieee754_sqrt+0x15e>
 800dabe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800db44 <__ieee754_sqrt+0x1ac>
 800dac2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800db48 <__ieee754_sqrt+0x1b0>
 800dac6:	e9da 0100 	ldrd	r0, r1, [sl]
 800daca:	e9db 2300 	ldrd	r2, r3, [fp]
 800dace:	f7f2 fbdb 	bl	8000288 <__aeabi_dsub>
 800dad2:	e9da 8900 	ldrd	r8, r9, [sl]
 800dad6:	4602      	mov	r2, r0
 800dad8:	460b      	mov	r3, r1
 800dada:	4640      	mov	r0, r8
 800dadc:	4649      	mov	r1, r9
 800dade:	f7f3 f807 	bl	8000af0 <__aeabi_dcmple>
 800dae2:	b140      	cbz	r0, 800daf6 <__ieee754_sqrt+0x15e>
 800dae4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dae8:	e9da 0100 	ldrd	r0, r1, [sl]
 800daec:	e9db 2300 	ldrd	r2, r3, [fp]
 800daf0:	d111      	bne.n	800db16 <__ieee754_sqrt+0x17e>
 800daf2:	3601      	adds	r6, #1
 800daf4:	463c      	mov	r4, r7
 800daf6:	1072      	asrs	r2, r6, #1
 800daf8:	0863      	lsrs	r3, r4, #1
 800dafa:	07f1      	lsls	r1, r6, #31
 800dafc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800db00:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800db04:	bf48      	it	mi
 800db06:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800db0a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800db0e:	4618      	mov	r0, r3
 800db10:	e756      	b.n	800d9c0 <__ieee754_sqrt+0x28>
 800db12:	4690      	mov	r8, r2
 800db14:	e7be      	b.n	800da94 <__ieee754_sqrt+0xfc>
 800db16:	f7f2 fbb9 	bl	800028c <__adddf3>
 800db1a:	e9da 8900 	ldrd	r8, r9, [sl]
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	4640      	mov	r0, r8
 800db24:	4649      	mov	r1, r9
 800db26:	f7f2 ffd9 	bl	8000adc <__aeabi_dcmplt>
 800db2a:	b120      	cbz	r0, 800db36 <__ieee754_sqrt+0x19e>
 800db2c:	1ca0      	adds	r0, r4, #2
 800db2e:	bf08      	it	eq
 800db30:	3601      	addeq	r6, #1
 800db32:	3402      	adds	r4, #2
 800db34:	e7df      	b.n	800daf6 <__ieee754_sqrt+0x15e>
 800db36:	1c63      	adds	r3, r4, #1
 800db38:	f023 0401 	bic.w	r4, r3, #1
 800db3c:	e7db      	b.n	800daf6 <__ieee754_sqrt+0x15e>
 800db3e:	bf00      	nop
 800db40:	7ff00000 	.word	0x7ff00000
 800db44:	20000308 	.word	0x20000308
 800db48:	20000300 	.word	0x20000300
 800db4c:	00000000 	.word	0x00000000

0800db50 <__kernel_cos>:
 800db50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db54:	ec57 6b10 	vmov	r6, r7, d0
 800db58:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800db5c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800db60:	ed8d 1b00 	vstr	d1, [sp]
 800db64:	d206      	bcs.n	800db74 <__kernel_cos+0x24>
 800db66:	4630      	mov	r0, r6
 800db68:	4639      	mov	r1, r7
 800db6a:	f7f2 fff5 	bl	8000b58 <__aeabi_d2iz>
 800db6e:	2800      	cmp	r0, #0
 800db70:	f000 8088 	beq.w	800dc84 <__kernel_cos+0x134>
 800db74:	4632      	mov	r2, r6
 800db76:	463b      	mov	r3, r7
 800db78:	4630      	mov	r0, r6
 800db7a:	4639      	mov	r1, r7
 800db7c:	f7f2 fd3c 	bl	80005f8 <__aeabi_dmul>
 800db80:	4b51      	ldr	r3, [pc, #324]	@ (800dcc8 <__kernel_cos+0x178>)
 800db82:	2200      	movs	r2, #0
 800db84:	4604      	mov	r4, r0
 800db86:	460d      	mov	r5, r1
 800db88:	f7f2 fd36 	bl	80005f8 <__aeabi_dmul>
 800db8c:	a340      	add	r3, pc, #256	@ (adr r3, 800dc90 <__kernel_cos+0x140>)
 800db8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db92:	4682      	mov	sl, r0
 800db94:	468b      	mov	fp, r1
 800db96:	4620      	mov	r0, r4
 800db98:	4629      	mov	r1, r5
 800db9a:	f7f2 fd2d 	bl	80005f8 <__aeabi_dmul>
 800db9e:	a33e      	add	r3, pc, #248	@ (adr r3, 800dc98 <__kernel_cos+0x148>)
 800dba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba4:	f7f2 fb72 	bl	800028c <__adddf3>
 800dba8:	4622      	mov	r2, r4
 800dbaa:	462b      	mov	r3, r5
 800dbac:	f7f2 fd24 	bl	80005f8 <__aeabi_dmul>
 800dbb0:	a33b      	add	r3, pc, #236	@ (adr r3, 800dca0 <__kernel_cos+0x150>)
 800dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb6:	f7f2 fb67 	bl	8000288 <__aeabi_dsub>
 800dbba:	4622      	mov	r2, r4
 800dbbc:	462b      	mov	r3, r5
 800dbbe:	f7f2 fd1b 	bl	80005f8 <__aeabi_dmul>
 800dbc2:	a339      	add	r3, pc, #228	@ (adr r3, 800dca8 <__kernel_cos+0x158>)
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	f7f2 fb60 	bl	800028c <__adddf3>
 800dbcc:	4622      	mov	r2, r4
 800dbce:	462b      	mov	r3, r5
 800dbd0:	f7f2 fd12 	bl	80005f8 <__aeabi_dmul>
 800dbd4:	a336      	add	r3, pc, #216	@ (adr r3, 800dcb0 <__kernel_cos+0x160>)
 800dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbda:	f7f2 fb55 	bl	8000288 <__aeabi_dsub>
 800dbde:	4622      	mov	r2, r4
 800dbe0:	462b      	mov	r3, r5
 800dbe2:	f7f2 fd09 	bl	80005f8 <__aeabi_dmul>
 800dbe6:	a334      	add	r3, pc, #208	@ (adr r3, 800dcb8 <__kernel_cos+0x168>)
 800dbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbec:	f7f2 fb4e 	bl	800028c <__adddf3>
 800dbf0:	4622      	mov	r2, r4
 800dbf2:	462b      	mov	r3, r5
 800dbf4:	f7f2 fd00 	bl	80005f8 <__aeabi_dmul>
 800dbf8:	4622      	mov	r2, r4
 800dbfa:	462b      	mov	r3, r5
 800dbfc:	f7f2 fcfc 	bl	80005f8 <__aeabi_dmul>
 800dc00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc04:	4604      	mov	r4, r0
 800dc06:	460d      	mov	r5, r1
 800dc08:	4630      	mov	r0, r6
 800dc0a:	4639      	mov	r1, r7
 800dc0c:	f7f2 fcf4 	bl	80005f8 <__aeabi_dmul>
 800dc10:	460b      	mov	r3, r1
 800dc12:	4602      	mov	r2, r0
 800dc14:	4629      	mov	r1, r5
 800dc16:	4620      	mov	r0, r4
 800dc18:	f7f2 fb36 	bl	8000288 <__aeabi_dsub>
 800dc1c:	4b2b      	ldr	r3, [pc, #172]	@ (800dccc <__kernel_cos+0x17c>)
 800dc1e:	4598      	cmp	r8, r3
 800dc20:	4606      	mov	r6, r0
 800dc22:	460f      	mov	r7, r1
 800dc24:	d810      	bhi.n	800dc48 <__kernel_cos+0xf8>
 800dc26:	4602      	mov	r2, r0
 800dc28:	460b      	mov	r3, r1
 800dc2a:	4650      	mov	r0, sl
 800dc2c:	4659      	mov	r1, fp
 800dc2e:	f7f2 fb2b 	bl	8000288 <__aeabi_dsub>
 800dc32:	460b      	mov	r3, r1
 800dc34:	4926      	ldr	r1, [pc, #152]	@ (800dcd0 <__kernel_cos+0x180>)
 800dc36:	4602      	mov	r2, r0
 800dc38:	2000      	movs	r0, #0
 800dc3a:	f7f2 fb25 	bl	8000288 <__aeabi_dsub>
 800dc3e:	ec41 0b10 	vmov	d0, r0, r1
 800dc42:	b003      	add	sp, #12
 800dc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc48:	4b22      	ldr	r3, [pc, #136]	@ (800dcd4 <__kernel_cos+0x184>)
 800dc4a:	4921      	ldr	r1, [pc, #132]	@ (800dcd0 <__kernel_cos+0x180>)
 800dc4c:	4598      	cmp	r8, r3
 800dc4e:	bf8c      	ite	hi
 800dc50:	4d21      	ldrhi	r5, [pc, #132]	@ (800dcd8 <__kernel_cos+0x188>)
 800dc52:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800dc56:	2400      	movs	r4, #0
 800dc58:	4622      	mov	r2, r4
 800dc5a:	462b      	mov	r3, r5
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	f7f2 fb13 	bl	8000288 <__aeabi_dsub>
 800dc62:	4622      	mov	r2, r4
 800dc64:	4680      	mov	r8, r0
 800dc66:	4689      	mov	r9, r1
 800dc68:	462b      	mov	r3, r5
 800dc6a:	4650      	mov	r0, sl
 800dc6c:	4659      	mov	r1, fp
 800dc6e:	f7f2 fb0b 	bl	8000288 <__aeabi_dsub>
 800dc72:	4632      	mov	r2, r6
 800dc74:	463b      	mov	r3, r7
 800dc76:	f7f2 fb07 	bl	8000288 <__aeabi_dsub>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	4640      	mov	r0, r8
 800dc80:	4649      	mov	r1, r9
 800dc82:	e7da      	b.n	800dc3a <__kernel_cos+0xea>
 800dc84:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800dcc0 <__kernel_cos+0x170>
 800dc88:	e7db      	b.n	800dc42 <__kernel_cos+0xf2>
 800dc8a:	bf00      	nop
 800dc8c:	f3af 8000 	nop.w
 800dc90:	be8838d4 	.word	0xbe8838d4
 800dc94:	bda8fae9 	.word	0xbda8fae9
 800dc98:	bdb4b1c4 	.word	0xbdb4b1c4
 800dc9c:	3e21ee9e 	.word	0x3e21ee9e
 800dca0:	809c52ad 	.word	0x809c52ad
 800dca4:	3e927e4f 	.word	0x3e927e4f
 800dca8:	19cb1590 	.word	0x19cb1590
 800dcac:	3efa01a0 	.word	0x3efa01a0
 800dcb0:	16c15177 	.word	0x16c15177
 800dcb4:	3f56c16c 	.word	0x3f56c16c
 800dcb8:	5555554c 	.word	0x5555554c
 800dcbc:	3fa55555 	.word	0x3fa55555
 800dcc0:	00000000 	.word	0x00000000
 800dcc4:	3ff00000 	.word	0x3ff00000
 800dcc8:	3fe00000 	.word	0x3fe00000
 800dccc:	3fd33332 	.word	0x3fd33332
 800dcd0:	3ff00000 	.word	0x3ff00000
 800dcd4:	3fe90000 	.word	0x3fe90000
 800dcd8:	3fd20000 	.word	0x3fd20000
 800dcdc:	00000000 	.word	0x00000000

0800dce0 <__kernel_sin>:
 800dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce4:	ec55 4b10 	vmov	r4, r5, d0
 800dce8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800dcec:	b085      	sub	sp, #20
 800dcee:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800dcf2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800dcf6:	4680      	mov	r8, r0
 800dcf8:	d205      	bcs.n	800dd06 <__kernel_sin+0x26>
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	4629      	mov	r1, r5
 800dcfe:	f7f2 ff2b 	bl	8000b58 <__aeabi_d2iz>
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d052      	beq.n	800ddac <__kernel_sin+0xcc>
 800dd06:	4622      	mov	r2, r4
 800dd08:	462b      	mov	r3, r5
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	4629      	mov	r1, r5
 800dd0e:	f7f2 fc73 	bl	80005f8 <__aeabi_dmul>
 800dd12:	4682      	mov	sl, r0
 800dd14:	468b      	mov	fp, r1
 800dd16:	4602      	mov	r2, r0
 800dd18:	460b      	mov	r3, r1
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	4629      	mov	r1, r5
 800dd1e:	f7f2 fc6b 	bl	80005f8 <__aeabi_dmul>
 800dd22:	a342      	add	r3, pc, #264	@ (adr r3, 800de2c <__kernel_sin+0x14c>)
 800dd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd28:	e9cd 0100 	strd	r0, r1, [sp]
 800dd2c:	4650      	mov	r0, sl
 800dd2e:	4659      	mov	r1, fp
 800dd30:	f7f2 fc62 	bl	80005f8 <__aeabi_dmul>
 800dd34:	a33f      	add	r3, pc, #252	@ (adr r3, 800de34 <__kernel_sin+0x154>)
 800dd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3a:	f7f2 faa5 	bl	8000288 <__aeabi_dsub>
 800dd3e:	4652      	mov	r2, sl
 800dd40:	465b      	mov	r3, fp
 800dd42:	f7f2 fc59 	bl	80005f8 <__aeabi_dmul>
 800dd46:	a33d      	add	r3, pc, #244	@ (adr r3, 800de3c <__kernel_sin+0x15c>)
 800dd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4c:	f7f2 fa9e 	bl	800028c <__adddf3>
 800dd50:	4652      	mov	r2, sl
 800dd52:	465b      	mov	r3, fp
 800dd54:	f7f2 fc50 	bl	80005f8 <__aeabi_dmul>
 800dd58:	a33a      	add	r3, pc, #232	@ (adr r3, 800de44 <__kernel_sin+0x164>)
 800dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5e:	f7f2 fa93 	bl	8000288 <__aeabi_dsub>
 800dd62:	4652      	mov	r2, sl
 800dd64:	465b      	mov	r3, fp
 800dd66:	f7f2 fc47 	bl	80005f8 <__aeabi_dmul>
 800dd6a:	a338      	add	r3, pc, #224	@ (adr r3, 800de4c <__kernel_sin+0x16c>)
 800dd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd70:	f7f2 fa8c 	bl	800028c <__adddf3>
 800dd74:	4606      	mov	r6, r0
 800dd76:	460f      	mov	r7, r1
 800dd78:	f1b8 0f00 	cmp.w	r8, #0
 800dd7c:	d11b      	bne.n	800ddb6 <__kernel_sin+0xd6>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	460b      	mov	r3, r1
 800dd82:	4650      	mov	r0, sl
 800dd84:	4659      	mov	r1, fp
 800dd86:	f7f2 fc37 	bl	80005f8 <__aeabi_dmul>
 800dd8a:	a325      	add	r3, pc, #148	@ (adr r3, 800de20 <__kernel_sin+0x140>)
 800dd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd90:	f7f2 fa7a 	bl	8000288 <__aeabi_dsub>
 800dd94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd98:	f7f2 fc2e 	bl	80005f8 <__aeabi_dmul>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	460b      	mov	r3, r1
 800dda0:	4620      	mov	r0, r4
 800dda2:	4629      	mov	r1, r5
 800dda4:	f7f2 fa72 	bl	800028c <__adddf3>
 800dda8:	4604      	mov	r4, r0
 800ddaa:	460d      	mov	r5, r1
 800ddac:	ec45 4b10 	vmov	d0, r4, r5
 800ddb0:	b005      	add	sp, #20
 800ddb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddba:	4b1b      	ldr	r3, [pc, #108]	@ (800de28 <__kernel_sin+0x148>)
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	f7f2 fc1b 	bl	80005f8 <__aeabi_dmul>
 800ddc2:	4632      	mov	r2, r6
 800ddc4:	4680      	mov	r8, r0
 800ddc6:	4689      	mov	r9, r1
 800ddc8:	463b      	mov	r3, r7
 800ddca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddce:	f7f2 fc13 	bl	80005f8 <__aeabi_dmul>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	4640      	mov	r0, r8
 800ddd8:	4649      	mov	r1, r9
 800ddda:	f7f2 fa55 	bl	8000288 <__aeabi_dsub>
 800ddde:	4652      	mov	r2, sl
 800dde0:	465b      	mov	r3, fp
 800dde2:	f7f2 fc09 	bl	80005f8 <__aeabi_dmul>
 800dde6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ddea:	f7f2 fa4d 	bl	8000288 <__aeabi_dsub>
 800ddee:	a30c      	add	r3, pc, #48	@ (adr r3, 800de20 <__kernel_sin+0x140>)
 800ddf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf4:	4606      	mov	r6, r0
 800ddf6:	460f      	mov	r7, r1
 800ddf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddfc:	f7f2 fbfc 	bl	80005f8 <__aeabi_dmul>
 800de00:	4602      	mov	r2, r0
 800de02:	460b      	mov	r3, r1
 800de04:	4630      	mov	r0, r6
 800de06:	4639      	mov	r1, r7
 800de08:	f7f2 fa40 	bl	800028c <__adddf3>
 800de0c:	4602      	mov	r2, r0
 800de0e:	460b      	mov	r3, r1
 800de10:	4620      	mov	r0, r4
 800de12:	4629      	mov	r1, r5
 800de14:	f7f2 fa38 	bl	8000288 <__aeabi_dsub>
 800de18:	e7c6      	b.n	800dda8 <__kernel_sin+0xc8>
 800de1a:	bf00      	nop
 800de1c:	f3af 8000 	nop.w
 800de20:	55555549 	.word	0x55555549
 800de24:	3fc55555 	.word	0x3fc55555
 800de28:	3fe00000 	.word	0x3fe00000
 800de2c:	5acfd57c 	.word	0x5acfd57c
 800de30:	3de5d93a 	.word	0x3de5d93a
 800de34:	8a2b9ceb 	.word	0x8a2b9ceb
 800de38:	3e5ae5e6 	.word	0x3e5ae5e6
 800de3c:	57b1fe7d 	.word	0x57b1fe7d
 800de40:	3ec71de3 	.word	0x3ec71de3
 800de44:	19c161d5 	.word	0x19c161d5
 800de48:	3f2a01a0 	.word	0x3f2a01a0
 800de4c:	1110f8a6 	.word	0x1110f8a6
 800de50:	3f811111 	.word	0x3f811111
 800de54:	00000000 	.word	0x00000000

0800de58 <__ieee754_rem_pio2>:
 800de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5c:	ec57 6b10 	vmov	r6, r7, d0
 800de60:	4bc5      	ldr	r3, [pc, #788]	@ (800e178 <__ieee754_rem_pio2+0x320>)
 800de62:	b08d      	sub	sp, #52	@ 0x34
 800de64:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800de68:	4598      	cmp	r8, r3
 800de6a:	4604      	mov	r4, r0
 800de6c:	9704      	str	r7, [sp, #16]
 800de6e:	d807      	bhi.n	800de80 <__ieee754_rem_pio2+0x28>
 800de70:	2200      	movs	r2, #0
 800de72:	2300      	movs	r3, #0
 800de74:	ed80 0b00 	vstr	d0, [r0]
 800de78:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800de7c:	2500      	movs	r5, #0
 800de7e:	e028      	b.n	800ded2 <__ieee754_rem_pio2+0x7a>
 800de80:	4bbe      	ldr	r3, [pc, #760]	@ (800e17c <__ieee754_rem_pio2+0x324>)
 800de82:	4598      	cmp	r8, r3
 800de84:	d878      	bhi.n	800df78 <__ieee754_rem_pio2+0x120>
 800de86:	9b04      	ldr	r3, [sp, #16]
 800de88:	4dbd      	ldr	r5, [pc, #756]	@ (800e180 <__ieee754_rem_pio2+0x328>)
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	4630      	mov	r0, r6
 800de8e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800e140 <__ieee754_rem_pio2+0x2e8>)
 800de90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de94:	4639      	mov	r1, r7
 800de96:	dd38      	ble.n	800df0a <__ieee754_rem_pio2+0xb2>
 800de98:	f7f2 f9f6 	bl	8000288 <__aeabi_dsub>
 800de9c:	45a8      	cmp	r8, r5
 800de9e:	4606      	mov	r6, r0
 800dea0:	460f      	mov	r7, r1
 800dea2:	d01a      	beq.n	800deda <__ieee754_rem_pio2+0x82>
 800dea4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800e148 <__ieee754_rem_pio2+0x2f0>)
 800dea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deaa:	f7f2 f9ed 	bl	8000288 <__aeabi_dsub>
 800deae:	4602      	mov	r2, r0
 800deb0:	460b      	mov	r3, r1
 800deb2:	4680      	mov	r8, r0
 800deb4:	4689      	mov	r9, r1
 800deb6:	4630      	mov	r0, r6
 800deb8:	4639      	mov	r1, r7
 800deba:	f7f2 f9e5 	bl	8000288 <__aeabi_dsub>
 800debe:	a3a2      	add	r3, pc, #648	@ (adr r3, 800e148 <__ieee754_rem_pio2+0x2f0>)
 800dec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec4:	f7f2 f9e0 	bl	8000288 <__aeabi_dsub>
 800dec8:	e9c4 8900 	strd	r8, r9, [r4]
 800decc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ded0:	2501      	movs	r5, #1
 800ded2:	4628      	mov	r0, r5
 800ded4:	b00d      	add	sp, #52	@ 0x34
 800ded6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deda:	a39d      	add	r3, pc, #628	@ (adr r3, 800e150 <__ieee754_rem_pio2+0x2f8>)
 800dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee0:	f7f2 f9d2 	bl	8000288 <__aeabi_dsub>
 800dee4:	a39c      	add	r3, pc, #624	@ (adr r3, 800e158 <__ieee754_rem_pio2+0x300>)
 800dee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deea:	4606      	mov	r6, r0
 800deec:	460f      	mov	r7, r1
 800deee:	f7f2 f9cb 	bl	8000288 <__aeabi_dsub>
 800def2:	4602      	mov	r2, r0
 800def4:	460b      	mov	r3, r1
 800def6:	4680      	mov	r8, r0
 800def8:	4689      	mov	r9, r1
 800defa:	4630      	mov	r0, r6
 800defc:	4639      	mov	r1, r7
 800defe:	f7f2 f9c3 	bl	8000288 <__aeabi_dsub>
 800df02:	a395      	add	r3, pc, #596	@ (adr r3, 800e158 <__ieee754_rem_pio2+0x300>)
 800df04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df08:	e7dc      	b.n	800dec4 <__ieee754_rem_pio2+0x6c>
 800df0a:	f7f2 f9bf 	bl	800028c <__adddf3>
 800df0e:	45a8      	cmp	r8, r5
 800df10:	4606      	mov	r6, r0
 800df12:	460f      	mov	r7, r1
 800df14:	d018      	beq.n	800df48 <__ieee754_rem_pio2+0xf0>
 800df16:	a38c      	add	r3, pc, #560	@ (adr r3, 800e148 <__ieee754_rem_pio2+0x2f0>)
 800df18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1c:	f7f2 f9b6 	bl	800028c <__adddf3>
 800df20:	4602      	mov	r2, r0
 800df22:	460b      	mov	r3, r1
 800df24:	4680      	mov	r8, r0
 800df26:	4689      	mov	r9, r1
 800df28:	4630      	mov	r0, r6
 800df2a:	4639      	mov	r1, r7
 800df2c:	f7f2 f9ac 	bl	8000288 <__aeabi_dsub>
 800df30:	a385      	add	r3, pc, #532	@ (adr r3, 800e148 <__ieee754_rem_pio2+0x2f0>)
 800df32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df36:	f7f2 f9a9 	bl	800028c <__adddf3>
 800df3a:	f04f 35ff 	mov.w	r5, #4294967295
 800df3e:	e9c4 8900 	strd	r8, r9, [r4]
 800df42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800df46:	e7c4      	b.n	800ded2 <__ieee754_rem_pio2+0x7a>
 800df48:	a381      	add	r3, pc, #516	@ (adr r3, 800e150 <__ieee754_rem_pio2+0x2f8>)
 800df4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4e:	f7f2 f99d 	bl	800028c <__adddf3>
 800df52:	a381      	add	r3, pc, #516	@ (adr r3, 800e158 <__ieee754_rem_pio2+0x300>)
 800df54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df58:	4606      	mov	r6, r0
 800df5a:	460f      	mov	r7, r1
 800df5c:	f7f2 f996 	bl	800028c <__adddf3>
 800df60:	4602      	mov	r2, r0
 800df62:	460b      	mov	r3, r1
 800df64:	4680      	mov	r8, r0
 800df66:	4689      	mov	r9, r1
 800df68:	4630      	mov	r0, r6
 800df6a:	4639      	mov	r1, r7
 800df6c:	f7f2 f98c 	bl	8000288 <__aeabi_dsub>
 800df70:	a379      	add	r3, pc, #484	@ (adr r3, 800e158 <__ieee754_rem_pio2+0x300>)
 800df72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df76:	e7de      	b.n	800df36 <__ieee754_rem_pio2+0xde>
 800df78:	4b82      	ldr	r3, [pc, #520]	@ (800e184 <__ieee754_rem_pio2+0x32c>)
 800df7a:	4598      	cmp	r8, r3
 800df7c:	f200 80d1 	bhi.w	800e122 <__ieee754_rem_pio2+0x2ca>
 800df80:	f000 f966 	bl	800e250 <fabs>
 800df84:	ec57 6b10 	vmov	r6, r7, d0
 800df88:	a375      	add	r3, pc, #468	@ (adr r3, 800e160 <__ieee754_rem_pio2+0x308>)
 800df8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8e:	4630      	mov	r0, r6
 800df90:	4639      	mov	r1, r7
 800df92:	f7f2 fb31 	bl	80005f8 <__aeabi_dmul>
 800df96:	4b7c      	ldr	r3, [pc, #496]	@ (800e188 <__ieee754_rem_pio2+0x330>)
 800df98:	2200      	movs	r2, #0
 800df9a:	f7f2 f977 	bl	800028c <__adddf3>
 800df9e:	f7f2 fddb 	bl	8000b58 <__aeabi_d2iz>
 800dfa2:	4605      	mov	r5, r0
 800dfa4:	f7f2 fabe 	bl	8000524 <__aeabi_i2d>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	460b      	mov	r3, r1
 800dfac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dfb0:	a363      	add	r3, pc, #396	@ (adr r3, 800e140 <__ieee754_rem_pio2+0x2e8>)
 800dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb6:	f7f2 fb1f 	bl	80005f8 <__aeabi_dmul>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	4630      	mov	r0, r6
 800dfc0:	4639      	mov	r1, r7
 800dfc2:	f7f2 f961 	bl	8000288 <__aeabi_dsub>
 800dfc6:	a360      	add	r3, pc, #384	@ (adr r3, 800e148 <__ieee754_rem_pio2+0x2f0>)
 800dfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfcc:	4682      	mov	sl, r0
 800dfce:	468b      	mov	fp, r1
 800dfd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfd4:	f7f2 fb10 	bl	80005f8 <__aeabi_dmul>
 800dfd8:	2d1f      	cmp	r5, #31
 800dfda:	4606      	mov	r6, r0
 800dfdc:	460f      	mov	r7, r1
 800dfde:	dc0c      	bgt.n	800dffa <__ieee754_rem_pio2+0x1a2>
 800dfe0:	4b6a      	ldr	r3, [pc, #424]	@ (800e18c <__ieee754_rem_pio2+0x334>)
 800dfe2:	1e6a      	subs	r2, r5, #1
 800dfe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfe8:	4543      	cmp	r3, r8
 800dfea:	d006      	beq.n	800dffa <__ieee754_rem_pio2+0x1a2>
 800dfec:	4632      	mov	r2, r6
 800dfee:	463b      	mov	r3, r7
 800dff0:	4650      	mov	r0, sl
 800dff2:	4659      	mov	r1, fp
 800dff4:	f7f2 f948 	bl	8000288 <__aeabi_dsub>
 800dff8:	e00e      	b.n	800e018 <__ieee754_rem_pio2+0x1c0>
 800dffa:	463b      	mov	r3, r7
 800dffc:	4632      	mov	r2, r6
 800dffe:	4650      	mov	r0, sl
 800e000:	4659      	mov	r1, fp
 800e002:	f7f2 f941 	bl	8000288 <__aeabi_dsub>
 800e006:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e00a:	9305      	str	r3, [sp, #20]
 800e00c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e010:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e014:	2b10      	cmp	r3, #16
 800e016:	dc02      	bgt.n	800e01e <__ieee754_rem_pio2+0x1c6>
 800e018:	e9c4 0100 	strd	r0, r1, [r4]
 800e01c:	e039      	b.n	800e092 <__ieee754_rem_pio2+0x23a>
 800e01e:	a34c      	add	r3, pc, #304	@ (adr r3, 800e150 <__ieee754_rem_pio2+0x2f8>)
 800e020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e028:	f7f2 fae6 	bl	80005f8 <__aeabi_dmul>
 800e02c:	4606      	mov	r6, r0
 800e02e:	460f      	mov	r7, r1
 800e030:	4602      	mov	r2, r0
 800e032:	460b      	mov	r3, r1
 800e034:	4650      	mov	r0, sl
 800e036:	4659      	mov	r1, fp
 800e038:	f7f2 f926 	bl	8000288 <__aeabi_dsub>
 800e03c:	4602      	mov	r2, r0
 800e03e:	460b      	mov	r3, r1
 800e040:	4680      	mov	r8, r0
 800e042:	4689      	mov	r9, r1
 800e044:	4650      	mov	r0, sl
 800e046:	4659      	mov	r1, fp
 800e048:	f7f2 f91e 	bl	8000288 <__aeabi_dsub>
 800e04c:	4632      	mov	r2, r6
 800e04e:	463b      	mov	r3, r7
 800e050:	f7f2 f91a 	bl	8000288 <__aeabi_dsub>
 800e054:	a340      	add	r3, pc, #256	@ (adr r3, 800e158 <__ieee754_rem_pio2+0x300>)
 800e056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05a:	4606      	mov	r6, r0
 800e05c:	460f      	mov	r7, r1
 800e05e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e062:	f7f2 fac9 	bl	80005f8 <__aeabi_dmul>
 800e066:	4632      	mov	r2, r6
 800e068:	463b      	mov	r3, r7
 800e06a:	f7f2 f90d 	bl	8000288 <__aeabi_dsub>
 800e06e:	4602      	mov	r2, r0
 800e070:	460b      	mov	r3, r1
 800e072:	4606      	mov	r6, r0
 800e074:	460f      	mov	r7, r1
 800e076:	4640      	mov	r0, r8
 800e078:	4649      	mov	r1, r9
 800e07a:	f7f2 f905 	bl	8000288 <__aeabi_dsub>
 800e07e:	9a05      	ldr	r2, [sp, #20]
 800e080:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e084:	1ad3      	subs	r3, r2, r3
 800e086:	2b31      	cmp	r3, #49	@ 0x31
 800e088:	dc20      	bgt.n	800e0cc <__ieee754_rem_pio2+0x274>
 800e08a:	e9c4 0100 	strd	r0, r1, [r4]
 800e08e:	46c2      	mov	sl, r8
 800e090:	46cb      	mov	fp, r9
 800e092:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e096:	4650      	mov	r0, sl
 800e098:	4642      	mov	r2, r8
 800e09a:	464b      	mov	r3, r9
 800e09c:	4659      	mov	r1, fp
 800e09e:	f7f2 f8f3 	bl	8000288 <__aeabi_dsub>
 800e0a2:	463b      	mov	r3, r7
 800e0a4:	4632      	mov	r2, r6
 800e0a6:	f7f2 f8ef 	bl	8000288 <__aeabi_dsub>
 800e0aa:	9b04      	ldr	r3, [sp, #16]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e0b2:	f6bf af0e 	bge.w	800ded2 <__ieee754_rem_pio2+0x7a>
 800e0b6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800e0ba:	6063      	str	r3, [r4, #4]
 800e0bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e0c0:	f8c4 8000 	str.w	r8, [r4]
 800e0c4:	60a0      	str	r0, [r4, #8]
 800e0c6:	60e3      	str	r3, [r4, #12]
 800e0c8:	426d      	negs	r5, r5
 800e0ca:	e702      	b.n	800ded2 <__ieee754_rem_pio2+0x7a>
 800e0cc:	a326      	add	r3, pc, #152	@ (adr r3, 800e168 <__ieee754_rem_pio2+0x310>)
 800e0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0d6:	f7f2 fa8f 	bl	80005f8 <__aeabi_dmul>
 800e0da:	4606      	mov	r6, r0
 800e0dc:	460f      	mov	r7, r1
 800e0de:	4602      	mov	r2, r0
 800e0e0:	460b      	mov	r3, r1
 800e0e2:	4640      	mov	r0, r8
 800e0e4:	4649      	mov	r1, r9
 800e0e6:	f7f2 f8cf 	bl	8000288 <__aeabi_dsub>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	4682      	mov	sl, r0
 800e0f0:	468b      	mov	fp, r1
 800e0f2:	4640      	mov	r0, r8
 800e0f4:	4649      	mov	r1, r9
 800e0f6:	f7f2 f8c7 	bl	8000288 <__aeabi_dsub>
 800e0fa:	4632      	mov	r2, r6
 800e0fc:	463b      	mov	r3, r7
 800e0fe:	f7f2 f8c3 	bl	8000288 <__aeabi_dsub>
 800e102:	a31b      	add	r3, pc, #108	@ (adr r3, 800e170 <__ieee754_rem_pio2+0x318>)
 800e104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e108:	4606      	mov	r6, r0
 800e10a:	460f      	mov	r7, r1
 800e10c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e110:	f7f2 fa72 	bl	80005f8 <__aeabi_dmul>
 800e114:	4632      	mov	r2, r6
 800e116:	463b      	mov	r3, r7
 800e118:	f7f2 f8b6 	bl	8000288 <__aeabi_dsub>
 800e11c:	4606      	mov	r6, r0
 800e11e:	460f      	mov	r7, r1
 800e120:	e764      	b.n	800dfec <__ieee754_rem_pio2+0x194>
 800e122:	4b1b      	ldr	r3, [pc, #108]	@ (800e190 <__ieee754_rem_pio2+0x338>)
 800e124:	4598      	cmp	r8, r3
 800e126:	d935      	bls.n	800e194 <__ieee754_rem_pio2+0x33c>
 800e128:	4632      	mov	r2, r6
 800e12a:	463b      	mov	r3, r7
 800e12c:	4630      	mov	r0, r6
 800e12e:	4639      	mov	r1, r7
 800e130:	f7f2 f8aa 	bl	8000288 <__aeabi_dsub>
 800e134:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e138:	e9c4 0100 	strd	r0, r1, [r4]
 800e13c:	e69e      	b.n	800de7c <__ieee754_rem_pio2+0x24>
 800e13e:	bf00      	nop
 800e140:	54400000 	.word	0x54400000
 800e144:	3ff921fb 	.word	0x3ff921fb
 800e148:	1a626331 	.word	0x1a626331
 800e14c:	3dd0b461 	.word	0x3dd0b461
 800e150:	1a600000 	.word	0x1a600000
 800e154:	3dd0b461 	.word	0x3dd0b461
 800e158:	2e037073 	.word	0x2e037073
 800e15c:	3ba3198a 	.word	0x3ba3198a
 800e160:	6dc9c883 	.word	0x6dc9c883
 800e164:	3fe45f30 	.word	0x3fe45f30
 800e168:	2e000000 	.word	0x2e000000
 800e16c:	3ba3198a 	.word	0x3ba3198a
 800e170:	252049c1 	.word	0x252049c1
 800e174:	397b839a 	.word	0x397b839a
 800e178:	3fe921fb 	.word	0x3fe921fb
 800e17c:	4002d97b 	.word	0x4002d97b
 800e180:	3ff921fb 	.word	0x3ff921fb
 800e184:	413921fb 	.word	0x413921fb
 800e188:	3fe00000 	.word	0x3fe00000
 800e18c:	0800ef18 	.word	0x0800ef18
 800e190:	7fefffff 	.word	0x7fefffff
 800e194:	ea4f 5528 	mov.w	r5, r8, asr #20
 800e198:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800e19c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800e1a0:	4630      	mov	r0, r6
 800e1a2:	460f      	mov	r7, r1
 800e1a4:	f7f2 fcd8 	bl	8000b58 <__aeabi_d2iz>
 800e1a8:	f7f2 f9bc 	bl	8000524 <__aeabi_i2d>
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	460b      	mov	r3, r1
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	4639      	mov	r1, r7
 800e1b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e1b8:	f7f2 f866 	bl	8000288 <__aeabi_dsub>
 800e1bc:	4b22      	ldr	r3, [pc, #136]	@ (800e248 <__ieee754_rem_pio2+0x3f0>)
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f7f2 fa1a 	bl	80005f8 <__aeabi_dmul>
 800e1c4:	460f      	mov	r7, r1
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	f7f2 fcc6 	bl	8000b58 <__aeabi_d2iz>
 800e1cc:	f7f2 f9aa 	bl	8000524 <__aeabi_i2d>
 800e1d0:	4602      	mov	r2, r0
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	4639      	mov	r1, r7
 800e1d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e1dc:	f7f2 f854 	bl	8000288 <__aeabi_dsub>
 800e1e0:	4b19      	ldr	r3, [pc, #100]	@ (800e248 <__ieee754_rem_pio2+0x3f0>)
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f7f2 fa08 	bl	80005f8 <__aeabi_dmul>
 800e1e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800e1ec:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800e1f0:	f04f 0803 	mov.w	r8, #3
 800e1f4:	2600      	movs	r6, #0
 800e1f6:	2700      	movs	r7, #0
 800e1f8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800e1fc:	4632      	mov	r2, r6
 800e1fe:	463b      	mov	r3, r7
 800e200:	46c2      	mov	sl, r8
 800e202:	f108 38ff 	add.w	r8, r8, #4294967295
 800e206:	f7f2 fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d1f4      	bne.n	800e1f8 <__ieee754_rem_pio2+0x3a0>
 800e20e:	4b0f      	ldr	r3, [pc, #60]	@ (800e24c <__ieee754_rem_pio2+0x3f4>)
 800e210:	9301      	str	r3, [sp, #4]
 800e212:	2302      	movs	r3, #2
 800e214:	9300      	str	r3, [sp, #0]
 800e216:	462a      	mov	r2, r5
 800e218:	4653      	mov	r3, sl
 800e21a:	4621      	mov	r1, r4
 800e21c:	a806      	add	r0, sp, #24
 800e21e:	f000 f81f 	bl	800e260 <__kernel_rem_pio2>
 800e222:	9b04      	ldr	r3, [sp, #16]
 800e224:	2b00      	cmp	r3, #0
 800e226:	4605      	mov	r5, r0
 800e228:	f6bf ae53 	bge.w	800ded2 <__ieee754_rem_pio2+0x7a>
 800e22c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800e230:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e234:	e9c4 2300 	strd	r2, r3, [r4]
 800e238:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800e23c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e240:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800e244:	e740      	b.n	800e0c8 <__ieee754_rem_pio2+0x270>
 800e246:	bf00      	nop
 800e248:	41700000 	.word	0x41700000
 800e24c:	0800ef98 	.word	0x0800ef98

0800e250 <fabs>:
 800e250:	ec51 0b10 	vmov	r0, r1, d0
 800e254:	4602      	mov	r2, r0
 800e256:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e25a:	ec43 2b10 	vmov	d0, r2, r3
 800e25e:	4770      	bx	lr

0800e260 <__kernel_rem_pio2>:
 800e260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e264:	ed2d 8b02 	vpush	{d8}
 800e268:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800e26c:	f112 0f14 	cmn.w	r2, #20
 800e270:	9306      	str	r3, [sp, #24]
 800e272:	9104      	str	r1, [sp, #16]
 800e274:	4bbe      	ldr	r3, [pc, #760]	@ (800e570 <__kernel_rem_pio2+0x310>)
 800e276:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800e278:	9008      	str	r0, [sp, #32]
 800e27a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e27e:	9300      	str	r3, [sp, #0]
 800e280:	9b06      	ldr	r3, [sp, #24]
 800e282:	f103 33ff 	add.w	r3, r3, #4294967295
 800e286:	bfa8      	it	ge
 800e288:	1ed4      	subge	r4, r2, #3
 800e28a:	9305      	str	r3, [sp, #20]
 800e28c:	bfb2      	itee	lt
 800e28e:	2400      	movlt	r4, #0
 800e290:	2318      	movge	r3, #24
 800e292:	fb94 f4f3 	sdivge	r4, r4, r3
 800e296:	f06f 0317 	mvn.w	r3, #23
 800e29a:	fb04 3303 	mla	r3, r4, r3, r3
 800e29e:	eb03 0b02 	add.w	fp, r3, r2
 800e2a2:	9b00      	ldr	r3, [sp, #0]
 800e2a4:	9a05      	ldr	r2, [sp, #20]
 800e2a6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800e560 <__kernel_rem_pio2+0x300>
 800e2aa:	eb03 0802 	add.w	r8, r3, r2
 800e2ae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800e2b0:	1aa7      	subs	r7, r4, r2
 800e2b2:	ae20      	add	r6, sp, #128	@ 0x80
 800e2b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e2b8:	2500      	movs	r5, #0
 800e2ba:	4545      	cmp	r5, r8
 800e2bc:	dd13      	ble.n	800e2e6 <__kernel_rem_pio2+0x86>
 800e2be:	9b06      	ldr	r3, [sp, #24]
 800e2c0:	aa20      	add	r2, sp, #128	@ 0x80
 800e2c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e2c6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800e2ca:	f04f 0800 	mov.w	r8, #0
 800e2ce:	9b00      	ldr	r3, [sp, #0]
 800e2d0:	4598      	cmp	r8, r3
 800e2d2:	dc31      	bgt.n	800e338 <__kernel_rem_pio2+0xd8>
 800e2d4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800e560 <__kernel_rem_pio2+0x300>
 800e2d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e2dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e2e0:	462f      	mov	r7, r5
 800e2e2:	2600      	movs	r6, #0
 800e2e4:	e01b      	b.n	800e31e <__kernel_rem_pio2+0xbe>
 800e2e6:	42ef      	cmn	r7, r5
 800e2e8:	d407      	bmi.n	800e2fa <__kernel_rem_pio2+0x9a>
 800e2ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e2ee:	f7f2 f919 	bl	8000524 <__aeabi_i2d>
 800e2f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e2f6:	3501      	adds	r5, #1
 800e2f8:	e7df      	b.n	800e2ba <__kernel_rem_pio2+0x5a>
 800e2fa:	ec51 0b18 	vmov	r0, r1, d8
 800e2fe:	e7f8      	b.n	800e2f2 <__kernel_rem_pio2+0x92>
 800e300:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e304:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e308:	f7f2 f976 	bl	80005f8 <__aeabi_dmul>
 800e30c:	4602      	mov	r2, r0
 800e30e:	460b      	mov	r3, r1
 800e310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e314:	f7f1 ffba 	bl	800028c <__adddf3>
 800e318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e31c:	3601      	adds	r6, #1
 800e31e:	9b05      	ldr	r3, [sp, #20]
 800e320:	429e      	cmp	r6, r3
 800e322:	f1a7 0708 	sub.w	r7, r7, #8
 800e326:	ddeb      	ble.n	800e300 <__kernel_rem_pio2+0xa0>
 800e328:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e32c:	f108 0801 	add.w	r8, r8, #1
 800e330:	ecaa 7b02 	vstmia	sl!, {d7}
 800e334:	3508      	adds	r5, #8
 800e336:	e7ca      	b.n	800e2ce <__kernel_rem_pio2+0x6e>
 800e338:	9b00      	ldr	r3, [sp, #0]
 800e33a:	f8dd 8000 	ldr.w	r8, [sp]
 800e33e:	aa0c      	add	r2, sp, #48	@ 0x30
 800e340:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e344:	930a      	str	r3, [sp, #40]	@ 0x28
 800e346:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800e348:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e34c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e34e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800e352:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e354:	ab98      	add	r3, sp, #608	@ 0x260
 800e356:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e35a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800e35e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e362:	ac0c      	add	r4, sp, #48	@ 0x30
 800e364:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e366:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800e36a:	46a1      	mov	r9, r4
 800e36c:	46c2      	mov	sl, r8
 800e36e:	f1ba 0f00 	cmp.w	sl, #0
 800e372:	f1a5 0508 	sub.w	r5, r5, #8
 800e376:	dc77      	bgt.n	800e468 <__kernel_rem_pio2+0x208>
 800e378:	4658      	mov	r0, fp
 800e37a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e37e:	f000 fac7 	bl	800e910 <scalbn>
 800e382:	ec57 6b10 	vmov	r6, r7, d0
 800e386:	2200      	movs	r2, #0
 800e388:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800e38c:	4630      	mov	r0, r6
 800e38e:	4639      	mov	r1, r7
 800e390:	f7f2 f932 	bl	80005f8 <__aeabi_dmul>
 800e394:	ec41 0b10 	vmov	d0, r0, r1
 800e398:	f000 fb3a 	bl	800ea10 <floor>
 800e39c:	4b75      	ldr	r3, [pc, #468]	@ (800e574 <__kernel_rem_pio2+0x314>)
 800e39e:	ec51 0b10 	vmov	r0, r1, d0
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f7f2 f928 	bl	80005f8 <__aeabi_dmul>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	4639      	mov	r1, r7
 800e3b0:	f7f1 ff6a 	bl	8000288 <__aeabi_dsub>
 800e3b4:	460f      	mov	r7, r1
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	f7f2 fbce 	bl	8000b58 <__aeabi_d2iz>
 800e3bc:	9002      	str	r0, [sp, #8]
 800e3be:	f7f2 f8b1 	bl	8000524 <__aeabi_i2d>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	4639      	mov	r1, r7
 800e3ca:	f7f1 ff5d 	bl	8000288 <__aeabi_dsub>
 800e3ce:	f1bb 0f00 	cmp.w	fp, #0
 800e3d2:	4606      	mov	r6, r0
 800e3d4:	460f      	mov	r7, r1
 800e3d6:	dd6c      	ble.n	800e4b2 <__kernel_rem_pio2+0x252>
 800e3d8:	f108 31ff 	add.w	r1, r8, #4294967295
 800e3dc:	ab0c      	add	r3, sp, #48	@ 0x30
 800e3de:	9d02      	ldr	r5, [sp, #8]
 800e3e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e3e4:	f1cb 0018 	rsb	r0, fp, #24
 800e3e8:	fa43 f200 	asr.w	r2, r3, r0
 800e3ec:	4415      	add	r5, r2
 800e3ee:	4082      	lsls	r2, r0
 800e3f0:	1a9b      	subs	r3, r3, r2
 800e3f2:	aa0c      	add	r2, sp, #48	@ 0x30
 800e3f4:	9502      	str	r5, [sp, #8]
 800e3f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e3fa:	f1cb 0217 	rsb	r2, fp, #23
 800e3fe:	fa43 f902 	asr.w	r9, r3, r2
 800e402:	f1b9 0f00 	cmp.w	r9, #0
 800e406:	dd64      	ble.n	800e4d2 <__kernel_rem_pio2+0x272>
 800e408:	9b02      	ldr	r3, [sp, #8]
 800e40a:	2200      	movs	r2, #0
 800e40c:	3301      	adds	r3, #1
 800e40e:	9302      	str	r3, [sp, #8]
 800e410:	4615      	mov	r5, r2
 800e412:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800e416:	4590      	cmp	r8, r2
 800e418:	f300 80b8 	bgt.w	800e58c <__kernel_rem_pio2+0x32c>
 800e41c:	f1bb 0f00 	cmp.w	fp, #0
 800e420:	dd07      	ble.n	800e432 <__kernel_rem_pio2+0x1d2>
 800e422:	f1bb 0f01 	cmp.w	fp, #1
 800e426:	f000 80bf 	beq.w	800e5a8 <__kernel_rem_pio2+0x348>
 800e42a:	f1bb 0f02 	cmp.w	fp, #2
 800e42e:	f000 80c6 	beq.w	800e5be <__kernel_rem_pio2+0x35e>
 800e432:	f1b9 0f02 	cmp.w	r9, #2
 800e436:	d14c      	bne.n	800e4d2 <__kernel_rem_pio2+0x272>
 800e438:	4632      	mov	r2, r6
 800e43a:	463b      	mov	r3, r7
 800e43c:	494e      	ldr	r1, [pc, #312]	@ (800e578 <__kernel_rem_pio2+0x318>)
 800e43e:	2000      	movs	r0, #0
 800e440:	f7f1 ff22 	bl	8000288 <__aeabi_dsub>
 800e444:	4606      	mov	r6, r0
 800e446:	460f      	mov	r7, r1
 800e448:	2d00      	cmp	r5, #0
 800e44a:	d042      	beq.n	800e4d2 <__kernel_rem_pio2+0x272>
 800e44c:	4658      	mov	r0, fp
 800e44e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800e568 <__kernel_rem_pio2+0x308>
 800e452:	f000 fa5d 	bl	800e910 <scalbn>
 800e456:	4630      	mov	r0, r6
 800e458:	4639      	mov	r1, r7
 800e45a:	ec53 2b10 	vmov	r2, r3, d0
 800e45e:	f7f1 ff13 	bl	8000288 <__aeabi_dsub>
 800e462:	4606      	mov	r6, r0
 800e464:	460f      	mov	r7, r1
 800e466:	e034      	b.n	800e4d2 <__kernel_rem_pio2+0x272>
 800e468:	4b44      	ldr	r3, [pc, #272]	@ (800e57c <__kernel_rem_pio2+0x31c>)
 800e46a:	2200      	movs	r2, #0
 800e46c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e470:	f7f2 f8c2 	bl	80005f8 <__aeabi_dmul>
 800e474:	f7f2 fb70 	bl	8000b58 <__aeabi_d2iz>
 800e478:	f7f2 f854 	bl	8000524 <__aeabi_i2d>
 800e47c:	4b40      	ldr	r3, [pc, #256]	@ (800e580 <__kernel_rem_pio2+0x320>)
 800e47e:	2200      	movs	r2, #0
 800e480:	4606      	mov	r6, r0
 800e482:	460f      	mov	r7, r1
 800e484:	f7f2 f8b8 	bl	80005f8 <__aeabi_dmul>
 800e488:	4602      	mov	r2, r0
 800e48a:	460b      	mov	r3, r1
 800e48c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e490:	f7f1 fefa 	bl	8000288 <__aeabi_dsub>
 800e494:	f7f2 fb60 	bl	8000b58 <__aeabi_d2iz>
 800e498:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e49c:	f849 0b04 	str.w	r0, [r9], #4
 800e4a0:	4639      	mov	r1, r7
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	f7f1 fef2 	bl	800028c <__adddf3>
 800e4a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e4ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4b0:	e75d      	b.n	800e36e <__kernel_rem_pio2+0x10e>
 800e4b2:	d107      	bne.n	800e4c4 <__kernel_rem_pio2+0x264>
 800e4b4:	f108 33ff 	add.w	r3, r8, #4294967295
 800e4b8:	aa0c      	add	r2, sp, #48	@ 0x30
 800e4ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4be:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800e4c2:	e79e      	b.n	800e402 <__kernel_rem_pio2+0x1a2>
 800e4c4:	4b2f      	ldr	r3, [pc, #188]	@ (800e584 <__kernel_rem_pio2+0x324>)
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	f7f2 fb1c 	bl	8000b04 <__aeabi_dcmpge>
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	d143      	bne.n	800e558 <__kernel_rem_pio2+0x2f8>
 800e4d0:	4681      	mov	r9, r0
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	4639      	mov	r1, r7
 800e4da:	f7f2 faf5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	f000 80bf 	beq.w	800e662 <__kernel_rem_pio2+0x402>
 800e4e4:	f108 33ff 	add.w	r3, r8, #4294967295
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	9900      	ldr	r1, [sp, #0]
 800e4ec:	428b      	cmp	r3, r1
 800e4ee:	da6e      	bge.n	800e5ce <__kernel_rem_pio2+0x36e>
 800e4f0:	2a00      	cmp	r2, #0
 800e4f2:	f000 8089 	beq.w	800e608 <__kernel_rem_pio2+0x3a8>
 800e4f6:	f108 38ff 	add.w	r8, r8, #4294967295
 800e4fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800e4fc:	f1ab 0b18 	sub.w	fp, fp, #24
 800e500:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d0f6      	beq.n	800e4f6 <__kernel_rem_pio2+0x296>
 800e508:	4658      	mov	r0, fp
 800e50a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800e568 <__kernel_rem_pio2+0x308>
 800e50e:	f000 f9ff 	bl	800e910 <scalbn>
 800e512:	f108 0301 	add.w	r3, r8, #1
 800e516:	00da      	lsls	r2, r3, #3
 800e518:	9205      	str	r2, [sp, #20]
 800e51a:	ec55 4b10 	vmov	r4, r5, d0
 800e51e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800e520:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800e57c <__kernel_rem_pio2+0x31c>
 800e524:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800e528:	4646      	mov	r6, r8
 800e52a:	f04f 0a00 	mov.w	sl, #0
 800e52e:	2e00      	cmp	r6, #0
 800e530:	f280 80cf 	bge.w	800e6d2 <__kernel_rem_pio2+0x472>
 800e534:	4644      	mov	r4, r8
 800e536:	2c00      	cmp	r4, #0
 800e538:	f2c0 80fd 	blt.w	800e736 <__kernel_rem_pio2+0x4d6>
 800e53c:	4b12      	ldr	r3, [pc, #72]	@ (800e588 <__kernel_rem_pio2+0x328>)
 800e53e:	461f      	mov	r7, r3
 800e540:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e542:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e546:	9306      	str	r3, [sp, #24]
 800e548:	f04f 0a00 	mov.w	sl, #0
 800e54c:	f04f 0b00 	mov.w	fp, #0
 800e550:	2600      	movs	r6, #0
 800e552:	eba8 0504 	sub.w	r5, r8, r4
 800e556:	e0e2      	b.n	800e71e <__kernel_rem_pio2+0x4be>
 800e558:	f04f 0902 	mov.w	r9, #2
 800e55c:	e754      	b.n	800e408 <__kernel_rem_pio2+0x1a8>
 800e55e:	bf00      	nop
	...
 800e56c:	3ff00000 	.word	0x3ff00000
 800e570:	0800f0e0 	.word	0x0800f0e0
 800e574:	40200000 	.word	0x40200000
 800e578:	3ff00000 	.word	0x3ff00000
 800e57c:	3e700000 	.word	0x3e700000
 800e580:	41700000 	.word	0x41700000
 800e584:	3fe00000 	.word	0x3fe00000
 800e588:	0800f0a0 	.word	0x0800f0a0
 800e58c:	f854 3b04 	ldr.w	r3, [r4], #4
 800e590:	b945      	cbnz	r5, 800e5a4 <__kernel_rem_pio2+0x344>
 800e592:	b123      	cbz	r3, 800e59e <__kernel_rem_pio2+0x33e>
 800e594:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800e598:	f844 3c04 	str.w	r3, [r4, #-4]
 800e59c:	2301      	movs	r3, #1
 800e59e:	3201      	adds	r2, #1
 800e5a0:	461d      	mov	r5, r3
 800e5a2:	e738      	b.n	800e416 <__kernel_rem_pio2+0x1b6>
 800e5a4:	1acb      	subs	r3, r1, r3
 800e5a6:	e7f7      	b.n	800e598 <__kernel_rem_pio2+0x338>
 800e5a8:	f108 32ff 	add.w	r2, r8, #4294967295
 800e5ac:	ab0c      	add	r3, sp, #48	@ 0x30
 800e5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5b2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e5b6:	a90c      	add	r1, sp, #48	@ 0x30
 800e5b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e5bc:	e739      	b.n	800e432 <__kernel_rem_pio2+0x1d2>
 800e5be:	f108 32ff 	add.w	r2, r8, #4294967295
 800e5c2:	ab0c      	add	r3, sp, #48	@ 0x30
 800e5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e5cc:	e7f3      	b.n	800e5b6 <__kernel_rem_pio2+0x356>
 800e5ce:	a90c      	add	r1, sp, #48	@ 0x30
 800e5d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	430a      	orrs	r2, r1
 800e5d8:	e787      	b.n	800e4ea <__kernel_rem_pio2+0x28a>
 800e5da:	3401      	adds	r4, #1
 800e5dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e5e0:	2a00      	cmp	r2, #0
 800e5e2:	d0fa      	beq.n	800e5da <__kernel_rem_pio2+0x37a>
 800e5e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e5ea:	eb0d 0503 	add.w	r5, sp, r3
 800e5ee:	9b06      	ldr	r3, [sp, #24]
 800e5f0:	aa20      	add	r2, sp, #128	@ 0x80
 800e5f2:	4443      	add	r3, r8
 800e5f4:	f108 0701 	add.w	r7, r8, #1
 800e5f8:	3d98      	subs	r5, #152	@ 0x98
 800e5fa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800e5fe:	4444      	add	r4, r8
 800e600:	42bc      	cmp	r4, r7
 800e602:	da04      	bge.n	800e60e <__kernel_rem_pio2+0x3ae>
 800e604:	46a0      	mov	r8, r4
 800e606:	e6a2      	b.n	800e34e <__kernel_rem_pio2+0xee>
 800e608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e60a:	2401      	movs	r4, #1
 800e60c:	e7e6      	b.n	800e5dc <__kernel_rem_pio2+0x37c>
 800e60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e610:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e614:	f7f1 ff86 	bl	8000524 <__aeabi_i2d>
 800e618:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800e8e0 <__kernel_rem_pio2+0x680>
 800e61c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e620:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e628:	46b2      	mov	sl, r6
 800e62a:	f04f 0800 	mov.w	r8, #0
 800e62e:	9b05      	ldr	r3, [sp, #20]
 800e630:	4598      	cmp	r8, r3
 800e632:	dd05      	ble.n	800e640 <__kernel_rem_pio2+0x3e0>
 800e634:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e638:	3701      	adds	r7, #1
 800e63a:	eca5 7b02 	vstmia	r5!, {d7}
 800e63e:	e7df      	b.n	800e600 <__kernel_rem_pio2+0x3a0>
 800e640:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800e644:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e648:	f7f1 ffd6 	bl	80005f8 <__aeabi_dmul>
 800e64c:	4602      	mov	r2, r0
 800e64e:	460b      	mov	r3, r1
 800e650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e654:	f7f1 fe1a 	bl	800028c <__adddf3>
 800e658:	f108 0801 	add.w	r8, r8, #1
 800e65c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e660:	e7e5      	b.n	800e62e <__kernel_rem_pio2+0x3ce>
 800e662:	f1cb 0000 	rsb	r0, fp, #0
 800e666:	ec47 6b10 	vmov	d0, r6, r7
 800e66a:	f000 f951 	bl	800e910 <scalbn>
 800e66e:	ec55 4b10 	vmov	r4, r5, d0
 800e672:	4b9d      	ldr	r3, [pc, #628]	@ (800e8e8 <__kernel_rem_pio2+0x688>)
 800e674:	2200      	movs	r2, #0
 800e676:	4620      	mov	r0, r4
 800e678:	4629      	mov	r1, r5
 800e67a:	f7f2 fa43 	bl	8000b04 <__aeabi_dcmpge>
 800e67e:	b300      	cbz	r0, 800e6c2 <__kernel_rem_pio2+0x462>
 800e680:	4b9a      	ldr	r3, [pc, #616]	@ (800e8ec <__kernel_rem_pio2+0x68c>)
 800e682:	2200      	movs	r2, #0
 800e684:	4620      	mov	r0, r4
 800e686:	4629      	mov	r1, r5
 800e688:	f7f1 ffb6 	bl	80005f8 <__aeabi_dmul>
 800e68c:	f7f2 fa64 	bl	8000b58 <__aeabi_d2iz>
 800e690:	4606      	mov	r6, r0
 800e692:	f7f1 ff47 	bl	8000524 <__aeabi_i2d>
 800e696:	4b94      	ldr	r3, [pc, #592]	@ (800e8e8 <__kernel_rem_pio2+0x688>)
 800e698:	2200      	movs	r2, #0
 800e69a:	f7f1 ffad 	bl	80005f8 <__aeabi_dmul>
 800e69e:	460b      	mov	r3, r1
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	4629      	mov	r1, r5
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	f7f1 fdef 	bl	8000288 <__aeabi_dsub>
 800e6aa:	f7f2 fa55 	bl	8000b58 <__aeabi_d2iz>
 800e6ae:	ab0c      	add	r3, sp, #48	@ 0x30
 800e6b0:	f10b 0b18 	add.w	fp, fp, #24
 800e6b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e6b8:	f108 0801 	add.w	r8, r8, #1
 800e6bc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e6c0:	e722      	b.n	800e508 <__kernel_rem_pio2+0x2a8>
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	4629      	mov	r1, r5
 800e6c6:	f7f2 fa47 	bl	8000b58 <__aeabi_d2iz>
 800e6ca:	ab0c      	add	r3, sp, #48	@ 0x30
 800e6cc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e6d0:	e71a      	b.n	800e508 <__kernel_rem_pio2+0x2a8>
 800e6d2:	ab0c      	add	r3, sp, #48	@ 0x30
 800e6d4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e6d8:	f7f1 ff24 	bl	8000524 <__aeabi_i2d>
 800e6dc:	4622      	mov	r2, r4
 800e6de:	462b      	mov	r3, r5
 800e6e0:	f7f1 ff8a 	bl	80005f8 <__aeabi_dmul>
 800e6e4:	4652      	mov	r2, sl
 800e6e6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800e6ea:	465b      	mov	r3, fp
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	4629      	mov	r1, r5
 800e6f0:	f7f1 ff82 	bl	80005f8 <__aeabi_dmul>
 800e6f4:	3e01      	subs	r6, #1
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	460d      	mov	r5, r1
 800e6fa:	e718      	b.n	800e52e <__kernel_rem_pio2+0x2ce>
 800e6fc:	9906      	ldr	r1, [sp, #24]
 800e6fe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800e702:	9106      	str	r1, [sp, #24]
 800e704:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800e708:	f7f1 ff76 	bl	80005f8 <__aeabi_dmul>
 800e70c:	4602      	mov	r2, r0
 800e70e:	460b      	mov	r3, r1
 800e710:	4650      	mov	r0, sl
 800e712:	4659      	mov	r1, fp
 800e714:	f7f1 fdba 	bl	800028c <__adddf3>
 800e718:	3601      	adds	r6, #1
 800e71a:	4682      	mov	sl, r0
 800e71c:	468b      	mov	fp, r1
 800e71e:	9b00      	ldr	r3, [sp, #0]
 800e720:	429e      	cmp	r6, r3
 800e722:	dc01      	bgt.n	800e728 <__kernel_rem_pio2+0x4c8>
 800e724:	42b5      	cmp	r5, r6
 800e726:	dae9      	bge.n	800e6fc <__kernel_rem_pio2+0x49c>
 800e728:	ab48      	add	r3, sp, #288	@ 0x120
 800e72a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e72e:	e9c5 ab00 	strd	sl, fp, [r5]
 800e732:	3c01      	subs	r4, #1
 800e734:	e6ff      	b.n	800e536 <__kernel_rem_pio2+0x2d6>
 800e736:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e738:	2b02      	cmp	r3, #2
 800e73a:	dc0b      	bgt.n	800e754 <__kernel_rem_pio2+0x4f4>
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	dc39      	bgt.n	800e7b4 <__kernel_rem_pio2+0x554>
 800e740:	d05d      	beq.n	800e7fe <__kernel_rem_pio2+0x59e>
 800e742:	9b02      	ldr	r3, [sp, #8]
 800e744:	f003 0007 	and.w	r0, r3, #7
 800e748:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800e74c:	ecbd 8b02 	vpop	{d8}
 800e750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e754:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e756:	2b03      	cmp	r3, #3
 800e758:	d1f3      	bne.n	800e742 <__kernel_rem_pio2+0x4e2>
 800e75a:	9b05      	ldr	r3, [sp, #20]
 800e75c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e760:	eb0d 0403 	add.w	r4, sp, r3
 800e764:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800e768:	4625      	mov	r5, r4
 800e76a:	46c2      	mov	sl, r8
 800e76c:	f1ba 0f00 	cmp.w	sl, #0
 800e770:	f1a5 0508 	sub.w	r5, r5, #8
 800e774:	dc6b      	bgt.n	800e84e <__kernel_rem_pio2+0x5ee>
 800e776:	4645      	mov	r5, r8
 800e778:	2d01      	cmp	r5, #1
 800e77a:	f1a4 0408 	sub.w	r4, r4, #8
 800e77e:	f300 8087 	bgt.w	800e890 <__kernel_rem_pio2+0x630>
 800e782:	9c05      	ldr	r4, [sp, #20]
 800e784:	ab48      	add	r3, sp, #288	@ 0x120
 800e786:	441c      	add	r4, r3
 800e788:	2000      	movs	r0, #0
 800e78a:	2100      	movs	r1, #0
 800e78c:	f1b8 0f01 	cmp.w	r8, #1
 800e790:	f300 809c 	bgt.w	800e8cc <__kernel_rem_pio2+0x66c>
 800e794:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800e798:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800e79c:	f1b9 0f00 	cmp.w	r9, #0
 800e7a0:	f040 80a6 	bne.w	800e8f0 <__kernel_rem_pio2+0x690>
 800e7a4:	9b04      	ldr	r3, [sp, #16]
 800e7a6:	e9c3 7800 	strd	r7, r8, [r3]
 800e7aa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e7ae:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e7b2:	e7c6      	b.n	800e742 <__kernel_rem_pio2+0x4e2>
 800e7b4:	9d05      	ldr	r5, [sp, #20]
 800e7b6:	ab48      	add	r3, sp, #288	@ 0x120
 800e7b8:	441d      	add	r5, r3
 800e7ba:	4644      	mov	r4, r8
 800e7bc:	2000      	movs	r0, #0
 800e7be:	2100      	movs	r1, #0
 800e7c0:	2c00      	cmp	r4, #0
 800e7c2:	da35      	bge.n	800e830 <__kernel_rem_pio2+0x5d0>
 800e7c4:	f1b9 0f00 	cmp.w	r9, #0
 800e7c8:	d038      	beq.n	800e83c <__kernel_rem_pio2+0x5dc>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e7d0:	9c04      	ldr	r4, [sp, #16]
 800e7d2:	e9c4 2300 	strd	r2, r3, [r4]
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	460b      	mov	r3, r1
 800e7da:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e7de:	f7f1 fd53 	bl	8000288 <__aeabi_dsub>
 800e7e2:	ad4a      	add	r5, sp, #296	@ 0x128
 800e7e4:	2401      	movs	r4, #1
 800e7e6:	45a0      	cmp	r8, r4
 800e7e8:	da2b      	bge.n	800e842 <__kernel_rem_pio2+0x5e2>
 800e7ea:	f1b9 0f00 	cmp.w	r9, #0
 800e7ee:	d002      	beq.n	800e7f6 <__kernel_rem_pio2+0x596>
 800e7f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	9b04      	ldr	r3, [sp, #16]
 800e7f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e7fc:	e7a1      	b.n	800e742 <__kernel_rem_pio2+0x4e2>
 800e7fe:	9c05      	ldr	r4, [sp, #20]
 800e800:	ab48      	add	r3, sp, #288	@ 0x120
 800e802:	441c      	add	r4, r3
 800e804:	2000      	movs	r0, #0
 800e806:	2100      	movs	r1, #0
 800e808:	f1b8 0f00 	cmp.w	r8, #0
 800e80c:	da09      	bge.n	800e822 <__kernel_rem_pio2+0x5c2>
 800e80e:	f1b9 0f00 	cmp.w	r9, #0
 800e812:	d002      	beq.n	800e81a <__kernel_rem_pio2+0x5ba>
 800e814:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e818:	4619      	mov	r1, r3
 800e81a:	9b04      	ldr	r3, [sp, #16]
 800e81c:	e9c3 0100 	strd	r0, r1, [r3]
 800e820:	e78f      	b.n	800e742 <__kernel_rem_pio2+0x4e2>
 800e822:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e826:	f7f1 fd31 	bl	800028c <__adddf3>
 800e82a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e82e:	e7eb      	b.n	800e808 <__kernel_rem_pio2+0x5a8>
 800e830:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e834:	f7f1 fd2a 	bl	800028c <__adddf3>
 800e838:	3c01      	subs	r4, #1
 800e83a:	e7c1      	b.n	800e7c0 <__kernel_rem_pio2+0x560>
 800e83c:	4602      	mov	r2, r0
 800e83e:	460b      	mov	r3, r1
 800e840:	e7c6      	b.n	800e7d0 <__kernel_rem_pio2+0x570>
 800e842:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e846:	f7f1 fd21 	bl	800028c <__adddf3>
 800e84a:	3401      	adds	r4, #1
 800e84c:	e7cb      	b.n	800e7e6 <__kernel_rem_pio2+0x586>
 800e84e:	ed95 7b00 	vldr	d7, [r5]
 800e852:	ed8d 7b00 	vstr	d7, [sp]
 800e856:	ed95 7b02 	vldr	d7, [r5, #8]
 800e85a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e85e:	ec53 2b17 	vmov	r2, r3, d7
 800e862:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e866:	f7f1 fd11 	bl	800028c <__adddf3>
 800e86a:	4602      	mov	r2, r0
 800e86c:	460b      	mov	r3, r1
 800e86e:	4606      	mov	r6, r0
 800e870:	460f      	mov	r7, r1
 800e872:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e876:	f7f1 fd07 	bl	8000288 <__aeabi_dsub>
 800e87a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e87e:	f7f1 fd05 	bl	800028c <__adddf3>
 800e882:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e886:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e88a:	e9c5 6700 	strd	r6, r7, [r5]
 800e88e:	e76d      	b.n	800e76c <__kernel_rem_pio2+0x50c>
 800e890:	ed94 7b00 	vldr	d7, [r4]
 800e894:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e898:	ec51 0b17 	vmov	r0, r1, d7
 800e89c:	4652      	mov	r2, sl
 800e89e:	465b      	mov	r3, fp
 800e8a0:	ed8d 7b00 	vstr	d7, [sp]
 800e8a4:	f7f1 fcf2 	bl	800028c <__adddf3>
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	4606      	mov	r6, r0
 800e8ae:	460f      	mov	r7, r1
 800e8b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8b4:	f7f1 fce8 	bl	8000288 <__aeabi_dsub>
 800e8b8:	4652      	mov	r2, sl
 800e8ba:	465b      	mov	r3, fp
 800e8bc:	f7f1 fce6 	bl	800028c <__adddf3>
 800e8c0:	3d01      	subs	r5, #1
 800e8c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e8c6:	e9c4 6700 	strd	r6, r7, [r4]
 800e8ca:	e755      	b.n	800e778 <__kernel_rem_pio2+0x518>
 800e8cc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e8d0:	f7f1 fcdc 	bl	800028c <__adddf3>
 800e8d4:	f108 38ff 	add.w	r8, r8, #4294967295
 800e8d8:	e758      	b.n	800e78c <__kernel_rem_pio2+0x52c>
 800e8da:	bf00      	nop
 800e8dc:	f3af 8000 	nop.w
	...
 800e8e8:	41700000 	.word	0x41700000
 800e8ec:	3e700000 	.word	0x3e700000
 800e8f0:	9b04      	ldr	r3, [sp, #16]
 800e8f2:	9a04      	ldr	r2, [sp, #16]
 800e8f4:	601f      	str	r7, [r3, #0]
 800e8f6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800e8fa:	605c      	str	r4, [r3, #4]
 800e8fc:	609d      	str	r5, [r3, #8]
 800e8fe:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e902:	60d3      	str	r3, [r2, #12]
 800e904:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e908:	6110      	str	r0, [r2, #16]
 800e90a:	6153      	str	r3, [r2, #20]
 800e90c:	e719      	b.n	800e742 <__kernel_rem_pio2+0x4e2>
 800e90e:	bf00      	nop

0800e910 <scalbn>:
 800e910:	b570      	push	{r4, r5, r6, lr}
 800e912:	ec55 4b10 	vmov	r4, r5, d0
 800e916:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e91a:	4606      	mov	r6, r0
 800e91c:	462b      	mov	r3, r5
 800e91e:	b991      	cbnz	r1, 800e946 <scalbn+0x36>
 800e920:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e924:	4323      	orrs	r3, r4
 800e926:	d03d      	beq.n	800e9a4 <scalbn+0x94>
 800e928:	4b35      	ldr	r3, [pc, #212]	@ (800ea00 <scalbn+0xf0>)
 800e92a:	4620      	mov	r0, r4
 800e92c:	4629      	mov	r1, r5
 800e92e:	2200      	movs	r2, #0
 800e930:	f7f1 fe62 	bl	80005f8 <__aeabi_dmul>
 800e934:	4b33      	ldr	r3, [pc, #204]	@ (800ea04 <scalbn+0xf4>)
 800e936:	429e      	cmp	r6, r3
 800e938:	4604      	mov	r4, r0
 800e93a:	460d      	mov	r5, r1
 800e93c:	da0f      	bge.n	800e95e <scalbn+0x4e>
 800e93e:	a328      	add	r3, pc, #160	@ (adr r3, 800e9e0 <scalbn+0xd0>)
 800e940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e944:	e01e      	b.n	800e984 <scalbn+0x74>
 800e946:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e94a:	4291      	cmp	r1, r2
 800e94c:	d10b      	bne.n	800e966 <scalbn+0x56>
 800e94e:	4622      	mov	r2, r4
 800e950:	4620      	mov	r0, r4
 800e952:	4629      	mov	r1, r5
 800e954:	f7f1 fc9a 	bl	800028c <__adddf3>
 800e958:	4604      	mov	r4, r0
 800e95a:	460d      	mov	r5, r1
 800e95c:	e022      	b.n	800e9a4 <scalbn+0x94>
 800e95e:	460b      	mov	r3, r1
 800e960:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e964:	3936      	subs	r1, #54	@ 0x36
 800e966:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e96a:	4296      	cmp	r6, r2
 800e96c:	dd0d      	ble.n	800e98a <scalbn+0x7a>
 800e96e:	2d00      	cmp	r5, #0
 800e970:	a11d      	add	r1, pc, #116	@ (adr r1, 800e9e8 <scalbn+0xd8>)
 800e972:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e976:	da02      	bge.n	800e97e <scalbn+0x6e>
 800e978:	a11d      	add	r1, pc, #116	@ (adr r1, 800e9f0 <scalbn+0xe0>)
 800e97a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e97e:	a31a      	add	r3, pc, #104	@ (adr r3, 800e9e8 <scalbn+0xd8>)
 800e980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e984:	f7f1 fe38 	bl	80005f8 <__aeabi_dmul>
 800e988:	e7e6      	b.n	800e958 <scalbn+0x48>
 800e98a:	1872      	adds	r2, r6, r1
 800e98c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e990:	428a      	cmp	r2, r1
 800e992:	dcec      	bgt.n	800e96e <scalbn+0x5e>
 800e994:	2a00      	cmp	r2, #0
 800e996:	dd08      	ble.n	800e9aa <scalbn+0x9a>
 800e998:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e99c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e9a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e9a4:	ec45 4b10 	vmov	d0, r4, r5
 800e9a8:	bd70      	pop	{r4, r5, r6, pc}
 800e9aa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e9ae:	da08      	bge.n	800e9c2 <scalbn+0xb2>
 800e9b0:	2d00      	cmp	r5, #0
 800e9b2:	a10b      	add	r1, pc, #44	@ (adr r1, 800e9e0 <scalbn+0xd0>)
 800e9b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9b8:	dac1      	bge.n	800e93e <scalbn+0x2e>
 800e9ba:	a10f      	add	r1, pc, #60	@ (adr r1, 800e9f8 <scalbn+0xe8>)
 800e9bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9c0:	e7bd      	b.n	800e93e <scalbn+0x2e>
 800e9c2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e9c6:	3236      	adds	r2, #54	@ 0x36
 800e9c8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e9cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	4b0d      	ldr	r3, [pc, #52]	@ (800ea08 <scalbn+0xf8>)
 800e9d4:	4629      	mov	r1, r5
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	e7d4      	b.n	800e984 <scalbn+0x74>
 800e9da:	bf00      	nop
 800e9dc:	f3af 8000 	nop.w
 800e9e0:	c2f8f359 	.word	0xc2f8f359
 800e9e4:	01a56e1f 	.word	0x01a56e1f
 800e9e8:	8800759c 	.word	0x8800759c
 800e9ec:	7e37e43c 	.word	0x7e37e43c
 800e9f0:	8800759c 	.word	0x8800759c
 800e9f4:	fe37e43c 	.word	0xfe37e43c
 800e9f8:	c2f8f359 	.word	0xc2f8f359
 800e9fc:	81a56e1f 	.word	0x81a56e1f
 800ea00:	43500000 	.word	0x43500000
 800ea04:	ffff3cb0 	.word	0xffff3cb0
 800ea08:	3c900000 	.word	0x3c900000
 800ea0c:	00000000 	.word	0x00000000

0800ea10 <floor>:
 800ea10:	ec51 0b10 	vmov	r0, r1, d0
 800ea14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ea18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea1c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ea20:	2e13      	cmp	r6, #19
 800ea22:	460c      	mov	r4, r1
 800ea24:	4605      	mov	r5, r0
 800ea26:	4680      	mov	r8, r0
 800ea28:	dc34      	bgt.n	800ea94 <floor+0x84>
 800ea2a:	2e00      	cmp	r6, #0
 800ea2c:	da17      	bge.n	800ea5e <floor+0x4e>
 800ea2e:	a332      	add	r3, pc, #200	@ (adr r3, 800eaf8 <floor+0xe8>)
 800ea30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea34:	f7f1 fc2a 	bl	800028c <__adddf3>
 800ea38:	2200      	movs	r2, #0
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	f7f2 f86c 	bl	8000b18 <__aeabi_dcmpgt>
 800ea40:	b150      	cbz	r0, 800ea58 <floor+0x48>
 800ea42:	2c00      	cmp	r4, #0
 800ea44:	da55      	bge.n	800eaf2 <floor+0xe2>
 800ea46:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ea4a:	432c      	orrs	r4, r5
 800ea4c:	2500      	movs	r5, #0
 800ea4e:	42ac      	cmp	r4, r5
 800ea50:	4c2b      	ldr	r4, [pc, #172]	@ (800eb00 <floor+0xf0>)
 800ea52:	bf08      	it	eq
 800ea54:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ea58:	4621      	mov	r1, r4
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	e023      	b.n	800eaa6 <floor+0x96>
 800ea5e:	4f29      	ldr	r7, [pc, #164]	@ (800eb04 <floor+0xf4>)
 800ea60:	4137      	asrs	r7, r6
 800ea62:	ea01 0307 	and.w	r3, r1, r7
 800ea66:	4303      	orrs	r3, r0
 800ea68:	d01d      	beq.n	800eaa6 <floor+0x96>
 800ea6a:	a323      	add	r3, pc, #140	@ (adr r3, 800eaf8 <floor+0xe8>)
 800ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea70:	f7f1 fc0c 	bl	800028c <__adddf3>
 800ea74:	2200      	movs	r2, #0
 800ea76:	2300      	movs	r3, #0
 800ea78:	f7f2 f84e 	bl	8000b18 <__aeabi_dcmpgt>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	d0eb      	beq.n	800ea58 <floor+0x48>
 800ea80:	2c00      	cmp	r4, #0
 800ea82:	bfbe      	ittt	lt
 800ea84:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ea88:	4133      	asrlt	r3, r6
 800ea8a:	18e4      	addlt	r4, r4, r3
 800ea8c:	ea24 0407 	bic.w	r4, r4, r7
 800ea90:	2500      	movs	r5, #0
 800ea92:	e7e1      	b.n	800ea58 <floor+0x48>
 800ea94:	2e33      	cmp	r6, #51	@ 0x33
 800ea96:	dd0a      	ble.n	800eaae <floor+0x9e>
 800ea98:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ea9c:	d103      	bne.n	800eaa6 <floor+0x96>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	f7f1 fbf3 	bl	800028c <__adddf3>
 800eaa6:	ec41 0b10 	vmov	d0, r0, r1
 800eaaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800eab2:	f04f 37ff 	mov.w	r7, #4294967295
 800eab6:	40df      	lsrs	r7, r3
 800eab8:	4207      	tst	r7, r0
 800eaba:	d0f4      	beq.n	800eaa6 <floor+0x96>
 800eabc:	a30e      	add	r3, pc, #56	@ (adr r3, 800eaf8 <floor+0xe8>)
 800eabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac2:	f7f1 fbe3 	bl	800028c <__adddf3>
 800eac6:	2200      	movs	r2, #0
 800eac8:	2300      	movs	r3, #0
 800eaca:	f7f2 f825 	bl	8000b18 <__aeabi_dcmpgt>
 800eace:	2800      	cmp	r0, #0
 800ead0:	d0c2      	beq.n	800ea58 <floor+0x48>
 800ead2:	2c00      	cmp	r4, #0
 800ead4:	da0a      	bge.n	800eaec <floor+0xdc>
 800ead6:	2e14      	cmp	r6, #20
 800ead8:	d101      	bne.n	800eade <floor+0xce>
 800eada:	3401      	adds	r4, #1
 800eadc:	e006      	b.n	800eaec <floor+0xdc>
 800eade:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800eae2:	2301      	movs	r3, #1
 800eae4:	40b3      	lsls	r3, r6
 800eae6:	441d      	add	r5, r3
 800eae8:	4545      	cmp	r5, r8
 800eaea:	d3f6      	bcc.n	800eada <floor+0xca>
 800eaec:	ea25 0507 	bic.w	r5, r5, r7
 800eaf0:	e7b2      	b.n	800ea58 <floor+0x48>
 800eaf2:	2500      	movs	r5, #0
 800eaf4:	462c      	mov	r4, r5
 800eaf6:	e7af      	b.n	800ea58 <floor+0x48>
 800eaf8:	8800759c 	.word	0x8800759c
 800eafc:	7e37e43c 	.word	0x7e37e43c
 800eb00:	bff00000 	.word	0xbff00000
 800eb04:	000fffff 	.word	0x000fffff

0800eb08 <_init>:
 800eb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb0a:	bf00      	nop
 800eb0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb0e:	bc08      	pop	{r3}
 800eb10:	469e      	mov	lr, r3
 800eb12:	4770      	bx	lr

0800eb14 <_fini>:
 800eb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb16:	bf00      	nop
 800eb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb1a:	bc08      	pop	{r3}
 800eb1c:	469e      	mov	lr, r3
 800eb1e:	4770      	bx	lr
